<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="742" onload="init(evt)" viewBox="0 0 1200 742" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="725"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="725"> </text>
<g id="frames">
<g>
<title>all (1,133 samples, 100.00%)</title><rect x="10.0" y="691.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="702.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="10.0" y="675.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>heap_trim (1 samples, 0.09%)</title><rect x="10.0" y="659.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (255 samples, 22.51%)</title><rect x="11.0" y="675.0" width="265.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.0" y="686.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.09%)</title><rect x="12.1" y="659.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="15.1" y="670.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.09%)</title><rect x="12.1" y="643.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="15.1" y="654.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_back_branch_event(methodHandle, methodHandle, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.09%)</title><rect x="12.1" y="627.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="15.1" y="638.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.09%)</title><rect x="12.1" y="611.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="15.1" y="622.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::submit_compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.09%)</title><rect x="12.1" y="595.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="15.1" y="606.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.09%)</title><rect x="12.1" y="579.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="15.1" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::lookup_osr_nmethod(Method const*, int, int, bool) const (1 samples, 0.09%)</title><rect x="12.1" y="563.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="15.1" y="574.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.09%)</title><rect x="12.1" y="547.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="15.1" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (253 samples, 22.33%)</title><rect x="13.1" y="659.0" width="263.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.1" y="670.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (2 samples, 0.18%)</title><rect x="13.1" y="643.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.1" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (2 samples, 0.18%)</title><rect x="13.1" y="627.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.1" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.18%)</title><rect x="13.1" y="611.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.1" y="622.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.18%)</title><rect x="13.1" y="595.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.1" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.18%)</title><rect x="13.1" y="579.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.1" y="590.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.18%)</title><rect x="13.1" y="563.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.1" y="574.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.18%)</title><rect x="13.1" y="547.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.1" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.09%)</title><rect x="13.1" y="531.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="16.1" y="542.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.09%)</title><rect x="13.1" y="515.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="16.1" y="526.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.09%)</title><rect x="13.1" y="499.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.1" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.09%)</title><rect x="13.1" y="483.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="16.1" y="494.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$182/1533197496.get (1 samples, 0.09%)</title><rect x="13.1" y="467.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.1" y="478.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.09%)</title><rect x="14.2" y="531.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="17.2" y="542.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.09%)</title><rect x="14.2" y="515.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="17.2" y="526.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="14.2" y="499.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="17.2" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.09%)</title><rect x="15.2" y="643.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="18.2" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.09%)</title><rect x="15.2" y="627.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="18.2" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (3 samples, 0.26%)</title><rect x="16.2" y="643.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.2" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (3 samples, 0.26%)</title><rect x="16.2" y="627.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="19.2" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (3 samples, 0.26%)</title><rect x="16.2" y="611.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.2" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$270/1507660901.accept (3 samples, 0.26%)</title><rect x="16.2" y="595.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.2" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (3 samples, 0.26%)</title><rect x="16.2" y="579.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.2" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (3 samples, 0.26%)</title><rect x="16.2" y="563.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.2" y="574.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (3 samples, 0.26%)</title><rect x="16.2" y="547.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="19.2" y="558.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (174 samples, 15.36%)</title><rect x="19.4" y="643.0" width="181.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.4" y="654.0">java/lang/Iterable.forE..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$269/128496465.accept (163 samples, 14.39%)</title><rect x="20.4" y="627.0" width="169.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.4" y="638.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (163 samples, 14.39%)</title><rect x="20.4" y="611.0" width="169.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="23.4" y="622.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (149 samples, 13.15%)</title><rect x="21.5" y="595.0" width="155.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.5" y="606.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (149 samples, 13.15%)</title><rect x="21.5" y="579.0" width="155.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="24.5" y="590.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (149 samples, 13.15%)</title><rect x="21.5" y="563.0" width="155.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="24.5" y="574.0">com/linecorp/decaton..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (149 samples, 13.15%)</title><rect x="21.5" y="547.0" width="155.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="24.5" y="558.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (149 samples, 13.15%)</title><rect x="21.5" y="531.0" width="155.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="24.5" y="542.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (149 samples, 13.15%)</title><rect x="21.5" y="515.0" width="155.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="24.5" y="526.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (101 samples, 8.91%)</title><rect x="65.2" y="499.0" width="105.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="68.2" y="510.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (21 samples, 1.85%)</title><rect x="65.2" y="483.0" width="21.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="68.2" y="494.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (21 samples, 1.85%)</title><rect x="65.2" y="467.0" width="21.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="68.2" y="478.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (21 samples, 1.85%)</title><rect x="65.2" y="451.0" width="21.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="68.2" y="462.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.44%)</title><rect x="87.1" y="483.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="90.1" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (5 samples, 0.44%)</title><rect x="87.1" y="467.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="90.1" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.18%)</title><rect x="88.1" y="451.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="91.1" y="462.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (2 samples, 0.18%)</title><rect x="88.1" y="435.0" width="2.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="91.1" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.18%)</title><rect x="90.2" y="451.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="93.2" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (75 samples, 6.62%)</title><rect x="92.3" y="483.0" width="78.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="95.3" y="494.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (75 samples, 6.62%)</title><rect x="92.3" y="467.0" width="78.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="95.3" y="478.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (74 samples, 6.53%)</title><rect x="92.3" y="451.0" width="77.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="95.3" y="462.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (74 samples, 6.53%)</title><rect x="92.3" y="435.0" width="77.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="95.3" y="446.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (72 samples, 6.35%)</title><rect x="94.4" y="419.0" width="74.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="97.4" y="430.0">sun/misc..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="96.4" y="403.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="99.4" y="414.0"></text>
</g>
<g>
<title>Unsafe_Unpark (61 samples, 5.38%)</title><rect x="97.5" y="403.0" width="63.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="100.5" y="414.0">Unsafe_..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.09%)</title><rect x="99.6" y="387.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="102.6" y="398.0"></text>
</g>
<g>
<title>__pthread_cond_signal (34 samples, 3.00%)</title><rect x="100.6" y="387.0" width="35.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="103.6" y="398.0">__p..</text>
</g>
<g>
<title>_init (1 samples, 0.09%)</title><rect x="136.0" y="387.0" width="1.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="139.0" y="398.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (3 samples, 0.26%)</title><rect x="137.1" y="387.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="140.1" y="398.0"></text>
</g>
<g>
<title>pthread_mutex_lock (20 samples, 1.77%)</title><rect x="140.2" y="387.0" width="20.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="143.2" y="398.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 0.44%)</title><rect x="161.0" y="403.0" width="5.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="164.0" y="414.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.26%)</title><rect x="166.2" y="403.0" width="3.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="169.2" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.09%)</title><rect x="169.3" y="451.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="172.3" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.26%)</title><rect x="170.4" y="499.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="173.4" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (3 samples, 0.26%)</title><rect x="170.4" y="483.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="173.4" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.26%)</title><rect x="170.4" y="467.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="173.4" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.26%)</title><rect x="173.5" y="499.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="176.5" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.26%)</title><rect x="173.5" y="483.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="176.5" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (3 samples, 0.26%)</title><rect x="173.5" y="467.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="176.5" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.18%)</title><rect x="174.6" y="451.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="177.6" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (7 samples, 0.62%)</title><rect x="176.6" y="595.0" width="7.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="179.6" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (7 samples, 0.62%)</title><rect x="176.6" y="579.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="179.6" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (6 samples, 0.53%)</title><rect x="183.9" y="595.0" width="6.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="186.9" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.53%)</title><rect x="183.9" y="579.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="186.9" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.53%)</title><rect x="183.9" y="563.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="186.9" y="574.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="190.2" y="627.0" width="1.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="193.2" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.09%)</title><rect x="191.2" y="627.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="194.2" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.09%)</title><rect x="191.2" y="611.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="194.2" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.09%)</title><rect x="192.3" y="627.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="195.3" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.09%)</title><rect x="192.3" y="611.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="195.3" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.09%)</title><rect x="192.3" y="595.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="195.3" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.values (1 samples, 0.09%)</title><rect x="192.3" y="579.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="195.3" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (6 samples, 0.53%)</title><rect x="193.3" y="627.0" width="6.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="196.3" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (6 samples, 0.53%)</title><rect x="193.3" y="611.0" width="6.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="196.3" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (6 samples, 0.53%)</title><rect x="193.3" y="595.0" width="6.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="196.3" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (6 samples, 0.53%)</title><rect x="193.3" y="579.0" width="6.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="196.3" y="590.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (5 samples, 0.44%)</title><rect x="194.3" y="563.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="197.3" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.09%)</title><rect x="199.5" y="627.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="202.5" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (73 samples, 6.44%)</title><rect x="200.6" y="643.0" width="76.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="203.6" y="654.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (73 samples, 6.44%)</title><rect x="200.6" y="627.0" width="76.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="203.6" y="638.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (43 samples, 3.80%)</title><rect x="200.6" y="611.0" width="44.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="203.6" y="622.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (42 samples, 3.71%)</title><rect x="201.6" y="595.0" width="43.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="204.6" y="606.0">org/..</text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="201.6" y="579.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="204.6" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (41 samples, 3.62%)</title><rect x="202.7" y="579.0" width="42.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="205.7" y="590.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (35 samples, 3.09%)</title><rect x="203.7" y="563.0" width="36.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="206.7" y="574.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (35 samples, 3.09%)</title><rect x="203.7" y="547.0" width="36.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="206.7" y="558.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (17 samples, 1.50%)</title><rect x="203.7" y="531.0" width="17.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="206.7" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (12 samples, 1.06%)</title><rect x="203.7" y="515.0" width="12.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="206.7" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (12 samples, 1.06%)</title><rect x="203.7" y="499.0" width="12.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="206.7" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (12 samples, 1.06%)</title><rect x="203.7" y="483.0" width="12.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="206.7" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (12 samples, 1.06%)</title><rect x="203.7" y="467.0" width="12.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="206.7" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (12 samples, 1.06%)</title><rect x="203.7" y="451.0" width="12.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="206.7" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (12 samples, 1.06%)</title><rect x="203.7" y="435.0" width="12.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="206.7" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (12 samples, 1.06%)</title><rect x="203.7" y="419.0" width="12.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="206.7" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (4 samples, 0.35%)</title><rect x="216.2" y="515.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="219.2" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (4 samples, 0.35%)</title><rect x="216.2" y="499.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="219.2" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.nextOffset (1 samples, 0.09%)</title><rect x="220.4" y="515.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="223.4" y="526.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="220.4" y="499.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="223.4" y="510.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="220.4" y="483.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="223.4" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="220.4" y="467.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="223.4" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="220.4" y="451.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="223.4" y="462.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.09%)</title><rect x="220.4" y="435.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="223.4" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (18 samples, 1.59%)</title><rect x="221.4" y="531.0" width="18.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="224.4" y="542.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.09%)</title><rect x="222.5" y="515.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="225.5" y="526.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="223.5" y="515.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="226.5" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="223.5" y="499.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="226.5" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.09%)</title><rect x="223.5" y="483.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="226.5" y="494.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::write_region_work(MemRegion) (1 samples, 0.09%)</title><rect x="223.5" y="467.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="226.5" y="478.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::invalidate(MemRegion, bool) (1 samples, 0.09%)</title><rect x="223.5" y="451.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="226.5" y="462.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.09%)</title><rect x="223.5" y="435.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="226.5" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (15 samples, 1.32%)</title><rect x="224.5" y="515.0" width="15.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="227.5" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (8 samples, 0.71%)</title><rect x="227.7" y="499.0" width="8.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="230.7" y="510.0"></text>
</g>
<g>
<title>java/util/Optional.of (8 samples, 0.71%)</title><rect x="227.7" y="483.0" width="8.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="230.7" y="494.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.26%)</title><rect x="232.9" y="467.0" width="3.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="235.9" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (4 samples, 0.35%)</title><rect x="236.0" y="499.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="239.0" y="510.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (3 samples, 0.26%)</title><rect x="237.0" y="483.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="240.0" y="494.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (1 samples, 0.09%)</title><rect x="238.1" y="467.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="241.1" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.09%)</title><rect x="238.1" y="451.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="241.1" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (1 samples, 0.09%)</title><rect x="238.1" y="435.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="241.1" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.09%)</title><rect x="238.1" y="419.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="241.1" y="430.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="238.1" y="403.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="241.1" y="414.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.09%)</title><rect x="238.1" y="387.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="241.1" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="238.1" y="371.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="241.1" y="382.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="239.1" y="467.0" width="1.1" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="242.1" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.18%)</title><rect x="240.2" y="563.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="243.2" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.18%)</title><rect x="240.2" y="547.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="243.2" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.09%)</title><rect x="240.2" y="531.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="243.2" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.09%)</title><rect x="240.2" y="515.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="243.2" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="241.2" y="531.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="244.2" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="241.2" y="515.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="244.2" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="241.2" y="499.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="244.2" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (3 samples, 0.26%)</title><rect x="242.3" y="563.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="245.3" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (3 samples, 0.26%)</title><rect x="242.3" y="547.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="245.3" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.09%)</title><rect x="242.3" y="531.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="245.3" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.09%)</title><rect x="242.3" y="515.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="245.3" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.18%)</title><rect x="243.3" y="531.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="246.3" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.18%)</title><rect x="243.3" y="515.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="246.3" y="526.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="243.3" y="499.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="246.3" y="510.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="244.3" y="499.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="247.3" y="510.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="244.3" y="483.0" width="1.1" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="247.3" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (11 samples, 0.97%)</title><rect x="245.4" y="611.0" width="11.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="248.4" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (10 samples, 0.88%)</title><rect x="245.4" y="595.0" width="10.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="248.4" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (9 samples, 0.79%)</title><rect x="245.4" y="579.0" width="9.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="248.4" y="590.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.18%)</title><rect x="245.4" y="563.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="248.4" y="574.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.09%)</title><rect x="245.4" y="547.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="248.4" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$233/144795162.accept (1 samples, 0.09%)</title><rect x="246.4" y="547.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="249.4" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.09%)</title><rect x="246.4" y="531.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="249.4" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.09%)</title><rect x="246.4" y="515.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="249.4" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.09%)</title><rect x="246.4" y="499.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="249.4" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="246.4" y="483.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="249.4" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="246.4" y="467.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="249.4" y="478.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="247.5" y="563.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="250.5" y="574.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="247.5" y="547.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="250.5" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="247.5" y="531.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="250.5" y="542.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="247.5" y="515.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="250.5" y="526.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="247.5" y="499.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="250.5" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.09%)</title><rect x="247.5" y="483.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="250.5" y="494.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="247.5" y="467.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="250.5" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.09%)</title><rect x="248.5" y="563.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="251.5" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.09%)</title><rect x="248.5" y="547.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="251.5" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (3 samples, 0.26%)</title><rect x="249.5" y="563.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="252.5" y="574.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (3 samples, 0.26%)</title><rect x="249.5" y="547.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="252.5" y="558.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (3 samples, 0.26%)</title><rect x="249.5" y="531.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="252.5" y="542.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (1 samples, 0.09%)</title><rect x="249.5" y="515.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="252.5" y="526.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeySet.iterator (1 samples, 0.09%)</title><rect x="249.5" y="499.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="252.5" y="510.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.18%)</title><rect x="250.6" y="515.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="253.6" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.18%)</title><rect x="250.6" y="499.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="253.6" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.18%)</title><rect x="252.7" y="563.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="255.7" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.18%)</title><rect x="252.7" y="547.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="255.7" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="253.7" y="531.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="256.7" y="542.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="253.7" y="515.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="256.7" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.09%)</title><rect x="254.7" y="579.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="257.7" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.09%)</title><rect x="254.7" y="563.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="257.7" y="574.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="254.7" y="547.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="257.7" y="558.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.09%)</title><rect x="254.7" y="531.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="257.7" y="542.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.09%)</title><rect x="254.7" y="515.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="257.7" y="526.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$$Lambda$49/1791045777.get (1 samples, 0.09%)</title><rect x="254.7" y="499.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="257.7" y="510.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps.lambda$makeRef$237 (1 samples, 0.09%)</title><rect x="254.7" y="483.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="257.7" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.09%)</title><rect x="255.8" y="595.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="258.8" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.invokeCompletedOffsetCommitCallbacks (1 samples, 0.09%)</title><rect x="255.8" y="579.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="258.8" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (1 samples, 0.09%)</title><rect x="255.8" y="563.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="258.8" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerInterceptors.onConsume (1 samples, 0.09%)</title><rect x="256.8" y="611.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="259.8" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (6 samples, 0.53%)</title><rect x="257.9" y="611.0" width="6.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="260.9" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 0.35%)</title><rect x="257.9" y="595.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="260.9" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (4 samples, 0.35%)</title><rect x="257.9" y="579.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="260.9" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.completeDelayedChannelClose (1 samples, 0.09%)</title><rect x="257.9" y="563.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="260.9" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (3 samples, 0.26%)</title><rect x="258.9" y="563.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="261.9" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.09%)</title><rect x="258.9" y="547.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="261.9" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.09%)</title><rect x="258.9" y="531.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="261.9" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.09%)</title><rect x="258.9" y="515.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="261.9" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.09%)</title><rect x="258.9" y="499.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="261.9" y="510.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.09%)</title><rect x="258.9" y="483.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="261.9" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.09%)</title><rect x="258.9" y="467.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="261.9" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.18%)</title><rect x="260.0" y="547.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="263.0" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.09%)</title><rect x="260.0" y="531.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="263.0" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="260.0" y="515.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="263.0" y="526.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="260.0" y="499.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="263.0" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.hasStagedReceive (1 samples, 0.09%)</title><rect x="261.0" y="531.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="264.0" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.09%)</title><rect x="261.0" y="515.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="264.0" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="261.0" y="499.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="264.0" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.18%)</title><rect x="262.0" y="595.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="265.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (2 samples, 0.18%)</title><rect x="262.0" y="579.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="265.0" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.18%)</title><rect x="262.0" y="563.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="265.0" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.18%)</title><rect x="262.0" y="547.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="265.0" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.send (1 samples, 0.09%)</title><rect x="262.0" y="531.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="265.0" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.destination (1 samples, 0.09%)</title><rect x="262.0" y="515.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="265.0" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.09%)</title><rect x="263.1" y="531.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="266.1" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.09%)</title><rect x="263.1" y="515.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="266.1" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.09%)</title><rect x="263.1" y="499.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="266.1" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.09%)</title><rect x="263.1" y="483.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="266.1" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.09%)</title><rect x="263.1" y="467.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="266.1" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$10.write (1 samples, 0.09%)</title><rect x="263.1" y="451.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="266.1" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.09%)</title><rect x="263.1" y="435.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="266.1" y="446.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.09%)</title><rect x="263.1" y="419.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="266.1" y="430.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.09%)</title><rect x="263.1" y="403.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="266.1" y="414.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (1 samples, 0.09%)</title><rect x="263.1" y="387.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="266.1" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (7 samples, 0.62%)</title><rect x="264.1" y="611.0" width="7.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="267.1" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (6 samples, 0.53%)</title><rect x="265.2" y="595.0" width="6.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="268.2" y="606.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.09%)</title><rect x="265.2" y="579.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="268.2" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$257/1383281321.accept (1 samples, 0.09%)</title><rect x="265.2" y="563.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="268.2" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.09%)</title><rect x="265.2" y="547.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="268.2" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.09%)</title><rect x="265.2" y="531.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="268.2" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.09%)</title><rect x="265.2" y="515.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="268.2" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="265.2" y="499.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="268.2" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="265.2" y="483.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="268.2" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (5 samples, 0.44%)</title><rect x="266.2" y="579.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="269.2" y="590.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="267.2" y="563.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="270.2" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (3 samples, 0.26%)</title><rect x="268.3" y="563.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="271.3" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.26%)</title><rect x="268.3" y="547.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="271.3" y="558.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.26%)</title><rect x="268.3" y="531.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="271.3" y="542.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.26%)</title><rect x="268.3" y="515.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="271.3" y="526.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.26%)</title><rect x="268.3" y="499.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="271.3" y="510.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.18%)</title><rect x="268.3" y="483.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="271.3" y="494.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (2 samples, 0.18%)</title><rect x="268.3" y="467.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="271.3" y="478.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (2 samples, 0.18%)</title><rect x="268.3" y="451.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="271.3" y="462.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (2 samples, 0.18%)</title><rect x="268.3" y="435.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="271.3" y="446.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.18%)</title><rect x="268.3" y="419.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="271.3" y="430.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="268.3" y="403.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="271.3" y="414.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="268.3" y="387.0" width="1.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="271.3" y="398.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="269.3" y="403.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="272.3" y="414.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.accept (1 samples, 0.09%)</title><rect x="269.3" y="387.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="272.3" y="398.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$183/349008998.accept (1 samples, 0.09%)</title><rect x="269.3" y="371.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="272.3" y="382.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.09%)</title><rect x="269.3" y="355.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="272.3" y="366.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureCapacityInternal (1 samples, 0.09%)</title><rect x="269.3" y="339.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="272.3" y="350.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureExplicitCapacity (1 samples, 0.09%)</title><rect x="269.3" y="323.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="272.3" y="334.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.09%)</title><rect x="269.3" y="307.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="272.3" y="318.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.09%)</title><rect x="269.3" y="291.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="272.3" y="302.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.09%)</title><rect x="270.4" y="483.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="273.4" y="494.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.09%)</title><rect x="270.4" y="467.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="273.4" y="478.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.09%)</title><rect x="270.4" y="451.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="273.4" y="462.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.09%)</title><rect x="270.4" y="435.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="273.4" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (3 samples, 0.26%)</title><rect x="271.4" y="611.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="274.4" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.26%)</title><rect x="271.4" y="595.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="274.4" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.18%)</title><rect x="272.5" y="579.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="275.5" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="272.5" y="563.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="275.5" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/SystemTime.milliseconds (1 samples, 0.09%)</title><rect x="273.5" y="563.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="276.5" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (2 samples, 0.18%)</title><rect x="274.5" y="611.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="277.5" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.18%)</title><rect x="274.5" y="595.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="277.5" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.18%)</title><rect x="274.5" y="579.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="277.5" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="274.5" y="563.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="277.5" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="274.5" y="547.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="277.5" y="558.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="275.6" y="563.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="278.6" y="574.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="275.6" y="547.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="278.6" y="558.0"></text>
</g>
<g>
<title>java/lang/Thread.run (810 samples, 71.49%)</title><rect x="276.6" y="675.0" width="843.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="279.6" y="686.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (810 samples, 71.49%)</title><rect x="276.6" y="659.0" width="843.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="279.6" y="670.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (810 samples, 71.49%)</title><rect x="276.6" y="643.0" width="843.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="279.6" y="654.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$285/744173637.run (549 samples, 48.46%)</title><rect x="276.6" y="627.0" width="571.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="279.6" y="638.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$285/74417..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$69 (549 samples, 48.46%)</title><rect x="276.6" y="611.0" width="571.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="279.6" y="622.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$69</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (548 samples, 48.37%)</title><rect x="277.7" y="595.0" width="570.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="280.7" y="606.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (538 samples, 47.48%)</title><rect x="277.7" y="579.0" width="560.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="280.7" y="590.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenPr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (192 samples, 16.95%)</title><rect x="294.3" y="563.0" width="200.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="297.3" y="574.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$43/416153648.extract (192 samples, 16.95%)</title><rect x="294.3" y="547.0" width="200.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="297.3" y="558.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (192 samples, 16.95%)</title><rect x="294.3" y="531.0" width="200.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="297.3" y="542.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (192 samples, 16.95%)</title><rect x="294.3" y="515.0" width="200.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="297.3" y="526.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (192 samples, 16.95%)</title><rect x="294.3" y="499.0" width="200.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="297.3" y="510.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (192 samples, 16.95%)</title><rect x="294.3" y="483.0" width="200.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="297.3" y="494.0">com/fasterxml/jackson/data..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (72 samples, 6.35%)</title><rect x="294.3" y="467.0" width="75.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="297.3" y="478.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (35 samples, 3.09%)</title><rect x="294.3" y="451.0" width="36.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="297.3" y="462.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (32 samples, 2.82%)</title><rect x="294.3" y="435.0" width="33.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="297.3" y="446.0">co..</text>
</g>
<g>
<title>[vdso] (3 samples, 0.26%)</title><rect x="309.9" y="419.0" width="3.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="312.9" y="430.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.62%)</title><rect x="313.1" y="419.0" width="7.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="316.1" y="430.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.35%)</title><rect x="316.2" y="403.0" width="4.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="319.2" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (2 samples, 0.18%)</title><rect x="320.4" y="419.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="323.4" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (5 samples, 0.44%)</title><rect x="322.4" y="419.0" width="5.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="325.4" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.44%)</title><rect x="322.4" y="403.0" width="5.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="325.4" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (5 samples, 0.44%)</title><rect x="322.4" y="387.0" width="5.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="325.4" y="398.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 0.44%)</title><rect x="322.4" y="371.0" width="5.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="325.4" y="382.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (5 samples, 0.44%)</title><rect x="322.4" y="355.0" width="5.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="325.4" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.&lt;init&gt; (3 samples, 0.26%)</title><rect x="327.7" y="435.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="330.7" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.18%)</title><rect x="327.7" y="419.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="330.7" y="430.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.09%)</title><rect x="329.7" y="419.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="332.7" y="430.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (1 samples, 0.09%)</title><rect x="329.7" y="403.0" width="1.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="332.7" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (37 samples, 3.27%)</title><rect x="330.8" y="451.0" width="38.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="333.8" y="462.0">com..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.18%)</title><rect x="330.8" y="435.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="333.8" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="331.8" y="419.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="334.8" y="430.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.09%)</title><rect x="331.8" y="403.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="334.8" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.&lt;init&gt; (2 samples, 0.18%)</title><rect x="332.9" y="435.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="335.9" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (33 samples, 2.91%)</title><rect x="334.9" y="435.0" width="34.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="337.9" y="446.0">co..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="339.1" y="419.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="342.1" y="430.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="339.1" y="403.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="342.1" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="339.1" y="387.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="342.1" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (2 samples, 0.18%)</title><rect x="340.2" y="419.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="343.2" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (4 samples, 0.35%)</title><rect x="342.2" y="419.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="345.2" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.09%)</title><rect x="345.4" y="403.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="348.4" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (11 samples, 0.97%)</title><rect x="346.4" y="419.0" width="11.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="349.4" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (11 samples, 0.97%)</title><rect x="346.4" y="403.0" width="11.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="349.4" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (10 samples, 0.88%)</title><rect x="346.4" y="387.0" width="10.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="349.4" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.09%)</title><rect x="356.8" y="387.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="359.8" y="398.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="356.8" y="371.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="359.8" y="382.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="356.8" y="355.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="359.8" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="356.8" y="339.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="359.8" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="356.8" y="323.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="359.8" y="334.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="356.8" y="307.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="359.8" y="318.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="356.8" y="291.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="359.8" y="302.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="356.8" y="275.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="359.8" y="286.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.09%)</title><rect x="356.8" y="259.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="359.8" y="270.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.09%)</title><rect x="356.8" y="243.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="359.8" y="254.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.09%)</title><rect x="356.8" y="227.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="359.8" y="238.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_bytes_to_copy(HeapRegion*) (1 samples, 0.09%)</title><rect x="356.8" y="211.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="359.8" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (11 samples, 0.97%)</title><rect x="357.9" y="419.0" width="11.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="360.9" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (101 samples, 8.91%)</title><rect x="369.3" y="467.0" width="105.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="372.3" y="478.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.18%)</title><rect x="369.3" y="451.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="372.3" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (2 samples, 0.18%)</title><rect x="369.3" y="435.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="372.3" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (2 samples, 0.18%)</title><rect x="369.3" y="419.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="372.3" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (2 samples, 0.18%)</title><rect x="369.3" y="403.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="372.3" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (10 samples, 0.88%)</title><rect x="371.4" y="451.0" width="10.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="374.4" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (10 samples, 0.88%)</title><rect x="371.4" y="435.0" width="10.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="374.4" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (4 samples, 0.35%)</title><rect x="377.6" y="419.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="380.6" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (8 samples, 0.71%)</title><rect x="381.8" y="451.0" width="8.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="384.8" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (8 samples, 0.71%)</title><rect x="381.8" y="435.0" width="8.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="384.8" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (4 samples, 0.35%)</title><rect x="383.9" y="419.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="386.9" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (4 samples, 0.35%)</title><rect x="383.9" y="403.0" width="4.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="386.9" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.18%)</title><rect x="388.1" y="419.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="391.1" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.18%)</title><rect x="388.1" y="403.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="391.1" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (12 samples, 1.06%)</title><rect x="390.1" y="451.0" width="12.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="393.1" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (12 samples, 1.06%)</title><rect x="390.1" y="435.0" width="12.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="393.1" y="446.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.18%)</title><rect x="392.2" y="419.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="395.2" y="430.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.18%)</title><rect x="392.2" y="403.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="395.2" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.18%)</title><rect x="392.2" y="387.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="395.2" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.18%)</title><rect x="392.2" y="371.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="395.2" y="382.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="393.3" y="355.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="396.3" y="366.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="393.3" y="339.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="396.3" y="350.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.09%)</title><rect x="393.3" y="323.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="396.3" y="334.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.09%)</title><rect x="393.3" y="307.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="396.3" y="318.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.09%)</title><rect x="393.3" y="291.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="396.3" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.18%)</title><rect x="394.3" y="419.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="397.3" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (6 samples, 0.53%)</title><rect x="396.4" y="419.0" width="6.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="399.4" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (6 samples, 0.53%)</title><rect x="396.4" y="403.0" width="6.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="399.4" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (6 samples, 0.53%)</title><rect x="396.4" y="387.0" width="6.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="399.4" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (69 samples, 6.09%)</title><rect x="402.6" y="451.0" width="71.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="405.6" y="462.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (16 samples, 1.41%)</title><rect x="404.7" y="435.0" width="16.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="407.7" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.26%)</title><rect x="407.8" y="419.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="410.8" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.26%)</title><rect x="407.8" y="403.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="410.8" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.26%)</title><rect x="407.8" y="387.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="410.8" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (10 samples, 0.88%)</title><rect x="411.0" y="419.0" width="10.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="414.0" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (51 samples, 4.50%)</title><rect x="421.4" y="435.0" width="53.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="424.4" y="446.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.09%)</title><rect x="423.5" y="419.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="426.5" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.09%)</title><rect x="423.5" y="403.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="426.5" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.09%)</title><rect x="423.5" y="387.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="426.5" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.09%)</title><rect x="423.5" y="371.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="426.5" y="382.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.09%)</title><rect x="423.5" y="355.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="426.5" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (48 samples, 4.24%)</title><rect x="424.5" y="419.0" width="50.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="427.5" y="430.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (48 samples, 4.24%)</title><rect x="424.5" y="403.0" width="50.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="427.5" y="414.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (20 samples, 1.77%)</title><rect x="432.8" y="387.0" width="20.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="435.8" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (7 samples, 0.62%)</title><rect x="440.1" y="371.0" width="7.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="443.1" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (7 samples, 0.62%)</title><rect x="440.1" y="355.0" width="7.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="443.1" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (7 samples, 0.62%)</title><rect x="440.1" y="339.0" width="7.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="443.1" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (5 samples, 0.44%)</title><rect x="442.2" y="323.0" width="5.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="445.2" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.09%)</title><rect x="447.4" y="371.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="450.4" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.09%)</title><rect x="448.5" y="371.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="451.5" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.09%)</title><rect x="448.5" y="355.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="451.5" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (4 samples, 0.35%)</title><rect x="449.5" y="371.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="452.5" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (7 samples, 0.62%)</title><rect x="453.7" y="387.0" width="7.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="456.7" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (7 samples, 0.62%)</title><rect x="453.7" y="371.0" width="7.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="456.7" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (7 samples, 0.62%)</title><rect x="453.7" y="355.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="456.7" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (7 samples, 0.62%)</title><rect x="453.7" y="339.0" width="7.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="456.7" y="350.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (7 samples, 0.62%)</title><rect x="453.7" y="323.0" width="7.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="456.7" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (7 samples, 0.62%)</title><rect x="461.0" y="387.0" width="7.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="464.0" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (7 samples, 0.62%)</title><rect x="461.0" y="371.0" width="7.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="464.0" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (7 samples, 0.62%)</title><rect x="461.0" y="355.0" width="7.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="464.0" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (7 samples, 0.62%)</title><rect x="461.0" y="339.0" width="7.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="464.0" y="350.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (7 samples, 0.62%)</title><rect x="461.0" y="323.0" width="7.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="464.0" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (4 samples, 0.35%)</title><rect x="468.3" y="387.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="471.3" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.35%)</title><rect x="468.3" y="371.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="471.3" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.35%)</title><rect x="468.3" y="355.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="471.3" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (2 samples, 0.18%)</title><rect x="472.4" y="387.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="475.4" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.09%)</title><rect x="472.4" y="371.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="475.4" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.09%)</title><rect x="473.5" y="371.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="476.5" y="382.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="473.5" y="355.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="476.5" y="366.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="473.5" y="339.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="476.5" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="473.5" y="323.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="476.5" y="334.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="473.5" y="307.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="476.5" y="318.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="473.5" y="291.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="476.5" y="302.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="473.5" y="275.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="476.5" y="286.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.09%)</title><rect x="473.5" y="259.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="476.5" y="270.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.09%)</title><rect x="473.5" y="243.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="476.5" y="254.0"></text>
</g>
<g>
<title>AbsSeq::davg() const (1 samples, 0.09%)</title><rect x="473.5" y="227.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="476.5" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (19 samples, 1.68%)</title><rect x="474.5" y="467.0" width="19.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="477.5" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (19 samples, 1.68%)</title><rect x="474.5" y="451.0" width="19.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="477.5" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (19 samples, 1.68%)</title><rect x="474.5" y="435.0" width="19.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="477.5" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (3 samples, 0.26%)</title><rect x="474.5" y="419.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="477.5" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBindings.isEmpty (4 samples, 0.35%)</title><rect x="477.6" y="419.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="480.6" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._findWellKnownSimple (5 samples, 0.44%)</title><rect x="481.8" y="419.0" width="5.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="484.8" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (7 samples, 0.62%)</title><rect x="487.0" y="419.0" width="7.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="490.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (7 samples, 0.62%)</title><rect x="487.0" y="403.0" width="7.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="490.0" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (304 samples, 26.83%)</title><rect x="494.3" y="563.0" width="316.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="497.3" y="574.0">com/linecorp/decaton/processor/runtime/inte..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (51 samples, 4.50%)</title><rect x="494.3" y="547.0" width="53.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="497.3" y="558.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (1 samples, 0.09%)</title><rect x="494.3" y="531.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="497.3" y="542.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (50 samples, 4.41%)</title><rect x="495.3" y="531.0" width="52.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="498.3" y="542.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (50 samples, 4.41%)</title><rect x="495.3" y="515.0" width="52.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="498.3" y="526.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (17 samples, 1.50%)</title><rect x="495.3" y="499.0" width="17.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="498.3" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (17 samples, 1.50%)</title><rect x="495.3" y="483.0" width="17.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="498.3" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (17 samples, 1.50%)</title><rect x="495.3" y="467.0" width="17.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="498.3" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (17 samples, 1.50%)</title><rect x="495.3" y="451.0" width="17.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="498.3" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (17 samples, 1.50%)</title><rect x="495.3" y="435.0" width="17.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="498.3" y="446.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.wasLastOpReadOrNull (1 samples, 0.09%)</title><rect x="513.0" y="499.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="516.0" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.44%)</title><rect x="514.1" y="499.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="517.1" y="510.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (27 samples, 2.38%)</title><rect x="519.3" y="499.0" width="28.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="522.3" y="510.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (8 samples, 0.71%)</title><rect x="538.0" y="483.0" width="8.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="541.0" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (7 samples, 0.62%)</title><rect x="539.1" y="467.0" width="7.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="542.1" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.09%)</title><rect x="546.4" y="483.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="549.4" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.35%)</title><rect x="547.4" y="547.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="550.4" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.26%)</title><rect x="548.4" y="531.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="551.4" y="542.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.26%)</title><rect x="548.4" y="515.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="551.4" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (175 samples, 15.45%)</title><rect x="551.6" y="547.0" width="182.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="554.6" y="558.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (162 samples, 14.30%)</title><rect x="553.7" y="531.0" width="168.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="556.7" y="542.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (59 samples, 5.21%)</title><rect x="565.1" y="515.0" width="61.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="568.1" y="526.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (30 samples, 2.65%)</title><rect x="582.8" y="499.0" width="31.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="585.8" y="510.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (28 samples, 2.47%)</title><rect x="584.9" y="483.0" width="29.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="587.9" y="494.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (15 samples, 1.32%)</title><rect x="592.2" y="467.0" width="15.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="595.2" y="478.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (15 samples, 1.32%)</title><rect x="592.2" y="451.0" width="15.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="595.2" y="462.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (15 samples, 1.32%)</title><rect x="592.2" y="435.0" width="15.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="595.2" y="446.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.09%)</title><rect x="592.2" y="419.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="595.2" y="430.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (13 samples, 1.15%)</title><rect x="593.2" y="419.0" width="13.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="596.2" y="430.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="595.3" y="403.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="598.3" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.18%)</title><rect x="596.4" y="403.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="599.4" y="414.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.09%)</title><rect x="596.4" y="387.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="599.4" y="398.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="597.4" y="387.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="600.4" y="398.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.09%)</title><rect x="597.4" y="371.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="600.4" y="382.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="597.4" y="355.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="600.4" y="366.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.09%)</title><rect x="597.4" y="339.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="600.4" y="350.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (8 samples, 0.71%)</title><rect x="598.4" y="403.0" width="8.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="601.4" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (5 samples, 0.44%)</title><rect x="599.5" y="387.0" width="5.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="602.5" y="398.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (2 samples, 0.18%)</title><rect x="599.5" y="371.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="602.5" y="382.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="600.5" y="355.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="603.5" y="366.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="600.5" y="339.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="603.5" y="350.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.09%)</title><rect x="600.5" y="323.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="603.5" y="334.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.09%)</title><rect x="600.5" y="307.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="603.5" y="318.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.09%)</title><rect x="600.5" y="291.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="603.5" y="302.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.09%)</title><rect x="600.5" y="275.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="603.5" y="286.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.09%)</title><rect x="600.5" y="259.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="603.5" y="270.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="601.6" y="371.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="604.6" y="382.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="602.6" y="371.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="605.6" y="382.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.09%)</title><rect x="602.6" y="355.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="605.6" y="366.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.09%)</title><rect x="603.6" y="371.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="606.6" y="382.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.09%)</title><rect x="604.7" y="387.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="607.7" y="398.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::myThread() (1 samples, 0.09%)</title><rect x="605.7" y="387.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="608.7" y="398.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="606.8" y="419.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="609.8" y="430.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="606.8" y="403.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="609.8" y="414.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.26%)</title><rect x="607.8" y="467.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="610.8" y="478.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.26%)</title><rect x="610.9" y="467.0" width="3.2" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="613.9" y="478.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (12 samples, 1.06%)</title><rect x="614.1" y="499.0" width="12.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="617.1" y="510.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (12 samples, 1.06%)</title><rect x="626.6" y="515.0" width="12.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="629.6" y="526.0"></text>
</g>
<g>
<title>java/lang/Long.toString (12 samples, 1.06%)</title><rect x="626.6" y="499.0" width="12.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="629.6" y="510.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (12 samples, 1.06%)</title><rect x="626.6" y="483.0" width="12.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="629.6" y="494.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="637.0" y="467.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="640.0" y="478.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="637.0" y="451.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="640.0" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="637.0" y="435.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="640.0" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="637.0" y="419.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="640.0" y="430.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="637.0" y="403.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="640.0" y="414.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="637.0" y="387.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="640.0" y="398.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.09%)</title><rect x="637.0" y="371.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="640.0" y="382.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.09%)</title><rect x="637.0" y="355.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="640.0" y="366.0"></text>
</g>
<g>
<title>MasterFreeRegionListMtSafeChecker::check() (1 samples, 0.09%)</title><rect x="637.0" y="339.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="640.0" y="350.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.09%)</title><rect x="638.0" y="467.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="641.0" y="478.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (80 samples, 7.06%)</title><rect x="639.1" y="515.0" width="83.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="642.1" y="526.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (79 samples, 6.97%)</title><rect x="640.1" y="499.0" width="82.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="643.1" y="510.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (23 samples, 2.03%)</title><rect x="648.4" y="483.0" width="24.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="651.4" y="494.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (23 samples, 2.03%)</title><rect x="648.4" y="467.0" width="24.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="651.4" y="478.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (23 samples, 2.03%)</title><rect x="648.4" y="451.0" width="24.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="651.4" y="462.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (23 samples, 2.03%)</title><rect x="648.4" y="435.0" width="24.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="651.4" y="446.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (23 samples, 2.03%)</title><rect x="648.4" y="419.0" width="24.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="651.4" y="430.0">j..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (48 samples, 4.24%)</title><rect x="672.4" y="483.0" width="50.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="675.4" y="494.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.put (43 samples, 3.80%)</title><rect x="677.6" y="467.0" width="44.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="680.6" y="478.0">java..</text>
</g>
<g>
<title>java/util/HashMap.hash (8 samples, 0.71%)</title><rect x="678.6" y="451.0" width="8.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="681.6" y="462.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (8 samples, 0.71%)</title><rect x="678.6" y="435.0" width="8.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="681.6" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (34 samples, 3.00%)</title><rect x="687.0" y="451.0" width="35.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="690.0" y="462.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.18%)</title><rect x="702.6" y="435.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="705.6" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (14 samples, 1.24%)</title><rect x="704.7" y="435.0" width="14.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="707.7" y="446.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.18%)</title><rect x="716.1" y="419.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="719.1" y="430.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.18%)</title><rect x="716.1" y="403.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="719.1" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.18%)</title><rect x="716.1" y="387.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="719.1" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="717.2" y="371.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="720.2" y="382.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="717.2" y="355.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="720.2" y="366.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="717.2" y="339.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="720.2" y="350.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="717.2" y="323.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="720.2" y="334.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.09%)</title><rect x="717.2" y="307.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="720.2" y="318.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.09%)</title><rect x="717.2" y="291.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="720.2" y="302.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.09%)</title><rect x="717.2" y="275.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="720.2" y="286.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.09%)</title><rect x="717.2" y="259.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="720.2" y="270.0"></text>
</g>
<g>
<title>_new_instance_Java (1 samples, 0.09%)</title><rect x="718.2" y="419.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="721.2" y="430.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.26%)</title><rect x="719.2" y="435.0" width="3.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="722.2" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (11 samples, 0.97%)</title><rect x="722.4" y="531.0" width="11.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="725.4" y="542.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (11 samples, 0.97%)</title><rect x="722.4" y="515.0" width="11.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="725.4" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.get (11 samples, 0.97%)</title><rect x="722.4" y="499.0" width="11.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="725.4" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (11 samples, 0.97%)</title><rect x="722.4" y="483.0" width="11.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="725.4" y="494.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.26%)</title><rect x="728.6" y="467.0" width="3.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="731.6" y="478.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.26%)</title><rect x="728.6" y="451.0" width="3.1" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="731.6" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.18%)</title><rect x="731.7" y="467.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="734.7" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (46 samples, 4.06%)</title><rect x="733.8" y="547.0" width="47.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="736.8" y="558.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (45 samples, 3.97%)</title><rect x="734.9" y="531.0" width="46.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="737.9" y="542.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$207/751979226.process (22 samples, 1.94%)</title><rect x="735.9" y="515.0" width="22.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="738.9" y="526.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (22 samples, 1.94%)</title><rect x="735.9" y="499.0" width="22.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="738.9" y="510.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (19 samples, 1.68%)</title><rect x="738.0" y="483.0" width="19.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="741.0" y="494.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.18%)</title><rect x="740.1" y="467.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="743.1" y="478.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.18%)</title><rect x="740.1" y="451.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="743.1" y="462.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.18%)</title><rect x="740.1" y="435.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="743.1" y="446.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.18%)</title><rect x="740.1" y="419.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="743.1" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.18%)</title><rect x="740.1" y="403.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="743.1" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (2 samples, 0.18%)</title><rect x="740.1" y="387.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="743.1" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (4 samples, 0.35%)</title><rect x="742.2" y="467.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="745.2" y="478.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.35%)</title><rect x="742.2" y="451.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="745.2" y="462.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.35%)</title><rect x="742.2" y="435.0" width="4.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="745.2" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (11 samples, 0.97%)</title><rect x="746.3" y="467.0" width="11.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="749.3" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.09%)</title><rect x="757.8" y="483.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="760.8" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="757.8" y="467.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="760.8" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="757.8" y="451.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="760.8" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="757.8" y="435.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="760.8" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.09%)</title><rect x="757.8" y="419.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="760.8" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (1 samples, 0.09%)</title><rect x="757.8" y="403.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="760.8" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (2 samples, 0.18%)</title><rect x="758.8" y="515.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="761.8" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.18%)</title><rect x="760.9" y="515.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="763.9" y="526.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.18%)</title><rect x="760.9" y="499.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="763.9" y="510.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1318180415.linkToTargetMethod (2 samples, 0.18%)</title><rect x="763.0" y="515.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="766.0" y="526.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (2 samples, 0.18%)</title><rect x="763.0" y="499.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="766.0" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$291/1163641614.get$Lambda (2 samples, 0.18%)</title><rect x="763.0" y="483.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="766.0" y="494.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (11 samples, 0.97%)</title><rect x="765.1" y="515.0" width="11.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="768.1" y="526.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (8 samples, 0.71%)</title><rect x="768.2" y="499.0" width="8.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="771.2" y="510.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.26%)</title><rect x="768.2" y="483.0" width="3.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="771.2" y="494.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (5 samples, 0.44%)</title><rect x="771.3" y="483.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="774.3" y="494.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.09%)</title><rect x="776.5" y="515.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="779.5" y="526.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (4 samples, 0.35%)</title><rect x="777.6" y="515.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="780.6" y="526.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.09%)</title><rect x="779.7" y="499.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="782.7" y="510.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.09%)</title><rect x="780.7" y="499.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="783.7" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (28 samples, 2.47%)</title><rect x="781.7" y="547.0" width="29.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="784.7" y="558.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (28 samples, 2.47%)</title><rect x="781.7" y="531.0" width="29.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="784.7" y="542.0">ja..</text>
</g>
<g>
<title>__clock_gettime (8 samples, 0.71%)</title><rect x="790.1" y="515.0" width="8.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="793.1" y="526.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.53%)</title><rect x="792.2" y="499.0" width="6.2" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="795.2" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (11 samples, 0.97%)</title><rect x="798.4" y="515.0" width="11.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="801.4" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$296/1265660533.accept (11 samples, 0.97%)</title><rect x="798.4" y="499.0" width="11.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="801.4" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$64 (11 samples, 0.97%)</title><rect x="798.4" y="483.0" width="11.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="801.4" y="494.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (11 samples, 0.97%)</title><rect x="798.4" y="467.0" width="11.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="801.4" y="478.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (11 samples, 0.97%)</title><rect x="798.4" y="451.0" width="11.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="801.4" y="462.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.44%)</title><rect x="804.7" y="435.0" width="5.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="807.7" y="446.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.44%)</title><rect x="804.7" y="419.0" width="5.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="807.7" y="430.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="809.9" y="515.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="812.9" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (20 samples, 1.77%)</title><rect x="810.9" y="563.0" width="20.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="813.9" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (20 samples, 1.77%)</title><rect x="810.9" y="547.0" width="20.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="813.9" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (20 samples, 1.77%)</title><rect x="810.9" y="531.0" width="20.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="813.9" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$296/1265660533.accept (2 samples, 0.18%)</title><rect x="810.9" y="515.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="813.9" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$64 (2 samples, 0.18%)</title><rect x="810.9" y="499.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="813.9" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (2 samples, 0.18%)</title><rect x="810.9" y="483.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="813.9" y="494.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.18%)</title><rect x="810.9" y="467.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="813.9" y="478.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.18%)</title><rect x="810.9" y="451.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="813.9" y="462.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.09%)</title><rect x="811.9" y="435.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="814.9" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$297/1638432629.accept (18 samples, 1.59%)</title><rect x="813.0" y="515.0" width="18.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="816.0" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$63 (18 samples, 1.59%)</title><rect x="813.0" y="499.0" width="18.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="816.0" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$283/829527537.complete (18 samples, 1.59%)</title><rect x="813.0" y="483.0" width="18.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="816.0" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$73 (18 samples, 1.59%)</title><rect x="813.0" y="467.0" width="18.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="816.0" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$282/153643217.complete (18 samples, 1.59%)</title><rect x="813.0" y="451.0" width="18.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="816.0" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$49 (18 samples, 1.59%)</title><rect x="813.0" y="435.0" width="18.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="816.0" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (18 samples, 1.59%)</title><rect x="813.0" y="419.0" width="18.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="816.0" y="430.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (18 samples, 1.59%)</title><rect x="813.0" y="403.0" width="18.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="816.0" y="414.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (18 samples, 1.59%)</title><rect x="813.0" y="387.0" width="18.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="816.0" y="398.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (18 samples, 1.59%)</title><rect x="813.0" y="371.0" width="18.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="816.0" y="382.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.53%)</title><rect x="831.7" y="563.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="834.7" y="574.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.53%)</title><rect x="831.7" y="547.0" width="6.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="834.7" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (10 samples, 0.88%)</title><rect x="838.0" y="579.0" width="10.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="841.0" y="590.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.53%)</title><rect x="842.1" y="563.0" width="6.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="845.1" y="574.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.53%)</title><rect x="842.1" y="547.0" width="6.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="845.1" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (3 samples, 0.26%)</title><rect x="848.4" y="627.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="851.4" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.26%)</title><rect x="848.4" y="611.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="851.4" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.26%)</title><rect x="848.4" y="595.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="851.4" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.26%)</title><rect x="848.4" y="579.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="851.4" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (1 samples, 0.09%)</title><rect x="850.5" y="563.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="853.5" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (258 samples, 22.77%)</title><rect x="851.5" y="627.0" width="268.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="854.5" y="638.0">java/util/concurrent/ThreadPoolExecu..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (258 samples, 22.77%)</title><rect x="851.5" y="611.0" width="268.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="854.5" y="622.0">java/util/concurrent/LinkedBlockingQ..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (213 samples, 18.80%)</title><rect x="879.6" y="595.0" width="221.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="882.6" y="606.0">java/util/concurrent/locks/Ab..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (8 samples, 0.71%)</title><rect x="894.2" y="579.0" width="8.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="897.2" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 0.71%)</title><rect x="894.2" y="563.0" width="8.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="897.2" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 0.71%)</title><rect x="894.2" y="547.0" width="8.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="897.2" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 0.71%)</title><rect x="894.2" y="531.0" width="8.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="897.2" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (8 samples, 0.71%)</title><rect x="902.6" y="579.0" width="8.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="905.6" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (8 samples, 0.71%)</title><rect x="902.6" y="563.0" width="8.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="905.6" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (183 samples, 16.15%)</title><rect x="910.9" y="579.0" width="190.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="913.9" y="590.0">java/util/concurrent/lock..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (183 samples, 16.15%)</title><rect x="910.9" y="563.0" width="190.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="913.9" y="574.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="915.0" y="547.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="918.0" y="558.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.09%)</title><rect x="916.1" y="547.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="919.1" y="558.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (3 samples, 0.26%)</title><rect x="917.1" y="547.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="920.1" y="558.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.26%)</title><rect x="920.3" y="547.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="923.3" y="558.0"></text>
</g>
<g>
<title>Unsafe_Park (165 samples, 14.56%)</title><rect x="923.4" y="547.0" width="171.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="926.4" y="558.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="927.5" y="531.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="930.5" y="542.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="928.6" y="531.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="931.6" y="542.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (32 samples, 2.82%)</title><rect x="929.6" y="531.0" width="33.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="932.6" y="542.0">Pa..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (8 samples, 0.71%)</title><rect x="946.3" y="515.0" width="8.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="949.3" y="526.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.18%)</title><rect x="948.4" y="499.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="951.4" y="510.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.18%)</title><rect x="948.4" y="483.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="951.4" y="494.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.18%)</title><rect x="950.5" y="499.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="953.5" y="510.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.18%)</title><rect x="952.5" y="499.0" width="2.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="955.5" y="510.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.09%)</title><rect x="954.6" y="515.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="957.6" y="526.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="955.7" y="515.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="958.7" y="526.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (6 samples, 0.53%)</title><rect x="956.7" y="515.0" width="6.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="959.7" y="526.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.26%)</title><rect x="963.0" y="531.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="966.0" y="542.0"></text>
</g>
<g>
<title>__lll_lock_wait (7 samples, 0.62%)</title><rect x="966.1" y="531.0" width="7.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="969.1" y="542.0"></text>
</g>
<g>
<title>__lll_unlock_wake (27 samples, 2.38%)</title><rect x="973.4" y="531.0" width="28.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="976.4" y="542.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (63 samples, 5.56%)</title><rect x="1001.5" y="531.0" width="65.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1004.5" y="542.0">__pthre..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.26%)</title><rect x="1067.1" y="531.0" width="3.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1070.1" y="542.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 0.26%)</title><rect x="1070.2" y="531.0" width="3.2" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1073.2" y="542.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.09%)</title><rect x="1073.4" y="531.0" width="1.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1076.4" y="542.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.26%)</title><rect x="1074.4" y="531.0" width="3.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1077.4" y="542.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.18%)</title><rect x="1077.5" y="531.0" width="2.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1080.5" y="542.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (9 samples, 0.79%)</title><rect x="1079.6" y="531.0" width="9.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1082.6" y="542.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (3 samples, 0.26%)</title><rect x="1089.0" y="531.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1092.0" y="542.0"></text>
</g>
<g>
<title>pthread_getspecific (3 samples, 0.26%)</title><rect x="1092.1" y="531.0" width="3.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1095.1" y="542.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.35%)</title><rect x="1095.2" y="547.0" width="4.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1098.2" y="558.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.09%)</title><rect x="1099.4" y="547.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1102.4" y="558.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.09%)</title><rect x="1100.4" y="547.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1103.4" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (18 samples, 1.59%)</title><rect x="1101.5" y="595.0" width="18.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1104.5" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (18 samples, 1.59%)</title><rect x="1101.5" y="579.0" width="18.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1104.5" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (18 samples, 1.59%)</title><rect x="1101.5" y="563.0" width="18.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1104.5" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (18 samples, 1.59%)</title><rect x="1101.5" y="547.0" width="18.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1104.5" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.09%)</title><rect x="1120.2" y="675.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1123.2" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.09%)</title><rect x="1120.2" y="659.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1123.2" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="1120.2" y="643.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1123.2" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.09%)</title><rect x="1120.2" y="627.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1123.2" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.09%)</title><rect x="1120.2" y="611.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1123.2" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.09%)</title><rect x="1120.2" y="595.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1123.2" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.09%)</title><rect x="1120.2" y="579.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1123.2" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.09%)</title><rect x="1120.2" y="563.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1123.2" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.09%)</title><rect x="1120.2" y="547.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1123.2" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="1120.2" y="531.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1123.2" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="1120.2" y="515.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1123.2" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="1120.2" y="499.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1123.2" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.09%)</title><rect x="1120.2" y="483.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1123.2" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.09%)</title><rect x="1120.2" y="467.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1123.2" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="1120.2" y="451.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1123.2" y="462.0"></text>
</g>
<g>
<title>start_thread (66 samples, 5.83%)</title><rect x="1121.3" y="675.0" width="68.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1124.3" y="686.0">start_t..</text>
</g>
<g>
<title>java_start(Thread*) (66 samples, 5.83%)</title><rect x="1121.3" y="659.0" width="68.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1124.3" y="670.0">java_st..</text>
</g>
<g>
<title>GangWorker::loop() (24 samples, 2.12%)</title><rect x="1121.3" y="643.0" width="25.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1124.3" y="654.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (7 samples, 0.62%)</title><rect x="1121.3" y="627.0" width="7.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1124.3" y="638.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 0.62%)</title><rect x="1121.3" y="611.0" width="7.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1124.3" y="622.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.09%)</title><rect x="1121.3" y="595.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1124.3" y="606.0"></text>
</g>
<g>
<title>SpinPause (6 samples, 0.53%)</title><rect x="1122.3" y="595.0" width="6.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1125.3" y="606.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (17 samples, 1.50%)</title><rect x="1128.6" y="627.0" width="17.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1131.6" y="638.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 0.53%)</title><rect x="1128.6" y="611.0" width="6.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1131.6" y="622.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.09%)</title><rect x="1128.6" y="595.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1131.6" y="606.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.09%)</title><rect x="1128.6" y="579.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1131.6" y="590.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.18%)</title><rect x="1129.6" y="595.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1132.6" y="606.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.26%)</title><rect x="1131.7" y="595.0" width="3.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1134.7" y="606.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (6 samples, 0.53%)</title><rect x="1134.8" y="611.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1137.8" y="622.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (6 samples, 0.53%)</title><rect x="1134.8" y="595.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1137.8" y="606.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (4 samples, 0.35%)</title><rect x="1134.8" y="579.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1137.8" y="590.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (4 samples, 0.35%)</title><rect x="1134.8" y="563.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1137.8" y="574.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (4 samples, 0.35%)</title><rect x="1134.8" y="547.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1137.8" y="558.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.18%)</title><rect x="1139.0" y="579.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1142.0" y="590.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.18%)</title><rect x="1139.0" y="563.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1142.0" y="574.0"></text>
</g>
<g>
<title>Method::bci_from(unsigned char*) const (1 samples, 0.09%)</title><rect x="1139.0" y="547.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1142.0" y="558.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CLDClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.09%)</title><rect x="1140.0" y="547.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1143.0" y="558.0"></text>
</g>
<g>
<title>OopMapSet::all_do(frame const*, RegisterMap const*, OopClosure*, void (*)(oopDesc**, oopDesc**), OopClosure*) (1 samples, 0.09%)</title><rect x="1140.0" y="531.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1143.0" y="542.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.09%)</title><rect x="1140.0" y="515.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1143.0" y="526.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.09%)</title><rect x="1140.0" y="499.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1143.0" y="510.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.09%)</title><rect x="1140.0" y="483.0" width="1.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1143.0" y="494.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (5 samples, 0.44%)</title><rect x="1141.1" y="611.0" width="5.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.1" y="622.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (5 samples, 0.44%)</title><rect x="1141.1" y="595.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1144.1" y="606.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (5 samples, 0.44%)</title><rect x="1141.1" y="579.0" width="5.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1144.1" y="590.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (5 samples, 0.44%)</title><rect x="1141.1" y="563.0" width="5.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1144.1" y="574.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (5 samples, 0.44%)</title><rect x="1141.1" y="547.0" width="5.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.1" y="558.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (5 samples, 0.44%)</title><rect x="1141.1" y="531.0" width="5.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1144.1" y="542.0"></text>
</g>
<g>
<title>FilterOutOfRegionClosure::FilterOutOfRegionClosure(HeapRegion*, OopClosure*) (1 samples, 0.09%)</title><rect x="1141.1" y="515.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1144.1" y="526.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (4 samples, 0.35%)</title><rect x="1142.1" y="515.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1145.1" y="526.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (3 samples, 0.26%)</title><rect x="1143.1" y="499.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1146.1" y="510.0"></text>
</g>
<g>
<title>JavaThread::run() (40 samples, 3.53%)</title><rect x="1146.3" y="643.0" width="41.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1149.3" y="654.0">Jav..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (40 samples, 3.53%)</title><rect x="1146.3" y="627.0" width="41.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1149.3" y="638.0">Jav..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (40 samples, 3.53%)</title><rect x="1146.3" y="611.0" width="41.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1149.3" y="622.0">Com..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (39 samples, 3.44%)</title><rect x="1146.3" y="595.0" width="40.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1149.3" y="606.0">Com..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (38 samples, 3.35%)</title><rect x="1146.3" y="579.0" width="39.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1149.3" y="590.0">C2C..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (38 samples, 3.35%)</title><rect x="1146.3" y="563.0" width="39.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1149.3" y="574.0">Com..</text>
</g>
<g>
<title>Compile::Code_Gen() (18 samples, 1.59%)</title><rect x="1146.3" y="547.0" width="18.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.3" y="558.0"></text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.09%)</title><rect x="1146.3" y="531.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1149.3" y="542.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.09%)</title><rect x="1146.3" y="515.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.3" y="526.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.09%)</title><rect x="1147.3" y="531.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1150.3" y="542.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.18%)</title><rect x="1148.3" y="531.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1151.3" y="542.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.18%)</title><rect x="1148.3" y="515.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1151.3" y="526.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.09%)</title><rect x="1150.4" y="531.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.4" y="542.0"></text>
</g>
<g>
<title>PhaseCFG::build_dominator_tree() (1 samples, 0.09%)</title><rect x="1150.4" y="515.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1153.4" y="526.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (13 samples, 1.15%)</title><rect x="1151.5" y="531.0" width="13.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.5" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.09%)</title><rect x="1151.5" y="515.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1154.5" y="526.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.09%)</title><rect x="1152.5" y="515.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.5" y="526.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 0.44%)</title><rect x="1153.5" y="515.0" width="5.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1156.5" y="526.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.09%)</title><rect x="1154.6" y="499.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1157.6" y="510.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1155.6" y="499.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.6" y="510.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.09%)</title><rect x="1156.7" y="499.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.7" y="510.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1156.7" y="483.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.7" y="494.0"></text>
</g>
<g>
<title>loadNNode::rule() const (1 samples, 0.09%)</title><rect x="1157.7" y="499.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.7" y="510.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.09%)</title><rect x="1158.8" y="515.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.8" y="526.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.09%)</title><rect x="1158.8" y="499.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.8" y="510.0"></text>
</g>
<g>
<title>rRegPOper::type() const (1 samples, 0.09%)</title><rect x="1158.8" y="483.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.8" y="494.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.18%)</title><rect x="1159.8" y="515.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.8" y="526.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.09%)</title><rect x="1160.8" y="499.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.8" y="510.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.09%)</title><rect x="1161.9" y="515.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.9" y="526.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.09%)</title><rect x="1161.9" y="499.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.9" y="510.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.09%)</title><rect x="1161.9" y="483.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.9" y="494.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.18%)</title><rect x="1162.9" y="515.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.9" y="526.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.18%)</title><rect x="1162.9" y="499.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.9" y="510.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.09%)</title><rect x="1162.9" y="483.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.9" y="494.0"></text>
</g>
<g>
<title>IndexSet::populate_free_list() (1 samples, 0.09%)</title><rect x="1162.9" y="467.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.9" y="478.0"></text>
</g>
<g>
<title>PhaseLive::getfreeset() (1 samples, 0.09%)</title><rect x="1164.0" y="483.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.0" y="494.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int, Arena*) (1 samples, 0.09%)</title><rect x="1164.0" y="467.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.0" y="478.0"></text>
</g>
<g>
<title>Compile::Optimize() (14 samples, 1.24%)</title><rect x="1165.0" y="547.0" width="14.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.0" y="558.0"></text>
</g>
<g>
<title>MemBarNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1165.0" y="531.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1168.0" y="542.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.09%)</title><rect x="1166.0" y="531.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.0" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;, bool, bool) (1 samples, 0.09%)</title><rect x="1167.1" y="531.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.1" y="542.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1167.1" y="515.0" width="1.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1170.1" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (9 samples, 0.79%)</title><rect x="1168.1" y="531.0" width="9.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.1" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.09%)</title><rect x="1168.1" y="515.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.1" y="526.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.09%)</title><rect x="1168.1" y="499.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.1" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.35%)</title><rect x="1169.2" y="515.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.2" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (4 samples, 0.35%)</title><rect x="1169.2" y="499.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1172.2" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (4 samples, 0.35%)</title><rect x="1169.2" y="483.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.2" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.09%)</title><rect x="1171.3" y="467.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.3" y="478.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1171.3" y="451.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.3" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.09%)</title><rect x="1172.3" y="467.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.3" y="478.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.18%)</title><rect x="1173.3" y="515.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.3" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.09%)</title><rect x="1174.4" y="499.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.4" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.18%)</title><rect x="1175.4" y="515.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.4" y="526.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.18%)</title><rect x="1177.5" y="531.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.5" y="542.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.18%)</title><rect x="1177.5" y="515.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.5" y="526.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1177.5" y="499.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.5" y="510.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.09%)</title><rect x="1177.5" y="483.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.5" y="494.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.09%)</title><rect x="1177.5" y="467.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.5" y="478.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.09%)</title><rect x="1178.5" y="499.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.5" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.53%)</title><rect x="1179.6" y="547.0" width="6.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.6" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.53%)</title><rect x="1179.6" y="531.0" width="6.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.53%)</title><rect x="1179.6" y="515.0" width="6.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.53%)</title><rect x="1179.6" y="499.0" width="6.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.53%)</title><rect x="1179.6" y="483.0" width="6.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.53%)</title><rect x="1179.6" y="467.0" width="6.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.6" y="478.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.18%)</title><rect x="1179.6" y="451.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.6" y="462.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.18%)</title><rect x="1179.6" y="435.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.6" y="446.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1179.6" y="419.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.6" y="430.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1180.6" y="419.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.6" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1180.6" y="403.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.6" y="414.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1180.6" y="387.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.6" y="398.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1180.6" y="371.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.6" y="382.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1180.6" y="355.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.6" y="366.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1180.6" y="339.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.6" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.09%)</title><rect x="1180.6" y="323.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.6" y="334.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1180.6" y="307.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.6" y="318.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1180.6" y="291.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.6" y="302.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1180.6" y="275.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.6" y="286.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1180.6" y="259.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.6" y="270.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1180.6" y="243.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.6" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1181.7" y="451.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.7" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.26%)</title><rect x="1181.7" y="435.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.26%)</title><rect x="1181.7" y="419.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.26%)</title><rect x="1181.7" y="403.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.26%)</title><rect x="1181.7" y="387.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.26%)</title><rect x="1181.7" y="371.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.7" y="382.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1181.7" y="355.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.7" y="366.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1181.7" y="339.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.7" y="350.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1181.7" y="323.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.7" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1181.7" y="307.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.7" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1181.7" y="291.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.7" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1181.7" y="275.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.7" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1181.7" y="259.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.7" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1181.7" y="243.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.7" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1181.7" y="227.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.7" y="238.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.09%)</title><rect x="1181.7" y="211.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.7" y="222.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1181.7" y="195.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.7" y="206.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1181.7" y="179.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.7" y="190.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1181.7" y="163.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.7" y="174.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1181.7" y="147.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.7" y="158.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1181.7" y="131.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.7" y="142.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.09%)</title><rect x="1181.7" y="115.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.7" y="126.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.09%)</title><rect x="1181.7" y="99.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.7" y="110.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.09%)</title><rect x="1181.7" y="83.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.7" y="94.0"></text>
</g>
<g>
<title>SystemDictionary::find_instance_or_array_klass(Symbol*, Handle, Handle, Thread*) (1 samples, 0.09%)</title><rect x="1181.7" y="67.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.7" y="78.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.09%)</title><rect x="1181.7" y="51.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.7" y="62.0"></text>
</g>
<g>
<title>Dictionary::find(int, unsigned int, Symbol*, ClassLoaderData*, Handle, Thread*) (1 samples, 0.09%)</title><rect x="1181.7" y="35.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.7" y="46.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.7" y="355.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.7" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.7" y="339.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.7" y="323.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.7" y="307.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.7" y="291.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1182.7" y="275.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.7" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.7" y="259.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.7" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.7" y="243.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.7" y="254.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.09%)</title><rect x="1182.7" y="227.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.7" y="238.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.09%)</title><rect x="1182.7" y="211.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.7" y="222.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.09%)</title><rect x="1182.7" y="195.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.7" y="206.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1182.7" y="179.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.7" y="190.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_output_for_runtime_call(Node*, Node*, TypePtr const*) (1 samples, 0.09%)</title><rect x="1182.7" y="163.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.7" y="174.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.09%)</title><rect x="1182.7" y="147.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.7" y="158.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.09%)</title><rect x="1182.7" y="131.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.7" y="142.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.8" y="355.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.8" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.8" y="339.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.8" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1183.8" y="323.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1183.8" y="307.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1183.8" y="291.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1183.8" y="275.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.8" y="286.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.09%)</title><rect x="1183.8" y="259.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.8" y="270.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.09%)</title><rect x="1183.8" y="243.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.8" y="254.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.09%)</title><rect x="1183.8" y="227.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.8" y="238.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.09%)</title><rect x="1183.8" y="211.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1186.8" y="222.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1184.8" y="451.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.8" y="462.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1184.8" y="435.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.8" y="446.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1184.8" y="419.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.8" y="430.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1184.8" y="403.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.8" y="414.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.09%)</title><rect x="1184.8" y="387.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.8" y="398.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.09%)</title><rect x="1184.8" y="371.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.8" y="382.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1185.8" y="579.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.8" y="590.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.09%)</title><rect x="1185.8" y="563.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.8" y="574.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.09%)</title><rect x="1185.8" y="547.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.8" y="558.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.09%)</title><rect x="1185.8" y="531.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.8" y="542.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.09%)</title><rect x="1185.8" y="515.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.8" y="526.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1185.8" y="499.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.8" y="510.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.09%)</title><rect x="1185.8" y="483.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.8" y="494.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.09%)</title><rect x="1185.8" y="467.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.8" y="478.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.09%)</title><rect x="1185.8" y="451.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.8" y="462.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.09%)</title><rect x="1185.8" y="435.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.8" y="446.0"></text>
</g>
<g>
<title>GraphBuilder::load_constant() (1 samples, 0.09%)</title><rect x="1185.8" y="419.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.8" y="430.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_constant() (1 samples, 0.09%)</title><rect x="1185.8" y="403.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.8" y="414.0"></text>
</g>
<g>
<title>ciEnv::get_constant_by_index(constantPoolHandle, int, int, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1185.8" y="387.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.8" y="398.0"></text>
</g>
<g>
<title>ciEnv::get_constant_by_index_impl(constantPoolHandle, int, int, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1185.8" y="371.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.8" y="382.0"></text>
</g>
<g>
<title>ConstantPool::string_at_impl(constantPoolHandle, int, int, Thread*) (1 samples, 0.09%)</title><rect x="1185.8" y="355.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.8" y="366.0"></text>
</g>
<g>
<title>StringTable::intern(Symbol*, Thread*) (1 samples, 0.09%)</title><rect x="1185.8" y="339.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.8" y="350.0"></text>
</g>
<g>
<title>StringTable::intern(Handle, unsigned short*, int, Thread*) (1 samples, 0.09%)</title><rect x="1185.8" y="323.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.8" y="334.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::enqueue(oopDesc*) (1 samples, 0.09%)</title><rect x="1185.8" y="307.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.8" y="318.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.09%)</title><rect x="1186.9" y="595.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.9" y="606.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.09%)</title><rect x="1186.9" y="579.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.9" y="590.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.09%)</title><rect x="1186.9" y="563.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.9" y="574.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.09%)</title><rect x="1186.9" y="547.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.9" y="558.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.18%)</title><rect x="1187.9" y="643.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.9" y="654.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.18%)</title><rect x="1187.9" y="627.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.9" y="638.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.09%)</title><rect x="1187.9" y="611.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.9" y="622.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.09%)</title><rect x="1187.9" y="595.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.9" y="606.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.09%)</title><rect x="1187.9" y="579.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.9" y="590.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1187.9" y="563.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.9" y="574.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1187.9" y="547.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.9" y="558.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="1187.9" y="531.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.9" y="542.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.09%)</title><rect x="1187.9" y="515.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.9" y="526.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.09%)</title><rect x="1189.0" y="611.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1192.0" y="622.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.09%)</title><rect x="1189.0" y="595.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1192.0" y="606.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.09%)</title><rect x="1189.0" y="579.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1192.0" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.09%)</title><rect x="1189.0" y="563.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1192.0" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::eagerly_reclaim_humongous_regions() (1 samples, 0.09%)</title><rect x="1189.0" y="547.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1192.0" y="558.0"></text>
</g>
<g>
<title>HeapRegionManager::iterate(HeapRegionClosure*) const (1 samples, 0.09%)</title><rect x="1189.0" y="531.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1192.0" y="542.0"></text>
</g>
<g>
<title>G1FreeHumongousRegionClosure::doHeapRegion(HeapRegion*) (1 samples, 0.09%)</title><rect x="1189.0" y="515.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1192.0" y="526.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1189.0" y="499.0" width="1.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1192.0" y="510.0"></text>
</g>
</g>
</svg>
