<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="565"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="565"> </text>
<g id="frames">
<g>
<title>all (287 samples, 100.00%)</title><rect x="10.0" y="531.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="542.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (17 samples, 5.92%)</title><rect x="10.0" y="515.0" width="69.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="526.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (17 samples, 5.92%)</title><rect x="10.0" y="499.0" width="69.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="510.0">com/lin..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (4 samples, 1.39%)</title><rect x="10.0" y="483.0" width="16.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$265/1054601949.accept (3 samples, 1.05%)</title><rect x="10.0" y="467.0" width="12.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (3 samples, 1.05%)</title><rect x="10.0" y="451.0" width="12.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (3 samples, 1.05%)</title><rect x="10.0" y="435.0" width="12.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (3 samples, 1.05%)</title><rect x="10.0" y="419.0" width="12.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (3 samples, 1.05%)</title><rect x="10.0" y="403.0" width="12.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (3 samples, 1.05%)</title><rect x="10.0" y="387.0" width="12.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.35%)</title><rect x="18.2" y="371.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="21.2" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.35%)</title><rect x="18.2" y="355.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.2" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.35%)</title><rect x="22.3" y="467.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="25.3" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (13 samples, 4.53%)</title><rect x="26.4" y="483.0" width="53.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="29.4" y="494.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (13 samples, 4.53%)</title><rect x="26.4" y="467.0" width="53.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="29.4" y="478.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (7 samples, 2.44%)</title><rect x="26.4" y="451.0" width="28.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="29.4" y="462.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.70%)</title><rect x="26.4" y="435.0" width="8.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="29.4" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.70%)</title><rect x="26.4" y="419.0" width="8.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="29.4" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.70%)</title><rect x="26.4" y="403.0" width="8.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="29.4" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.70%)</title><rect x="26.4" y="387.0" width="8.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="29.4" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.35%)</title><rect x="26.4" y="371.0" width="4.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="29.4" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.35%)</title><rect x="26.4" y="355.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="29.4" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.35%)</title><rect x="30.6" y="371.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="33.6" y="382.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1976239254.linkToTargetMethod (1 samples, 0.35%)</title><rect x="30.6" y="355.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="33.6" y="366.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1672863339.invokeStatic_JJ_L (1 samples, 0.35%)</title><rect x="30.6" y="339.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="33.6" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (5 samples, 1.74%)</title><rect x="34.7" y="435.0" width="20.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="37.7" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.35%)</title><rect x="34.7" y="419.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="37.7" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.35%)</title><rect x="34.7" y="403.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="37.7" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.35%)</title><rect x="34.7" y="387.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="37.7" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.peek (1 samples, 0.35%)</title><rect x="38.8" y="419.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="41.8" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 1.05%)</title><rect x="42.9" y="419.0" width="12.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="45.9" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (2 samples, 0.70%)</title><rect x="42.9" y="403.0" width="8.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="45.9" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 0.70%)</title><rect x="42.9" y="387.0" width="8.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="45.9" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.35%)</title><rect x="42.9" y="371.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="45.9" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.35%)</title><rect x="42.9" y="355.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="45.9" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.35%)</title><rect x="42.9" y="339.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="45.9" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.35%)</title><rect x="42.9" y="323.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="45.9" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.35%)</title><rect x="42.9" y="307.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="45.9" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.35%)</title><rect x="42.9" y="291.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="45.9" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.35%)</title><rect x="42.9" y="275.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="45.9" y="286.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.35%)</title><rect x="42.9" y="259.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="45.9" y="270.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.35%)</title><rect x="47.0" y="371.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="50.0" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.35%)</title><rect x="47.0" y="355.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="50.0" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.35%)</title><rect x="47.0" y="339.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="50.0" y="350.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.35%)</title><rect x="47.0" y="323.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="50.0" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isAssigned (1 samples, 0.35%)</title><rect x="51.1" y="403.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="54.1" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.contains (1 samples, 0.35%)</title><rect x="51.1" y="387.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="54.1" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.35%)</title><rect x="51.1" y="371.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="54.1" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.35%)</title><rect x="51.1" y="355.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="54.1" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (4 samples, 1.39%)</title><rect x="55.2" y="451.0" width="16.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="58.2" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (4 samples, 1.39%)</title><rect x="55.2" y="435.0" width="16.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="58.2" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (3 samples, 1.05%)</title><rect x="55.2" y="419.0" width="12.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="58.2" y="430.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.35%)</title><rect x="55.2" y="403.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="58.2" y="414.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.35%)</title><rect x="59.3" y="403.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="62.3" y="414.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.35%)</title><rect x="59.3" y="387.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="62.3" y="398.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.35%)</title><rect x="59.3" y="371.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="62.3" y="382.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.35%)</title><rect x="59.3" y="355.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="62.3" y="366.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.35%)</title><rect x="59.3" y="339.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="62.3" y="350.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.35%)</title><rect x="59.3" y="323.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="62.3" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap$HashMapSpliterator.estimateSize (1 samples, 0.35%)</title><rect x="59.3" y="307.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="62.3" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.35%)</title><rect x="63.4" y="403.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="66.4" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.35%)</title><rect x="63.4" y="387.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="66.4" y="398.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.35%)</title><rect x="63.4" y="371.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="66.4" y="382.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.35%)</title><rect x="63.4" y="355.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="66.4" y="366.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.35%)</title><rect x="63.4" y="339.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="66.4" y="350.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.35%)</title><rect x="63.4" y="323.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="66.4" y="334.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.35%)</title><rect x="63.4" y="307.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="66.4" y="318.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.35%)</title><rect x="63.4" y="291.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="66.4" y="302.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.35%)</title><rect x="63.4" y="275.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="66.4" y="286.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.35%)</title><rect x="63.4" y="259.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="66.4" y="270.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.35%)</title><rect x="63.4" y="243.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="66.4" y="254.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$57/1058634310.get (1 samples, 0.35%)</title><rect x="63.4" y="227.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="66.4" y="238.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.35%)</title><rect x="67.6" y="419.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="70.6" y="430.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.35%)</title><rect x="67.6" y="403.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="70.6" y="414.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.35%)</title><rect x="67.6" y="387.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="70.6" y="398.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.35%)</title><rect x="67.6" y="371.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="70.6" y="382.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.35%)</title><rect x="67.6" y="355.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="70.6" y="366.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.35%)</title><rect x="67.6" y="339.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="70.6" y="350.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.35%)</title><rect x="67.6" y="323.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="70.6" y="334.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.35%)</title><rect x="67.6" y="307.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="70.6" y="318.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.35%)</title><rect x="67.6" y="291.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="70.6" y="302.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.35%)</title><rect x="67.6" y="275.0" width="4.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="70.6" y="286.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.70%)</title><rect x="71.7" y="451.0" width="8.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="74.7" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.35%)</title><rect x="75.8" y="435.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="78.8" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.35%)</title><rect x="75.8" y="419.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="78.8" y="430.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.35%)</title><rect x="75.8" y="403.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="78.8" y="414.0"></text>
</g>
<g>
<title>java/lang/Thread.run (231 samples, 80.49%)</title><rect x="79.9" y="515.0" width="949.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="82.9" y="526.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (231 samples, 80.49%)</title><rect x="79.9" y="499.0" width="949.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="82.9" y="510.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (231 samples, 80.49%)</title><rect x="79.9" y="483.0" width="949.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="82.9" y="494.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$285/15137763.run (215 samples, 74.91%)</title><rect x="92.2" y="467.0" width="884.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="95.2" y="478.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$285/15137763.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$69 (214 samples, 74.56%)</title><rect x="96.3" y="451.0" width="879.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="99.3" y="462.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$69</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (214 samples, 74.56%)</title><rect x="96.3" y="435.0" width="879.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="99.3" y="446.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (211 samples, 73.52%)</title><rect x="96.3" y="419.0" width="867.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="99.3" y="430.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (39 samples, 13.59%)</title><rect x="116.9" y="403.0" width="160.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="119.9" y="414.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$43/416153648.extract (38 samples, 13.24%)</title><rect x="121.0" y="387.0" width="156.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="124.0" y="398.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (38 samples, 13.24%)</title><rect x="121.0" y="371.0" width="156.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="124.0" y="382.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (38 samples, 13.24%)</title><rect x="121.0" y="355.0" width="156.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="124.0" y="366.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (38 samples, 13.24%)</title><rect x="121.0" y="339.0" width="156.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="124.0" y="350.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (38 samples, 13.24%)</title><rect x="121.0" y="323.0" width="156.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="124.0" y="334.0">com/fasterxml/jackso..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (12 samples, 4.18%)</title><rect x="121.0" y="307.0" width="49.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="124.0" y="318.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (5 samples, 1.74%)</title><rect x="121.0" y="291.0" width="20.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="124.0" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (5 samples, 1.74%)</title><rect x="121.0" y="275.0" width="20.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="124.0" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (5 samples, 1.74%)</title><rect x="121.0" y="259.0" width="20.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="124.0" y="270.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 1.74%)</title><rect x="121.0" y="243.0" width="20.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="124.0" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (1 samples, 0.35%)</title><rect x="137.5" y="227.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="140.5" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (7 samples, 2.44%)</title><rect x="141.6" y="291.0" width="28.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="144.6" y="302.0">co..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.35%)</title><rect x="145.7" y="275.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="148.7" y="286.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.35%)</title><rect x="145.7" y="259.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="148.7" y="270.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.35%)</title><rect x="145.7" y="243.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="148.7" y="254.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.35%)</title><rect x="145.7" y="227.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="148.7" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (5 samples, 1.74%)</title><rect x="149.8" y="275.0" width="20.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="152.8" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.70%)</title><rect x="149.8" y="259.0" width="8.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="152.8" y="270.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.35%)</title><rect x="149.8" y="243.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="152.8" y="254.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.35%)</title><rect x="149.8" y="227.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="152.8" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.35%)</title><rect x="153.9" y="243.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="156.9" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (3 samples, 1.05%)</title><rect x="158.0" y="259.0" width="12.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="161.0" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (3 samples, 1.05%)</title><rect x="158.0" y="243.0" width="12.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="161.0" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.35%)</title><rect x="166.2" y="227.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="169.2" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (23 samples, 8.01%)</title><rect x="170.3" y="307.0" width="94.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="173.3" y="318.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (4 samples, 1.39%)</title><rect x="170.3" y="291.0" width="16.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="173.3" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (4 samples, 1.39%)</title><rect x="170.3" y="275.0" width="16.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="173.3" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (4 samples, 1.39%)</title><rect x="170.3" y="259.0" width="16.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="173.3" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (4 samples, 1.39%)</title><rect x="170.3" y="243.0" width="16.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="173.3" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (1 samples, 0.35%)</title><rect x="174.5" y="227.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="177.5" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (1 samples, 0.35%)</title><rect x="174.5" y="211.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="177.5" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.checkedByteOffset (1 samples, 0.35%)</title><rect x="174.5" y="195.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="177.5" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 0.70%)</title><rect x="178.6" y="227.0" width="8.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="181.6" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.70%)</title><rect x="186.8" y="291.0" width="8.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="189.8" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.70%)</title><rect x="186.8" y="275.0" width="8.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="189.8" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.35%)</title><rect x="190.9" y="259.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="193.9" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.35%)</title><rect x="195.0" y="291.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="198.0" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.35%)</title><rect x="195.0" y="275.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="198.0" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.35%)</title><rect x="195.0" y="259.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="198.0" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.35%)</title><rect x="195.0" y="243.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="198.0" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.70%)</title><rect x="199.1" y="291.0" width="8.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="202.1" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.70%)</title><rect x="199.1" y="275.0" width="8.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="202.1" y="286.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.35%)</title><rect x="199.1" y="259.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="202.1" y="270.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.35%)</title><rect x="199.1" y="243.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="202.1" y="254.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.35%)</title><rect x="199.1" y="227.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="202.1" y="238.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.35%)</title><rect x="199.1" y="211.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="202.1" y="222.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.35%)</title><rect x="199.1" y="195.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="202.1" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.35%)</title><rect x="203.2" y="259.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="206.2" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.35%)</title><rect x="203.2" y="243.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="206.2" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.35%)</title><rect x="203.2" y="227.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="206.2" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (14 samples, 4.88%)</title><rect x="207.4" y="291.0" width="57.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="210.4" y="302.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.70%)</title><rect x="211.5" y="275.0" width="8.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="214.5" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (11 samples, 3.83%)</title><rect x="219.7" y="275.0" width="45.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="222.7" y="286.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (11 samples, 3.83%)</title><rect x="219.7" y="259.0" width="45.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="222.7" y="270.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (10 samples, 3.48%)</title><rect x="223.8" y="243.0" width="41.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="226.8" y="254.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.70%)</title><rect x="223.8" y="227.0" width="8.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="226.8" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.35%)</title><rect x="223.8" y="211.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="226.8" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.35%)</title><rect x="223.8" y="195.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="226.8" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.35%)</title><rect x="223.8" y="179.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="226.8" y="190.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.35%)</title><rect x="227.9" y="211.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="230.9" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (4 samples, 1.39%)</title><rect x="232.0" y="227.0" width="16.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="235.0" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 1.05%)</title><rect x="236.1" y="211.0" width="12.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="239.1" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 1.05%)</title><rect x="236.1" y="195.0" width="12.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="239.1" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 1.05%)</title><rect x="236.1" y="179.0" width="12.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="239.1" y="190.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 1.05%)</title><rect x="236.1" y="163.0" width="12.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="239.1" y="174.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.35%)</title><rect x="248.5" y="227.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="251.5" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.35%)</title><rect x="248.5" y="211.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="251.5" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.35%)</title><rect x="248.5" y="195.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="251.5" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.35%)</title><rect x="248.5" y="179.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="251.5" y="190.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.35%)</title><rect x="248.5" y="163.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="251.5" y="174.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.35%)</title><rect x="248.5" y="147.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="251.5" y="158.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (1 samples, 0.35%)</title><rect x="248.5" y="131.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="251.5" y="142.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (3 samples, 1.05%)</title><rect x="252.6" y="227.0" width="12.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="255.6" y="238.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 1.05%)</title><rect x="252.6" y="211.0" width="12.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="255.6" y="222.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 1.05%)</title><rect x="252.6" y="195.0" width="12.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="255.6" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (3 samples, 1.05%)</title><rect x="264.9" y="307.0" width="12.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="267.9" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (3 samples, 1.05%)</title><rect x="264.9" y="291.0" width="12.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="267.9" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (3 samples, 1.05%)</title><rect x="264.9" y="275.0" width="12.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="267.9" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (3 samples, 1.05%)</title><rect x="264.9" y="259.0" width="12.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="267.9" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 1.05%)</title><rect x="264.9" y="243.0" width="12.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="267.9" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (1 samples, 0.35%)</title><rect x="273.1" y="227.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="276.1" y="238.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (153 samples, 53.31%)</title><rect x="277.2" y="403.0" width="629.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="280.2" y="414.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (25 samples, 8.71%)</title><rect x="277.2" y="387.0" width="102.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="280.2" y="398.0">com/linecorp..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (23 samples, 8.01%)</title><rect x="285.5" y="371.0" width="94.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="288.5" y="382.0">org/slf4j/M..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (16 samples, 5.57%)</title><rect x="314.3" y="355.0" width="65.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="317.3" y="366.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (7 samples, 2.44%)</title><rect x="322.5" y="339.0" width="28.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="325.5" y="350.0">ch..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 2.44%)</title><rect x="322.5" y="323.0" width="28.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="325.5" y="334.0">ja..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (7 samples, 2.44%)</title><rect x="322.5" y="307.0" width="28.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="325.5" y="318.0">ja..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (7 samples, 2.44%)</title><rect x="322.5" y="291.0" width="28.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="325.5" y="302.0">ja..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (7 samples, 2.44%)</title><rect x="322.5" y="275.0" width="28.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="325.5" y="286.0">ja..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (7 samples, 2.44%)</title><rect x="351.3" y="339.0" width="28.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="354.3" y="350.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (6 samples, 2.09%)</title><rect x="355.4" y="323.0" width="24.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="358.4" y="334.0">j..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (6 samples, 2.09%)</title><rect x="355.4" y="307.0" width="24.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="358.4" y="318.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.70%)</title><rect x="380.0" y="387.0" width="8.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="383.0" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.70%)</title><rect x="380.0" y="371.0" width="8.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="383.0" y="382.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.35%)</title><rect x="380.0" y="355.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="383.0" y="366.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.35%)</title><rect x="380.0" y="339.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="383.0" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.35%)</title><rect x="380.0" y="323.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="383.0" y="334.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.35%)</title><rect x="380.0" y="307.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="383.0" y="318.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.35%)</title><rect x="380.0" y="291.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="383.0" y="302.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.35%)</title><rect x="384.1" y="355.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="387.1" y="366.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (32 samples, 11.15%)</title><rect x="388.3" y="387.0" width="131.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="391.3" y="398.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (31 samples, 10.80%)</title><rect x="388.3" y="371.0" width="127.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="391.3" y="382.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (15 samples, 5.23%)</title><rect x="404.7" y="355.0" width="61.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="407.7" y="366.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (15 samples, 5.23%)</title><rect x="404.7" y="339.0" width="61.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="407.7" y="350.0">java/l..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (7 samples, 2.44%)</title><rect x="425.3" y="323.0" width="28.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="428.3" y="334.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.70%)</title><rect x="437.6" y="307.0" width="8.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="440.6" y="318.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.70%)</title><rect x="437.6" y="291.0" width="8.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="440.6" y="302.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.70%)</title><rect x="437.6" y="275.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="440.6" y="286.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.70%)</title><rect x="437.6" y="259.0" width="8.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="440.6" y="270.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.70%)</title><rect x="437.6" y="243.0" width="8.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="440.6" y="254.0"></text>
</g>
<g>
<title>CodeBlob::is_nmethod() const (1 samples, 0.35%)</title><rect x="437.6" y="227.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="440.6" y="238.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.35%)</title><rect x="441.7" y="227.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="444.7" y="238.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.35%)</title><rect x="441.7" y="211.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="444.7" y="222.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.35%)</title><rect x="441.7" y="195.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="444.7" y="206.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.70%)</title><rect x="445.8" y="307.0" width="8.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="448.8" y="318.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 1.05%)</title><rect x="454.0" y="323.0" width="12.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="457.0" y="334.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.35%)</title><rect x="466.4" y="355.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="469.4" y="366.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.35%)</title><rect x="466.4" y="339.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="469.4" y="350.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.35%)</title><rect x="466.4" y="323.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="469.4" y="334.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (11 samples, 3.83%)</title><rect x="470.5" y="355.0" width="45.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="473.5" y="366.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (9 samples, 3.14%)</title><rect x="478.7" y="339.0" width="37.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="481.7" y="350.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 1.05%)</title><rect x="482.8" y="323.0" width="12.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="485.8" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 1.05%)</title><rect x="482.8" y="307.0" width="12.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="485.8" y="318.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 1.05%)</title><rect x="482.8" y="291.0" width="12.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="485.8" y="302.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 1.05%)</title><rect x="482.8" y="275.0" width="12.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="485.8" y="286.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 1.05%)</title><rect x="482.8" y="259.0" width="12.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="485.8" y="270.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (5 samples, 1.74%)</title><rect x="495.2" y="323.0" width="20.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="498.2" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.put (5 samples, 1.74%)</title><rect x="495.2" y="307.0" width="20.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="498.2" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 1.74%)</title><rect x="495.2" y="291.0" width="20.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="498.2" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.70%)</title><rect x="499.3" y="275.0" width="8.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="502.3" y="286.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.70%)</title><rect x="507.5" y="275.0" width="8.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="510.5" y="286.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (1 samples, 0.35%)</title><rect x="515.7" y="371.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="518.7" y="382.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.35%)</title><rect x="515.7" y="355.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="518.7" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.35%)</title><rect x="515.7" y="339.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="518.7" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.35%)</title><rect x="515.7" y="323.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="518.7" y="334.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.35%)</title><rect x="515.7" y="307.0" width="4.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="518.7" y="318.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.35%)</title><rect x="515.7" y="291.0" width="4.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="518.7" y="302.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (87 samples, 30.31%)</title><rect x="519.8" y="387.0" width="357.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="522.8" y="398.0">com/linecorp/decaton/processor/runtime/internal/P..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (86 samples, 29.97%)</title><rect x="523.9" y="371.0" width="353.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="526.9" y="382.0">com/linecorp/decaton/processor/runtime/internal/..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.35%)</title><rect x="532.2" y="355.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="535.2" y="366.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.35%)</title><rect x="532.2" y="339.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="535.2" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.35%)</title><rect x="532.2" y="323.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="535.2" y="334.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$207/767174133.process (77 samples, 26.83%)</title><rect x="536.3" y="355.0" width="316.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="539.3" y="366.0">com/linecorp/decaton/benchmark/DecatonRunne..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (77 samples, 26.83%)</title><rect x="536.3" y="339.0" width="316.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="539.3" y="350.0">com/linecorp/decaton/benchmark/DecatonRunne..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (77 samples, 26.83%)</title><rect x="536.3" y="323.0" width="316.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="539.3" y="334.0">com/linecorp/decaton/benchmark/Recording.pr..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.70%)</title><rect x="536.3" y="307.0" width="8.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="539.3" y="318.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.70%)</title><rect x="536.3" y="291.0" width="8.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="539.3" y="302.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.70%)</title><rect x="536.3" y="275.0" width="8.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="539.3" y="286.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.70%)</title><rect x="536.3" y="259.0" width="8.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="539.3" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.70%)</title><rect x="536.3" y="243.0" width="8.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="539.3" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.35%)</title><rect x="540.4" y="227.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="543.4" y="238.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (74 samples, 25.78%)</title><rect x="544.5" y="307.0" width="304.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="547.5" y="318.0">com/linecorp/decaton/benchmark/Recording$..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.35%)</title><rect x="552.7" y="291.0" width="4.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="555.7" y="302.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.35%)</title><rect x="552.7" y="275.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="555.7" y="286.0"></text>
</g>
<g>
<title>java/lang/Thread.sleep (69 samples, 24.04%)</title><rect x="556.8" y="291.0" width="283.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="559.8" y="302.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (58 samples, 20.21%)</title><rect x="593.8" y="275.0" width="238.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="596.8" y="286.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.70%)</title><rect x="614.4" y="259.0" width="8.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="617.4" y="270.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.35%)</title><rect x="622.6" y="259.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="625.6" y="270.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.70%)</title><rect x="626.7" y="259.0" width="8.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="629.7" y="270.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 1.74%)</title><rect x="634.9" y="259.0" width="20.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="637.9" y="270.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 1.39%)</title><rect x="639.1" y="243.0" width="16.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="642.1" y="254.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.35%)</title><rect x="655.5" y="259.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="658.5" y="270.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (42 samples, 14.63%)</title><rect x="659.6" y="259.0" width="172.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="662.6" y="270.0">os::sleep(Thread*, lon..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.35%)</title><rect x="688.4" y="243.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="691.4" y="254.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.35%)</title><rect x="688.4" y="227.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="691.4" y="238.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.35%)</title><rect x="692.5" y="243.0" width="4.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="695.5" y="254.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.35%)</title><rect x="692.5" y="227.0" width="4.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="695.5" y="238.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.35%)</title><rect x="696.6" y="243.0" width="4.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="699.6" y="254.0"></text>
</g>
<g>
<title>__pthread_cond_init (1 samples, 0.35%)</title><rect x="700.7" y="243.0" width="4.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="703.7" y="254.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (21 samples, 7.32%)</title><rect x="704.8" y="243.0" width="86.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="707.8" y="254.0">__pthread_..</text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.35%)</title><rect x="791.2" y="243.0" width="4.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="794.2" y="254.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (6 samples, 2.09%)</title><rect x="795.3" y="243.0" width="24.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="798.3" y="254.0">o..</text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.35%)</title><rect x="820.0" y="243.0" width="4.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="823.0" y="254.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.70%)</title><rect x="824.1" y="243.0" width="8.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="827.1" y="254.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.35%)</title><rect x="832.3" y="275.0" width="4.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="835.3" y="286.0"></text>
</g>
<g>
<title>__libc_dl_error_tsd (1 samples, 0.35%)</title><rect x="832.3" y="259.0" width="4.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="835.3" y="270.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.35%)</title><rect x="836.4" y="275.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="839.4" y="286.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.70%)</title><rect x="840.5" y="291.0" width="8.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="843.5" y="302.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.70%)</title><rect x="840.5" y="275.0" width="8.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="843.5" y="286.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.35%)</title><rect x="848.7" y="307.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="851.7" y="318.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (2 samples, 0.70%)</title><rect x="852.9" y="355.0" width="8.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="855.9" y="366.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1318180415.linkToTargetMethod (1 samples, 0.35%)</title><rect x="861.1" y="355.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="864.1" y="366.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (1 samples, 0.35%)</title><rect x="861.1" y="339.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="864.1" y="350.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$288/1075340810.get$Lambda (1 samples, 0.35%)</title><rect x="861.1" y="323.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="864.1" y="334.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.70%)</title><rect x="865.2" y="355.0" width="8.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="868.2" y="366.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.70%)</title><rect x="865.2" y="339.0" width="8.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="868.2" y="350.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.70%)</title><rect x="865.2" y="323.0" width="8.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="868.2" y="334.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.35%)</title><rect x="873.4" y="355.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="876.4" y="366.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.35%)</title><rect x="873.4" y="339.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="876.4" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 2.44%)</title><rect x="877.5" y="387.0" width="28.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="880.5" y="398.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (7 samples, 2.44%)</title><rect x="877.5" y="371.0" width="28.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="880.5" y="382.0">ja..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.35%)</title><rect x="898.1" y="355.0" width="4.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="901.1" y="366.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.35%)</title><rect x="898.1" y="339.0" width="4.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="901.1" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.35%)</title><rect x="902.2" y="355.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="905.2" y="366.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$291/202182382.accept (1 samples, 0.35%)</title><rect x="902.2" y="339.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="905.2" y="350.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$64 (1 samples, 0.35%)</title><rect x="902.2" y="323.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="905.2" y="334.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.35%)</title><rect x="902.2" y="307.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="905.2" y="318.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.35%)</title><rect x="902.2" y="291.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="905.2" y="302.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.35%)</title><rect x="902.2" y="275.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="905.2" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (14 samples, 4.88%)</title><rect x="906.3" y="403.0" width="57.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="909.3" y="414.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (14 samples, 4.88%)</title><rect x="906.3" y="387.0" width="57.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="909.3" y="398.0">java/u..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (2 samples, 0.70%)</title><rect x="914.5" y="371.0" width="8.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="917.5" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (10 samples, 3.48%)</title><rect x="922.8" y="371.0" width="41.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="925.8" y="382.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$292/829871799.accept (10 samples, 3.48%)</title><rect x="922.8" y="355.0" width="41.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="925.8" y="366.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$63 (10 samples, 3.48%)</title><rect x="922.8" y="339.0" width="41.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="925.8" y="350.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$283/1931268949.complete (10 samples, 3.48%)</title><rect x="922.8" y="323.0" width="41.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="925.8" y="334.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$73 (10 samples, 3.48%)</title><rect x="922.8" y="307.0" width="41.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="925.8" y="318.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$282/618804648.complete (10 samples, 3.48%)</title><rect x="922.8" y="291.0" width="41.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="925.8" y="302.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$49 (10 samples, 3.48%)</title><rect x="922.8" y="275.0" width="41.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="925.8" y="286.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (10 samples, 3.48%)</title><rect x="922.8" y="259.0" width="41.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="925.8" y="270.0">com..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (10 samples, 3.48%)</title><rect x="922.8" y="243.0" width="41.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="925.8" y="254.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (10 samples, 3.48%)</title><rect x="922.8" y="227.0" width="41.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="925.8" y="238.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (10 samples, 3.48%)</title><rect x="922.8" y="211.0" width="41.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="925.8" y="222.0">ch/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (3 samples, 1.05%)</title><rect x="963.9" y="419.0" width="12.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="966.9" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.35%)</title><rect x="976.2" y="467.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="979.2" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.35%)</title><rect x="976.2" y="451.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="979.2" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.35%)</title><rect x="976.2" y="435.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="979.2" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.35%)</title><rect x="976.2" y="419.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="979.2" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1 samples, 0.35%)</title><rect x="976.2" y="403.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="979.2" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (12 samples, 4.18%)</title><rect x="980.3" y="467.0" width="49.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="983.3" y="478.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (6 samples, 2.09%)</title><rect x="980.3" y="451.0" width="24.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="983.3" y="462.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (2 samples, 0.70%)</title><rect x="984.4" y="435.0" width="8.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="987.4" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.70%)</title><rect x="984.4" y="419.0" width="8.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="987.4" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 1.05%)</title><rect x="992.6" y="435.0" width="12.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="995.6" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.05%)</title><rect x="992.6" y="419.0" width="12.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="995.6" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 1.05%)</title><rect x="992.6" y="403.0" width="12.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="995.6" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 1.05%)</title><rect x="992.6" y="387.0" width="12.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="995.6" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateOf (6 samples, 2.09%)</title><rect x="1005.0" y="451.0" width="24.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1008.0" y="462.0">j..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.70%)</title><rect x="1029.7" y="515.0" width="8.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1032.7" y="526.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.35%)</title><rect x="1033.8" y="499.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1036.8" y="510.0"></text>
</g>
<g>
<title>start_thread (36 samples, 12.54%)</title><rect x="1037.9" y="515.0" width="148.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1040.9" y="526.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (36 samples, 12.54%)</title><rect x="1037.9" y="499.0" width="148.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1040.9" y="510.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (12 samples, 4.18%)</title><rect x="1037.9" y="483.0" width="49.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1040.9" y="494.0">GangW..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.35%)</title><rect x="1037.9" y="467.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1040.9" y="478.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.35%)</title><rect x="1037.9" y="451.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1040.9" y="462.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.35%)</title><rect x="1037.9" y="435.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1040.9" y="446.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (11 samples, 3.83%)</title><rect x="1042.0" y="467.0" width="45.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1045.0" y="478.0">G1Pa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (9 samples, 3.14%)</title><rect x="1042.0" y="451.0" width="37.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1045.0" y="462.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (8 samples, 2.79%)</title><rect x="1042.0" y="435.0" width="32.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1045.0" y="446.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.70%)</title><rect x="1062.5" y="419.0" width="8.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1065.5" y="430.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.35%)</title><rect x="1066.7" y="403.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1069.7" y="414.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.35%)</title><rect x="1070.8" y="419.0" width="4.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1073.8" y="430.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.35%)</title><rect x="1074.9" y="435.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1077.9" y="446.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.35%)</title><rect x="1079.0" y="451.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1082.0" y="462.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.35%)</title><rect x="1079.0" y="435.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1082.0" y="446.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.35%)</title><rect x="1079.0" y="419.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1082.0" y="430.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.35%)</title><rect x="1079.0" y="403.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1082.0" y="414.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.35%)</title><rect x="1079.0" y="387.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1082.0" y="398.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.35%)</title><rect x="1079.0" y="371.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1082.0" y="382.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.35%)</title><rect x="1083.1" y="451.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1086.1" y="462.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.35%)</title><rect x="1083.1" y="435.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1086.1" y="446.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (1 samples, 0.35%)</title><rect x="1083.1" y="419.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1086.1" y="430.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (1 samples, 0.35%)</title><rect x="1083.1" y="403.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1086.1" y="414.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.35%)</title><rect x="1083.1" y="387.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1086.1" y="398.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (1 samples, 0.35%)</title><rect x="1083.1" y="371.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1086.1" y="382.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.35%)</title><rect x="1083.1" y="355.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1086.1" y="366.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, int) (1 samples, 0.35%)</title><rect x="1083.1" y="339.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1086.1" y="350.0"></text>
</g>
<g>
<title>JavaThread::run() (23 samples, 8.01%)</title><rect x="1087.2" y="483.0" width="94.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1090.2" y="494.0">JavaThread:..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (23 samples, 8.01%)</title><rect x="1087.2" y="467.0" width="94.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1090.2" y="478.0">JavaThread:..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (23 samples, 8.01%)</title><rect x="1087.2" y="451.0" width="94.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1090.2" y="462.0">CompileBrok..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (22 samples, 7.67%)</title><rect x="1087.2" y="435.0" width="90.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1090.2" y="446.0">CompileBro..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (20 samples, 6.97%)</title><rect x="1087.2" y="419.0" width="82.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1090.2" y="430.0">C2Compile..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (20 samples, 6.97%)</title><rect x="1087.2" y="403.0" width="82.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1090.2" y="414.0">Compile::..</text>
</g>
<g>
<title>Compile::Code_Gen() (12 samples, 4.18%)</title><rect x="1087.2" y="387.0" width="49.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1090.2" y="398.0">Compi..</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.35%)</title><rect x="1087.2" y="371.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1090.2" y="382.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.35%)</title><rect x="1087.2" y="355.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1090.2" y="366.0"></text>
</g>
<g>
<title>Matcher::match() (1 samples, 0.35%)</title><rect x="1091.3" y="371.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1094.3" y="382.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.35%)</title><rect x="1091.3" y="355.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1094.3" y="366.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.35%)</title><rect x="1095.4" y="371.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1098.4" y="382.0"></text>
</g>
<g>
<title>PhaseCFG::estimate_block_frequency() (1 samples, 0.35%)</title><rect x="1095.4" y="355.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1098.4" y="366.0"></text>
</g>
<g>
<title>CFGLoop::compute_freq() (1 samples, 0.35%)</title><rect x="1095.4" y="339.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1098.4" y="350.0"></text>
</g>
<g>
<title>Block::succ_prob(unsigned int) (1 samples, 0.35%)</title><rect x="1095.4" y="323.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1098.4" y="334.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (9 samples, 3.14%)</title><rect x="1099.5" y="371.0" width="37.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1102.5" y="382.0">Pha..</text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.35%)</title><rect x="1099.5" y="355.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1102.5" y="366.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.35%)</title><rect x="1099.5" y="339.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1102.5" y="350.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 1.05%)</title><rect x="1103.7" y="355.0" width="12.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1106.7" y="366.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.35%)</title><rect x="1111.9" y="339.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1114.9" y="350.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.35%)</title><rect x="1116.0" y="355.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1119.0" y="366.0"></text>
</g>
<g>
<title>MachSpillCopyNode::ideal_reg() const (1 samples, 0.35%)</title><rect x="1116.0" y="339.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1119.0" y="350.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.70%)</title><rect x="1120.1" y="355.0" width="8.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1123.1" y="366.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.35%)</title><rect x="1128.3" y="355.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1131.3" y="366.0"></text>
</g>
<g>
<title>MachProjNode::bottom_type() const (1 samples, 0.35%)</title><rect x="1128.3" y="339.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1131.3" y="350.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.35%)</title><rect x="1132.4" y="355.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1135.4" y="366.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.35%)</title><rect x="1132.4" y="339.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1135.4" y="350.0"></text>
</g>
<g>
<title>Compile::Optimize() (5 samples, 1.74%)</title><rect x="1136.6" y="387.0" width="20.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1139.6" y="398.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (4 samples, 1.39%)</title><rect x="1136.6" y="371.0" width="16.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1139.6" y="382.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.70%)</title><rect x="1136.6" y="355.0" width="8.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1139.6" y="366.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.35%)</title><rect x="1144.8" y="355.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1147.8" y="366.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.35%)</title><rect x="1148.9" y="355.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1151.9" y="366.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.35%)</title><rect x="1153.0" y="371.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1156.0" y="382.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.35%)</title><rect x="1153.0" y="355.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1156.0" y="366.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.35%)</title><rect x="1153.0" y="339.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1156.0" y="350.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.35%)</title><rect x="1153.0" y="323.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1156.0" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.70%)</title><rect x="1157.1" y="387.0" width="8.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1160.1" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.70%)</title><rect x="1157.1" y="371.0" width="8.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1160.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.70%)</title><rect x="1157.1" y="355.0" width="8.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.70%)</title><rect x="1157.1" y="339.0" width="8.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.70%)</title><rect x="1157.1" y="323.0" width="8.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.70%)</title><rect x="1157.1" y="307.0" width="8.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1160.1" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.70%)</title><rect x="1157.1" y="291.0" width="8.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1160.1" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.70%)</title><rect x="1157.1" y="275.0" width="8.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1160.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.70%)</title><rect x="1157.1" y="259.0" width="8.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.70%)</title><rect x="1157.1" y="243.0" width="8.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.70%)</title><rect x="1157.1" y="227.0" width="8.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.70%)</title><rect x="1157.1" y="211.0" width="8.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.1" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.70%)</title><rect x="1157.1" y="195.0" width="8.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1160.1" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.70%)</title><rect x="1157.1" y="179.0" width="8.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.1" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.70%)</title><rect x="1157.1" y="163.0" width="8.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.1" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.70%)</title><rect x="1157.1" y="147.0" width="8.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.1" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.70%)</title><rect x="1157.1" y="131.0" width="8.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.1" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1157.1" y="115.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.1" y="126.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.35%)</title><rect x="1157.1" y="99.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.1" y="110.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.35%)</title><rect x="1157.1" y="83.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.1" y="94.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.35%)</title><rect x="1157.1" y="67.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1160.1" y="78.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.35%)</title><rect x="1157.1" y="51.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.1" y="62.0"></text>
</g>
<g>
<title>ciMethod::has_compiled_code() (1 samples, 0.35%)</title><rect x="1157.1" y="35.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.1" y="46.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.35%)</title><rect x="1161.2" y="115.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.2" y="126.0"></text>
</g>
<g>
<title>transform_long_divide(PhaseGVN*, Node*, long) (1 samples, 0.35%)</title><rect x="1161.2" y="99.0" width="4.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1164.2" y="110.0"></text>
</g>
<g>
<title>PhaseTransform::intcon(int) (1 samples, 0.35%)</title><rect x="1161.2" y="83.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.2" y="94.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.35%)</title><rect x="1161.2" y="67.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.2" y="78.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.35%)</title><rect x="1161.2" y="51.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.2" y="62.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.35%)</title><rect x="1165.3" y="387.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1168.3" y="398.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.35%)</title><rect x="1165.3" y="371.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1168.3" y="382.0"></text>
</g>
<g>
<title>CodeBuffer::finalize_oop_references(methodHandle) (1 samples, 0.35%)</title><rect x="1165.3" y="355.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.3" y="366.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.70%)</title><rect x="1169.4" y="419.0" width="8.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.4" y="430.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.70%)</title><rect x="1169.4" y="403.0" width="8.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.4" y="414.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.70%)</title><rect x="1169.4" y="387.0" width="8.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.4" y="398.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.70%)</title><rect x="1169.4" y="371.0" width="8.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.4" y="382.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.35%)</title><rect x="1169.4" y="355.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.4" y="366.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.35%)</title><rect x="1169.4" y="339.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.4" y="350.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.35%)</title><rect x="1169.4" y="323.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.4" y="334.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.35%)</title><rect x="1169.4" y="307.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.4" y="318.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.35%)</title><rect x="1169.4" y="291.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.4" y="302.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.35%)</title><rect x="1169.4" y="275.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.4" y="286.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.35%)</title><rect x="1169.4" y="259.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.4" y="270.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.35%)</title><rect x="1169.4" y="243.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.4" y="254.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.35%)</title><rect x="1169.4" y="227.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.4" y="238.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.35%)</title><rect x="1169.4" y="211.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.4" y="222.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.35%)</title><rect x="1169.4" y="195.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1172.4" y="206.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.35%)</title><rect x="1169.4" y="179.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.4" y="190.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.35%)</title><rect x="1169.4" y="163.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.4" y="174.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.35%)</title><rect x="1169.4" y="147.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.4" y="158.0"></text>
</g>
<g>
<title>GraphBuilder::push_scope(ciMethod*, BlockBegin*) (1 samples, 0.35%)</title><rect x="1169.4" y="131.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.4" y="142.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.35%)</title><rect x="1169.4" y="115.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.4" y="126.0"></text>
</g>
<g>
<title>BlockListBuilder::make_block_at(int, BlockBegin*) (1 samples, 0.35%)</title><rect x="1169.4" y="99.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.4" y="110.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.35%)</title><rect x="1173.6" y="355.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.6" y="366.0"></text>
</g>
<g>
<title>Compilation::emit_code_epilog(LIR_Assembler*) (1 samples, 0.35%)</title><rect x="1173.6" y="339.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.6" y="350.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_exception_handler() (1 samples, 0.35%)</title><rect x="1173.6" y="323.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.6" y="334.0"></text>
</g>
<g>
<title>MacroAssembler::stop(char const*) (1 samples, 0.35%)</title><rect x="1173.6" y="307.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.6" y="318.0"></text>
</g>
<g>
<title>Assembler::pusha() (1 samples, 0.35%)</title><rect x="1173.6" y="291.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.6" y="302.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.35%)</title><rect x="1177.7" y="435.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.7" y="446.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.35%)</title><rect x="1181.8" y="483.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.8" y="494.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (1 samples, 0.35%)</title><rect x="1181.8" y="467.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.8" y="478.0"></text>
</g>
<g>
<title>StatSamplerTask::task() (1 samples, 0.35%)</title><rect x="1181.8" y="451.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.8" y="462.0"></text>
</g>
<g>
<title>PerfLongVariant::sample() (1 samples, 0.35%)</title><rect x="1181.8" y="435.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.8" y="446.0"></text>
</g>
<g>
<title>os::elapsed_counter() (1 samples, 0.35%)</title><rect x="1181.8" y="419.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.8" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.wakeup (1 samples, 0.35%)</title><rect x="1185.9" y="515.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1188.9" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.interrupt (1 samples, 0.35%)</title><rect x="1185.9" y="499.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1188.9" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.interrupt (1 samples, 0.35%)</title><rect x="1185.9" y="483.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1188.9" y="494.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.35%)</title><rect x="1185.9" y="467.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1188.9" y="478.0"></text>
</g>
</g>
</svg>
