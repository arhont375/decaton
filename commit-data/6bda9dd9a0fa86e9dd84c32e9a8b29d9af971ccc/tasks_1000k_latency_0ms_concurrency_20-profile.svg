<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1046" onload="init(evt)" viewBox="0 0 1200 1046" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1029"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1029"> </text>
<g id="frames">
<g>
<title>all (1,143 samples, 100.00%)</title><rect x="10.0" y="995.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1006.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="10.0" y="979.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.09%)</title><rect x="10.0" y="963.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (282 samples, 24.67%)</title><rect x="11.0" y="979.0" width="291.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.0" y="990.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (2 samples, 0.17%)</title><rect x="11.0" y="963.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.0" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (2 samples, 0.17%)</title><rect x="11.0" y="947.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="14.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (2 samples, 0.17%)</title><rect x="11.0" y="931.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (2 samples, 0.17%)</title><rect x="11.0" y="915.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (2 samples, 0.17%)</title><rect x="11.0" y="899.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.17%)</title><rect x="11.0" y="883.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.0" y="894.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.09%)</title><rect x="11.0" y="867.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="14.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.09%)</title><rect x="12.1" y="867.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.1" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleInitiateApiVersionRequests (1 samples, 0.09%)</title><rect x="12.1" y="851.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.1" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySet.iterator (1 samples, 0.09%)</title><rect x="12.1" y="835.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.1" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$EntryIterator.&lt;init&gt; (1 samples, 0.09%)</title><rect x="12.1" y="819.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.1" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.09%)</title><rect x="12.1" y="803.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.1" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (279 samples, 24.41%)</title><rect x="13.1" y="963.0" width="288.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.1" y="974.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (6 samples, 0.52%)</title><rect x="13.1" y="947.0" width="6.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.1" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (6 samples, 0.52%)</title><rect x="13.1" y="931.0" width="6.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.1" y="942.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (6 samples, 0.52%)</title><rect x="13.1" y="915.0" width="6.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.1" y="926.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (6 samples, 0.52%)</title><rect x="13.1" y="899.0" width="6.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="16.1" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (5 samples, 0.44%)</title><rect x="14.1" y="883.0" width="5.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.1" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (5 samples, 0.44%)</title><rect x="14.1" y="867.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.1" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (4 samples, 0.35%)</title><rect x="14.1" y="851.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="17.1" y="862.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.09%)</title><rect x="14.1" y="835.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.1" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.characteristics (1 samples, 0.09%)</title><rect x="14.1" y="819.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="17.1" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.09%)</title><rect x="15.2" y="835.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.2" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.09%)</title><rect x="15.2" y="819.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.2" y="830.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.09%)</title><rect x="15.2" y="803.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="18.2" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.09%)</title><rect x="15.2" y="787.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="18.2" y="798.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="15.2" y="771.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="18.2" y="782.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (2 samples, 0.17%)</title><rect x="16.2" y="835.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="19.2" y="846.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (2 samples, 0.17%)</title><rect x="16.2" y="819.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.2" y="830.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="16.2" y="803.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="19.2" y="814.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.09%)</title><rect x="17.2" y="803.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.2" y="814.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="17.2" y="787.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="20.2" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.09%)</title><rect x="18.3" y="851.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="21.3" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.09%)</title><rect x="18.3" y="835.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.3" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.09%)</title><rect x="18.3" y="819.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.3" y="830.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.09%)</title><rect x="18.3" y="803.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="21.3" y="814.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.09%)</title><rect x="18.3" y="787.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.3" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (7 samples, 0.61%)</title><rect x="19.3" y="947.0" width="7.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="22.3" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (7 samples, 0.61%)</title><rect x="19.3" y="931.0" width="7.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="22.3" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (7 samples, 0.61%)</title><rect x="19.3" y="915.0" width="7.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="22.3" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$266/824511580.accept (7 samples, 0.61%)</title><rect x="19.3" y="899.0" width="7.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.3" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (7 samples, 0.61%)</title><rect x="19.3" y="883.0" width="7.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="22.3" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (7 samples, 0.61%)</title><rect x="19.3" y="867.0" width="7.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="22.3" y="878.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (6 samples, 0.52%)</title><rect x="20.3" y="851.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="23.3" y="862.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (205 samples, 17.94%)</title><rect x="26.5" y="947.0" width="211.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="29.5" y="958.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$265/1404904113.accept (198 samples, 17.32%)</title><rect x="26.5" y="931.0" width="204.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="29.5" y="942.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (198 samples, 17.32%)</title><rect x="26.5" y="915.0" width="204.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="29.5" y="926.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.wrapForTracing (1 samples, 0.09%)</title><rect x="29.6" y="899.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="32.6" y="910.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/789653861.linkToTargetMethod (1 samples, 0.09%)</title><rect x="29.6" y="883.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="32.6" y="894.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (1 samples, 0.09%)</title><rect x="29.6" y="867.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="32.6" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$283/245826438.get$Lambda (1 samples, 0.09%)</title><rect x="29.6" y="851.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="32.6" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="29.6" y="835.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="32.6" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="29.6" y="819.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="32.6" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.09%)</title><rect x="29.6" y="803.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="32.6" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (162 samples, 14.17%)</title><rect x="30.6" y="899.0" width="167.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="33.6" y="910.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (162 samples, 14.17%)</title><rect x="30.6" y="883.0" width="167.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="33.6" y="894.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (162 samples, 14.17%)</title><rect x="30.6" y="867.0" width="167.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="33.6" y="878.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (162 samples, 14.17%)</title><rect x="30.6" y="851.0" width="167.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="33.6" y="862.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (162 samples, 14.17%)</title><rect x="30.6" y="835.0" width="167.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="33.6" y="846.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (162 samples, 14.17%)</title><rect x="30.6" y="819.0" width="167.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="33.6" y="830.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (114 samples, 9.97%)</title><rect x="71.9" y="803.0" width="117.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="74.9" y="814.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (29 samples, 2.54%)</title><rect x="71.9" y="787.0" width="30.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="74.9" y="798.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (29 samples, 2.54%)</title><rect x="71.9" y="771.0" width="30.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="74.9" y="782.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (29 samples, 2.54%)</title><rect x="71.9" y="755.0" width="30.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="74.9" y="766.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.44%)</title><rect x="101.9" y="787.0" width="5.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="104.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (5 samples, 0.44%)</title><rect x="101.9" y="771.0" width="5.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="104.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.26%)</title><rect x="103.9" y="755.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="106.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (80 samples, 7.00%)</title><rect x="107.0" y="787.0" width="82.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="110.0" y="798.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (80 samples, 7.00%)</title><rect x="107.0" y="771.0" width="82.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="110.0" y="782.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (77 samples, 6.74%)</title><rect x="108.1" y="755.0" width="79.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="111.1" y="766.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (77 samples, 6.74%)</title><rect x="108.1" y="739.0" width="79.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="111.1" y="750.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (76 samples, 6.65%)</title><rect x="109.1" y="723.0" width="78.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="112.1" y="734.0">sun/misc/..</text>
</g>
<g>
<title>Unsafe_Unpark (68 samples, 5.95%)</title><rect x="109.1" y="707.0" width="70.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="112.1" y="718.0">Unsafe_U..</text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.17%)</title><rect x="109.1" y="691.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="112.1" y="702.0"></text>
</g>
<g>
<title>__pthread_cond_signal (48 samples, 4.20%)</title><rect x="111.2" y="691.0" width="49.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="114.2" y="702.0">__pth..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (5 samples, 0.44%)</title><rect x="160.7" y="691.0" width="5.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="163.7" y="702.0"></text>
</g>
<g>
<title>pthread_mutex_lock (13 samples, 1.14%)</title><rect x="165.9" y="691.0" width="13.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="168.9" y="702.0"></text>
</g>
<g>
<title>__lll_unlock_wake (6 samples, 0.52%)</title><rect x="179.3" y="707.0" width="6.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="182.3" y="718.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.17%)</title><rect x="185.5" y="707.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="188.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.17%)</title><rect x="187.6" y="755.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="190.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.44%)</title><rect x="189.6" y="803.0" width="5.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="192.6" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (5 samples, 0.44%)</title><rect x="189.6" y="787.0" width="5.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="192.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.44%)</title><rect x="189.6" y="771.0" width="5.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="192.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="193.8" y="755.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="196.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.17%)</title><rect x="194.8" y="803.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="197.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.17%)</title><rect x="194.8" y="787.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="197.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.17%)</title><rect x="194.8" y="771.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="197.8" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.17%)</title><rect x="194.8" y="755.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="197.8" y="766.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="196.9" y="803.0" width="1.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="199.9" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (2 samples, 0.17%)</title><rect x="197.9" y="899.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="200.9" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 0.17%)</title><rect x="197.9" y="883.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="200.9" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (6 samples, 0.52%)</title><rect x="200.0" y="899.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="203.0" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.52%)</title><rect x="200.0" y="883.0" width="6.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="203.0" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.52%)</title><rect x="200.0" y="867.0" width="6.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="203.0" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/TaskRequest.&lt;init&gt; (21 samples, 1.84%)</title><rect x="206.2" y="899.0" width="21.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="209.2" y="910.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (21 samples, 1.84%)</title><rect x="206.2" y="883.0" width="21.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="209.2" y="894.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 0.35%)</title><rect x="220.6" y="867.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="223.6" y="878.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.17%)</title><rect x="220.6" y="851.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="223.6" y="862.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.17%)</title><rect x="220.6" y="835.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="223.6" y="846.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.17%)</title><rect x="220.6" y="819.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="223.6" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="221.6" y="803.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="224.6" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.09%)</title><rect x="221.6" y="787.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="224.6" y="798.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="221.6" y="771.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="224.6" y="782.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.09%)</title><rect x="221.6" y="755.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="224.6" y="766.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.09%)</title><rect x="221.6" y="739.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="224.6" y="750.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.09%)</title><rect x="222.7" y="851.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="225.7" y="862.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.09%)</title><rect x="223.7" y="851.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="226.7" y="862.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.26%)</title><rect x="224.7" y="867.0" width="3.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="227.7" y="878.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.26%)</title><rect x="227.8" y="899.0" width="3.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="230.8" y="910.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="230.9" y="931.0" width="1.1" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="233.9" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.09%)</title><rect x="232.0" y="931.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="235.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.09%)</title><rect x="232.0" y="915.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="235.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.09%)</title><rect x="232.0" y="899.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="235.0" y="910.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="232.0" y="883.0" width="1.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="235.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (5 samples, 0.44%)</title><rect x="233.0" y="931.0" width="5.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="236.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (5 samples, 0.44%)</title><rect x="233.0" y="915.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="236.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.44%)</title><rect x="233.0" y="899.0" width="5.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="236.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.44%)</title><rect x="233.0" y="883.0" width="5.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="236.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (61 samples, 5.34%)</title><rect x="238.2" y="947.0" width="62.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="241.2" y="958.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (60 samples, 5.25%)</title><rect x="238.2" y="931.0" width="61.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="241.2" y="942.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquireAndEnsureOpen (1 samples, 0.09%)</title><rect x="238.2" y="915.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="241.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (36 samples, 3.15%)</title><rect x="239.2" y="915.0" width="37.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="242.2" y="926.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (36 samples, 3.15%)</title><rect x="239.2" y="899.0" width="37.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="242.2" y="910.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (36 samples, 3.15%)</title><rect x="239.2" y="883.0" width="37.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="242.2" y="894.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (30 samples, 2.62%)</title><rect x="240.2" y="867.0" width="31.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="243.2" y="878.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (30 samples, 2.62%)</title><rect x="240.2" y="851.0" width="31.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="243.2" y="862.0">or..</text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.09%)</title><rect x="243.3" y="835.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="246.3" y="846.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureCapacityInternal (1 samples, 0.09%)</title><rect x="243.3" y="819.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="246.3" y="830.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureExplicitCapacity (1 samples, 0.09%)</title><rect x="243.3" y="803.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="246.3" y="814.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.09%)</title><rect x="243.3" y="787.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="246.3" y="798.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.09%)</title><rect x="243.3" y="771.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="246.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (15 samples, 1.31%)</title><rect x="244.3" y="835.0" width="15.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="247.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (7 samples, 0.61%)</title><rect x="244.3" y="819.0" width="7.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="247.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (7 samples, 0.61%)</title><rect x="244.3" y="803.0" width="7.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="247.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (7 samples, 0.61%)</title><rect x="244.3" y="787.0" width="7.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="247.3" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (7 samples, 0.61%)</title><rect x="244.3" y="771.0" width="7.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="247.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (7 samples, 0.61%)</title><rect x="244.3" y="755.0" width="7.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="247.3" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (7 samples, 0.61%)</title><rect x="244.3" y="739.0" width="7.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="247.3" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (7 samples, 0.61%)</title><rect x="244.3" y="723.0" width="7.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="247.3" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (8 samples, 0.70%)</title><rect x="251.6" y="819.0" width="8.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="254.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (8 samples, 0.70%)</title><rect x="251.6" y="803.0" width="8.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="254.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.ensureNoneRemaining (7 samples, 0.61%)</title><rect x="251.6" y="787.0" width="7.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="254.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (1 samples, 0.09%)</title><rect x="258.8" y="787.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="261.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.09%)</title><rect x="258.8" y="771.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="261.8" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.09%)</title><rect x="258.8" y="755.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="261.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/ByteUtils.readVarlong (1 samples, 0.09%)</title><rect x="258.8" y="739.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="261.8" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="258.8" y="723.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="261.8" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="258.8" y="707.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="261.8" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="258.8" y="691.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="261.8" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="258.8" y="675.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="261.8" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (11 samples, 0.96%)</title><rect x="259.8" y="835.0" width="11.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="262.8" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (11 samples, 0.96%)</title><rect x="259.8" y="819.0" width="11.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="262.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (10 samples, 0.87%)</title><rect x="259.8" y="803.0" width="10.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="262.8" y="814.0"></text>
</g>
<g>
<title>java/util/Optional.of (10 samples, 0.87%)</title><rect x="259.8" y="787.0" width="10.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="262.8" y="798.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.17%)</title><rect x="268.1" y="771.0" width="2.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="271.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.toArray (1 samples, 0.09%)</title><rect x="270.2" y="803.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="273.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.toArray (1 samples, 0.09%)</title><rect x="270.2" y="787.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="273.2" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="270.2" y="771.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="273.2" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.09%)</title><rect x="270.2" y="755.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="273.2" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="270.2" y="739.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="273.2" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="270.2" y="723.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="273.2" y="734.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="270.2" y="707.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="273.2" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.09%)</title><rect x="270.2" y="691.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="273.2" y="702.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (1 samples, 0.09%)</title><rect x="270.2" y="675.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="273.2" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (3 samples, 0.26%)</title><rect x="271.2" y="867.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="274.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (3 samples, 0.26%)</title><rect x="271.2" y="851.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="274.2" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.09%)</title><rect x="271.2" y="835.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="274.2" y="846.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.09%)</title><rect x="271.2" y="819.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="274.2" y="830.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.09%)</title><rect x="271.2" y="803.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="274.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.toString (1 samples, 0.09%)</title><rect x="271.2" y="787.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="274.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.09%)</title><rect x="272.2" y="835.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="275.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.09%)</title><rect x="272.2" y="819.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="275.2" y="830.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="272.2" y="803.0" width="1.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="275.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="273.3" y="835.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="276.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="273.3" y="819.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="276.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="273.3" y="803.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="276.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.09%)</title><rect x="274.3" y="867.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="277.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.09%)</title><rect x="274.3" y="851.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="277.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="274.3" y="835.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="277.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="274.3" y="819.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="277.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="274.3" y="803.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="277.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="274.3" y="787.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="277.3" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.09%)</title><rect x="275.3" y="867.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="278.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$400 (1 samples, 0.09%)</title><rect x="275.3" y="851.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="278.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.position (1 samples, 0.09%)</title><rect x="275.3" y="835.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="278.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.hasValidPosition (1 samples, 0.09%)</title><rect x="275.3" y="819.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="278.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (13 samples, 1.14%)</title><rect x="276.4" y="915.0" width="13.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="279.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (11 samples, 0.96%)</title><rect x="276.4" y="899.0" width="11.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="279.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (9 samples, 0.79%)</title><rect x="276.4" y="883.0" width="9.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="279.4" y="894.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.09%)</title><rect x="277.4" y="867.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="280.4" y="878.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.09%)</title><rect x="277.4" y="851.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="280.4" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="278.4" y="867.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="281.4" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="278.4" y="851.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="281.4" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="278.4" y="835.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="281.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 0.17%)</title><rect x="279.4" y="867.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="282.4" y="878.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (2 samples, 0.17%)</title><rect x="279.4" y="851.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="282.4" y="862.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (2 samples, 0.17%)</title><rect x="279.4" y="835.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="282.4" y="846.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.17%)</title><rect x="279.4" y="819.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="282.4" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.17%)</title><rect x="279.4" y="803.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="282.4" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.17%)</title><rect x="279.4" y="787.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="282.4" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.09%)</title><rect x="279.4" y="771.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="282.4" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.09%)</title><rect x="280.5" y="771.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="283.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (4 samples, 0.35%)</title><rect x="281.5" y="867.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="284.5" y="878.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="282.5" y="851.0" width="1.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="285.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.17%)</title><rect x="283.6" y="851.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="286.6" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.17%)</title><rect x="283.6" y="835.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="286.6" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.17%)</title><rect x="283.6" y="819.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="286.6" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.17%)</title><rect x="283.6" y="803.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="286.6" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.17%)</title><rect x="283.6" y="787.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="286.6" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.17%)</title><rect x="283.6" y="771.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="286.6" y="782.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.09%)</title><rect x="283.6" y="755.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="286.6" y="766.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.characteristics (1 samples, 0.09%)</title><rect x="283.6" y="739.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="286.6" y="750.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="284.6" y="755.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="287.6" y="766.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.09%)</title><rect x="284.6" y="739.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="287.6" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="284.6" y="723.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="287.6" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="284.6" y="707.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="287.6" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="284.6" y="691.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="287.6" y="702.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="284.6" y="675.0" width="1.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="287.6" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.17%)</title><rect x="285.6" y="883.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="288.6" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 0.17%)</title><rect x="285.6" y="867.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="288.6" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.17%)</title><rect x="285.6" y="851.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="288.6" y="862.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.09%)</title><rect x="286.7" y="835.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="289.7" y="846.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.09%)</title><rect x="286.7" y="819.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="289.7" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="286.7" y="803.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="289.7" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="286.7" y="787.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="289.7" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.09%)</title><rect x="286.7" y="771.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="289.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (2 samples, 0.17%)</title><rect x="287.7" y="899.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="290.7" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.09%)</title><rect x="287.7" y="883.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="290.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.09%)</title><rect x="287.7" y="867.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="290.7" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.09%)</title><rect x="287.7" y="851.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="290.7" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (1 samples, 0.09%)</title><rect x="287.7" y="835.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="290.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (1 samples, 0.09%)</title><rect x="287.7" y="819.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="290.7" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="287.7" y="803.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="290.7" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="287.7" y="787.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="290.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.invokeCompletedOffsetCommitCallbacks (1 samples, 0.09%)</title><rect x="288.7" y="883.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="291.7" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (1 samples, 0.09%)</title><rect x="288.7" y="867.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="291.7" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.09%)</title><rect x="288.7" y="851.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="291.7" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (5 samples, 0.44%)</title><rect x="289.8" y="915.0" width="5.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="292.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 0.35%)</title><rect x="289.8" y="899.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="292.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (2 samples, 0.17%)</title><rect x="289.8" y="883.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="292.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.maybeThrottle (1 samples, 0.09%)</title><rect x="289.8" y="867.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="292.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.throttleTimeMs (1 samples, 0.09%)</title><rect x="289.8" y="851.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="292.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.09%)</title><rect x="290.8" y="867.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="293.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.parse (1 samples, 0.09%)</title><rect x="290.8" y="851.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="293.8" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="290.8" y="835.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="293.8" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.09%)</title><rect x="290.8" y="819.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="293.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.17%)</title><rect x="291.8" y="883.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="294.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.17%)</title><rect x="291.8" y="867.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="294.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.17%)</title><rect x="291.8" y="851.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="294.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.17%)</title><rect x="291.8" y="835.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="294.8" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="291.8" y="819.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="294.8" y="830.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="291.8" y="803.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="294.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.09%)</title><rect x="292.9" y="819.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="295.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.09%)</title><rect x="292.9" y="803.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="295.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.09%)</title><rect x="292.9" y="787.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="295.9" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.09%)</title><rect x="292.9" y="771.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="295.9" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.09%)</title><rect x="292.9" y="755.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="295.9" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.09%)</title><rect x="292.9" y="739.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="295.9" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.09%)</title><rect x="292.9" y="723.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="295.9" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (1 samples, 0.09%)</title><rect x="292.9" y="707.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="295.9" y="718.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (1 samples, 0.09%)</title><rect x="292.9" y="691.0" width="1.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="295.9" y="702.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.09%)</title><rect x="292.9" y="675.0" width="1.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="295.9" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.09%)</title><rect x="293.9" y="899.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="296.9" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.pollDelayMs (1 samples, 0.09%)</title><rect x="293.9" y="883.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="296.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.pollDelayMs (1 samples, 0.09%)</title><rect x="293.9" y="867.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="296.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isConnected (1 samples, 0.09%)</title><rect x="293.9" y="851.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="296.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.throttleDelayMs (1 samples, 0.09%)</title><rect x="293.9" y="835.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="296.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (4 samples, 0.35%)</title><rect x="294.9" y="915.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="297.9" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (4 samples, 0.35%)</title><rect x="294.9" y="899.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="297.9" y="910.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.09%)</title><rect x="294.9" y="883.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="297.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$257/407617381.accept (1 samples, 0.09%)</title><rect x="294.9" y="867.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="297.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.09%)</title><rect x="294.9" y="851.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="297.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.09%)</title><rect x="294.9" y="835.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="297.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.09%)</title><rect x="294.9" y="819.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="297.9" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="294.9" y="803.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="297.9" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="294.9" y="787.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="297.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.09%)</title><rect x="296.0" y="883.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="299.0" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.09%)</title><rect x="296.0" y="867.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="299.0" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.09%)</title><rect x="296.0" y="851.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="299.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.09%)</title><rect x="296.0" y="835.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="299.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.09%)</title><rect x="297.0" y="883.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="300.0" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.iterator (1 samples, 0.09%)</title><rect x="297.0" y="867.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="300.0" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.&lt;init&gt; (1 samples, 0.09%)</title><rect x="297.0" y="851.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="300.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.advance (1 samples, 0.09%)</title><rect x="297.0" y="835.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="300.0" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.first (1 samples, 0.09%)</title><rect x="297.0" y="819.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="300.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.09%)</title><rect x="298.0" y="883.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="301.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.09%)</title><rect x="299.1" y="915.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="302.1" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="299.1" y="899.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="302.1" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="299.1" y="883.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="302.1" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="299.1" y="867.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="302.1" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="299.1" y="851.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="302.1" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.09%)</title><rect x="299.1" y="835.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="302.1" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Max.update (1 samples, 0.09%)</title><rect x="299.1" y="819.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="302.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.09%)</title><rect x="300.1" y="931.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="303.1" y="942.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.09%)</title><rect x="300.1" y="915.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="303.1" y="926.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="300.1" y="899.0" width="1.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="303.1" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.09%)</title><rect x="301.1" y="963.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="304.1" y="974.0"></text>
</g>
<g>
<title>java/lang/Thread.run (768 samples, 67.19%)</title><rect x="302.2" y="979.0" width="792.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="305.2" y="990.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (768 samples, 67.19%)</title><rect x="302.2" y="963.0" width="792.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="305.2" y="974.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (768 samples, 67.19%)</title><rect x="302.2" y="947.0" width="792.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="305.2" y="958.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$285/1425663296.run (519 samples, 45.41%)</title><rect x="304.2" y="931.0" width="535.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="307.2" y="942.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$285/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$70 (519 samples, 45.41%)</title><rect x="304.2" y="915.0" width="535.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="307.2" y="926.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTa..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (519 samples, 45.41%)</title><rect x="304.2" y="899.0" width="535.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="307.2" y="910.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (505 samples, 44.18%)</title><rect x="304.2" y="883.0" width="521.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="307.2" y="894.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.schedule..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (3 samples, 0.26%)</title><rect x="314.5" y="867.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="317.5" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (185 samples, 16.19%)</title><rect x="317.6" y="867.0" width="191.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="320.6" y="878.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$42/815674463.extract (185 samples, 16.19%)</title><rect x="317.6" y="851.0" width="191.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="320.6" y="862.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (185 samples, 16.19%)</title><rect x="317.6" y="835.0" width="191.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="320.6" y="846.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (185 samples, 16.19%)</title><rect x="317.6" y="819.0" width="191.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="320.6" y="830.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (185 samples, 16.19%)</title><rect x="317.6" y="803.0" width="191.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="320.6" y="814.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (185 samples, 16.19%)</title><rect x="317.6" y="787.0" width="191.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="320.6" y="798.0">com/fasterxml/jackson/dat..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (71 samples, 6.21%)</title><rect x="317.6" y="771.0" width="73.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="320.6" y="782.0">com/fast..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="336.2" y="755.0" width="1.1" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="339.2" y="766.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="336.2" y="739.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="339.2" y="750.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="337.3" y="755.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="340.3" y="766.0"></text>
</g>
<g>
<title>__clock_gettime (16 samples, 1.40%)</title><rect x="338.3" y="755.0" width="16.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="341.3" y="766.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.61%)</title><rect x="347.6" y="739.0" width="7.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="350.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (11 samples, 0.96%)</title><rect x="354.8" y="755.0" width="11.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="357.8" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (8 samples, 0.70%)</title><rect x="355.8" y="739.0" width="8.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="358.8" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (6 samples, 0.52%)</title><rect x="357.9" y="723.0" width="6.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="360.9" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.52%)</title><rect x="357.9" y="707.0" width="6.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="360.9" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (6 samples, 0.52%)</title><rect x="357.9" y="691.0" width="6.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="360.9" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (6 samples, 0.52%)</title><rect x="357.9" y="675.0" width="6.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="360.9" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (6 samples, 0.52%)</title><rect x="357.9" y="659.0" width="6.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="360.9" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.17%)</title><rect x="364.1" y="739.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="367.1" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (24 samples, 2.10%)</title><rect x="366.2" y="755.0" width="24.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="369.2" y="766.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (8 samples, 0.70%)</title><rect x="382.7" y="739.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="385.7" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="382.7" y="723.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="385.7" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="382.7" y="707.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="385.7" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="382.7" y="691.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="385.7" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="382.7" y="675.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="385.7" y="686.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.09%)</title><rect x="382.7" y="659.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="385.7" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (5 samples, 0.44%)</title><rect x="383.7" y="723.0" width="5.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="386.7" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (5 samples, 0.44%)</title><rect x="383.7" y="707.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="386.7" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.09%)</title><rect x="388.9" y="723.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="391.9" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.09%)</title><rect x="388.9" y="707.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="391.9" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.09%)</title><rect x="388.9" y="691.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="391.9" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="388.9" y="675.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="391.9" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="388.9" y="659.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="391.9" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="388.9" y="643.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="391.9" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="388.9" y="627.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="391.9" y="638.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="388.9" y="611.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="391.9" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.09%)</title><rect x="388.9" y="595.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="391.9" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.09%)</title><rect x="389.9" y="723.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="392.9" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="389.9" y="707.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="392.9" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="389.9" y="691.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="392.9" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="389.9" y="675.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="392.9" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (107 samples, 9.36%)</title><rect x="390.9" y="771.0" width="110.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="393.9" y="782.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.17%)</title><rect x="393.0" y="755.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="396.0" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.09%)</title><rect x="395.1" y="755.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="398.1" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (3 samples, 0.26%)</title><rect x="396.1" y="755.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="399.1" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (4 samples, 0.35%)</title><rect x="399.2" y="755.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="402.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.35%)</title><rect x="399.2" y="739.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="402.2" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (16 samples, 1.40%)</title><rect x="403.3" y="755.0" width="16.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="406.3" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (16 samples, 1.40%)</title><rect x="403.3" y="739.0" width="16.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="406.3" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (12 samples, 1.05%)</title><rect x="406.4" y="723.0" width="12.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="409.4" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (10 samples, 0.87%)</title><rect x="408.5" y="707.0" width="10.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="411.5" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="416.8" y="691.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="419.8" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="416.8" y="675.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="419.8" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="416.8" y="659.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="419.8" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="416.8" y="643.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="419.8" y="654.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="416.8" y="627.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="419.8" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.09%)</title><rect x="416.8" y="611.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="419.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.09%)</title><rect x="417.8" y="691.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="420.8" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.09%)</title><rect x="418.8" y="723.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="421.8" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.09%)</title><rect x="418.8" y="707.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="421.8" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (9 samples, 0.79%)</title><rect x="419.9" y="755.0" width="9.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="422.9" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (9 samples, 0.79%)</title><rect x="419.9" y="739.0" width="9.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="422.9" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (69 samples, 6.04%)</title><rect x="429.1" y="755.0" width="71.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="432.1" y="766.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (15 samples, 1.31%)</title><rect x="430.2" y="739.0" width="15.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="433.2" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (6 samples, 0.52%)</title><rect x="432.2" y="723.0" width="6.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="435.2" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (6 samples, 0.52%)</title><rect x="432.2" y="707.0" width="6.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="435.2" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (6 samples, 0.52%)</title><rect x="432.2" y="691.0" width="6.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="435.2" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (6 samples, 0.52%)</title><rect x="432.2" y="675.0" width="6.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="435.2" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.17%)</title><rect x="436.4" y="659.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="439.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (4 samples, 0.35%)</title><rect x="438.4" y="723.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="441.4" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (4 samples, 0.35%)</title><rect x="438.4" y="707.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="441.4" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (4 samples, 0.35%)</title><rect x="438.4" y="691.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="441.4" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (3 samples, 0.26%)</title><rect x="439.5" y="675.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="442.5" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (3 samples, 0.26%)</title><rect x="439.5" y="659.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="442.5" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (2 samples, 0.17%)</title><rect x="442.6" y="723.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="445.6" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.09%)</title><rect x="444.6" y="723.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="447.6" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 0.17%)</title><rect x="445.7" y="739.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="448.7" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (51 samples, 4.46%)</title><rect x="447.7" y="739.0" width="52.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="450.7" y="750.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (51 samples, 4.46%)</title><rect x="447.7" y="723.0" width="52.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="450.7" y="734.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (49 samples, 4.29%)</title><rect x="449.8" y="707.0" width="50.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="452.8" y="718.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (16 samples, 1.40%)</title><rect x="452.9" y="691.0" width="16.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="455.9" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (9 samples, 0.79%)</title><rect x="453.9" y="675.0" width="9.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="456.9" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (9 samples, 0.79%)</title><rect x="453.9" y="659.0" width="9.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="456.9" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (9 samples, 0.79%)</title><rect x="453.9" y="643.0" width="9.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="456.9" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (7 samples, 0.61%)</title><rect x="453.9" y="627.0" width="7.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="456.9" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.17%)</title><rect x="461.1" y="627.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="464.1" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.09%)</title><rect x="463.2" y="675.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="466.2" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.09%)</title><rect x="463.2" y="659.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="466.2" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.09%)</title><rect x="463.2" y="643.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="466.2" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.09%)</title><rect x="464.2" y="675.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="467.2" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (4 samples, 0.35%)</title><rect x="465.3" y="675.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="468.3" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (5 samples, 0.44%)</title><rect x="469.4" y="691.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="472.4" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (4 samples, 0.35%)</title><rect x="470.4" y="675.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="473.4" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 0.35%)</title><rect x="470.4" y="659.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="473.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 0.35%)</title><rect x="470.4" y="643.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="473.4" y="654.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (4 samples, 0.35%)</title><rect x="470.4" y="627.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="473.4" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.17%)</title><rect x="474.6" y="691.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="477.6" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (11 samples, 0.96%)</title><rect x="476.6" y="691.0" width="11.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="479.6" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (11 samples, 0.96%)</title><rect x="476.6" y="675.0" width="11.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="479.6" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (11 samples, 0.96%)</title><rect x="476.6" y="659.0" width="11.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="479.6" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (11 samples, 0.96%)</title><rect x="476.6" y="643.0" width="11.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="479.6" y="654.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (11 samples, 0.96%)</title><rect x="476.6" y="627.0" width="11.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="479.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.09%)</title><rect x="482.8" y="611.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="485.8" y="622.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (4 samples, 0.35%)</title><rect x="483.9" y="611.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="486.9" y="622.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor3.newInstance (1 samples, 0.09%)</title><rect x="483.9" y="595.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="486.9" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="483.9" y="579.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="486.9" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="483.9" y="563.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="486.9" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="483.9" y="547.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="486.9" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="483.9" y="531.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="486.9" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="483.9" y="515.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="486.9" y="526.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="483.9" y="499.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="486.9" y="510.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="483.9" y="483.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="486.9" y="494.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.09%)</title><rect x="483.9" y="467.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="486.9" y="478.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.09%)</title><rect x="483.9" y="451.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="486.9" y="462.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.09%)</title><rect x="483.9" y="435.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="486.9" y="446.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.09%)</title><rect x="483.9" y="419.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="486.9" y="430.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (3 samples, 0.26%)</title><rect x="484.9" y="595.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="487.9" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (4 samples, 0.35%)</title><rect x="488.0" y="691.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="491.0" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.35%)</title><rect x="488.0" y="675.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="491.0" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.35%)</title><rect x="488.0" y="659.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="491.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.09%)</title><rect x="491.1" y="643.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="494.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (8 samples, 0.70%)</title><rect x="492.1" y="691.0" width="8.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="495.1" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.checkUnresolvedObjectId (1 samples, 0.09%)</title><rect x="500.4" y="755.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="503.4" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (7 samples, 0.61%)</title><rect x="501.4" y="771.0" width="7.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="504.4" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.09%)</title><rect x="501.4" y="755.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="504.4" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (6 samples, 0.52%)</title><rect x="502.4" y="755.0" width="6.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="505.4" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (6 samples, 0.52%)</title><rect x="502.4" y="739.0" width="6.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="505.4" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (6 samples, 0.52%)</title><rect x="502.4" y="723.0" width="6.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="505.4" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.52%)</title><rect x="502.4" y="707.0" width="6.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="505.4" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (280 samples, 24.50%)</title><rect x="508.6" y="867.0" width="289.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="511.6" y="878.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (52 samples, 4.55%)</title><rect x="508.6" y="851.0" width="53.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="511.6" y="862.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (3 samples, 0.26%)</title><rect x="508.6" y="835.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="511.6" y="846.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (49 samples, 4.29%)</title><rect x="511.7" y="835.0" width="50.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="514.7" y="846.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (49 samples, 4.29%)</title><rect x="511.7" y="819.0" width="50.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="514.7" y="830.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 0.35%)</title><rect x="512.8" y="803.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="515.8" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 0.35%)</title><rect x="512.8" y="787.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="515.8" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (4 samples, 0.35%)</title><rect x="512.8" y="771.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="515.8" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 0.35%)</title><rect x="512.8" y="755.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="515.8" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="516.9" y="803.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="519.9" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="516.9" y="787.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="519.9" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="516.9" y="771.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="519.9" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.09%)</title><rect x="516.9" y="755.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="519.9" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.09%)</title><rect x="516.9" y="739.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="519.9" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (43 samples, 3.76%)</title><rect x="517.9" y="803.0" width="44.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="520.9" y="814.0">java..</text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.09%)</title><rect x="543.7" y="787.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="546.7" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (17 samples, 1.49%)</title><rect x="544.8" y="787.0" width="17.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="547.8" y="798.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.26%)</title><rect x="546.8" y="771.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="549.8" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.26%)</title><rect x="549.9" y="771.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="552.9" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.17%)</title><rect x="551.0" y="755.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="554.0" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 0.35%)</title><rect x="553.0" y="771.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="556.0" y="782.0"></text>
</g>
<g>
<title>vtable stub (5 samples, 0.44%)</title><rect x="557.2" y="771.0" width="5.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="560.2" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.26%)</title><rect x="562.3" y="851.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="565.3" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.26%)</title><rect x="562.3" y="835.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="565.3" y="846.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.26%)</title><rect x="562.3" y="819.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="565.3" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (161 samples, 14.09%)</title><rect x="565.4" y="851.0" width="166.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="568.4" y="862.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.26%)</title><rect x="565.4" y="835.0" width="3.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="568.4" y="846.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.26%)</title><rect x="565.4" y="819.0" width="3.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="568.4" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (157 samples, 13.74%)</title><rect x="568.5" y="835.0" width="162.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="571.5" y="846.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.17%)</title><rect x="575.7" y="819.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="578.7" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.17%)</title><rect x="575.7" y="803.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="578.7" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.17%)</title><rect x="575.7" y="787.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="578.7" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="575.7" y="771.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="578.7" y="782.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="575.7" y="755.0" width="1.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="578.7" y="766.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.09%)</title><rect x="576.8" y="771.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="579.8" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (64 samples, 5.60%)</title><rect x="577.8" y="819.0" width="66.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="580.8" y="830.0">com/lin..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (49 samples, 4.29%)</title><rect x="587.1" y="803.0" width="50.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="590.1" y="814.0">java/..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (30 samples, 2.62%)</title><rect x="600.5" y="787.0" width="31.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="603.5" y="798.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (17 samples, 1.49%)</title><rect x="608.8" y="771.0" width="17.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="611.8" y="782.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (17 samples, 1.49%)</title><rect x="608.8" y="755.0" width="17.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="611.8" y="766.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (17 samples, 1.49%)</title><rect x="608.8" y="739.0" width="17.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="611.8" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.09%)</title><rect x="608.8" y="723.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="611.8" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (15 samples, 1.31%)</title><rect x="609.8" y="723.0" width="15.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="612.8" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (5 samples, 0.44%)</title><rect x="609.8" y="707.0" width="5.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="612.8" y="718.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.09%)</title><rect x="609.8" y="691.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="612.8" y="702.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (4 samples, 0.35%)</title><rect x="610.8" y="691.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="613.8" y="702.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.17%)</title><rect x="612.9" y="675.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="615.9" y="686.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (2 samples, 0.17%)</title><rect x="612.9" y="659.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="615.9" y="670.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (9 samples, 0.79%)</title><rect x="615.0" y="707.0" width="9.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="618.0" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (5 samples, 0.44%)</title><rect x="618.1" y="691.0" width="5.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="621.1" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::max_tlab_size() const (1 samples, 0.09%)</title><rect x="619.1" y="675.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="622.1" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="620.1" y="675.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="623.1" y="686.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (2 samples, 0.17%)</title><rect x="621.2" y="675.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="624.2" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.09%)</title><rect x="621.2" y="659.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="624.2" y="670.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.09%)</title><rect x="622.2" y="659.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="625.2" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.09%)</title><rect x="623.2" y="691.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="626.2" y="702.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="624.3" y="707.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="627.3" y="718.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="625.3" y="723.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="628.3" y="734.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.35%)</title><rect x="626.3" y="771.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="629.3" y="782.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="630.5" y="771.0" width="1.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="633.5" y="782.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.17%)</title><rect x="631.5" y="787.0" width="2.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="634.5" y="798.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.35%)</title><rect x="633.6" y="787.0" width="4.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="636.6" y="798.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.52%)</title><rect x="637.7" y="803.0" width="6.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="640.7" y="814.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (6 samples, 0.52%)</title><rect x="643.9" y="819.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="646.9" y="830.0"></text>
</g>
<g>
<title>java/lang/Long.toString (6 samples, 0.52%)</title><rect x="643.9" y="803.0" width="6.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="646.9" y="814.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (6 samples, 0.52%)</title><rect x="643.9" y="787.0" width="6.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="646.9" y="798.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (78 samples, 6.82%)</title><rect x="650.1" y="819.0" width="80.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="653.1" y="830.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (75 samples, 6.56%)</title><rect x="653.2" y="803.0" width="77.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="656.2" y="814.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 0.35%)</title><rect x="653.2" y="787.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="656.2" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 0.35%)</title><rect x="653.2" y="771.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="656.2" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (4 samples, 0.35%)</title><rect x="653.2" y="755.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="656.2" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 0.35%)</title><rect x="653.2" y="739.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="656.2" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.17%)</title><rect x="657.3" y="787.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="660.3" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.17%)</title><rect x="657.3" y="771.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="660.3" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.17%)</title><rect x="657.3" y="755.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="660.3" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.17%)</title><rect x="657.3" y="739.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="660.3" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.17%)</title><rect x="657.3" y="723.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="660.3" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (69 samples, 6.04%)</title><rect x="659.4" y="787.0" width="71.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="662.4" y="798.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.put (61 samples, 5.34%)</title><rect x="667.6" y="771.0" width="63.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="670.6" y="782.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.putVal (39 samples, 3.41%)</title><rect x="690.3" y="755.0" width="40.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="693.3" y="766.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (7 samples, 0.61%)</title><rect x="706.9" y="739.0" width="7.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="709.9" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (11 samples, 0.96%)</title><rect x="714.1" y="739.0" width="11.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="717.1" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.17%)</title><rect x="723.4" y="723.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="726.4" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.17%)</title><rect x="723.4" y="707.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="726.4" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.17%)</title><rect x="723.4" y="691.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="726.4" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.17%)</title><rect x="723.4" y="675.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="726.4" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="723.4" y="659.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="726.4" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="723.4" y="643.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="726.4" y="654.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.09%)</title><rect x="723.4" y="627.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="726.4" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.09%)</title><rect x="723.4" y="611.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="726.4" y="622.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="724.4" y="659.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="727.4" y="670.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="724.4" y="643.0" width="1.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="727.4" y="654.0"></text>
</g>
<g>
<title>vtable stub (5 samples, 0.44%)</title><rect x="725.4" y="739.0" width="5.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="728.4" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.09%)</title><rect x="730.6" y="835.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="733.6" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (45 samples, 3.94%)</title><rect x="731.6" y="851.0" width="46.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="734.6" y="862.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (45 samples, 3.94%)</title><rect x="731.6" y="835.0" width="46.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="734.6" y="846.0">com/..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.17%)</title><rect x="734.7" y="819.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="737.7" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.17%)</title><rect x="734.7" y="803.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="737.7" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.17%)</title><rect x="734.7" y="787.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="737.7" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="734.7" y="771.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="737.7" y="782.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="734.7" y="755.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="737.7" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="735.8" y="771.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="738.8" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$207/610311902.process (17 samples, 1.49%)</title><rect x="736.8" y="819.0" width="17.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="739.8" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (16 samples, 1.40%)</title><rect x="736.8" y="803.0" width="16.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="739.8" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (14 samples, 1.22%)</title><rect x="738.9" y="787.0" width="14.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="741.9" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.09%)</title><rect x="749.2" y="771.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="752.2" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.09%)</title><rect x="749.2" y="755.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="752.2" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.09%)</title><rect x="749.2" y="739.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="752.2" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.09%)</title><rect x="749.2" y="723.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="752.2" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.09%)</title><rect x="749.2" y="707.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="752.2" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (1 samples, 0.09%)</title><rect x="750.2" y="771.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="753.2" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.17%)</title><rect x="751.2" y="771.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="754.2" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.09%)</title><rect x="753.3" y="803.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="756.3" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (2 samples, 0.17%)</title><rect x="754.3" y="819.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="757.3" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.17%)</title><rect x="756.4" y="819.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="759.4" y="830.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.17%)</title><rect x="756.4" y="803.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="759.4" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/789653861.linkToTargetMethod (1 samples, 0.09%)</title><rect x="758.5" y="819.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="761.5" y="830.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (1 samples, 0.09%)</title><rect x="758.5" y="803.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="761.5" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$290/1065720636.get$Lambda (1 samples, 0.09%)</title><rect x="758.5" y="787.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="761.5" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (12 samples, 1.05%)</title><rect x="759.5" y="819.0" width="12.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="762.5" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (10 samples, 0.87%)</title><rect x="761.6" y="803.0" width="10.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="764.6" y="814.0"></text>
</g>
<g>
<title>itable stub (7 samples, 0.61%)</title><rect x="761.6" y="787.0" width="7.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="764.6" y="798.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (3 samples, 0.26%)</title><rect x="768.8" y="787.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="771.8" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.09%)</title><rect x="771.9" y="819.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="774.9" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.09%)</title><rect x="771.9" y="803.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="774.9" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (5 samples, 0.44%)</title><rect x="772.9" y="819.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="775.9" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.09%)</title><rect x="777.1" y="803.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="780.1" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (1 samples, 0.09%)</title><rect x="778.1" y="851.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="781.1" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="778.1" y="835.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="781.1" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="778.1" y="819.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="781.1" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="778.1" y="803.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="781.1" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="778.1" y="787.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="781.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (18 samples, 1.57%)</title><rect x="779.1" y="851.0" width="18.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="782.1" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (18 samples, 1.57%)</title><rect x="779.1" y="835.0" width="18.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="782.1" y="846.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.26%)</title><rect x="782.2" y="819.0" width="3.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="785.2" y="830.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.17%)</title><rect x="783.2" y="803.0" width="2.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="786.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (12 samples, 1.05%)</title><rect x="785.3" y="819.0" width="12.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="788.3" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$295/899960101.accept (12 samples, 1.05%)</title><rect x="785.3" y="803.0" width="12.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="788.3" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$62 (12 samples, 1.05%)</title><rect x="785.3" y="787.0" width="12.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="788.3" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.09%)</title><rect x="785.3" y="771.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="788.3" y="782.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.09%)</title><rect x="785.3" y="755.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="788.3" y="766.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.09%)</title><rect x="785.3" y="739.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="788.3" y="750.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (11 samples, 0.96%)</title><rect x="786.3" y="771.0" width="11.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="789.3" y="782.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (11 samples, 0.96%)</title><rect x="786.3" y="755.0" width="11.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="789.3" y="766.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="793.6" y="739.0" width="1.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="796.6" y="750.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.17%)</title><rect x="794.6" y="739.0" width="2.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="797.6" y="750.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.17%)</title><rect x="794.6" y="723.0" width="2.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="797.6" y="734.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="796.7" y="739.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="799.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (24 samples, 2.10%)</title><rect x="797.7" y="867.0" width="24.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="800.7" y="878.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (24 samples, 2.10%)</title><rect x="797.7" y="851.0" width="24.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="800.7" y="862.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="801.8" y="835.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="804.8" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="801.8" y="819.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="804.8" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="801.8" y="803.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="804.8" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (3 samples, 0.26%)</title><rect x="802.9" y="835.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="805.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (16 samples, 1.40%)</title><rect x="806.0" y="835.0" width="16.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="809.0" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$295/899960101.accept (2 samples, 0.17%)</title><rect x="806.0" y="819.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="809.0" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$62 (2 samples, 0.17%)</title><rect x="806.0" y="803.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="809.0" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (2 samples, 0.17%)</title><rect x="806.0" y="787.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="809.0" y="798.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.17%)</title><rect x="806.0" y="771.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="809.0" y="782.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.17%)</title><rect x="806.0" y="755.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="809.0" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$297/907883280.accept (14 samples, 1.22%)</title><rect x="808.0" y="819.0" width="14.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="811.0" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$61 (14 samples, 1.22%)</title><rect x="808.0" y="803.0" width="14.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="811.0" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$283/245826438.complete (14 samples, 1.22%)</title><rect x="808.0" y="787.0" width="14.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="811.0" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$38 (14 samples, 1.22%)</title><rect x="808.0" y="771.0" width="14.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="811.0" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$282/766801488.complete (14 samples, 1.22%)</title><rect x="808.0" y="755.0" width="14.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="811.0" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$68 (14 samples, 1.22%)</title><rect x="808.0" y="739.0" width="14.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="811.0" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (14 samples, 1.22%)</title><rect x="808.0" y="723.0" width="14.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="811.0" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (14 samples, 1.22%)</title><rect x="808.0" y="707.0" width="14.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="811.0" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (14 samples, 1.22%)</title><rect x="808.0" y="691.0" width="14.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="811.0" y="702.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (14 samples, 1.22%)</title><rect x="808.0" y="675.0" width="14.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="811.0" y="686.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.26%)</title><rect x="822.5" y="867.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="825.5" y="878.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.17%)</title><rect x="823.5" y="851.0" width="2.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="826.5" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.09%)</title><rect x="825.6" y="883.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="828.6" y="894.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.09%)</title><rect x="825.6" y="867.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="828.6" y="878.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.09%)</title><rect x="825.6" y="851.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="828.6" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="825.6" y="835.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="828.6" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (13 samples, 1.14%)</title><rect x="826.6" y="883.0" width="13.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="829.6" y="894.0"></text>
</g>
<g>
<title>__clock_gettime (10 samples, 0.87%)</title><rect x="828.7" y="867.0" width="10.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="831.7" y="878.0"></text>
</g>
<g>
<title>[vdso] (10 samples, 0.87%)</title><rect x="828.7" y="851.0" width="10.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="831.7" y="862.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="839.0" y="867.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="842.0" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (7 samples, 0.61%)</title><rect x="840.0" y="931.0" width="7.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="843.0" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.61%)</title><rect x="840.0" y="915.0" width="7.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="843.0" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.61%)</title><rect x="840.0" y="899.0" width="7.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="843.0" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.61%)</title><rect x="840.0" y="883.0" width="7.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="843.0" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$285/1425663296.run (1 samples, 0.09%)</title><rect x="846.2" y="867.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="849.2" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (240 samples, 21.00%)</title><rect x="847.3" y="931.0" width="247.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="850.3" y="942.0">java/util/concurrent/ThreadPoolEx..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (236 samples, 20.65%)</title><rect x="849.3" y="915.0" width="243.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="852.3" y="926.0">java/util/concurrent/LinkedBlock..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (204 samples, 17.85%)</title><rect x="851.4" y="899.0" width="210.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="854.4" y="910.0">java/util/concurrent/locks/A..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (3 samples, 0.26%)</title><rect x="863.8" y="883.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="866.8" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.17%)</title><rect x="864.8" y="867.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="867.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (13 samples, 1.14%)</title><rect x="866.9" y="883.0" width="13.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="869.9" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (7 samples, 0.61%)</title><rect x="880.3" y="883.0" width="7.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="883.3" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.61%)</title><rect x="880.3" y="867.0" width="7.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="883.3" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.61%)</title><rect x="880.3" y="851.0" width="7.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="883.3" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.61%)</title><rect x="880.3" y="835.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="883.3" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (169 samples, 14.79%)</title><rect x="887.5" y="883.0" width="174.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="890.5" y="894.0">java/util/concurrent/l..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (169 samples, 14.79%)</title><rect x="887.5" y="867.0" width="174.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="890.5" y="878.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="896.8" y="851.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="899.8" y="862.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.26%)</title><rect x="897.8" y="851.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="900.8" y="862.0"></text>
</g>
<g>
<title>Unsafe_Park (148 samples, 12.95%)</title><rect x="900.9" y="851.0" width="152.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="903.9" y="862.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.26%)</title><rect x="905.1" y="835.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="908.1" y="846.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (27 samples, 2.36%)</title><rect x="908.2" y="835.0" width="27.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="911.2" y="846.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (11 samples, 0.96%)</title><rect x="914.4" y="819.0" width="11.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="917.4" y="830.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.35%)</title><rect x="915.4" y="803.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="918.4" y="814.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.17%)</title><rect x="917.5" y="787.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="920.5" y="798.0"></text>
</g>
<g>
<title>Monitor::unlock() (3 samples, 0.26%)</title><rect x="919.5" y="803.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="922.5" y="814.0"></text>
</g>
<g>
<title>pthread_getspecific (3 samples, 0.26%)</title><rect x="922.6" y="803.0" width="3.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="925.6" y="814.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="925.7" y="819.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="928.7" y="830.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (9 samples, 0.79%)</title><rect x="926.7" y="819.0" width="9.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="929.7" y="830.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (2 samples, 0.17%)</title><rect x="936.0" y="835.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="939.0" y="846.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (3 samples, 0.26%)</title><rect x="938.1" y="835.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="941.1" y="846.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.26%)</title><rect x="941.2" y="835.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="944.2" y="846.0"></text>
</g>
<g>
<title>__lll_lock_wait (11 samples, 0.96%)</title><rect x="944.3" y="835.0" width="11.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="947.3" y="846.0"></text>
</g>
<g>
<title>__lll_unlock_wake (27 samples, 2.36%)</title><rect x="955.7" y="835.0" width="27.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="958.7" y="846.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (58 samples, 5.07%)</title><rect x="983.5" y="835.0" width="59.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="986.5" y="846.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.26%)</title><rect x="1043.4" y="835.0" width="3.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1046.4" y="846.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.17%)</title><rect x="1046.5" y="835.0" width="2.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1049.5" y="846.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.17%)</title><rect x="1048.6" y="835.0" width="2.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1051.6" y="846.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.09%)</title><rect x="1050.6" y="835.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1053.6" y="846.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="1051.7" y="835.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1054.7" y="846.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1052.7" y="835.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1055.7" y="846.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.35%)</title><rect x="1053.7" y="851.0" width="4.2" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1056.7" y="862.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (2 samples, 0.17%)</title><rect x="1057.9" y="851.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1060.9" y="862.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.17%)</title><rect x="1059.9" y="851.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1062.9" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (30 samples, 2.62%)</title><rect x="1062.0" y="899.0" width="31.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1065.0" y="910.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (30 samples, 2.62%)</title><rect x="1062.0" y="883.0" width="31.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1065.0" y="894.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (30 samples, 2.62%)</title><rect x="1062.0" y="867.0" width="31.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1065.0" y="878.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (30 samples, 2.62%)</title><rect x="1062.0" y="851.0" width="31.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1065.0" y="862.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (2 samples, 0.17%)</title><rect x="1093.0" y="915.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1096.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.09%)</title><rect x="1095.0" y="979.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1098.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.09%)</title><rect x="1095.0" y="963.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1098.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="1095.0" y="947.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1098.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.checkDisconnects (1 samples, 0.09%)</title><rect x="1095.0" y="931.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1098.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (1 samples, 0.09%)</title><rect x="1095.0" y="915.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1098.0" y="926.0"></text>
</g>
<g>
<title>start_thread (91 samples, 7.96%)</title><rect x="1096.1" y="979.0" width="93.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1099.1" y="990.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (91 samples, 7.96%)</title><rect x="1096.1" y="963.0" width="93.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1099.1" y="974.0">java_start(..</text>
</g>
<g>
<title>GangWorker::loop() (24 samples, 2.10%)</title><rect x="1096.1" y="947.0" width="24.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1099.1" y="958.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (7 samples, 0.61%)</title><rect x="1096.1" y="931.0" width="7.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1099.1" y="942.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 0.61%)</title><rect x="1096.1" y="915.0" width="7.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1099.1" y="926.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.17%)</title><rect x="1096.1" y="899.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1099.1" y="910.0"></text>
</g>
<g>
<title>SpinPause (5 samples, 0.44%)</title><rect x="1098.1" y="899.0" width="5.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1101.1" y="910.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (17 samples, 1.49%)</title><rect x="1103.3" y="931.0" width="17.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1106.3" y="942.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.26%)</title><rect x="1103.3" y="915.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1106.3" y="926.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.17%)</title><rect x="1103.3" y="899.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1106.3" y="910.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.09%)</title><rect x="1105.3" y="899.0" width="1.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1108.3" y="910.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (8 samples, 0.70%)</title><rect x="1106.4" y="915.0" width="8.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1109.4" y="926.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(unsigned int*) (1 samples, 0.09%)</title><rect x="1106.4" y="899.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1109.4" y="910.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.17%)</title><rect x="1107.4" y="899.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1110.4" y="910.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.09%)</title><rect x="1107.4" y="883.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1110.4" y="894.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.09%)</title><rect x="1107.4" y="867.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1110.4" y="878.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.09%)</title><rect x="1107.4" y="851.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1110.4" y="862.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1108.4" y="883.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1111.4" y="894.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1108.4" y="867.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1111.4" y="878.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (1 samples, 0.09%)</title><rect x="1108.4" y="851.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1111.4" y="862.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (5 samples, 0.44%)</title><rect x="1109.5" y="899.0" width="5.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1112.5" y="910.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (5 samples, 0.44%)</title><rect x="1109.5" y="883.0" width="5.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1112.5" y="894.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (6 samples, 0.52%)</title><rect x="1114.6" y="915.0" width="6.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1117.6" y="926.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (6 samples, 0.52%)</title><rect x="1114.6" y="899.0" width="6.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1117.6" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (5 samples, 0.44%)</title><rect x="1114.6" y="883.0" width="5.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1117.6" y="894.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (5 samples, 0.44%)</title><rect x="1114.6" y="867.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1117.6" y="878.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (5 samples, 0.44%)</title><rect x="1114.6" y="851.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1117.6" y="862.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (4 samples, 0.35%)</title><rect x="1115.7" y="835.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1118.7" y="846.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.09%)</title><rect x="1116.7" y="819.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1119.7" y="830.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.17%)</title><rect x="1117.7" y="819.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1120.7" y="830.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (2 samples, 0.17%)</title><rect x="1117.7" y="803.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1120.7" y="814.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.09%)</title><rect x="1119.8" y="883.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1122.8" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::start_cset_region_for_worker(unsigned int) (1 samples, 0.09%)</title><rect x="1119.8" y="867.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1122.8" y="878.0"></text>
</g>
<g>
<title>JavaThread::run() (65 samples, 5.69%)</title><rect x="1120.8" y="947.0" width="67.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1123.8" y="958.0">JavaThr..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (65 samples, 5.69%)</title><rect x="1120.8" y="931.0" width="67.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1123.8" y="942.0">JavaThr..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (65 samples, 5.69%)</title><rect x="1120.8" y="915.0" width="67.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1123.8" y="926.0">Compile..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (65 samples, 5.69%)</title><rect x="1120.8" y="899.0" width="67.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1123.8" y="910.0">Compile..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (64 samples, 5.60%)</title><rect x="1120.8" y="883.0" width="66.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1123.8" y="894.0">C2Compi..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (64 samples, 5.60%)</title><rect x="1120.8" y="867.0" width="66.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1123.8" y="878.0">Compile..</text>
</g>
<g>
<title>Compile::Code_Gen() (33 samples, 2.89%)</title><rect x="1120.8" y="851.0" width="34.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1123.8" y="862.0">Co..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.09%)</title><rect x="1120.8" y="835.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1123.8" y="846.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.09%)</title><rect x="1120.8" y="819.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1123.8" y="830.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.17%)</title><rect x="1121.9" y="835.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1124.9" y="846.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.09%)</title><rect x="1121.9" y="819.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1124.9" y="830.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.09%)</title><rect x="1122.9" y="819.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1125.9" y="830.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.09%)</title><rect x="1122.9" y="803.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1125.9" y="814.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 0.35%)</title><rect x="1123.9" y="835.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1126.9" y="846.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 0.35%)</title><rect x="1123.9" y="819.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1126.9" y="830.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.09%)</title><rect x="1126.0" y="803.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.0" y="814.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.09%)</title><rect x="1127.0" y="803.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.0" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (26 samples, 2.27%)</title><rect x="1128.1" y="835.0" width="26.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1131.1" y="846.0">P..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.09%)</title><rect x="1128.1" y="819.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1131.1" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.26%)</title><rect x="1129.1" y="819.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1132.1" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.09%)</title><rect x="1129.1" y="803.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1132.1" y="814.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.09%)</title><rect x="1130.1" y="803.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1133.1" y="814.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.09%)</title><rect x="1130.1" y="787.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1133.1" y="798.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.09%)</title><rect x="1131.2" y="803.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1134.2" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 0.35%)</title><rect x="1132.2" y="819.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1135.2" y="830.0"></text>
</g>
<g>
<title>JVMState::is_monitor_use(unsigned int) const (1 samples, 0.09%)</title><rect x="1134.3" y="803.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.3" y="814.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.09%)</title><rect x="1135.3" y="803.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1138.3" y="814.0"></text>
</g>
<g>
<title>MachNode::oper_input_base() const (1 samples, 0.09%)</title><rect x="1135.3" y="787.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1138.3" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 0.26%)</title><rect x="1136.3" y="819.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1139.3" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.09%)</title><rect x="1138.4" y="803.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1141.4" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.09%)</title><rect x="1139.4" y="819.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1142.4" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 0.35%)</title><rect x="1140.4" y="819.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1143.4" y="830.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.17%)</title><rect x="1140.4" y="803.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1143.4" y="814.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (2 samples, 0.17%)</title><rect x="1142.5" y="803.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1145.5" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.26%)</title><rect x="1144.6" y="819.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1147.6" y="830.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.09%)</title><rect x="1146.6" y="803.0" width="1.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1149.6" y="814.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.09%)</title><rect x="1147.7" y="819.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1150.7" y="830.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.09%)</title><rect x="1147.7" y="803.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1150.7" y="814.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.09%)</title><rect x="1147.7" y="787.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1150.7" y="798.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.09%)</title><rect x="1147.7" y="771.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.7" y="782.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.09%)</title><rect x="1148.7" y="819.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1151.7" y="830.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1148.7" y="803.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1151.7" y="814.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.09%)</title><rect x="1149.7" y="819.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.7" y="830.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.09%)</title><rect x="1149.7" y="803.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.7" y="814.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.26%)</title><rect x="1150.8" y="819.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1153.8" y="830.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1152.8" y="803.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1155.8" y="814.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.09%)</title><rect x="1152.8" y="787.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1155.8" y="798.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1153.9" y="819.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1156.9" y="830.0"></text>
</g>
<g>
<title>Compile::Optimize() (20 samples, 1.75%)</title><rect x="1154.9" y="851.0" width="20.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1157.9" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.09%)</title><rect x="1154.9" y="835.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1157.9" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.09%)</title><rect x="1154.9" y="819.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1157.9" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1154.9" y="803.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1157.9" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_non_escaped_objects(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1154.9" y="787.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1157.9" y="798.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.09%)</title><rect x="1155.9" y="835.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.9" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;, bool, bool) (1 samples, 0.09%)</title><rect x="1157.0" y="835.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1160.0" y="846.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1157.0" y="819.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1160.0" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (13 samples, 1.14%)</title><rect x="1158.0" y="835.0" width="13.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.0" y="846.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.09%)</title><rect x="1158.0" y="819.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.0" y="830.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.09%)</title><rect x="1158.0" y="803.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.0" y="814.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.09%)</title><rect x="1158.0" y="787.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.0" y="798.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.09%)</title><rect x="1158.0" y="771.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.0" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.09%)</title><rect x="1158.0" y="755.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.0" y="766.0"></text>
</g>
<g>
<title>Invariance::is_invariant(Node*) (1 samples, 0.09%)</title><rect x="1158.0" y="739.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1161.0" y="750.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1158.0" y="723.0" width="1.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1161.0" y="734.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.09%)</title><rect x="1159.0" y="819.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1162.0" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.09%)</title><rect x="1160.1" y="819.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.1" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.09%)</title><rect x="1161.1" y="819.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.1" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.09%)</title><rect x="1161.1" y="803.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.1" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.09%)</title><rect x="1162.1" y="819.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.1" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.17%)</title><rect x="1163.2" y="819.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.2" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (4 samples, 0.35%)</title><rect x="1165.2" y="819.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.2" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.09%)</title><rect x="1166.3" y="803.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.3" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_up(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1166.3" y="787.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.3" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1166.3" y="771.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.3" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.09%)</title><rect x="1166.3" y="755.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.3" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.17%)</title><rect x="1167.3" y="803.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.3" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.09%)</title><rect x="1167.3" y="787.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.3" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.09%)</title><rect x="1168.3" y="787.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.3" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.09%)</title><rect x="1168.3" y="771.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.3" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1169.4" y="819.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.4" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1169.4" y="803.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1172.4" y="814.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1169.4" y="787.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.4" y="798.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.09%)</title><rect x="1170.4" y="819.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.4" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.26%)</title><rect x="1171.4" y="835.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.4" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.26%)</title><rect x="1171.4" y="819.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.4" y="830.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1171.4" y="803.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.4" y="814.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1172.4" y="803.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.4" y="814.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1172.4" y="787.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.4" y="798.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1172.4" y="771.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.4" y="782.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1172.4" y="755.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.4" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1173.5" y="803.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.5" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.09%)</title><rect x="1173.5" y="787.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.5" y="798.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.09%)</title><rect x="1173.5" y="771.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.5" y="782.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.09%)</title><rect x="1174.5" y="835.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.5" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1174.5" y="819.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.5" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1174.5" y="803.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.5" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1174.5" y="787.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.5" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.61%)</title><rect x="1175.5" y="851.0" width="7.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.5" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.61%)</title><rect x="1175.5" y="835.0" width="7.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.5" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.61%)</title><rect x="1175.5" y="819.0" width="7.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.5" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.61%)</title><rect x="1175.5" y="803.0" width="7.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.5" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.61%)</title><rect x="1175.5" y="787.0" width="7.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.5" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.61%)</title><rect x="1175.5" y="771.0" width="7.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.5" y="782.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.17%)</title><rect x="1175.5" y="755.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.5" y="766.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.17%)</title><rect x="1175.5" y="739.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.5" y="750.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 0.17%)</title><rect x="1175.5" y="723.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.5" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (2 samples, 0.17%)</title><rect x="1175.5" y="707.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.5" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (2 samples, 0.17%)</title><rect x="1175.5" y="691.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.5" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.17%)</title><rect x="1175.5" y="675.0" width="2.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.5" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.17%)</title><rect x="1175.5" y="659.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.5" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (2 samples, 0.17%)</title><rect x="1175.5" y="643.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.5" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1175.5" y="627.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.5" y="638.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.09%)</title><rect x="1175.5" y="611.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.5" y="622.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1175.5" y="595.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.5" y="606.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1175.5" y="579.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.5" y="590.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1175.5" y="563.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.5" y="574.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1175.5" y="547.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.5" y="558.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1175.5" y="531.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.5" y="542.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.09%)</title><rect x="1175.5" y="515.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.5" y="526.0"></text>
</g>
<g>
<title>SystemDictionary::find_instance_or_array_klass(Symbol*, Handle, Handle, Thread*) (1 samples, 0.09%)</title><rect x="1175.5" y="499.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.5" y="510.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.09%)</title><rect x="1175.5" y="483.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.5" y="494.0"></text>
</g>
<g>
<title>Dictionary::find(int, unsigned int, Symbol*, ClassLoaderData*, Handle, Thread*) (1 samples, 0.09%)</title><rect x="1175.5" y="467.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.5" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.09%)</title><rect x="1176.6" y="627.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.6" y="638.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1176.6" y="611.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.6" y="622.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1176.6" y="595.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.6" y="606.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1176.6" y="579.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.6" y="590.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1176.6" y="563.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.6" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.35%)</title><rect x="1177.6" y="755.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.6" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.35%)</title><rect x="1177.6" y="739.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.35%)</title><rect x="1177.6" y="723.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.35%)</title><rect x="1177.6" y="707.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.35%)</title><rect x="1177.6" y="691.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.35%)</title><rect x="1177.6" y="675.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.6" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.35%)</title><rect x="1177.6" y="659.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.6" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.35%)</title><rect x="1177.6" y="643.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.35%)</title><rect x="1177.6" y="627.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.35%)</title><rect x="1177.6" y="611.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.35%)</title><rect x="1177.6" y="595.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.35%)</title><rect x="1177.6" y="579.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.6" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1177.6" y="563.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.6" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.26%)</title><rect x="1177.6" y="547.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.26%)</title><rect x="1177.6" y="531.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.26%)</title><rect x="1177.6" y="515.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.26%)</title><rect x="1177.6" y="499.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.26%)</title><rect x="1177.6" y="483.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.6" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1177.6" y="467.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.6" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.26%)</title><rect x="1177.6" y="451.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1177.6" y="435.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1177.6" y="419.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1177.6" y="403.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1177.6" y="387.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.6" y="398.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1177.6" y="371.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.6" y="382.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1177.6" y="355.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.6" y="366.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1177.6" y="339.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.6" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1177.6" y="323.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.6" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1177.6" y="307.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.6" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1177.6" y="291.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.6" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1177.6" y="275.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.6" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1177.6" y="259.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.6" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.09%)</title><rect x="1177.6" y="243.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.6" y="254.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1177.6" y="227.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.6" y="238.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1177.6" y="211.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.6" y="222.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1177.6" y="195.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.6" y="206.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1177.6" y="179.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.6" y="190.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1177.6" y="163.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.6" y="174.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1177.6" y="147.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.6" y="158.0"></text>
</g>
<g>
<title>Dependencies::check_evol_method(Method*) (1 samples, 0.09%)</title><rect x="1177.6" y="131.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.6" y="142.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.6" y="371.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.6" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1178.6" y="355.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1178.6" y="339.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1178.6" y="323.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1178.6" y="307.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1178.6" y="291.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.6" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.6" y="275.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.6" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1178.6" y="259.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1178.6" y="243.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.6" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1178.6" y="227.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.6" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1178.6" y="211.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.6" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1178.6" y="195.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.6" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.6" y="179.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.6" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1178.6" y="163.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.6" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1178.6" y="147.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.6" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1178.6" y="131.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.6" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1178.6" y="115.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.6" y="126.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1178.6" y="99.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.6" y="110.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1178.6" y="83.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.6" y="94.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1178.6" y="67.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.6" y="78.0"></text>
</g>
<g>
<title>InlineTree::build_inline_tree_for_callee(ciMethod*, JVMState*, int) (1 samples, 0.09%)</title><rect x="1178.6" y="51.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.6" y="62.0"></text>
</g>
<g>
<title>InlineTree::InlineTree(Compile*, InlineTree const*, ciMethod*, JVMState*, int, float, int) (1 samples, 0.09%)</title><rect x="1178.6" y="35.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.6" y="46.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.09%)</title><rect x="1179.7" y="435.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.7" y="446.0"></text>
</g>
<g>
<title>ciMethodData::load_extra_data() (1 samples, 0.09%)</title><rect x="1179.7" y="419.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.7" y="430.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.7" y="563.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.7" y="574.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.7" y="547.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.7" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.7" y="531.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.7" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.7" y="515.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.7" y="499.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.7" y="483.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.7" y="467.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.7" y="451.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.7" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.7" y="435.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.7" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.7" y="419.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.7" y="403.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.7" y="387.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.7" y="371.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.7" y="355.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.7" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.7" y="339.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.7" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.7" y="323.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.7" y="307.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.7" y="291.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.7" y="275.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.7" y="259.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.7" y="270.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1180.7" y="243.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.7" y="254.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1180.7" y="227.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.7" y="238.0"></text>
</g>
<g>
<title>pass_initial_checks(ciMethod*, int, ciMethod*) (1 samples, 0.09%)</title><rect x="1180.7" y="211.0" width="1.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1183.7" y="222.0"></text>
</g>
<g>
<title>CompilerOracle::should_exclude(methodHandle, bool&amp;) (1 samples, 0.09%)</title><rect x="1180.7" y="195.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.7" y="206.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.7" y="755.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.7" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.7" y="739.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.7" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.7" y="723.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.7" y="707.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.7" y="691.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.7" y="675.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1181.7" y="659.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.7" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.7" y="643.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.7" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.7" y="627.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.7" y="611.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.7" y="595.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.7" y="579.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1181.7" y="563.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.7" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.7" y="547.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.7" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.7" y="531.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.7" y="515.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.7" y="499.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.7" y="483.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1181.7" y="467.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.7" y="478.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1181.7" y="451.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.7" y="462.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1181.7" y="435.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.7" y="446.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1181.7" y="419.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.7" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1181.7" y="403.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.7" y="414.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1181.7" y="387.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.7" y="398.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1181.7" y="371.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.7" y="382.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1181.7" y="355.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.7" y="366.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1181.7" y="339.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.7" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1181.7" y="323.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.7" y="334.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.09%)</title><rect x="1181.7" y="307.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.7" y="318.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1181.7" y="291.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.7" y="302.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1181.7" y="275.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.7" y="286.0"></text>
</g>
<g>
<title>ciField::initialize_from(fieldDescriptor*) (1 samples, 0.09%)</title><rect x="1181.7" y="259.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.7" y="270.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (2 samples, 0.17%)</title><rect x="1182.8" y="851.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.8" y="862.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (2 samples, 0.17%)</title><rect x="1182.8" y="835.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.8" y="846.0"></text>
</g>
<g>
<title>Type::Initialize(Compile*) (1 samples, 0.09%)</title><rect x="1184.8" y="851.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.8" y="862.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1184.8" y="835.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.8" y="846.0"></text>
</g>
<g>
<title>Type::uhash(Type const*) (1 samples, 0.09%)</title><rect x="1184.8" y="819.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.8" y="830.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.09%)</title><rect x="1185.9" y="851.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.9" y="862.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.09%)</title><rect x="1185.9" y="835.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.9" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::add_dependent_nmethod(nmethod*) (1 samples, 0.09%)</title><rect x="1185.9" y="819.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.9" y="830.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1186.9" y="883.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.9" y="894.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.09%)</title><rect x="1186.9" y="867.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.9" y="878.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.09%)</title><rect x="1186.9" y="851.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.9" y="862.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.09%)</title><rect x="1186.9" y="835.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.9" y="846.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.09%)</title><rect x="1186.9" y="819.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.9" y="830.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.09%)</title><rect x="1186.9" y="803.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.9" y="814.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.17%)</title><rect x="1187.9" y="947.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.9" y="958.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.17%)</title><rect x="1187.9" y="931.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.9" y="942.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.17%)</title><rect x="1187.9" y="915.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.9" y="926.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.17%)</title><rect x="1187.9" y="899.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.9" y="910.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.17%)</title><rect x="1187.9" y="883.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.9" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.17%)</title><rect x="1187.9" y="867.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.9" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::gc_prologue(bool) (1 samples, 0.09%)</title><rect x="1187.9" y="851.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.9" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::ensure_parsability(bool) (1 samples, 0.09%)</title><rect x="1187.9" y="835.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.9" y="846.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::make_parsable(bool) (1 samples, 0.09%)</title><rect x="1187.9" y="819.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.9" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.09%)</title><rect x="1187.9" y="803.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.9" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::register_humongous_regions_with_in_cset_fast_test() (1 samples, 0.09%)</title><rect x="1189.0" y="851.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.0" y="862.0"></text>
</g>
<g>
<title>HeapRegionManager::iterate(HeapRegionClosure*) const (1 samples, 0.09%)</title><rect x="1189.0" y="835.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.0" y="846.0"></text>
</g>
<g>
<title>RegisterHumongousWithInCSetFastTestClosure::doHeapRegion(HeapRegion*) (1 samples, 0.09%)</title><rect x="1189.0" y="819.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1192.0" y="830.0"></text>
</g>
</g>
</svg>
