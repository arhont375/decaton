<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (361 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="2035.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="2019.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="2003.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1987.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1971.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1955.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1939.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1923.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1907.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1891.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1875.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1859.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1843.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1827.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1811.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1795.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1779.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1763.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1747.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1731.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1715.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1699.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1683.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1667.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1651.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1635.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1619.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1603.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1587.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1571.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1555.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1539.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1523.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1507.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1491.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1475.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1459.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1443.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1427.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1411.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1395.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1379.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1363.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1347.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1331.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1315.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1299.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1283.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1267.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1251.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1235.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1219.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1203.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1187.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1171.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1155.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1139.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1123.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1107.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1091.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1075.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1059.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1043.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1027.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="1011.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="995.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="979.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="963.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="947.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="931.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="915.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="899.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="883.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="867.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="851.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="835.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="819.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="803.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="787.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="771.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="755.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="739.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="723.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="707.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="691.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="675.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="659.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="643.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="627.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="611.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="595.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="579.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="563.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="547.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="531.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="515.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="499.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="483.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="467.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="451.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="435.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="419.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="403.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="387.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="371.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="355.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="339.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="323.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="307.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="291.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="275.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="259.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="243.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="227.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="211.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="195.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="179.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="163.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="147.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="131.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="115.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="99.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="83.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="67.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.28%)</title><rect x="10.0" y="51.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.28%)</title><rect x="10.0" y="35.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (27 samples, 7.48%)</title><rect x="13.3" y="2035.0" width="88.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="16.3" y="2046.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (2 samples, 0.55%)</title><rect x="13.3" y="2019.0" width="6.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="16.3" y="2030.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (2 samples, 0.55%)</title><rect x="13.3" y="2003.0" width="6.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="16.3" y="2014.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (2 samples, 0.55%)</title><rect x="13.3" y="1987.0" width="6.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.3" y="1998.0"></text>
</g>
<g>
<title>java/util/HashMap.forEach (1 samples, 0.28%)</title><rect x="13.3" y="1971.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="16.3" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$300/1744871041.accept (1 samples, 0.28%)</title><rect x="13.3" y="1955.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="16.3" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateLastSeenEpochIfNewer (1 samples, 0.28%)</title><rect x="13.3" y="1939.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="16.3" y="1950.0"></text>
</g>
<g>
<title>java/util/Optional.ifPresent (1 samples, 0.28%)</title><rect x="13.3" y="1923.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.3" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.28%)</title><rect x="16.5" y="1971.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.5" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.28%)</title><rect x="16.5" y="1955.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.5" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.28%)</title><rect x="16.5" y="1939.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.5" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.28%)</title><rect x="16.5" y="1923.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.5" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.28%)</title><rect x="16.5" y="1907.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="19.5" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.28%)</title><rect x="16.5" y="1891.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="19.5" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/OffsetCommitRequest$Builder.build (1 samples, 0.28%)</title><rect x="16.5" y="1875.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.5" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/OffsetCommitRequest$Builder.build (1 samples, 0.28%)</title><rect x="16.5" y="1859.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="19.5" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (25 samples, 6.93%)</title><rect x="19.8" y="2019.0" width="81.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.8" y="2030.0">com/linec..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (12 samples, 3.32%)</title><rect x="19.8" y="2003.0" width="39.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="22.8" y="2014.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$269/243339954.accept (12 samples, 3.32%)</title><rect x="19.8" y="1987.0" width="39.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="22.8" y="1998.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (12 samples, 3.32%)</title><rect x="19.8" y="1971.0" width="39.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="22.8" y="1982.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (4 samples, 1.11%)</title><rect x="23.1" y="1955.0" width="13.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="26.1" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (4 samples, 1.11%)</title><rect x="23.1" y="1939.0" width="13.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="26.1" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (4 samples, 1.11%)</title><rect x="23.1" y="1923.0" width="13.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="26.1" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (4 samples, 1.11%)</title><rect x="23.1" y="1907.0" width="13.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="26.1" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (4 samples, 1.11%)</title><rect x="23.1" y="1891.0" width="13.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="26.1" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (4 samples, 1.11%)</title><rect x="23.1" y="1875.0" width="13.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="26.1" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.55%)</title><rect x="29.6" y="1859.0" width="6.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="32.6" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (2 samples, 0.55%)</title><rect x="29.6" y="1843.0" width="6.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="32.6" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.55%)</title><rect x="29.6" y="1827.0" width="6.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="32.6" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/TaskRequest.&lt;init&gt; (7 samples, 1.94%)</title><rect x="36.1" y="1955.0" width="22.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="39.1" y="1966.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (7 samples, 1.94%)</title><rect x="36.1" y="1939.0" width="22.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="39.1" y="1950.0">j..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (13 samples, 3.60%)</title><rect x="59.0" y="2003.0" width="42.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="62.0" y="2014.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (13 samples, 3.60%)</title><rect x="59.0" y="1987.0" width="42.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="62.0" y="1998.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (10 samples, 2.77%)</title><rect x="59.0" y="1971.0" width="32.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="62.0" y="1982.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 0.83%)</title><rect x="59.0" y="1955.0" width="9.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="62.0" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 0.83%)</title><rect x="59.0" y="1939.0" width="9.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="62.0" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.83%)</title><rect x="59.0" y="1923.0" width="9.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="62.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.83%)</title><rect x="59.0" y="1907.0" width="9.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="62.0" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.28%)</title><rect x="65.6" y="1891.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="68.6" y="1902.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.28%)</title><rect x="65.6" y="1875.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="68.6" y="1886.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.28%)</title><rect x="65.6" y="1859.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="68.6" y="1870.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.28%)</title><rect x="65.6" y="1843.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="68.6" y="1854.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.28%)</title><rect x="65.6" y="1827.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="68.6" y="1838.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.28%)</title><rect x="65.6" y="1811.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="68.6" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (7 samples, 1.94%)</title><rect x="68.8" y="1955.0" width="22.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="71.8" y="1966.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (7 samples, 1.94%)</title><rect x="68.8" y="1939.0" width="22.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="71.8" y="1950.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (7 samples, 1.94%)</title><rect x="68.8" y="1923.0" width="22.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="71.8" y="1934.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (7 samples, 1.94%)</title><rect x="68.8" y="1907.0" width="22.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="71.8" y="1918.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.55%)</title><rect x="68.8" y="1891.0" width="6.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="71.8" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (2 samples, 0.55%)</title><rect x="68.8" y="1875.0" width="6.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="71.8" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (2 samples, 0.55%)</title><rect x="68.8" y="1859.0" width="6.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="71.8" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (5 samples, 1.39%)</title><rect x="75.4" y="1891.0" width="16.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="78.4" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (5 samples, 1.39%)</title><rect x="75.4" y="1875.0" width="16.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="78.4" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (3 samples, 0.83%)</title><rect x="75.4" y="1859.0" width="9.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="78.4" y="1870.0"></text>
</g>
<g>
<title>java/util/Optional.of (3 samples, 0.83%)</title><rect x="75.4" y="1843.0" width="9.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="78.4" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (2 samples, 0.55%)</title><rect x="85.2" y="1859.0" width="6.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="88.2" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (2 samples, 0.55%)</title><rect x="85.2" y="1843.0" width="6.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="88.2" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.55%)</title><rect x="91.7" y="1971.0" width="6.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="94.7" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.28%)</title><rect x="91.7" y="1955.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="94.7" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.28%)</title><rect x="91.7" y="1939.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="94.7" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.28%)</title><rect x="91.7" y="1923.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="94.7" y="1934.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.28%)</title><rect x="91.7" y="1907.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="94.7" y="1918.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.28%)</title><rect x="91.7" y="1891.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="94.7" y="1902.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.28%)</title><rect x="91.7" y="1875.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="94.7" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.28%)</title><rect x="91.7" y="1859.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="94.7" y="1870.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (1 samples, 0.28%)</title><rect x="91.7" y="1843.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="94.7" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.28%)</title><rect x="95.0" y="1955.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="98.0" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.28%)</title><rect x="95.0" y="1939.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="98.0" y="1950.0"></text>
</g>
<g>
<title>java/util/AbstractSet.equals (1 samples, 0.28%)</title><rect x="95.0" y="1923.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="98.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.28%)</title><rect x="98.3" y="1971.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="101.3" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.28%)</title><rect x="98.3" y="1955.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="101.3" y="1966.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.28%)</title><rect x="98.3" y="1939.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="101.3" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$257/1676422071.accept (1 samples, 0.28%)</title><rect x="98.3" y="1923.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="101.3" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.28%)</title><rect x="98.3" y="1907.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="101.3" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.28%)</title><rect x="98.3" y="1891.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="101.3" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.28%)</title><rect x="98.3" y="1875.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="101.3" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.28%)</title><rect x="98.3" y="1859.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="101.3" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.28%)</title><rect x="98.3" y="1843.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="101.3" y="1854.0"></text>
</g>
<g>
<title>java/lang/Thread.run (221 samples, 61.22%)</title><rect x="101.5" y="2035.0" width="722.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="104.5" y="2046.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (221 samples, 61.22%)</title><rect x="101.5" y="2019.0" width="722.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="104.5" y="2030.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (221 samples, 61.22%)</title><rect x="101.5" y="2003.0" width="722.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="104.5" y="2014.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$285/654555386.run (206 samples, 57.06%)</title><rect x="101.5" y="1987.0" width="673.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="104.5" y="1998.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$285/654555386.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$70 (206 samples, 57.06%)</title><rect x="101.5" y="1971.0" width="673.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="104.5" y="1982.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$70</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (206 samples, 57.06%)</title><rect x="101.5" y="1955.0" width="673.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="104.5" y="1966.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (1 samples, 0.28%)</title><rect x="104.8" y="1939.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="107.8" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (1 samples, 0.28%)</title><rect x="104.8" y="1923.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="107.8" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (1 samples, 0.28%)</title><rect x="104.8" y="1907.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="107.8" y="1918.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.28%)</title><rect x="104.8" y="1891.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="107.8" y="1902.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.28%)</title><rect x="104.8" y="1875.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="107.8" y="1886.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.28%)</title><rect x="104.8" y="1859.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="107.8" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (204 samples, 56.51%)</title><rect x="108.1" y="1939.0" width="666.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="111.1" y="1950.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (36 samples, 9.97%)</title><rect x="114.6" y="1923.0" width="117.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="117.6" y="1934.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$42/815674463.extract (36 samples, 9.97%)</title><rect x="114.6" y="1907.0" width="117.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="117.6" y="1918.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (36 samples, 9.97%)</title><rect x="114.6" y="1891.0" width="117.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="117.6" y="1902.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (36 samples, 9.97%)</title><rect x="114.6" y="1875.0" width="117.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="117.6" y="1886.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (36 samples, 9.97%)</title><rect x="114.6" y="1859.0" width="117.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="117.6" y="1870.0">com/linecorp/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (36 samples, 9.97%)</title><rect x="114.6" y="1843.0" width="117.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="117.6" y="1854.0">com/fasterxml/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (18 samples, 4.99%)</title><rect x="114.6" y="1827.0" width="58.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="117.6" y="1838.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (10 samples, 2.77%)</title><rect x="114.6" y="1811.0" width="32.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="117.6" y="1822.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (10 samples, 2.77%)</title><rect x="114.6" y="1795.0" width="32.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="117.6" y="1806.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (7 samples, 1.94%)</title><rect x="114.6" y="1779.0" width="22.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="117.6" y="1790.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (3 samples, 0.83%)</title><rect x="137.5" y="1779.0" width="9.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="140.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.getMask (1 samples, 0.28%)</title><rect x="140.7" y="1763.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="143.7" y="1774.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.28%)</title><rect x="144.0" y="1763.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="147.0" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (8 samples, 2.22%)</title><rect x="147.3" y="1811.0" width="26.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="150.3" y="1822.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (8 samples, 2.22%)</title><rect x="147.3" y="1795.0" width="26.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="150.3" y="1806.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.28%)</title><rect x="147.3" y="1779.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="150.3" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.55%)</title><rect x="150.6" y="1779.0" width="6.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="153.6" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.checkUTF16 (1 samples, 0.28%)</title><rect x="153.8" y="1763.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="156.8" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.55%)</title><rect x="157.1" y="1779.0" width="6.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="160.1" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.28%)</title><rect x="160.4" y="1763.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="163.4" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.28%)</title><rect x="160.4" y="1747.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="163.4" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (3 samples, 0.83%)</title><rect x="163.6" y="1779.0" width="9.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="166.6" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.28%)</title><rect x="163.6" y="1763.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="166.6" y="1774.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.28%)</title><rect x="163.6" y="1747.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="166.6" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.28%)</title><rect x="163.6" y="1731.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="166.6" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (2 samples, 0.55%)</title><rect x="166.9" y="1763.0" width="6.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="169.9" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (16 samples, 4.43%)</title><rect x="173.4" y="1827.0" width="52.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="176.4" y="1838.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (3 samples, 0.83%)</title><rect x="173.4" y="1811.0" width="9.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="176.4" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (3 samples, 0.83%)</title><rect x="173.4" y="1795.0" width="9.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="176.4" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (3 samples, 0.83%)</title><rect x="173.4" y="1779.0" width="9.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="176.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.28%)</title><rect x="173.4" y="1763.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="176.4" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 0.55%)</title><rect x="176.7" y="1763.0" width="6.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="179.7" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.55%)</title><rect x="183.2" y="1811.0" width="6.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="186.2" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.55%)</title><rect x="183.2" y="1795.0" width="6.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="186.2" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.28%)</title><rect x="186.5" y="1779.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="189.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.28%)</title><rect x="189.8" y="1811.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="192.8" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.28%)</title><rect x="189.8" y="1795.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="192.8" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.28%)</title><rect x="189.8" y="1779.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="192.8" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.28%)</title><rect x="189.8" y="1763.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="192.8" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.28%)</title><rect x="193.0" y="1811.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="196.0" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.28%)</title><rect x="193.0" y="1795.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="196.0" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.28%)</title><rect x="193.0" y="1779.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="196.0" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.28%)</title><rect x="193.0" y="1763.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="196.0" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.28%)</title><rect x="193.0" y="1747.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="196.0" y="1758.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.28%)</title><rect x="193.0" y="1731.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="196.0" y="1742.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.28%)</title><rect x="193.0" y="1715.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="196.0" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.28%)</title><rect x="193.0" y="1699.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="196.0" y="1710.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.28%)</title><rect x="193.0" y="1683.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="196.0" y="1694.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.28%)</title><rect x="193.0" y="1667.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="196.0" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (9 samples, 2.49%)</title><rect x="196.3" y="1811.0" width="29.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="199.3" y="1822.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.28%)</title><rect x="196.3" y="1795.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="199.3" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.28%)</title><rect x="196.3" y="1779.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="199.3" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.28%)</title><rect x="196.3" y="1763.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="199.3" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.28%)</title><rect x="196.3" y="1747.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="199.3" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (8 samples, 2.22%)</title><rect x="199.6" y="1795.0" width="26.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="202.6" y="1806.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (8 samples, 2.22%)</title><rect x="199.6" y="1779.0" width="26.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="202.6" y="1790.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (7 samples, 1.94%)</title><rect x="202.9" y="1763.0" width="22.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="205.9" y="1774.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.55%)</title><rect x="202.9" y="1747.0" width="6.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="205.9" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.28%)</title><rect x="206.1" y="1731.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="209.1" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.28%)</title><rect x="206.1" y="1715.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="209.1" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.28%)</title><rect x="206.1" y="1699.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="209.1" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.28%)</title><rect x="206.1" y="1683.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="209.1" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (2 samples, 0.55%)</title><rect x="209.4" y="1747.0" width="6.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="212.4" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.55%)</title><rect x="209.4" y="1731.0" width="6.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="212.4" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.55%)</title><rect x="209.4" y="1715.0" width="6.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="212.4" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.55%)</title><rect x="209.4" y="1699.0" width="6.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="212.4" y="1710.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.55%)</title><rect x="209.4" y="1683.0" width="6.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="212.4" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.28%)</title><rect x="215.9" y="1747.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="218.9" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.28%)</title><rect x="215.9" y="1731.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="218.9" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.28%)</title><rect x="215.9" y="1715.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="218.9" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.28%)</title><rect x="215.9" y="1699.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="218.9" y="1710.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.28%)</title><rect x="215.9" y="1683.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="218.9" y="1694.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.28%)</title><rect x="215.9" y="1667.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="218.9" y="1678.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (1 samples, 0.28%)</title><rect x="215.9" y="1651.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="218.9" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.28%)</title><rect x="219.2" y="1747.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="222.2" y="1758.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.28%)</title><rect x="219.2" y="1731.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="222.2" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.28%)</title><rect x="219.2" y="1715.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="222.2" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.28%)</title><rect x="222.5" y="1747.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="225.5" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.55%)</title><rect x="225.7" y="1827.0" width="6.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="228.7" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.55%)</title><rect x="225.7" y="1811.0" width="6.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="228.7" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.55%)</title><rect x="225.7" y="1795.0" width="6.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="228.7" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.55%)</title><rect x="225.7" y="1779.0" width="6.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="228.7" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.28%)</title><rect x="229.0" y="1763.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="232.0" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (155 samples, 42.94%)</title><rect x="232.3" y="1923.0" width="506.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="235.3" y="1934.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (18 samples, 4.99%)</title><rect x="232.3" y="1907.0" width="58.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="235.3" y="1918.0">com/li..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (17 samples, 4.71%)</title><rect x="235.5" y="1891.0" width="55.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="238.5" y="1902.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (17 samples, 4.71%)</title><rect x="235.5" y="1875.0" width="55.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="238.5" y="1886.0">ch/qo..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (14 samples, 3.88%)</title><rect x="245.3" y="1859.0" width="45.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="248.3" y="1870.0">java..</text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.28%)</title><rect x="271.5" y="1843.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="274.5" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (5 samples, 1.39%)</title><rect x="274.8" y="1843.0" width="16.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="277.8" y="1854.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.28%)</title><rect x="274.8" y="1827.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="277.8" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 1.11%)</title><rect x="278.0" y="1827.0" width="13.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="281.0" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (38 samples, 10.53%)</title><rect x="291.1" y="1907.0" width="124.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="294.1" y="1918.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (38 samples, 10.53%)</title><rect x="291.1" y="1891.0" width="124.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="294.1" y="1902.0">com/linecorp/de..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.28%)</title><rect x="294.4" y="1875.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="297.4" y="1886.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.28%)</title><rect x="294.4" y="1859.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="297.4" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.28%)</title><rect x="294.4" y="1843.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="297.4" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (17 samples, 4.71%)</title><rect x="297.6" y="1875.0" width="55.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="300.6" y="1886.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (15 samples, 4.16%)</title><rect x="300.9" y="1859.0" width="49.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="303.9" y="1870.0">java/..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (14 samples, 3.88%)</title><rect x="304.2" y="1843.0" width="45.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="307.2" y="1854.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (9 samples, 2.49%)</title><rect x="310.7" y="1827.0" width="29.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="313.7" y="1838.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (9 samples, 2.49%)</title><rect x="310.7" y="1811.0" width="29.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="313.7" y="1822.0">ja..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (9 samples, 2.49%)</title><rect x="310.7" y="1795.0" width="29.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="313.7" y="1806.0">ja..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (4 samples, 1.11%)</title><rect x="320.5" y="1779.0" width="13.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="323.5" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.28%)</title><rect x="320.5" y="1763.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="323.5" y="1774.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.28%)</title><rect x="320.5" y="1747.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="323.5" y="1758.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.28%)</title><rect x="320.5" y="1731.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="323.5" y="1742.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.83%)</title><rect x="323.8" y="1763.0" width="9.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="326.8" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.83%)</title><rect x="323.8" y="1747.0" width="9.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="326.8" y="1758.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.28%)</title><rect x="330.3" y="1731.0" width="3.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="333.3" y="1742.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.55%)</title><rect x="333.6" y="1779.0" width="6.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="336.6" y="1790.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.83%)</title><rect x="340.1" y="1827.0" width="9.8" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="343.1" y="1838.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.28%)</title><rect x="349.9" y="1859.0" width="3.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="352.9" y="1870.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (3 samples, 0.83%)</title><rect x="353.2" y="1875.0" width="9.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="356.2" y="1886.0"></text>
</g>
<g>
<title>java/lang/Long.toString (3 samples, 0.83%)</title><rect x="353.2" y="1859.0" width="9.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="356.2" y="1870.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.83%)</title><rect x="353.2" y="1843.0" width="9.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="356.2" y="1854.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (16 samples, 4.43%)</title><rect x="363.0" y="1875.0" width="52.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="366.0" y="1886.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (15 samples, 4.16%)</title><rect x="366.3" y="1859.0" width="49.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="369.3" y="1870.0">ch/qo..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.28%)</title><rect x="366.3" y="1843.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="369.3" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.28%)</title><rect x="366.3" y="1827.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="369.3" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.28%)</title><rect x="366.3" y="1811.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="369.3" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.28%)</title><rect x="366.3" y="1795.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="369.3" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.28%)</title><rect x="366.3" y="1779.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="369.3" y="1790.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (14 samples, 3.88%)</title><rect x="369.6" y="1843.0" width="45.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="372.6" y="1854.0">java..</text>
</g>
<g>
<title>java/util/HashMap.put (14 samples, 3.88%)</title><rect x="369.6" y="1827.0" width="45.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="372.6" y="1838.0">java..</text>
</g>
<g>
<title>java/util/HashMap.putVal (9 samples, 2.49%)</title><rect x="385.9" y="1811.0" width="29.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="388.9" y="1822.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.28%)</title><rect x="402.2" y="1795.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="405.2" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (3 samples, 0.83%)</title><rect x="405.5" y="1795.0" width="9.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="408.5" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (87 samples, 24.10%)</title><rect x="415.3" y="1907.0" width="284.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="418.3" y="1918.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (86 samples, 23.82%)</title><rect x="418.6" y="1891.0" width="281.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="421.6" y="1902.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.28%)</title><rect x="421.9" y="1875.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="424.9" y="1886.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.28%)</title><rect x="421.9" y="1859.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="424.9" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.28%)</title><rect x="421.9" y="1843.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="424.9" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.28%)</title><rect x="421.9" y="1827.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="424.9" y="1838.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.28%)</title><rect x="421.9" y="1811.0" width="3.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="424.9" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$207/1613369502.process (71 samples, 19.67%)</title><rect x="425.1" y="1875.0" width="232.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="428.1" y="1886.0">com/linecorp/decaton/benchmark/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (71 samples, 19.67%)</title><rect x="425.1" y="1859.0" width="232.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="428.1" y="1870.0">com/linecorp/decaton/benchmark/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (69 samples, 19.11%)</title><rect x="428.4" y="1843.0" width="225.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="431.4" y="1854.0">com/linecorp/decaton/benchmark..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (66 samples, 18.28%)</title><rect x="438.2" y="1827.0" width="215.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="441.2" y="1838.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>java/lang/Thread.sleep (65 samples, 18.01%)</title><rect x="438.2" y="1811.0" width="212.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="441.2" y="1822.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (58 samples, 16.07%)</title><rect x="454.5" y="1795.0" width="189.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="457.5" y="1806.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.83%)</title><rect x="464.3" y="1779.0" width="9.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="467.3" y="1790.0"></text>
</g>
<g>
<title>__clock_gettime (11 samples, 3.05%)</title><rect x="474.2" y="1779.0" width="35.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="477.2" y="1790.0">__c..</text>
</g>
<g>
<title>[vdso] (3 samples, 0.83%)</title><rect x="500.3" y="1763.0" width="9.8" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="503.3" y="1774.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.83%)</title><rect x="510.1" y="1779.0" width="9.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="513.1" y="1790.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (38 samples, 10.53%)</title><rect x="519.9" y="1779.0" width="124.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="522.9" y="1790.0">os::sleep(Threa..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.83%)</title><rect x="542.8" y="1763.0" width="9.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="545.8" y="1774.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.55%)</title><rect x="546.1" y="1747.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="549.1" y="1758.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.83%)</title><rect x="552.6" y="1763.0" width="9.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="555.6" y="1774.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.55%)</title><rect x="555.9" y="1747.0" width="6.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="558.9" y="1758.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 1.11%)</title><rect x="562.4" y="1763.0" width="13.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="565.4" y="1774.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (17 samples, 4.71%)</title><rect x="575.5" y="1763.0" width="55.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="578.5" y="1774.0">__pth..</text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.55%)</title><rect x="631.1" y="1763.0" width="6.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="634.1" y="1774.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.28%)</title><rect x="637.6" y="1763.0" width="3.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="640.6" y="1774.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.28%)</title><rect x="640.9" y="1763.0" width="3.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="643.9" y="1774.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.28%)</title><rect x="644.1" y="1795.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="647.1" y="1806.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.28%)</title><rect x="647.4" y="1795.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="650.4" y="1806.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.28%)</title><rect x="650.7" y="1811.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="653.7" y="1822.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.28%)</title><rect x="650.7" y="1795.0" width="3.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="653.7" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.28%)</title><rect x="653.9" y="1843.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="656.9" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.28%)</title><rect x="657.2" y="1875.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="660.2" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.28%)</title><rect x="657.2" y="1859.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="660.2" y="1870.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/789653861.linkToTargetMethod (1 samples, 0.28%)</title><rect x="660.5" y="1875.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="663.5" y="1886.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (1 samples, 0.28%)</title><rect x="660.5" y="1859.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="663.5" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$294/1852493903.get$Lambda (1 samples, 0.28%)</title><rect x="660.5" y="1843.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="663.5" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.55%)</title><rect x="663.7" y="1875.0" width="6.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="666.7" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.28%)</title><rect x="667.0" y="1859.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="670.0" y="1870.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.28%)</title><rect x="670.3" y="1875.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="673.3" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.28%)</title><rect x="673.5" y="1875.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="676.5" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.28%)</title><rect x="673.5" y="1859.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="676.5" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (1 samples, 0.28%)</title><rect x="673.5" y="1843.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="676.5" y="1854.0"></text>
</g>
<g>
<title>java/util/ArrayList.elementData (1 samples, 0.28%)</title><rect x="673.5" y="1827.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="676.5" y="1838.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.83%)</title><rect x="676.8" y="1875.0" width="9.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="679.8" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.55%)</title><rect x="680.1" y="1859.0" width="6.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="683.1" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (4 samples, 1.11%)</title><rect x="686.6" y="1875.0" width="13.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="689.6" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 3.32%)</title><rect x="699.7" y="1907.0" width="39.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="702.7" y="1918.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (12 samples, 3.32%)</title><rect x="699.7" y="1891.0" width="39.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="702.7" y="1902.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.28%)</title><rect x="735.7" y="1875.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="738.7" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$297/107231055.accept (1 samples, 0.28%)</title><rect x="735.7" y="1859.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="738.7" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$62 (1 samples, 0.28%)</title><rect x="735.7" y="1843.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="738.7" y="1854.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.28%)</title><rect x="735.7" y="1827.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="738.7" y="1838.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.28%)</title><rect x="735.7" y="1811.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="738.7" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (11 samples, 3.05%)</title><rect x="738.9" y="1923.0" width="36.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="741.9" y="1934.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (11 samples, 3.05%)</title><rect x="738.9" y="1907.0" width="36.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="741.9" y="1918.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (1 samples, 0.28%)</title><rect x="745.5" y="1891.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="748.5" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 2.22%)</title><rect x="748.7" y="1891.0" width="26.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="751.7" y="1902.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$297/107231055.accept (2 samples, 0.55%)</title><rect x="748.7" y="1875.0" width="6.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="751.7" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$62 (2 samples, 0.55%)</title><rect x="748.7" y="1859.0" width="6.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="751.7" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (2 samples, 0.55%)</title><rect x="748.7" y="1843.0" width="6.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="751.7" y="1854.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.55%)</title><rect x="748.7" y="1827.0" width="6.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="751.7" y="1838.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.55%)</title><rect x="748.7" y="1811.0" width="6.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="751.7" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$298/736274989.accept (6 samples, 1.66%)</title><rect x="755.3" y="1875.0" width="19.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="758.3" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$61 (6 samples, 1.66%)</title><rect x="755.3" y="1859.0" width="19.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="758.3" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$283/130696824.complete (6 samples, 1.66%)</title><rect x="755.3" y="1843.0" width="19.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="758.3" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$38 (6 samples, 1.66%)</title><rect x="755.3" y="1827.0" width="19.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="758.3" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$282/1158435666.complete (6 samples, 1.66%)</title><rect x="755.3" y="1811.0" width="19.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="758.3" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$68 (6 samples, 1.66%)</title><rect x="755.3" y="1795.0" width="19.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="758.3" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (6 samples, 1.66%)</title><rect x="755.3" y="1779.0" width="19.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="758.3" y="1790.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (6 samples, 1.66%)</title><rect x="755.3" y="1763.0" width="19.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="758.3" y="1774.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (6 samples, 1.66%)</title><rect x="755.3" y="1747.0" width="19.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="758.3" y="1758.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (6 samples, 1.66%)</title><rect x="755.3" y="1731.0" width="19.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="758.3" y="1742.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (8 samples, 2.22%)</title><rect x="774.9" y="1987.0" width="26.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="777.9" y="1998.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 2.22%)</title><rect x="774.9" y="1971.0" width="26.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="777.9" y="1982.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 2.22%)</title><rect x="774.9" y="1955.0" width="26.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="777.9" y="1966.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 2.22%)</title><rect x="774.9" y="1939.0" width="26.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="777.9" y="1950.0">j..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.28%)</title><rect x="797.8" y="1923.0" width="3.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="800.8" y="1934.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.28%)</title><rect x="797.8" y="1907.0" width="3.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="800.8" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (7 samples, 1.94%)</title><rect x="801.0" y="1987.0" width="22.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="804.0" y="1998.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (6 samples, 1.66%)</title><rect x="804.3" y="1971.0" width="19.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="807.3" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (3 samples, 0.83%)</title><rect x="804.3" y="1955.0" width="9.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="807.3" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (3 samples, 0.83%)</title><rect x="804.3" y="1939.0" width="9.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="807.3" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.83%)</title><rect x="804.3" y="1923.0" width="9.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="807.3" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.83%)</title><rect x="804.3" y="1907.0" width="9.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="807.3" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.83%)</title><rect x="804.3" y="1891.0" width="9.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="807.3" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.83%)</title><rect x="814.1" y="1955.0" width="9.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="817.1" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.83%)</title><rect x="814.1" y="1939.0" width="9.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="817.1" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.83%)</title><rect x="814.1" y="1923.0" width="9.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="817.1" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.83%)</title><rect x="814.1" y="1907.0" width="9.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="817.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.55%)</title><rect x="823.9" y="2035.0" width="6.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="826.9" y="2046.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.28%)</title><rect x="823.9" y="2019.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="826.9" y="2030.0"></text>
</g>
<g>
<title>JVM_MonitorWait (1 samples, 0.28%)</title><rect x="823.9" y="2003.0" width="3.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="826.9" y="2014.0"></text>
</g>
<g>
<title>ObjectMonitor::wait(long, bool, Thread*) (1 samples, 0.28%)</title><rect x="823.9" y="1987.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="826.9" y="1998.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (1 samples, 0.28%)</title><rect x="823.9" y="1971.0" width="3.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="826.9" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.28%)</title><rect x="827.2" y="2019.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="830.2" y="2030.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.28%)</title><rect x="827.2" y="2003.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="830.2" y="2014.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.maybeThrowAnyException (1 samples, 0.28%)</title><rect x="827.2" y="1987.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="830.2" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.clearErrorsAndMaybeThrowException (1 samples, 0.28%)</title><rect x="827.2" y="1971.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="830.2" y="1982.0"></text>
</g>
<g>
<title>java/util/Optional.orElseGet (1 samples, 0.28%)</title><rect x="827.2" y="1955.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="830.2" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$$Lambda$86/1423782708.get (1 samples, 0.28%)</title><rect x="827.2" y="1939.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="830.2" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.recoverableException (1 samples, 0.28%)</title><rect x="827.2" y="1923.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="830.2" y="1934.0"></text>
</g>
<g>
<title>start_thread (109 samples, 30.19%)</title><rect x="830.4" y="2035.0" width="356.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="833.4" y="2046.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (109 samples, 30.19%)</title><rect x="830.4" y="2019.0" width="356.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="833.4" y="2030.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (16 samples, 4.43%)</title><rect x="830.4" y="2003.0" width="52.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="833.4" y="2014.0">GangW..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (16 samples, 4.43%)</title><rect x="830.4" y="1987.0" width="52.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="833.4" y="1998.0">G1Par..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (16 samples, 4.43%)</title><rect x="830.4" y="1971.0" width="52.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="833.4" y="1982.0">G1Par..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (14 samples, 3.88%)</title><rect x="830.4" y="1955.0" width="45.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="833.4" y="1966.0">G1Pa..</text>
</g>
<g>
<title>G1ParGCAllocator::allocate_direct_or_new_plab(InCSetState, unsigned long, unsigned char) (1 samples, 0.28%)</title><rect x="840.2" y="1939.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="843.2" y="1950.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (9 samples, 2.49%)</title><rect x="843.5" y="1939.0" width="29.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="846.5" y="1950.0">G1..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (2 samples, 0.55%)</title><rect x="866.4" y="1923.0" width="6.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="869.4" y="1934.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.28%)</title><rect x="872.9" y="1939.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="875.9" y="1950.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.28%)</title><rect x="876.2" y="1955.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="879.2" y="1966.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.28%)</title><rect x="879.5" y="1955.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="882.5" y="1966.0"></text>
</g>
<g>
<title>JavaThread::run() (92 samples, 25.48%)</title><rect x="882.7" y="2003.0" width="300.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="885.7" y="2014.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (92 samples, 25.48%)</title><rect x="882.7" y="1987.0" width="300.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="885.7" y="1998.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (92 samples, 25.48%)</title><rect x="882.7" y="1971.0" width="300.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="885.7" y="1982.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (92 samples, 25.48%)</title><rect x="882.7" y="1955.0" width="300.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="885.7" y="1966.0">CompileBroker::invoke_compiler_on_method..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (89 samples, 24.65%)</title><rect x="882.7" y="1939.0" width="291.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="885.7" y="1950.0">C2Compiler::compile_method(ciEnv*, ciMe..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (89 samples, 24.65%)</title><rect x="882.7" y="1923.0" width="291.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="885.7" y="1934.0">Compile::Compile(ciEnv*, C2Compiler*, c..</text>
</g>
<g>
<title>Compile::Code_Gen() (38 samples, 10.53%)</title><rect x="882.7" y="1907.0" width="124.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="885.7" y="1918.0">Compile::Code_G..</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.55%)</title><rect x="882.7" y="1891.0" width="6.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="885.7" y="1902.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.28%)</title><rect x="882.7" y="1875.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="885.7" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.28%)</title><rect x="882.7" y="1859.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="885.7" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.28%)</title><rect x="882.7" y="1843.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="885.7" y="1854.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.28%)</title><rect x="886.0" y="1875.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="889.0" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.28%)</title><rect x="886.0" y="1859.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="889.0" y="1870.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 1.11%)</title><rect x="889.3" y="1891.0" width="13.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="892.3" y="1902.0"></text>
</g>
<g>
<title>AddPNode::Opcode() const (1 samples, 0.28%)</title><rect x="889.3" y="1875.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="892.3" y="1886.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.83%)</title><rect x="892.5" y="1875.0" width="9.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="895.5" y="1886.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.28%)</title><rect x="895.8" y="1859.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="898.8" y="1870.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.28%)</title><rect x="899.1" y="1859.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="902.1" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.83%)</title><rect x="902.4" y="1891.0" width="9.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="905.4" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::estimate_block_frequency() (1 samples, 0.28%)</title><rect x="902.4" y="1875.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="905.4" y="1886.0"></text>
</g>
<g>
<title>CFGLoop::compute_freq() (1 samples, 0.28%)</title><rect x="902.4" y="1859.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="905.4" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.55%)</title><rect x="905.6" y="1875.0" width="6.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="908.6" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.28%)</title><rect x="905.6" y="1859.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="908.6" y="1870.0"></text>
</g>
<g>
<title>MachNode::get_base_and_disp(long&amp;, TypePtr const*&amp;) const (1 samples, 0.28%)</title><rect x="905.6" y="1843.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="908.6" y="1854.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.28%)</title><rect x="905.6" y="1827.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="908.6" y="1838.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.28%)</title><rect x="905.6" y="1811.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="908.6" y="1822.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.28%)</title><rect x="905.6" y="1795.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="908.6" y="1806.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.28%)</title><rect x="908.9" y="1859.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="911.9" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (27 samples, 7.48%)</title><rect x="912.2" y="1891.0" width="88.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="915.2" y="1902.0">PhaseChait..</text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.55%)</title><rect x="912.2" y="1875.0" width="6.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="915.2" y="1886.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.55%)</title><rect x="912.2" y="1859.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="915.2" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.28%)</title><rect x="915.4" y="1843.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="918.4" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.55%)</title><rect x="918.7" y="1875.0" width="6.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="921.7" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.28%)</title><rect x="918.7" y="1859.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="921.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.28%)</title><rect x="922.0" y="1859.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="925.0" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.28%)</title><rect x="922.0" y="1843.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="925.0" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 0.83%)</title><rect x="925.2" y="1875.0" width="9.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="928.2" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.28%)</title><rect x="931.8" y="1859.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="934.8" y="1870.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.28%)</title><rect x="931.8" y="1843.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="934.8" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 1.11%)</title><rect x="935.0" y="1875.0" width="13.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="938.0" y="1886.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (2 samples, 0.55%)</title><rect x="935.0" y="1859.0" width="6.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="938.0" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.28%)</title><rect x="941.6" y="1859.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="944.6" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.28%)</title><rect x="944.8" y="1859.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="947.8" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.83%)</title><rect x="948.1" y="1875.0" width="9.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="951.1" y="1886.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.28%)</title><rect x="954.7" y="1859.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="957.7" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.83%)</title><rect x="957.9" y="1875.0" width="9.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="960.9" y="1886.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.28%)</title><rect x="961.2" y="1859.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="964.2" y="1870.0"></text>
</g>
<g>
<title>MachNode::oper_input_base() const (1 samples, 0.28%)</title><rect x="964.5" y="1859.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="967.5" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.28%)</title><rect x="967.7" y="1875.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="970.7" y="1886.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (5 samples, 1.39%)</title><rect x="971.0" y="1875.0" width="16.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="974.0" y="1886.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (5 samples, 1.39%)</title><rect x="971.0" y="1859.0" width="16.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="974.0" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.28%)</title><rect x="971.0" y="1843.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="974.0" y="1854.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (4 samples, 1.11%)</title><rect x="974.3" y="1843.0" width="13.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="977.3" y="1854.0"></text>
</g>
<g>
<title>IndexSet::swap(IndexSet*) (1 samples, 0.28%)</title><rect x="974.3" y="1827.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="977.3" y="1838.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (2 samples, 0.55%)</title><rect x="977.5" y="1827.0" width="6.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="980.5" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.28%)</title><rect x="984.1" y="1827.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="987.1" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.28%)</title><rect x="987.3" y="1875.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="990.3" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.28%)</title><rect x="987.3" y="1859.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="990.3" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.28%)</title><rect x="990.6" y="1875.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="993.6" y="1886.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.55%)</title><rect x="993.9" y="1875.0" width="6.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="996.9" y="1886.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.28%)</title><rect x="997.1" y="1859.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1000.1" y="1870.0"></text>
</g>
<g>
<title>PhasePeephole::do_transform() (1 samples, 0.28%)</title><rect x="1000.4" y="1891.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1003.4" y="1902.0"></text>
</g>
<g>
<title>RethrowExceptionNode::ideal_Opcode() const (1 samples, 0.28%)</title><rect x="1003.7" y="1891.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1006.7" y="1902.0"></text>
</g>
<g>
<title>Compile::Optimize() (46 samples, 12.74%)</title><rect x="1007.0" y="1907.0" width="150.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1010.0" y="1918.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.28%)</title><rect x="1007.0" y="1891.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1010.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.28%)</title><rect x="1010.2" y="1891.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1013.2" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.28%)</title><rect x="1010.2" y="1875.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1013.2" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.28%)</title><rect x="1010.2" y="1859.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1013.2" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="1010.2" y="1843.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1013.2" y="1854.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.28%)</title><rect x="1013.5" y="1891.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1016.5" y="1902.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.28%)</title><rect x="1013.5" y="1875.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1016.5" y="1886.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.28%)</title><rect x="1013.5" y="1859.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1016.5" y="1870.0"></text>
</g>
<g>
<title>TypeOopPtr::singleton() const (1 samples, 0.28%)</title><rect x="1013.5" y="1843.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1016.5" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (38 samples, 10.53%)</title><rect x="1016.8" y="1891.0" width="124.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1019.8" y="1902.0">PhaseIdealLoop:..</text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.28%)</title><rect x="1016.8" y="1875.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1019.8" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.55%)</title><rect x="1020.0" y="1875.0" width="6.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1023.0" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 1.11%)</title><rect x="1026.6" y="1875.0" width="13.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1029.6" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (2 samples, 0.55%)</title><rect x="1033.1" y="1859.0" width="6.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1036.1" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.28%)</title><rect x="1036.4" y="1843.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1039.4" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (29 samples, 8.03%)</title><rect x="1039.6" y="1875.0" width="94.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1042.6" y="1886.0">PhaseIdealL..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (28 samples, 7.76%)</title><rect x="1042.9" y="1859.0" width="91.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1045.9" y="1870.0">PhaseIdealL..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (28 samples, 7.76%)</title><rect x="1042.9" y="1843.0" width="91.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1045.9" y="1854.0">PhaseIdealL..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (6 samples, 1.66%)</title><rect x="1114.8" y="1827.0" width="19.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1117.8" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.55%)</title><rect x="1134.4" y="1875.0" width="6.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1137.4" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.28%)</title><rect x="1137.7" y="1859.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1140.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.28%)</title><rect x="1137.7" y="1843.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1140.7" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 1.39%)</title><rect x="1141.0" y="1891.0" width="16.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1144.0" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 1.39%)</title><rect x="1141.0" y="1875.0" width="16.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1144.0" y="1886.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.28%)</title><rect x="1144.2" y="1859.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1147.2" y="1870.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.28%)</title><rect x="1144.2" y="1843.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1147.2" y="1854.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.28%)</title><rect x="1144.2" y="1827.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1147.2" y="1838.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.28%)</title><rect x="1144.2" y="1811.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1147.2" y="1822.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.28%)</title><rect x="1147.5" y="1859.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1150.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.28%)</title><rect x="1150.8" y="1859.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.8" y="1870.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.28%)</title><rect x="1154.0" y="1859.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.0" y="1870.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.28%)</title><rect x="1154.0" y="1843.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1157.0" y="1854.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.39%)</title><rect x="1157.3" y="1907.0" width="16.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.3" y="1918.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.39%)</title><rect x="1157.3" y="1891.0" width="16.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.3" y="1902.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.39%)</title><rect x="1157.3" y="1875.0" width="16.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1160.3" y="1886.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.39%)</title><rect x="1157.3" y="1859.0" width="16.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.3" y="1870.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.39%)</title><rect x="1157.3" y="1843.0" width="16.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.3" y="1854.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.39%)</title><rect x="1157.3" y="1827.0" width="16.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.3" y="1838.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1157.3" y="1811.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.3" y="1822.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.11%)</title><rect x="1160.6" y="1811.0" width="13.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.6" y="1822.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.11%)</title><rect x="1160.6" y="1795.0" width="13.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.6" y="1806.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.11%)</title><rect x="1160.6" y="1779.0" width="13.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.6" y="1790.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.11%)</title><rect x="1160.6" y="1763.0" width="13.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.6" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.11%)</title><rect x="1160.6" y="1747.0" width="13.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.6" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.11%)</title><rect x="1160.6" y="1731.0" width="13.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.6" y="1742.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1160.6" y="1715.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1163.6" y="1726.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1160.6" y="1699.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.6" y="1710.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1160.6" y="1683.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1163.6" y="1694.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1160.6" y="1667.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.6" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1160.6" y="1651.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.6" y="1662.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1160.6" y="1635.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.6" y="1646.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1160.6" y="1619.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.6" y="1630.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1160.6" y="1603.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.6" y="1614.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1160.6" y="1587.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.6" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1160.6" y="1571.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.6" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1160.6" y="1555.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.6" y="1566.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1160.6" y="1539.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.6" y="1550.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1160.6" y="1523.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1163.6" y="1534.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1160.6" y="1507.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.6" y="1518.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.28%)</title><rect x="1160.6" y="1491.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.6" y="1502.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.28%)</title><rect x="1160.6" y="1475.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.6" y="1486.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.83%)</title><rect x="1163.9" y="1715.0" width="9.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.9" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.83%)</title><rect x="1163.9" y="1699.0" width="9.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.9" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.83%)</title><rect x="1163.9" y="1683.0" width="9.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.9" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.83%)</title><rect x="1163.9" y="1667.0" width="9.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.9" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.83%)</title><rect x="1163.9" y="1651.0" width="9.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.9" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.83%)</title><rect x="1163.9" y="1635.0" width="9.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.9" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.83%)</title><rect x="1163.9" y="1619.0" width="9.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.9" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.55%)</title><rect x="1163.9" y="1603.0" width="6.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.9" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.55%)</title><rect x="1163.9" y="1587.0" width="6.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1166.9" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.55%)</title><rect x="1163.9" y="1571.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.9" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.55%)</title><rect x="1163.9" y="1555.0" width="6.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.9" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.55%)</title><rect x="1163.9" y="1539.0" width="6.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.9" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.55%)</title><rect x="1163.9" y="1523.0" width="6.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.9" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.55%)</title><rect x="1163.9" y="1507.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.9" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.55%)</title><rect x="1163.9" y="1491.0" width="6.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.9" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.55%)</title><rect x="1163.9" y="1475.0" width="6.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.9" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.55%)</title><rect x="1163.9" y="1459.0" width="6.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.9" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.55%)</title><rect x="1163.9" y="1443.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.9" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.55%)</title><rect x="1163.9" y="1427.0" width="6.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1166.9" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.55%)</title><rect x="1163.9" y="1411.0" width="6.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.9" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.55%)</title><rect x="1163.9" y="1395.0" width="6.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.9" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.55%)</title><rect x="1163.9" y="1379.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.9" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.55%)</title><rect x="1163.9" y="1363.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.9" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.55%)</title><rect x="1163.9" y="1347.0" width="6.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.9" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.55%)</title><rect x="1163.9" y="1331.0" width="6.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.9" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1163.9" y="1315.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.9" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1163.9" y="1299.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.9" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1163.9" y="1283.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.9" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1163.9" y="1267.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.9" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1163.9" y="1251.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.9" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1163.9" y="1235.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.9" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1163.9" y="1219.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.9" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1163.9" y="1203.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.9" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1163.9" y="1187.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.9" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1163.9" y="1171.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.9" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1163.9" y="1155.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.9" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1163.9" y="1139.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.9" y="1150.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1163.9" y="1123.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.9" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1163.9" y="1107.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.9" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1163.9" y="1091.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.9" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1163.9" y="1075.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.9" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1163.9" y="1059.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.9" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1163.9" y="1043.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.9" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1163.9" y="1027.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.9" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1163.9" y="1011.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.9" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1163.9" y="995.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.9" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1163.9" y="979.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.9" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1163.9" y="963.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.9" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1163.9" y="947.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.9" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1163.9" y="931.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.9" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1163.9" y="915.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.9" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1163.9" y="899.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.9" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1163.9" y="883.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.9" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1163.9" y="867.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.9" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1163.9" y="851.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.9" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1163.9" y="835.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.9" y="846.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.28%)</title><rect x="1163.9" y="819.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.9" y="830.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.28%)</title><rect x="1163.9" y="803.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.9" y="814.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.28%)</title><rect x="1163.9" y="787.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.9" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.28%)</title><rect x="1163.9" y="771.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.9" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.28%)</title><rect x="1163.9" y="755.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.9" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.28%)</title><rect x="1163.9" y="739.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.9" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.28%)</title><rect x="1163.9" y="723.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.9" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.28%)</title><rect x="1163.9" y="707.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.9" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_putfield(ciBytecodeStream*) (1 samples, 0.28%)</title><rect x="1163.9" y="691.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.9" y="702.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.28%)</title><rect x="1163.9" y="675.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.9" y="686.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.28%)</title><rect x="1163.9" y="659.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.9" y="670.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.28%)</title><rect x="1163.9" y="643.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.9" y="654.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.28%)</title><rect x="1163.9" y="627.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.9" y="638.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.28%)</title><rect x="1163.9" y="611.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.9" y="622.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.28%)</title><rect x="1163.9" y="595.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.9" y="606.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.28%)</title><rect x="1163.9" y="579.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.9" y="590.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1167.1" y="1315.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.1" y="1326.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1167.1" y="1299.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.1" y="1310.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1167.1" y="1283.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.1" y="1294.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1167.1" y="1267.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.1" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1167.1" y="1251.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.1" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1167.1" y="1235.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.1" y="1246.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.28%)</title><rect x="1167.1" y="1219.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.1" y="1230.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.28%)</title><rect x="1167.1" y="1203.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.1" y="1214.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.28%)</title><rect x="1167.1" y="1187.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.1" y="1198.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.28%)</title><rect x="1167.1" y="1171.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.1" y="1182.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.28%)</title><rect x="1167.1" y="1155.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.1" y="1166.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.28%)</title><rect x="1167.1" y="1139.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.1" y="1150.0"></text>
</g>
<g>
<title>BitMap::BitMap(unsigned long*, unsigned long) (1 samples, 0.28%)</title><rect x="1167.1" y="1123.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.1" y="1134.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1170.4" y="1603.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1173.4" y="1614.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1170.4" y="1587.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.4" y="1598.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1170.4" y="1571.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.4" y="1582.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1170.4" y="1555.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.4" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1170.4" y="1539.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.4" y="1550.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1170.4" y="1523.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.4" y="1534.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1170.4" y="1507.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.4" y="1518.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1170.4" y="1491.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.4" y="1502.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1170.4" y="1475.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.4" y="1486.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1170.4" y="1459.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.4" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1170.4" y="1443.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.4" y="1454.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1170.4" y="1427.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1173.4" y="1438.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1170.4" y="1411.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.4" y="1422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1170.4" y="1395.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.4" y="1406.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1170.4" y="1379.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.4" y="1390.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1170.4" y="1363.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1173.4" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1170.4" y="1347.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.4" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1170.4" y="1331.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.4" y="1342.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1170.4" y="1315.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.4" y="1326.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1170.4" y="1299.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.4" y="1310.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.28%)</title><rect x="1170.4" y="1283.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.4" y="1294.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.28%)</title><rect x="1170.4" y="1267.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.4" y="1278.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.28%)</title><rect x="1170.4" y="1251.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.4" y="1262.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.28%)</title><rect x="1170.4" y="1235.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.4" y="1246.0"></text>
</g>
<g>
<title>Node::add_req_batch(Node*, unsigned int) (1 samples, 0.28%)</title><rect x="1170.4" y="1219.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.4" y="1230.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.28%)</title><rect x="1170.4" y="1203.0" width="3.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1173.4" y="1214.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 0.83%)</title><rect x="1173.7" y="1939.0" width="9.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.7" y="1950.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 0.83%)</title><rect x="1173.7" y="1923.0" width="9.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.7" y="1934.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.83%)</title><rect x="1173.7" y="1907.0" width="9.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.7" y="1918.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.55%)</title><rect x="1173.7" y="1891.0" width="6.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.7" y="1902.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.28%)</title><rect x="1173.7" y="1875.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.7" y="1886.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.28%)</title><rect x="1173.7" y="1859.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.7" y="1870.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.28%)</title><rect x="1173.7" y="1843.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.7" y="1854.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.28%)</title><rect x="1173.7" y="1827.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.7" y="1838.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.28%)</title><rect x="1173.7" y="1811.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.7" y="1822.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.28%)</title><rect x="1173.7" y="1795.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.7" y="1806.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.28%)</title><rect x="1173.7" y="1779.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.7" y="1790.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.28%)</title><rect x="1173.7" y="1763.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.7" y="1774.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.28%)</title><rect x="1173.7" y="1747.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.7" y="1758.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.28%)</title><rect x="1173.7" y="1731.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.7" y="1742.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.28%)</title><rect x="1173.7" y="1715.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.7" y="1726.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.28%)</title><rect x="1173.7" y="1699.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.7" y="1710.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.28%)</title><rect x="1173.7" y="1683.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.7" y="1694.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.28%)</title><rect x="1173.7" y="1667.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.7" y="1678.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.28%)</title><rect x="1173.7" y="1651.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.7" y="1662.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.28%)</title><rect x="1173.7" y="1635.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.7" y="1646.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.28%)</title><rect x="1173.7" y="1619.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.7" y="1630.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.28%)</title><rect x="1173.7" y="1603.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.7" y="1614.0"></text>
</g>
<g>
<title>Dependencies::check_evol_method(Method*) (1 samples, 0.28%)</title><rect x="1173.7" y="1587.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.7" y="1598.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.28%)</title><rect x="1176.9" y="1875.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.9" y="1886.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.28%)</title><rect x="1176.9" y="1859.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.9" y="1870.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.28%)</title><rect x="1176.9" y="1843.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.9" y="1854.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.28%)</title><rect x="1176.9" y="1827.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.9" y="1838.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (1 samples, 0.28%)</title><rect x="1176.9" y="1811.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.9" y="1822.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.28%)</title><rect x="1180.2" y="1891.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.2" y="1902.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.28%)</title><rect x="1180.2" y="1875.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.2" y="1886.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.28%)</title><rect x="1180.2" y="1859.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.2" y="1870.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.28%)</title><rect x="1180.2" y="1843.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.2" y="1854.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.28%)</title><rect x="1180.2" y="1827.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.2" y="1838.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.28%)</title><rect x="1183.5" y="2003.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.5" y="2014.0"></text>
</g>
<g>
<title>StatSamplerTask::task() (1 samples, 0.28%)</title><rect x="1183.5" y="1987.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.5" y="1998.0"></text>
</g>
<g>
<title>sysmalloc (1 samples, 0.28%)</title><rect x="1186.7" y="2035.0" width="3.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1189.7" y="2046.0"></text>
</g>
</g>
</svg>
