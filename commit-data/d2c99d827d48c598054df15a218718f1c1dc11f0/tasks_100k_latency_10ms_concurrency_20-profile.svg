<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1382" onload="init(evt)" viewBox="0 0 1200 1382" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1365"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1365"> </text>
<g id="frames">
<g>
<title>all (347 samples, 100.00%)</title><rect x="10.0" y="1331.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1342.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (25 samples, 7.20%)</title><rect x="10.0" y="1315.0" width="85.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1326.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (25 samples, 7.20%)</title><rect x="10.0" y="1299.0" width="85.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1310.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (1 samples, 0.29%)</title><rect x="10.0" y="1283.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (1 samples, 0.29%)</title><rect x="10.0" y="1267.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.29%)</title><rect x="10.0" y="1251.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$271/1858625419.accept (1 samples, 0.29%)</title><rect x="10.0" y="1235.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (1 samples, 0.29%)</title><rect x="10.0" y="1219.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.29%)</title><rect x="10.0" y="1203.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.29%)</title><rect x="10.0" y="1187.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (6 samples, 1.73%)</title><rect x="13.4" y="1283.0" width="20.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.4" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$266/1036146590.accept (5 samples, 1.44%)</title><rect x="13.4" y="1267.0" width="17.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.4" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (5 samples, 1.44%)</title><rect x="13.4" y="1251.0" width="17.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.4" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (4 samples, 1.15%)</title><rect x="13.4" y="1235.0" width="13.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.4" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (4 samples, 1.15%)</title><rect x="13.4" y="1219.0" width="13.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.4" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (4 samples, 1.15%)</title><rect x="13.4" y="1203.0" width="13.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.4" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (4 samples, 1.15%)</title><rect x="13.4" y="1187.0" width="13.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.4" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (4 samples, 1.15%)</title><rect x="13.4" y="1171.0" width="13.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.4" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (4 samples, 1.15%)</title><rect x="13.4" y="1155.0" width="13.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.4" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (1 samples, 0.29%)</title><rect x="27.0" y="1235.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="30.0" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.29%)</title><rect x="27.0" y="1219.0" width="3.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="30.0" y="1230.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.29%)</title><rect x="27.0" y="1203.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="30.0" y="1214.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.29%)</title><rect x="27.0" y="1187.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="30.0" y="1198.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.29%)</title><rect x="27.0" y="1171.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="30.0" y="1182.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.29%)</title><rect x="27.0" y="1155.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="30.0" y="1166.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.29%)</title><rect x="27.0" y="1139.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="30.0" y="1150.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.29%)</title><rect x="27.0" y="1123.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="30.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.29%)</title><rect x="30.4" y="1267.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="33.4" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.29%)</title><rect x="30.4" y="1251.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="33.4" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.29%)</title><rect x="30.4" y="1235.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="33.4" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.29%)</title><rect x="30.4" y="1219.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="33.4" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.29%)</title><rect x="30.4" y="1203.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="33.4" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.29%)</title><rect x="30.4" y="1187.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="33.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (18 samples, 5.19%)</title><rect x="33.8" y="1283.0" width="61.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="36.8" y="1294.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (18 samples, 5.19%)</title><rect x="33.8" y="1267.0" width="61.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="36.8" y="1278.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (7 samples, 2.02%)</title><rect x="33.8" y="1251.0" width="23.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="36.8" y="1262.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.29%)</title><rect x="33.8" y="1235.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="36.8" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.29%)</title><rect x="33.8" y="1219.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="36.8" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.29%)</title><rect x="33.8" y="1203.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="36.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.29%)</title><rect x="33.8" y="1187.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="36.8" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.29%)</title><rect x="33.8" y="1171.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="36.8" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.29%)</title><rect x="33.8" y="1155.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="36.8" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.29%)</title><rect x="33.8" y="1139.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="36.8" y="1150.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.29%)</title><rect x="33.8" y="1123.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="36.8" y="1134.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.29%)</title><rect x="33.8" y="1107.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="36.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (5 samples, 1.44%)</title><rect x="37.2" y="1235.0" width="17.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="40.2" y="1246.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.add (1 samples, 0.29%)</title><rect x="37.2" y="1219.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="40.2" y="1230.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.addLast (1 samples, 0.29%)</title><rect x="37.2" y="1203.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="40.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 1.15%)</title><rect x="40.6" y="1219.0" width="13.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="43.6" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 0.86%)</title><rect x="40.6" y="1203.0" width="10.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="43.6" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 0.86%)</title><rect x="40.6" y="1187.0" width="10.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="43.6" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.58%)</title><rect x="40.6" y="1171.0" width="6.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="43.6" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.29%)</title><rect x="47.4" y="1171.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="50.4" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.29%)</title><rect x="47.4" y="1155.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="50.4" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.29%)</title><rect x="47.4" y="1139.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="50.4" y="1150.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.29%)</title><rect x="47.4" y="1123.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="50.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.29%)</title><rect x="50.8" y="1203.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="53.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.29%)</title><rect x="50.8" y="1187.0" width="3.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="53.8" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.29%)</title><rect x="50.8" y="1171.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="53.8" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.29%)</title><rect x="50.8" y="1155.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="53.8" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.29%)</title><rect x="54.2" y="1235.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="57.2" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$100 (1 samples, 0.29%)</title><rect x="54.2" y="1219.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="57.2" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.maybeUpdateAssignment (1 samples, 0.29%)</title><rect x="54.2" y="1203.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="57.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignmentId (1 samples, 0.29%)</title><rect x="54.2" y="1187.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="57.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (3 samples, 0.86%)</title><rect x="57.6" y="1251.0" width="10.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="60.6" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (3 samples, 0.86%)</title><rect x="57.6" y="1235.0" width="10.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="60.6" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.58%)</title><rect x="57.6" y="1219.0" width="6.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="60.6" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.29%)</title><rect x="57.6" y="1203.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="60.6" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.29%)</title><rect x="57.6" y="1187.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="60.6" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.29%)</title><rect x="57.6" y="1171.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="60.6" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.29%)</title><rect x="57.6" y="1155.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="60.6" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.29%)</title><rect x="57.6" y="1139.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="60.6" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.29%)</title><rect x="57.6" y="1123.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="60.6" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.29%)</title><rect x="61.0" y="1203.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="64.0" y="1214.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.29%)</title><rect x="61.0" y="1187.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="64.0" y="1198.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.29%)</title><rect x="61.0" y="1171.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="64.0" y="1182.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.29%)</title><rect x="61.0" y="1155.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="64.0" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.29%)</title><rect x="61.0" y="1139.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="64.0" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.29%)</title><rect x="61.0" y="1123.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="64.0" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.29%)</title><rect x="61.0" y="1107.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="64.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.29%)</title><rect x="64.4" y="1219.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="67.4" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.29%)</title><rect x="64.4" y="1203.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="67.4" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.29%)</title><rect x="64.4" y="1187.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="67.4" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.29%)</title><rect x="64.4" y="1171.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="67.4" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.29%)</title><rect x="64.4" y="1155.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="67.4" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.29%)</title><rect x="64.4" y="1139.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="67.4" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.29%)</title><rect x="64.4" y="1123.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="67.4" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.29%)</title><rect x="64.4" y="1107.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="67.4" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.29%)</title><rect x="64.4" y="1091.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="67.4" y="1102.0"></text>
</g>
<g>
<title>InlineCacheBuffer (1 samples, 0.29%)</title><rect x="64.4" y="1075.0" width="3.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="67.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.29%)</title><rect x="67.8" y="1251.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="70.8" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 0.86%)</title><rect x="71.2" y="1251.0" width="10.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="74.2" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.58%)</title><rect x="71.2" y="1235.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="74.2" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.58%)</title><rect x="71.2" y="1219.0" width="6.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="74.2" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.58%)</title><rect x="71.2" y="1203.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="74.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.58%)</title><rect x="71.2" y="1187.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="74.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToStagedReceives (1 samples, 0.29%)</title><rect x="71.2" y="1171.0" width="3.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="74.2" y="1182.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.add (1 samples, 0.29%)</title><rect x="71.2" y="1155.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="74.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.hasStagedReceive (1 samples, 0.29%)</title><rect x="74.6" y="1171.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="77.6" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.29%)</title><rect x="74.6" y="1155.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="77.6" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.29%)</title><rect x="74.6" y="1139.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="77.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.29%)</title><rect x="78.0" y="1235.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="81.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.29%)</title><rect x="78.0" y="1219.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="81.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.29%)</title><rect x="78.0" y="1203.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="81.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.29%)</title><rect x="78.0" y="1187.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="81.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.29%)</title><rect x="78.0" y="1171.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="81.0" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.29%)</title><rect x="78.0" y="1155.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="81.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.29%)</title><rect x="78.0" y="1139.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="81.0" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.29%)</title><rect x="78.0" y="1123.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="81.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.29%)</title><rect x="78.0" y="1107.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="81.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$3.validate (1 samples, 0.29%)</title><rect x="78.0" y="1091.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="81.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (2 samples, 0.58%)</title><rect x="81.4" y="1251.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="84.4" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.58%)</title><rect x="81.4" y="1235.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="84.4" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.29%)</title><rect x="84.8" y="1219.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="87.8" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.29%)</title><rect x="84.8" y="1203.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="87.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.29%)</title><rect x="84.8" y="1187.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="87.8" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (2 samples, 0.58%)</title><rect x="88.2" y="1251.0" width="6.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="91.2" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.58%)</title><rect x="88.2" y="1235.0" width="6.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="91.2" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.58%)</title><rect x="88.2" y="1219.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="91.2" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.58%)</title><rect x="88.2" y="1203.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="91.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.29%)</title><rect x="91.6" y="1187.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="94.6" y="1198.0"></text>
</g>
<g>
<title>java/lang/Thread.run (209 samples, 60.23%)</title><rect x="95.0" y="1315.0" width="710.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="98.0" y="1326.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (209 samples, 60.23%)</title><rect x="95.0" y="1299.0" width="710.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="98.0" y="1310.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (209 samples, 60.23%)</title><rect x="95.0" y="1283.0" width="710.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="98.0" y="1294.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$286/747411722.run (196 samples, 56.48%)</title><rect x="95.0" y="1267.0" width="666.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="98.0" y="1278.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$286/747411722.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$71 (196 samples, 56.48%)</title><rect x="95.0" y="1251.0" width="666.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="98.0" y="1262.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$71</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (196 samples, 56.48%)</title><rect x="95.0" y="1235.0" width="666.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="98.0" y="1246.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (190 samples, 54.76%)</title><rect x="95.0" y="1219.0" width="646.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="98.0" y="1230.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (50 samples, 14.41%)</title><rect x="108.6" y="1203.0" width="170.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="111.6" y="1214.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$43/416153648.extract (50 samples, 14.41%)</title><rect x="108.6" y="1187.0" width="170.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="111.6" y="1198.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (50 samples, 14.41%)</title><rect x="108.6" y="1171.0" width="170.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="111.6" y="1182.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (50 samples, 14.41%)</title><rect x="108.6" y="1155.0" width="170.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="111.6" y="1166.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (50 samples, 14.41%)</title><rect x="108.6" y="1139.0" width="170.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="111.6" y="1150.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (50 samples, 14.41%)</title><rect x="108.6" y="1123.0" width="170.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="111.6" y="1134.0">com/fasterxml/jackson/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (16 samples, 4.61%)</title><rect x="108.6" y="1107.0" width="54.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="111.6" y="1118.0">com/f..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.58%)</title><rect x="122.2" y="1091.0" width="6.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="125.2" y="1102.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.58%)</title><rect x="122.2" y="1075.0" width="6.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="125.2" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (3 samples, 0.86%)</title><rect x="129.0" y="1091.0" width="10.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="132.0" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (3 samples, 0.86%)</title><rect x="129.0" y="1075.0" width="10.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="132.0" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (3 samples, 0.86%)</title><rect x="129.0" y="1059.0" width="10.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="132.0" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.58%)</title><rect x="129.0" y="1043.0" width="6.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="132.0" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.58%)</title><rect x="129.0" y="1027.0" width="6.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="132.0" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.58%)</title><rect x="129.0" y="1011.0" width="6.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="132.0" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.58%)</title><rect x="129.0" y="995.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="132.0" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.29%)</title><rect x="135.8" y="1043.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="138.8" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.29%)</title><rect x="135.8" y="1027.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="138.8" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.29%)</title><rect x="135.8" y="1011.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="138.8" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.29%)</title><rect x="135.8" y="995.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="138.8" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.29%)</title><rect x="135.8" y="979.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="138.8" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.29%)</title><rect x="135.8" y="963.0" width="3.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="138.8" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.29%)</title><rect x="135.8" y="947.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="138.8" y="958.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.29%)</title><rect x="135.8" y="931.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="138.8" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.29%)</title><rect x="135.8" y="915.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="138.8" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (7 samples, 2.02%)</title><rect x="139.2" y="1091.0" width="23.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="142.2" y="1102.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (7 samples, 2.02%)</title><rect x="139.2" y="1075.0" width="23.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="142.2" y="1086.0">c..</text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.29%)</title><rect x="156.2" y="1059.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="159.2" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.29%)</title><rect x="159.6" y="1059.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="162.6" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.29%)</title><rect x="159.6" y="1043.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="162.6" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.29%)</title><rect x="159.6" y="1027.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="162.6" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.29%)</title><rect x="159.6" y="1011.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="162.6" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.29%)</title><rect x="159.6" y="995.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="162.6" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.29%)</title><rect x="159.6" y="979.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="162.6" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.29%)</title><rect x="159.6" y="963.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="162.6" y="974.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.29%)</title><rect x="159.6" y="947.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="162.6" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.29%)</title><rect x="159.6" y="931.0" width="3.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="162.6" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (33 samples, 9.51%)</title><rect x="163.0" y="1107.0" width="112.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="166.0" y="1118.0">com/fasterxml/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.29%)</title><rect x="163.0" y="1091.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="166.0" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (2 samples, 0.58%)</title><rect x="166.4" y="1091.0" width="6.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="169.4" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (3 samples, 0.86%)</title><rect x="173.2" y="1091.0" width="10.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="176.2" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.86%)</title><rect x="173.2" y="1075.0" width="10.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="176.2" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.58%)</title><rect x="183.4" y="1091.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="186.4" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.29%)</title><rect x="186.8" y="1075.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="189.8" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.58%)</title><rect x="190.2" y="1091.0" width="6.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="193.2" y="1102.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.29%)</title><rect x="190.2" y="1075.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="193.2" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.29%)</title><rect x="190.2" y="1059.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="193.2" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.29%)</title><rect x="190.2" y="1043.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="193.2" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.29%)</title><rect x="190.2" y="1027.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="193.2" y="1038.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.29%)</title><rect x="190.2" y="1011.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="193.2" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.29%)</title><rect x="193.6" y="1075.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="196.6" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (23 samples, 6.63%)</title><rect x="197.0" y="1091.0" width="78.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="200.0" y="1102.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.15%)</title><rect x="197.0" y="1075.0" width="13.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="200.0" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.29%)</title><rect x="197.0" y="1059.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="200.0" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.29%)</title><rect x="197.0" y="1043.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="200.0" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.29%)</title><rect x="197.0" y="1027.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="200.0" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.29%)</title><rect x="197.0" y="1011.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="200.0" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.29%)</title><rect x="197.0" y="995.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="200.0" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.58%)</title><rect x="200.4" y="1059.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="203.4" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (2 samples, 0.58%)</title><rect x="200.4" y="1043.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="203.4" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (2 samples, 0.58%)</title><rect x="200.4" y="1027.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="203.4" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.29%)</title><rect x="203.8" y="1011.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="206.8" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (1 samples, 0.29%)</title><rect x="203.8" y="995.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="206.8" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.29%)</title><rect x="207.2" y="1059.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="210.2" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.29%)</title><rect x="207.2" y="1043.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="210.2" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.29%)</title><rect x="210.6" y="1075.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="213.6" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (18 samples, 5.19%)</title><rect x="214.0" y="1075.0" width="61.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="217.0" y="1086.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (18 samples, 5.19%)</title><rect x="214.0" y="1059.0" width="61.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="217.0" y="1070.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (18 samples, 5.19%)</title><rect x="214.0" y="1043.0" width="61.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="217.0" y="1054.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (7 samples, 2.02%)</title><rect x="217.4" y="1027.0" width="23.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="220.4" y="1038.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.29%)</title><rect x="217.4" y="1011.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="220.4" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.58%)</title><rect x="220.8" y="1011.0" width="6.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="223.8" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.58%)</title><rect x="227.6" y="1011.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="230.6" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.58%)</title><rect x="227.6" y="995.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="230.6" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.58%)</title><rect x="227.6" y="979.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="230.6" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.29%)</title><rect x="227.6" y="963.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="230.6" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.29%)</title><rect x="231.0" y="963.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="234.0" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.58%)</title><rect x="234.4" y="1011.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="237.4" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (4 samples, 1.15%)</title><rect x="241.2" y="1027.0" width="13.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="244.2" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 0.86%)</title><rect x="244.6" y="1011.0" width="10.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="247.6" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.86%)</title><rect x="244.6" y="995.0" width="10.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="247.6" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.86%)</title><rect x="244.6" y="979.0" width="10.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="247.6" y="990.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 0.86%)</title><rect x="244.6" y="963.0" width="10.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="247.6" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.58%)</title><rect x="254.8" y="1027.0" width="6.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="257.8" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.58%)</title><rect x="254.8" y="1011.0" width="6.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="257.8" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.58%)</title><rect x="254.8" y="995.0" width="6.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="257.8" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (4 samples, 1.15%)</title><rect x="261.6" y="1027.0" width="13.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="264.6" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.29%)</title><rect x="275.2" y="1107.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="278.2" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.29%)</title><rect x="275.2" y="1091.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="278.2" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (126 samples, 36.31%)</title><rect x="278.6" y="1203.0" width="428.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="281.6" y="1214.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipe..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (20 samples, 5.76%)</title><rect x="278.6" y="1187.0" width="68.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="281.6" y="1198.0">com/lin..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (16 samples, 4.61%)</title><rect x="292.2" y="1171.0" width="54.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="295.2" y="1182.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (13 samples, 3.75%)</title><rect x="302.4" y="1155.0" width="44.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="305.4" y="1166.0">ch/q..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (12 samples, 3.46%)</title><rect x="305.9" y="1139.0" width="40.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="308.9" y="1150.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (8 samples, 2.31%)</title><rect x="319.5" y="1123.0" width="27.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="322.5" y="1134.0">j..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (8 samples, 2.31%)</title><rect x="319.5" y="1107.0" width="27.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="322.5" y="1118.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.29%)</title><rect x="346.7" y="1187.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="349.7" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (21 samples, 6.05%)</title><rect x="350.1" y="1187.0" width="71.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="353.1" y="1198.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (19 samples, 5.48%)</title><rect x="350.1" y="1171.0" width="64.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="353.1" y="1182.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (11 samples, 3.17%)</title><rect x="360.3" y="1155.0" width="37.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="363.3" y="1166.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 1.44%)</title><rect x="380.7" y="1139.0" width="17.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="383.7" y="1150.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 1.44%)</title><rect x="380.7" y="1123.0" width="17.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="383.7" y="1134.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 0.86%)</title><rect x="384.1" y="1107.0" width="10.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="387.1" y="1118.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (3 samples, 0.86%)</title><rect x="384.1" y="1091.0" width="10.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="387.1" y="1102.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.86%)</title><rect x="384.1" y="1075.0" width="10.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="387.1" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.86%)</title><rect x="384.1" y="1059.0" width="10.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="387.1" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.58%)</title><rect x="384.1" y="1043.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="387.1" y="1054.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.58%)</title><rect x="384.1" y="1027.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="387.1" y="1038.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.58%)</title><rect x="384.1" y="1011.0" width="6.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="387.1" y="1022.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.29%)</title><rect x="384.1" y="995.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="387.1" y="1006.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.29%)</title><rect x="384.1" y="979.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="387.1" y="990.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.29%)</title><rect x="387.5" y="995.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="390.5" y="1006.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.29%)</title><rect x="390.9" y="1043.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="393.9" y="1054.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.29%)</title><rect x="394.3" y="1107.0" width="3.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="397.3" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.29%)</title><rect x="397.7" y="1155.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="400.7" y="1166.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.29%)</title><rect x="397.7" y="1139.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="400.7" y="1150.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.29%)</title><rect x="397.7" y="1123.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="400.7" y="1134.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (4 samples, 1.15%)</title><rect x="401.1" y="1155.0" width="13.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="404.1" y="1166.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (4 samples, 1.15%)</title><rect x="401.1" y="1139.0" width="13.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="404.1" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (4 samples, 1.15%)</title><rect x="401.1" y="1123.0" width="13.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="404.1" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 1.15%)</title><rect x="401.1" y="1107.0" width="13.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="404.1" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.58%)</title><rect x="407.9" y="1091.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="410.9" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.29%)</title><rect x="407.9" y="1075.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="410.9" y="1086.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.29%)</title><rect x="411.3" y="1075.0" width="3.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="414.3" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (2 samples, 0.58%)</title><rect x="414.7" y="1171.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="417.7" y="1182.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (2 samples, 0.58%)</title><rect x="414.7" y="1155.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="417.7" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.58%)</title><rect x="414.7" y="1139.0" width="6.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="417.7" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.58%)</title><rect x="414.7" y="1123.0" width="6.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="417.7" y="1134.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.29%)</title><rect x="414.7" y="1107.0" width="3.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="417.7" y="1118.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.29%)</title><rect x="414.7" y="1091.0" width="3.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="417.7" y="1102.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.29%)</title><rect x="418.1" y="1107.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="421.1" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (77 samples, 22.19%)</title><rect x="421.5" y="1187.0" width="261.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="424.5" y="1198.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (77 samples, 22.19%)</title><rect x="421.5" y="1171.0" width="261.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="424.5" y="1182.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$208/1399142726.process (62 samples, 17.87%)</title><rect x="428.3" y="1155.0" width="210.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="431.3" y="1166.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (62 samples, 17.87%)</title><rect x="428.3" y="1139.0" width="210.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="431.3" y="1150.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (61 samples, 17.58%)</title><rect x="431.7" y="1123.0" width="207.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="434.7" y="1134.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.29%)</title><rect x="431.7" y="1107.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="434.7" y="1118.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.29%)</title><rect x="431.7" y="1091.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="434.7" y="1102.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.29%)</title><rect x="431.7" y="1075.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="434.7" y="1086.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.29%)</title><rect x="431.7" y="1059.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="434.7" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.29%)</title><rect x="431.7" y="1043.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="434.7" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.29%)</title><rect x="431.7" y="1027.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="434.7" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (58 samples, 16.71%)</title><rect x="435.1" y="1107.0" width="197.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="438.1" y="1118.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>java/lang/Thread.sleep (57 samples, 16.43%)</title><rect x="435.1" y="1091.0" width="193.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="438.1" y="1102.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (48 samples, 13.83%)</title><rect x="462.3" y="1075.0" width="163.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="465.3" y="1086.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.58%)</title><rect x="472.5" y="1059.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="475.5" y="1070.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.29%)</title><rect x="479.3" y="1059.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="482.3" y="1070.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.29%)</title><rect x="482.7" y="1059.0" width="3.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="485.7" y="1070.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 1.44%)</title><rect x="486.1" y="1059.0" width="17.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="489.1" y="1070.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.86%)</title><rect x="492.9" y="1043.0" width="10.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="495.9" y="1054.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.58%)</title><rect x="503.1" y="1059.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="506.1" y="1070.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (34 samples, 9.80%)</title><rect x="509.9" y="1059.0" width="115.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="512.9" y="1070.0">os::sleep(Thre..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.29%)</title><rect x="516.7" y="1043.0" width="3.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="519.7" y="1054.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.29%)</title><rect x="516.7" y="1027.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="519.7" y="1038.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.58%)</title><rect x="520.1" y="1043.0" width="6.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="523.1" y="1054.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.58%)</title><rect x="520.1" y="1027.0" width="6.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="523.1" y="1038.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 1.15%)</title><rect x="526.9" y="1043.0" width="13.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="529.9" y="1054.0"></text>
</g>
<g>
<title>__pthread_cond_init (3 samples, 0.86%)</title><rect x="540.5" y="1043.0" width="10.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="543.5" y="1054.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (13 samples, 3.75%)</title><rect x="550.7" y="1043.0" width="44.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="553.7" y="1054.0">__pt..</text>
</g>
<g>
<title>_init (1 samples, 0.29%)</title><rect x="594.9" y="1043.0" width="3.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="597.9" y="1054.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (7 samples, 2.02%)</title><rect x="598.3" y="1043.0" width="23.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="601.3" y="1054.0">o..</text>
</g>
<g>
<title>pthread_cond_destroy@@GLIBC_2.3.2 (1 samples, 0.29%)</title><rect x="622.1" y="1043.0" width="3.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="625.1" y="1054.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.29%)</title><rect x="625.5" y="1075.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="628.5" y="1086.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.29%)</title><rect x="628.9" y="1091.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="631.9" y="1102.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.29%)</title><rect x="628.9" y="1075.0" width="3.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="631.9" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.58%)</title><rect x="632.3" y="1107.0" width="6.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="635.3" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.58%)</title><rect x="632.3" y="1091.0" width="6.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="635.3" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.58%)</title><rect x="632.3" y="1075.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="635.3" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.58%)</title><rect x="632.3" y="1059.0" width="6.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="635.3" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (4 samples, 1.15%)</title><rect x="639.1" y="1155.0" width="13.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="642.1" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.58%)</title><rect x="652.7" y="1155.0" width="6.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="655.7" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.58%)</title><rect x="652.7" y="1139.0" width="6.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="655.7" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.29%)</title><rect x="659.5" y="1155.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="662.5" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.29%)</title><rect x="659.5" y="1139.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="662.5" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.29%)</title><rect x="662.9" y="1155.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="665.9" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.29%)</title><rect x="662.9" y="1139.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="665.9" y="1150.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.29%)</title><rect x="662.9" y="1123.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="665.9" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.58%)</title><rect x="666.3" y="1155.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="669.3" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.58%)</title><rect x="666.3" y="1139.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="669.3" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.58%)</title><rect x="673.1" y="1155.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="676.1" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.29%)</title><rect x="679.9" y="1155.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="682.9" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.29%)</title><rect x="683.3" y="1187.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="686.3" y="1198.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.29%)</title><rect x="683.3" y="1171.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="686.3" y="1182.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.29%)</title><rect x="683.3" y="1155.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="686.3" y="1166.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.29%)</title><rect x="683.3" y="1139.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="686.3" y="1150.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.29%)</title><rect x="683.3" y="1123.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="686.3" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.29%)</title><rect x="683.3" y="1107.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="686.3" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.29%)</title><rect x="683.3" y="1091.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="686.3" y="1102.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.29%)</title><rect x="683.3" y="1075.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="686.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 1.73%)</title><rect x="686.7" y="1187.0" width="20.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="689.7" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 1.73%)</title><rect x="686.7" y="1171.0" width="20.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="689.7" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.29%)</title><rect x="703.7" y="1155.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="706.7" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$295/73055166.accept (1 samples, 0.29%)</title><rect x="703.7" y="1139.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="706.7" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$63 (1 samples, 0.29%)</title><rect x="703.7" y="1123.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="706.7" y="1134.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.29%)</title><rect x="703.7" y="1107.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="706.7" y="1118.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.29%)</title><rect x="703.7" y="1091.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="706.7" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (9 samples, 2.59%)</title><rect x="707.1" y="1203.0" width="30.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="710.1" y="1214.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (9 samples, 2.59%)</title><rect x="707.1" y="1187.0" width="30.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="710.1" y="1198.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (9 samples, 2.59%)</title><rect x="707.1" y="1171.0" width="30.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="710.1" y="1182.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$295/73055166.accept (1 samples, 0.29%)</title><rect x="707.1" y="1155.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="710.1" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$63 (1 samples, 0.29%)</title><rect x="707.1" y="1139.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="710.1" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.29%)</title><rect x="707.1" y="1123.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="710.1" y="1134.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.29%)</title><rect x="707.1" y="1107.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="710.1" y="1118.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.29%)</title><rect x="707.1" y="1091.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="710.1" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$296/1008327324.accept (8 samples, 2.31%)</title><rect x="710.5" y="1155.0" width="27.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="713.5" y="1166.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$62 (8 samples, 2.31%)</title><rect x="710.5" y="1139.0" width="27.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="713.5" y="1150.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$284/1671330511.complete (8 samples, 2.31%)</title><rect x="710.5" y="1123.0" width="27.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="713.5" y="1134.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$39 (8 samples, 2.31%)</title><rect x="710.5" y="1107.0" width="27.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="713.5" y="1118.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$283/1929224699.complete (8 samples, 2.31%)</title><rect x="710.5" y="1091.0" width="27.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="713.5" y="1102.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$69 (8 samples, 2.31%)</title><rect x="710.5" y="1075.0" width="27.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="713.5" y="1086.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (8 samples, 2.31%)</title><rect x="710.5" y="1059.0" width="27.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="713.5" y="1070.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (8 samples, 2.31%)</title><rect x="710.5" y="1043.0" width="27.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="713.5" y="1054.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (8 samples, 2.31%)</title><rect x="710.5" y="1027.0" width="27.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="713.5" y="1038.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (8 samples, 2.31%)</title><rect x="710.5" y="1011.0" width="27.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="713.5" y="1022.0">c..</text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.29%)</title><rect x="737.7" y="1203.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="740.7" y="1214.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.29%)</title><rect x="737.7" y="1187.0" width="3.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="740.7" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (6 samples, 1.73%)</title><rect x="741.1" y="1219.0" width="20.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="744.1" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.29%)</title><rect x="761.5" y="1267.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="764.5" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.29%)</title><rect x="761.5" y="1251.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="764.5" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.29%)</title><rect x="761.5" y="1235.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="764.5" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.29%)</title><rect x="761.5" y="1219.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="764.5" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (12 samples, 3.46%)</title><rect x="764.9" y="1267.0" width="40.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="767.9" y="1278.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (10 samples, 2.88%)</title><rect x="771.7" y="1251.0" width="34.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="774.7" y="1262.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (9 samples, 2.59%)</title><rect x="775.1" y="1235.0" width="30.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="778.1" y="1246.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 2.59%)</title><rect x="775.1" y="1219.0" width="30.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="778.1" y="1230.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 2.59%)</title><rect x="775.1" y="1203.0" width="30.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="778.1" y="1214.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 2.59%)</title><rect x="775.1" y="1187.0" width="30.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="778.1" y="1198.0">ja..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.58%)</title><rect x="805.7" y="1315.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="808.7" y="1326.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.29%)</title><rect x="809.1" y="1299.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="812.1" y="1310.0"></text>
</g>
<g>
<title>JVM_MonitorWait (1 samples, 0.29%)</title><rect x="809.1" y="1283.0" width="3.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="812.1" y="1294.0"></text>
</g>
<g>
<title>ObjectMonitor::wait(long, bool, Thread*) (1 samples, 0.29%)</title><rect x="809.1" y="1267.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="812.1" y="1278.0"></text>
</g>
<g>
<title>start_thread (111 samples, 31.99%)</title><rect x="812.5" y="1315.0" width="377.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="815.5" y="1326.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (111 samples, 31.99%)</title><rect x="812.5" y="1299.0" width="377.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="815.5" y="1310.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (5 samples, 1.44%)</title><rect x="812.5" y="1283.0" width="17.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="815.5" y="1294.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (5 samples, 1.44%)</title><rect x="812.5" y="1267.0" width="17.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="815.5" y="1278.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 1.44%)</title><rect x="812.5" y="1251.0" width="17.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="815.5" y="1262.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (4 samples, 1.15%)</title><rect x="815.9" y="1235.0" width="13.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="818.9" y="1246.0"></text>
</g>
<g>
<title>G1DefaultParGCAllocator::alloc_buffer(InCSetState, unsigned char) (1 samples, 0.29%)</title><rect x="819.3" y="1219.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="822.3" y="1230.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.58%)</title><rect x="822.7" y="1219.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="825.7" y="1230.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.29%)</title><rect x="826.1" y="1203.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="829.1" y="1214.0"></text>
</g>
<g>
<title>JavaThread::run() (105 samples, 30.26%)</title><rect x="829.5" y="1283.0" width="357.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="832.5" y="1294.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (105 samples, 30.26%)</title><rect x="829.5" y="1267.0" width="357.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="832.5" y="1278.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (105 samples, 30.26%)</title><rect x="829.5" y="1251.0" width="357.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="832.5" y="1262.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (104 samples, 29.97%)</title><rect x="829.5" y="1235.0" width="353.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="832.5" y="1246.0">CompileBroker::invoke_compiler_on_method(Compile..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (99 samples, 28.53%)</title><rect x="829.5" y="1219.0" width="336.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="832.5" y="1230.0">C2Compiler::compile_method(ciEnv*, ciMethod*, ..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (99 samples, 28.53%)</title><rect x="829.5" y="1203.0" width="336.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="832.5" y="1214.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod..</text>
</g>
<g>
<title>Compile::Code_Gen() (44 samples, 12.68%)</title><rect x="829.5" y="1187.0" width="149.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="832.5" y="1198.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.29%)</title><rect x="829.5" y="1171.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="832.5" y="1182.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.29%)</title><rect x="829.5" y="1155.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="832.5" y="1166.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.29%)</title><rect x="829.5" y="1139.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="832.5" y="1150.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.86%)</title><rect x="832.9" y="1171.0" width="10.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="835.9" y="1182.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.29%)</title><rect x="832.9" y="1155.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="835.9" y="1166.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.29%)</title><rect x="832.9" y="1139.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="835.9" y="1150.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.29%)</title><rect x="832.9" y="1123.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="835.9" y="1134.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.58%)</title><rect x="836.3" y="1155.0" width="6.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="839.3" y="1166.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.58%)</title><rect x="836.3" y="1139.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="839.3" y="1150.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.29%)</title><rect x="843.1" y="1171.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="846.1" y="1182.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 1.15%)</title><rect x="846.5" y="1171.0" width="13.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="849.5" y="1182.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 1.15%)</title><rect x="846.5" y="1155.0" width="13.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="849.5" y="1166.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (4 samples, 1.15%)</title><rect x="846.5" y="1139.0" width="13.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="849.5" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 1.15%)</title><rect x="860.1" y="1171.0" width="13.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="863.1" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 1.15%)</title><rect x="860.1" y="1155.0" width="13.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="863.1" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.29%)</title><rect x="860.1" y="1139.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="863.1" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (2 samples, 0.58%)</title><rect x="863.5" y="1139.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="866.5" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (2 samples, 0.58%)</title><rect x="863.5" y="1123.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="866.5" y="1134.0"></text>
</g>
<g>
<title>MachCallNode::bottom_type() const (1 samples, 0.29%)</title><rect x="866.9" y="1107.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="869.9" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.29%)</title><rect x="870.3" y="1139.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="873.3" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (31 samples, 8.93%)</title><rect x="873.7" y="1171.0" width="105.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="876.7" y="1182.0">PhaseChaitin:..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.29%)</title><rect x="873.7" y="1155.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="876.7" y="1166.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.29%)</title><rect x="877.1" y="1155.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="880.1" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.58%)</title><rect x="880.5" y="1155.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="883.5" y="1166.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.29%)</title><rect x="883.9" y="1139.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="886.9" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.58%)</title><rect x="887.3" y="1155.0" width="6.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="890.3" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.29%)</title><rect x="887.3" y="1139.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="890.3" y="1150.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.29%)</title><rect x="890.7" y="1139.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="893.7" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.29%)</title><rect x="890.7" y="1123.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="893.7" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 1.44%)</title><rect x="894.1" y="1155.0" width="17.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="897.1" y="1166.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.29%)</title><rect x="907.8" y="1139.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="910.8" y="1150.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.29%)</title><rect x="907.8" y="1123.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="910.8" y="1134.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.29%)</title><rect x="907.8" y="1107.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="910.8" y="1118.0"></text>
</g>
<g>
<title>ThreadCritical::ThreadCritical() (1 samples, 0.29%)</title><rect x="907.8" y="1091.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="910.8" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 2.02%)</title><rect x="911.2" y="1155.0" width="23.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="914.2" y="1166.0">P..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.29%)</title><rect x="921.4" y="1139.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="924.4" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.86%)</title><rect x="924.8" y="1139.0" width="10.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="927.8" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.29%)</title><rect x="931.6" y="1123.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="934.6" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.29%)</title><rect x="935.0" y="1155.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="938.0" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.29%)</title><rect x="935.0" y="1139.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="938.0" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.29%)</title><rect x="938.4" y="1155.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="941.4" y="1166.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.29%)</title><rect x="938.4" y="1139.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="941.4" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.58%)</title><rect x="941.8" y="1155.0" width="6.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="944.8" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.29%)</title><rect x="945.2" y="1139.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="948.2" y="1150.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (5 samples, 1.44%)</title><rect x="948.6" y="1155.0" width="17.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="951.6" y="1166.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.29%)</title><rect x="948.6" y="1139.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="951.6" y="1150.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (4 samples, 1.15%)</title><rect x="952.0" y="1139.0" width="13.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="955.0" y="1150.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (4 samples, 1.15%)</title><rect x="952.0" y="1123.0" width="13.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="955.0" y="1134.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (3 samples, 0.86%)</title><rect x="952.0" y="1107.0" width="10.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="955.0" y="1118.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.29%)</title><rect x="962.2" y="1107.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="965.2" y="1118.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.29%)</title><rect x="965.6" y="1155.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="968.6" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.29%)</title><rect x="965.6" y="1139.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="968.6" y="1150.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.86%)</title><rect x="969.0" y="1155.0" width="10.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="972.0" y="1166.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.29%)</title><rect x="972.4" y="1139.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="975.4" y="1150.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.29%)</title><rect x="975.8" y="1139.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="978.8" y="1150.0"></text>
</g>
<g>
<title>Compile::Optimize() (48 samples, 13.83%)</title><rect x="979.2" y="1187.0" width="163.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="982.2" y="1198.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.29%)</title><rect x="979.2" y="1171.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="982.2" y="1182.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.29%)</title><rect x="979.2" y="1155.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="982.2" y="1166.0"></text>
</g>
<g>
<title>CallNode::has_non_debug_use(Node*) (1 samples, 0.29%)</title><rect x="979.2" y="1139.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="982.2" y="1150.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (2 samples, 0.58%)</title><rect x="982.6" y="1171.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="985.6" y="1182.0"></text>
</g>
<g>
<title>NodeHash::hash_insert(Node*) (1 samples, 0.29%)</title><rect x="986.0" y="1155.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="989.0" y="1166.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.29%)</title><rect x="986.0" y="1139.0" width="3.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="989.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.29%)</title><rect x="989.4" y="1171.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="992.4" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.29%)</title><rect x="989.4" y="1155.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="992.4" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="1139.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="992.4" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="1123.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="992.4" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="1107.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="992.4" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="1091.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="992.4" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="1075.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="992.4" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="1059.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="992.4" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="1043.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="992.4" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="1027.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="992.4" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="1011.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="992.4" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="995.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="992.4" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="979.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="992.4" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="963.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="992.4" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="947.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="992.4" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="931.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="992.4" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="915.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="992.4" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="899.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="992.4" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="883.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="992.4" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="867.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="992.4" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="851.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="992.4" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="835.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="992.4" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="819.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="992.4" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="803.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="992.4" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="787.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="992.4" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="771.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="992.4" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="755.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="992.4" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="739.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="992.4" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="723.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="992.4" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="707.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="992.4" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="691.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="992.4" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="675.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="992.4" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="659.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="992.4" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="643.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="992.4" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="627.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="992.4" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="611.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="992.4" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="595.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="992.4" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="579.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="992.4" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="563.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="992.4" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="547.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="992.4" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="531.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="992.4" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="515.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="992.4" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="499.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="992.4" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="483.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="992.4" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="467.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="992.4" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="451.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="992.4" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="435.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="992.4" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="419.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="992.4" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="403.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="992.4" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="387.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="992.4" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="371.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="992.4" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="355.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="992.4" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="339.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="992.4" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="323.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="992.4" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="307.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="992.4" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="291.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="992.4" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="275.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="992.4" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.29%)</title><rect x="989.4" y="259.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="992.4" y="270.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.29%)</title><rect x="989.4" y="243.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="992.4" y="254.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (2 samples, 0.58%)</title><rect x="992.8" y="1171.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="995.8" y="1182.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (2 samples, 0.58%)</title><rect x="992.8" y="1155.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="995.8" y="1166.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.29%)</title><rect x="996.2" y="1139.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="999.2" y="1150.0"></text>
</g>
<g>
<title>MemNode::Ideal_common_DU_postCCP(PhaseCCP*, Node*, Node*) (1 samples, 0.29%)</title><rect x="996.2" y="1123.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="999.2" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (36 samples, 10.37%)</title><rect x="999.6" y="1171.0" width="122.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1002.6" y="1182.0">PhaseIdealLoop:..</text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.29%)</title><rect x="999.6" y="1155.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1002.6" y="1166.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.29%)</title><rect x="1003.0" y="1155.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1006.0" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.29%)</title><rect x="1006.4" y="1155.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1009.4" y="1166.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.29%)</title><rect x="1006.4" y="1139.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1009.4" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (32 samples, 9.22%)</title><rect x="1009.8" y="1155.0" width="108.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1012.8" y="1166.0">PhaseIdealLoo..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (29 samples, 8.36%)</title><rect x="1020.0" y="1139.0" width="98.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1023.0" y="1150.0">PhaseIdealLo..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.29%)</title><rect x="1020.0" y="1123.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1023.0" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (28 samples, 8.07%)</title><rect x="1023.4" y="1123.0" width="95.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1026.4" y="1134.0">PhaseIdealL..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (8 samples, 2.31%)</title><rect x="1091.4" y="1107.0" width="27.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1094.4" y="1118.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.29%)</title><rect x="1118.6" y="1155.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1121.6" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.29%)</title><rect x="1118.6" y="1139.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1121.6" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.29%)</title><rect x="1118.6" y="1123.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1121.6" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.29%)</title><rect x="1118.6" y="1107.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1121.6" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.29%)</title><rect x="1122.0" y="1171.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1125.0" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 1.15%)</title><rect x="1125.4" y="1171.0" width="13.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1128.4" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 1.15%)</title><rect x="1125.4" y="1155.0" width="13.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1128.4" y="1166.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.29%)</title><rect x="1125.4" y="1139.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1128.4" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.58%)</title><rect x="1128.8" y="1139.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1131.8" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.29%)</title><rect x="1132.2" y="1123.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1135.2" y="1134.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.29%)</title><rect x="1132.2" y="1107.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1135.2" y="1118.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.29%)</title><rect x="1135.6" y="1139.0" width="3.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1138.6" y="1150.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.29%)</title><rect x="1135.6" y="1123.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1138.6" y="1134.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1135.6" y="1107.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1138.6" y="1118.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1135.6" y="1091.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1138.6" y="1102.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1135.6" y="1075.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1138.6" y="1086.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1135.6" y="1059.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.6" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1135.6" y="1043.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1138.6" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1135.6" y="1027.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.6" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1135.6" y="1011.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.6" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1135.6" y="995.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1138.6" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1135.6" y="979.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.6" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1135.6" y="963.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1138.6" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1135.6" y="947.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.6" y="958.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.29%)</title><rect x="1135.6" y="931.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.6" y="942.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.29%)</title><rect x="1135.6" y="915.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1138.6" y="926.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.29%)</title><rect x="1139.0" y="1171.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1142.0" y="1182.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.29%)</title><rect x="1139.0" y="1155.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.0" y="1166.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="1139.0" y="1139.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1142.0" y="1150.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.29%)</title><rect x="1139.0" y="1123.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.0" y="1134.0"></text>
</g>
<g>
<title>scan_mem_chain(Node*, int, int, Node*, Node*, PhaseGVN*) (1 samples, 0.29%)</title><rect x="1139.0" y="1107.0" width="3.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1142.0" y="1118.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.29%)</title><rect x="1139.0" y="1091.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.0" y="1102.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.29%)</title><rect x="1139.0" y="1075.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1142.0" y="1086.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.29%)</title><rect x="1139.0" y="1059.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1142.0" y="1070.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.29%)</title><rect x="1139.0" y="1043.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.0" y="1054.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.29%)</title><rect x="1139.0" y="1027.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1142.0" y="1038.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.29%)</title><rect x="1139.0" y="1011.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1142.0" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 1.73%)</title><rect x="1142.4" y="1187.0" width="20.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1145.4" y="1198.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 1.73%)</title><rect x="1142.4" y="1171.0" width="20.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1145.4" y="1182.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 1.73%)</title><rect x="1142.4" y="1155.0" width="20.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1145.4" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 1.73%)</title><rect x="1142.4" y="1139.0" width="20.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1145.4" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 1.73%)</title><rect x="1142.4" y="1123.0" width="20.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1145.4" y="1134.0"></text>
</g>
<g>
<title>CastPPNode::ideal_reg() const (1 samples, 0.29%)</title><rect x="1142.4" y="1107.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1145.4" y="1118.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.44%)</title><rect x="1145.8" y="1107.0" width="17.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1148.8" y="1118.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.29%)</title><rect x="1145.8" y="1091.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.8" y="1102.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.29%)</title><rect x="1145.8" y="1075.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.8" y="1086.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.29%)</title><rect x="1145.8" y="1059.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.8" y="1070.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.29%)</title><rect x="1145.8" y="1043.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.8" y="1054.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.29%)</title><rect x="1145.8" y="1027.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1148.8" y="1038.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.29%)</title><rect x="1145.8" y="1011.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1148.8" y="1022.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.29%)</title><rect x="1145.8" y="995.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1148.8" y="1006.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.29%)</title><rect x="1145.8" y="979.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1148.8" y="990.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.29%)</title><rect x="1145.8" y="963.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1148.8" y="974.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.29%)</title><rect x="1145.8" y="947.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1148.8" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.15%)</title><rect x="1149.2" y="1091.0" width="13.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.2" y="1102.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.15%)</title><rect x="1149.2" y="1075.0" width="13.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.2" y="1086.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.15%)</title><rect x="1149.2" y="1059.0" width="13.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.2" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.15%)</title><rect x="1149.2" y="1043.0" width="13.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1152.2" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.15%)</title><rect x="1149.2" y="1027.0" width="13.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1152.2" y="1038.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.15%)</title><rect x="1149.2" y="1011.0" width="13.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1152.2" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.58%)</title><rect x="1149.2" y="995.0" width="6.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.2" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.58%)</title><rect x="1149.2" y="979.0" width="6.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1152.2" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.58%)</title><rect x="1149.2" y="963.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.2" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.58%)</title><rect x="1149.2" y="947.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.2" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.58%)</title><rect x="1149.2" y="931.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.2" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.58%)</title><rect x="1149.2" y="915.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.2" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.58%)</title><rect x="1149.2" y="899.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.2" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.58%)</title><rect x="1149.2" y="883.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.2" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.58%)</title><rect x="1149.2" y="867.0" width="6.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.2" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.58%)</title><rect x="1149.2" y="851.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1152.2" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.58%)</title><rect x="1149.2" y="835.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1152.2" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1149.2" y="819.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1152.2" y="830.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.29%)</title><rect x="1149.2" y="803.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1152.2" y="814.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.29%)</title><rect x="1149.2" y="787.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1152.2" y="798.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.29%)</title><rect x="1149.2" y="771.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.2" y="782.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.29%)</title><rect x="1149.2" y="755.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.2" y="766.0"></text>
</g>
<g>
<title>is_init_with_ea(ciMethod*, ciMethod*, Compile*) (1 samples, 0.29%)</title><rect x="1149.2" y="739.0" width="3.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1152.2" y="750.0"></text>
</g>
<g>
<title>ciMethod::is_initializer() const (1 samples, 0.29%)</title><rect x="1149.2" y="723.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1152.2" y="734.0"></text>
</g>
<g>
<title>Method::is_initializer() const (1 samples, 0.29%)</title><rect x="1149.2" y="707.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.29%)</title><rect x="1152.6" y="819.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.6" y="830.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.29%)</title><rect x="1152.6" y="803.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.6" y="814.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.29%)</title><rect x="1152.6" y="787.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.6" y="798.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.29%)</title><rect x="1152.6" y="771.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.6" y="782.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.29%)</title><rect x="1152.6" y="755.0" width="3.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1155.6" y="766.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_canonical_holder(int) (1 samples, 0.29%)</title><rect x="1152.6" y="739.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.6" y="750.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.58%)</title><rect x="1156.0" y="995.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.0" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.58%)</title><rect x="1156.0" y="979.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.0" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.58%)</title><rect x="1156.0" y="963.0" width="6.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.0" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.58%)</title><rect x="1156.0" y="947.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.0" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.58%)</title><rect x="1156.0" y="931.0" width="6.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.0" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.58%)</title><rect x="1156.0" y="915.0" width="6.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.0" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.58%)</title><rect x="1156.0" y="899.0" width="6.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.0" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.58%)</title><rect x="1156.0" y="883.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.0" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.58%)</title><rect x="1156.0" y="867.0" width="6.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.0" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.58%)</title><rect x="1156.0" y="851.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.0" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.58%)</title><rect x="1156.0" y="835.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.0" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.58%)</title><rect x="1156.0" y="819.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.0" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.58%)</title><rect x="1156.0" y="803.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.0" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.58%)</title><rect x="1156.0" y="787.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.0" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.58%)</title><rect x="1156.0" y="771.0" width="6.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1159.0" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.58%)</title><rect x="1156.0" y="755.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.0" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.58%)</title><rect x="1156.0" y="739.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.58%)</title><rect x="1156.0" y="723.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.58%)</title><rect x="1156.0" y="707.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.0" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.58%)</title><rect x="1156.0" y="691.0" width="6.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.0" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.58%)</title><rect x="1156.0" y="675.0" width="6.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.58%)</title><rect x="1156.0" y="659.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.58%)</title><rect x="1156.0" y="643.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.58%)</title><rect x="1156.0" y="627.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.58%)</title><rect x="1156.0" y="611.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.0" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.58%)</title><rect x="1156.0" y="595.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.0" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.58%)</title><rect x="1156.0" y="579.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.58%)</title><rect x="1156.0" y="563.0" width="6.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1159.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.58%)</title><rect x="1156.0" y="547.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.58%)</title><rect x="1156.0" y="531.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.58%)</title><rect x="1156.0" y="515.0" width="6.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.0" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.58%)</title><rect x="1156.0" y="499.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.0" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.58%)</title><rect x="1156.0" y="483.0" width="6.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1159.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.58%)</title><rect x="1156.0" y="467.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.58%)</title><rect x="1156.0" y="451.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.58%)</title><rect x="1156.0" y="435.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.58%)</title><rect x="1156.0" y="419.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.0" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.58%)</title><rect x="1156.0" y="403.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.0" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.58%)</title><rect x="1156.0" y="387.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.58%)</title><rect x="1156.0" y="371.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.58%)</title><rect x="1156.0" y="355.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.58%)</title><rect x="1156.0" y="339.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1156.0" y="323.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.0" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1156.0" y="307.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.0" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1156.0" y="291.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1156.0" y="275.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.0" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1156.0" y="259.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1159.0" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.29%)</title><rect x="1156.0" y="243.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1156.0" y="227.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1159.0" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1156.0" y="211.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.0" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1156.0" y="195.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.0" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1156.0" y="179.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.0" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1156.0" y="163.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1159.0" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.29%)</title><rect x="1156.0" y="147.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.0" y="158.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1156.0" y="131.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.0" y="142.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1156.0" y="115.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.0" y="126.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_load_store(BasicType, LibraryCallKit::LoadStoreKind) (1 samples, 0.29%)</title><rect x="1156.0" y="99.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.0" y="110.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.29%)</title><rect x="1156.0" y="83.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.0" y="94.0"></text>
</g>
<g>
<title>IdealKit::make_leaf_call(TypeFunc const*, unsigned char*, char const*, Node*, Node*, Node*, Node*) (1 samples, 0.29%)</title><rect x="1156.0" y="67.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.0" y="78.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.29%)</title><rect x="1156.0" y="51.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.0" y="62.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.29%)</title><rect x="1156.0" y="35.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1159.0" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.29%)</title><rect x="1159.4" y="323.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.4" y="334.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.29%)</title><rect x="1159.4" y="307.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.4" y="318.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.29%)</title><rect x="1159.4" y="291.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.4" y="302.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.29%)</title><rect x="1159.4" y="275.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.4" y="286.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.29%)</title><rect x="1159.4" y="259.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.4" y="270.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.29%)</title><rect x="1159.4" y="243.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.4" y="254.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.29%)</title><rect x="1162.8" y="1187.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.8" y="1198.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.29%)</title><rect x="1162.8" y="1171.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.8" y="1182.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.29%)</title><rect x="1162.8" y="1155.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.8" y="1166.0"></text>
</g>
<g>
<title>CodeBlob::CodeBlob(char const*, CodeBuffer*, int, int, int, int, OopMapSet*) (1 samples, 0.29%)</title><rect x="1162.8" y="1139.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.8" y="1150.0"></text>
</g>
<g>
<title>CodeBuffer::copy_code_to(CodeBlob*) (1 samples, 0.29%)</title><rect x="1162.8" y="1123.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.8" y="1134.0"></text>
</g>
<g>
<title>CodeBuffer::relocate_code_to(CodeBuffer*) const (1 samples, 0.29%)</title><rect x="1162.8" y="1107.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.8" y="1118.0"></text>
</g>
<g>
<title>CallRelocation::fix_relocation_after_move(CodeBuffer const*, CodeBuffer*) (1 samples, 0.29%)</title><rect x="1162.8" y="1091.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.8" y="1102.0"></text>
</g>
<g>
<title>Relocation::pd_call_destination(unsigned char*) (1 samples, 0.29%)</title><rect x="1162.8" y="1075.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.8" y="1086.0"></text>
</g>
<g>
<title>CompileTask::print_compilation_impl(outputStream*, Method*, int, int, bool, int, bool, char const*, bool) (1 samples, 0.29%)</title><rect x="1166.2" y="1219.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.2" y="1230.0"></text>
</g>
<g>
<title>outputStream::do_vsnprintf(char*, unsigned long, char const*, __va_list_tag*, bool, unsigned long&amp;) (1 samples, 0.29%)</title><rect x="1166.2" y="1203.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.2" y="1214.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (4 samples, 1.15%)</title><rect x="1169.6" y="1219.0" width="13.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1172.6" y="1230.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (4 samples, 1.15%)</title><rect x="1169.6" y="1203.0" width="13.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.6" y="1214.0"></text>
</g>
<g>
<title>Compilation::compile_method() (4 samples, 1.15%)</title><rect x="1169.6" y="1187.0" width="13.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.6" y="1198.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.86%)</title><rect x="1169.6" y="1171.0" width="10.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.6" y="1182.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.29%)</title><rect x="1169.6" y="1155.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.6" y="1166.0"></text>
</g>
<g>
<title>ValueNumberingVisitor::do_If(If*) (1 samples, 0.29%)</title><rect x="1169.6" y="1139.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.6" y="1150.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.58%)</title><rect x="1173.0" y="1155.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.0" y="1166.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 0.58%)</title><rect x="1173.0" y="1139.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.0" y="1150.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.29%)</title><rect x="1173.0" y="1123.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.0" y="1134.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(LIR_OpList*, IntervalWalker*) (1 samples, 0.29%)</title><rect x="1173.0" y="1107.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.0" y="1118.0"></text>
</g>
<g>
<title>LinearScan::compute_debug_info_for_scope(int, IRScope*, ValueStack*, ValueStack*) (1 samples, 0.29%)</title><rect x="1173.0" y="1091.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.0" y="1102.0"></text>
</g>
<g>
<title>LinearScan::compute_debug_info_for_scope(int, IRScope*, ValueStack*, ValueStack*) (1 samples, 0.29%)</title><rect x="1173.0" y="1075.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.0" y="1086.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.29%)</title><rect x="1173.0" y="1059.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.0" y="1070.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.29%)</title><rect x="1176.4" y="1123.0" width="3.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.4" y="1134.0"></text>
</g>
<g>
<title>LIR_OpVisitState::visit(LIR_Op*) (1 samples, 0.29%)</title><rect x="1176.4" y="1107.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.4" y="1118.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.29%)</title><rect x="1179.8" y="1171.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.8" y="1182.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.29%)</title><rect x="1179.8" y="1155.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.8" y="1166.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.29%)</title><rect x="1179.8" y="1139.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.8" y="1150.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.29%)</title><rect x="1179.8" y="1123.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.8" y="1134.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.29%)</title><rect x="1179.8" y="1107.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.8" y="1118.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.29%)</title><rect x="1183.2" y="1235.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.2" y="1246.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.29%)</title><rect x="1183.2" y="1219.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.2" y="1230.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.29%)</title><rect x="1183.2" y="1203.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.2" y="1214.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (1 samples, 0.29%)</title><rect x="1183.2" y="1187.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.2" y="1198.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.29%)</title><rect x="1186.6" y="1283.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.6" y="1294.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (1 samples, 0.29%)</title><rect x="1186.6" y="1267.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.6" y="1278.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.29%)</title><rect x="1186.6" y="1251.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.6" y="1262.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.29%)</title><rect x="1186.6" y="1235.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.6" y="1246.0"></text>
</g>
</g>
</svg>
