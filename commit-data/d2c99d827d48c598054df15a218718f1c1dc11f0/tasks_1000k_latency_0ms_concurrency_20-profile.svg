<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1942" onload="init(evt)" viewBox="0 0 1200 1942" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1925"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1925"> </text>
<g id="frames">
<g>
<title>all (1,255 samples, 100.00%)</title><rect x="10.0" y="1891.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1902.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (248 samples, 19.76%)</title><rect x="10.0" y="1875.0" width="233.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1886.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (2 samples, 0.16%)</title><rect x="10.0" y="1859.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (2 samples, 0.16%)</title><rect x="10.0" y="1843.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (2 samples, 0.16%)</title><rect x="10.0" y="1827.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (2 samples, 0.16%)</title><rect x="10.0" y="1811.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.doCommitOffsetsAsync (1 samples, 0.08%)</title><rect x="10.0" y="1795.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.sendOffsetCommitRequest (1 samples, 0.08%)</title><rect x="10.0" y="1779.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.08%)</title><rect x="10.9" y="1795.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.9" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="10.9" y="1779.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.9" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.08%)</title><rect x="10.9" y="1763.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.9" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.08%)</title><rect x="10.9" y="1747.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.9" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.08%)</title><rect x="10.9" y="1731.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.9" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.08%)</title><rect x="10.9" y="1715.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.9" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClientRequest.makeHeader (1 samples, 0.08%)</title><rect x="10.9" y="1699.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.9" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.forId (1 samples, 0.08%)</title><rect x="10.9" y="1683.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.9" y="1694.0"></text>
</g>
<g>
<title>java/lang/String.format (1 samples, 0.08%)</title><rect x="10.9" y="1667.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.9" y="1678.0"></text>
</g>
<g>
<title>java/util/Formatter.&lt;init&gt; (1 samples, 0.08%)</title><rect x="10.9" y="1651.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.9" y="1662.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (245 samples, 19.52%)</title><rect x="11.9" y="1859.0" width="230.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="14.9" y="1870.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (4 samples, 0.32%)</title><rect x="11.9" y="1843.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="14.9" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (4 samples, 0.32%)</title><rect x="11.9" y="1827.0" width="3.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="14.9" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (4 samples, 0.32%)</title><rect x="11.9" y="1811.0" width="3.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="14.9" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$267/1716384654.accept (4 samples, 0.32%)</title><rect x="11.9" y="1795.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="14.9" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (4 samples, 0.32%)</title><rect x="11.9" y="1779.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="14.9" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (4 samples, 0.32%)</title><rect x="11.9" y="1763.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="14.9" y="1774.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (3 samples, 0.24%)</title><rect x="12.8" y="1747.0" width="2.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="15.8" y="1758.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (177 samples, 14.10%)</title><rect x="15.6" y="1843.0" width="166.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.6" y="1854.0">java/lang/Iterable.fo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$266/1868445761.accept (164 samples, 13.07%)</title><rect x="16.6" y="1827.0" width="154.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.6" y="1838.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (163 samples, 12.99%)</title><rect x="17.5" y="1811.0" width="153.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.5" y="1822.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (155 samples, 12.35%)</title><rect x="19.4" y="1795.0" width="145.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="22.4" y="1806.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (155 samples, 12.35%)</title><rect x="19.4" y="1779.0" width="145.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.4" y="1790.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (155 samples, 12.35%)</title><rect x="19.4" y="1763.0" width="145.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="22.4" y="1774.0">com/linecorp/decat..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (155 samples, 12.35%)</title><rect x="19.4" y="1747.0" width="145.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.4" y="1758.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (155 samples, 12.35%)</title><rect x="19.4" y="1731.0" width="145.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.4" y="1742.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (155 samples, 12.35%)</title><rect x="19.4" y="1715.0" width="145.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.4" y="1726.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (95 samples, 7.57%)</title><rect x="19.4" y="1699.0" width="89.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.4" y="1710.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (24 samples, 1.91%)</title><rect x="19.4" y="1683.0" width="22.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="22.4" y="1694.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (24 samples, 1.91%)</title><rect x="19.4" y="1667.0" width="22.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.4" y="1678.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (14 samples, 1.12%)</title><rect x="28.8" y="1651.0" width="13.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="31.8" y="1662.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (14 samples, 1.12%)</title><rect x="28.8" y="1635.0" width="13.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="31.8" y="1646.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.32%)</title><rect x="42.0" y="1683.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="45.0" y="1694.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (4 samples, 0.32%)</title><rect x="42.0" y="1667.0" width="3.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="45.0" y="1678.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.08%)</title><rect x="42.9" y="1651.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="45.9" y="1662.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.08%)</title><rect x="42.9" y="1635.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="45.9" y="1646.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.16%)</title><rect x="43.8" y="1651.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="46.8" y="1662.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (67 samples, 5.34%)</title><rect x="45.7" y="1683.0" width="63.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="48.7" y="1694.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (67 samples, 5.34%)</title><rect x="45.7" y="1667.0" width="63.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="48.7" y="1678.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (65 samples, 5.18%)</title><rect x="45.7" y="1651.0" width="61.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="48.7" y="1662.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (65 samples, 5.18%)</title><rect x="45.7" y="1635.0" width="61.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="48.7" y="1646.0">java/u..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (65 samples, 5.18%)</title><rect x="45.7" y="1619.0" width="61.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="48.7" y="1630.0">sun/mi..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="45.7" y="1603.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="48.7" y="1614.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.08%)</title><rect x="46.7" y="1603.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="49.7" y="1614.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="47.6" y="1603.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="50.6" y="1614.0"></text>
</g>
<g>
<title>Unsafe_Unpark (59 samples, 4.70%)</title><rect x="48.5" y="1603.0" width="55.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="51.5" y="1614.0">Unsaf..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.16%)</title><rect x="48.5" y="1587.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="51.5" y="1598.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.16%)</title><rect x="50.4" y="1587.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="53.4" y="1598.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="52.3" y="1587.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="55.3" y="1598.0"></text>
</g>
<g>
<title>__pthread_cond_signal (39 samples, 3.11%)</title><rect x="53.3" y="1587.0" width="36.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="56.3" y="1598.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (3 samples, 0.24%)</title><rect x="89.9" y="1587.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="92.9" y="1598.0"></text>
</g>
<g>
<title>pthread_mutex_lock (12 samples, 0.96%)</title><rect x="92.7" y="1587.0" width="11.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="95.7" y="1598.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.08%)</title><rect x="104.0" y="1603.0" width="1.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="107.0" y="1614.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.08%)</title><rect x="105.0" y="1603.0" width="0.9" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="108.0" y="1614.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.08%)</title><rect x="105.9" y="1603.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="108.9" y="1614.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.16%)</title><rect x="106.8" y="1651.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="109.8" y="1662.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (60 samples, 4.78%)</title><rect x="108.7" y="1699.0" width="56.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="111.7" y="1710.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (60 samples, 4.78%)</title><rect x="108.7" y="1683.0" width="56.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="111.7" y="1694.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.08%)</title><rect x="108.7" y="1667.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="111.7" y="1678.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (59 samples, 4.70%)</title><rect x="109.7" y="1667.0" width="55.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="112.7" y="1678.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (3 samples, 0.24%)</title><rect x="162.3" y="1651.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="165.3" y="1662.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (1 samples, 0.08%)</title><rect x="165.1" y="1795.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="168.1" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.08%)</title><rect x="165.1" y="1779.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="168.1" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (5 samples, 0.40%)</title><rect x="166.1" y="1795.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="169.1" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.40%)</title><rect x="166.1" y="1779.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="169.1" y="1790.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.40%)</title><rect x="166.1" y="1763.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="169.1" y="1774.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.08%)</title><rect x="170.8" y="1827.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="173.8" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.08%)</title><rect x="170.8" y="1811.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="173.8" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="170.8" y="1795.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="173.8" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="170.8" y="1779.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="173.8" y="1790.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.08%)</title><rect x="170.8" y="1763.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="173.8" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (9 samples, 0.72%)</title><rect x="171.7" y="1827.0" width="8.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="174.7" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (5 samples, 0.40%)</title><rect x="175.5" y="1811.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="178.5" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.40%)</title><rect x="175.5" y="1795.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="178.5" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.40%)</title><rect x="175.5" y="1779.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="178.5" y="1790.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (5 samples, 0.40%)</title><rect x="175.5" y="1763.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="178.5" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (2 samples, 0.16%)</title><rect x="180.2" y="1827.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="183.2" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.16%)</title><rect x="180.2" y="1811.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="183.2" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (64 samples, 5.10%)</title><rect x="182.1" y="1843.0" width="60.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="185.1" y="1854.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (64 samples, 5.10%)</title><rect x="182.1" y="1827.0" width="60.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="185.1" y="1838.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (46 samples, 3.67%)</title><rect x="182.1" y="1811.0" width="43.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="185.1" y="1822.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.08%)</title><rect x="183.0" y="1795.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="186.0" y="1806.0"></text>
</g>
<g>
<title>Runtime1::monitorexit(JavaThread*, BasicObjectLock*) (1 samples, 0.08%)</title><rect x="183.0" y="1779.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="186.0" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (44 samples, 3.51%)</title><rect x="183.9" y="1795.0" width="41.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="186.9" y="1806.0">org..</text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.08%)</title><rect x="184.9" y="1779.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="187.9" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (42 samples, 3.35%)</title><rect x="185.8" y="1779.0" width="39.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="188.8" y="1790.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (36 samples, 2.87%)</title><rect x="185.8" y="1763.0" width="33.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="188.8" y="1774.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (35 samples, 2.79%)</title><rect x="185.8" y="1747.0" width="32.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="188.8" y="1758.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (17 samples, 1.35%)</title><rect x="188.6" y="1731.0" width="16.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="191.6" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeCloseRecordStream (8 samples, 0.64%)</title><rect x="188.6" y="1715.0" width="7.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="191.6" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (9 samples, 0.72%)</title><rect x="196.2" y="1715.0" width="8.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="199.2" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (9 samples, 0.72%)</title><rect x="196.2" y="1699.0" width="8.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="199.2" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (9 samples, 0.72%)</title><rect x="196.2" y="1683.0" width="8.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="199.2" y="1694.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (9 samples, 0.72%)</title><rect x="196.2" y="1667.0" width="8.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="199.2" y="1678.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (9 samples, 0.72%)</title><rect x="196.2" y="1651.0" width="8.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="199.2" y="1662.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (9 samples, 0.72%)</title><rect x="196.2" y="1635.0" width="8.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="199.2" y="1646.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (9 samples, 0.72%)</title><rect x="196.2" y="1619.0" width="8.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="199.2" y="1630.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (15 samples, 1.20%)</title><rect x="204.6" y="1731.0" width="14.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="207.6" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (14 samples, 1.12%)</title><rect x="205.6" y="1715.0" width="13.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="208.6" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (8 samples, 0.64%)</title><rect x="205.6" y="1699.0" width="7.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="208.6" y="1710.0"></text>
</g>
<g>
<title>java/util/Optional.of (8 samples, 0.64%)</title><rect x="205.6" y="1683.0" width="7.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="208.6" y="1694.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.08%)</title><rect x="212.2" y="1667.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="215.2" y="1678.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (5 samples, 0.40%)</title><rect x="213.1" y="1699.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="216.1" y="1710.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (5 samples, 0.40%)</title><rect x="213.1" y="1683.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="216.1" y="1694.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (1 samples, 0.08%)</title><rect x="215.9" y="1667.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="218.9" y="1678.0"></text>
</g>
<g>
<title>oopFactory::new_objArray(Klass*, int, Thread*) (1 samples, 0.08%)</title><rect x="215.9" y="1651.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="218.9" y="1662.0"></text>
</g>
<g>
<title>java/util/Arrays$ArrayList.toArray (1 samples, 0.08%)</title><rect x="216.9" y="1667.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="219.9" y="1678.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="216.9" y="1651.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="219.9" y="1662.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="216.9" y="1635.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="219.9" y="1646.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="216.9" y="1619.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="219.9" y="1630.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="216.9" y="1603.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="219.9" y="1614.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="216.9" y="1587.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="219.9" y="1598.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="216.9" y="1571.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="219.9" y="1582.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="216.9" y="1555.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="219.9" y="1566.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.08%)</title><rect x="216.9" y="1539.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="219.9" y="1550.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.08%)</title><rect x="216.9" y="1523.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="219.9" y="1534.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.toArray (1 samples, 0.08%)</title><rect x="217.8" y="1699.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="220.8" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.toArray (1 samples, 0.08%)</title><rect x="217.8" y="1683.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="220.8" y="1694.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="217.8" y="1667.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="220.8" y="1678.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="217.8" y="1651.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="220.8" y="1662.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.08%)</title><rect x="217.8" y="1635.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="220.8" y="1646.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::write_region_work(MemRegion) (1 samples, 0.08%)</title><rect x="217.8" y="1619.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="220.8" y="1630.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::invalidate(MemRegion, bool) (1 samples, 0.08%)</title><rect x="217.8" y="1603.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="220.8" y="1614.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.08%)</title><rect x="218.7" y="1747.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="221.7" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (3 samples, 0.24%)</title><rect x="219.7" y="1763.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="222.7" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (3 samples, 0.24%)</title><rect x="219.7" y="1747.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="222.7" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.24%)</title><rect x="219.7" y="1731.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="222.7" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.24%)</title><rect x="219.7" y="1715.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="222.7" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.24%)</title><rect x="219.7" y="1699.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="222.7" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (2 samples, 0.16%)</title><rect x="220.6" y="1683.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="223.6" y="1694.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Value.record (2 samples, 0.16%)</title><rect x="220.6" y="1667.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="223.6" y="1678.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isFetchable (1 samples, 0.08%)</title><rect x="222.5" y="1763.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="225.5" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.08%)</title><rect x="222.5" y="1747.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="225.5" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.08%)</title><rect x="222.5" y="1731.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="225.5" y="1742.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.08%)</title><rect x="222.5" y="1715.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="225.5" y="1726.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="222.5" y="1699.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="225.5" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (2 samples, 0.16%)</title><rect x="223.4" y="1763.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="226.4" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (4 samples, 0.32%)</title><rect x="225.3" y="1811.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="228.3" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (3 samples, 0.24%)</title><rect x="225.3" y="1795.0" width="2.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="228.3" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.08%)</title><rect x="225.3" y="1779.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="228.3" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.08%)</title><rect x="225.3" y="1763.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="228.3" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.08%)</title><rect x="225.3" y="1747.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="228.3" y="1758.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.groupingBy (1 samples, 0.08%)</title><rect x="225.3" y="1731.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="228.3" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.16%)</title><rect x="226.3" y="1779.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="229.3" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.08%)</title><rect x="227.2" y="1763.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="230.2" y="1774.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="227.2" y="1747.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="230.2" y="1758.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.08%)</title><rect x="227.2" y="1731.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="230.2" y="1742.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.08%)</title><rect x="227.2" y="1715.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="230.2" y="1726.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="227.2" y="1699.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="230.2" y="1710.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="227.2" y="1683.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="230.2" y="1694.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.08%)</title><rect x="227.2" y="1667.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="230.2" y="1678.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.08%)</title><rect x="227.2" y="1651.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="230.2" y="1662.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.08%)</title><rect x="227.2" y="1635.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="230.2" y="1646.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.08%)</title><rect x="228.1" y="1795.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="231.1" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.08%)</title><rect x="228.1" y="1779.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="231.1" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsAutoAssigned (1 samples, 0.08%)</title><rect x="228.1" y="1763.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="231.1" y="1774.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.08%)</title><rect x="228.1" y="1747.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="231.1" y="1758.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.08%)</title><rect x="228.1" y="1731.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="231.1" y="1742.0"></text>
</g>
<g>
<title>JavaThreadBlockedOnMonitorEnterState::contended_enter_begin(JavaThread*) (1 samples, 0.08%)</title><rect x="228.1" y="1715.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="231.1" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.maybeTriggerWakeup (1 samples, 0.08%)</title><rect x="229.1" y="1811.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="232.1" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (5 samples, 0.40%)</title><rect x="230.0" y="1811.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="233.0" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 0.32%)</title><rect x="230.0" y="1795.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="233.0" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.08%)</title><rect x="230.0" y="1779.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="233.0" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.08%)</title><rect x="230.0" y="1763.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="233.0" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.08%)</title><rect x="230.0" y="1747.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="233.0" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.08%)</title><rect x="230.0" y="1731.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="233.0" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.08%)</title><rect x="230.0" y="1715.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="233.0" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.08%)</title><rect x="230.0" y="1699.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="233.0" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.08%)</title><rect x="230.0" y="1683.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="233.0" y="1694.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.08%)</title><rect x="230.0" y="1667.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="233.0" y="1678.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.08%)</title><rect x="230.0" y="1651.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="233.0" y="1662.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.08%)</title><rect x="230.0" y="1635.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="233.0" y="1646.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.08%)</title><rect x="230.0" y="1619.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="233.0" y="1630.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.08%)</title><rect x="230.0" y="1603.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="233.0" y="1614.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (1 samples, 0.08%)</title><rect x="230.0" y="1587.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="233.0" y="1598.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.24%)</title><rect x="231.0" y="1779.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="234.0" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (3 samples, 0.24%)</title><rect x="231.0" y="1763.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="234.0" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.08%)</title><rect x="231.0" y="1747.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="234.0" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.08%)</title><rect x="231.0" y="1731.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="234.0" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.08%)</title><rect x="231.0" y="1715.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="234.0" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.08%)</title><rect x="231.0" y="1699.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="234.0" y="1710.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.08%)</title><rect x="231.0" y="1683.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="234.0" y="1694.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.08%)</title><rect x="231.0" y="1667.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="234.0" y="1678.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.08%)</title><rect x="231.0" y="1651.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="234.0" y="1662.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.writev (1 samples, 0.08%)</title><rect x="231.0" y="1635.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="234.0" y="1646.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.writev0 (1 samples, 0.08%)</title><rect x="231.0" y="1619.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="234.0" y="1630.0"></text>
</g>
<g>
<title>__writev (1 samples, 0.08%)</title><rect x="231.0" y="1603.0" width="0.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="234.0" y="1614.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.16%)</title><rect x="231.9" y="1747.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="234.9" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.16%)</title><rect x="231.9" y="1731.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="234.9" y="1742.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="231.9" y="1715.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="234.9" y="1726.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="231.9" y="1699.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="234.9" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.08%)</title><rect x="232.8" y="1715.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="235.8" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.08%)</title><rect x="232.8" y="1699.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="235.8" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.08%)</title><rect x="232.8" y="1683.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="235.8" y="1694.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.08%)</title><rect x="232.8" y="1667.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="235.8" y="1678.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.08%)</title><rect x="232.8" y="1651.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="235.8" y="1662.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.08%)</title><rect x="232.8" y="1635.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="235.8" y="1646.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.08%)</title><rect x="233.8" y="1795.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="236.8" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.08%)</title><rect x="233.8" y="1779.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="236.8" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.08%)</title><rect x="233.8" y="1763.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="236.8" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NodeApiVersions.latestUsableVersion (1 samples, 0.08%)</title><rect x="233.8" y="1747.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="236.8" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NodeApiVersions.latestUsableVersion (1 samples, 0.08%)</title><rect x="233.8" y="1731.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="236.8" y="1742.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.08%)</title><rect x="233.8" y="1715.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="236.8" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (7 samples, 0.56%)</title><rect x="234.7" y="1811.0" width="6.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="237.7" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (7 samples, 0.56%)</title><rect x="234.7" y="1795.0" width="6.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="237.7" y="1806.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.08%)</title><rect x="234.7" y="1779.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="237.7" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$258/1945385365.accept (1 samples, 0.08%)</title><rect x="234.7" y="1763.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="237.7" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (5 samples, 0.40%)</title><rect x="235.7" y="1779.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="238.7" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.iterator (1 samples, 0.08%)</title><rect x="236.6" y="1763.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="239.6" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.&lt;init&gt; (1 samples, 0.08%)</title><rect x="236.6" y="1747.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="239.6" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.advance (1 samples, 0.08%)</title><rect x="236.6" y="1731.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="239.6" y="1742.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.first (1 samples, 0.08%)</title><rect x="236.6" y="1715.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="239.6" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (3 samples, 0.24%)</title><rect x="237.5" y="1763.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="240.5" y="1774.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.24%)</title><rect x="237.5" y="1747.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="240.5" y="1758.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.24%)</title><rect x="237.5" y="1731.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="240.5" y="1742.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.24%)</title><rect x="237.5" y="1715.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="240.5" y="1726.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.24%)</title><rect x="237.5" y="1699.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="240.5" y="1710.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.24%)</title><rect x="237.5" y="1683.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="240.5" y="1694.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (2 samples, 0.16%)</title><rect x="237.5" y="1667.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="240.5" y="1678.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (2 samples, 0.16%)</title><rect x="237.5" y="1651.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="240.5" y="1662.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (2 samples, 0.16%)</title><rect x="237.5" y="1635.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="240.5" y="1646.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.16%)</title><rect x="237.5" y="1619.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="240.5" y="1630.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.16%)</title><rect x="237.5" y="1603.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="240.5" y="1614.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="237.5" y="1587.0" width="1.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="240.5" y="1598.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$260/1412726345.test (1 samples, 0.08%)</title><rect x="238.5" y="1587.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="241.5" y="1598.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="239.4" y="1667.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="242.4" y="1678.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="239.4" y="1651.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="242.4" y="1662.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="239.4" y="1635.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="242.4" y="1646.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="239.4" y="1619.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="242.4" y="1630.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="239.4" y="1603.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="242.4" y="1614.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.selectReadReplica (1 samples, 0.08%)</title><rect x="240.4" y="1779.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="243.4" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.preferredReadReplica (1 samples, 0.08%)</title><rect x="240.4" y="1763.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="243.4" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.08%)</title><rect x="240.4" y="1747.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="243.4" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.08%)</title><rect x="240.4" y="1731.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="243.4" y="1742.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.08%)</title><rect x="240.4" y="1715.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="243.4" y="1726.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="240.4" y="1699.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="243.4" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.08%)</title><rect x="240.4" y="1683.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="243.4" y="1694.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.08%)</title><rect x="241.3" y="1811.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="244.3" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="241.3" y="1795.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="244.3" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="241.3" y="1779.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="244.3" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="241.3" y="1763.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="244.3" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.08%)</title><rect x="241.3" y="1747.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="244.3" y="1758.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.08%)</title><rect x="242.2" y="1859.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="245.2" y="1870.0"></text>
</g>
<g>
<title>java/lang/Thread.run (749 samples, 59.68%)</title><rect x="243.2" y="1875.0" width="704.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="246.2" y="1886.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (749 samples, 59.68%)</title><rect x="243.2" y="1859.0" width="704.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="246.2" y="1870.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (749 samples, 59.68%)</title><rect x="243.2" y="1843.0" width="704.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="246.2" y="1854.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$286/1351087707.run (525 samples, 41.83%)</title><rect x="253.5" y="1827.0" width="493.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="256.5" y="1838.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambd..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$71 (523 samples, 41.67%)</title><rect x="255.4" y="1811.0" width="491.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="258.4" y="1822.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (523 samples, 41.67%)</title><rect x="255.4" y="1795.0" width="491.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="258.4" y="1806.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (516 samples, 41.12%)</title><rect x="255.4" y="1779.0" width="485.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="258.4" y="1790.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.sch..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="266.7" y="1763.0" width="0.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="269.7" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (2 samples, 0.16%)</title><rect x="267.6" y="1763.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="270.6" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (152 samples, 12.11%)</title><rect x="269.5" y="1763.0" width="142.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="272.5" y="1774.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$43/416153648.extract (152 samples, 12.11%)</title><rect x="269.5" y="1747.0" width="142.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="272.5" y="1758.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (152 samples, 12.11%)</title><rect x="269.5" y="1731.0" width="142.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="272.5" y="1742.0">com/linecorp/decat..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="279.8" y="1715.0" width="1.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="282.8" y="1726.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.24%)</title><rect x="280.8" y="1715.0" width="2.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="283.8" y="1726.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="282.7" y="1699.0" width="0.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="285.7" y="1710.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (136 samples, 10.84%)</title><rect x="283.6" y="1715.0" width="127.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="286.6" y="1726.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (136 samples, 10.84%)</title><rect x="283.6" y="1699.0" width="127.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="286.6" y="1710.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (136 samples, 10.84%)</title><rect x="283.6" y="1683.0" width="127.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="286.6" y="1694.0">com/fasterxml/ja..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (31 samples, 2.47%)</title><rect x="283.6" y="1667.0" width="29.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="286.6" y="1678.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (31 samples, 2.47%)</title><rect x="283.6" y="1651.0" width="29.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="286.6" y="1662.0">co..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.16%)</title><rect x="283.6" y="1635.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="286.6" y="1646.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="283.6" y="1619.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="286.6" y="1630.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.08%)</title><rect x="283.6" y="1603.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="286.6" y="1614.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="284.5" y="1619.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="287.5" y="1630.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="284.5" y="1603.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="287.5" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (29 samples, 2.31%)</title><rect x="285.5" y="1635.0" width="27.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="288.5" y="1646.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (18 samples, 1.43%)</title><rect x="285.5" y="1619.0" width="16.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="288.5" y="1630.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (18 samples, 1.43%)</title><rect x="285.5" y="1603.0" width="16.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="288.5" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (10 samples, 0.80%)</title><rect x="302.4" y="1619.0" width="9.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="305.4" y="1630.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (10 samples, 0.80%)</title><rect x="302.4" y="1603.0" width="9.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="305.4" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (10 samples, 0.80%)</title><rect x="302.4" y="1587.0" width="9.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="305.4" y="1598.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (10 samples, 0.80%)</title><rect x="302.4" y="1571.0" width="9.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="305.4" y="1582.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonStreamContext.&lt;init&gt; (10 samples, 0.80%)</title><rect x="302.4" y="1555.0" width="9.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="305.4" y="1566.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.16%)</title><rect x="309.9" y="1539.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="312.9" y="1550.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (2 samples, 0.16%)</title><rect x="309.9" y="1523.0" width="1.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="312.9" y="1534.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.08%)</title><rect x="311.8" y="1619.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="314.8" y="1630.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (87 samples, 6.93%)</title><rect x="312.8" y="1667.0" width="81.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="315.8" y="1678.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (4 samples, 0.32%)</title><rect x="312.8" y="1651.0" width="3.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="315.8" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (4 samples, 0.32%)</title><rect x="312.8" y="1635.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="315.8" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (4 samples, 0.32%)</title><rect x="312.8" y="1619.0" width="3.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="315.8" y="1630.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (4 samples, 0.32%)</title><rect x="312.8" y="1603.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="315.8" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (4 samples, 0.32%)</title><rect x="312.8" y="1587.0" width="3.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="315.8" y="1598.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (4 samples, 0.32%)</title><rect x="312.8" y="1571.0" width="3.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="315.8" y="1582.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.checkedByteOffset (4 samples, 0.32%)</title><rect x="312.8" y="1555.0" width="3.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="315.8" y="1566.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 0.16%)</title><rect x="313.7" y="1539.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="316.7" y="1550.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.byteOffset (1 samples, 0.08%)</title><rect x="315.6" y="1539.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="318.6" y="1550.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (6 samples, 0.48%)</title><rect x="316.5" y="1651.0" width="5.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="319.5" y="1662.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.48%)</title><rect x="316.5" y="1635.0" width="5.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="319.5" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.08%)</title><rect x="321.2" y="1619.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="324.2" y="1630.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (7 samples, 0.56%)</title><rect x="322.2" y="1651.0" width="6.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="325.2" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (7 samples, 0.56%)</title><rect x="322.2" y="1635.0" width="6.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="325.2" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (7 samples, 0.56%)</title><rect x="322.2" y="1619.0" width="6.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="325.2" y="1630.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (6 samples, 0.48%)</title><rect x="323.1" y="1603.0" width="5.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="326.1" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (4 samples, 0.32%)</title><rect x="325.0" y="1587.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="328.0" y="1598.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.08%)</title><rect x="328.7" y="1651.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="331.7" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.08%)</title><rect x="328.7" y="1635.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="331.7" y="1646.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="328.7" y="1619.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="331.7" y="1630.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="328.7" y="1603.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="331.7" y="1614.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="328.7" y="1587.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="331.7" y="1598.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="328.7" y="1571.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="331.7" y="1582.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (69 samples, 5.50%)</title><rect x="329.7" y="1651.0" width="64.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="332.7" y="1662.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (18 samples, 1.43%)</title><rect x="329.7" y="1635.0" width="16.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="332.7" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.40%)</title><rect x="337.2" y="1619.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="340.2" y="1630.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.40%)</title><rect x="337.2" y="1603.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="340.2" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.40%)</title><rect x="337.2" y="1587.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="340.2" y="1598.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.24%)</title><rect x="341.9" y="1619.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="344.9" y="1630.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.24%)</title><rect x="341.9" y="1603.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="344.9" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (2 samples, 0.16%)</title><rect x="344.7" y="1619.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="347.7" y="1630.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (51 samples, 4.06%)</title><rect x="346.6" y="1635.0" width="48.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="349.6" y="1646.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (51 samples, 4.06%)</title><rect x="346.6" y="1619.0" width="48.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="349.6" y="1630.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (49 samples, 3.90%)</title><rect x="348.5" y="1603.0" width="46.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="351.5" y="1614.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (21 samples, 1.67%)</title><rect x="355.1" y="1587.0" width="19.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="358.1" y="1598.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (10 samples, 0.80%)</title><rect x="359.8" y="1571.0" width="9.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="362.8" y="1582.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (10 samples, 0.80%)</title><rect x="359.8" y="1555.0" width="9.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="362.8" y="1566.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (10 samples, 0.80%)</title><rect x="359.8" y="1539.0" width="9.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="362.8" y="1550.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (7 samples, 0.56%)</title><rect x="362.6" y="1523.0" width="6.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="365.6" y="1534.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (4 samples, 0.32%)</title><rect x="362.6" y="1507.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="365.6" y="1518.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.16%)</title><rect x="364.5" y="1491.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="367.5" y="1502.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (2 samples, 0.16%)</title><rect x="364.5" y="1475.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="367.5" y="1486.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (3 samples, 0.24%)</title><rect x="366.4" y="1507.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="369.4" y="1518.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (5 samples, 0.40%)</title><rect x="369.2" y="1571.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="372.2" y="1582.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (5 samples, 0.40%)</title><rect x="369.2" y="1555.0" width="4.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="372.2" y="1566.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (3 samples, 0.24%)</title><rect x="371.1" y="1539.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="374.1" y="1550.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.08%)</title><rect x="373.9" y="1571.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="376.9" y="1582.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (8 samples, 0.64%)</title><rect x="374.8" y="1587.0" width="7.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="377.8" y="1598.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (8 samples, 0.64%)</title><rect x="374.8" y="1571.0" width="7.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="377.8" y="1582.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (8 samples, 0.64%)</title><rect x="374.8" y="1555.0" width="7.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="377.8" y="1566.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (8 samples, 0.64%)</title><rect x="374.8" y="1539.0" width="7.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="377.8" y="1550.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (8 samples, 0.64%)</title><rect x="374.8" y="1523.0" width="7.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="377.8" y="1534.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (10 samples, 0.80%)</title><rect x="382.3" y="1587.0" width="9.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="385.3" y="1598.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (10 samples, 0.80%)</title><rect x="382.3" y="1571.0" width="9.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="385.3" y="1582.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (10 samples, 0.80%)</title><rect x="382.3" y="1555.0" width="9.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="385.3" y="1566.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (10 samples, 0.80%)</title><rect x="382.3" y="1539.0" width="9.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="385.3" y="1550.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (10 samples, 0.80%)</title><rect x="382.3" y="1523.0" width="9.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="385.3" y="1534.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (10 samples, 0.80%)</title><rect x="382.3" y="1507.0" width="9.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="385.3" y="1518.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (10 samples, 0.80%)</title><rect x="382.3" y="1491.0" width="9.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="385.3" y="1502.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (3 samples, 0.24%)</title><rect x="391.7" y="1587.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="394.7" y="1598.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.24%)</title><rect x="391.7" y="1571.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="394.7" y="1582.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.24%)</title><rect x="391.7" y="1555.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="394.7" y="1566.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (18 samples, 1.43%)</title><rect x="394.6" y="1667.0" width="16.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="397.6" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (18 samples, 1.43%)</title><rect x="394.6" y="1651.0" width="16.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="397.6" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (18 samples, 1.43%)</title><rect x="394.6" y="1635.0" width="16.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="397.6" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (18 samples, 1.43%)</title><rect x="394.6" y="1619.0" width="16.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="397.6" y="1630.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (18 samples, 1.43%)</title><rect x="394.6" y="1603.0" width="16.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="397.6" y="1614.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (3 samples, 0.24%)</title><rect x="408.7" y="1587.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="411.7" y="1598.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata$TaskMetadataBuilder.build (1 samples, 0.08%)</title><rect x="411.5" y="1715.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="414.5" y="1726.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="411.5" y="1699.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="414.5" y="1710.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="411.5" y="1683.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="414.5" y="1694.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="411.5" y="1667.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="414.5" y="1678.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (326 samples, 25.98%)</title><rect x="412.4" y="1763.0" width="306.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="415.4" y="1774.0">com/linecorp/decaton/processor/runtime/in..</text>
</g>
<g>
<title>__clock_gettime (13 samples, 1.04%)</title><rect x="414.3" y="1747.0" width="12.2" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="417.3" y="1758.0"></text>
</g>
<g>
<title>[vdso] (13 samples, 1.04%)</title><rect x="414.3" y="1731.0" width="12.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="417.3" y="1742.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (59 samples, 4.70%)</title><rect x="426.5" y="1747.0" width="55.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="429.5" y="1758.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (3 samples, 0.24%)</title><rect x="426.5" y="1731.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="429.5" y="1742.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (56 samples, 4.46%)</title><rect x="429.3" y="1731.0" width="52.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="432.3" y="1742.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (55 samples, 4.38%)</title><rect x="430.3" y="1715.0" width="51.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="433.3" y="1726.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (25 samples, 1.99%)</title><rect x="438.7" y="1699.0" width="23.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="441.7" y="1710.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (25 samples, 1.99%)</title><rect x="438.7" y="1683.0" width="23.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="441.7" y="1694.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (12 samples, 0.96%)</title><rect x="451.0" y="1667.0" width="11.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="454.0" y="1678.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (12 samples, 0.96%)</title><rect x="451.0" y="1651.0" width="11.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="454.0" y="1662.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (12 samples, 0.96%)</title><rect x="451.0" y="1635.0" width="11.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="454.0" y="1646.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="462.3" y="1699.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="465.3" y="1710.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="462.3" y="1683.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="465.3" y="1694.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="462.3" y="1667.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="465.3" y="1678.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.08%)</title><rect x="462.3" y="1651.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="465.3" y="1662.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.08%)</title><rect x="462.3" y="1635.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="465.3" y="1646.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (20 samples, 1.59%)</title><rect x="463.2" y="1699.0" width="18.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="466.2" y="1710.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.08%)</title><rect x="472.6" y="1683.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="475.6" y="1694.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (9 samples, 0.72%)</title><rect x="473.5" y="1683.0" width="8.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="476.5" y="1694.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.08%)</title><rect x="473.5" y="1667.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="476.5" y="1678.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.08%)</title><rect x="473.5" y="1651.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="476.5" y="1662.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (8 samples, 0.64%)</title><rect x="474.5" y="1667.0" width="7.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="477.5" y="1678.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.08%)</title><rect x="481.1" y="1651.0" width="0.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="484.1" y="1662.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (10 samples, 0.80%)</title><rect x="482.0" y="1747.0" width="9.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="485.0" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.56%)</title><rect x="484.8" y="1731.0" width="6.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="487.8" y="1742.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (7 samples, 0.56%)</title><rect x="484.8" y="1715.0" width="6.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="487.8" y="1726.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (170 samples, 13.55%)</title><rect x="491.4" y="1747.0" width="159.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="494.4" y="1758.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (168 samples, 13.39%)</title><rect x="491.4" y="1731.0" width="158.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="494.4" y="1742.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (42 samples, 3.35%)</title><rect x="501.7" y="1715.0" width="39.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="504.7" y="1726.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (41 samples, 3.27%)</title><rect x="501.7" y="1699.0" width="38.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="504.7" y="1710.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (20 samples, 1.59%)</title><rect x="508.3" y="1683.0" width="18.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="511.3" y="1694.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (13 samples, 1.04%)</title><rect x="511.1" y="1667.0" width="12.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="514.1" y="1678.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (13 samples, 1.04%)</title><rect x="511.1" y="1651.0" width="12.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="514.1" y="1662.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (13 samples, 1.04%)</title><rect x="511.1" y="1635.0" width="12.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="514.1" y="1646.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (12 samples, 0.96%)</title><rect x="512.1" y="1619.0" width="11.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="515.1" y="1630.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="512.1" y="1603.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="515.1" y="1614.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (4 samples, 0.32%)</title><rect x="513.0" y="1603.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="516.0" y="1614.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="514.0" y="1587.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="517.0" y="1598.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="514.0" y="1571.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="517.0" y="1582.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.16%)</title><rect x="514.9" y="1587.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="517.9" y="1598.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.16%)</title><rect x="514.9" y="1571.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="517.9" y="1582.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="514.9" y="1555.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="517.9" y="1566.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="514.9" y="1539.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="517.9" y="1550.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="515.8" y="1555.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="518.8" y="1566.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (2 samples, 0.16%)</title><rect x="516.8" y="1603.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="519.8" y="1614.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.40%)</title><rect x="518.7" y="1603.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="521.7" y="1614.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.08%)</title><rect x="518.7" y="1587.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="521.7" y="1598.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (4 samples, 0.32%)</title><rect x="519.6" y="1587.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="522.6" y="1598.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="519.6" y="1571.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="522.6" y="1582.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="519.6" y="1555.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="522.6" y="1566.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="519.6" y="1539.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="522.6" y="1550.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.08%)</title><rect x="519.6" y="1523.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="522.6" y="1534.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.08%)</title><rect x="519.6" y="1507.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="522.6" y="1518.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.08%)</title><rect x="519.6" y="1491.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="522.6" y="1502.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (3 samples, 0.24%)</title><rect x="520.5" y="1571.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="523.5" y="1582.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.32%)</title><rect x="523.4" y="1667.0" width="3.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="526.4" y="1678.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.16%)</title><rect x="527.1" y="1683.0" width="1.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="530.1" y="1694.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (12 samples, 0.96%)</title><rect x="529.0" y="1683.0" width="11.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="532.0" y="1694.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.08%)</title><rect x="540.3" y="1699.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="543.3" y="1710.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="540.3" y="1683.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="543.3" y="1694.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="540.3" y="1667.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="543.3" y="1678.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="540.3" y="1651.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="543.3" y="1662.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="540.3" y="1635.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="543.3" y="1646.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (27 samples, 2.15%)</title><rect x="541.2" y="1715.0" width="25.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="544.2" y="1726.0">j..</text>
</g>
<g>
<title>java/lang/Integer.toString (18 samples, 1.43%)</title><rect x="541.2" y="1699.0" width="17.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="544.2" y="1710.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="541.2" y="1683.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="544.2" y="1694.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (17 samples, 1.35%)</title><rect x="542.2" y="1683.0" width="16.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="545.2" y="1694.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (7 samples, 0.56%)</title><rect x="551.6" y="1667.0" width="6.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="554.6" y="1678.0"></text>
</g>
<g>
<title>java/lang/Long.toString (9 samples, 0.72%)</title><rect x="558.2" y="1699.0" width="8.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="561.2" y="1710.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (9 samples, 0.72%)</title><rect x="558.2" y="1683.0" width="8.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="561.2" y="1694.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.32%)</title><rect x="566.6" y="1715.0" width="3.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="569.6" y="1726.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (84 samples, 6.69%)</title><rect x="570.4" y="1715.0" width="79.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="573.4" y="1726.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (83 samples, 6.61%)</title><rect x="571.3" y="1699.0" width="78.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="574.3" y="1710.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (31 samples, 2.47%)</title><rect x="571.3" y="1683.0" width="29.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="574.3" y="1694.0">ch..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (31 samples, 2.47%)</title><rect x="571.3" y="1667.0" width="29.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="574.3" y="1678.0">ja..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (17 samples, 1.35%)</title><rect x="584.5" y="1651.0" width="16.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="587.5" y="1662.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (17 samples, 1.35%)</title><rect x="584.5" y="1635.0" width="16.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="587.5" y="1646.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (17 samples, 1.35%)</title><rect x="584.5" y="1619.0" width="16.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="587.5" y="1630.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.16%)</title><rect x="600.5" y="1683.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="603.5" y="1694.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.16%)</title><rect x="600.5" y="1667.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="603.5" y="1678.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.16%)</title><rect x="600.5" y="1651.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="603.5" y="1662.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.16%)</title><rect x="600.5" y="1635.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="603.5" y="1646.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="601.4" y="1619.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="604.4" y="1630.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (50 samples, 3.98%)</title><rect x="602.4" y="1683.0" width="47.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="605.4" y="1694.0">java..</text>
</g>
<g>
<title>java/util/HashMap.put (48 samples, 3.82%)</title><rect x="604.2" y="1667.0" width="45.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="607.2" y="1678.0">java..</text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.08%)</title><rect x="607.1" y="1651.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="610.1" y="1662.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.08%)</title><rect x="607.1" y="1635.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="610.1" y="1646.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (44 samples, 3.51%)</title><rect x="608.0" y="1651.0" width="41.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="611.0" y="1662.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (4 samples, 0.32%)</title><rect x="629.6" y="1635.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="632.6" y="1646.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (11 samples, 0.88%)</title><rect x="633.4" y="1635.0" width="10.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="636.4" y="1646.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (4 samples, 0.32%)</title><rect x="640.0" y="1619.0" width="3.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="643.0" y="1630.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (4 samples, 0.32%)</title><rect x="640.0" y="1603.0" width="3.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="643.0" y="1614.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (4 samples, 0.32%)</title><rect x="640.0" y="1587.0" width="3.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="643.0" y="1598.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="641.8" y="1571.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="644.8" y="1582.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="642.8" y="1571.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="645.8" y="1582.0"></text>
</g>
<g>
<title>vtable stub (6 samples, 0.48%)</title><rect x="643.7" y="1635.0" width="5.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="646.7" y="1646.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (2 samples, 0.16%)</title><rect x="649.4" y="1731.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="652.4" y="1742.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (2 samples, 0.16%)</title><rect x="649.4" y="1715.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="652.4" y="1726.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.16%)</title><rect x="649.4" y="1699.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="652.4" y="1710.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.16%)</title><rect x="649.4" y="1683.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="652.4" y="1694.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (54 samples, 4.30%)</title><rect x="651.2" y="1747.0" width="50.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="654.2" y="1758.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (53 samples, 4.22%)</title><rect x="652.2" y="1731.0" width="49.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="655.2" y="1742.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$208/1384629197.process (24 samples, 1.91%)</title><rect x="653.1" y="1715.0" width="22.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="656.1" y="1726.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (23 samples, 1.83%)</title><rect x="654.1" y="1699.0" width="21.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="657.1" y="1710.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (23 samples, 1.83%)</title><rect x="654.1" y="1683.0" width="21.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="657.1" y="1694.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.16%)</title><rect x="664.4" y="1667.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="667.4" y="1678.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.16%)</title><rect x="664.4" y="1651.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="667.4" y="1662.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.16%)</title><rect x="664.4" y="1635.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="667.4" y="1646.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.16%)</title><rect x="664.4" y="1619.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="667.4" y="1630.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.08%)</title><rect x="665.3" y="1603.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="668.3" y="1614.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.08%)</title><rect x="665.3" y="1587.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="668.3" y="1598.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (7 samples, 0.56%)</title><rect x="666.3" y="1667.0" width="6.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="669.3" y="1678.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.32%)</title><rect x="669.1" y="1651.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="672.1" y="1662.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.24%)</title><rect x="670.0" y="1635.0" width="2.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="673.0" y="1646.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="672.9" y="1667.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="675.9" y="1678.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="672.9" y="1651.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="675.9" y="1662.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="672.9" y="1635.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="675.9" y="1646.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.incrementAndGet (2 samples, 0.16%)</title><rect x="673.8" y="1667.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="676.8" y="1678.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (5 samples, 0.40%)</title><rect x="675.7" y="1715.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="678.7" y="1726.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.32%)</title><rect x="680.4" y="1715.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="683.4" y="1726.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.32%)</title><rect x="680.4" y="1699.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="683.4" y="1710.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.08%)</title><rect x="684.2" y="1715.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="687.2" y="1726.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.08%)</title><rect x="684.2" y="1699.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="687.2" y="1710.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (7 samples, 0.56%)</title><rect x="685.1" y="1715.0" width="6.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="688.1" y="1726.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.40%)</title><rect x="687.0" y="1699.0" width="4.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="690.0" y="1710.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (5 samples, 0.40%)</title><rect x="687.0" y="1683.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="690.0" y="1694.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (4 samples, 0.32%)</title><rect x="691.7" y="1715.0" width="3.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="694.7" y="1726.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (3 samples, 0.24%)</title><rect x="692.6" y="1699.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="695.6" y="1710.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (7 samples, 0.56%)</title><rect x="695.4" y="1715.0" width="6.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="698.4" y="1726.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.24%)</title><rect x="699.2" y="1699.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="702.2" y="1710.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (2 samples, 0.16%)</title><rect x="700.1" y="1683.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="703.1" y="1694.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.16%)</title><rect x="700.1" y="1667.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="703.1" y="1678.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.16%)</title><rect x="700.1" y="1651.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="703.1" y="1662.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.16%)</title><rect x="700.1" y="1635.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="703.1" y="1646.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="700.1" y="1619.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="703.1" y="1630.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="700.1" y="1603.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="703.1" y="1614.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="701.1" y="1619.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="704.1" y="1630.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (18 samples, 1.43%)</title><rect x="702.0" y="1747.0" width="16.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="705.0" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (18 samples, 1.43%)</title><rect x="702.0" y="1731.0" width="16.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="705.0" y="1742.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.16%)</title><rect x="709.5" y="1715.0" width="1.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="712.5" y="1726.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.16%)</title><rect x="709.5" y="1699.0" width="1.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="712.5" y="1710.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 0.48%)</title><rect x="711.4" y="1715.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="714.4" y="1726.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$294/762552428.accept (4 samples, 0.32%)</title><rect x="711.4" y="1699.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="714.4" y="1710.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$63 (4 samples, 0.32%)</title><rect x="711.4" y="1683.0" width="3.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="714.4" y="1694.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (4 samples, 0.32%)</title><rect x="711.4" y="1667.0" width="3.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="714.4" y="1678.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (4 samples, 0.32%)</title><rect x="711.4" y="1651.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="714.4" y="1662.0"></text>
</g>
<g>
<title>java/time/Duration.create (4 samples, 0.32%)</title><rect x="711.4" y="1635.0" width="3.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="714.4" y="1646.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.16%)</title><rect x="713.3" y="1619.0" width="1.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="716.3" y="1630.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.16%)</title><rect x="713.3" y="1603.0" width="1.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="716.3" y="1614.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$295/1340710628.accept (2 samples, 0.16%)</title><rect x="715.2" y="1699.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="718.2" y="1710.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$62 (2 samples, 0.16%)</title><rect x="715.2" y="1683.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="718.2" y="1694.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$284/982520435.complete (2 samples, 0.16%)</title><rect x="715.2" y="1667.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="718.2" y="1678.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$39 (2 samples, 0.16%)</title><rect x="715.2" y="1651.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="718.2" y="1662.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$283/1049145079.complete (2 samples, 0.16%)</title><rect x="715.2" y="1635.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="718.2" y="1646.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$69 (2 samples, 0.16%)</title><rect x="715.2" y="1619.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="718.2" y="1630.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (2 samples, 0.16%)</title><rect x="715.2" y="1603.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="718.2" y="1614.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (2 samples, 0.16%)</title><rect x="715.2" y="1587.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="718.2" y="1598.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (2 samples, 0.16%)</title><rect x="715.2" y="1571.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="718.2" y="1582.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.16%)</title><rect x="715.2" y="1555.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="718.2" y="1566.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (1 samples, 0.08%)</title><rect x="717.1" y="1715.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="720.1" y="1726.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="718.0" y="1715.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="721.0" y="1726.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (19 samples, 1.51%)</title><rect x="718.9" y="1763.0" width="17.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="721.9" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (19 samples, 1.51%)</title><rect x="718.9" y="1747.0" width="17.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="721.9" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (1 samples, 0.08%)</title><rect x="718.9" y="1731.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="721.9" y="1742.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (18 samples, 1.43%)</title><rect x="719.9" y="1731.0" width="16.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="722.9" y="1742.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$294/762552428.accept (2 samples, 0.16%)</title><rect x="719.9" y="1715.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="722.9" y="1726.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$63 (2 samples, 0.16%)</title><rect x="719.9" y="1699.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="722.9" y="1710.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (2 samples, 0.16%)</title><rect x="719.9" y="1683.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="722.9" y="1694.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.16%)</title><rect x="719.9" y="1667.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="722.9" y="1678.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.16%)</title><rect x="719.9" y="1651.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="722.9" y="1662.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$295/1340710628.accept (16 samples, 1.27%)</title><rect x="721.8" y="1715.0" width="15.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="724.8" y="1726.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$62 (16 samples, 1.27%)</title><rect x="721.8" y="1699.0" width="15.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="724.8" y="1710.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$284/982520435.complete (16 samples, 1.27%)</title><rect x="721.8" y="1683.0" width="15.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="724.8" y="1694.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$39 (16 samples, 1.27%)</title><rect x="721.8" y="1667.0" width="15.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="724.8" y="1678.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$283/1049145079.complete (15 samples, 1.20%)</title><rect x="722.7" y="1651.0" width="14.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="725.7" y="1662.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$69 (15 samples, 1.20%)</title><rect x="722.7" y="1635.0" width="14.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="725.7" y="1646.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (15 samples, 1.20%)</title><rect x="722.7" y="1619.0" width="14.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="725.7" y="1630.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (15 samples, 1.20%)</title><rect x="722.7" y="1603.0" width="14.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="725.7" y="1614.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (15 samples, 1.20%)</title><rect x="722.7" y="1587.0" width="14.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="725.7" y="1598.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (15 samples, 1.20%)</title><rect x="722.7" y="1571.0" width="14.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="725.7" y="1582.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.32%)</title><rect x="736.8" y="1763.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="739.8" y="1774.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.32%)</title><rect x="736.8" y="1747.0" width="3.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="739.8" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (7 samples, 0.56%)</title><rect x="740.6" y="1779.0" width="6.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="743.6" y="1790.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.48%)</title><rect x="741.5" y="1763.0" width="5.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="744.5" y="1774.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.48%)</title><rect x="741.5" y="1747.0" width="5.6" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="744.5" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.08%)</title><rect x="747.1" y="1827.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="750.1" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.08%)</title><rect x="747.1" y="1811.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="750.1" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.08%)</title><rect x="747.1" y="1795.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="750.1" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.08%)</title><rect x="747.1" y="1779.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="750.1" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (212 samples, 16.89%)</title><rect x="748.1" y="1827.0" width="199.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="751.1" y="1838.0">java/util/concurrent/Threa..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (212 samples, 16.89%)</title><rect x="748.1" y="1811.0" width="199.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="751.1" y="1822.0">java/util/concurrent/Linke..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (199 samples, 15.86%)</title><rect x="757.5" y="1795.0" width="187.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="760.5" y="1806.0">java/util/concurrent/loc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.08%)</title><rect x="768.8" y="1779.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="771.8" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.08%)</title><rect x="768.8" y="1763.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="771.8" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.08%)</title><rect x="768.8" y="1747.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="771.8" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.08%)</title><rect x="768.8" y="1731.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="771.8" y="1742.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (11 samples, 0.88%)</title><rect x="769.7" y="1779.0" width="10.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="772.7" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (11 samples, 0.88%)</title><rect x="769.7" y="1763.0" width="10.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="772.7" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (174 samples, 13.86%)</title><rect x="780.1" y="1779.0" width="163.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="783.1" y="1790.0">java/util/concurrent/..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (155 samples, 12.35%)</title><rect x="797.9" y="1763.0" width="145.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="800.9" y="1774.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.08%)</title><rect x="802.6" y="1747.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="805.6" y="1758.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (3 samples, 0.24%)</title><rect x="803.6" y="1747.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="806.6" y="1758.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.16%)</title><rect x="806.4" y="1747.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="809.4" y="1758.0"></text>
</g>
<g>
<title>Unsafe_Park (140 samples, 11.16%)</title><rect x="808.3" y="1747.0" width="131.6" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="811.3" y="1758.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.16%)</title><rect x="810.1" y="1731.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="813.1" y="1742.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (2 samples, 0.16%)</title><rect x="812.0" y="1731.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="815.0" y="1742.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (23 samples, 1.83%)</title><rect x="813.9" y="1731.0" width="21.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="816.9" y="1742.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (5 samples, 0.40%)</title><rect x="822.4" y="1715.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="825.4" y="1726.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.24%)</title><rect x="822.4" y="1699.0" width="2.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="825.4" y="1710.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (3 samples, 0.24%)</title><rect x="822.4" y="1683.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="825.4" y="1694.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.08%)</title><rect x="825.2" y="1699.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="828.2" y="1710.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="826.1" y="1699.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="829.1" y="1710.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.08%)</title><rect x="827.1" y="1715.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="830.1" y="1726.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (7 samples, 0.56%)</title><rect x="828.0" y="1715.0" width="6.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="831.0" y="1726.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="834.6" y="1715.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="837.6" y="1726.0"></text>
</g>
<g>
<title>__lll_lock_wait (9 samples, 0.72%)</title><rect x="835.5" y="1731.0" width="8.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="838.5" y="1742.0"></text>
</g>
<g>
<title>__lll_unlock_wake (30 samples, 2.39%)</title><rect x="844.0" y="1731.0" width="28.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="847.0" y="1742.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (49 samples, 3.90%)</title><rect x="872.2" y="1731.0" width="46.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="875.2" y="1742.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (11 samples, 0.88%)</title><rect x="918.3" y="1731.0" width="10.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="921.3" y="1742.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.08%)</title><rect x="928.6" y="1731.0" width="1.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="931.6" y="1742.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.16%)</title><rect x="929.6" y="1731.0" width="1.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="932.6" y="1742.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.32%)</title><rect x="931.4" y="1731.0" width="3.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="934.4" y="1742.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (3 samples, 0.24%)</title><rect x="935.2" y="1731.0" width="2.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="938.2" y="1742.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.08%)</title><rect x="938.0" y="1731.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="941.0" y="1742.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="939.0" y="1731.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="942.0" y="1742.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.08%)</title><rect x="939.9" y="1747.0" width="0.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="942.9" y="1758.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.24%)</title><rect x="940.8" y="1747.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="943.8" y="1758.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.08%)</title><rect x="943.7" y="1779.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="946.7" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.08%)</title><rect x="944.6" y="1795.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="947.6" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.08%)</title><rect x="944.6" y="1779.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="947.6" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="944.6" y="1763.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="947.6" y="1774.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="944.6" y="1747.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="947.6" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="944.6" y="1731.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="947.6" y="1742.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.16%)</title><rect x="945.5" y="1795.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="948.5" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.16%)</title><rect x="945.5" y="1779.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="948.5" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.16%)</title><rect x="945.5" y="1763.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="948.5" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.16%)</title><rect x="945.5" y="1747.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="948.5" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.08%)</title><rect x="947.4" y="1875.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="950.4" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.08%)</title><rect x="947.4" y="1859.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="950.4" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="947.4" y="1843.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="950.4" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.08%)</title><rect x="947.4" y="1827.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="950.4" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.08%)</title><rect x="947.4" y="1811.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="950.4" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.08%)</title><rect x="947.4" y="1795.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="950.4" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.08%)</title><rect x="947.4" y="1779.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="950.4" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.08%)</title><rect x="947.4" y="1763.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="950.4" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.08%)</title><rect x="947.4" y="1747.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="950.4" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.handleResponse (1 samples, 0.08%)</title><rect x="947.4" y="1731.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="950.4" y="1742.0"></text>
</g>
<g>
<title>start_thread (257 samples, 20.48%)</title><rect x="948.4" y="1875.0" width="241.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="951.4" y="1886.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (257 samples, 20.48%)</title><rect x="948.4" y="1859.0" width="241.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="951.4" y="1870.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (18 samples, 1.43%)</title><rect x="948.4" y="1843.0" width="16.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="951.4" y="1854.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (7 samples, 0.56%)</title><rect x="948.4" y="1827.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="951.4" y="1838.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 0.56%)</title><rect x="948.4" y="1811.0" width="6.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="951.4" y="1822.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (6 samples, 0.48%)</title><rect x="948.4" y="1795.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="951.4" y="1806.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.08%)</title><rect x="954.0" y="1795.0" width="0.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="957.0" y="1806.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (11 samples, 0.88%)</title><rect x="954.9" y="1827.0" width="10.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="957.9" y="1838.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.24%)</title><rect x="954.9" y="1811.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="957.9" y="1822.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.24%)</title><rect x="954.9" y="1795.0" width="2.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="957.9" y="1806.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (4 samples, 0.32%)</title><rect x="957.8" y="1811.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="960.8" y="1822.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.08%)</title><rect x="957.8" y="1795.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="960.8" y="1806.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.08%)</title><rect x="957.8" y="1779.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="960.8" y="1790.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.08%)</title><rect x="957.8" y="1763.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="960.8" y="1774.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.08%)</title><rect x="957.8" y="1747.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="960.8" y="1758.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.24%)</title><rect x="958.7" y="1795.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="961.7" y="1806.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (3 samples, 0.24%)</title><rect x="958.7" y="1779.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="961.7" y="1790.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (4 samples, 0.32%)</title><rect x="961.5" y="1811.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="964.5" y="1822.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (4 samples, 0.32%)</title><rect x="961.5" y="1795.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="964.5" y="1806.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (2 samples, 0.16%)</title><rect x="961.5" y="1779.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="964.5" y="1790.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (2 samples, 0.16%)</title><rect x="961.5" y="1763.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="964.5" y="1774.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (2 samples, 0.16%)</title><rect x="961.5" y="1747.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="964.5" y="1758.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (2 samples, 0.16%)</title><rect x="961.5" y="1731.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="964.5" y="1742.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.16%)</title><rect x="961.5" y="1715.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="964.5" y="1726.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.08%)</title><rect x="961.5" y="1699.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="964.5" y="1710.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.08%)</title><rect x="962.5" y="1699.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="965.5" y="1710.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.16%)</title><rect x="963.4" y="1779.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="966.4" y="1790.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (2 samples, 0.16%)</title><rect x="963.4" y="1763.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="966.4" y="1774.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (2 samples, 0.16%)</title><rect x="963.4" y="1747.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="966.4" y="1758.0"></text>
</g>
<g>
<title>HeapRegionRemSetIterator::HeapRegionRemSetIterator(HeapRegionRemSet*) (1 samples, 0.08%)</title><rect x="963.4" y="1731.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="966.4" y="1742.0"></text>
</g>
<g>
<title>HeapRegionRemSetIterator::has_next(unsigned long&amp;) (1 samples, 0.08%)</title><rect x="964.3" y="1731.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="967.3" y="1742.0"></text>
</g>
<g>
<title>RSHashTableIter::has_next(unsigned long&amp;) (1 samples, 0.08%)</title><rect x="964.3" y="1715.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="967.3" y="1726.0"></text>
</g>
<g>
<title>JavaThread::run() (236 samples, 18.80%)</title><rect x="965.3" y="1843.0" width="221.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="968.3" y="1854.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (236 samples, 18.80%)</title><rect x="965.3" y="1827.0" width="221.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="968.3" y="1838.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (235 samples, 18.73%)</title><rect x="965.3" y="1811.0" width="220.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="968.3" y="1822.0">CompileBroker::compiler_threa..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (235 samples, 18.73%)</title><rect x="965.3" y="1795.0" width="220.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="968.3" y="1806.0">CompileBroker::invoke_compile..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (233 samples, 18.57%)</title><rect x="965.3" y="1779.0" width="219.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="968.3" y="1790.0">C2Compiler::compile_method(ci..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (233 samples, 18.57%)</title><rect x="965.3" y="1763.0" width="219.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="968.3" y="1774.0">Compile::Compile(ciEnv*, C2Co..</text>
</g>
<g>
<title>Compile::Code_Gen() (65 samples, 5.18%)</title><rect x="965.3" y="1747.0" width="61.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="968.3" y="1758.0">Compil..</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (6 samples, 0.48%)</title><rect x="965.3" y="1731.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="968.3" y="1742.0"></text>
</g>
<g>
<title>Compile::FillExceptionTables(unsigned int, unsigned int*, unsigned int*, Label*) (1 samples, 0.08%)</title><rect x="966.2" y="1715.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="969.2" y="1726.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.16%)</title><rect x="967.2" y="1715.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="970.2" y="1726.0"></text>
</g>
<g>
<title>DebugInformationRecorder::add_safepoint(int, OopMap*) (1 samples, 0.08%)</title><rect x="967.2" y="1699.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="970.2" y="1710.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.08%)</title><rect x="968.1" y="1699.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="971.1" y="1710.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.08%)</title><rect x="968.1" y="1683.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="971.1" y="1694.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.08%)</title><rect x="969.0" y="1715.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="972.0" y="1726.0"></text>
</g>
<g>
<title>JVMState::of_depth(int) const (1 samples, 0.08%)</title><rect x="970.0" y="1715.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="973.0" y="1726.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.08%)</title><rect x="970.9" y="1731.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="973.9" y="1742.0"></text>
</g>
<g>
<title>Matcher::match() (8 samples, 0.64%)</title><rect x="971.9" y="1731.0" width="7.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="974.9" y="1742.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.08%)</title><rect x="971.9" y="1715.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="974.9" y="1726.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (7 samples, 0.56%)</title><rect x="972.8" y="1715.0" width="6.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="975.8" y="1726.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.16%)</title><rect x="973.7" y="1699.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="976.7" y="1710.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 0.24%)</title><rect x="975.6" y="1699.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="978.6" y="1710.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.16%)</title><rect x="975.6" y="1683.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="978.6" y="1694.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.08%)</title><rect x="977.5" y="1683.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="980.5" y="1694.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.08%)</title><rect x="977.5" y="1667.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="980.5" y="1678.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.08%)</title><rect x="978.4" y="1699.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="981.4" y="1710.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.16%)</title><rect x="979.4" y="1731.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="982.4" y="1742.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.16%)</title><rect x="979.4" y="1715.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="982.4" y="1726.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.16%)</title><rect x="979.4" y="1699.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="982.4" y="1710.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.08%)</title><rect x="979.4" y="1683.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="982.4" y="1694.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.08%)</title><rect x="980.3" y="1683.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="983.3" y="1694.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.08%)</title><rect x="980.3" y="1667.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="983.3" y="1678.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.08%)</title><rect x="981.3" y="1731.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="984.3" y="1742.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (47 samples, 3.75%)</title><rect x="982.2" y="1731.0" width="44.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="985.2" y="1742.0">Phas..</text>
</g>
<g>
<title>JVMState::debug_end() const (1 samples, 0.08%)</title><rect x="982.2" y="1715.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="985.2" y="1726.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.08%)</title><rect x="983.1" y="1715.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="986.1" y="1726.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.08%)</title><rect x="983.1" y="1699.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="986.1" y="1710.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (6 samples, 0.48%)</title><rect x="984.1" y="1715.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="987.1" y="1726.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.08%)</title><rect x="985.0" y="1699.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="988.0" y="1710.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="986.0" y="1699.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="989.0" y="1710.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (3 samples, 0.24%)</title><rect x="986.9" y="1699.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="989.9" y="1710.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.24%)</title><rect x="986.9" y="1683.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="989.9" y="1694.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (8 samples, 0.64%)</title><rect x="989.7" y="1715.0" width="7.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="992.7" y="1726.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.08%)</title><rect x="995.4" y="1699.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="998.4" y="1710.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.08%)</title><rect x="995.4" y="1683.0" width="0.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="998.4" y="1694.0"></text>
</g>
<g>
<title>loadNNode::rule() const (1 samples, 0.08%)</title><rect x="996.3" y="1699.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="999.3" y="1710.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (10 samples, 0.80%)</title><rect x="997.3" y="1715.0" width="9.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1000.3" y="1726.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1001.0" y="1699.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1004.0" y="1710.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 0.32%)</title><rect x="1002.0" y="1699.0" width="3.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1005.0" y="1710.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1003.8" y="1683.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1006.8" y="1694.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="1004.8" y="1683.0" width="0.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1007.8" y="1694.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.08%)</title><rect x="1005.7" y="1699.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1008.7" y="1710.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.08%)</title><rect x="1006.7" y="1715.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1009.7" y="1726.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.08%)</title><rect x="1006.7" y="1699.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1009.7" y="1710.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.08%)</title><rect x="1007.6" y="1715.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1010.6" y="1726.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.08%)</title><rect x="1007.6" y="1699.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1010.6" y="1710.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.24%)</title><rect x="1008.5" y="1715.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1011.5" y="1726.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.16%)</title><rect x="1009.5" y="1699.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1012.5" y="1710.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1010.4" y="1683.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1013.4" y="1694.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.08%)</title><rect x="1010.4" y="1667.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1013.4" y="1678.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.08%)</title><rect x="1011.4" y="1715.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1014.4" y="1726.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.08%)</title><rect x="1012.3" y="1715.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1015.3" y="1726.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.08%)</title><rect x="1012.3" y="1699.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1015.3" y="1710.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.08%)</title><rect x="1012.3" y="1683.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1015.3" y="1694.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.08%)</title><rect x="1012.3" y="1667.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1015.3" y="1678.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (3 samples, 0.24%)</title><rect x="1013.2" y="1715.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1016.2" y="1726.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.08%)</title><rect x="1014.2" y="1699.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1017.2" y="1710.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1015.1" y="1699.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1018.1" y="1710.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.08%)</title><rect x="1016.1" y="1715.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1019.1" y="1726.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.16%)</title><rect x="1017.0" y="1715.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1020.0" y="1726.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 0.16%)</title><rect x="1017.0" y="1699.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1020.0" y="1710.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (7 samples, 0.56%)</title><rect x="1018.9" y="1715.0" width="6.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1021.9" y="1726.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.24%)</title><rect x="1022.6" y="1699.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1025.6" y="1710.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.08%)</title><rect x="1025.5" y="1715.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1028.5" y="1726.0"></text>
</g>
<g>
<title>Compile::Optimize() (159 samples, 12.67%)</title><rect x="1026.4" y="1747.0" width="149.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1029.4" y="1758.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.08%)</title><rect x="1026.4" y="1731.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1029.4" y="1742.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.08%)</title><rect x="1026.4" y="1715.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1029.4" y="1726.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.08%)</title><rect x="1026.4" y="1699.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1029.4" y="1710.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1026.4" y="1683.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1029.4" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (5 samples, 0.40%)</title><rect x="1027.3" y="1731.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1030.3" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (5 samples, 0.40%)</title><rect x="1027.3" y="1715.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1030.3" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::add_final_edges(Node*) (1 samples, 0.08%)</title><rect x="1027.3" y="1699.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1030.3" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.08%)</title><rect x="1027.3" y="1683.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1030.3" y="1694.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.08%)</title><rect x="1027.3" y="1667.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1030.3" y="1678.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.08%)</title><rect x="1027.3" y="1651.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1030.3" y="1662.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.08%)</title><rect x="1027.3" y="1635.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1030.3" y="1646.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.08%)</title><rect x="1027.3" y="1619.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1030.3" y="1630.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="1027.3" y="1603.0" width="1.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1030.3" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (4 samples, 0.32%)</title><rect x="1028.3" y="1699.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1031.3" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.32%)</title><rect x="1028.3" y="1683.0" width="3.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1031.3" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1028.3" y="1667.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1031.3" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1028.3" y="1651.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1031.3" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1028.3" y="1635.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1031.3" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1028.3" y="1619.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1031.3" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1028.3" y="1603.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1031.3" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1028.3" y="1587.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1031.3" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1028.3" y="1571.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1031.3" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="1028.3" y="1555.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1031.3" y="1566.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="1028.3" y="1539.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1031.3" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.24%)</title><rect x="1029.2" y="1667.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1032.2" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="1029.2" y="1651.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1032.2" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.16%)</title><rect x="1030.2" y="1651.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1033.2" y="1662.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="1030.2" y="1635.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1033.2" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="1635.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1034.1" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="1619.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1034.1" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="1603.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1034.1" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="1587.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1034.1" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="1571.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1034.1" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="1555.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1034.1" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="1539.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1034.1" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="1523.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1034.1" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="1507.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1034.1" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="1491.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1034.1" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="1475.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1034.1" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="1459.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1034.1" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="1443.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1034.1" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="1427.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1034.1" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="1411.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1034.1" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="1395.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1034.1" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="1379.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1034.1" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="1363.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1034.1" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="1347.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1034.1" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="1331.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1034.1" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="1315.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1034.1" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="1299.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1034.1" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="1283.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1034.1" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="1267.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1034.1" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="1251.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1034.1" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="1235.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1034.1" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="1219.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1034.1" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="1203.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1034.1" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="1187.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1034.1" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="1171.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1034.1" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="1155.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1034.1" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="1139.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1034.1" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="1123.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1034.1" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="1107.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1034.1" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="1091.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1034.1" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="1075.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1034.1" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="1059.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1034.1" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="1043.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1034.1" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="1027.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1034.1" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="1011.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1034.1" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="995.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1034.1" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="979.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1034.1" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="963.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1034.1" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="947.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1034.1" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="931.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1034.1" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="915.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1034.1" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="899.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1034.1" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="883.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1034.1" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="867.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1034.1" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="851.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1034.1" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="835.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1034.1" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="819.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1034.1" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="803.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1034.1" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="787.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1034.1" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="771.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1034.1" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="755.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1034.1" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="739.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1034.1" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="723.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1034.1" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="707.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1034.1" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="691.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1034.1" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="675.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1034.1" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="659.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1034.1" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="643.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1034.1" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="627.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1034.1" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="611.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1034.1" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="595.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1034.1" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="579.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1034.1" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="563.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1034.1" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="547.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1034.1" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="531.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1034.1" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="515.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1034.1" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="499.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1034.1" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="483.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1034.1" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="467.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1034.1" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="451.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1034.1" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="435.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1034.1" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="419.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1034.1" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="403.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1034.1" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="387.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1034.1" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="371.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1034.1" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="355.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1034.1" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="339.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1034.1" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="323.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1034.1" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="307.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1034.1" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="291.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1034.1" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="275.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1034.1" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="259.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1034.1" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="243.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1034.1" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="227.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1034.1" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="211.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1034.1" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="195.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1034.1" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="179.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1034.1" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="163.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1034.1" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="147.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1034.1" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="131.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1034.1" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="115.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1034.1" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="99.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1034.1" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="83.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1034.1" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="67.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1034.1" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="51.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1034.1" y="62.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="1031.1" y="35.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1034.1" y="46.0"></text>
</g>
<g>
<title>IfNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1032.0" y="1731.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1035.0" y="1742.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.08%)</title><rect x="1033.0" y="1731.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1036.0" y="1742.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1033.0" y="1715.0" width="0.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1036.0" y="1726.0"></text>
</g>
<g>
<title>PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;, bool, bool) (1 samples, 0.08%)</title><rect x="1033.9" y="1731.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1036.9" y="1742.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1033.9" y="1715.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1036.9" y="1726.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (130 samples, 10.36%)</title><rect x="1034.9" y="1731.0" width="122.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1037.9" y="1742.0">PhaseIdealLoop:..</text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.08%)</title><rect x="1034.9" y="1715.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1037.9" y="1726.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.08%)</title><rect x="1034.9" y="1699.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1037.9" y="1710.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.08%)</title><rect x="1034.9" y="1683.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1037.9" y="1694.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.08%)</title><rect x="1034.9" y="1667.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1037.9" y="1678.0"></text>
</g>
<g>
<title>ProjNode::is_uncommon_trap_if_pattern(Deoptimization::DeoptReason) (1 samples, 0.08%)</title><rect x="1034.9" y="1651.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1037.9" y="1662.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.08%)</title><rect x="1035.8" y="1715.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1038.8" y="1726.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 0.48%)</title><rect x="1036.7" y="1715.0" width="5.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1039.7" y="1726.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.08%)</title><rect x="1037.7" y="1699.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1040.7" y="1710.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (4 samples, 0.32%)</title><rect x="1038.6" y="1699.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1041.6" y="1710.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.16%)</title><rect x="1040.5" y="1683.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1043.5" y="1694.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (111 samples, 8.84%)</title><rect x="1042.4" y="1715.0" width="104.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1045.4" y="1726.0">PhaseIdealLo..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (108 samples, 8.61%)</title><rect x="1045.2" y="1699.0" width="101.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1048.2" y="1710.0">PhaseIdealLo..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (5 samples, 0.40%)</title><rect x="1046.1" y="1683.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1049.1" y="1694.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (102 samples, 8.13%)</title><rect x="1050.8" y="1683.0" width="95.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1053.8" y="1694.0">PhaseIdealL..</text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.08%)</title><rect x="1125.1" y="1667.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1128.1" y="1678.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.08%)</title><rect x="1125.1" y="1651.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1128.1" y="1662.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.08%)</title><rect x="1125.1" y="1635.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1128.1" y="1646.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.08%)</title><rect x="1125.1" y="1619.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1128.1" y="1630.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.08%)</title><rect x="1125.1" y="1603.0" width="1.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1128.1" y="1614.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.08%)</title><rect x="1126.1" y="1667.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1129.1" y="1678.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1126.1" y="1651.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1129.1" y="1662.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (21 samples, 1.67%)</title><rect x="1127.0" y="1667.0" width="19.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1130.0" y="1678.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (3 samples, 0.24%)</title><rect x="1146.7" y="1715.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1149.7" y="1726.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.08%)</title><rect x="1147.7" y="1699.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.7" y="1710.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.08%)</title><rect x="1148.6" y="1699.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1151.6" y="1710.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (4 samples, 0.32%)</title><rect x="1149.6" y="1715.0" width="3.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1152.6" y="1726.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.08%)</title><rect x="1151.5" y="1699.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1154.5" y="1710.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.08%)</title><rect x="1152.4" y="1699.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.4" y="1710.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.08%)</title><rect x="1152.4" y="1683.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1155.4" y="1694.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.08%)</title><rect x="1152.4" y="1667.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.4" y="1678.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.32%)</title><rect x="1153.3" y="1715.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1156.3" y="1726.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.08%)</title><rect x="1153.3" y="1699.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1156.3" y="1710.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.08%)</title><rect x="1153.3" y="1683.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.3" y="1694.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.24%)</title><rect x="1154.3" y="1699.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1157.3" y="1710.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1154.3" y="1683.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.3" y="1694.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1155.2" y="1683.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.2" y="1694.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.08%)</title><rect x="1156.2" y="1683.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.2" y="1694.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.08%)</title><rect x="1157.1" y="1731.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.1" y="1742.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.08%)</title><rect x="1157.1" y="1715.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.1" y="1726.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.08%)</title><rect x="1157.1" y="1699.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.1" y="1710.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (14 samples, 1.12%)</title><rect x="1158.0" y="1731.0" width="13.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.0" y="1742.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (13 samples, 1.04%)</title><rect x="1158.0" y="1715.0" width="12.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.0" y="1726.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1158.0" y="1699.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.0" y="1710.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1158.0" y="1683.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.0" y="1694.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1159.0" y="1699.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.0" y="1710.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1159.0" y="1683.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.0" y="1694.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (4 samples, 0.32%)</title><rect x="1159.9" y="1699.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.9" y="1710.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1159.9" y="1683.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1162.9" y="1694.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.08%)</title><rect x="1159.9" y="1667.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1162.9" y="1678.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1159.9" y="1651.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.9" y="1662.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1159.9" y="1635.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.9" y="1646.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1159.9" y="1619.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.9" y="1630.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1159.9" y="1603.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.9" y="1614.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.08%)</title><rect x="1159.9" y="1587.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.9" y="1598.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.08%)</title><rect x="1159.9" y="1571.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.9" y="1582.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (2 samples, 0.16%)</title><rect x="1160.9" y="1683.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.9" y="1694.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (2 samples, 0.16%)</title><rect x="1160.9" y="1667.0" width="1.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1163.9" y="1678.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.16%)</title><rect x="1160.9" y="1651.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.9" y="1662.0"></text>
</g>
<g>
<title>MemNode::memory_size() const (1 samples, 0.08%)</title><rect x="1162.7" y="1683.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.7" y="1694.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.08%)</title><rect x="1163.7" y="1699.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.7" y="1710.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (5 samples, 0.40%)</title><rect x="1164.6" y="1699.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.6" y="1710.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (3 samples, 0.24%)</title><rect x="1166.5" y="1683.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.5" y="1694.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (3 samples, 0.24%)</title><rect x="1166.5" y="1667.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.5" y="1678.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1169.3" y="1699.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.3" y="1710.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.08%)</title><rect x="1169.3" y="1683.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.3" y="1694.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1169.3" y="1667.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.3" y="1678.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1169.3" y="1651.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.3" y="1662.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1169.3" y="1635.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.3" y="1646.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1169.3" y="1619.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.3" y="1630.0"></text>
</g>
<g>
<title>RegionNode::Identity(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1170.3" y="1715.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.3" y="1726.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.08%)</title><rect x="1171.2" y="1731.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.2" y="1742.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.08%)</title><rect x="1171.2" y="1715.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.2" y="1726.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1171.2" y="1699.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.2" y="1710.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1171.2" y="1683.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.2" y="1694.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1171.2" y="1667.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.2" y="1678.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1171.2" y="1651.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.2" y="1662.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.08%)</title><rect x="1171.2" y="1635.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.2" y="1646.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.08%)</title><rect x="1171.2" y="1619.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.2" y="1630.0"></text>
</g>
<g>
<title>TypeOopPtr::eq(Type const*) const (1 samples, 0.08%)</title><rect x="1171.2" y="1603.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.2" y="1614.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.16%)</title><rect x="1172.1" y="1731.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.1" y="1742.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.08%)</title><rect x="1172.1" y="1715.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.1" y="1726.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.08%)</title><rect x="1172.1" y="1699.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.1" y="1710.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1172.1" y="1683.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.1" y="1694.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.08%)</title><rect x="1172.1" y="1667.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.1" y="1678.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1172.1" y="1651.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.1" y="1662.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.08%)</title><rect x="1173.1" y="1715.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.1" y="1726.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.08%)</title><rect x="1173.1" y="1699.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.1" y="1710.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1173.1" y="1683.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.1" y="1694.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.08%)</title><rect x="1173.1" y="1667.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.1" y="1678.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1173.1" y="1651.0" width="0.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1176.1" y="1662.0"></text>
</g>
<g>
<title>ResourceMark::~ResourceMark() (1 samples, 0.08%)</title><rect x="1174.0" y="1731.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.0" y="1742.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.08%)</title><rect x="1174.0" y="1715.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.0" y="1726.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1175.0" y="1731.0" width="0.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1178.0" y="1742.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.56%)</title><rect x="1175.9" y="1747.0" width="6.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.9" y="1758.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.56%)</title><rect x="1175.9" y="1731.0" width="6.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.9" y="1742.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.56%)</title><rect x="1175.9" y="1715.0" width="6.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.9" y="1726.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.56%)</title><rect x="1175.9" y="1699.0" width="6.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.9" y="1710.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.56%)</title><rect x="1175.9" y="1683.0" width="6.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.9" y="1694.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.48%)</title><rect x="1175.9" y="1667.0" width="5.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.9" y="1678.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.48%)</title><rect x="1175.9" y="1651.0" width="5.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.9" y="1662.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.48%)</title><rect x="1175.9" y="1635.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.9" y="1646.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.48%)</title><rect x="1175.9" y="1619.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.9" y="1630.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.48%)</title><rect x="1175.9" y="1603.0" width="5.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.9" y="1614.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.48%)</title><rect x="1175.9" y="1587.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.9" y="1598.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.48%)</title><rect x="1175.9" y="1571.0" width="5.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.9" y="1582.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1175.9" y="1555.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.9" y="1566.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1175.9" y="1539.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.9" y="1550.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1175.9" y="1523.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.9" y="1534.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1175.9" y="1507.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.9" y="1518.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1175.9" y="1491.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.9" y="1502.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1175.9" y="1475.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.9" y="1486.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1175.9" y="1459.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.9" y="1470.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1175.9" y="1443.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.9" y="1454.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1175.9" y="1427.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.9" y="1438.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.08%)</title><rect x="1175.9" y="1411.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.9" y="1422.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1175.9" y="1395.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.9" y="1406.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1175.9" y="1379.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.9" y="1390.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1175.9" y="1363.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.9" y="1374.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.08%)</title><rect x="1175.9" y="1347.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.9" y="1358.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.40%)</title><rect x="1176.8" y="1555.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.8" y="1566.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.40%)</title><rect x="1176.8" y="1539.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.8" y="1550.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.40%)</title><rect x="1176.8" y="1523.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.8" y="1534.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.40%)</title><rect x="1176.8" y="1507.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.8" y="1518.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.40%)</title><rect x="1176.8" y="1491.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.8" y="1502.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.40%)</title><rect x="1176.8" y="1475.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.8" y="1486.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.40%)</title><rect x="1176.8" y="1459.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.8" y="1470.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.40%)</title><rect x="1176.8" y="1443.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.8" y="1454.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.40%)</title><rect x="1176.8" y="1427.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.8" y="1438.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.40%)</title><rect x="1176.8" y="1411.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.8" y="1422.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.40%)</title><rect x="1176.8" y="1395.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.8" y="1406.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.40%)</title><rect x="1176.8" y="1379.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.8" y="1390.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.24%)</title><rect x="1176.8" y="1363.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.8" y="1374.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.24%)</title><rect x="1176.8" y="1347.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.8" y="1358.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.24%)</title><rect x="1176.8" y="1331.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.8" y="1342.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.24%)</title><rect x="1176.8" y="1315.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.8" y="1326.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.24%)</title><rect x="1176.8" y="1299.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.8" y="1310.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.24%)</title><rect x="1176.8" y="1283.0" width="2.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.8" y="1294.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.08%)</title><rect x="1176.8" y="1267.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.8" y="1278.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.08%)</title><rect x="1176.8" y="1251.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.8" y="1262.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.08%)</title><rect x="1176.8" y="1235.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.8" y="1246.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1176.8" y="1219.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.8" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1177.8" y="1267.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.8" y="1278.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1177.8" y="1251.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.8" y="1262.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1177.8" y="1235.0" width="1.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.8" y="1246.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1177.8" y="1219.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.8" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1177.8" y="1203.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.8" y="1214.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1177.8" y="1187.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.8" y="1198.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.8" y="1171.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.8" y="1182.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1177.8" y="1155.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.8" y="1166.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1177.8" y="1139.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.8" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1177.8" y="1123.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.8" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1177.8" y="1107.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.8" y="1118.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1177.8" y="1091.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.8" y="1102.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.08%)</title><rect x="1177.8" y="1075.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.8" y="1086.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.08%)</title><rect x="1177.8" y="1059.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.8" y="1070.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.08%)</title><rect x="1177.8" y="1043.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.8" y="1054.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1177.8" y="1027.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.8" y="1038.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1178.7" y="1171.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.7" y="1182.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1178.7" y="1155.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.7" y="1166.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1178.7" y="1139.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.7" y="1150.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1178.7" y="1123.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.7" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1178.7" y="1107.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.7" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1178.7" y="1091.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.7" y="1102.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1178.7" y="1075.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.7" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1178.7" y="1059.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.7" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1178.7" y="1043.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.7" y="1054.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.08%)</title><rect x="1178.7" y="1027.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.7" y="1038.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1178.7" y="1011.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.7" y="1022.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1178.7" y="995.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.7" y="1006.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1179.7" y="1363.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.7" y="1374.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1179.7" y="1347.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.7" y="1358.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1179.7" y="1331.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.7" y="1342.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1179.7" y="1315.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.7" y="1326.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1179.7" y="1299.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.7" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1179.7" y="1283.0" width="1.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.7" y="1294.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1179.7" y="1267.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.7" y="1278.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1179.7" y="1251.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.7" y="1262.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1179.7" y="1235.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.7" y="1246.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1179.7" y="1219.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.7" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1179.7" y="1203.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.7" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1179.7" y="1187.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.7" y="1198.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1179.7" y="1171.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.7" y="1182.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.7" y="1155.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.7" y="1166.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1179.7" y="1139.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.7" y="1150.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1179.7" y="1123.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.7" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1179.7" y="1107.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.7" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1179.7" y="1091.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.7" y="1102.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1179.7" y="1075.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.7" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.7" y="1059.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.7" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1179.7" y="1043.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.7" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1179.7" y="1027.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.7" y="1038.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.08%)</title><rect x="1179.7" y="1011.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.7" y="1022.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1179.7" y="995.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.7" y="1006.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_output_for_runtime_call(Node*, Node*, TypePtr const*) (1 samples, 0.08%)</title><rect x="1179.7" y="979.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.7" y="990.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.08%)</title><rect x="1179.7" y="963.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.7" y="974.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.6" y="1155.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.6" y="1166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.6" y="1139.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.6" y="1150.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1180.6" y="1123.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.6" y="1134.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1180.6" y="1107.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.6" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1180.6" y="1091.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.6" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1180.6" y="1075.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.6" y="1086.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1180.6" y="1059.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.6" y="1070.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1180.6" y="1043.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.6" y="1054.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1180.6" y="1027.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.6" y="1038.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1180.6" y="1011.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.6" y="1022.0"></text>
</g>
<g>
<title>InlineTree::should_inline(ciMethod*, ciMethod*, int, ciCallProfile&amp;, WarmCallInfo*) (1 samples, 0.08%)</title><rect x="1180.6" y="995.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.6" y="1006.0"></text>
</g>
<g>
<title>ciMethod::should_inline() (1 samples, 0.08%)</title><rect x="1180.6" y="979.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.6" y="990.0"></text>
</g>
<g>
<title>CompilerOracle::should_inline(methodHandle) (1 samples, 0.08%)</title><rect x="1180.6" y="963.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.6" y="974.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.08%)</title><rect x="1181.5" y="1667.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.5" y="1678.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.08%)</title><rect x="1181.5" y="1651.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.5" y="1662.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1181.5" y="1635.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.5" y="1646.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.08%)</title><rect x="1182.5" y="1747.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.5" y="1758.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.08%)</title><rect x="1182.5" y="1731.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.5" y="1742.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.08%)</title><rect x="1183.4" y="1747.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.4" y="1758.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.08%)</title><rect x="1183.4" y="1731.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.4" y="1742.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.08%)</title><rect x="1183.4" y="1715.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.4" y="1726.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.08%)</title><rect x="1183.4" y="1699.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.4" y="1710.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.16%)</title><rect x="1184.4" y="1779.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.4" y="1790.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.16%)</title><rect x="1184.4" y="1763.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.4" y="1774.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.16%)</title><rect x="1184.4" y="1747.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.4" y="1758.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.16%)</title><rect x="1184.4" y="1731.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.4" y="1742.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.08%)</title><rect x="1184.4" y="1715.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.4" y="1726.0"></text>
</g>
<g>
<title>Compilation::emit_code_epilog(LIR_Assembler*) (1 samples, 0.08%)</title><rect x="1184.4" y="1699.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.4" y="1710.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_slow_case_stubs() (1 samples, 0.08%)</title><rect x="1184.4" y="1683.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.4" y="1694.0"></text>
</g>
<g>
<title>CounterOverflowStub::emit_code(LIR_Assembler*) (1 samples, 0.08%)</title><rect x="1184.4" y="1667.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.4" y="1678.0"></text>
</g>
<g>
<title>MacroAssembler::movptr(Address, int) (1 samples, 0.08%)</title><rect x="1184.4" y="1651.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.4" y="1662.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.08%)</title><rect x="1185.3" y="1715.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.3" y="1726.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.08%)</title><rect x="1185.3" y="1699.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.3" y="1710.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (1 samples, 0.08%)</title><rect x="1185.3" y="1683.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.3" y="1694.0"></text>
</g>
<g>
<title>LIRGenerator::do_ProfileInvoke(ProfileInvoke*) (1 samples, 0.08%)</title><rect x="1185.3" y="1667.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.3" y="1678.0"></text>
</g>
<g>
<title>LIRGenerator::state_for(Instruction*, ValueStack*, bool) (1 samples, 0.08%)</title><rect x="1185.3" y="1651.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.3" y="1662.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.08%)</title><rect x="1185.3" y="1635.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.3" y="1646.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.08%)</title><rect x="1185.3" y="1619.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.3" y="1630.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::get_liveness_at(ciMethod*, int) (1 samples, 0.08%)</title><rect x="1185.3" y="1603.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.3" y="1614.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.08%)</title><rect x="1186.2" y="1811.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.2" y="1822.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.08%)</title><rect x="1186.2" y="1795.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.2" y="1806.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.08%)</title><rect x="1186.2" y="1779.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.2" y="1790.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.08%)</title><rect x="1186.2" y="1763.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1189.2" y="1774.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.08%)</title><rect x="1186.2" y="1747.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.2" y="1758.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.24%)</title><rect x="1187.2" y="1843.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.2" y="1854.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.24%)</title><rect x="1187.2" y="1827.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.2" y="1838.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (2 samples, 0.16%)</title><rect x="1187.2" y="1811.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.2" y="1822.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.08%)</title><rect x="1188.1" y="1795.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.1" y="1806.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.08%)</title><rect x="1188.1" y="1779.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.1" y="1790.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="1188.1" y="1763.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.1" y="1774.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="1188.1" y="1747.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.1" y="1758.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="1188.1" y="1731.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.1" y="1742.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.08%)</title><rect x="1188.1" y="1715.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.1" y="1726.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.08%)</title><rect x="1189.1" y="1811.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.1" y="1822.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.08%)</title><rect x="1189.1" y="1795.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1192.1" y="1806.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.08%)</title><rect x="1189.1" y="1779.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1192.1" y="1790.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.08%)</title><rect x="1189.1" y="1763.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.1" y="1774.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.08%)</title><rect x="1189.1" y="1747.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1192.1" y="1758.0"></text>
</g>
<g>
<title>G1CollectedHeap::process_discovered_references(unsigned int) (1 samples, 0.08%)</title><rect x="1189.1" y="1731.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1192.1" y="1742.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_discovered_references(BoolObjectClosure*, OopClosure*, VoidClosure*, AbstractRefProcTaskExecutor*, GCTimer*, GCId) (1 samples, 0.08%)</title><rect x="1189.1" y="1715.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1192.1" y="1726.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_discovered_reflist(DiscoveredList*, ReferencePolicy*, bool, BoolObjectClosure*, OopClosure*, VoidClosure*, AbstractRefProcTaskExecutor*) (1 samples, 0.08%)</title><rect x="1189.1" y="1699.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1192.1" y="1710.0"></text>
</g>
</g>
</svg>
