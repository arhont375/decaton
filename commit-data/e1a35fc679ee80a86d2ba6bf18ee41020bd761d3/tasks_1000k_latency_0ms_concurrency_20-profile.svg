<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1158" onload="init(evt)" viewBox="0 0 1200 1158" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1141"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1141"> </text>
<g id="frames">
<g>
<title>all (1,210 samples, 100.00%)</title><rect x="10.0" y="1107.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1118.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (265 samples, 21.90%)</title><rect x="10.0" y="1091.0" width="258.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1102.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (2 samples, 0.17%)</title><rect x="11.0" y="1075.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.0" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (2 samples, 0.17%)</title><rect x="11.0" y="1059.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (2 samples, 0.17%)</title><rect x="11.0" y="1043.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.08%)</title><rect x="11.0" y="1027.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="14.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.08%)</title><rect x="11.0" y="1011.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="11.0" y="995.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.08%)</title><rect x="11.0" y="979.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.08%)</title><rect x="11.0" y="963.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.08%)</title><rect x="11.0" y="947.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="14.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.08%)</title><rect x="11.0" y="931.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="14.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.08%)</title><rect x="11.0" y="915.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.08%)</title><rect x="11.0" y="899.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="14.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.08%)</title><rect x="11.0" y="883.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="14.0" y="894.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.08%)</title><rect x="11.0" y="867.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.0" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.08%)</title><rect x="11.0" y="851.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="14.0" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.08%)</title><rect x="11.0" y="835.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="14.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/LogContext$LocationAwareKafkaLogger.debug (1 samples, 0.08%)</title><rect x="12.0" y="1027.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (262 samples, 21.65%)</title><rect x="12.9" y="1075.0" width="255.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.9" y="1086.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (5 samples, 0.41%)</title><rect x="12.9" y="1059.0" width="4.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="15.9" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (5 samples, 0.41%)</title><rect x="12.9" y="1043.0" width="4.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="15.9" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (5 samples, 0.41%)</title><rect x="12.9" y="1027.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.9" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (5 samples, 0.41%)</title><rect x="12.9" y="1011.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="15.9" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (4 samples, 0.33%)</title><rect x="13.9" y="995.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.9" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (4 samples, 0.33%)</title><rect x="13.9" y="979.0" width="3.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="16.9" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (4 samples, 0.33%)</title><rect x="13.9" y="963.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="16.9" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (3 samples, 0.25%)</title><rect x="13.9" y="947.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="16.9" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="15.9" y="931.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="18.9" y="942.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="15.9" y="915.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="18.9" y="926.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="15.9" y="899.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="18.9" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="16.8" y="947.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="19.8" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.08%)</title><rect x="17.8" y="1059.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.8" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.08%)</title><rect x="17.8" y="1043.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.8" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (7 samples, 0.58%)</title><rect x="18.8" y="1059.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.8" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (7 samples, 0.58%)</title><rect x="18.8" y="1043.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.8" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (7 samples, 0.58%)</title><rect x="18.8" y="1027.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="21.8" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$273/228168289.accept (6 samples, 0.50%)</title><rect x="19.8" y="1011.0" width="5.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.8" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (6 samples, 0.50%)</title><rect x="19.8" y="995.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.8" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (6 samples, 0.50%)</title><rect x="19.8" y="979.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="22.8" y="990.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (6 samples, 0.50%)</title><rect x="19.8" y="963.0" width="5.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.8" y="974.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (204 samples, 16.86%)</title><rect x="25.6" y="1059.0" width="198.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="28.6" y="1070.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$272/777890296.accept (190 samples, 15.70%)</title><rect x="27.6" y="1043.0" width="185.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="30.6" y="1054.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (190 samples, 15.70%)</title><rect x="27.6" y="1027.0" width="185.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="30.6" y="1038.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (162 samples, 13.39%)</title><rect x="28.5" y="1011.0" width="158.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="31.5" y="1022.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (162 samples, 13.39%)</title><rect x="28.5" y="995.0" width="158.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="31.5" y="1006.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (162 samples, 13.39%)</title><rect x="28.5" y="979.0" width="158.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="31.5" y="990.0">com/linecorp/decaton..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (162 samples, 13.39%)</title><rect x="28.5" y="963.0" width="158.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="31.5" y="974.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (162 samples, 13.39%)</title><rect x="28.5" y="947.0" width="158.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="31.5" y="958.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (162 samples, 13.39%)</title><rect x="28.5" y="931.0" width="158.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="31.5" y="942.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (117 samples, 9.67%)</title><rect x="28.5" y="915.0" width="114.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="31.5" y="926.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (24 samples, 1.98%)</title><rect x="28.5" y="899.0" width="23.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="31.5" y="910.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (24 samples, 1.98%)</title><rect x="28.5" y="883.0" width="23.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="31.5" y="894.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (19 samples, 1.57%)</title><rect x="33.4" y="867.0" width="18.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="36.4" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (18 samples, 1.49%)</title><rect x="34.4" y="851.0" width="17.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="37.4" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (10 samples, 0.83%)</title><rect x="51.9" y="899.0" width="9.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="54.9" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (10 samples, 0.83%)</title><rect x="51.9" y="883.0" width="9.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="54.9" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (6 samples, 0.50%)</title><rect x="51.9" y="867.0" width="5.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="54.9" y="878.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (6 samples, 0.50%)</title><rect x="51.9" y="851.0" width="5.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="54.9" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (4 samples, 0.33%)</title><rect x="57.8" y="867.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="60.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (83 samples, 6.86%)</title><rect x="61.7" y="899.0" width="80.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="64.7" y="910.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (83 samples, 6.86%)</title><rect x="61.7" y="883.0" width="80.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="64.7" y="894.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (79 samples, 6.53%)</title><rect x="62.7" y="867.0" width="77.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="65.7" y="878.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (79 samples, 6.53%)</title><rect x="62.7" y="851.0" width="77.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="65.7" y="862.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (76 samples, 6.28%)</title><rect x="65.6" y="835.0" width="74.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="68.6" y="846.0">sun/misc..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="66.6" y="819.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="69.6" y="830.0"></text>
</g>
<g>
<title>Unsafe_Unpark (66 samples, 5.45%)</title><rect x="67.5" y="819.0" width="64.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="70.5" y="830.0">Unsafe_..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="69.5" y="803.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="72.5" y="814.0"></text>
</g>
<g>
<title>Parker::unpark() (3 samples, 0.25%)</title><rect x="70.5" y="803.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="73.5" y="814.0"></text>
</g>
<g>
<title>__pthread_cond_signal (43 samples, 3.55%)</title><rect x="73.4" y="803.0" width="41.9" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="76.4" y="814.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.08%)</title><rect x="115.3" y="803.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="118.3" y="814.0"></text>
</g>
<g>
<title>pthread_mutex_lock (16 samples, 1.32%)</title><rect x="116.3" y="803.0" width="15.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="119.3" y="814.0"></text>
</g>
<g>
<title>__lll_unlock_wake (6 samples, 0.50%)</title><rect x="131.9" y="819.0" width="5.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="134.9" y="830.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.08%)</title><rect x="137.8" y="819.0" width="0.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="140.8" y="830.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.08%)</title><rect x="138.7" y="819.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="141.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (3 samples, 0.25%)</title><rect x="139.7" y="867.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="142.7" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (39 samples, 3.22%)</title><rect x="142.6" y="915.0" width="38.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="145.6" y="926.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (39 samples, 3.22%)</title><rect x="142.6" y="899.0" width="38.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="145.6" y="910.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (39 samples, 3.22%)</title><rect x="142.6" y="883.0" width="38.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="145.6" y="894.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.25%)</title><rect x="180.7" y="915.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="183.7" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (3 samples, 0.25%)</title><rect x="180.7" y="899.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="183.7" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.25%)</title><rect x="180.7" y="883.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="183.7" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.25%)</title><rect x="183.6" y="915.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="186.6" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.25%)</title><rect x="183.6" y="899.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="186.6" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (3 samples, 0.25%)</title><rect x="183.6" y="883.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="186.6" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (3 samples, 0.25%)</title><rect x="183.6" y="867.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="186.6" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (14 samples, 1.16%)</title><rect x="186.5" y="1011.0" width="13.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="189.5" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (14 samples, 1.16%)</title><rect x="186.5" y="995.0" width="13.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="189.5" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.08%)</title><rect x="199.2" y="979.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="202.2" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.08%)</title><rect x="199.2" y="963.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="202.2" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.08%)</title><rect x="199.2" y="947.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="202.2" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.08%)</title><rect x="199.2" y="931.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="202.2" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.08%)</title><rect x="199.2" y="915.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="202.2" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (7 samples, 0.58%)</title><rect x="200.2" y="1011.0" width="6.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="203.2" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.58%)</title><rect x="200.2" y="995.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="203.2" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.58%)</title><rect x="200.2" y="979.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="203.2" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 0.50%)</title><rect x="207.0" y="1011.0" width="5.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="210.0" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 0.50%)</title><rect x="207.0" y="995.0" width="5.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="210.0" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 0.50%)</title><rect x="207.0" y="979.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="210.0" y="990.0"></text>
</g>
<g>
<title>_new_instance_Java (1 samples, 0.08%)</title><rect x="207.0" y="963.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="210.0" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (5 samples, 0.41%)</title><rect x="208.0" y="963.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="211.0" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 0.41%)</title><rect x="208.0" y="947.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="211.0" y="958.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.25%)</title><rect x="212.8" y="1043.0" width="3.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="215.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.08%)</title><rect x="215.8" y="1043.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="218.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.08%)</title><rect x="215.8" y="1027.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="218.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.08%)</title><rect x="215.8" y="1011.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="218.8" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.08%)</title><rect x="215.8" y="995.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="218.8" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="215.8" y="979.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="218.8" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="215.8" y="963.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="218.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (7 samples, 0.58%)</title><rect x="216.7" y="1043.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="219.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (7 samples, 0.58%)</title><rect x="216.7" y="1027.0" width="6.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="219.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.58%)</title><rect x="216.7" y="1011.0" width="6.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="219.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.58%)</title><rect x="216.7" y="995.0" width="6.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="219.7" y="1006.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.08%)</title><rect x="221.6" y="979.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="224.6" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.08%)</title><rect x="222.6" y="979.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="225.6" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.08%)</title><rect x="223.6" y="1043.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="226.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.08%)</title><rect x="223.6" y="1027.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="226.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (45 samples, 3.72%)</title><rect x="224.5" y="1059.0" width="43.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="227.5" y="1070.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (45 samples, 3.72%)</title><rect x="224.5" y="1043.0" width="43.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="227.5" y="1054.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (35 samples, 2.89%)</title><rect x="224.5" y="1027.0" width="34.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="227.5" y="1038.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.08%)</title><rect x="224.5" y="1011.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="227.5" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.08%)</title><rect x="224.5" y="995.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="227.5" y="1006.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.08%)</title><rect x="224.5" y="979.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="227.5" y="990.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.08%)</title><rect x="224.5" y="963.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="227.5" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (34 samples, 2.81%)</title><rect x="225.5" y="1011.0" width="33.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="228.5" y="1022.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (34 samples, 2.81%)</title><rect x="225.5" y="995.0" width="33.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="228.5" y="1006.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (30 samples, 2.48%)</title><rect x="225.5" y="979.0" width="29.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="228.5" y="990.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (30 samples, 2.48%)</title><rect x="225.5" y="963.0" width="29.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="228.5" y="974.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (12 samples, 0.99%)</title><rect x="227.5" y="947.0" width="11.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="230.5" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.08%)</title><rect x="233.3" y="931.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="236.3" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.record (1 samples, 0.08%)</title><rect x="233.3" y="915.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="236.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$4100 (1 samples, 0.08%)</title><rect x="233.3" y="899.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="236.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordTopicFetchMetrics (1 samples, 0.08%)</title><rect x="233.3" y="883.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="236.3" y="894.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.08%)</title><rect x="233.3" y="867.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="236.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (5 samples, 0.41%)</title><rect x="234.3" y="931.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="237.3" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (5 samples, 0.41%)</title><rect x="234.3" y="915.0" width="4.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="237.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (5 samples, 0.41%)</title><rect x="234.3" y="899.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="237.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (5 samples, 0.41%)</title><rect x="234.3" y="883.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="237.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (5 samples, 0.41%)</title><rect x="234.3" y="867.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="237.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (5 samples, 0.41%)</title><rect x="234.3" y="851.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="237.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (5 samples, 0.41%)</title><rect x="234.3" y="835.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="237.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (16 samples, 1.32%)</title><rect x="239.2" y="947.0" width="15.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="242.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.08%)</title><rect x="239.2" y="931.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="242.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (15 samples, 1.24%)</title><rect x="240.1" y="931.0" width="14.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="243.1" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (10 samples, 0.83%)</title><rect x="240.1" y="915.0" width="9.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="243.1" y="926.0"></text>
</g>
<g>
<title>java/util/Optional.of (10 samples, 0.83%)</title><rect x="240.1" y="899.0" width="9.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="243.1" y="910.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.08%)</title><rect x="248.0" y="883.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="251.0" y="894.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="248.9" y="883.0" width="1.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="251.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (5 samples, 0.41%)</title><rect x="249.9" y="915.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="252.9" y="926.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (5 samples, 0.41%)</title><rect x="249.9" y="899.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="252.9" y="910.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="253.8" y="883.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="256.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.08%)</title><rect x="254.8" y="979.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="257.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.08%)</title><rect x="254.8" y="963.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="257.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.08%)</title><rect x="254.8" y="947.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="257.8" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.08%)</title><rect x="254.8" y="931.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="257.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.08%)</title><rect x="255.8" y="979.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="258.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.08%)</title><rect x="255.8" y="963.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="258.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="255.8" y="947.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="258.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="255.8" y="931.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="258.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="255.8" y="915.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="258.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionLead (1 samples, 0.08%)</title><rect x="256.7" y="979.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="259.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.08%)</title><rect x="256.7" y="963.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="259.7" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.08%)</title><rect x="257.7" y="979.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="260.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (5 samples, 0.41%)</title><rect x="258.7" y="1027.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="261.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (4 samples, 0.33%)</title><rect x="258.7" y="1011.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="261.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (3 samples, 0.25%)</title><rect x="258.7" y="995.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="261.7" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.characteristics (1 samples, 0.08%)</title><rect x="258.7" y="979.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="261.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.08%)</title><rect x="259.7" y="979.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="262.7" y="990.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.08%)</title><rect x="259.7" y="963.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="262.7" y="974.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.08%)</title><rect x="259.7" y="947.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="262.7" y="958.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.08%)</title><rect x="259.7" y="931.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="262.7" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.08%)</title><rect x="259.7" y="915.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="262.7" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="259.7" y="899.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="262.7" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.08%)</title><rect x="259.7" y="883.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="262.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.08%)</title><rect x="260.6" y="979.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="263.6" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.08%)</title><rect x="260.6" y="963.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="263.6" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.08%)</title><rect x="261.6" y="995.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="264.6" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.08%)</title><rect x="261.6" y="979.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="264.6" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="261.6" y="963.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="264.6" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.08%)</title><rect x="262.6" y="1011.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="265.6" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.pollHeartbeat (1 samples, 0.08%)</title><rect x="262.6" y="995.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="265.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.08%)</title><rect x="263.6" y="1027.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="266.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.08%)</title><rect x="263.6" y="1011.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="266.6" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.08%)</title><rect x="263.6" y="995.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="266.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.08%)</title><rect x="263.6" y="979.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="266.6" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.08%)</title><rect x="263.6" y="963.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="266.6" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.08%)</title><rect x="263.6" y="947.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="266.6" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.08%)</title><rect x="263.6" y="931.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="266.6" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.updateSelectedKeys (1 samples, 0.08%)</title><rect x="263.6" y="915.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="266.6" y="926.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.08%)</title><rect x="263.6" y="899.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="266.6" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.08%)</title><rect x="263.6" y="883.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="266.6" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="263.6" y="867.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="266.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.08%)</title><rect x="264.5" y="1027.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="267.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.08%)</title><rect x="264.5" y="1011.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="267.5" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.selectReadReplica (1 samples, 0.08%)</title><rect x="264.5" y="995.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="267.5" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.preferredReadReplica (1 samples, 0.08%)</title><rect x="264.5" y="979.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="267.5" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.08%)</title><rect x="264.5" y="963.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="267.5" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.08%)</title><rect x="264.5" y="947.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="267.5" y="958.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.08%)</title><rect x="264.5" y="931.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="267.5" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="264.5" y="915.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="267.5" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.08%)</title><rect x="265.5" y="1027.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="268.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="265.5" y="1011.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="268.5" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="265.5" y="995.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="268.5" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="265.5" y="979.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="268.5" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.08%)</title><rect x="265.5" y="963.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="268.5" y="974.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedValueIterator.next (1 samples, 0.08%)</title><rect x="265.5" y="947.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="268.5" y="958.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.08%)</title><rect x="265.5" y="931.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="268.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (2 samples, 0.17%)</title><rect x="266.5" y="1027.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="269.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="266.5" y="1011.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="269.5" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="266.5" y="995.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="269.5" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="266.5" y="979.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="269.5" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.08%)</title><rect x="267.5" y="963.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="270.5" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/MetricConfig.quota (1 samples, 0.08%)</title><rect x="267.5" y="947.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="270.5" y="958.0"></text>
</g>
<g>
<title>java/lang/Thread.run (815 samples, 67.36%)</title><rect x="268.4" y="1091.0" width="794.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="271.4" y="1102.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (815 samples, 67.36%)</title><rect x="268.4" y="1075.0" width="794.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="271.4" y="1086.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (815 samples, 67.36%)</title><rect x="268.4" y="1059.0" width="794.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="271.4" y="1070.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$288/1335405375.run (572 samples, 47.27%)</title><rect x="271.4" y="1043.0" width="557.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="274.4" y="1054.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$288/133..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62 (572 samples, 47.27%)</title><rect x="271.4" y="1027.0" width="557.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="274.4" y="1038.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (572 samples, 47.27%)</title><rect x="271.4" y="1011.0" width="557.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="274.4" y="1022.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (572 samples, 47.27%)</title><rect x="271.4" y="995.0" width="557.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="274.4" y="1006.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenP..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.17%)</title><rect x="281.1" y="979.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="284.1" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (10 samples, 0.83%)</title><rect x="283.1" y="979.0" width="9.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="286.1" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (10 samples, 0.83%)</title><rect x="283.1" y="963.0" width="9.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="286.1" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.get (10 samples, 0.83%)</title><rect x="283.1" y="947.0" width="9.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="286.1" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.17%)</title><rect x="283.1" y="931.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="286.1" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (8 samples, 0.66%)</title><rect x="285.0" y="931.0" width="7.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="288.0" y="942.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.25%)</title><rect x="289.9" y="915.0" width="2.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="292.9" y="926.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.25%)</title><rect x="289.9" y="899.0" width="2.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="292.9" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (45 samples, 3.72%)</title><rect x="292.8" y="979.0" width="43.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="295.8" y="990.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (1 samples, 0.08%)</title><rect x="303.5" y="963.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="306.5" y="974.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/260840925.linkToTargetMethod (1 samples, 0.08%)</title><rect x="304.5" y="963.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="307.5" y="974.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/205962452.invokeStatic_L_L (1 samples, 0.08%)</title><rect x="304.5" y="947.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="307.5" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$301/479664769.get$Lambda (1 samples, 0.08%)</title><rect x="304.5" y="931.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="307.5" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.08%)</title><rect x="304.5" y="915.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="307.5" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (32 samples, 2.64%)</title><rect x="305.5" y="963.0" width="31.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="308.5" y="974.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (32 samples, 2.64%)</title><rect x="305.5" y="947.0" width="31.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="308.5" y="958.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (32 samples, 2.64%)</title><rect x="305.5" y="931.0" width="31.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="308.5" y="942.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.17%)</title><rect x="305.5" y="915.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="308.5" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.17%)</title><rect x="305.5" y="899.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="308.5" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 0.17%)</title><rect x="305.5" y="883.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="308.5" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (30 samples, 2.48%)</title><rect x="307.4" y="915.0" width="29.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="310.4" y="926.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$301/479664769.accept (30 samples, 2.48%)</title><rect x="307.4" y="899.0" width="29.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="310.4" y="910.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (30 samples, 2.48%)</title><rect x="307.4" y="883.0" width="29.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="310.4" y="894.0">co..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (30 samples, 2.48%)</title><rect x="307.4" y="867.0" width="29.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="310.4" y="878.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (30 samples, 2.48%)</title><rect x="307.4" y="851.0" width="29.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="310.4" y="862.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (30 samples, 2.48%)</title><rect x="307.4" y="835.0" width="29.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="310.4" y="846.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (7 samples, 0.58%)</title><rect x="307.4" y="819.0" width="6.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="310.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (7 samples, 0.58%)</title><rect x="307.4" y="803.0" width="6.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="310.4" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$286/878510486.accept (1 samples, 0.08%)</title><rect x="312.3" y="787.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="315.3" y="798.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="313.3" y="787.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="316.3" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (23 samples, 1.90%)</title><rect x="314.3" y="819.0" width="22.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="317.3" y="830.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$285/1340240234.accept (3 samples, 0.25%)</title><rect x="333.8" y="803.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="336.8" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (179 samples, 14.79%)</title><rect x="336.7" y="979.0" width="174.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="339.7" y="990.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$45/1556995360.extract (179 samples, 14.79%)</title><rect x="336.7" y="963.0" width="174.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="339.7" y="974.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (179 samples, 14.79%)</title><rect x="336.7" y="947.0" width="174.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="339.7" y="958.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (179 samples, 14.79%)</title><rect x="336.7" y="931.0" width="174.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="339.7" y="942.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (179 samples, 14.79%)</title><rect x="336.7" y="915.0" width="174.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="339.7" y="926.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (179 samples, 14.79%)</title><rect x="336.7" y="899.0" width="174.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="339.7" y="910.0">com/fasterxml/jackson/..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="336.7" y="883.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="339.7" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="336.7" y="867.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="339.7" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (56 samples, 4.63%)</title><rect x="337.7" y="883.0" width="54.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="340.7" y="894.0">com/f..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="353.3" y="867.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="356.3" y="878.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="353.3" y="851.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="356.3" y="862.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.41%)</title><rect x="354.2" y="867.0" width="4.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="357.2" y="878.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.33%)</title><rect x="355.2" y="851.0" width="3.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="358.2" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (9 samples, 0.74%)</title><rect x="359.1" y="867.0" width="8.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="362.1" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (9 samples, 0.74%)</title><rect x="359.1" y="851.0" width="8.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="362.1" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (9 samples, 0.74%)</title><rect x="359.1" y="835.0" width="8.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="362.1" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (9 samples, 0.74%)</title><rect x="359.1" y="819.0" width="8.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="362.1" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (9 samples, 0.74%)</title><rect x="359.1" y="803.0" width="8.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="362.1" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (9 samples, 0.74%)</title><rect x="359.1" y="787.0" width="8.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="362.1" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (9 samples, 0.74%)</title><rect x="359.1" y="771.0" width="8.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="362.1" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (25 samples, 2.07%)</title><rect x="367.9" y="867.0" width="24.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="370.9" y="878.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (21 samples, 1.74%)</title><rect x="367.9" y="851.0" width="20.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="370.9" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (5 samples, 0.41%)</title><rect x="377.7" y="835.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="380.7" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="377.7" y="819.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="380.7" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="377.7" y="803.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="380.7" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="377.7" y="787.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="380.7" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="377.7" y="771.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="380.7" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="377.7" y="755.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="380.7" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (4 samples, 0.33%)</title><rect x="378.6" y="819.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="381.6" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (6 samples, 0.50%)</title><rect x="382.5" y="835.0" width="5.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="385.5" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (6 samples, 0.50%)</title><rect x="382.5" y="819.0" width="5.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="385.5" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (1 samples, 0.08%)</title><rect x="382.5" y="803.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="385.5" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="382.5" y="787.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="385.5" y="798.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="382.5" y="771.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="385.5" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="382.5" y="755.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="385.5" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="382.5" y="739.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="385.5" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (4 samples, 0.33%)</title><rect x="383.5" y="803.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="386.5" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.08%)</title><rect x="387.4" y="803.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="390.4" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (4 samples, 0.33%)</title><rect x="388.4" y="851.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="391.4" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (107 samples, 8.84%)</title><rect x="392.3" y="883.0" width="104.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="395.3" y="894.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.08%)</title><rect x="393.3" y="867.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="396.3" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (4 samples, 0.33%)</title><rect x="394.2" y="867.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="397.2" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (6 samples, 0.50%)</title><rect x="398.1" y="867.0" width="5.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="401.1" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.33%)</title><rect x="400.1" y="851.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="403.1" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (14 samples, 1.16%)</title><rect x="404.0" y="867.0" width="13.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="407.0" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (14 samples, 1.16%)</title><rect x="404.0" y="851.0" width="13.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="407.0" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (11 samples, 0.91%)</title><rect x="405.0" y="835.0" width="10.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="408.0" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (10 samples, 0.83%)</title><rect x="405.9" y="819.0" width="9.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="408.9" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.08%)</title><rect x="408.9" y="803.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="411.9" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="409.8" y="803.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="412.8" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="409.8" y="787.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="412.8" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="409.8" y="771.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="412.8" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (5 samples, 0.41%)</title><rect x="410.8" y="803.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="413.8" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (2 samples, 0.17%)</title><rect x="415.7" y="835.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="418.7" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (13 samples, 1.07%)</title><rect x="417.6" y="867.0" width="12.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="420.6" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (13 samples, 1.07%)</title><rect x="417.6" y="851.0" width="12.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="420.6" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.08%)</title><rect x="417.6" y="835.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="420.6" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (12 samples, 0.99%)</title><rect x="418.6" y="835.0" width="11.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="421.6" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (12 samples, 0.99%)</title><rect x="418.6" y="819.0" width="11.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="421.6" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (8 samples, 0.66%)</title><rect x="422.5" y="803.0" width="7.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="425.5" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (66 samples, 5.45%)</title><rect x="430.3" y="867.0" width="64.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="433.3" y="878.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (4 samples, 0.33%)</title><rect x="430.3" y="851.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="433.3" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (62 samples, 5.12%)</title><rect x="434.2" y="851.0" width="60.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="437.2" y="862.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (17 samples, 1.40%)</title><rect x="434.2" y="835.0" width="16.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="437.2" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.17%)</title><rect x="441.0" y="819.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="444.0" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.17%)</title><rect x="441.0" y="803.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="444.0" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.17%)</title><rect x="441.0" y="787.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="444.0" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.25%)</title><rect x="443.0" y="819.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="446.0" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.25%)</title><rect x="443.0" y="803.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="446.0" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (5 samples, 0.41%)</title><rect x="445.9" y="819.0" width="4.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="448.9" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (45 samples, 3.72%)</title><rect x="450.8" y="835.0" width="43.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="453.8" y="846.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (45 samples, 3.72%)</title><rect x="450.8" y="819.0" width="43.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="453.8" y="830.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (45 samples, 3.72%)</title><rect x="450.8" y="803.0" width="43.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="453.8" y="814.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (12 samples, 0.99%)</title><rect x="455.7" y="787.0" width="11.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="458.7" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (6 samples, 0.50%)</title><rect x="459.6" y="771.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="462.6" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (6 samples, 0.50%)</title><rect x="459.6" y="755.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="462.6" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (6 samples, 0.50%)</title><rect x="459.6" y="739.0" width="5.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="462.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (4 samples, 0.33%)</title><rect x="461.5" y="723.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="464.5" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.08%)</title><rect x="465.4" y="771.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="468.4" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.08%)</title><rect x="466.4" y="771.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="469.4" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (12 samples, 0.99%)</title><rect x="467.4" y="787.0" width="11.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="470.4" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (9 samples, 0.74%)</title><rect x="470.3" y="771.0" width="8.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="473.3" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (9 samples, 0.74%)</title><rect x="470.3" y="755.0" width="8.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="473.3" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (9 samples, 0.74%)</title><rect x="470.3" y="739.0" width="8.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="473.3" y="750.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (9 samples, 0.74%)</title><rect x="470.3" y="723.0" width="8.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="473.3" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 0.25%)</title><rect x="479.1" y="787.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="482.1" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (7 samples, 0.58%)</title><rect x="482.0" y="787.0" width="6.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="485.0" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (7 samples, 0.58%)</title><rect x="482.0" y="771.0" width="6.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="485.0" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (7 samples, 0.58%)</title><rect x="482.0" y="755.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="485.0" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (7 samples, 0.58%)</title><rect x="482.0" y="739.0" width="6.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="485.0" y="750.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (7 samples, 0.58%)</title><rect x="482.0" y="723.0" width="6.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="485.0" y="734.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (7 samples, 0.58%)</title><rect x="482.0" y="707.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="485.0" y="718.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (7 samples, 0.58%)</title><rect x="482.0" y="691.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="485.0" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (3 samples, 0.25%)</title><rect x="488.8" y="787.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="491.8" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.25%)</title><rect x="488.8" y="771.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="491.8" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.25%)</title><rect x="488.8" y="755.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="491.8" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (3 samples, 0.25%)</title><rect x="491.8" y="787.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="494.8" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 0.17%)</title><rect x="492.7" y="771.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="495.7" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.17%)</title><rect x="494.7" y="867.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="497.7" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (15 samples, 1.24%)</title><rect x="496.6" y="883.0" width="14.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="499.6" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.08%)</title><rect x="497.6" y="867.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="500.6" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (13 samples, 1.07%)</title><rect x="498.6" y="867.0" width="12.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="501.6" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (13 samples, 1.07%)</title><rect x="498.6" y="851.0" width="12.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="501.6" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (13 samples, 1.07%)</title><rect x="498.6" y="835.0" width="12.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="501.6" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (13 samples, 1.07%)</title><rect x="498.6" y="819.0" width="12.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="501.6" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (320 samples, 26.45%)</title><rect x="511.3" y="979.0" width="312.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="514.3" y="990.0">com/linecorp/decaton/processor/runtime/int..</text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.25%)</title><rect x="518.1" y="963.0" width="2.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="521.1" y="974.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.17%)</title><rect x="519.1" y="947.0" width="1.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="522.1" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (56 samples, 4.63%)</title><rect x="521.0" y="963.0" width="54.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="524.0" y="974.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (1 samples, 0.08%)</title><rect x="522.0" y="947.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="525.0" y="958.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (54 samples, 4.46%)</title><rect x="523.0" y="947.0" width="52.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="526.0" y="958.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (53 samples, 4.38%)</title><rect x="523.9" y="931.0" width="51.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="526.9" y="942.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 0.33%)</title><rect x="523.9" y="915.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="526.9" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 0.33%)</title><rect x="523.9" y="899.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="526.9" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (4 samples, 0.33%)</title><rect x="523.9" y="883.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="526.9" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 0.33%)</title><rect x="523.9" y="867.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="526.9" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="527.8" y="915.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="530.8" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="527.8" y="899.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="530.8" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="527.8" y="883.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="530.8" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.08%)</title><rect x="527.8" y="867.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="530.8" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.08%)</title><rect x="527.8" y="851.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="530.8" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (48 samples, 3.97%)</title><rect x="528.8" y="915.0" width="46.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="531.8" y="926.0">java..</text>
</g>
<g>
<title>java/util/HashMap.remove (20 samples, 1.65%)</title><rect x="556.1" y="899.0" width="19.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="559.1" y="910.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (7 samples, 0.58%)</title><rect x="560.0" y="883.0" width="6.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="563.0" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (8 samples, 0.66%)</title><rect x="566.8" y="883.0" width="7.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="569.8" y="894.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.08%)</title><rect x="574.6" y="883.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="577.6" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.41%)</title><rect x="575.6" y="963.0" width="4.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="578.6" y="974.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.41%)</title><rect x="575.6" y="947.0" width="4.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="578.6" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (168 samples, 13.88%)</title><rect x="580.5" y="963.0" width="163.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="583.5" y="974.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (156 samples, 12.89%)</title><rect x="580.5" y="947.0" width="152.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="583.5" y="958.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (53 samples, 4.38%)</title><rect x="595.1" y="931.0" width="51.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="598.1" y="942.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.08%)</title><rect x="611.7" y="915.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="614.7" y="926.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.08%)</title><rect x="611.7" y="899.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="614.7" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="611.7" y="883.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="614.7" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="611.7" y="867.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="614.7" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="611.7" y="851.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="614.7" y="862.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (22 samples, 1.82%)</title><rect x="612.7" y="915.0" width="21.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="615.7" y="926.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (20 samples, 1.65%)</title><rect x="614.6" y="899.0" width="19.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="617.6" y="910.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (9 samples, 0.74%)</title><rect x="621.5" y="883.0" width="8.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="624.5" y="894.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (9 samples, 0.74%)</title><rect x="621.5" y="867.0" width="8.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="624.5" y="878.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (9 samples, 0.74%)</title><rect x="621.5" y="851.0" width="8.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="624.5" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (8 samples, 0.66%)</title><rect x="621.5" y="835.0" width="7.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="624.5" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="621.5" y="819.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="624.5" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.08%)</title><rect x="621.5" y="803.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="624.5" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (5 samples, 0.41%)</title><rect x="622.4" y="819.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="625.4" y="830.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.17%)</title><rect x="622.4" y="803.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="625.4" y="814.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="624.4" y="803.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="627.4" y="814.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.17%)</title><rect x="625.4" y="803.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="628.4" y="814.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.17%)</title><rect x="625.4" y="787.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="628.4" y="798.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="625.4" y="771.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="628.4" y="782.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="625.4" y="755.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="628.4" y="766.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.08%)</title><rect x="626.3" y="771.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="629.3" y="782.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.17%)</title><rect x="627.3" y="819.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="630.3" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="628.3" y="803.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="631.3" y="814.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.08%)</title><rect x="628.3" y="787.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="631.3" y="798.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray_nozero(BasicType, int, Thread*) (1 samples, 0.08%)</title><rect x="629.3" y="835.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="632.3" y="846.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.25%)</title><rect x="630.2" y="883.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="633.2" y="894.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="633.2" y="883.0" width="0.9" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="636.2" y="894.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.08%)</title><rect x="634.1" y="915.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="637.1" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="634.1" y="899.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="637.1" y="910.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.08%)</title><rect x="635.1" y="915.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="638.1" y="926.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (11 samples, 0.91%)</title><rect x="636.1" y="915.0" width="10.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="639.1" y="926.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (5 samples, 0.41%)</title><rect x="646.8" y="931.0" width="4.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="649.8" y="942.0"></text>
</g>
<g>
<title>java/lang/Long.toString (5 samples, 0.41%)</title><rect x="646.8" y="915.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="649.8" y="926.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.41%)</title><rect x="646.8" y="899.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="649.8" y="910.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (83 samples, 6.86%)</title><rect x="651.7" y="931.0" width="80.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="654.7" y="942.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (81 samples, 6.69%)</title><rect x="653.6" y="915.0" width="79.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="656.6" y="926.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 0.25%)</title><rect x="653.6" y="899.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="656.6" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 0.25%)</title><rect x="653.6" y="883.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="656.6" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 0.25%)</title><rect x="653.6" y="867.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="656.6" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 0.25%)</title><rect x="653.6" y="851.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="656.6" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="656.6" y="899.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="659.6" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="656.6" y="883.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="659.6" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="656.6" y="867.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="659.6" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.08%)</title><rect x="656.6" y="851.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="659.6" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="656.6" y="835.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="659.6" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (77 samples, 6.36%)</title><rect x="657.5" y="899.0" width="75.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="660.5" y="910.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.put (68 samples, 5.62%)</title><rect x="666.3" y="883.0" width="66.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="669.3" y="894.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.putVal (32 samples, 2.64%)</title><rect x="701.4" y="867.0" width="31.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="704.4" y="878.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.17%)</title><rect x="716.0" y="851.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="719.0" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (13 samples, 1.07%)</title><rect x="718.0" y="851.0" width="12.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="721.0" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.25%)</title><rect x="727.8" y="835.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="730.8" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.25%)</title><rect x="727.8" y="819.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="730.8" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (3 samples, 0.25%)</title><rect x="727.8" y="803.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="730.8" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="728.7" y="787.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="731.7" y="798.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.08%)</title><rect x="728.7" y="771.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="731.7" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="729.7" y="787.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="732.7" y="798.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.17%)</title><rect x="730.7" y="851.0" width="1.9" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="733.7" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (12 samples, 0.99%)</title><rect x="732.6" y="947.0" width="11.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="735.6" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (12 samples, 0.99%)</title><rect x="732.6" y="931.0" width="11.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="735.6" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.get (12 samples, 0.99%)</title><rect x="732.6" y="915.0" width="11.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="735.6" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (12 samples, 0.99%)</title><rect x="732.6" y="899.0" width="11.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="735.6" y="910.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.41%)</title><rect x="736.5" y="883.0" width="4.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="739.5" y="894.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.41%)</title><rect x="736.5" y="867.0" width="4.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="739.5" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.08%)</title><rect x="741.4" y="883.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="744.4" y="894.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.17%)</title><rect x="742.4" y="883.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="745.4" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (67 samples, 5.54%)</title><rect x="744.3" y="963.0" width="65.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="747.3" y="974.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (66 samples, 5.45%)</title><rect x="745.3" y="947.0" width="64.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="748.3" y="958.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$209/1552624934.process (24 samples, 1.98%)</title><rect x="749.2" y="931.0" width="23.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="752.2" y="942.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (23 samples, 1.90%)</title><rect x="749.2" y="915.0" width="22.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="752.2" y="926.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (23 samples, 1.90%)</title><rect x="749.2" y="899.0" width="22.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="752.2" y="910.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.17%)</title><rect x="762.9" y="883.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="765.9" y="894.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.17%)</title><rect x="762.9" y="867.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="765.9" y="878.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.17%)</title><rect x="762.9" y="851.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="765.9" y="862.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.17%)</title><rect x="762.9" y="835.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="765.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.17%)</title><rect x="762.9" y="819.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="765.9" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (5 samples, 0.41%)</title><rect x="764.8" y="883.0" width="4.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="767.8" y="894.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.08%)</title><rect x="768.7" y="867.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="771.7" y="878.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="768.7" y="851.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="771.7" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.08%)</title><rect x="769.7" y="883.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="772.7" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="770.7" y="883.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="773.7" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.08%)</title><rect x="770.7" y="867.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="773.7" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.08%)</title><rect x="771.6" y="915.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="774.6" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (7 samples, 0.58%)</title><rect x="772.6" y="931.0" width="6.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="775.6" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="778.5" y="915.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="781.5" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="778.5" y="899.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="781.5" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="778.5" y="883.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="781.5" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (2 samples, 0.17%)</title><rect x="779.4" y="931.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="782.4" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (1 samples, 0.08%)</title><rect x="780.4" y="915.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="783.4" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="780.4" y="899.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="783.4" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="780.4" y="883.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="783.4" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="780.4" y="867.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="783.4" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="780.4" y="851.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="783.4" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="780.4" y="835.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="783.4" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="780.4" y="819.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="783.4" y="830.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="780.4" y="803.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="783.4" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.08%)</title><rect x="780.4" y="787.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="783.4" y="798.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.08%)</title><rect x="780.4" y="771.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="783.4" y="782.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.08%)</title><rect x="780.4" y="755.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="783.4" y="766.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.08%)</title><rect x="780.4" y="739.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="783.4" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.25%)</title><rect x="781.4" y="931.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="784.4" y="942.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.25%)</title><rect x="781.4" y="915.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="784.4" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.loggingExceptions (3 samples, 0.25%)</title><rect x="784.3" y="931.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="787.3" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$291/1627392910.get (3 samples, 0.25%)</title><rect x="784.3" y="915.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="787.3" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$75 (3 samples, 0.25%)</title><rect x="784.3" y="899.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="787.3" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.41%)</title><rect x="787.2" y="931.0" width="4.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="790.2" y="942.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.41%)</title><rect x="787.2" y="915.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="790.2" y="926.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="787.2" y="899.0" width="1.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="790.2" y="910.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (4 samples, 0.33%)</title><rect x="788.2" y="899.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="791.2" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (8 samples, 0.66%)</title><rect x="792.1" y="931.0" width="7.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="795.1" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="796.0" y="915.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="799.0" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="796.0" y="899.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="799.0" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.08%)</title><rect x="796.0" y="883.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="799.0" y="894.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.25%)</title><rect x="797.0" y="915.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="800.0" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 0.83%)</title><rect x="799.9" y="931.0" width="9.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="802.9" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 0.83%)</title><rect x="799.9" y="915.0" width="9.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="802.9" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (10 samples, 0.83%)</title><rect x="799.9" y="899.0" width="9.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="802.9" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="799.9" y="883.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="802.9" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="799.9" y="867.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="802.9" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="799.9" y="851.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="802.9" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (8 samples, 0.66%)</title><rect x="800.9" y="883.0" width="7.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="803.9" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (7 samples, 0.58%)</title><rect x="800.9" y="867.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="803.9" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (7 samples, 0.58%)</title><rect x="800.9" y="851.0" width="6.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="803.9" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$299/619600982.accept (4 samples, 0.33%)</title><rect x="800.9" y="835.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="803.9" y="846.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.25%)</title><rect x="804.8" y="835.0" width="2.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="807.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.08%)</title><rect x="807.7" y="867.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="810.7" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.08%)</title><rect x="808.7" y="883.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="811.7" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 1.07%)</title><rect x="809.7" y="963.0" width="12.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="812.7" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 1.07%)</title><rect x="809.7" y="947.0" width="12.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="812.7" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (13 samples, 1.07%)</title><rect x="809.7" y="931.0" width="12.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="812.7" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (7 samples, 0.58%)</title><rect x="809.7" y="915.0" width="6.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="812.7" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (7 samples, 0.58%)</title><rect x="809.7" y="899.0" width="6.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="812.7" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (7 samples, 0.58%)</title><rect x="809.7" y="883.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="812.7" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$300/111005234.accept (3 samples, 0.25%)</title><rect x="809.7" y="867.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="812.7" y="878.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.33%)</title><rect x="812.6" y="867.0" width="3.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="815.6" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 0.50%)</title><rect x="816.5" y="915.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="819.5" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$300/111005234.accept (4 samples, 0.33%)</title><rect x="818.4" y="899.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="821.4" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$57 (4 samples, 0.33%)</title><rect x="818.4" y="883.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="821.4" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (4 samples, 0.33%)</title><rect x="818.4" y="867.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="821.4" y="878.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (4 samples, 0.33%)</title><rect x="818.4" y="851.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="821.4" y="862.0"></text>
</g>
<g>
<title>java/time/Duration.create (4 samples, 0.33%)</title><rect x="818.4" y="835.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="821.4" y="846.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.08%)</title><rect x="820.4" y="819.0" width="1.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="823.4" y="830.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="820.4" y="803.0" width="1.0" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="823.4" y="814.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="821.4" y="819.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="824.4" y="830.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (1 samples, 0.08%)</title><rect x="822.3" y="963.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="825.3" y="974.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.50%)</title><rect x="823.3" y="979.0" width="5.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="826.3" y="990.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.50%)</title><rect x="823.3" y="963.0" width="5.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="826.3" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (8 samples, 0.66%)</title><rect x="829.2" y="1043.0" width="7.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="832.2" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 0.66%)</title><rect x="829.2" y="1027.0" width="7.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="832.2" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 0.66%)</title><rect x="829.2" y="1011.0" width="7.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="832.2" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 0.66%)</title><rect x="829.2" y="995.0" width="7.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="832.2" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (3 samples, 0.25%)</title><rect x="834.0" y="979.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="837.0" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (232 samples, 19.17%)</title><rect x="837.0" y="1043.0" width="226.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="840.0" y="1054.0">java/util/concurrent/ThreadPoo..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (231 samples, 19.09%)</title><rect x="838.0" y="1027.0" width="225.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="841.0" y="1038.0">java/util/concurrent/LinkedBlo..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (207 samples, 17.11%)</title><rect x="840.9" y="1011.0" width="201.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="843.9" y="1022.0">java/util/concurrent/locks..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (15 samples, 1.24%)</title><rect x="852.6" y="995.0" width="14.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="855.6" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (4 samples, 0.33%)</title><rect x="867.2" y="995.0" width="3.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="870.2" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="867.2" y="979.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="870.2" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="867.2" y="963.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="870.2" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="867.2" y="947.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="870.2" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="867.2" y="931.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="870.2" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="867.2" y="915.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="870.2" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.25%)</title><rect x="868.2" y="979.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="871.2" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.25%)</title><rect x="868.2" y="963.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="871.2" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.25%)</title><rect x="868.2" y="947.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="871.2" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.25%)</title><rect x="868.2" y="931.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="871.2" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (174 samples, 14.38%)</title><rect x="871.1" y="995.0" width="169.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="874.1" y="1006.0">java/util/concurrent/l..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (161 samples, 13.31%)</title><rect x="883.8" y="979.0" width="157.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="886.8" y="990.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.08%)</title><rect x="886.7" y="963.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="889.7" y="974.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="887.7" y="963.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="890.7" y="974.0"></text>
</g>
<g>
<title>Unsafe_Park (151 samples, 12.48%)</title><rect x="888.7" y="963.0" width="147.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="891.7" y="974.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="892.6" y="947.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="895.6" y="958.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (21 samples, 1.74%)</title><rect x="893.5" y="947.0" width="20.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="896.5" y="958.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (6 samples, 0.50%)</title><rect x="904.3" y="931.0" width="5.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="907.3" y="942.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.17%)</title><rect x="907.2" y="915.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="910.2" y="926.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.08%)</title><rect x="908.2" y="899.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="911.2" y="910.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="909.1" y="915.0" width="1.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="912.1" y="926.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (4 samples, 0.33%)</title><rect x="910.1" y="931.0" width="3.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="913.1" y="942.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="914.0" y="947.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="917.0" y="958.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.08%)</title><rect x="915.0" y="947.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="918.0" y="958.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.08%)</title><rect x="916.0" y="947.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="919.0" y="958.0"></text>
</g>
<g>
<title>__lll_lock_wait (8 samples, 0.66%)</title><rect x="916.9" y="947.0" width="7.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="919.9" y="958.0"></text>
</g>
<g>
<title>__lll_unlock_wake (28 samples, 2.31%)</title><rect x="924.7" y="947.0" width="27.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="927.7" y="958.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (54 samples, 4.46%)</title><rect x="952.0" y="947.0" width="52.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="955.0" y="958.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (9 samples, 0.74%)</title><rect x="1004.7" y="947.0" width="8.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1007.7" y="958.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.08%)</title><rect x="1013.5" y="947.0" width="1.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1016.5" y="958.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (7 samples, 0.58%)</title><rect x="1014.5" y="947.0" width="6.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1017.5" y="958.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (8 samples, 0.66%)</title><rect x="1021.3" y="947.0" width="7.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1024.3" y="958.0"></text>
</g>
<g>
<title>_init (1 samples, 0.08%)</title><rect x="1029.1" y="947.0" width="1.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1032.1" y="958.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.08%)</title><rect x="1030.1" y="947.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1033.1" y="958.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.08%)</title><rect x="1031.0" y="947.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1034.0" y="958.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.17%)</title><rect x="1032.0" y="947.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1035.0" y="958.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.17%)</title><rect x="1034.0" y="947.0" width="1.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1037.0" y="958.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.33%)</title><rect x="1035.9" y="963.0" width="3.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1038.9" y="974.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.08%)</title><rect x="1039.8" y="963.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1042.8" y="974.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (2 samples, 0.17%)</title><rect x="1040.8" y="995.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1043.8" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (21 samples, 1.74%)</title><rect x="1042.7" y="1011.0" width="20.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1045.7" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (21 samples, 1.74%)</title><rect x="1042.7" y="995.0" width="20.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1045.7" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (21 samples, 1.74%)</title><rect x="1042.7" y="979.0" width="20.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1045.7" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (21 samples, 1.74%)</title><rect x="1042.7" y="963.0" width="20.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1045.7" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.08%)</title><rect x="1063.2" y="1091.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1066.2" y="1102.0"></text>
</g>
<g>
<title>InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*) (1 samples, 0.08%)</title><rect x="1063.2" y="1075.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1066.2" y="1086.0"></text>
</g>
<g>
<title>start_thread (129 samples, 10.66%)</title><rect x="1064.2" y="1091.0" width="125.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1067.2" y="1102.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (129 samples, 10.66%)</title><rect x="1064.2" y="1075.0" width="125.8" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1067.2" y="1086.0">java_start(Thre..</text>
</g>
<g>
<title>GangWorker::loop() (22 samples, 1.82%)</title><rect x="1064.2" y="1059.0" width="21.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1067.2" y="1070.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (7 samples, 0.58%)</title><rect x="1064.2" y="1043.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1067.2" y="1054.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 0.58%)</title><rect x="1064.2" y="1027.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1067.2" y="1038.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.17%)</title><rect x="1064.2" y="1011.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1067.2" y="1022.0"></text>
</g>
<g>
<title>SpinPause (5 samples, 0.41%)</title><rect x="1066.1" y="1011.0" width="4.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1069.1" y="1022.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (15 samples, 1.24%)</title><rect x="1071.0" y="1043.0" width="14.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1074.0" y="1054.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.25%)</title><rect x="1071.0" y="1027.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1074.0" y="1038.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.08%)</title><rect x="1071.0" y="1011.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1074.0" y="1022.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.17%)</title><rect x="1072.0" y="1011.0" width="2.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1075.0" y="1022.0"></text>
</g>
<g>
<title>G1ParScanThreadState::~G1ParScanThreadState() (1 samples, 0.08%)</title><rect x="1074.0" y="1027.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1077.0" y="1038.0"></text>
</g>
<g>
<title>PtrQueue::flush_impl() (1 samples, 0.08%)</title><rect x="1074.0" y="1011.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1077.0" y="1022.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (4 samples, 0.33%)</title><rect x="1074.9" y="1027.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1077.9" y="1038.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.08%)</title><rect x="1074.9" y="1011.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1077.9" y="1022.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="1074.9" y="995.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1077.9" y="1006.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.25%)</title><rect x="1075.9" y="1011.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1078.9" y="1022.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.08%)</title><rect x="1075.9" y="995.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1078.9" y="1006.0"></text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (2 samples, 0.17%)</title><rect x="1076.9" y="995.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1079.9" y="1006.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (2 samples, 0.17%)</title><rect x="1076.9" y="979.0" width="1.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1079.9" y="990.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (7 samples, 0.58%)</title><rect x="1078.8" y="1027.0" width="6.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1081.8" y="1038.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (7 samples, 0.58%)</title><rect x="1078.8" y="1011.0" width="6.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1081.8" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (6 samples, 0.50%)</title><rect x="1078.8" y="995.0" width="5.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1081.8" y="1006.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (6 samples, 0.50%)</title><rect x="1078.8" y="979.0" width="5.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1081.8" y="990.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (6 samples, 0.50%)</title><rect x="1078.8" y="963.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1081.8" y="974.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (6 samples, 0.50%)</title><rect x="1078.8" y="947.0" width="5.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1081.8" y="958.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (4 samples, 0.33%)</title><rect x="1080.8" y="931.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1083.8" y="942.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.08%)</title><rect x="1081.8" y="915.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1084.8" y="926.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (2 samples, 0.17%)</title><rect x="1082.7" y="915.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1085.7" y="926.0"></text>
</g>
<g>
<title>PtrQueue::flush_impl() (1 samples, 0.08%)</title><rect x="1084.7" y="995.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1087.7" y="1006.0"></text>
</g>
<g>
<title>JavaThread::run() (105 samples, 8.68%)</title><rect x="1085.7" y="1059.0" width="102.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1088.7" y="1070.0">JavaThread::..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (105 samples, 8.68%)</title><rect x="1085.7" y="1043.0" width="102.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1088.7" y="1054.0">JavaThread::..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (105 samples, 8.68%)</title><rect x="1085.7" y="1027.0" width="102.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1088.7" y="1038.0">CompileBroke..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (103 samples, 8.51%)</title><rect x="1085.7" y="1011.0" width="100.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1088.7" y="1022.0">CompileBroke..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (102 samples, 8.43%)</title><rect x="1085.7" y="995.0" width="99.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1088.7" y="1006.0">C2Compiler::..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (102 samples, 8.43%)</title><rect x="1085.7" y="979.0" width="99.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1088.7" y="990.0">Compile::Com..</text>
</g>
<g>
<title>Compile::Code_Gen() (44 samples, 3.64%)</title><rect x="1085.7" y="963.0" width="42.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1088.7" y="974.0">Comp..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.08%)</title><rect x="1085.7" y="947.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1088.7" y="958.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.08%)</title><rect x="1085.7" y="931.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1088.7" y="942.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.25%)</title><rect x="1086.6" y="947.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1089.6" y="958.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.08%)</title><rect x="1088.6" y="931.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1091.6" y="942.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.08%)</title><rect x="1088.6" y="915.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1091.6" y="926.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 0.41%)</title><rect x="1089.6" y="947.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1092.6" y="958.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 0.41%)</title><rect x="1089.6" y="931.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1092.6" y="942.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.08%)</title><rect x="1090.5" y="915.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1093.5" y="926.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 0.25%)</title><rect x="1091.5" y="915.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1094.5" y="926.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1092.5" y="899.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1095.5" y="910.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.08%)</title><rect x="1093.5" y="899.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1096.5" y="910.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.08%)</title><rect x="1093.5" y="883.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1096.5" y="894.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.08%)</title><rect x="1093.5" y="867.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1096.5" y="878.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.08%)</title><rect x="1093.5" y="851.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1096.5" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 0.33%)</title><rect x="1094.4" y="947.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1097.4" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 0.33%)</title><rect x="1094.4" y="931.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1097.4" y="942.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (3 samples, 0.25%)</title><rect x="1094.4" y="915.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1097.4" y="926.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 0.08%)</title><rect x="1094.4" y="899.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1097.4" y="910.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.08%)</title><rect x="1094.4" y="883.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1097.4" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int) (2 samples, 0.17%)</title><rect x="1095.4" y="899.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1098.4" y="910.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.08%)</title><rect x="1097.4" y="915.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1100.4" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (31 samples, 2.56%)</title><rect x="1098.3" y="947.0" width="30.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1101.3" y="958.0">Ph..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.08%)</title><rect x="1098.3" y="931.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1101.3" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (7 samples, 0.58%)</title><rect x="1099.3" y="931.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1102.3" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 0.41%)</title><rect x="1106.1" y="931.0" width="4.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1109.1" y="942.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1109.1" y="915.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1112.1" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.08%)</title><rect x="1110.0" y="915.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1113.0" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.08%)</title><rect x="1111.0" y="931.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1114.0" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.08%)</title><rect x="1111.0" y="915.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1114.0" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (1 samples, 0.08%)</title><rect x="1112.0" y="931.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1115.0" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 0.33%)</title><rect x="1113.0" y="931.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1116.0" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.17%)</title><rect x="1116.9" y="931.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1119.9" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.17%)</title><rect x="1116.9" y="915.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1119.9" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.08%)</title><rect x="1117.8" y="899.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1120.8" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.08%)</title><rect x="1117.8" y="883.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1120.8" y="894.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (5 samples, 0.41%)</title><rect x="1118.8" y="931.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1121.8" y="942.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (5 samples, 0.41%)</title><rect x="1118.8" y="915.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1121.8" y="926.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (3 samples, 0.25%)</title><rect x="1119.8" y="899.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1122.8" y="910.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.08%)</title><rect x="1122.7" y="899.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1125.7" y="910.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.08%)</title><rect x="1122.7" y="883.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1125.7" y="894.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.08%)</title><rect x="1123.7" y="931.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1126.7" y="942.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.08%)</title><rect x="1124.7" y="931.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1127.7" y="942.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.17%)</title><rect x="1125.6" y="931.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1128.6" y="942.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.17%)</title><rect x="1125.6" y="915.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1128.6" y="926.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.08%)</title><rect x="1126.6" y="899.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1129.6" y="910.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1127.6" y="931.0" width="1.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1130.6" y="942.0"></text>
</g>
<g>
<title>Compile::Optimize() (47 samples, 3.88%)</title><rect x="1128.6" y="963.0" width="45.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.6" y="974.0">Comp..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.08%)</title><rect x="1128.6" y="947.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1131.6" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.08%)</title><rect x="1128.6" y="931.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1131.6" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1128.6" y="915.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1131.6" y="926.0"></text>
</g>
<g>
<title>CallStaticJavaNode::Opcode() const (1 samples, 0.08%)</title><rect x="1128.6" y="899.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1131.6" y="910.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.08%)</title><rect x="1129.5" y="947.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1132.5" y="958.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1129.5" y="931.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1132.5" y="942.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1129.5" y="915.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1132.5" y="926.0"></text>
</g>
<g>
<title>TypeInt::xmeet(Type const*) const (1 samples, 0.08%)</title><rect x="1129.5" y="899.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1132.5" y="910.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1129.5" y="883.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1132.5" y="894.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1129.5" y="867.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1132.5" y="878.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.08%)</title><rect x="1129.5" y="851.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1132.5" y="862.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.08%)</title><rect x="1130.5" y="947.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1133.5" y="958.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.08%)</title><rect x="1130.5" y="931.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1133.5" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (34 samples, 2.81%)</title><rect x="1131.5" y="947.0" width="33.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1134.5" y="958.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.25%)</title><rect x="1131.5" y="931.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1134.5" y="942.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.08%)</title><rect x="1133.4" y="915.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1136.4" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (27 samples, 2.23%)</title><rect x="1134.4" y="931.0" width="26.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1137.4" y="942.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (25 samples, 2.07%)</title><rect x="1135.4" y="915.0" width="24.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1138.4" y="926.0">P..</text>
</g>
<g>
<title>Node::unique_ctrl_out() (1 samples, 0.08%)</title><rect x="1138.3" y="899.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1141.3" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (21 samples, 1.74%)</title><rect x="1139.3" y="899.0" width="20.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1142.3" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.17%)</title><rect x="1157.8" y="883.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.8" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.08%)</title><rect x="1159.8" y="915.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.8" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.08%)</title><rect x="1160.7" y="931.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.7" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.08%)</title><rect x="1160.7" y="915.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1163.7" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.17%)</title><rect x="1161.7" y="931.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.7" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.17%)</title><rect x="1161.7" y="915.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.7" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (2 samples, 0.17%)</title><rect x="1161.7" y="899.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.7" y="910.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1161.7" y="883.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.7" y="894.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1161.7" y="867.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.7" y="878.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1161.7" y="851.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.7" y="862.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1161.7" y="835.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.7" y="846.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1161.7" y="819.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.7" y="830.0"></text>
</g>
<g>
<title>ciInstance::java_lang_Class_klass() (1 samples, 0.08%)</title><rect x="1161.7" y="803.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.7" y="814.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1161.7" y="787.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.7" y="798.0"></text>
</g>
<g>
<title>PhiNode::make_blank(Node*, Node*) (1 samples, 0.08%)</title><rect x="1162.7" y="883.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.7" y="894.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1162.7" y="867.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.7" y="878.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1162.7" y="851.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.7" y="862.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1162.7" y="835.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.7" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.08%)</title><rect x="1163.7" y="931.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.7" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.08%)</title><rect x="1163.7" y="915.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.7" y="926.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1163.7" y="899.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.7" y="910.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.08%)</title><rect x="1163.7" y="883.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.7" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1163.7" y="867.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.7" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1163.7" y="851.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.7" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1163.7" y="835.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.7" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1163.7" y="819.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.7" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1163.7" y="803.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.7" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1163.7" y="787.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.7" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1163.7" y="771.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.7" y="782.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1163.7" y="755.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.7" y="766.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1163.7" y="739.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.7" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (8 samples, 0.66%)</title><rect x="1164.6" y="947.0" width="7.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.6" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (8 samples, 0.66%)</title><rect x="1164.6" y="931.0" width="7.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.6" y="942.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1164.6" y="915.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.6" y="926.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1164.6" y="899.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.6" y="910.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1165.6" y="915.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.6" y="926.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1165.6" y="899.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.6" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (3 samples, 0.25%)</title><rect x="1166.6" y="915.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.6" y="926.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.08%)</title><rect x="1169.5" y="915.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.5" y="926.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.08%)</title><rect x="1169.5" y="899.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.5" y="910.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1170.5" y="915.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.5" y="926.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.08%)</title><rect x="1170.5" y="899.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.5" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1170.5" y="883.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.5" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1170.5" y="867.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.5" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1170.5" y="851.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.5" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1170.5" y="835.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.5" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1170.5" y="819.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.5" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1170.5" y="803.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.5" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1170.5" y="787.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.5" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1170.5" y="771.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.5" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1170.5" y="755.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1173.5" y="766.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1170.5" y="739.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.5" y="750.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1170.5" y="723.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.5" y="734.0"></text>
</g>
<g>
<title>StoreNode::Identity(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1171.5" y="915.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.5" y="926.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1171.5" y="899.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.5" y="910.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1171.5" y="883.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.5" y="894.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1171.5" y="867.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.5" y="878.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.08%)</title><rect x="1172.4" y="947.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.4" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.08%)</title><rect x="1172.4" y="931.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.4" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.08%)</title><rect x="1172.4" y="915.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.4" y="926.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1172.4" y="899.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.4" y="910.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1172.4" y="883.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.4" y="894.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.08%)</title><rect x="1172.4" y="867.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.4" y="878.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1173.4" y="947.0" width="1.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1176.4" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.83%)</title><rect x="1174.4" y="963.0" width="9.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.4" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.83%)</title><rect x="1174.4" y="947.0" width="9.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.4" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.83%)</title><rect x="1174.4" y="931.0" width="9.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.4" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.83%)</title><rect x="1174.4" y="915.0" width="9.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.4" y="926.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.08%)</title><rect x="1174.4" y="899.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.4" y="910.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.08%)</title><rect x="1174.4" y="883.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.4" y="894.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.08%)</title><rect x="1174.4" y="867.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.4" y="878.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1174.4" y="851.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.4" y="862.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1174.4" y="835.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.4" y="846.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1174.4" y="819.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.4" y="830.0"></text>
</g>
<g>
<title>Type::remove_speculative() const (1 samples, 0.08%)</title><rect x="1174.4" y="803.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.4" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 0.74%)</title><rect x="1175.4" y="899.0" width="8.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.4" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (9 samples, 0.74%)</title><rect x="1175.4" y="883.0" width="8.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.4" y="894.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1175.4" y="867.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.4" y="878.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1175.4" y="851.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.4" y="862.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1175.4" y="835.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.4" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1175.4" y="819.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.4" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1175.4" y="803.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.4" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1175.4" y="787.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.4" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1175.4" y="771.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.4" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1175.4" y="755.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.4" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.08%)</title><rect x="1175.4" y="739.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.4" y="750.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1175.4" y="723.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.4" y="734.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1175.4" y="707.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.4" y="718.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1175.4" y="691.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.4" y="702.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.08%)</title><rect x="1175.4" y="675.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.4" y="686.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_interface_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.08%)</title><rect x="1175.4" y="659.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.4" y="670.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="1175.4" y="643.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.4" y="654.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.08%)</title><rect x="1175.4" y="627.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.4" y="638.0"></text>
</g>
<g>
<title>SignatureStream::SignatureStream(Symbol*, bool) (1 samples, 0.08%)</title><rect x="1175.4" y="611.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.4" y="622.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.08%)</title><rect x="1175.4" y="595.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.4" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.50%)</title><rect x="1176.3" y="867.0" width="5.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.3" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.50%)</title><rect x="1176.3" y="851.0" width="5.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.50%)</title><rect x="1176.3" y="835.0" width="5.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.50%)</title><rect x="1176.3" y="819.0" width="5.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.50%)</title><rect x="1176.3" y="803.0" width="5.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.3" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.50%)</title><rect x="1176.3" y="787.0" width="5.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.3" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.33%)</title><rect x="1176.3" y="771.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.3" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.33%)</title><rect x="1176.3" y="755.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.33%)</title><rect x="1176.3" y="739.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.33%)</title><rect x="1176.3" y="723.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.33%)</title><rect x="1176.3" y="707.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.25%)</title><rect x="1176.3" y="691.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.3" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.25%)</title><rect x="1176.3" y="675.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.3" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.25%)</title><rect x="1176.3" y="659.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.25%)</title><rect x="1176.3" y="643.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.25%)</title><rect x="1176.3" y="627.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.25%)</title><rect x="1176.3" y="611.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.25%)</title><rect x="1176.3" y="595.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.3" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.25%)</title><rect x="1176.3" y="579.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.3" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.25%)</title><rect x="1176.3" y="563.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.25%)</title><rect x="1176.3" y="547.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.25%)</title><rect x="1176.3" y="531.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.25%)</title><rect x="1176.3" y="515.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1176.3" y="499.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.3" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1176.3" y="483.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.3" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1176.3" y="467.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1176.3" y="451.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1176.3" y="435.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1176.3" y="419.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1176.3" y="403.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.3" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1176.3" y="387.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.3" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1176.3" y="371.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1176.3" y="355.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.3" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1176.3" y="339.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.3" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1176.3" y="323.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.3" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1176.3" y="307.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.3" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1176.3" y="291.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.3" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1176.3" y="275.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.3" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1176.3" y="259.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.3" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1176.3" y="243.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.3" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1176.3" y="227.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.3" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1176.3" y="211.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.3" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1176.3" y="195.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.3" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1176.3" y="179.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.3" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1176.3" y="163.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.3" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1176.3" y="147.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.3" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1176.3" y="131.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.3" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1176.3" y="115.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.3" y="126.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1176.3" y="99.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.3" y="110.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1176.3" y="83.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.3" y="94.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.08%)</title><rect x="1176.3" y="67.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.3" y="78.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.08%)</title><rect x="1176.3" y="51.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.3" y="62.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.08%)</title><rect x="1176.3" y="35.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.3" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.3" y="483.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.3" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.3" y="467.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.3" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1177.3" y="451.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1177.3" y="435.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1177.3" y="419.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1177.3" y="403.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1177.3" y="387.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.3" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.3" y="371.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.3" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1177.3" y="355.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.3" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1177.3" y="339.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.3" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1177.3" y="323.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.3" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1177.3" y="307.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1177.3" y="291.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.3" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.3" y="275.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.3" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1177.3" y="259.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.3" y="270.0"></text>
</g>
<g>
<title>Parse::init_blocks() (1 samples, 0.08%)</title><rect x="1177.3" y="243.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.3" y="254.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1178.3" y="499.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1178.3" y="483.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1179.3" y="691.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1179.3" y="675.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.3" y="686.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.08%)</title><rect x="1179.3" y="659.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.3" y="670.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.08%)</title><rect x="1179.3" y="643.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.3" y="654.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1179.3" y="627.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.3" y="638.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1179.3" y="611.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.3" y="622.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1179.3" y="595.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.3" y="606.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1179.3" y="579.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.3" y="590.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1179.3" y="563.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.3" y="574.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1179.3" y="547.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.3" y="558.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1179.3" y="531.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.3" y="542.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1180.2" y="771.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.2" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1180.2" y="755.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.2" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1180.2" y="739.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1180.2" y="723.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1180.2" y="707.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1180.2" y="691.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1180.2" y="675.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.2" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1180.2" y="659.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.2" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1180.2" y="643.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1180.2" y="627.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1180.2" y="611.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1180.2" y="595.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1180.2" y="579.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.2" y="590.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1180.2" y="563.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.2" y="574.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1180.2" y="547.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.2" y="558.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1180.2" y="531.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.2" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1180.2" y="515.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.2" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1180.2" y="499.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.2" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1180.2" y="483.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.2" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1180.2" y="467.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.2" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1180.2" y="451.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.2" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1180.2" y="435.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.2" y="446.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.08%)</title><rect x="1180.2" y="419.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.2" y="430.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1180.2" y="403.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.2" y="414.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1180.2" y="387.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.2" y="398.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1180.2" y="371.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.2" y="382.0"></text>
</g>
<g>
<title>ciField::initialize_from(fieldDescriptor*) (1 samples, 0.08%)</title><rect x="1180.2" y="355.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.2" y="366.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.08%)</title><rect x="1180.2" y="339.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.2" y="350.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_object(oopDesc*) (1 samples, 0.08%)</title><rect x="1180.2" y="323.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.2" y="334.0"></text>
</g>
<g>
<title>ciObject::ciObject(Handle) (1 samples, 0.08%)</title><rect x="1180.2" y="307.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.2" y="318.0"></text>
</g>
<g>
<title>G1CollectedHeap::is_scavengable(void const*) (1 samples, 0.08%)</title><rect x="1180.2" y="291.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.2" y="302.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1181.2" y="563.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.2" y="574.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1181.2" y="547.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.2" y="558.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1181.2" y="531.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.2" y="542.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.08%)</title><rect x="1181.2" y="515.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.2" y="526.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.08%)</title><rect x="1181.2" y="499.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.2" y="510.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.08%)</title><rect x="1181.2" y="483.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.2" y="494.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="1181.2" y="467.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.2" y="478.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="1181.2" y="451.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.2" y="462.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.08%)</title><rect x="1181.2" y="435.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.2" y="446.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.08%)</title><rect x="1181.2" y="419.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.2" y="430.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1182.2" y="867.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.2" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1182.2" y="851.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.2" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1182.2" y="835.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.2" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1182.2" y="819.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.2" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1182.2" y="803.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.2" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1182.2" y="787.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.2" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1182.2" y="771.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.2" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1182.2" y="755.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.2" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1182.2" y="739.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1182.2" y="723.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1182.2" y="707.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1182.2" y="691.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1182.2" y="675.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.2" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.2" y="659.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.2" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.2" y="643.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.2" y="627.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.2" y="611.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.2" y="595.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.2" y="579.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.2" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.2" y="563.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.2" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.2" y="547.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.2" y="531.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.2" y="515.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.2" y="499.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.2" y="483.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.2" y="494.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.2" y="467.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.2" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.2" y="451.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.2" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.2" y="435.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.2" y="419.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.2" y="403.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.2" y="387.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.2" y="371.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.2" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.2" y="355.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.2" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.2" y="339.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.2" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.2" y="323.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.2" y="307.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.2" y="291.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.2" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.2" y="275.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.2" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.2" y="259.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.2" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.2" y="243.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.2" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.2" y="227.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.2" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.2" y="211.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.2" y="222.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.08%)</title><rect x="1182.2" y="195.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.2" y="206.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.08%)</title><rect x="1182.2" y="179.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.2" y="190.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.08%)</title><rect x="1182.2" y="163.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.2" y="174.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.08%)</title><rect x="1182.2" y="147.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.2" y="158.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.08%)</title><rect x="1182.2" y="131.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.2" y="142.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.2" y="659.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.2" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.2" y="643.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.2" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1183.2" y="627.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1183.2" y="611.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1183.2" y="595.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1183.2" y="579.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1183.2" y="563.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1183.2" y="547.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.2" y="558.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.08%)</title><rect x="1183.2" y="531.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.2" y="542.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.08%)</title><rect x="1183.2" y="515.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.2" y="526.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1183.2" y="499.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.2" y="510.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.08%)</title><rect x="1184.1" y="963.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.1" y="974.0"></text>
</g>
<g>
<title>Unique_Node_List::remove_useless_nodes(VectorSet&amp;) (1 samples, 0.08%)</title><rect x="1184.1" y="947.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.1" y="958.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.08%)</title><rect x="1185.1" y="995.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.1" y="1006.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.08%)</title><rect x="1185.1" y="979.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.1" y="990.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.08%)</title><rect x="1185.1" y="963.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.1" y="974.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.08%)</title><rect x="1185.1" y="947.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.1" y="958.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.08%)</title><rect x="1185.1" y="931.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.1" y="942.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.08%)</title><rect x="1185.1" y="915.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.1" y="926.0"></text>
</g>
<g>
<title>CompileQueue::get() (2 samples, 0.17%)</title><rect x="1186.1" y="1011.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.1" y="1022.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (2 samples, 0.17%)</title><rect x="1186.1" y="995.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.1" y="1006.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (2 samples, 0.17%)</title><rect x="1186.1" y="979.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.1" y="990.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.08%)</title><rect x="1186.1" y="963.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.1" y="974.0"></text>
</g>
<g>
<title>nmethod::is_compiled_by_c2() const (1 samples, 0.08%)</title><rect x="1186.1" y="947.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.1" y="958.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.08%)</title><rect x="1187.1" y="963.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.1" y="974.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.17%)</title><rect x="1188.0" y="1059.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.0" y="1070.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.17%)</title><rect x="1188.0" y="1043.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.0" y="1054.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.17%)</title><rect x="1188.0" y="1027.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.0" y="1038.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.17%)</title><rect x="1188.0" y="1011.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.0" y="1022.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.17%)</title><rect x="1188.0" y="995.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.0" y="1006.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.17%)</title><rect x="1188.0" y="979.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.0" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.08%)</title><rect x="1188.0" y="963.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.0" y="974.0"></text>
</g>
<g>
<title>DerivedPointerTable::update_pointers() (1 samples, 0.08%)</title><rect x="1188.0" y="947.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.0" y="958.0"></text>
</g>
<g>
<title>G1CollectedHeap::gc_epilogue(bool) (1 samples, 0.08%)</title><rect x="1189.0" y="963.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1192.0" y="974.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::resize_all_tlabs() (1 samples, 0.08%)</title><rect x="1189.0" y="947.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.0" y="958.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::resize() (1 samples, 0.08%)</title><rect x="1189.0" y="931.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.0" y="942.0"></text>
</g>
</g>
</svg>
