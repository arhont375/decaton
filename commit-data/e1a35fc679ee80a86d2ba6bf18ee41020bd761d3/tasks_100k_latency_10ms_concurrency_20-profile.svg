<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="982" onload="init(evt)" viewBox="0 0 1200 982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="965"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="965"> </text>
<g id="frames">
<g>
<title>all (388 samples, 100.00%)</title><rect x="10.0" y="931.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="942.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (26 samples, 6.70%)</title><rect x="10.0" y="915.0" width="79.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="926.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (26 samples, 6.70%)</title><rect x="10.0" y="899.0" width="79.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="910.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.26%)</title><rect x="10.0" y="883.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (1 samples, 0.26%)</title><rect x="10.0" y="867.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.26%)</title><rect x="10.0" y="851.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.26%)</title><rect x="10.0" y="835.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.26%)</title><rect x="10.0" y="819.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.26%)</title><rect x="10.0" y="803.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.26%)</title><rect x="10.0" y="787.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.26%)</title><rect x="10.0" y="771.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (2 samples, 0.52%)</title><rect x="13.0" y="883.0" width="6.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.0" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.26%)</title><rect x="13.0" y="867.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.0" y="878.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.toList (1 samples, 0.26%)</title><rect x="13.0" y="851.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.0" y="862.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$CollectorImpl.&lt;init&gt; (1 samples, 0.26%)</title><rect x="13.0" y="835.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.resume (1 samples, 0.26%)</title><rect x="16.1" y="867.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.1" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.resume (1 samples, 0.26%)</title><rect x="16.1" y="851.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.1" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.26%)</title><rect x="16.1" y="835.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.1" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.26%)</title><rect x="16.1" y="819.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.1" y="830.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.26%)</title><rect x="16.1" y="803.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.1" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.26%)</title><rect x="16.1" y="787.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.1" y="798.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (5 samples, 1.29%)</title><rect x="19.1" y="883.0" width="15.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="22.1" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$268/177998098.accept (3 samples, 0.77%)</title><rect x="19.1" y="867.0" width="9.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.1" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (3 samples, 0.77%)</title><rect x="19.1" y="851.0" width="9.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="22.1" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (2 samples, 0.52%)</title><rect x="19.1" y="835.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.1" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (2 samples, 0.52%)</title><rect x="19.1" y="819.0" width="6.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="22.1" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (2 samples, 0.52%)</title><rect x="19.1" y="803.0" width="6.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (2 samples, 0.52%)</title><rect x="19.1" y="787.0" width="6.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.52%)</title><rect x="19.1" y="771.0" width="6.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (2 samples, 0.52%)</title><rect x="19.1" y="755.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="22.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.26%)</title><rect x="19.1" y="739.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.26%)</title><rect x="19.1" y="723.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="22.1" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.26%)</title><rect x="19.1" y="707.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.26%)</title><rect x="22.2" y="739.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="25.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.26%)</title><rect x="22.2" y="723.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="25.2" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.26%)</title><rect x="22.2" y="707.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.2" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.26%)</title><rect x="22.2" y="691.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="25.2" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (1 samples, 0.26%)</title><rect x="25.2" y="835.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="28.2" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.26%)</title><rect x="25.2" y="819.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="28.2" y="830.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.26%)</title><rect x="28.2" y="867.0" width="3.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="31.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.26%)</title><rect x="31.3" y="867.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="34.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.26%)</title><rect x="31.3" y="851.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="34.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.26%)</title><rect x="31.3" y="835.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="34.3" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.values (1 samples, 0.26%)</title><rect x="31.3" y="819.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="34.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (18 samples, 4.64%)</title><rect x="34.3" y="883.0" width="54.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="37.3" y="894.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (18 samples, 4.64%)</title><rect x="34.3" y="867.0" width="54.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="37.3" y="878.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (14 samples, 3.61%)</title><rect x="34.3" y="851.0" width="42.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="37.3" y="862.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.26%)</title><rect x="34.3" y="835.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="37.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 1.29%)</title><rect x="37.4" y="835.0" width="15.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="40.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 1.29%)</title><rect x="37.4" y="819.0" width="15.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="40.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.52%)</title><rect x="37.4" y="803.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="40.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.52%)</title><rect x="37.4" y="787.0" width="6.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="40.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.26%)</title><rect x="37.4" y="771.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="40.4" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (1 samples, 0.26%)</title><rect x="37.4" y="755.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="40.4" y="766.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.26%)</title><rect x="37.4" y="739.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="40.4" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.26%)</title><rect x="37.4" y="723.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="40.4" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.26%)</title><rect x="37.4" y="707.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="40.4" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.26%)</title><rect x="37.4" y="691.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="40.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.26%)</title><rect x="40.4" y="771.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="43.4" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.26%)</title><rect x="40.4" y="755.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="43.4" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.26%)</title><rect x="40.4" y="739.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="43.4" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.26%)</title><rect x="40.4" y="723.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="43.4" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.26%)</title><rect x="40.4" y="707.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="43.4" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.updateRegistrations (1 samples, 0.26%)</title><rect x="40.4" y="691.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="43.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.handlePendingDisconnects (1 samples, 0.26%)</title><rect x="43.5" y="803.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="46.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.26%)</title><rect x="43.5" y="787.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="46.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.maybeThrowInterruptException (1 samples, 0.26%)</title><rect x="46.5" y="803.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="49.5" y="814.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.26%)</title><rect x="46.5" y="787.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="49.5" y="798.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.26%)</title><rect x="46.5" y="771.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="49.5" y="782.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.26%)</title><rect x="46.5" y="755.0" width="3.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="49.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.26%)</title><rect x="49.5" y="803.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="52.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.26%)</title><rect x="49.5" y="787.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="52.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.26%)</title><rect x="49.5" y="771.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="52.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.26%)</title><rect x="49.5" y="755.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="52.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.26%)</title><rect x="49.5" y="739.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="52.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.26%)</title><rect x="49.5" y="723.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="52.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.26%)</title><rect x="49.5" y="707.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="52.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.26%)</title><rect x="49.5" y="691.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="52.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.26%)</title><rect x="49.5" y="675.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="52.5" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$10.write (1 samples, 0.26%)</title><rect x="49.5" y="659.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="52.5" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.26%)</title><rect x="49.5" y="643.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="52.5" y="654.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.26%)</title><rect x="49.5" y="627.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="52.5" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (8 samples, 2.06%)</title><rect x="52.6" y="835.0" width="24.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="55.6" y="846.0">o..</text>
</g>
<g>
<title>java/util/ArrayDeque.add (1 samples, 0.26%)</title><rect x="52.6" y="819.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="55.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.addAll (1 samples, 0.26%)</title><rect x="55.6" y="819.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="58.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (6 samples, 1.55%)</title><rect x="58.7" y="819.0" width="18.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="61.7" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (5 samples, 1.29%)</title><rect x="58.7" y="803.0" width="15.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="61.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (5 samples, 1.29%)</title><rect x="58.7" y="787.0" width="15.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="61.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.26%)</title><rect x="61.7" y="771.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="64.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.26%)</title><rect x="61.7" y="755.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="64.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.26%)</title><rect x="61.7" y="739.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="64.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.26%)</title><rect x="61.7" y="723.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="64.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.26%)</title><rect x="61.7" y="707.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="64.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.26%)</title><rect x="61.7" y="691.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="64.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.26%)</title><rect x="61.7" y="675.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="64.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.26%)</title><rect x="61.7" y="659.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="64.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (3 samples, 0.77%)</title><rect x="64.7" y="771.0" width="9.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="67.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (3 samples, 0.77%)</title><rect x="64.7" y="755.0" width="9.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="67.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (3 samples, 0.77%)</title><rect x="64.7" y="739.0" width="9.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="67.7" y="750.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (3 samples, 0.77%)</title><rect x="64.7" y="723.0" width="9.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="67.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.26%)</title><rect x="73.9" y="803.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="76.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.26%)</title><rect x="73.9" y="787.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="76.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.26%)</title><rect x="73.9" y="771.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="76.9" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.26%)</title><rect x="73.9" y="755.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="76.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.26%)</title><rect x="73.9" y="739.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="76.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.26%)</title><rect x="73.9" y="723.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="76.9" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.26%)</title><rect x="73.9" y="707.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="76.9" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Min.update (1 samples, 0.26%)</title><rect x="73.9" y="691.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="76.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.26%)</title><rect x="76.9" y="851.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="79.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.26%)</title><rect x="76.9" y="835.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="79.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.26%)</title><rect x="76.9" y="819.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="79.9" y="830.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.26%)</title><rect x="76.9" y="803.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="79.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$236/609373622.accept (1 samples, 0.26%)</title><rect x="76.9" y="787.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="79.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.26%)</title><rect x="76.9" y="771.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="79.9" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.26%)</title><rect x="76.9" y="755.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="79.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.26%)</title><rect x="76.9" y="739.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="79.9" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.26%)</title><rect x="76.9" y="723.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="79.9" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.26%)</title><rect x="76.9" y="707.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="79.9" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 0.77%)</title><rect x="79.9" y="851.0" width="9.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="82.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.52%)</title><rect x="79.9" y="835.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="82.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.26%)</title><rect x="79.9" y="819.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="82.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.26%)</title><rect x="79.9" y="803.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="82.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.26%)</title><rect x="79.9" y="787.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="82.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.26%)</title><rect x="79.9" y="771.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="82.9" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$4.read (1 samples, 0.26%)</title><rect x="79.9" y="755.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="82.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.26%)</title><rect x="83.0" y="819.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="86.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.26%)</title><rect x="83.0" y="803.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="86.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.26%)</title><rect x="83.0" y="787.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="86.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.26%)</title><rect x="83.0" y="771.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="86.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.26%)</title><rect x="83.0" y="755.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="86.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.26%)</title><rect x="83.0" y="739.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="86.0" y="750.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.26%)</title><rect x="83.0" y="723.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="86.0" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.26%)</title><rect x="83.0" y="707.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="86.0" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.26%)</title><rect x="83.0" y="691.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="86.0" y="702.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.26%)</title><rect x="83.0" y="675.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="86.0" y="686.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.26%)</title><rect x="83.0" y="659.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="86.0" y="670.0"></text>
</g>
<g>
<title>java/nio/Bits.copyFromArray (1 samples, 0.26%)</title><rect x="83.0" y="643.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="86.0" y="654.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.copyMemory (1 samples, 0.26%)</title><rect x="83.0" y="627.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="86.0" y="638.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.26%)</title><rect x="83.0" y="611.0" width="3.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="86.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.26%)</title><rect x="86.0" y="835.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="89.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.26%)</title><rect x="86.0" y="819.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="89.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.26%)</title><rect x="86.0" y="803.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="89.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.26%)</title><rect x="86.0" y="787.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="89.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.26%)</title><rect x="86.0" y="771.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="89.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.26%)</title><rect x="86.0" y="755.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="89.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.26%)</title><rect x="86.0" y="739.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="89.0" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet.iterator (1 samples, 0.26%)</title><rect x="86.0" y="723.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="89.0" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet$1.&lt;init&gt; (1 samples, 0.26%)</title><rect x="86.0" y="707.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="89.0" y="718.0"></text>
</g>
<g>
<title>java/lang/Thread.run (259 samples, 66.75%)</title><rect x="89.1" y="915.0" width="787.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="92.1" y="926.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (259 samples, 66.75%)</title><rect x="89.1" y="899.0" width="787.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="92.1" y="910.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (259 samples, 66.75%)</title><rect x="89.1" y="883.0" width="787.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="92.1" y="894.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$288/708644685.run (252 samples, 64.95%)</title><rect x="89.1" y="867.0" width="766.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="92.1" y="878.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$288/708644685.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62 (252 samples, 64.95%)</title><rect x="89.1" y="851.0" width="766.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="92.1" y="862.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (252 samples, 64.95%)</title><rect x="89.1" y="835.0" width="766.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="92.1" y="846.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (252 samples, 64.95%)</title><rect x="89.1" y="819.0" width="766.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="92.1" y="830.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (9 samples, 2.32%)</title><rect x="98.2" y="803.0" width="27.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="101.2" y="814.0">c..</text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (9 samples, 2.32%)</title><rect x="98.2" y="787.0" width="27.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="101.2" y="798.0">j..</text>
</g>
<g>
<title>java/util/HashMap.get (9 samples, 2.32%)</title><rect x="98.2" y="771.0" width="27.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="101.2" y="782.0">j..</text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.77%)</title><rect x="98.2" y="755.0" width="9.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="101.2" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (6 samples, 1.55%)</title><rect x="107.3" y="755.0" width="18.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="110.3" y="766.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.26%)</title><rect x="122.5" y="739.0" width="3.1" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="125.5" y="750.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.26%)</title><rect x="122.5" y="723.0" width="3.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="125.5" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (22 samples, 5.67%)</title><rect x="125.6" y="803.0" width="66.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="128.6" y="814.0">com/lin..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (16 samples, 4.12%)</title><rect x="143.8" y="787.0" width="48.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="146.8" y="798.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (16 samples, 4.12%)</title><rect x="143.8" y="771.0" width="48.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="146.8" y="782.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (16 samples, 4.12%)</title><rect x="143.8" y="755.0" width="48.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="146.8" y="766.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.26%)</title><rect x="143.8" y="739.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="146.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.26%)</title><rect x="143.8" y="723.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="146.8" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.26%)</title><rect x="143.8" y="707.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="146.8" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$293/2075329672.accept (1 samples, 0.26%)</title><rect x="143.8" y="691.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="146.8" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (15 samples, 3.87%)</title><rect x="146.9" y="739.0" width="45.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="149.9" y="750.0">java..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$293/2075329672.accept (15 samples, 3.87%)</title><rect x="146.9" y="723.0" width="45.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="149.9" y="734.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (15 samples, 3.87%)</title><rect x="146.9" y="707.0" width="45.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="149.9" y="718.0">com/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (15 samples, 3.87%)</title><rect x="146.9" y="691.0" width="45.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="149.9" y="702.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (14 samples, 3.61%)</title><rect x="149.9" y="675.0" width="42.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="152.9" y="686.0">java..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$286/1837757178.accept (1 samples, 0.26%)</title><rect x="149.9" y="659.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="152.9" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$285/2145153079.accept (4 samples, 1.03%)</title><rect x="152.9" y="659.0" width="12.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="155.9" y="670.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.52%)</title><rect x="165.1" y="659.0" width="6.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="168.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (7 samples, 1.80%)</title><rect x="171.2" y="659.0" width="21.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="174.2" y="670.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 1.80%)</title><rect x="171.2" y="643.0" width="21.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="174.2" y="654.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$286/1837757178.accept (1 samples, 0.26%)</title><rect x="186.4" y="627.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="189.4" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$receive$83 (1 samples, 0.26%)</title><rect x="186.4" y="611.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="189.4" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$285/2145153079.accept (1 samples, 0.26%)</title><rect x="189.4" y="627.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="192.4" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (41 samples, 10.57%)</title><rect x="192.5" y="803.0" width="124.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="195.5" y="814.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$45/1556995360.extract (41 samples, 10.57%)</title><rect x="192.5" y="787.0" width="124.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="195.5" y="798.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (41 samples, 10.57%)</title><rect x="192.5" y="771.0" width="124.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="195.5" y="782.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (40 samples, 10.31%)</title><rect x="192.5" y="755.0" width="121.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="195.5" y="766.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (40 samples, 10.31%)</title><rect x="192.5" y="739.0" width="121.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="195.5" y="750.0">com/linecorp/de..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (40 samples, 10.31%)</title><rect x="192.5" y="723.0" width="121.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="195.5" y="734.0">com/fasterxml/j..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (10 samples, 2.58%)</title><rect x="192.5" y="707.0" width="30.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="195.5" y="718.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (7 samples, 1.80%)</title><rect x="192.5" y="691.0" width="21.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="195.5" y="702.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (6 samples, 1.55%)</title><rect x="192.5" y="675.0" width="18.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="195.5" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.26%)</title><rect x="198.6" y="659.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="201.6" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (3 samples, 0.77%)</title><rect x="201.6" y="659.0" width="9.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="204.6" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.77%)</title><rect x="201.6" y="643.0" width="9.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="204.6" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.77%)</title><rect x="201.6" y="627.0" width="9.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="204.6" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.77%)</title><rect x="201.6" y="611.0" width="9.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="204.6" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.77%)</title><rect x="201.6" y="595.0" width="9.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="204.6" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.&lt;init&gt; (1 samples, 0.26%)</title><rect x="210.7" y="675.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="213.7" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.26%)</title><rect x="210.7" y="659.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="213.7" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (3 samples, 0.77%)</title><rect x="213.8" y="691.0" width="9.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="216.8" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (3 samples, 0.77%)</title><rect x="213.8" y="675.0" width="9.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="216.8" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.26%)</title><rect x="213.8" y="659.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="216.8" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.26%)</title><rect x="213.8" y="643.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="216.8" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.26%)</title><rect x="216.8" y="659.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="219.8" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.26%)</title><rect x="216.8" y="643.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="219.8" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.26%)</title><rect x="216.8" y="627.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="219.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.26%)</title><rect x="219.8" y="659.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="222.8" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (27 samples, 6.96%)</title><rect x="222.9" y="707.0" width="82.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="225.9" y="718.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (5 samples, 1.29%)</title><rect x="222.9" y="691.0" width="15.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="225.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 1.29%)</title><rect x="222.9" y="675.0" width="15.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="225.9" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.03%)</title><rect x="222.9" y="659.0" width="12.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="225.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (1 samples, 0.26%)</title><rect x="235.1" y="659.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="238.1" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.52%)</title><rect x="238.1" y="691.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="241.1" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.52%)</title><rect x="238.1" y="675.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="241.1" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.52%)</title><rect x="238.1" y="659.0" width="6.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="241.1" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.52%)</title><rect x="238.1" y="643.0" width="6.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="241.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.52%)</title><rect x="238.1" y="627.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="241.1" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (5 samples, 1.29%)</title><rect x="244.2" y="691.0" width="15.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="247.2" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (5 samples, 1.29%)</title><rect x="244.2" y="675.0" width="15.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="247.2" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.26%)</title><rect x="244.2" y="659.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="247.2" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (4 samples, 1.03%)</title><rect x="247.2" y="659.0" width="12.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="250.2" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (4 samples, 1.03%)</title><rect x="247.2" y="643.0" width="12.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="250.2" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (2 samples, 0.52%)</title><rect x="253.3" y="627.0" width="6.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="256.3" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (15 samples, 3.87%)</title><rect x="259.4" y="691.0" width="45.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="262.4" y="702.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (15 samples, 3.87%)</title><rect x="259.4" y="675.0" width="45.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="262.4" y="686.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.77%)</title><rect x="262.4" y="659.0" width="9.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="265.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.26%)</title><rect x="271.5" y="659.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="274.5" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (10 samples, 2.58%)</title><rect x="274.6" y="659.0" width="30.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="277.6" y="670.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.26%)</title><rect x="274.6" y="643.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="277.6" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (9 samples, 2.32%)</title><rect x="277.6" y="643.0" width="27.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="280.6" y="654.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (9 samples, 2.32%)</title><rect x="277.6" y="627.0" width="27.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="280.6" y="638.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 1.29%)</title><rect x="280.7" y="611.0" width="15.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="283.7" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.26%)</title><rect x="283.7" y="595.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="286.7" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.26%)</title><rect x="283.7" y="579.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="286.7" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.26%)</title><rect x="283.7" y="563.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="286.7" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.26%)</title><rect x="283.7" y="547.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="286.7" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.26%)</title><rect x="286.8" y="595.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="289.8" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.52%)</title><rect x="289.8" y="595.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="292.8" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.26%)</title><rect x="295.9" y="611.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="298.9" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.26%)</title><rect x="295.9" y="595.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="298.9" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.26%)</title><rect x="295.9" y="579.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="298.9" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.26%)</title><rect x="295.9" y="563.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="298.9" y="574.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.26%)</title><rect x="295.9" y="547.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="298.9" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.26%)</title><rect x="298.9" y="611.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="301.9" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.26%)</title><rect x="298.9" y="595.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="301.9" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.26%)</title><rect x="298.9" y="579.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="301.9" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.26%)</title><rect x="298.9" y="563.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="301.9" y="574.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.26%)</title><rect x="298.9" y="547.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="301.9" y="558.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.26%)</title><rect x="298.9" y="531.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="301.9" y="542.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (1 samples, 0.26%)</title><rect x="298.9" y="515.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="301.9" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.26%)</title><rect x="302.0" y="611.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="305.0" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (3 samples, 0.77%)</title><rect x="305.0" y="707.0" width="9.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="308.0" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (3 samples, 0.77%)</title><rect x="305.0" y="691.0" width="9.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="308.0" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (3 samples, 0.77%)</title><rect x="305.0" y="675.0" width="9.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="308.0" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBindings.isEmpty (2 samples, 0.52%)</title><rect x="305.0" y="659.0" width="6.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="308.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.26%)</title><rect x="311.1" y="659.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="314.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.26%)</title><rect x="311.1" y="643.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="314.1" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata$TaskMetadataBuilder.build (1 samples, 0.26%)</title><rect x="314.1" y="755.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="317.1" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (177 samples, 45.62%)</title><rect x="317.2" y="803.0" width="538.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="320.2" y="814.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.26%)</title><rect x="344.5" y="787.0" width="3.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="347.5" y="798.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.26%)</title><rect x="344.5" y="771.0" width="3.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="347.5" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (23 samples, 5.93%)</title><rect x="347.6" y="787.0" width="69.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="350.6" y="798.0">com/lin..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (23 samples, 5.93%)</title><rect x="347.6" y="771.0" width="69.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="350.6" y="782.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (22 samples, 5.67%)</title><rect x="350.6" y="755.0" width="66.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="353.6" y="766.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.26%)</title><rect x="350.6" y="739.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="353.6" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.26%)</title><rect x="350.6" y="723.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="353.6" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.26%)</title><rect x="350.6" y="707.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="353.6" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.26%)</title><rect x="350.6" y="691.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="353.6" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (21 samples, 5.41%)</title><rect x="353.7" y="739.0" width="63.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="356.7" y="750.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.remove (12 samples, 3.09%)</title><rect x="381.0" y="723.0" width="36.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="384.0" y="734.0">jav..</text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.26%)</title><rect x="381.0" y="707.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="384.0" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.77%)</title><rect x="384.1" y="707.0" width="9.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="387.1" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.52%)</title><rect x="387.1" y="691.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="390.1" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (8 samples, 2.06%)</title><rect x="393.2" y="707.0" width="24.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="396.2" y="718.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.26%)</title><rect x="417.5" y="787.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="420.5" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.26%)</title><rect x="417.5" y="771.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="420.5" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.26%)</title><rect x="417.5" y="755.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="420.5" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.26%)</title><rect x="417.5" y="739.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="420.5" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (36 samples, 9.28%)</title><rect x="420.6" y="787.0" width="109.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="423.6" y="798.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (35 samples, 9.02%)</title><rect x="420.6" y="771.0" width="106.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="423.6" y="782.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (12 samples, 3.09%)</title><rect x="429.7" y="755.0" width="36.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="432.7" y="766.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (8 samples, 2.06%)</title><rect x="435.8" y="739.0" width="24.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="438.8" y="750.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (8 samples, 2.06%)</title><rect x="435.8" y="723.0" width="24.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="438.8" y="734.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (5 samples, 1.29%)</title><rect x="435.8" y="707.0" width="15.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="438.8" y="718.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (5 samples, 1.29%)</title><rect x="435.8" y="691.0" width="15.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="438.8" y="702.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 1.29%)</title><rect x="435.8" y="675.0" width="15.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="438.8" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (4 samples, 1.03%)</title><rect x="435.8" y="659.0" width="12.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="438.8" y="670.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 1.03%)</title><rect x="435.8" y="643.0" width="12.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="438.8" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.26%)</title><rect x="444.9" y="627.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="447.9" y="638.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray_nozero(BasicType, int, Thread*) (1 samples, 0.26%)</title><rect x="447.9" y="659.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="450.9" y="670.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.52%)</title><rect x="451.0" y="707.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="454.0" y="718.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.26%)</title><rect x="457.1" y="707.0" width="3.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="460.1" y="718.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.52%)</title><rect x="460.1" y="739.0" width="6.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="463.1" y="750.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.26%)</title><rect x="466.2" y="755.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="469.2" y="766.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.26%)</title><rect x="466.2" y="739.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="469.2" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.26%)</title><rect x="466.2" y="723.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="469.2" y="734.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (19 samples, 4.90%)</title><rect x="469.2" y="755.0" width="57.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="472.2" y="766.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (19 samples, 4.90%)</title><rect x="469.2" y="739.0" width="57.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="472.2" y="750.0">ch/qos..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.52%)</title><rect x="469.2" y="723.0" width="6.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="472.2" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.52%)</title><rect x="469.2" y="707.0" width="6.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="472.2" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.52%)</title><rect x="469.2" y="691.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="472.2" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.52%)</title><rect x="469.2" y="675.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="472.2" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.52%)</title><rect x="469.2" y="659.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="472.2" y="670.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (17 samples, 4.38%)</title><rect x="475.3" y="723.0" width="51.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="478.3" y="734.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.put (16 samples, 4.12%)</title><rect x="478.4" y="707.0" width="48.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="481.4" y="718.0">java..</text>
</g>
<g>
<title>java/util/HashMap.putVal (11 samples, 2.84%)</title><rect x="493.6" y="691.0" width="33.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="496.6" y="702.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.26%)</title><rect x="502.7" y="675.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="505.7" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (7 samples, 1.80%)</title><rect x="505.7" y="675.0" width="21.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="508.7" y="686.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (1 samples, 0.26%)</title><rect x="527.0" y="771.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="530.0" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.26%)</title><rect x="527.0" y="755.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="530.0" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.26%)</title><rect x="527.0" y="739.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="530.0" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.26%)</title><rect x="527.0" y="723.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="530.0" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (104 samples, 26.80%)</title><rect x="530.1" y="787.0" width="316.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="533.1" y="798.0">com/linecorp/decaton/processor/runtime/inte..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (104 samples, 26.80%)</title><rect x="530.1" y="771.0" width="316.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="533.1" y="782.0">com/linecorp/decaton/processor/runtime/inte..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$209/1328946355.process (71 samples, 18.30%)</title><rect x="542.2" y="755.0" width="215.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="545.2" y="766.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (71 samples, 18.30%)</title><rect x="542.2" y="739.0" width="215.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="545.2" y="750.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (71 samples, 18.30%)</title><rect x="542.2" y="723.0" width="215.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="545.2" y="734.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.26%)</title><rect x="551.3" y="707.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="554.3" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.26%)</title><rect x="551.3" y="691.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="554.3" y="702.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.26%)</title><rect x="551.3" y="675.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="554.3" y="686.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.26%)</title><rect x="551.3" y="659.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="554.3" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (65 samples, 16.75%)</title><rect x="554.4" y="707.0" width="197.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="557.4" y="718.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>java/lang/Thread.sleep (65 samples, 16.75%)</title><rect x="554.4" y="691.0" width="197.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="557.4" y="702.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (58 samples, 14.95%)</title><rect x="566.5" y="675.0" width="176.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="569.5" y="686.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (5 samples, 1.29%)</title><rect x="581.8" y="659.0" width="15.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="584.8" y="670.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.26%)</title><rect x="597.0" y="659.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="600.0" y="670.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.26%)</title><rect x="600.0" y="659.0" width="3.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="603.0" y="670.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.77%)</title><rect x="603.0" y="659.0" width="9.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="606.0" y="670.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.77%)</title><rect x="603.0" y="643.0" width="9.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="606.0" y="654.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.26%)</title><rect x="612.2" y="659.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="615.2" y="670.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.77%)</title><rect x="615.2" y="659.0" width="9.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="618.2" y="670.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (39 samples, 10.05%)</title><rect x="624.3" y="659.0" width="118.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="627.3" y="670.0">os::sleep(Thre..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.77%)</title><rect x="645.6" y="643.0" width="9.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="648.6" y="654.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (3 samples, 0.77%)</title><rect x="645.6" y="627.0" width="9.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="648.6" y="638.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 1.03%)</title><rect x="654.7" y="643.0" width="12.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="657.7" y="654.0"></text>
</g>
<g>
<title>__pthread_cond_init (2 samples, 0.52%)</title><rect x="666.9" y="643.0" width="6.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="669.9" y="654.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (15 samples, 3.87%)</title><rect x="673.0" y="643.0" width="45.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="676.0" y="654.0">__pt..</text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.26%)</title><rect x="718.6" y="643.0" width="3.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="721.6" y="654.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.26%)</title><rect x="721.6" y="643.0" width="3.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="724.6" y="654.0"></text>
</g>
<g>
<title>_init (1 samples, 0.26%)</title><rect x="724.7" y="643.0" width="3.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="727.7" y="654.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.26%)</title><rect x="727.7" y="643.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="730.7" y="654.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.26%)</title><rect x="730.8" y="643.0" width="3.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="733.8" y="654.0"></text>
</g>
<g>
<title>pthread_mutex_lock (3 samples, 0.77%)</title><rect x="733.8" y="643.0" width="9.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="736.8" y="654.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.26%)</title><rect x="742.9" y="675.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="745.9" y="686.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.52%)</title><rect x="746.0" y="675.0" width="6.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="749.0" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.52%)</title><rect x="752.1" y="707.0" width="6.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="755.1" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.52%)</title><rect x="752.1" y="691.0" width="6.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="755.1" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.52%)</title><rect x="752.1" y="675.0" width="6.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="755.1" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (10 samples, 2.58%)</title><rect x="758.1" y="755.0" width="30.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="761.1" y="766.0">co..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (6 samples, 1.55%)</title><rect x="770.3" y="739.0" width="18.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="773.3" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (1 samples, 0.26%)</title><rect x="788.6" y="755.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="791.6" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (1 samples, 0.26%)</title><rect x="788.6" y="739.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="791.6" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.26%)</title><rect x="791.6" y="755.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="794.6" y="766.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.26%)</title><rect x="791.6" y="739.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="794.6" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.26%)</title><rect x="794.6" y="755.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="797.6" y="766.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.26%)</title><rect x="794.6" y="739.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="797.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (11 samples, 2.84%)</title><rect x="797.7" y="755.0" width="33.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="800.7" y="766.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 2.58%)</title><rect x="800.7" y="739.0" width="30.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="803.7" y="750.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (10 samples, 2.58%)</title><rect x="800.7" y="723.0" width="30.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="803.7" y="734.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (7 samples, 1.80%)</title><rect x="800.7" y="707.0" width="21.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="803.7" y="718.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (7 samples, 1.80%)</title><rect x="800.7" y="691.0" width="21.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="803.7" y="702.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (7 samples, 1.80%)</title><rect x="800.7" y="675.0" width="21.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="803.7" y="686.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$291/1145378929.accept (3 samples, 0.77%)</title><rect x="806.8" y="659.0" width="9.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="809.8" y="670.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.52%)</title><rect x="815.9" y="659.0" width="6.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="818.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.77%)</title><rect x="822.0" y="707.0" width="9.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="825.0" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$291/1145378929.accept (3 samples, 0.77%)</title><rect x="822.0" y="691.0" width="9.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="825.0" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$76 (3 samples, 0.77%)</title><rect x="822.0" y="675.0" width="9.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="825.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReference.get (5 samples, 1.29%)</title><rect x="831.1" y="755.0" width="15.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="834.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.77%)</title><rect x="846.3" y="787.0" width="9.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="849.3" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.77%)</title><rect x="846.3" y="771.0" width="9.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="849.3" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.77%)</title><rect x="846.3" y="755.0" width="9.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="849.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.52%)</title><rect x="846.3" y="739.0" width="6.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="849.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.52%)</title><rect x="846.3" y="723.0" width="6.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="849.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 0.52%)</title><rect x="846.3" y="707.0" width="6.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="849.3" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$292/1558593461.accept (1 samples, 0.26%)</title><rect x="849.4" y="691.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="852.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.26%)</title><rect x="852.4" y="739.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="855.4" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$292/1558593461.accept (1 samples, 0.26%)</title><rect x="852.4" y="723.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="855.4" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$57 (1 samples, 0.26%)</title><rect x="852.4" y="707.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="855.4" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.26%)</title><rect x="852.4" y="691.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="855.4" y="702.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.26%)</title><rect x="852.4" y="675.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="855.4" y="686.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.26%)</title><rect x="852.4" y="659.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="855.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.26%)</title><rect x="855.5" y="867.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="858.5" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.26%)</title><rect x="855.5" y="851.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="858.5" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.26%)</title><rect x="855.5" y="835.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="858.5" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.26%)</title><rect x="855.5" y="819.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="858.5" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (1 samples, 0.26%)</title><rect x="855.5" y="803.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="858.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (6 samples, 1.55%)</title><rect x="858.5" y="867.0" width="18.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="861.5" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (4 samples, 1.03%)</title><rect x="864.6" y="851.0" width="12.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="867.6" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.26%)</title><rect x="864.6" y="835.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="867.6" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.26%)</title><rect x="864.6" y="819.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="867.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.26%)</title><rect x="864.6" y="803.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="867.6" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.26%)</title><rect x="864.6" y="787.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="867.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.26%)</title><rect x="864.6" y="771.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="867.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.77%)</title><rect x="867.6" y="835.0" width="9.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="870.6" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.77%)</title><rect x="867.6" y="819.0" width="9.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="870.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.77%)</title><rect x="867.6" y="803.0" width="9.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="870.6" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.77%)</title><rect x="867.6" y="787.0" width="9.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="870.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.52%)</title><rect x="876.8" y="915.0" width="6.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="879.8" y="926.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_exit(oopDesc*, BasicLock*, Thread*) (1 samples, 0.26%)</title><rect x="876.8" y="899.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="879.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.26%)</title><rect x="879.8" y="899.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="882.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.26%)</title><rect x="879.8" y="883.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="882.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.checkDisconnects (1 samples, 0.26%)</title><rect x="879.8" y="867.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="882.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$KeySetView.iterator (1 samples, 0.26%)</title><rect x="879.8" y="851.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="882.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$KeyIterator.&lt;init&gt; (1 samples, 0.26%)</title><rect x="879.8" y="835.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="882.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$BaseIterator.&lt;init&gt; (1 samples, 0.26%)</title><rect x="879.8" y="819.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="882.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$Traverser.advance (1 samples, 0.26%)</title><rect x="879.8" y="803.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="882.8" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.26%)</title><rect x="879.8" y="787.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="882.8" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.26%)</title><rect x="879.8" y="771.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="882.8" y="782.0"></text>
</g>
<g>
<title>start_thread (101 samples, 26.03%)</title><rect x="882.8" y="915.0" width="307.2" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="885.8" y="926.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (101 samples, 26.03%)</title><rect x="882.8" y="899.0" width="307.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="885.8" y="910.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (10 samples, 2.58%)</title><rect x="882.8" y="883.0" width="30.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="885.8" y="894.0">Ga..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (10 samples, 2.58%)</title><rect x="882.8" y="867.0" width="30.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="885.8" y="878.0">G1..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (10 samples, 2.58%)</title><rect x="882.8" y="851.0" width="30.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="885.8" y="862.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (10 samples, 2.58%)</title><rect x="882.8" y="835.0" width="30.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="885.8" y="846.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (6 samples, 1.55%)</title><rect x="892.0" y="819.0" width="18.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="895.0" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (4 samples, 1.03%)</title><rect x="898.0" y="803.0" width="12.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="901.0" y="814.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.26%)</title><rect x="907.2" y="787.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="910.2" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.26%)</title><rect x="910.2" y="819.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="913.2" y="830.0"></text>
</g>
<g>
<title>JavaThread::run() (91 samples, 23.45%)</title><rect x="913.2" y="883.0" width="276.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="916.2" y="894.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (91 samples, 23.45%)</title><rect x="913.2" y="867.0" width="276.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="916.2" y="878.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (91 samples, 23.45%)</title><rect x="913.2" y="851.0" width="276.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="916.2" y="862.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (91 samples, 23.45%)</title><rect x="913.2" y="835.0" width="276.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="916.2" y="846.0">CompileBroker::invoke_compiler_on_met..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (87 samples, 22.42%)</title><rect x="913.2" y="819.0" width="264.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="916.2" y="830.0">C2Compiler::compile_method(ciEnv*, ..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (87 samples, 22.42%)</title><rect x="913.2" y="803.0" width="264.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="916.2" y="814.0">Compile::Compile(ciEnv*, C2Compiler..</text>
</g>
<g>
<title>CallGenerator::for_osr(ciMethod*, int) (1 samples, 0.26%)</title><rect x="913.2" y="787.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="916.2" y="798.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.26%)</title><rect x="913.2" y="771.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="916.2" y="782.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.26%)</title><rect x="913.2" y="755.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="916.2" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.26%)</title><rect x="913.2" y="739.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="916.2" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.26%)</title><rect x="913.2" y="723.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="916.2" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.26%)</title><rect x="913.2" y="707.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="916.2" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.26%)</title><rect x="913.2" y="691.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="916.2" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.26%)</title><rect x="913.2" y="675.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="916.2" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.26%)</title><rect x="913.2" y="659.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="916.2" y="670.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.26%)</title><rect x="913.2" y="643.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="916.2" y="654.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.26%)</title><rect x="913.2" y="627.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="916.2" y="638.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.26%)</title><rect x="913.2" y="611.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="916.2" y="622.0"></text>
</g>
<g>
<title>ConstantPool::impl_signature_ref_at(int, bool) (1 samples, 0.26%)</title><rect x="913.2" y="595.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="916.2" y="606.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (37 samples, 9.54%)</title><rect x="916.3" y="787.0" width="112.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="919.3" y="798.0">Compile::Code_..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.26%)</title><rect x="916.3" y="771.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="919.3" y="782.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.26%)</title><rect x="916.3" y="755.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="919.3" y="766.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.26%)</title><rect x="916.3" y="739.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="919.3" y="750.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.77%)</title><rect x="919.3" y="771.0" width="9.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="922.3" y="782.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.26%)</title><rect x="919.3" y="755.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="922.3" y="766.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.26%)</title><rect x="919.3" y="739.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="922.3" y="750.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.26%)</title><rect x="919.3" y="723.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="922.3" y="734.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.52%)</title><rect x="922.4" y="755.0" width="6.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="925.4" y="766.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.26%)</title><rect x="925.4" y="739.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="928.4" y="750.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 1.03%)</title><rect x="928.5" y="771.0" width="12.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="931.5" y="782.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 1.03%)</title><rect x="928.5" y="755.0" width="12.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="931.5" y="766.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 0.77%)</title><rect x="928.5" y="739.0" width="9.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="931.5" y="750.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.26%)</title><rect x="937.6" y="739.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="940.6" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.52%)</title><rect x="940.6" y="771.0" width="6.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="943.6" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.52%)</title><rect x="940.6" y="755.0" width="6.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="943.6" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.52%)</title><rect x="940.6" y="739.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="943.6" y="750.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.26%)</title><rect x="940.6" y="723.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="943.6" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.26%)</title><rect x="943.7" y="723.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="946.7" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::PhaseChaitin(unsigned int, PhaseCFG&amp;, Matcher&amp;) (1 samples, 0.26%)</title><rect x="946.7" y="771.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="949.7" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (26 samples, 6.70%)</title><rect x="949.7" y="771.0" width="79.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="952.7" y="782.0">PhaseChai..</text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.26%)</title><rect x="949.7" y="755.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="952.7" y="766.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.26%)</title><rect x="952.8" y="755.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="955.8" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.26%)</title><rect x="955.8" y="755.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="958.8" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.26%)</title><rect x="955.8" y="739.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="958.8" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.26%)</title><rect x="958.9" y="755.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="961.9" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.26%)</title><rect x="958.9" y="739.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="961.9" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 1.29%)</title><rect x="961.9" y="755.0" width="15.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="964.9" y="766.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.26%)</title><rect x="968.0" y="739.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="971.0" y="750.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.26%)</title><rect x="971.0" y="739.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="974.0" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.26%)</title><rect x="974.1" y="739.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="977.1" y="750.0"></text>
</g>
<g>
<title>Block::find_node(Node const*) const (1 samples, 0.26%)</title><rect x="974.1" y="723.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="977.1" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 1.03%)</title><rect x="977.1" y="755.0" width="12.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="980.1" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 1.03%)</title><rect x="977.1" y="739.0" width="12.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="980.1" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.26%)</title><rect x="989.3" y="755.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="992.3" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.26%)</title><rect x="989.3" y="739.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="992.3" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.52%)</title><rect x="992.3" y="755.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="995.3" y="766.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.26%)</title><rect x="995.4" y="739.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="998.4" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.52%)</title><rect x="998.4" y="755.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1001.4" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.26%)</title><rect x="1001.4" y="739.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1004.4" y="750.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.26%)</title><rect x="1004.5" y="755.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1007.5" y="766.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.26%)</title><rect x="1004.5" y="739.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1007.5" y="750.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.26%)</title><rect x="1004.5" y="723.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1007.5" y="734.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.26%)</title><rect x="1004.5" y="707.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1007.5" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.26%)</title><rect x="1007.5" y="755.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1010.5" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.26%)</title><rect x="1007.5" y="739.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1010.5" y="750.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.26%)</title><rect x="1010.6" y="755.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1013.6" y="766.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.26%)</title><rect x="1010.6" y="739.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1013.6" y="750.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 1.29%)</title><rect x="1013.6" y="755.0" width="15.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1016.6" y="766.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.77%)</title><rect x="1019.7" y="739.0" width="9.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1022.7" y="750.0"></text>
</g>
<g>
<title>Compile::Optimize() (41 samples, 10.57%)</title><rect x="1028.8" y="787.0" width="124.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1031.8" y="798.0">Compile::Optimi..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.26%)</title><rect x="1028.8" y="771.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1031.8" y="782.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.26%)</title><rect x="1028.8" y="755.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1031.8" y="766.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (2 samples, 0.52%)</title><rect x="1031.9" y="771.0" width="6.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1034.9" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (30 samples, 7.73%)</title><rect x="1037.9" y="771.0" width="91.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1040.9" y="782.0">PhaseIdealL..</text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.26%)</title><rect x="1037.9" y="755.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1040.9" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.26%)</title><rect x="1041.0" y="755.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1044.0" y="766.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.26%)</title><rect x="1041.0" y="739.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1044.0" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (21 samples, 5.41%)</title><rect x="1044.0" y="755.0" width="63.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1047.0" y="766.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (20 samples, 5.15%)</title><rect x="1047.1" y="739.0" width="60.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1050.1" y="750.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.26%)</title><rect x="1047.1" y="723.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1050.1" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.26%)</title><rect x="1050.1" y="723.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1053.1" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (18 samples, 4.64%)</title><rect x="1053.1" y="723.0" width="54.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1056.1" y="734.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (4 samples, 1.03%)</title><rect x="1092.7" y="707.0" width="12.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1095.7" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.26%)</title><rect x="1104.8" y="707.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1107.8" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.26%)</title><rect x="1104.8" y="691.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1107.8" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.26%)</title><rect x="1107.9" y="755.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1110.9" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::eliminate_useless_predicates() (1 samples, 0.26%)</title><rect x="1110.9" y="755.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1113.9" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.26%)</title><rect x="1110.9" y="739.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1113.9" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.26%)</title><rect x="1110.9" y="723.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1113.9" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.77%)</title><rect x="1114.0" y="755.0" width="9.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1117.0" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.26%)</title><rect x="1114.0" y="739.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1117.0" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::spinup(Node*, Node*, Node*, Node*, Node*, small_cache*) (1 samples, 0.26%)</title><rect x="1114.0" y="723.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1117.0" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.52%)</title><rect x="1117.0" y="739.0" width="6.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1120.0" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.26%)</title><rect x="1117.0" y="723.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1120.0" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.26%)</title><rect x="1120.1" y="723.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1123.1" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.52%)</title><rect x="1123.1" y="755.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1126.1" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.52%)</title><rect x="1123.1" y="739.0" width="6.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1126.1" y="750.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.26%)</title><rect x="1123.1" y="723.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1126.1" y="734.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.26%)</title><rect x="1123.1" y="707.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1126.1" y="718.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.26%)</title><rect x="1126.1" y="723.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1129.1" y="734.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.26%)</title><rect x="1126.1" y="707.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1129.1" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1126.1" y="691.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1129.1" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1126.1" y="675.0" width="3.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1129.1" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1126.1" y="659.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1129.1" y="670.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.26%)</title><rect x="1126.1" y="643.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1129.1" y="654.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.26%)</title><rect x="1126.1" y="627.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1129.1" y="638.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (6 samples, 1.55%)</title><rect x="1129.2" y="771.0" width="18.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1132.2" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (6 samples, 1.55%)</title><rect x="1129.2" y="755.0" width="18.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1132.2" y="766.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.26%)</title><rect x="1129.2" y="739.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1132.2" y="750.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.26%)</title><rect x="1129.2" y="723.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1132.2" y="734.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.26%)</title><rect x="1129.2" y="707.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1132.2" y="718.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.26%)</title><rect x="1129.2" y="691.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1132.2" y="702.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.26%)</title><rect x="1132.2" y="739.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1135.2" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.26%)</title><rect x="1135.3" y="739.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1138.3" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.26%)</title><rect x="1135.3" y="723.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.3" y="734.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.26%)</title><rect x="1135.3" y="707.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.3" y="718.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.52%)</title><rect x="1138.3" y="739.0" width="6.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1141.3" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.26%)</title><rect x="1138.3" y="723.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1141.3" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.26%)</title><rect x="1138.3" y="707.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1141.3" y="718.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.26%)</title><rect x="1138.3" y="691.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1141.3" y="702.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.26%)</title><rect x="1141.3" y="723.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1144.3" y="734.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.26%)</title><rect x="1144.4" y="739.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1147.4" y="750.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.26%)</title><rect x="1144.4" y="723.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.4" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1144.4" y="707.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1147.4" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1144.4" y="691.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1147.4" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1144.4" y="675.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1147.4" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1144.4" y="659.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1147.4" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1144.4" y="643.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1147.4" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1144.4" y="627.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1147.4" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1144.4" y="611.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1147.4" y="622.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1144.4" y="595.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1147.4" y="606.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1144.4" y="579.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1147.4" y="590.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1144.4" y="563.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1147.4" y="574.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1144.4" y="547.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1147.4" y="558.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1144.4" y="531.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1147.4" y="542.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1144.4" y="515.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1147.4" y="526.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1144.4" y="499.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1147.4" y="510.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.26%)</title><rect x="1144.4" y="483.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.4" y="494.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.26%)</title><rect x="1144.4" y="467.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1147.4" y="478.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.26%)</title><rect x="1147.4" y="771.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1150.4" y="782.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.26%)</title><rect x="1147.4" y="755.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1150.4" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.26%)</title><rect x="1147.4" y="739.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1150.4" y="750.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.26%)</title><rect x="1147.4" y="723.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1150.4" y="734.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.26%)</title><rect x="1150.5" y="771.0" width="3.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1153.5" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 1.80%)</title><rect x="1153.5" y="787.0" width="21.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1156.5" y="798.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 1.80%)</title><rect x="1153.5" y="771.0" width="21.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.5" y="782.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 1.80%)</title><rect x="1153.5" y="755.0" width="21.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.5" y="766.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 1.80%)</title><rect x="1153.5" y="739.0" width="21.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.5" y="750.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 1.80%)</title><rect x="1153.5" y="723.0" width="21.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.5" y="734.0">P..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 1.55%)</title><rect x="1153.5" y="707.0" width="18.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1156.5" y="718.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.26%)</title><rect x="1153.5" y="691.0" width="3.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1156.5" y="702.0"></text>
</g>
<g>
<title>ciMethod::call_profile_at_bci(int) (1 samples, 0.26%)</title><rect x="1153.5" y="675.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1156.5" y="686.0"></text>
</g>
<g>
<title>ciMethodData::bci_to_data(int, ciMethod*) (1 samples, 0.26%)</title><rect x="1153.5" y="659.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1156.5" y="670.0"></text>
</g>
<g>
<title>ciMethodData::data_at(int) (1 samples, 0.26%)</title><rect x="1153.5" y="643.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.5" y="654.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.26%)</title><rect x="1153.5" y="627.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.5" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.03%)</title><rect x="1156.5" y="691.0" width="12.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.5" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.03%)</title><rect x="1156.5" y="675.0" width="12.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.5" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.03%)</title><rect x="1156.5" y="659.0" width="12.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.5" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.03%)</title><rect x="1156.5" y="643.0" width="12.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.5" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.03%)</title><rect x="1156.5" y="627.0" width="12.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.5" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.03%)</title><rect x="1156.5" y="611.0" width="12.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.5" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.52%)</title><rect x="1156.5" y="595.0" width="6.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.5" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.52%)</title><rect x="1156.5" y="579.0" width="6.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.52%)</title><rect x="1156.5" y="563.0" width="6.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.52%)</title><rect x="1156.5" y="547.0" width="6.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.52%)</title><rect x="1156.5" y="531.0" width="6.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.52%)</title><rect x="1156.5" y="515.0" width="6.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.5" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1156.5" y="499.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1159.5" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1156.5" y="483.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1156.5" y="467.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1156.5" y="451.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1156.5" y="435.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.26%)</title><rect x="1156.5" y="419.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.26%)</title><rect x="1156.5" y="403.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.5" y="414.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.26%)</title><rect x="1156.5" y="387.0" width="3.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1159.5" y="398.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.26%)</title><rect x="1156.5" y="371.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.5" y="382.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.26%)</title><rect x="1156.5" y="355.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.5" y="366.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.26%)</title><rect x="1156.5" y="339.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.5" y="350.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.26%)</title><rect x="1156.5" y="323.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.5" y="334.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.26%)</title><rect x="1156.5" y="307.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.5" y="318.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.26%)</title><rect x="1156.5" y="291.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.5" y="302.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.26%)</title><rect x="1156.5" y="275.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.5" y="286.0"></text>
</g>
<g>
<title>TypeOopPtr::klass() const (1 samples, 0.26%)</title><rect x="1156.5" y="259.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.5" y="270.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1159.6" y="499.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.6" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1159.6" y="483.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.6" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1159.6" y="467.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1159.6" y="451.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1159.6" y="435.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1159.6" y="419.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1159.6" y="403.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.6" y="414.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1159.6" y="387.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.6" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1159.6" y="371.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.6" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1159.6" y="355.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1159.6" y="339.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1159.6" y="323.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1159.6" y="307.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1162.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1159.6" y="291.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.6" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1159.6" y="275.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.6" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1159.6" y="259.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1159.6" y="243.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.6" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1159.6" y="227.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.6" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1159.6" y="211.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.6" y="222.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.26%)</title><rect x="1159.6" y="195.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.6" y="206.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.26%)</title><rect x="1159.6" y="179.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1162.6" y="190.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.26%)</title><rect x="1159.6" y="163.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.6" y="174.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.26%)</title><rect x="1159.6" y="147.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.6" y="158.0"></text>
</g>
<g>
<title>StoreNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd) (1 samples, 0.26%)</title><rect x="1159.6" y="131.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.6" y="142.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.26%)</title><rect x="1159.6" y="115.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.6" y="126.0"></text>
</g>
<g>
<title>EncodePNode::Value(PhaseTransform*) const (1 samples, 0.26%)</title><rect x="1159.6" y="99.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.6" y="110.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.26%)</title><rect x="1159.6" y="83.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.6" y="94.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.26%)</title><rect x="1159.6" y="67.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.6" y="78.0"></text>
</g>
<g>
<title>TypeNarrowPtr::hash() const (1 samples, 0.26%)</title><rect x="1159.6" y="51.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.6" y="62.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.26%)</title><rect x="1159.6" y="35.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.6" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.52%)</title><rect x="1162.6" y="595.0" width="6.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.6" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.52%)</title><rect x="1162.6" y="579.0" width="6.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.6" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.52%)</title><rect x="1162.6" y="563.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.52%)</title><rect x="1162.6" y="547.0" width="6.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.52%)</title><rect x="1162.6" y="531.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.52%)</title><rect x="1162.6" y="515.0" width="6.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.52%)</title><rect x="1162.6" y="499.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.6" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.52%)</title><rect x="1162.6" y="483.0" width="6.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.6" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.52%)</title><rect x="1162.6" y="467.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.52%)</title><rect x="1162.6" y="451.0" width="6.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.52%)</title><rect x="1162.6" y="435.0" width="6.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.52%)</title><rect x="1162.6" y="419.0" width="6.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.52%)</title><rect x="1162.6" y="403.0" width="6.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.6" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1162.6" y="387.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.6" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1162.6" y="371.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1162.6" y="355.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1162.6" y="339.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1162.6" y="323.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1162.6" y="307.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.6" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1162.6" y="291.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.6" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1162.6" y="275.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1162.6" y="259.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1162.6" y="243.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.6" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1162.6" y="227.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.6" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1162.6" y="211.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.6" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1162.6" y="195.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.6" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1162.6" y="179.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.6" y="190.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.26%)</title><rect x="1162.6" y="163.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.6" y="174.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.26%)</title><rect x="1162.6" y="147.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.6" y="158.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.26%)</title><rect x="1162.6" y="131.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.6" y="142.0"></text>
</g>
<g>
<title>ReplacedNodes::clone() (1 samples, 0.26%)</title><rect x="1162.6" y="115.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.6" y="126.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1165.7" y="387.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.7" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1165.7" y="371.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.7" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1165.7" y="355.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1168.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1165.7" y="339.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1165.7" y="323.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1165.7" y="307.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1165.7" y="291.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1168.7" y="302.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1165.7" y="275.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.7" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1165.7" y="259.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1168.7" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1165.7" y="243.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.7" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1165.7" y="227.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.7" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1165.7" y="211.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.7" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1165.7" y="195.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1168.7" y="206.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.26%)</title><rect x="1165.7" y="179.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.7" y="190.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.26%)</title><rect x="1165.7" y="163.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.7" y="174.0"></text>
</g>
<g>
<title>GraphKit::null_check_oop(Node*, Node**, bool, bool) (1 samples, 0.26%)</title><rect x="1165.7" y="147.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.7" y="158.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.26%)</title><rect x="1165.7" y="131.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.7" y="142.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.26%)</title><rect x="1165.7" y="115.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.7" y="126.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.26%)</title><rect x="1165.7" y="99.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1168.7" y="110.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.26%)</title><rect x="1165.7" y="83.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.7" y="94.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.26%)</title><rect x="1165.7" y="67.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.7" y="78.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.26%)</title><rect x="1165.7" y="51.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.7" y="62.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.26%)</title><rect x="1165.7" y="35.0" width="3.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1168.7" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1168.7" y="691.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.7" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1168.7" y="675.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.7" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1168.7" y="659.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1168.7" y="643.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1168.7" y="627.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1168.7" y="611.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1168.7" y="595.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.7" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1168.7" y="579.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.7" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1168.7" y="563.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1168.7" y="547.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1168.7" y="531.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1168.7" y="515.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1168.7" y="499.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.7" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1168.7" y="483.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.7" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1168.7" y="467.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1168.7" y="451.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1168.7" y="435.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1168.7" y="419.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1168.7" y="403.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.7" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1168.7" y="387.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.7" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1168.7" y="371.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1168.7" y="355.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1168.7" y="339.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1168.7" y="323.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1168.7" y="307.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.7" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1168.7" y="291.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.7" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1168.7" y="275.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1168.7" y="259.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.7" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1168.7" y="243.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.7" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1168.7" y="227.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.7" y="238.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.26%)</title><rect x="1168.7" y="211.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.7" y="222.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.26%)</title><rect x="1168.7" y="195.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.7" y="206.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.26%)</title><rect x="1168.7" y="179.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.7" y="190.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.26%)</title><rect x="1168.7" y="163.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.7" y="174.0"></text>
</g>
<g>
<title>IdealKit::load(Node*, Node*, Type const*, BasicType, int, bool) (1 samples, 0.26%)</title><rect x="1168.7" y="147.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.7" y="158.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.26%)</title><rect x="1168.7" y="131.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.7" y="142.0"></text>
</g>
<g>
<title>LoadNode::LoadNode(Node*, Node*, Node*, TypePtr const*, Type const*, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.26%)</title><rect x="1168.7" y="115.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.7" y="126.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*) (1 samples, 0.26%)</title><rect x="1168.7" y="99.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.7" y="110.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.26%)</title><rect x="1168.7" y="83.0" width="3.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1171.7" y="94.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.26%)</title><rect x="1171.8" y="707.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.26%)</title><rect x="1171.8" y="691.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.8" y="702.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.26%)</title><rect x="1171.8" y="675.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.8" y="686.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.26%)</title><rect x="1171.8" y="659.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.8" y="670.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.26%)</title><rect x="1171.8" y="643.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.8" y="654.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.26%)</title><rect x="1171.8" y="627.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.8" y="638.0"></text>
</g>
<g>
<title>AddPNode::Ideal_base_and_offset(Node*, PhaseTransform*, long&amp;) (1 samples, 0.26%)</title><rect x="1171.8" y="611.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.8" y="622.0"></text>
</g>
<g>
<title>PhaseTransform::find_long_type(Node*) (1 samples, 0.26%)</title><rect x="1171.8" y="595.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.8" y="606.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.26%)</title><rect x="1174.8" y="787.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.8" y="798.0"></text>
</g>
<g>
<title>Unique_Node_List::remove_useless_nodes(VectorSet&amp;) (1 samples, 0.26%)</title><rect x="1174.8" y="771.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.8" y="782.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (4 samples, 1.03%)</title><rect x="1177.8" y="819.0" width="12.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.8" y="830.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (4 samples, 1.03%)</title><rect x="1177.8" y="803.0" width="12.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.8" y="814.0"></text>
</g>
<g>
<title>Compilation::compile_method() (4 samples, 1.03%)</title><rect x="1177.8" y="787.0" width="12.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.8" y="798.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (4 samples, 1.03%)</title><rect x="1177.8" y="771.0" width="12.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.8" y="782.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.26%)</title><rect x="1177.8" y="755.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.8" y="766.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.26%)</title><rect x="1177.8" y="739.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.8" y="750.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.26%)</title><rect x="1177.8" y="723.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.8" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.26%)</title><rect x="1177.8" y="707.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.8" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.26%)</title><rect x="1177.8" y="691.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.8" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.26%)</title><rect x="1177.8" y="675.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.8" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.26%)</title><rect x="1177.8" y="659.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.8" y="670.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.26%)</title><rect x="1177.8" y="643.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.8" y="654.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.26%)</title><rect x="1177.8" y="627.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.8" y="638.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.26%)</title><rect x="1177.8" y="611.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.8" y="622.0"></text>
</g>
<g>
<title>ciConstantPoolCache::insert(int, void*) (1 samples, 0.26%)</title><rect x="1177.8" y="595.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.8" y="606.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.26%)</title><rect x="1180.9" y="755.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.9" y="766.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.26%)</title><rect x="1180.9" y="739.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.9" y="750.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_profile_call(LIR_OpProfileCall*) (1 samples, 0.26%)</title><rect x="1180.9" y="723.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.9" y="734.0"></text>
</g>
<g>
<title>LIR_Assembler::type_profile_helper(RegisterImpl*, ciMethodData*, ProfileData*, RegisterImpl*, Label*) (1 samples, 0.26%)</title><rect x="1180.9" y="707.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.9" y="718.0"></text>
</g>
<g>
<title>Assembler::cmpq(RegisterImpl*, Address) (1 samples, 0.26%)</title><rect x="1180.9" y="691.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.9" y="702.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.52%)</title><rect x="1183.9" y="755.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.9" y="766.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.26%)</title><rect x="1183.9" y="739.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.9" y="750.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (1 samples, 0.26%)</title><rect x="1183.9" y="723.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.9" y="734.0"></text>
</g>
<g>
<title>LIRGenerator::do_ProfileInvoke(ProfileInvoke*) (1 samples, 0.26%)</title><rect x="1183.9" y="707.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.9" y="718.0"></text>
</g>
<g>
<title>LIRGenerator::state_for(Instruction*, ValueStack*, bool) (1 samples, 0.26%)</title><rect x="1183.9" y="691.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.9" y="702.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.26%)</title><rect x="1183.9" y="675.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.9" y="686.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.26%)</title><rect x="1187.0" y="739.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.0" y="750.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.26%)</title><rect x="1187.0" y="723.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.0" y="734.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(LIR_OpList*, IntervalWalker*) (1 samples, 0.26%)</title><rect x="1187.0" y="707.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.0" y="718.0"></text>
</g>
</g>
</svg>
