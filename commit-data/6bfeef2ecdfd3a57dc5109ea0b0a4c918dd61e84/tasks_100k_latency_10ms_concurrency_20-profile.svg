<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="806" onload="init(evt)" viewBox="0 0 1200 806" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="789"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="789"> </text>
<g id="frames">
<g>
<title>all (274 samples, 100.00%)</title><rect x="10.0" y="755.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="766.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (21 samples, 7.66%)</title><rect x="10.0" y="739.0" width="90.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="750.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (21 samples, 7.66%)</title><rect x="10.0" y="723.0" width="90.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="734.0">com/lineco..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (6 samples, 2.19%)</title><rect x="10.0" y="707.0" width="25.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="718.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$265/1946577234.accept (5 samples, 1.82%)</title><rect x="10.0" y="691.0" width="21.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="702.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (5 samples, 1.82%)</title><rect x="10.0" y="675.0" width="21.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="686.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (4 samples, 1.46%)</title><rect x="10.0" y="659.0" width="17.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (4 samples, 1.46%)</title><rect x="10.0" y="643.0" width="17.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (4 samples, 1.46%)</title><rect x="10.0" y="627.0" width="17.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (4 samples, 1.46%)</title><rect x="10.0" y="611.0" width="17.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.36%)</title><rect x="22.9" y="595.0" width="4.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="25.9" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.36%)</title><rect x="22.9" y="579.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.9" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (1 samples, 0.36%)</title><rect x="27.2" y="659.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="30.2" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.36%)</title><rect x="27.2" y="643.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="30.2" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.36%)</title><rect x="27.2" y="627.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="30.2" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.36%)</title><rect x="31.5" y="691.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="34.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.36%)</title><rect x="31.5" y="675.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="34.5" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.36%)</title><rect x="31.5" y="659.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="34.5" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.36%)</title><rect x="31.5" y="643.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="34.5" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (15 samples, 5.47%)</title><rect x="35.8" y="707.0" width="64.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="38.8" y="718.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (15 samples, 5.47%)</title><rect x="35.8" y="691.0" width="64.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="38.8" y="702.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (10 samples, 3.65%)</title><rect x="35.8" y="675.0" width="43.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="38.8" y="686.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.09%)</title><rect x="35.8" y="659.0" width="13.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="38.8" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.09%)</title><rect x="35.8" y="643.0" width="13.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="38.8" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 1.09%)</title><rect x="35.8" y="627.0" width="13.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="38.8" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 1.09%)</title><rect x="35.8" y="611.0" width="13.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="38.8" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.73%)</title><rect x="35.8" y="595.0" width="8.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="38.8" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.73%)</title><rect x="35.8" y="579.0" width="8.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="38.8" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.36%)</title><rect x="35.8" y="563.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="38.8" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.36%)</title><rect x="35.8" y="547.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="38.8" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.36%)</title><rect x="35.8" y="531.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="38.8" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.36%)</title><rect x="35.8" y="515.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="38.8" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.36%)</title><rect x="35.8" y="499.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="38.8" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.36%)</title><rect x="35.8" y="483.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="38.8" y="494.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.36%)</title><rect x="35.8" y="467.0" width="4.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="38.8" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToStagedReceives (1 samples, 0.36%)</title><rect x="40.1" y="563.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="43.1" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.36%)</title><rect x="40.1" y="547.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="43.1" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.36%)</title><rect x="44.5" y="595.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="47.5" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.36%)</title><rect x="44.5" y="579.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="47.5" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.36%)</title><rect x="44.5" y="563.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="47.5" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.36%)</title><rect x="44.5" y="547.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="47.5" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.36%)</title><rect x="44.5" y="531.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="47.5" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.updateRegistrations (1 samples, 0.36%)</title><rect x="44.5" y="515.0" width="4.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="47.5" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.getUpdateEvents (1 samples, 0.36%)</title><rect x="44.5" y="499.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="47.5" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollCtl (1 samples, 0.36%)</title><rect x="44.5" y="483.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="47.5" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (5 samples, 1.82%)</title><rect x="48.8" y="659.0" width="21.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="51.8" y="670.0">o..</text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.36%)</title><rect x="48.8" y="643.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="51.8" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 1.46%)</title><rect x="53.1" y="643.0" width="17.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="56.1" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 1.09%)</title><rect x="53.1" y="627.0" width="12.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="56.1" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 1.09%)</title><rect x="53.1" y="611.0" width="12.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="56.1" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.73%)</title><rect x="53.1" y="595.0" width="8.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="56.1" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.36%)</title><rect x="57.4" y="579.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="60.4" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.36%)</title><rect x="57.4" y="563.0" width="4.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="60.4" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.36%)</title><rect x="57.4" y="547.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="60.4" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.36%)</title><rect x="57.4" y="531.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="60.4" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.36%)</title><rect x="57.4" y="515.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="60.4" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.36%)</title><rect x="57.4" y="499.0" width="4.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="60.4" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.36%)</title><rect x="57.4" y="483.0" width="4.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="60.4" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.36%)</title><rect x="61.7" y="595.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="64.7" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.36%)</title><rect x="61.7" y="579.0" width="4.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="64.7" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.36%)</title><rect x="61.7" y="563.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="64.7" y="574.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.36%)</title><rect x="61.7" y="547.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="64.7" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.36%)</title><rect x="66.0" y="627.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="69.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.36%)</title><rect x="66.0" y="611.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="69.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.36%)</title><rect x="66.0" y="595.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="69.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.36%)</title><rect x="66.0" y="579.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="69.0" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.36%)</title><rect x="66.0" y="563.0" width="4.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="69.0" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.36%)</title><rect x="66.0" y="547.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="69.0" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.36%)</title><rect x="66.0" y="531.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="69.0" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.36%)</title><rect x="70.3" y="659.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="73.3" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.36%)</title><rect x="70.3" y="643.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="73.3" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.36%)</title><rect x="70.3" y="627.0" width="4.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="73.3" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.36%)</title><rect x="74.6" y="659.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="77.6" y="670.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.36%)</title><rect x="74.6" y="643.0" width="4.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="77.6" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.36%)</title><rect x="78.9" y="675.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="81.9" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.36%)</title><rect x="78.9" y="659.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="81.9" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.36%)</title><rect x="78.9" y="643.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="81.9" y="654.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.36%)</title><rect x="78.9" y="627.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="81.9" y="638.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.36%)</title><rect x="78.9" y="611.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="81.9" y="622.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.36%)</title><rect x="78.9" y="595.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="81.9" y="606.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.36%)</title><rect x="78.9" y="579.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="81.9" y="590.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.36%)</title><rect x="78.9" y="563.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="81.9" y="574.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.36%)</title><rect x="78.9" y="547.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="81.9" y="558.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.36%)</title><rect x="78.9" y="531.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="81.9" y="542.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.36%)</title><rect x="78.9" y="515.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="81.9" y="526.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (1 samples, 0.36%)</title><rect x="78.9" y="499.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="81.9" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.36%)</title><rect x="78.9" y="483.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="81.9" y="494.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.36%)</title><rect x="78.9" y="467.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="81.9" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.36%)</title><rect x="83.2" y="675.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="86.2" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.36%)</title><rect x="83.2" y="659.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="86.2" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.36%)</title><rect x="83.2" y="643.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="86.2" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.36%)</title><rect x="83.2" y="627.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="86.2" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.36%)</title><rect x="83.2" y="611.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="86.2" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.36%)</title><rect x="83.2" y="595.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="86.2" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.36%)</title><rect x="83.2" y="579.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="86.2" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.36%)</title><rect x="83.2" y="563.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="86.2" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.setLeaderEpochIfExists (1 samples, 0.36%)</title><rect x="83.2" y="547.0" width="4.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="86.2" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.setIfExists (1 samples, 0.36%)</title><rect x="83.2" y="531.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="86.2" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.setIfExists (1 samples, 0.36%)</title><rect x="83.2" y="515.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="86.2" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.36%)</title><rect x="83.2" y="499.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="86.2" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (3 samples, 1.09%)</title><rect x="87.5" y="675.0" width="12.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="90.5" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.36%)</title><rect x="91.8" y="659.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="94.8" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.36%)</title><rect x="91.8" y="643.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="94.8" y="654.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.&lt;init&gt; (1 samples, 0.36%)</title><rect x="91.8" y="627.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="94.8" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.putMapEntries (1 samples, 0.36%)</title><rect x="91.8" y="611.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="94.8" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest$Builder.forConsumer (1 samples, 0.36%)</title><rect x="96.1" y="659.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="99.1" y="670.0"></text>
</g>
<g>
<title>java/lang/Thread.run (219 samples, 79.93%)</title><rect x="100.4" y="739.0" width="943.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="103.4" y="750.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (219 samples, 79.93%)</title><rect x="100.4" y="723.0" width="943.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="103.4" y="734.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (219 samples, 79.93%)</title><rect x="100.4" y="707.0" width="943.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="103.4" y="718.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$285/1221545598.run (206 samples, 75.18%)</title><rect x="100.4" y="691.0" width="887.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="103.4" y="702.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$285/1221545598.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$69 (206 samples, 75.18%)</title><rect x="100.4" y="675.0" width="887.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="103.4" y="686.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$69</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (206 samples, 75.18%)</title><rect x="100.4" y="659.0" width="887.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="103.4" y="670.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (202 samples, 73.72%)</title><rect x="100.4" y="643.0" width="870.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="103.4" y="654.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (34 samples, 12.41%)</title><rect x="113.4" y="627.0" width="146.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="116.4" y="638.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$43/416153648.extract (34 samples, 12.41%)</title><rect x="113.4" y="611.0" width="146.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="116.4" y="622.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (34 samples, 12.41%)</title><rect x="113.4" y="595.0" width="146.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="116.4" y="606.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (34 samples, 12.41%)</title><rect x="113.4" y="579.0" width="146.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="116.4" y="590.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (34 samples, 12.41%)</title><rect x="113.4" y="563.0" width="146.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="116.4" y="574.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (34 samples, 12.41%)</title><rect x="113.4" y="547.0" width="146.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="116.4" y="558.0">com/fasterxml/jack..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (9 samples, 3.28%)</title><rect x="113.4" y="531.0" width="38.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="116.4" y="542.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (5 samples, 1.82%)</title><rect x="117.7" y="515.0" width="21.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="120.7" y="526.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (5 samples, 1.82%)</title><rect x="117.7" y="499.0" width="21.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="120.7" y="510.0">c..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.36%)</title><rect x="117.7" y="483.0" width="4.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="120.7" y="494.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.36%)</title><rect x="117.7" y="467.0" width="4.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="120.7" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (4 samples, 1.46%)</title><rect x="122.0" y="483.0" width="17.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="125.0" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 1.46%)</title><rect x="122.0" y="467.0" width="17.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="125.0" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 1.46%)</title><rect x="122.0" y="451.0" width="17.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="125.0" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 1.46%)</title><rect x="122.0" y="435.0" width="17.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="125.0" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (4 samples, 1.46%)</title><rect x="122.0" y="419.0" width="17.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="125.0" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (3 samples, 1.09%)</title><rect x="139.2" y="515.0" width="12.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="142.2" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.36%)</title><rect x="147.8" y="499.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="150.8" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.36%)</title><rect x="147.8" y="483.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="150.8" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.36%)</title><rect x="147.8" y="467.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="150.8" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (23 samples, 8.39%)</title><rect x="152.1" y="531.0" width="99.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="155.1" y="542.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.36%)</title><rect x="152.1" y="515.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="155.1" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.36%)</title><rect x="152.1" y="499.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="155.1" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.36%)</title><rect x="152.1" y="483.0" width="4.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="155.1" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.36%)</title><rect x="152.1" y="467.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="155.1" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.36%)</title><rect x="156.4" y="515.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="159.4" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.36%)</title><rect x="156.4" y="499.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="159.4" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.36%)</title><rect x="156.4" y="483.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="159.4" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.36%)</title><rect x="156.4" y="467.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="159.4" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.36%)</title><rect x="156.4" y="451.0" width="4.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="159.4" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (21 samples, 7.66%)</title><rect x="160.7" y="515.0" width="90.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="163.7" y="526.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (7 samples, 2.55%)</title><rect x="160.7" y="499.0" width="30.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="163.7" y="510.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.36%)</title><rect x="160.7" y="483.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="163.7" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.36%)</title><rect x="160.7" y="467.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="163.7" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.36%)</title><rect x="160.7" y="451.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="163.7" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.36%)</title><rect x="160.7" y="435.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="163.7" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.36%)</title><rect x="160.7" y="419.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="163.7" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (4 samples, 1.46%)</title><rect x="165.0" y="483.0" width="17.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="168.0" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (2 samples, 0.73%)</title><rect x="165.0" y="467.0" width="8.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="168.0" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (2 samples, 0.73%)</title><rect x="173.6" y="467.0" width="8.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="176.6" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (2 samples, 0.73%)</title><rect x="173.6" y="451.0" width="8.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="176.6" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (2 samples, 0.73%)</title><rect x="173.6" y="435.0" width="8.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="176.6" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (2 samples, 0.73%)</title><rect x="173.6" y="419.0" width="8.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="176.6" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.73%)</title><rect x="182.3" y="483.0" width="8.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="185.3" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.73%)</title><rect x="182.3" y="467.0" width="8.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="185.3" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (14 samples, 5.11%)</title><rect x="190.9" y="499.0" width="60.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="193.9" y="510.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (14 samples, 5.11%)</title><rect x="190.9" y="483.0" width="60.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="193.9" y="494.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (14 samples, 5.11%)</title><rect x="190.9" y="467.0" width="60.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="193.9" y="478.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.73%)</title><rect x="203.8" y="451.0" width="8.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="206.8" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.36%)</title><rect x="208.1" y="435.0" width="4.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="211.1" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (4 samples, 1.46%)</title><rect x="212.4" y="451.0" width="17.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="215.4" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (4 samples, 1.46%)</title><rect x="212.4" y="435.0" width="17.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="215.4" y="446.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.73%)</title><rect x="212.4" y="419.0" width="8.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="215.4" y="430.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.73%)</title><rect x="212.4" y="403.0" width="8.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="215.4" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.73%)</title><rect x="212.4" y="387.0" width="8.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="215.4" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.73%)</title><rect x="221.0" y="419.0" width="8.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="224.0" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.73%)</title><rect x="221.0" y="403.0" width="8.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="224.0" y="414.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.73%)</title><rect x="221.0" y="387.0" width="8.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="224.0" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (4 samples, 1.46%)</title><rect x="229.6" y="451.0" width="17.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="232.6" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (4 samples, 1.46%)</title><rect x="229.6" y="435.0" width="17.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="232.6" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (4 samples, 1.46%)</title><rect x="229.6" y="419.0" width="17.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="232.6" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (4 samples, 1.46%)</title><rect x="229.6" y="403.0" width="17.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="232.6" y="414.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (4 samples, 1.46%)</title><rect x="229.6" y="387.0" width="17.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="232.6" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.36%)</title><rect x="246.9" y="451.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="249.9" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.36%)</title><rect x="246.9" y="435.0" width="4.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="249.9" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.36%)</title><rect x="246.9" y="419.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="249.9" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.73%)</title><rect x="251.2" y="531.0" width="8.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="254.2" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.73%)</title><rect x="251.2" y="515.0" width="8.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="254.2" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.73%)</title><rect x="251.2" y="499.0" width="8.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="254.2" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.73%)</title><rect x="251.2" y="483.0" width="8.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="254.2" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.73%)</title><rect x="251.2" y="467.0" width="8.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="254.2" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (153 samples, 55.84%)</title><rect x="259.8" y="627.0" width="658.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="262.8" y="638.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.36%)</title><rect x="264.1" y="611.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="267.1" y="622.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.36%)</title><rect x="264.1" y="595.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="267.1" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.36%)</title><rect x="264.1" y="579.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="267.1" y="590.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.73%)</title><rect x="268.4" y="611.0" width="8.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="271.4" y="622.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.73%)</title><rect x="268.4" y="595.0" width="8.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="271.4" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (29 samples, 10.58%)</title><rect x="277.0" y="611.0" width="124.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="280.0" y="622.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (1 samples, 0.36%)</title><rect x="285.6" y="595.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="288.6" y="606.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (26 samples, 9.49%)</title><rect x="289.9" y="595.0" width="112.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="292.9" y="606.0">org/slf4j/MDC..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (20 samples, 7.30%)</title><rect x="315.8" y="579.0" width="86.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="318.8" y="590.0">ch/qos/log..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.36%)</title><rect x="320.1" y="563.0" width="4.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="323.1" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.36%)</title><rect x="320.1" y="547.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="323.1" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.36%)</title><rect x="320.1" y="531.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="323.1" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.36%)</title><rect x="320.1" y="515.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="323.1" y="526.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (18 samples, 6.57%)</title><rect x="324.4" y="563.0" width="77.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="327.4" y="574.0">java/util..</text>
</g>
<g>
<title>java/util/HashMap.remove (18 samples, 6.57%)</title><rect x="324.4" y="547.0" width="77.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="327.4" y="558.0">java/util..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (9 samples, 3.28%)</title><rect x="363.1" y="531.0" width="38.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="366.1" y="542.0">jav..</text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (9 samples, 3.28%)</title><rect x="363.1" y="515.0" width="38.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="366.1" y="526.0">org..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.36%)</title><rect x="401.9" y="611.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="404.9" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.36%)</title><rect x="401.9" y="595.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="404.9" y="606.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.36%)</title><rect x="401.9" y="579.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="404.9" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (34 samples, 12.41%)</title><rect x="406.2" y="611.0" width="146.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="409.2" y="622.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (33 samples, 12.04%)</title><rect x="406.2" y="595.0" width="142.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="409.2" y="606.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (15 samples, 5.47%)</title><rect x="419.1" y="579.0" width="64.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="422.1" y="590.0">com/lin..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (9 samples, 3.28%)</title><rect x="440.7" y="563.0" width="38.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="443.7" y="574.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (9 samples, 3.28%)</title><rect x="440.7" y="547.0" width="38.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="443.7" y="558.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (6 samples, 2.19%)</title><rect x="445.0" y="531.0" width="25.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="448.0" y="542.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (6 samples, 2.19%)</title><rect x="445.0" y="515.0" width="25.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="448.0" y="526.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (6 samples, 2.19%)</title><rect x="445.0" y="499.0" width="25.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="448.0" y="510.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (6 samples, 2.19%)</title><rect x="445.0" y="483.0" width="25.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="448.0" y="494.0">O..</text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.36%)</title><rect x="453.6" y="467.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="456.6" y="478.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.36%)</title><rect x="453.6" y="451.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="456.6" y="462.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.36%)</title><rect x="457.9" y="467.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="460.9" y="478.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.36%)</title><rect x="457.9" y="451.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="460.9" y="462.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.73%)</title><rect x="462.2" y="467.0" width="8.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="465.2" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.36%)</title><rect x="466.5" y="451.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="469.5" y="462.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.36%)</title><rect x="466.5" y="435.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="469.5" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.36%)</title><rect x="466.5" y="419.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="469.5" y="430.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.73%)</title><rect x="470.8" y="531.0" width="8.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="473.8" y="542.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.36%)</title><rect x="479.4" y="563.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="482.4" y="574.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.36%)</title><rect x="479.4" y="547.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="482.4" y="558.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.36%)</title><rect x="479.4" y="531.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="482.4" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.36%)</title><rect x="479.4" y="515.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="482.4" y="526.0"></text>
</g>
<g>
<title>G1CollectedHeap::max_tlab_size() const (1 samples, 0.36%)</title><rect x="479.4" y="499.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="482.4" y="510.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (2 samples, 0.73%)</title><rect x="483.7" y="579.0" width="8.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="486.7" y="590.0"></text>
</g>
<g>
<title>java/lang/Long.toString (2 samples, 0.73%)</title><rect x="483.7" y="563.0" width="8.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="486.7" y="574.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.73%)</title><rect x="483.7" y="547.0" width="8.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="486.7" y="558.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (13 samples, 4.74%)</title><rect x="492.3" y="579.0" width="56.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="495.3" y="590.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (13 samples, 4.74%)</title><rect x="492.3" y="563.0" width="56.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="495.3" y="574.0">ch/qo..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.36%)</title><rect x="492.3" y="547.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="495.3" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.36%)</title><rect x="492.3" y="531.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="495.3" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.36%)</title><rect x="492.3" y="515.0" width="4.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="495.3" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.36%)</title><rect x="492.3" y="499.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="495.3" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.36%)</title><rect x="492.3" y="483.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="495.3" y="494.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (12 samples, 4.38%)</title><rect x="496.6" y="547.0" width="51.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="499.6" y="558.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.put (9 samples, 3.28%)</title><rect x="509.6" y="531.0" width="38.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="512.6" y="542.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.putVal (9 samples, 3.28%)</title><rect x="509.6" y="515.0" width="38.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="512.6" y="526.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.newNode (4 samples, 1.46%)</title><rect x="526.8" y="499.0" width="17.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="529.8" y="510.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.36%)</title><rect x="544.0" y="499.0" width="4.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="547.0" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (1 samples, 0.36%)</title><rect x="548.3" y="595.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="551.3" y="606.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.36%)</title><rect x="548.3" y="579.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="551.3" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.36%)</title><rect x="548.3" y="563.0" width="4.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="551.3" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.36%)</title><rect x="548.3" y="547.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="551.3" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (74 samples, 27.01%)</title><rect x="552.6" y="611.0" width="318.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="555.6" y="622.0">com/linecorp/decaton/processor/runtime/inte..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (74 samples, 27.01%)</title><rect x="552.6" y="595.0" width="318.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="555.6" y="606.0">com/linecorp/decaton/processor/runtime/inte..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$207/1551791257.process (66 samples, 24.09%)</title><rect x="561.2" y="579.0" width="284.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="564.2" y="590.0">com/linecorp/decaton/benchmark/Decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (66 samples, 24.09%)</title><rect x="561.2" y="563.0" width="284.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="564.2" y="574.0">com/linecorp/decaton/benchmark/Decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (65 samples, 23.72%)</title><rect x="561.2" y="547.0" width="280.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="564.2" y="558.0">com/linecorp/decaton/benchmark/Record..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 1.09%)</title><rect x="565.5" y="531.0" width="13.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="568.5" y="542.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 1.09%)</title><rect x="565.5" y="515.0" width="13.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="568.5" y="526.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 1.09%)</title><rect x="565.5" y="499.0" width="13.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="568.5" y="510.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (3 samples, 1.09%)</title><rect x="565.5" y="483.0" width="13.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="568.5" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.73%)</title><rect x="569.9" y="467.0" width="8.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="572.9" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.36%)</title><rect x="574.2" y="451.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="577.2" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (57 samples, 20.80%)</title><rect x="578.5" y="531.0" width="245.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="581.5" y="542.0">com/linecorp/decaton/benchmark/Re..</text>
</g>
<g>
<title>java/lang/Thread.sleep (56 samples, 20.44%)</title><rect x="582.8" y="515.0" width="241.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="585.8" y="526.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (47 samples, 17.15%)</title><rect x="600.0" y="499.0" width="202.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="603.0" y="510.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 1.09%)</title><rect x="617.2" y="483.0" width="12.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="620.2" y="494.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.36%)</title><rect x="630.1" y="483.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="633.1" y="494.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.36%)</title><rect x="634.5" y="483.0" width="4.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="637.5" y="494.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.36%)</title><rect x="634.5" y="467.0" width="4.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="637.5" y="478.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.36%)</title><rect x="638.8" y="483.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="641.8" y="494.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (37 samples, 13.50%)</title><rect x="643.1" y="483.0" width="159.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="646.1" y="494.0">os::sleep(Thread*, l..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (5 samples, 1.82%)</title><rect x="673.2" y="467.0" width="21.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="676.2" y="478.0">M..</text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.73%)</title><rect x="686.1" y="451.0" width="8.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="689.1" y="462.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.36%)</title><rect x="694.7" y="467.0" width="4.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="697.7" y="478.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.36%)</title><rect x="694.7" y="451.0" width="4.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="697.7" y="462.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 1.46%)</title><rect x="699.1" y="467.0" width="17.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="702.1" y="478.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (10 samples, 3.65%)</title><rect x="716.3" y="467.0" width="43.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="719.3" y="478.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 1.09%)</title><rect x="759.3" y="467.0" width="13.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="762.3" y="478.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.36%)</title><rect x="772.3" y="467.0" width="4.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="775.3" y="478.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (5 samples, 1.82%)</title><rect x="776.6" y="467.0" width="21.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="779.6" y="478.0">o..</text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.36%)</title><rect x="798.1" y="467.0" width="4.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="801.1" y="478.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (3 samples, 1.09%)</title><rect x="802.4" y="499.0" width="12.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="805.4" y="510.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.73%)</title><rect x="815.3" y="499.0" width="8.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="818.3" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 1.46%)</title><rect x="823.9" y="531.0" width="17.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="826.9" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.36%)</title><rect x="841.2" y="547.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="844.2" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.36%)</title><rect x="841.2" y="531.0" width="4.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="844.2" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.36%)</title><rect x="841.2" y="515.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="844.2" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.36%)</title><rect x="841.2" y="499.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="844.2" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (2 samples, 0.73%)</title><rect x="845.5" y="579.0" width="8.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="848.5" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.36%)</title><rect x="854.1" y="579.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="857.1" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.36%)</title><rect x="854.1" y="563.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="857.1" y="574.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.36%)</title><rect x="854.1" y="547.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="857.1" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (3 samples, 1.09%)</title><rect x="858.4" y="579.0" width="12.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="861.4" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (11 samples, 4.01%)</title><rect x="871.3" y="611.0" width="47.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="874.3" y="622.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (11 samples, 4.01%)</title><rect x="871.3" y="595.0" width="47.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="874.3" y="606.0">java..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.36%)</title><rect x="901.5" y="579.0" width="4.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="904.5" y="590.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.36%)</title><rect x="901.5" y="563.0" width="4.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="904.5" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.73%)</title><rect x="905.8" y="579.0" width="8.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="908.8" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$295/1948953541.accept (2 samples, 0.73%)</title><rect x="905.8" y="563.0" width="8.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="908.8" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$64 (2 samples, 0.73%)</title><rect x="905.8" y="547.0" width="8.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="908.8" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.36%)</title><rect x="905.8" y="531.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="908.8" y="542.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.36%)</title><rect x="905.8" y="515.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="908.8" y="526.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.36%)</title><rect x="905.8" y="499.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="908.8" y="510.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.36%)</title><rect x="910.1" y="531.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="913.1" y="542.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.36%)</title><rect x="910.1" y="515.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="913.1" y="526.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.36%)</title><rect x="910.1" y="499.0" width="4.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="913.1" y="510.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.36%)</title><rect x="910.1" y="483.0" width="4.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="913.1" y="494.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.36%)</title><rect x="914.4" y="579.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="917.4" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 4.38%)</title><rect x="918.7" y="627.0" width="51.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="921.7" y="638.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (12 samples, 4.38%)</title><rect x="918.7" y="611.0" width="51.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="921.7" y="622.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (11 samples, 4.01%)</title><rect x="923.0" y="595.0" width="47.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="926.0" y="606.0">java..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$296/1302433279.accept (11 samples, 4.01%)</title><rect x="923.0" y="579.0" width="47.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="926.0" y="590.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$63 (11 samples, 4.01%)</title><rect x="923.0" y="563.0" width="47.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="926.0" y="574.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$283/1567498729.complete (11 samples, 4.01%)</title><rect x="923.0" y="547.0" width="47.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="926.0" y="558.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$73 (11 samples, 4.01%)</title><rect x="923.0" y="531.0" width="47.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="926.0" y="542.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$282/1614934784.complete (11 samples, 4.01%)</title><rect x="923.0" y="515.0" width="47.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="926.0" y="526.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$49 (11 samples, 4.01%)</title><rect x="923.0" y="499.0" width="47.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="926.0" y="510.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (11 samples, 4.01%)</title><rect x="923.0" y="483.0" width="47.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="926.0" y="494.0">com/..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (11 samples, 4.01%)</title><rect x="923.0" y="467.0" width="47.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="926.0" y="478.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (11 samples, 4.01%)</title><rect x="923.0" y="451.0" width="47.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="926.0" y="462.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (11 samples, 4.01%)</title><rect x="923.0" y="435.0" width="47.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="926.0" y="446.0">ch/q..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (4 samples, 1.46%)</title><rect x="970.4" y="643.0" width="17.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="973.4" y="654.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.36%)</title><rect x="983.3" y="627.0" width="4.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="986.3" y="638.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.36%)</title><rect x="983.3" y="611.0" width="4.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="986.3" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (5 samples, 1.82%)</title><rect x="987.6" y="691.0" width="21.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="990.6" y="702.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 1.82%)</title><rect x="987.6" y="675.0" width="21.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="990.6" y="686.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 1.82%)</title><rect x="987.6" y="659.0" width="21.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="990.6" y="670.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 1.82%)</title><rect x="987.6" y="643.0" width="21.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="990.6" y="654.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (1 samples, 0.36%)</title><rect x="1004.8" y="627.0" width="4.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1007.8" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (8 samples, 2.92%)</title><rect x="1009.1" y="691.0" width="34.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1012.1" y="702.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (7 samples, 2.55%)</title><rect x="1009.1" y="675.0" width="30.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1012.1" y="686.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.36%)</title><rect x="1009.1" y="659.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1012.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.36%)</title><rect x="1009.1" y="643.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1012.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.36%)</title><rect x="1009.1" y="627.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1012.1" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.36%)</title><rect x="1009.1" y="611.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1012.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.36%)</title><rect x="1009.1" y="595.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1012.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 2.19%)</title><rect x="1013.4" y="659.0" width="25.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1016.4" y="670.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 2.19%)</title><rect x="1013.4" y="643.0" width="25.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1016.4" y="654.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 2.19%)</title><rect x="1013.4" y="627.0" width="25.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1016.4" y="638.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 2.19%)</title><rect x="1013.4" y="611.0" width="25.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1016.4" y="622.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateOf (1 samples, 0.36%)</title><rect x="1039.3" y="675.0" width="4.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1042.3" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.36%)</title><rect x="1043.6" y="739.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1046.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.36%)</title><rect x="1043.6" y="723.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1046.6" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.36%)</title><rect x="1043.6" y="707.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1046.6" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.failExpiredRequests (1 samples, 0.36%)</title><rect x="1043.6" y="691.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1046.6" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.access$300 (1 samples, 0.36%)</title><rect x="1043.6" y="675.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1046.6" y="686.0"></text>
</g>
<g>
<title>start_thread (33 samples, 12.04%)</title><rect x="1047.9" y="739.0" width="142.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1050.9" y="750.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (33 samples, 12.04%)</title><rect x="1047.9" y="723.0" width="142.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1050.9" y="734.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (9 samples, 3.28%)</title><rect x="1047.9" y="707.0" width="38.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1050.9" y="718.0">Gan..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (9 samples, 3.28%)</title><rect x="1047.9" y="691.0" width="38.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1050.9" y="702.0">G1P..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 1.82%)</title><rect x="1047.9" y="675.0" width="21.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1050.9" y="686.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (4 samples, 1.46%)</title><rect x="1047.9" y="659.0" width="17.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1050.9" y="670.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 1.09%)</title><rect x="1052.2" y="643.0" width="12.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1055.2" y="654.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.36%)</title><rect x="1065.1" y="659.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1068.1" y="670.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (3 samples, 1.09%)</title><rect x="1069.4" y="675.0" width="12.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1072.4" y="686.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.73%)</title><rect x="1069.4" y="659.0" width="8.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1072.4" y="670.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.36%)</title><rect x="1069.4" y="643.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1072.4" y="654.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.36%)</title><rect x="1069.4" y="627.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1072.4" y="638.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.36%)</title><rect x="1069.4" y="611.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1072.4" y="622.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.36%)</title><rect x="1073.7" y="643.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1076.7" y="654.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.36%)</title><rect x="1073.7" y="627.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1076.7" y="638.0"></text>
</g>
<g>
<title>JNIHandleBlock::oops_do(OopClosure*) (1 samples, 0.36%)</title><rect x="1073.7" y="611.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1076.7" y="622.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.36%)</title><rect x="1078.0" y="659.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1081.0" y="670.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.36%)</title><rect x="1078.0" y="643.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1081.0" y="654.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.36%)</title><rect x="1082.3" y="675.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1085.3" y="686.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.36%)</title><rect x="1082.3" y="659.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1085.3" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (1 samples, 0.36%)</title><rect x="1082.3" y="643.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1085.3" y="654.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (1 samples, 0.36%)</title><rect x="1082.3" y="627.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1085.3" y="638.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.36%)</title><rect x="1082.3" y="611.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1085.3" y="622.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (1 samples, 0.36%)</title><rect x="1082.3" y="595.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1085.3" y="606.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.36%)</title><rect x="1082.3" y="579.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1085.3" y="590.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.36%)</title><rect x="1082.3" y="563.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1085.3" y="574.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.36%)</title><rect x="1082.3" y="547.0" width="4.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1085.3" y="558.0"></text>
</g>
<g>
<title>JavaThread::run() (23 samples, 8.39%)</title><rect x="1086.6" y="707.0" width="99.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1089.6" y="718.0">JavaThread::..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (23 samples, 8.39%)</title><rect x="1086.6" y="691.0" width="99.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1089.6" y="702.0">JavaThread::..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (23 samples, 8.39%)</title><rect x="1086.6" y="675.0" width="99.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1089.6" y="686.0">CompileBroke..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (23 samples, 8.39%)</title><rect x="1086.6" y="659.0" width="99.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1089.6" y="670.0">CompileBroke..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (20 samples, 7.30%)</title><rect x="1086.6" y="643.0" width="86.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1089.6" y="654.0">C2Compiler..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (20 samples, 7.30%)</title><rect x="1086.6" y="627.0" width="86.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1089.6" y="638.0">Compile::C..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.36%)</title><rect x="1086.6" y="611.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1089.6" y="622.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.36%)</title><rect x="1086.6" y="595.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1089.6" y="606.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.36%)</title><rect x="1086.6" y="579.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1089.6" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.36%)</title><rect x="1086.6" y="563.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1089.6" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.36%)</title><rect x="1086.6" y="547.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1089.6" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.36%)</title><rect x="1086.6" y="531.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1089.6" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.36%)</title><rect x="1086.6" y="515.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1089.6" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.36%)</title><rect x="1086.6" y="499.0" width="4.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1089.6" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.36%)</title><rect x="1086.6" y="483.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1089.6" y="494.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.36%)</title><rect x="1086.6" y="467.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1089.6" y="478.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.36%)</title><rect x="1086.6" y="451.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1089.6" y="462.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.36%)</title><rect x="1086.6" y="435.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1089.6" y="446.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.36%)</title><rect x="1086.6" y="419.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1089.6" y="430.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.36%)</title><rect x="1086.6" y="403.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1089.6" y="414.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.36%)</title><rect x="1086.6" y="387.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1089.6" y="398.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.36%)</title><rect x="1086.6" y="371.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1089.6" y="382.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.36%)</title><rect x="1086.6" y="355.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1089.6" y="366.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.36%)</title><rect x="1086.6" y="339.0" width="4.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1089.6" y="350.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (11 samples, 4.01%)</title><rect x="1090.9" y="611.0" width="47.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1093.9" y="622.0">Comp..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.36%)</title><rect x="1090.9" y="595.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1093.9" y="606.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.36%)</title><rect x="1090.9" y="579.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1093.9" y="590.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.36%)</title><rect x="1090.9" y="563.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1093.9" y="574.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.36%)</title><rect x="1090.9" y="547.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1093.9" y="558.0"></text>
</g>
<g>
<title>loadConINode::bottom_type() const (1 samples, 0.36%)</title><rect x="1090.9" y="531.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1093.9" y="542.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.36%)</title><rect x="1090.9" y="515.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1093.9" y="526.0"></text>
</g>
<g>
<title>Type::uhash(Type const*) (1 samples, 0.36%)</title><rect x="1090.9" y="499.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1093.9" y="510.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.36%)</title><rect x="1095.3" y="595.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1098.3" y="606.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.36%)</title><rect x="1095.3" y="579.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1098.3" y="590.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.36%)</title><rect x="1095.3" y="563.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1098.3" y="574.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.36%)</title><rect x="1095.3" y="547.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1098.3" y="558.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.36%)</title><rect x="1099.6" y="595.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1102.6" y="606.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.36%)</title><rect x="1099.6" y="579.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1102.6" y="590.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.36%)</title><rect x="1099.6" y="563.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1102.6" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (8 samples, 2.92%)</title><rect x="1103.9" y="595.0" width="34.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1106.9" y="606.0">Ph..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.36%)</title><rect x="1103.9" y="579.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1106.9" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.36%)</title><rect x="1108.2" y="579.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1111.2" y="590.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.36%)</title><rect x="1108.2" y="563.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1111.2" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.36%)</title><rect x="1112.5" y="579.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1115.5" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.73%)</title><rect x="1116.8" y="579.0" width="8.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1119.8" y="590.0"></text>
</g>
<g>
<title>MachNode::in_RegMask(unsigned int) const (1 samples, 0.36%)</title><rect x="1116.8" y="563.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1119.8" y="574.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.36%)</title><rect x="1121.1" y="563.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1124.1" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.36%)</title><rect x="1125.4" y="579.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1128.4" y="590.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.36%)</title><rect x="1129.7" y="579.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1132.7" y="590.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.36%)</title><rect x="1129.7" y="563.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1132.7" y="574.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.36%)</title><rect x="1134.0" y="579.0" width="4.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1137.0" y="590.0"></text>
</g>
<g>
<title>Compile::Optimize() (5 samples, 1.82%)</title><rect x="1138.3" y="611.0" width="21.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1141.3" y="622.0">C..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (3 samples, 1.09%)</title><rect x="1138.3" y="595.0" width="12.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1141.3" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.36%)</title><rect x="1138.3" y="579.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1141.3" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.36%)</title><rect x="1142.6" y="579.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1145.6" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.36%)</title><rect x="1142.6" y="563.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1145.6" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.36%)</title><rect x="1142.6" y="547.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1145.6" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.36%)</title><rect x="1142.6" y="531.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1145.6" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.36%)</title><rect x="1142.6" y="515.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1145.6" y="526.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.36%)</title><rect x="1146.9" y="579.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1149.9" y="590.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.36%)</title><rect x="1146.9" y="563.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1149.9" y="574.0"></text>
</g>
<g>
<title>TypeLong::filter_helper(Type const*, bool) const (1 samples, 0.36%)</title><rect x="1146.9" y="547.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1149.9" y="558.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.36%)</title><rect x="1146.9" y="531.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1149.9" y="542.0"></text>
</g>
<g>
<title>TypeLong::xmeet(Type const*) const (1 samples, 0.36%)</title><rect x="1146.9" y="515.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.9" y="526.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.36%)</title><rect x="1146.9" y="499.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1149.9" y="510.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.36%)</title><rect x="1146.9" y="483.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1149.9" y="494.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.73%)</title><rect x="1151.2" y="595.0" width="8.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1154.2" y="606.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.73%)</title><rect x="1151.2" y="579.0" width="8.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.2" y="590.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.36%)</title><rect x="1151.2" y="563.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.2" y="574.0"></text>
</g>
<g>
<title>MultiNode::proj_out(unsigned int) const (1 samples, 0.36%)</title><rect x="1151.2" y="547.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1154.2" y="558.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.36%)</title><rect x="1155.5" y="563.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1158.5" y="574.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.36%)</title><rect x="1155.5" y="547.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.5" y="558.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.36%)</title><rect x="1155.5" y="531.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1158.5" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.09%)</title><rect x="1159.9" y="611.0" width="12.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.9" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.09%)</title><rect x="1159.9" y="595.0" width="12.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.09%)</title><rect x="1159.9" y="579.0" width="12.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.09%)</title><rect x="1159.9" y="563.0" width="12.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.09%)</title><rect x="1159.9" y="547.0" width="12.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.73%)</title><rect x="1159.9" y="531.0" width="8.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.9" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.73%)</title><rect x="1159.9" y="515.0" width="8.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.9" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.73%)</title><rect x="1159.9" y="499.0" width="8.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.73%)</title><rect x="1159.9" y="483.0" width="8.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.73%)</title><rect x="1159.9" y="467.0" width="8.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.73%)</title><rect x="1159.9" y="451.0" width="8.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.73%)</title><rect x="1159.9" y="435.0" width="8.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.9" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.73%)</title><rect x="1159.9" y="419.0" width="8.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.9" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.73%)</title><rect x="1159.9" y="403.0" width="8.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1162.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.73%)</title><rect x="1159.9" y="387.0" width="8.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.73%)</title><rect x="1159.9" y="371.0" width="8.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.73%)</title><rect x="1159.9" y="355.0" width="8.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.73%)</title><rect x="1159.9" y="339.0" width="8.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.9" y="350.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1159.9" y="323.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.9" y="334.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_access(bool, bool, BasicType, bool) (1 samples, 0.36%)</title><rect x="1159.9" y="307.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.9" y="318.0"></text>
</g>
<g>
<title>GraphKit::insert_mem_bar(int, Node*) (1 samples, 0.36%)</title><rect x="1159.9" y="291.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.9" y="302.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.36%)</title><rect x="1159.9" y="275.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.9" y="286.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.36%)</title><rect x="1159.9" y="259.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.9" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1164.2" y="323.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.2" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1164.2" y="307.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1164.2" y="291.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.2" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1164.2" y="275.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.2" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1164.2" y="259.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.2" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1164.2" y="243.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.2" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1164.2" y="227.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.2" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1164.2" y="211.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.2" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1164.2" y="195.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.2" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1164.2" y="179.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.2" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1164.2" y="163.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1167.2" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1164.2" y="147.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.2" y="158.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.36%)</title><rect x="1164.2" y="131.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.2" y="142.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.36%)</title><rect x="1164.2" y="115.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.2" y="126.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.36%)</title><rect x="1164.2" y="99.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1167.2" y="110.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.36%)</title><rect x="1164.2" y="83.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.2" y="94.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.36%)</title><rect x="1164.2" y="67.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.2" y="78.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.36%)</title><rect x="1164.2" y="51.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.2" y="62.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.36%)</title><rect x="1164.2" y="35.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.2" y="46.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.36%)</title><rect x="1168.5" y="531.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.5" y="542.0"></text>
</g>
<g>
<title>Parse::adjust_map_after_if(BoolTest::mask, Node*, float, Parse::Block*, Parse::Block*) (1 samples, 0.36%)</title><rect x="1168.5" y="515.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.5" y="526.0"></text>
</g>
<g>
<title>Parse::seems_stable_comparison() const (1 samples, 0.36%)</title><rect x="1168.5" y="499.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.5" y="510.0"></text>
</g>
<g>
<title>Compile::too_many_traps(ciMethod*, int, Deoptimization::DeoptReason) (1 samples, 0.36%)</title><rect x="1168.5" y="483.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.5" y="494.0"></text>
</g>
<g>
<title>ciMethodData::bci_to_data(int, ciMethod*) (1 samples, 0.36%)</title><rect x="1168.5" y="467.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.5" y="478.0"></text>
</g>
<g>
<title>ciMethodData::data_at(int) (1 samples, 0.36%)</title><rect x="1168.5" y="451.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.5" y="462.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.09%)</title><rect x="1172.8" y="643.0" width="12.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.8" y="654.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.09%)</title><rect x="1172.8" y="627.0" width="12.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.8" y="638.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.09%)</title><rect x="1172.8" y="611.0" width="12.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.8" y="622.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.09%)</title><rect x="1172.8" y="595.0" width="12.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.8" y="606.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.36%)</title><rect x="1172.8" y="579.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.8" y="590.0"></text>
</g>
<g>
<title>GlobalValueNumbering::GlobalValueNumbering(IR*) (1 samples, 0.36%)</title><rect x="1172.8" y="563.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.8" y="574.0"></text>
</g>
<g>
<title>ValueMap::find_insert(Instruction*) (1 samples, 0.36%)</title><rect x="1172.8" y="547.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.8" y="558.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.73%)</title><rect x="1177.1" y="579.0" width="8.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.1" y="590.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 0.73%)</title><rect x="1177.1" y="563.0" width="8.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.1" y="574.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.36%)</title><rect x="1177.1" y="547.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.1" y="558.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.36%)</title><rect x="1177.1" y="531.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.1" y="542.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.36%)</title><rect x="1177.1" y="515.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.1" y="526.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (1 samples, 0.36%)</title><rect x="1177.1" y="499.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.1" y="510.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.36%)</title><rect x="1181.4" y="547.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.4" y="558.0"></text>
</g>
<g>
<title>LIR_OpVisitState::visit(LIR_Op*) (1 samples, 0.36%)</title><rect x="1181.4" y="531.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.4" y="542.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.36%)</title><rect x="1185.7" y="707.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.7" y="718.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (1 samples, 0.36%)</title><rect x="1185.7" y="691.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.7" y="702.0"></text>
</g>
<g>
<title>PerfLongVariant::sample() (1 samples, 0.36%)</title><rect x="1185.7" y="675.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.7" y="686.0"></text>
</g>
</g>
</svg>
