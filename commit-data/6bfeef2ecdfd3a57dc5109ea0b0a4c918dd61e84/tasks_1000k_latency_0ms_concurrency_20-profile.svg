<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1030" onload="init(evt)" viewBox="0 0 1200 1030" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1013"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1013"> </text>
<g id="frames">
<g>
<title>all (1,154 samples, 100.00%)</title><rect x="10.0" y="979.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="990.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (275 samples, 23.83%)</title><rect x="10.0" y="963.0" width="281.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="974.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.09%)</title><rect x="10.0" y="947.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (1 samples, 0.09%)</title><rect x="10.0" y="931.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.09%)</title><rect x="10.0" y="915.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.09%)</title><rect x="10.0" y="899.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.09%)</title><rect x="10.0" y="883.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="10.0" y="867.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.09%)</title><rect x="10.0" y="851.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.09%)</title><rect x="10.0" y="835.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.09%)</title><rect x="10.0" y="819.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.09%)</title><rect x="10.0" y="803.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.09%)</title><rect x="10.0" y="787.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.09%)</title><rect x="10.0" y="771.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.&lt;init&gt; (1 samples, 0.09%)</title><rect x="10.0" y="755.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.&lt;init&gt; (1 samples, 0.09%)</title><rect x="10.0" y="739.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.abortedTransactions (1 samples, 0.09%)</title><rect x="10.0" y="723.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (274 samples, 23.74%)</title><rect x="11.0" y="947.0" width="280.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="14.0" y="958.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (2 samples, 0.17%)</title><rect x="11.0" y="931.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="14.0" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (2 samples, 0.17%)</title><rect x="11.0" y="915.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="14.0" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.17%)</title><rect x="11.0" y="899.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="14.0" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.17%)</title><rect x="11.0" y="883.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="14.0" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.17%)</title><rect x="11.0" y="867.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="14.0" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.17%)</title><rect x="11.0" y="851.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="14.0" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.17%)</title><rect x="11.0" y="835.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="14.0" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="11.0" y="819.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="14.0" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="11.0" y="803.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="14.0" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="11.0" y="787.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="14.0" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$267/2021056251.test (1 samples, 0.09%)</title><rect x="11.0" y="771.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="14.0" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.09%)</title><rect x="12.0" y="819.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="15.0" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.09%)</title><rect x="12.0" y="803.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.0" y="814.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.09%)</title><rect x="12.0" y="787.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="15.0" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.09%)</title><rect x="12.0" y="771.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.0" y="782.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="12.0" y="755.0" width="1.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="15.0" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (7 samples, 0.61%)</title><rect x="13.1" y="931.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.1" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (7 samples, 0.61%)</title><rect x="13.1" y="915.0" width="7.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.1" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (7 samples, 0.61%)</title><rect x="13.1" y="899.0" width="7.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.1" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$266/1453847935.accept (7 samples, 0.61%)</title><rect x="13.1" y="883.0" width="7.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="16.1" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (7 samples, 0.61%)</title><rect x="13.1" y="867.0" width="7.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.1" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (7 samples, 0.61%)</title><rect x="13.1" y="851.0" width="7.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.1" y="862.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (7 samples, 0.61%)</title><rect x="13.1" y="835.0" width="7.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.1" y="846.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.09%)</title><rect x="19.2" y="819.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="22.2" y="830.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (197 samples, 17.07%)</title><rect x="20.2" y="931.0" width="201.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="23.2" y="942.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$265/243339954.accept (192 samples, 16.64%)</title><rect x="20.2" y="915.0" width="196.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="23.2" y="926.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (191 samples, 16.55%)</title><rect x="21.2" y="899.0" width="195.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="24.2" y="910.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (182 samples, 15.77%)</title><rect x="22.3" y="883.0" width="186.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="25.3" y="894.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (182 samples, 15.77%)</title><rect x="22.3" y="867.0" width="186.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="25.3" y="878.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (182 samples, 15.77%)</title><rect x="22.3" y="851.0" width="186.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="25.3" y="862.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (182 samples, 15.77%)</title><rect x="22.3" y="835.0" width="186.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="25.3" y="846.0">java/util/concurrent/Exe..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (182 samples, 15.77%)</title><rect x="22.3" y="819.0" width="186.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="25.3" y="830.0">java/util/concurrent/Thr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (182 samples, 15.77%)</title><rect x="22.3" y="803.0" width="186.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.3" y="814.0">java/util/concurrent/Lin..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (107 samples, 9.27%)</title><rect x="88.7" y="787.0" width="109.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="91.7" y="798.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.09%)</title><rect x="88.7" y="771.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="91.7" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (26 samples, 2.25%)</title><rect x="89.8" y="771.0" width="26.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="92.8" y="782.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (26 samples, 2.25%)</title><rect x="89.8" y="755.0" width="26.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="92.8" y="766.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (26 samples, 2.25%)</title><rect x="89.8" y="739.0" width="26.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="92.8" y="750.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.52%)</title><rect x="116.3" y="771.0" width="6.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="119.3" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (6 samples, 0.52%)</title><rect x="116.3" y="755.0" width="6.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="119.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.17%)</title><rect x="117.4" y="739.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="120.4" y="750.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (2 samples, 0.17%)</title><rect x="117.4" y="723.0" width="2.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="120.4" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.26%)</title><rect x="119.4" y="739.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="122.4" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (74 samples, 6.41%)</title><rect x="122.5" y="771.0" width="75.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="125.5" y="782.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (74 samples, 6.41%)</title><rect x="122.5" y="755.0" width="75.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="125.5" y="766.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (73 samples, 6.33%)</title><rect x="122.5" y="739.0" width="74.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="125.5" y="750.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (73 samples, 6.33%)</title><rect x="122.5" y="723.0" width="74.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="125.5" y="734.0">java/uti..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (72 samples, 6.24%)</title><rect x="123.5" y="707.0" width="73.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="126.5" y="718.0">sun/misc..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.09%)</title><rect x="125.5" y="691.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="128.5" y="702.0"></text>
</g>
<g>
<title>Unsafe_Unpark (66 samples, 5.72%)</title><rect x="126.6" y="691.0" width="67.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="129.6" y="702.0">Unsafe_..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.17%)</title><rect x="128.6" y="675.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="131.6" y="686.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.17%)</title><rect x="130.7" y="675.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="133.7" y="686.0"></text>
</g>
<g>
<title>__pthread_cond_signal (38 samples, 3.29%)</title><rect x="132.7" y="675.0" width="38.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="135.7" y="686.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (6 samples, 0.52%)</title><rect x="171.6" y="675.0" width="6.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="174.6" y="686.0"></text>
</g>
<g>
<title>pthread_mutex_lock (16 samples, 1.39%)</title><rect x="177.7" y="675.0" width="16.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="180.7" y="686.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.09%)</title><rect x="194.1" y="691.0" width="1.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="197.1" y="702.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.17%)</title><rect x="195.1" y="691.0" width="2.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="198.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.09%)</title><rect x="197.1" y="739.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="200.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.17%)</title><rect x="198.1" y="787.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="201.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (2 samples, 0.17%)</title><rect x="198.1" y="771.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="201.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.17%)</title><rect x="198.1" y="755.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="201.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (8 samples, 0.69%)</title><rect x="200.2" y="787.0" width="8.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="203.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 0.69%)</title><rect x="200.2" y="771.0" width="8.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="203.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (8 samples, 0.69%)</title><rect x="200.2" y="755.0" width="8.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="203.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.09%)</title><rect x="202.2" y="739.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="205.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.09%)</title><rect x="203.3" y="739.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="206.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (4 samples, 0.35%)</title><rect x="204.3" y="739.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="207.3" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (4 samples, 0.35%)</title><rect x="208.4" y="883.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="211.4" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (4 samples, 0.35%)</title><rect x="208.4" y="867.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="211.4" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (4 samples, 0.35%)</title><rect x="212.5" y="883.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="215.5" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.35%)</title><rect x="212.5" y="867.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="215.5" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.35%)</title><rect x="212.5" y="851.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="215.5" y="862.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="216.6" y="915.0" width="1.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="219.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (3 samples, 0.26%)</title><rect x="217.6" y="915.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="220.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (3 samples, 0.26%)</title><rect x="217.6" y="899.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="220.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.26%)</title><rect x="217.6" y="883.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="220.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.26%)</title><rect x="217.6" y="867.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="220.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.09%)</title><rect x="220.6" y="915.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="223.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.09%)</title><rect x="220.6" y="899.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="223.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (68 samples, 5.89%)</title><rect x="221.7" y="931.0" width="69.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="224.7" y="942.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (68 samples, 5.89%)</title><rect x="221.7" y="915.0" width="69.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="224.7" y="926.0">org/apa..</text>
</g>
<g>
<title>SharedRuntime::handle_wrong_method(JavaThread*) (1 samples, 0.09%)</title><rect x="221.7" y="899.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="224.7" y="910.0"></text>
</g>
<g>
<title>SharedRuntime::reresolve_call_site(JavaThread*, Thread*) (1 samples, 0.09%)</title><rect x="221.7" y="883.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="224.7" y="894.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_method(JavaThread*, Thread*) (1 samples, 0.09%)</title><rect x="221.7" y="867.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="224.7" y="878.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.09%)</title><rect x="221.7" y="851.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="224.7" y="862.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invoke(CallInfo&amp;, Handle, constantPoolHandle, int, Bytecodes::Code, Thread*) (1 samples, 0.09%)</title><rect x="221.7" y="835.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="224.7" y="846.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokevirtual(CallInfo&amp;, Handle, constantPoolHandle, int, Thread*) (1 samples, 0.09%)</title><rect x="221.7" y="819.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="224.7" y="830.0"></text>
</g>
<g>
<title>LinkResolver::resolve_virtual_call(CallInfo&amp;, Handle, KlassHandle, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.09%)</title><rect x="221.7" y="803.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="224.7" y="814.0"></text>
</g>
<g>
<title>LinkResolver::runtime_resolve_virtual_method(CallInfo&amp;, methodHandle, KlassHandle, Handle, KlassHandle, bool, Thread*) (1 samples, 0.09%)</title><rect x="221.7" y="787.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="224.7" y="798.0"></text>
</g>
<g>
<title>CallInfo::set_virtual(KlassHandle, KlassHandle, methodHandle, methodHandle, int, Thread*) (1 samples, 0.09%)</title><rect x="221.7" y="771.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="224.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (39 samples, 3.38%)</title><rect x="222.7" y="899.0" width="39.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="225.7" y="910.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.09%)</title><rect x="222.7" y="883.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="225.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.09%)</title><rect x="222.7" y="867.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="225.7" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (1 samples, 0.09%)</title><rect x="222.7" y="851.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="225.7" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (38 samples, 3.29%)</title><rect x="223.7" y="883.0" width="38.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="226.7" y="894.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (37 samples, 3.21%)</title><rect x="224.7" y="867.0" width="37.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="227.7" y="878.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (31 samples, 2.69%)</title><rect x="224.7" y="851.0" width="31.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="227.7" y="862.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (31 samples, 2.69%)</title><rect x="224.7" y="835.0" width="31.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="227.7" y="846.0">or..</text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="225.8" y="819.0" width="1.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="228.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (15 samples, 1.30%)</title><rect x="226.8" y="819.0" width="15.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="229.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (7 samples, 0.61%)</title><rect x="233.9" y="803.0" width="7.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="236.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (7 samples, 0.61%)</title><rect x="233.9" y="787.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="236.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (7 samples, 0.61%)</title><rect x="233.9" y="771.0" width="7.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="236.9" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (7 samples, 0.61%)</title><rect x="233.9" y="755.0" width="7.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="236.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (7 samples, 0.61%)</title><rect x="233.9" y="739.0" width="7.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="236.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (7 samples, 0.61%)</title><rect x="233.9" y="723.0" width="7.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="236.9" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (7 samples, 0.61%)</title><rect x="233.9" y="707.0" width="7.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="236.9" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (1 samples, 0.09%)</title><rect x="241.1" y="803.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="244.1" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="241.1" y="787.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="244.1" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="241.1" y="771.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="244.1" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="241.1" y="755.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="244.1" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="241.1" y="739.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="244.1" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="241.1" y="723.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="244.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (13 samples, 1.13%)</title><rect x="242.1" y="819.0" width="13.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="245.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (13 samples, 1.13%)</title><rect x="242.1" y="803.0" width="13.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="245.1" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (13 samples, 1.13%)</title><rect x="242.1" y="787.0" width="13.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="245.1" y="798.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (13 samples, 1.13%)</title><rect x="242.1" y="771.0" width="13.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="245.1" y="782.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (10 samples, 0.87%)</title><rect x="245.2" y="755.0" width="10.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="248.2" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.09%)</title><rect x="250.3" y="739.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="253.3" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (1 samples, 0.09%)</title><rect x="250.3" y="723.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="253.3" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.09%)</title><rect x="250.3" y="707.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="253.3" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="250.3" y="691.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="253.3" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::array_klass_impl(bool, int, Thread*) (1 samples, 0.09%)</title><rect x="250.3" y="675.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="253.3" y="686.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.09%)</title><rect x="251.3" y="739.0" width="1.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="254.3" y="750.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.26%)</title><rect x="252.3" y="739.0" width="3.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="255.3" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.09%)</title><rect x="255.4" y="819.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="258.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (5 samples, 0.43%)</title><rect x="256.4" y="851.0" width="5.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="259.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (5 samples, 0.43%)</title><rect x="256.4" y="835.0" width="5.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="259.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.09%)</title><rect x="256.4" y="819.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="259.4" y="830.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="256.4" y="803.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="259.4" y="814.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="256.4" y="787.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="259.4" y="798.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="256.4" y="771.0" width="1.1" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="259.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (2 samples, 0.17%)</title><rect x="257.5" y="819.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="260.5" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.17%)</title><rect x="257.5" y="803.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="260.5" y="814.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="257.5" y="787.0" width="1.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="260.5" y="798.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="258.5" y="787.0" width="1.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="261.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="259.5" y="819.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="262.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="259.5" y="803.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="262.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="259.5" y="787.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="262.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.09%)</title><rect x="259.5" y="771.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="262.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Value.record (1 samples, 0.09%)</title><rect x="259.5" y="755.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="262.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="260.5" y="771.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="263.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.09%)</title><rect x="261.5" y="851.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="264.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (11 samples, 0.95%)</title><rect x="262.6" y="899.0" width="11.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="265.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (9 samples, 0.78%)</title><rect x="262.6" y="883.0" width="9.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="265.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (8 samples, 0.69%)</title><rect x="262.6" y="867.0" width="8.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="265.6" y="878.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.09%)</title><rect x="263.6" y="851.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="266.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$233/160254240.accept (1 samples, 0.09%)</title><rect x="263.6" y="835.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="266.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (2 samples, 0.17%)</title><rect x="264.6" y="851.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="267.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (2 samples, 0.17%)</title><rect x="264.6" y="835.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="267.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 0.17%)</title><rect x="266.7" y="851.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="269.7" y="862.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.09%)</title><rect x="267.7" y="835.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="270.7" y="846.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.09%)</title><rect x="267.7" y="819.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="270.7" y="830.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="267.7" y="803.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="270.7" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="267.7" y="787.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="270.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.17%)</title><rect x="268.7" y="851.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="271.7" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.09%)</title><rect x="268.7" y="835.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="271.7" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="268.7" y="819.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="271.7" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="268.7" y="803.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="271.7" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="268.7" y="787.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="271.7" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="268.7" y="771.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="271.7" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="268.7" y="755.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="271.7" y="766.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="268.7" y="739.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="271.7" y="750.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.09%)</title><rect x="268.7" y="723.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="271.7" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="268.7" y="707.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="271.7" y="718.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="269.7" y="835.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="272.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.09%)</title><rect x="270.7" y="867.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="273.7" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.09%)</title><rect x="270.7" y="851.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="273.7" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="270.7" y="835.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="273.7" y="846.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.09%)</title><rect x="270.7" y="819.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="273.7" y="830.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.09%)</title><rect x="270.7" y="803.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="273.7" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="270.7" y="787.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="273.7" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="270.7" y="771.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="273.7" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.09%)</title><rect x="270.7" y="755.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="273.7" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.09%)</title><rect x="270.7" y="739.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="273.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (2 samples, 0.17%)</title><rect x="271.8" y="883.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="274.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.09%)</title><rect x="271.8" y="867.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="274.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.09%)</title><rect x="271.8" y="851.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="274.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.09%)</title><rect x="271.8" y="835.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="274.8" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (1 samples, 0.09%)</title><rect x="271.8" y="819.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="274.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (1 samples, 0.09%)</title><rect x="271.8" y="803.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="274.8" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="271.8" y="787.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="274.8" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="271.8" y="771.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="274.8" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.pollHeartbeat (1 samples, 0.09%)</title><rect x="272.8" y="867.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="275.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (9 samples, 0.78%)</title><rect x="273.8" y="899.0" width="9.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="276.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (8 samples, 0.69%)</title><rect x="273.8" y="883.0" width="8.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="276.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (2 samples, 0.17%)</title><rect x="273.8" y="867.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="276.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (2 samples, 0.17%)</title><rect x="273.8" y="851.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="276.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.parse (2 samples, 0.17%)</title><rect x="273.8" y="835.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="276.8" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/Errors.forCode (1 samples, 0.09%)</title><rect x="273.8" y="819.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="276.8" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="273.8" y="803.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="276.8" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.09%)</title><rect x="273.8" y="787.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="276.8" y="798.0"></text>
</g>
<g>
<title>java/lang/Short.hashCode (1 samples, 0.09%)</title><rect x="273.8" y="771.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="276.8" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.getOrElse (1 samples, 0.09%)</title><rect x="274.8" y="819.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="277.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.hasField (1 samples, 0.09%)</title><rect x="274.8" y="803.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="277.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.09%)</title><rect x="274.8" y="787.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="277.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (6 samples, 0.52%)</title><rect x="275.9" y="867.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="278.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="275.9" y="851.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="278.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="275.9" y="835.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="278.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="275.9" y="819.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="278.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.09%)</title><rect x="275.9" y="803.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="278.9" y="814.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.09%)</title><rect x="275.9" y="787.0" width="1.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="278.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (3 samples, 0.26%)</title><rect x="276.9" y="851.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="279.9" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (2 samples, 0.17%)</title><rect x="276.9" y="835.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="279.9" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (2 samples, 0.17%)</title><rect x="276.9" y="819.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="279.9" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.17%)</title><rect x="276.9" y="803.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="279.9" y="814.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.17%)</title><rect x="276.9" y="787.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="279.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.09%)</title><rect x="278.9" y="835.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="281.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.09%)</title><rect x="278.9" y="819.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="281.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.09%)</title><rect x="278.9" y="803.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="281.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.09%)</title><rect x="278.9" y="787.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="281.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.09%)</title><rect x="278.9" y="771.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="281.9" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.09%)</title><rect x="278.9" y="755.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="281.9" y="766.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="278.9" y="739.0" width="1.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="281.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (2 samples, 0.17%)</title><rect x="279.9" y="851.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="282.9" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (2 samples, 0.17%)</title><rect x="279.9" y="835.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="282.9" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (2 samples, 0.17%)</title><rect x="279.9" y="819.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="282.9" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (2 samples, 0.17%)</title><rect x="279.9" y="803.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="282.9" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.09%)</title><rect x="279.9" y="787.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="282.9" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.09%)</title><rect x="279.9" y="771.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="282.9" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.updateSelectedKeys (1 samples, 0.09%)</title><rect x="281.0" y="787.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="284.0" y="798.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="281.0" y="771.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="284.0" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="281.0" y="755.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="284.0" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="281.0" y="739.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="284.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.09%)</title><rect x="282.0" y="883.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="285.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.09%)</title><rect x="282.0" y="867.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="285.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="282.0" y="851.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="285.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="282.0" y="835.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="285.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.09%)</title><rect x="282.0" y="819.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="285.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.09%)</title><rect x="282.0" y="803.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="285.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.09%)</title><rect x="282.0" y="787.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="285.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.09%)</title><rect x="282.0" y="771.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="285.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.09%)</title><rect x="282.0" y="755.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="285.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.validate (1 samples, 0.09%)</title><rect x="282.0" y="739.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="285.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.validate (1 samples, 0.09%)</title><rect x="282.0" y="723.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="285.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.validate (1 samples, 0.09%)</title><rect x="282.0" y="707.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="285.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.validate (1 samples, 0.09%)</title><rect x="282.0" y="691.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="285.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (8 samples, 0.69%)</title><rect x="283.0" y="899.0" width="8.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="286.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.09%)</title><rect x="283.0" y="883.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="286.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.09%)</title><rect x="283.0" y="867.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="286.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.&lt;init&gt; (1 samples, 0.09%)</title><rect x="283.0" y="851.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="286.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.&lt;init&gt; (1 samples, 0.09%)</title><rect x="283.0" y="835.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="286.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.&lt;init&gt; (1 samples, 0.09%)</title><rect x="283.0" y="819.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="286.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (7 samples, 0.61%)</title><rect x="284.0" y="883.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="287.0" y="894.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.09%)</title><rect x="284.0" y="867.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="287.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$257/1676422071.accept (1 samples, 0.09%)</title><rect x="284.0" y="851.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="287.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.09%)</title><rect x="284.0" y="835.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="287.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.09%)</title><rect x="284.0" y="819.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="287.0" y="830.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.09%)</title><rect x="285.1" y="867.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="288.1" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.09%)</title><rect x="285.1" y="851.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="288.1" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="285.1" y="835.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="288.1" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 0.17%)</title><rect x="286.1" y="867.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="289.1" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (2 samples, 0.17%)</title><rect x="286.1" y="851.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="289.1" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="287.1" y="835.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="290.1" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="287.1" y="819.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="290.1" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="287.1" y="803.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="290.1" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="287.1" y="787.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="290.1" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="287.1" y="771.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="290.1" y="782.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="287.1" y="755.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="290.1" y="766.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.09%)</title><rect x="287.1" y="739.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="290.1" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="287.1" y="723.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="290.1" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="287.1" y="707.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="290.1" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="287.1" y="691.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="290.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$259/1883650953.test (1 samples, 0.09%)</title><rect x="287.1" y="675.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="290.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 0.17%)</title><rect x="288.1" y="867.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="291.1" y="878.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (2 samples, 0.17%)</title><rect x="288.1" y="851.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="291.1" y="862.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.09%)</title><rect x="289.2" y="835.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="292.2" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (1 samples, 0.09%)</title><rect x="289.2" y="819.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="292.2" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.&lt;init&gt; (1 samples, 0.09%)</title><rect x="289.2" y="803.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="292.2" y="814.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeySet.iterator (1 samples, 0.09%)</title><rect x="289.2" y="787.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="292.2" y="798.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="290.2" y="867.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="293.2" y="878.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="290.2" y="851.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="293.2" y="862.0"></text>
</g>
<g>
<title>java/lang/Thread.run (763 samples, 66.12%)</title><rect x="291.2" y="963.0" width="780.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="294.2" y="974.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (763 samples, 66.12%)</title><rect x="291.2" y="947.0" width="780.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="294.2" y="958.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (763 samples, 66.12%)</title><rect x="291.2" y="931.0" width="780.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="294.2" y="942.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$285/1312866581.run (519 samples, 44.97%)</title><rect x="298.4" y="915.0" width="530.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="301.4" y="926.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$285..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$69 (517 samples, 44.80%)</title><rect x="300.4" y="899.0" width="528.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="303.4" y="910.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putT..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (517 samples, 44.80%)</title><rect x="300.4" y="883.0" width="528.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="303.4" y="894.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (508 samples, 44.02%)</title><rect x="300.4" y="867.0" width="519.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="303.4" y="878.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.schedule..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.17%)</title><rect x="311.6" y="851.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="314.6" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (154 samples, 13.34%)</title><rect x="313.7" y="851.0" width="157.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="316.7" y="862.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$43/416153648.extract (154 samples, 13.34%)</title><rect x="313.7" y="835.0" width="157.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="316.7" y="846.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (154 samples, 13.34%)</title><rect x="313.7" y="819.0" width="157.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="316.7" y="830.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (154 samples, 13.34%)</title><rect x="313.7" y="803.0" width="157.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="316.7" y="814.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (154 samples, 13.34%)</title><rect x="313.7" y="787.0" width="157.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="316.7" y="798.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (154 samples, 13.34%)</title><rect x="313.7" y="771.0" width="157.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="316.7" y="782.0">com/fasterxml/jackso..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (53 samples, 4.59%)</title><rect x="313.7" y="755.0" width="54.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="316.7" y="766.0">com/f..</text>
</g>
<g>
<title>[unknown] (2 samples, 0.17%)</title><rect x="328.0" y="739.0" width="2.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="331.0" y="750.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.17%)</title><rect x="328.0" y="723.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="331.0" y="734.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="330.1" y="739.0" width="1.0" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="333.1" y="750.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.35%)</title><rect x="331.1" y="739.0" width="4.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="334.1" y="750.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.17%)</title><rect x="333.1" y="723.0" width="2.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="336.1" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (11 samples, 0.95%)</title><rect x="335.2" y="739.0" width="11.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="338.2" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (11 samples, 0.95%)</title><rect x="335.2" y="723.0" width="11.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="338.2" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (11 samples, 0.95%)</title><rect x="335.2" y="707.0" width="11.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="338.2" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (10 samples, 0.87%)</title><rect x="335.2" y="691.0" width="10.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="338.2" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (10 samples, 0.87%)</title><rect x="335.2" y="675.0" width="10.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="338.2" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (10 samples, 0.87%)</title><rect x="335.2" y="659.0" width="10.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="338.2" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (10 samples, 0.87%)</title><rect x="335.2" y="643.0" width="10.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="338.2" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.09%)</title><rect x="345.4" y="691.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="348.4" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.09%)</title><rect x="345.4" y="675.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="348.4" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.09%)</title><rect x="345.4" y="659.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="348.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (21 samples, 1.82%)</title><rect x="346.4" y="739.0" width="21.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="349.4" y="750.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (20 samples, 1.73%)</title><rect x="346.4" y="723.0" width="20.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="349.4" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.09%)</title><rect x="356.6" y="707.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="359.6" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="356.6" y="691.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="359.6" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="356.6" y="675.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="359.6" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="356.6" y="659.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="359.6" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="356.6" y="643.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="359.6" y="654.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="356.6" y="627.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="359.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (9 samples, 0.78%)</title><rect x="357.7" y="707.0" width="9.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="360.7" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (9 samples, 0.78%)</title><rect x="357.7" y="691.0" width="9.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="360.7" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (9 samples, 0.78%)</title><rect x="357.7" y="675.0" width="9.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="360.7" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.09%)</title><rect x="366.9" y="723.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="369.9" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (90 samples, 7.80%)</title><rect x="367.9" y="755.0" width="92.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="370.9" y="766.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (4 samples, 0.35%)</title><rect x="368.9" y="739.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="371.9" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.09%)</title><rect x="373.0" y="739.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="376.0" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (2 samples, 0.17%)</title><rect x="374.0" y="739.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="377.0" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (3 samples, 0.26%)</title><rect x="376.1" y="739.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="379.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.09%)</title><rect x="378.1" y="723.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="381.1" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (17 samples, 1.47%)</title><rect x="379.1" y="739.0" width="17.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="382.1" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (17 samples, 1.47%)</title><rect x="379.1" y="723.0" width="17.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="382.1" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (13 samples, 1.13%)</title><rect x="383.2" y="707.0" width="13.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="386.2" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (11 samples, 0.95%)</title><rect x="385.3" y="691.0" width="11.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="388.3" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (5 samples, 0.43%)</title><rect x="391.4" y="675.0" width="5.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="394.4" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (3 samples, 0.26%)</title><rect x="396.5" y="739.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="399.5" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="396.5" y="723.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="399.5" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="396.5" y="707.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="399.5" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="396.5" y="691.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="399.5" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="396.5" y="675.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="399.5" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="396.5" y="659.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="399.5" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="396.5" y="643.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="399.5" y="654.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.09%)</title><rect x="396.5" y="627.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="399.5" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.17%)</title><rect x="397.5" y="723.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="400.5" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (57 samples, 4.94%)</title><rect x="399.6" y="739.0" width="58.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="402.6" y="750.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (23 samples, 1.99%)</title><rect x="401.6" y="723.0" width="23.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="404.6" y="734.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (8 samples, 0.69%)</title><rect x="402.7" y="707.0" width="8.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="405.7" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (8 samples, 0.69%)</title><rect x="402.7" y="691.0" width="8.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="405.7" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (8 samples, 0.69%)</title><rect x="402.7" y="675.0" width="8.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="405.7" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (12 samples, 1.04%)</title><rect x="410.8" y="707.0" width="12.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="413.8" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.17%)</title><rect x="423.1" y="707.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="426.1" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.17%)</title><rect x="423.1" y="691.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="426.1" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (3 samples, 0.26%)</title><rect x="425.1" y="723.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="428.1" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (29 samples, 2.51%)</title><rect x="428.2" y="723.0" width="29.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="431.2" y="734.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (29 samples, 2.51%)</title><rect x="428.2" y="707.0" width="29.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="431.2" y="718.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (29 samples, 2.51%)</title><rect x="428.2" y="691.0" width="29.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="431.2" y="702.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (9 samples, 0.78%)</title><rect x="429.2" y="675.0" width="9.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="432.2" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.17%)</title><rect x="432.3" y="659.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="435.3" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.26%)</title><rect x="434.4" y="659.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="437.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.26%)</title><rect x="434.4" y="643.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="437.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.26%)</title><rect x="434.4" y="627.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="437.4" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.17%)</title><rect x="435.4" y="611.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="438.4" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.09%)</title><rect x="437.4" y="659.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="440.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.09%)</title><rect x="437.4" y="643.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="440.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.09%)</title><rect x="437.4" y="627.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="440.4" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (3 samples, 0.26%)</title><rect x="438.4" y="675.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="441.4" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 0.26%)</title><rect x="438.4" y="659.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="441.4" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="438.4" y="643.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="441.4" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="438.4" y="627.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="441.4" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="438.4" y="611.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="441.4" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="438.4" y="595.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="441.4" y="606.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="438.4" y="579.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="441.4" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="438.4" y="563.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="441.4" y="574.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="438.4" y="547.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="441.4" y="558.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.09%)</title><rect x="438.4" y="531.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="441.4" y="542.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.09%)</title><rect x="438.4" y="515.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="441.4" y="526.0"></text>
</g>
<g>
<title>OtherRegionsTable::occupied() const (1 samples, 0.09%)</title><rect x="438.4" y="499.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="441.4" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.17%)</title><rect x="439.5" y="643.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="442.5" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.17%)</title><rect x="439.5" y="627.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="442.5" y="638.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.17%)</title><rect x="439.5" y="611.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="442.5" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (6 samples, 0.52%)</title><rect x="441.5" y="675.0" width="6.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="444.5" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (6 samples, 0.52%)</title><rect x="441.5" y="659.0" width="6.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="444.5" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (6 samples, 0.52%)</title><rect x="441.5" y="643.0" width="6.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="444.5" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (6 samples, 0.52%)</title><rect x="441.5" y="627.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="444.5" y="638.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 0.17%)</title><rect x="445.6" y="611.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="448.6" y="622.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (2 samples, 0.17%)</title><rect x="445.6" y="595.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="448.6" y="606.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (2 samples, 0.17%)</title><rect x="445.6" y="579.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="448.6" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (6 samples, 0.52%)</title><rect x="447.6" y="675.0" width="6.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="450.6" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.52%)</title><rect x="447.6" y="659.0" width="6.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="450.6" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.52%)</title><rect x="447.6" y="643.0" width="6.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="450.6" y="654.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.09%)</title><rect x="452.8" y="627.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="455.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (4 samples, 0.35%)</title><rect x="453.8" y="675.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="456.8" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.checkUnresolvedObjectId (2 samples, 0.17%)</title><rect x="457.9" y="739.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="460.9" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (11 samples, 0.95%)</title><rect x="459.9" y="755.0" width="11.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="462.9" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (2 samples, 0.17%)</title><rect x="459.9" y="739.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="462.9" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (9 samples, 0.78%)</title><rect x="462.0" y="739.0" width="9.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="465.0" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (9 samples, 0.78%)</title><rect x="462.0" y="723.0" width="9.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="465.0" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (9 samples, 0.78%)</title><rect x="462.0" y="707.0" width="9.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="465.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (9 samples, 0.78%)</title><rect x="462.0" y="691.0" width="9.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="465.0" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (313 samples, 27.12%)</title><rect x="471.2" y="851.0" width="320.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="474.2" y="862.0">com/linecorp/decaton/processor/runtime/inte..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (60 samples, 5.20%)</title><rect x="472.2" y="835.0" width="61.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="475.2" y="846.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (6 samples, 0.52%)</title><rect x="472.2" y="819.0" width="6.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="475.2" y="830.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (54 samples, 4.68%)</title><rect x="478.3" y="819.0" width="55.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="481.3" y="830.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (49 samples, 4.25%)</title><rect x="482.4" y="803.0" width="50.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="485.4" y="814.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (11 samples, 0.95%)</title><rect x="482.4" y="787.0" width="11.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="485.4" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (11 samples, 0.95%)</title><rect x="482.4" y="771.0" width="11.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="485.4" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (11 samples, 0.95%)</title><rect x="482.4" y="755.0" width="11.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="485.4" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (11 samples, 0.95%)</title><rect x="482.4" y="739.0" width="11.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="485.4" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="493.7" y="787.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="496.7" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="493.7" y="771.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="496.7" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="493.7" y="755.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="496.7" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.09%)</title><rect x="493.7" y="739.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="496.7" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (37 samples, 3.21%)</title><rect x="494.7" y="787.0" width="37.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="497.7" y="798.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (27 samples, 2.34%)</title><rect x="504.9" y="771.0" width="27.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="507.9" y="782.0">j..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.17%)</title><rect x="530.5" y="755.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="533.5" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.09%)</title><rect x="532.5" y="803.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="535.5" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (10 samples, 0.87%)</title><rect x="533.5" y="835.0" width="10.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="536.5" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (8 samples, 0.69%)</title><rect x="535.6" y="819.0" width="8.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="538.6" y="830.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (8 samples, 0.69%)</title><rect x="535.6" y="803.0" width="8.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="538.6" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (164 samples, 14.21%)</title><rect x="543.8" y="835.0" width="167.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="546.8" y="846.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (152 samples, 13.17%)</title><rect x="543.8" y="819.0" width="155.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="546.8" y="830.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (62 samples, 5.37%)</title><rect x="558.1" y="803.0" width="63.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="561.1" y="814.0">com/lin..</text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="570.3" y="787.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="573.3" y="798.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="570.3" y="771.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="573.3" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="570.3" y="755.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="573.3" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="570.3" y="739.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="573.3" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="570.3" y="723.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="573.3" y="734.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.09%)</title><rect x="570.3" y="707.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="573.3" y="718.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (36 samples, 3.12%)</title><rect x="571.4" y="787.0" width="36.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="574.4" y="798.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (33 samples, 2.86%)</title><rect x="574.4" y="771.0" width="33.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="577.4" y="782.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (17 samples, 1.47%)</title><rect x="581.6" y="755.0" width="17.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="584.6" y="766.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (17 samples, 1.47%)</title><rect x="581.6" y="739.0" width="17.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="584.6" y="750.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (17 samples, 1.47%)</title><rect x="581.6" y="723.0" width="17.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="584.6" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="581.6" y="707.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="584.6" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (15 samples, 1.30%)</title><rect x="582.6" y="707.0" width="15.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="585.6" y="718.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.17%)</title><rect x="583.6" y="691.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="586.6" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (4 samples, 0.35%)</title><rect x="585.7" y="691.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="588.7" y="702.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="585.7" y="675.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="588.7" y="686.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.09%)</title><rect x="585.7" y="659.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="588.7" y="670.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.26%)</title><rect x="586.7" y="675.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="589.7" y="686.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (3 samples, 0.26%)</title><rect x="586.7" y="659.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="589.7" y="670.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.09%)</title><rect x="587.7" y="643.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="590.7" y="654.0"></text>
</g>
<g>
<title>nmethod::get_deopt_original_pc(frame const*) (1 samples, 0.09%)</title><rect x="588.8" y="643.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="591.8" y="654.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.35%)</title><rect x="589.8" y="691.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="592.8" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.26%)</title><rect x="590.8" y="675.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="593.8" y="686.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.09%)</title><rect x="590.8" y="659.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="593.8" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="591.8" y="659.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="594.8" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="592.8" y="659.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="595.8" y="670.0"></text>
</g>
<g>
<title>frame::adjust_unextended_sp() (1 samples, 0.09%)</title><rect x="593.9" y="691.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="596.9" y="702.0"></text>
</g>
<g>
<title>nmethod::get_deopt_original_pc(frame const*) (2 samples, 0.17%)</title><rect x="594.9" y="691.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="597.9" y="702.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray_nozero(BasicType, int, Thread*) (1 samples, 0.09%)</title><rect x="596.9" y="691.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="599.9" y="702.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="598.0" y="707.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="601.0" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="598.0" y="691.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="601.0" y="702.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.17%)</title><rect x="599.0" y="755.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="602.0" y="766.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (6 samples, 0.52%)</title><rect x="601.0" y="755.0" width="6.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="604.0" y="766.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="607.2" y="755.0" width="1.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="610.2" y="766.0"></text>
</g>
<g>
<title>jshort_arraycopy (3 samples, 0.26%)</title><rect x="608.2" y="787.0" width="3.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="611.2" y="798.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (10 samples, 0.87%)</title><rect x="611.2" y="787.0" width="10.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="614.2" y="798.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (5 samples, 0.43%)</title><rect x="621.5" y="803.0" width="5.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="624.5" y="814.0"></text>
</g>
<g>
<title>java/lang/Long.toString (5 samples, 0.43%)</title><rect x="621.5" y="787.0" width="5.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="624.5" y="798.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.43%)</title><rect x="621.5" y="771.0" width="5.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="624.5" y="782.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.09%)</title><rect x="625.6" y="755.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="628.6" y="766.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (71 samples, 6.15%)</title><rect x="626.6" y="803.0" width="72.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="629.6" y="814.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (69 samples, 5.98%)</title><rect x="628.6" y="787.0" width="70.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="631.6" y="798.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.17%)</title><rect x="628.6" y="771.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="631.6" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.17%)</title><rect x="628.6" y="755.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="631.6" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.17%)</title><rect x="628.6" y="739.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="631.6" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.17%)</title><rect x="628.6" y="723.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="631.6" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.17%)</title><rect x="630.7" y="771.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="633.7" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.17%)</title><rect x="630.7" y="755.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="633.7" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.17%)</title><rect x="630.7" y="739.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="633.7" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.17%)</title><rect x="630.7" y="723.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="633.7" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="631.7" y="707.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="634.7" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (65 samples, 5.63%)</title><rect x="632.7" y="771.0" width="66.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="635.7" y="782.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.put (63 samples, 5.46%)</title><rect x="634.8" y="755.0" width="64.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="637.8" y="766.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.putVal (37 samples, 3.21%)</title><rect x="661.4" y="739.0" width="37.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="664.4" y="750.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (5 samples, 0.43%)</title><rect x="681.8" y="723.0" width="5.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="684.8" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (8 samples, 0.69%)</title><rect x="686.9" y="723.0" width="8.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="689.9" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.17%)</title><rect x="693.1" y="707.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="696.1" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.17%)</title><rect x="693.1" y="691.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="696.1" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.17%)</title><rect x="693.1" y="675.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="696.1" y="686.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.09%)</title><rect x="694.1" y="659.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="697.1" y="670.0"></text>
</g>
<g>
<title>vtable stub (4 samples, 0.35%)</title><rect x="695.1" y="723.0" width="4.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="698.1" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (12 samples, 1.04%)</title><rect x="699.2" y="819.0" width="12.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="702.2" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (12 samples, 1.04%)</title><rect x="699.2" y="803.0" width="12.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="702.2" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.get (12 samples, 1.04%)</title><rect x="699.2" y="787.0" width="12.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="702.2" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (12 samples, 1.04%)</title><rect x="699.2" y="771.0" width="12.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="702.2" y="782.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.35%)</title><rect x="706.3" y="755.0" width="4.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="709.3" y="766.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.35%)</title><rect x="706.3" y="739.0" width="4.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="709.3" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.09%)</title><rect x="710.4" y="755.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="713.4" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (54 samples, 4.68%)</title><rect x="711.5" y="835.0" width="55.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="714.5" y="846.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (54 samples, 4.68%)</title><rect x="711.5" y="819.0" width="55.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="714.5" y="830.0">com/l..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="715.5" y="803.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="718.5" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$207/1613369502.process (26 samples, 2.25%)</title><rect x="716.6" y="803.0" width="26.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="719.6" y="814.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (25 samples, 2.17%)</title><rect x="717.6" y="787.0" width="25.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="720.6" y="798.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (18 samples, 1.56%)</title><rect x="717.6" y="771.0" width="18.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="720.6" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (4 samples, 0.35%)</title><rect x="724.7" y="755.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="727.7" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (4 samples, 0.35%)</title><rect x="724.7" y="739.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="727.7" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 0.26%)</title><rect x="725.8" y="723.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="728.8" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (3 samples, 0.26%)</title><rect x="725.8" y="707.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="728.8" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (3 samples, 0.26%)</title><rect x="725.8" y="691.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="728.8" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (2 samples, 0.17%)</title><rect x="726.8" y="675.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="729.8" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (6 samples, 0.52%)</title><rect x="728.8" y="755.0" width="6.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="731.8" y="766.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.43%)</title><rect x="729.9" y="739.0" width="5.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="732.9" y="750.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.35%)</title><rect x="730.9" y="723.0" width="4.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="733.9" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.09%)</title><rect x="735.0" y="755.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="738.0" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (7 samples, 0.61%)</title><rect x="736.0" y="771.0" width="7.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="739.0" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 0.61%)</title><rect x="736.0" y="755.0" width="7.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="739.0" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (7 samples, 0.61%)</title><rect x="736.0" y="739.0" width="7.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="739.0" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (7 samples, 0.61%)</title><rect x="736.0" y="723.0" width="7.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="739.0" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (7 samples, 0.61%)</title><rect x="736.0" y="707.0" width="7.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="739.0" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (2 samples, 0.17%)</title><rect x="743.2" y="803.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="746.2" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.35%)</title><rect x="745.2" y="803.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="748.2" y="814.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.35%)</title><rect x="745.2" y="787.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="748.2" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="748.3" y="771.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="751.3" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="748.3" y="755.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="751.3" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="748.3" y="739.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="751.3" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="748.3" y="723.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="751.3" y="734.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="748.3" y="707.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="751.3" y="718.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.09%)</title><rect x="748.3" y="691.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="751.3" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.loggingExceptions (1 samples, 0.09%)</title><rect x="749.3" y="803.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="752.3" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$287/326722924.get (1 samples, 0.09%)</title><rect x="749.3" y="787.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="752.3" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$71 (1 samples, 0.09%)</title><rect x="749.3" y="771.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="752.3" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1318180415.linkToTargetMethod (1 samples, 0.09%)</title><rect x="750.3" y="803.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="753.3" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (1 samples, 0.09%)</title><rect x="750.3" y="787.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="753.3" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$290/1400678007.get$Lambda (1 samples, 0.09%)</title><rect x="750.3" y="771.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="753.3" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="750.3" y="755.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="753.3" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="750.3" y="739.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="753.3" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="750.3" y="723.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="753.3" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="750.3" y="707.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="753.3" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="750.3" y="691.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="753.3" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="750.3" y="675.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="753.3" y="686.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="750.3" y="659.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="753.3" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.09%)</title><rect x="750.3" y="643.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="753.3" y="654.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.09%)</title><rect x="750.3" y="627.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="753.3" y="638.0"></text>
</g>
<g>
<title>AbsSeq::davg() const (1 samples, 0.09%)</title><rect x="750.3" y="611.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="753.3" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (10 samples, 0.87%)</title><rect x="751.3" y="803.0" width="10.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="754.3" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (10 samples, 0.87%)</title><rect x="751.3" y="787.0" width="10.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="754.3" y="798.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.35%)</title><rect x="752.4" y="771.0" width="4.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="755.4" y="782.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (5 samples, 0.43%)</title><rect x="756.4" y="771.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="759.4" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (5 samples, 0.43%)</title><rect x="761.6" y="803.0" width="5.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="764.6" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.26%)</title><rect x="763.6" y="787.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="766.6" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/446313343.linkToTargetMethod (1 samples, 0.09%)</title><rect x="766.7" y="835.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="769.7" y="846.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/399931359.invokeStatic_L3_L (1 samples, 0.09%)</title><rect x="766.7" y="819.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="769.7" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$300/170035972.get$Lambda (1 samples, 0.09%)</title><rect x="766.7" y="803.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="769.7" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="766.7" y="787.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="769.7" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="766.7" y="771.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="769.7" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="766.7" y="755.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="769.7" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="766.7" y="739.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="769.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (23 samples, 1.99%)</title><rect x="767.7" y="835.0" width="23.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="770.7" y="846.0">j..</text>
</g>
<g>
<title>__clock_gettime (10 samples, 0.87%)</title><rect x="771.8" y="819.0" width="10.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="774.8" y="830.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.78%)</title><rect x="772.8" y="803.0" width="9.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="775.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (9 samples, 0.78%)</title><rect x="782.0" y="819.0" width="9.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="785.0" y="830.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="783.0" y="803.0" width="1.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="786.0" y="814.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.43%)</title><rect x="784.1" y="803.0" width="5.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="787.1" y="814.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.35%)</title><rect x="785.1" y="787.0" width="4.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="788.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.17%)</title><rect x="789.2" y="803.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="792.2" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$300/170035972.accept (1 samples, 0.09%)</title><rect x="789.2" y="787.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="792.2" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$64 (1 samples, 0.09%)</title><rect x="789.2" y="771.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="792.2" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.09%)</title><rect x="789.2" y="755.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="792.2" y="766.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.09%)</title><rect x="789.2" y="739.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="792.2" y="750.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.09%)</title><rect x="789.2" y="723.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="792.2" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="789.2" y="707.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="792.2" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$301/2145558597.accept (1 samples, 0.09%)</title><rect x="790.2" y="787.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="793.2" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$63 (1 samples, 0.09%)</title><rect x="790.2" y="771.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="793.2" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$283/654555386.complete (1 samples, 0.09%)</title><rect x="790.2" y="755.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="793.2" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$73 (1 samples, 0.09%)</title><rect x="790.2" y="739.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="793.2" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$282/1713442241.complete (1 samples, 0.09%)</title><rect x="790.2" y="723.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="793.2" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$49 (1 samples, 0.09%)</title><rect x="790.2" y="707.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="793.2" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (1 samples, 0.09%)</title><rect x="790.2" y="691.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="793.2" y="702.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.09%)</title><rect x="790.2" y="675.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="793.2" y="686.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.09%)</title><rect x="790.2" y="659.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="793.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (25 samples, 2.17%)</title><rect x="791.2" y="851.0" width="25.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="794.2" y="862.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (22 samples, 1.91%)</title><rect x="794.3" y="835.0" width="22.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="797.3" y="846.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (19 samples, 1.65%)</title><rect x="797.3" y="819.0" width="19.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="800.3" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$301/2145558597.accept (19 samples, 1.65%)</title><rect x="797.3" y="803.0" width="19.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="800.3" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$63 (19 samples, 1.65%)</title><rect x="797.3" y="787.0" width="19.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="800.3" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$283/654555386.complete (19 samples, 1.65%)</title><rect x="797.3" y="771.0" width="19.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="800.3" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$73 (19 samples, 1.65%)</title><rect x="797.3" y="755.0" width="19.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="800.3" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$282/1713442241.complete (19 samples, 1.65%)</title><rect x="797.3" y="739.0" width="19.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="800.3" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$49 (19 samples, 1.65%)</title><rect x="797.3" y="723.0" width="19.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="800.3" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (19 samples, 1.65%)</title><rect x="797.3" y="707.0" width="19.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="800.3" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (19 samples, 1.65%)</title><rect x="797.3" y="691.0" width="19.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="800.3" y="702.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (19 samples, 1.65%)</title><rect x="797.3" y="675.0" width="19.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="800.3" y="686.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.26%)</title><rect x="816.8" y="851.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="819.8" y="862.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.26%)</title><rect x="816.8" y="835.0" width="3.0" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="819.8" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (9 samples, 0.78%)</title><rect x="819.8" y="867.0" width="9.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="822.8" y="878.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.43%)</title><rect x="822.9" y="851.0" width="5.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="825.9" y="862.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.43%)</title><rect x="822.9" y="835.0" width="5.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="825.9" y="846.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="828.0" y="851.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="831.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (3 samples, 0.26%)</title><rect x="829.0" y="915.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="832.0" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.26%)</title><rect x="829.0" y="899.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="832.0" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.26%)</title><rect x="829.0" y="883.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="832.0" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.26%)</title><rect x="829.0" y="867.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="832.0" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (234 samples, 20.28%)</title><rect x="832.1" y="915.0" width="239.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="835.1" y="926.0">java/util/concurrent/ThreadPoolE..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (234 samples, 20.28%)</title><rect x="832.1" y="899.0" width="239.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="835.1" y="910.0">java/util/concurrent/LinkedBlock..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (192 samples, 16.64%)</title><rect x="853.6" y="883.0" width="196.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="856.6" y="894.0">java/util/concurrent/locks..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (11 samples, 0.95%)</title><rect x="859.7" y="867.0" width="11.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="862.7" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (11 samples, 0.95%)</title><rect x="859.7" y="851.0" width="11.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="862.7" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (11 samples, 0.95%)</title><rect x="859.7" y="835.0" width="11.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="862.7" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (11 samples, 0.95%)</title><rect x="859.7" y="819.0" width="11.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="862.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (1 samples, 0.09%)</title><rect x="871.0" y="867.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="874.0" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (1 samples, 0.09%)</title><rect x="871.0" y="851.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="874.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (173 samples, 14.99%)</title><rect x="872.0" y="867.0" width="176.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="875.0" y="878.0">java/util/concurrent/lo..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (173 samples, 14.99%)</title><rect x="872.0" y="851.0" width="176.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="875.0" y="862.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.09%)</title><rect x="878.1" y="835.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="881.1" y="846.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (2 samples, 0.17%)</title><rect x="879.2" y="835.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="882.2" y="846.0"></text>
</g>
<g>
<title>Unsafe_Park (162 samples, 14.04%)</title><rect x="881.2" y="835.0" width="165.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="884.2" y="846.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (4 samples, 0.35%)</title><rect x="886.3" y="819.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="889.3" y="830.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (28 samples, 2.43%)</title><rect x="890.4" y="819.0" width="28.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="893.4" y="830.0">Pa..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (6 samples, 0.52%)</title><rect x="902.7" y="803.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="905.7" y="814.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.35%)</title><rect x="903.7" y="787.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="906.7" y="798.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="907.8" y="787.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="910.8" y="798.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.17%)</title><rect x="908.8" y="803.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="911.8" y="814.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (7 samples, 0.61%)</title><rect x="910.8" y="803.0" width="7.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="913.8" y="814.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="918.0" y="803.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="921.0" y="814.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="919.0" y="819.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="922.0" y="830.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.17%)</title><rect x="920.1" y="819.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="923.1" y="830.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (4 samples, 0.35%)</title><rect x="922.1" y="819.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="925.1" y="830.0"></text>
</g>
<g>
<title>__lll_lock_wait (7 samples, 0.61%)</title><rect x="926.2" y="819.0" width="7.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="929.2" y="830.0"></text>
</g>
<g>
<title>__lll_unlock_wake (34 samples, 2.95%)</title><rect x="933.3" y="819.0" width="34.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="936.3" y="830.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (61 samples, 5.29%)</title><rect x="968.1" y="819.0" width="62.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="971.1" y="830.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.17%)</title><rect x="1030.5" y="819.0" width="2.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1033.5" y="830.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.09%)</title><rect x="1032.5" y="819.0" width="1.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1035.5" y="830.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.17%)</title><rect x="1033.6" y="819.0" width="2.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1036.6" y="830.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.17%)</title><rect x="1035.6" y="819.0" width="2.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1038.6" y="830.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.43%)</title><rect x="1037.6" y="819.0" width="5.2" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1040.6" y="830.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.09%)</title><rect x="1042.8" y="819.0" width="1.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1045.8" y="830.0"></text>
</g>
<g>
<title>_init (1 samples, 0.09%)</title><rect x="1043.8" y="819.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1046.8" y="830.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.17%)</title><rect x="1044.8" y="819.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1047.8" y="830.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.17%)</title><rect x="1046.8" y="835.0" width="2.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1049.8" y="846.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.09%)</title><rect x="1048.9" y="867.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1051.9" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.09%)</title><rect x="1049.9" y="883.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1052.9" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.09%)</title><rect x="1049.9" y="867.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1052.9" y="878.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.09%)</title><rect x="1049.9" y="851.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1052.9" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.09%)</title><rect x="1049.9" y="835.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1052.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (20 samples, 1.73%)</title><rect x="1050.9" y="883.0" width="20.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1053.9" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (20 samples, 1.73%)</title><rect x="1050.9" y="867.0" width="20.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1053.9" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (20 samples, 1.73%)</title><rect x="1050.9" y="851.0" width="20.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1053.9" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (20 samples, 1.73%)</title><rect x="1050.9" y="835.0" width="20.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1053.9" y="846.0"></text>
</g>
<g>
<title>start_thread (116 samples, 10.05%)</title><rect x="1071.4" y="963.0" width="118.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1074.4" y="974.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (116 samples, 10.05%)</title><rect x="1071.4" y="947.0" width="118.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1074.4" y="958.0">java_start(Thr..</text>
</g>
<g>
<title>GangWorker::loop() (25 samples, 2.17%)</title><rect x="1071.4" y="931.0" width="25.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1074.4" y="942.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (12 samples, 1.04%)</title><rect x="1071.4" y="915.0" width="12.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1074.4" y="926.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (11 samples, 0.95%)</title><rect x="1071.4" y="899.0" width="11.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1074.4" y="910.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (4 samples, 0.35%)</title><rect x="1071.4" y="883.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1074.4" y="894.0"></text>
</g>
<g>
<title>SpinPause (7 samples, 0.61%)</title><rect x="1075.5" y="883.0" width="7.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1078.5" y="894.0"></text>
</g>
<g>
<title>free (1 samples, 0.09%)</title><rect x="1082.6" y="899.0" width="1.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1085.6" y="910.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (13 samples, 1.13%)</title><rect x="1083.7" y="915.0" width="13.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1086.7" y="926.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 0.35%)</title><rect x="1083.7" y="899.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1086.7" y="910.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.17%)</title><rect x="1083.7" y="883.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1086.7" y="894.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.17%)</title><rect x="1085.7" y="883.0" width="2.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1088.7" y="894.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (5 samples, 0.43%)</title><rect x="1087.7" y="899.0" width="5.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1090.7" y="910.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.26%)</title><rect x="1087.7" y="883.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1090.7" y="894.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.17%)</title><rect x="1087.7" y="867.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1090.7" y="878.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (2 samples, 0.17%)</title><rect x="1087.7" y="851.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1090.7" y="862.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.09%)</title><rect x="1087.7" y="835.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1090.7" y="846.0"></text>
</g>
<g>
<title>JNIHandleBlock::oops_do(OopClosure*) (1 samples, 0.09%)</title><rect x="1088.8" y="835.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1091.8" y="846.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1089.8" y="867.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1092.8" y="878.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1089.8" y="851.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1092.8" y="862.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="1089.8" y="835.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1092.8" y="846.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.09%)</title><rect x="1089.8" y="819.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1092.8" y="830.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.17%)</title><rect x="1090.8" y="883.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1093.8" y="894.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (2 samples, 0.17%)</title><rect x="1090.8" y="867.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1093.8" y="878.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (4 samples, 0.35%)</title><rect x="1092.9" y="899.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1095.9" y="910.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (4 samples, 0.35%)</title><rect x="1092.9" y="883.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1095.9" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (4 samples, 0.35%)</title><rect x="1092.9" y="867.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1095.9" y="878.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (4 samples, 0.35%)</title><rect x="1092.9" y="851.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1095.9" y="862.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (4 samples, 0.35%)</title><rect x="1092.9" y="835.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1095.9" y="846.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (4 samples, 0.35%)</title><rect x="1092.9" y="819.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1095.9" y="830.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.17%)</title><rect x="1094.9" y="803.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1097.9" y="814.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.09%)</title><rect x="1095.9" y="787.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1098.9" y="798.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.09%)</title><rect x="1095.9" y="771.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1098.9" y="782.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (1 samples, 0.09%)</title><rect x="1095.9" y="755.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1098.9" y="766.0"></text>
</g>
<g>
<title>JavaThread::run() (89 samples, 7.71%)</title><rect x="1096.9" y="931.0" width="91.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1099.9" y="942.0">JavaThread:..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (89 samples, 7.71%)</title><rect x="1096.9" y="915.0" width="91.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1099.9" y="926.0">JavaThread:..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (89 samples, 7.71%)</title><rect x="1096.9" y="899.0" width="91.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1099.9" y="910.0">CompileBrok..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (88 samples, 7.63%)</title><rect x="1096.9" y="883.0" width="90.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1099.9" y="894.0">CompileBro..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (86 samples, 7.45%)</title><rect x="1096.9" y="867.0" width="88.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1099.9" y="878.0">C2Compiler..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (86 samples, 7.45%)</title><rect x="1096.9" y="851.0" width="88.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1099.9" y="862.0">Compile::C..</text>
</g>
<g>
<title>Compile::Code_Gen() (50 samples, 4.33%)</title><rect x="1096.9" y="835.0" width="51.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1099.9" y="846.0">Compi..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.17%)</title><rect x="1096.9" y="819.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1099.9" y="830.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.09%)</title><rect x="1096.9" y="803.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1099.9" y="814.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.09%)</title><rect x="1098.0" y="803.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1101.0" y="814.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.09%)</title><rect x="1098.0" y="787.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1101.0" y="798.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.26%)</title><rect x="1099.0" y="819.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1102.0" y="830.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (3 samples, 0.26%)</title><rect x="1099.0" y="803.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1102.0" y="814.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (2 samples, 0.17%)</title><rect x="1099.0" y="787.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1102.0" y="798.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.17%)</title><rect x="1099.0" y="771.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1102.0" y="782.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.09%)</title><rect x="1101.0" y="787.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1104.0" y="798.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.09%)</title><rect x="1101.0" y="771.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1104.0" y="782.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.09%)</title><rect x="1102.1" y="819.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1105.1" y="830.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 0.35%)</title><rect x="1103.1" y="819.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1106.1" y="830.0"></text>
</g>
<g>
<title>Matcher::is_bmi_pattern(Node*, Node*) (1 samples, 0.09%)</title><rect x="1103.1" y="803.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1106.1" y="814.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.26%)</title><rect x="1104.1" y="803.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1107.1" y="814.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.17%)</title><rect x="1105.1" y="787.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1108.1" y="798.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.09%)</title><rect x="1105.1" y="771.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1108.1" y="782.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1105.1" y="755.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1108.1" y="766.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1105.1" y="739.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1108.1" y="750.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.09%)</title><rect x="1106.2" y="771.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1109.2" y="782.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.09%)</title><rect x="1106.2" y="755.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1109.2" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 0.35%)</title><rect x="1107.2" y="819.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1110.2" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::estimate_block_frequency() (1 samples, 0.09%)</title><rect x="1107.2" y="803.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1110.2" y="814.0"></text>
</g>
<g>
<title>CFGLoop::compute_freq() (1 samples, 0.09%)</title><rect x="1107.2" y="787.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1110.2" y="798.0"></text>
</g>
<g>
<title>CFGLoop::compute_freq() (1 samples, 0.09%)</title><rect x="1107.2" y="771.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1110.2" y="782.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.09%)</title><rect x="1107.2" y="755.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1110.2" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.26%)</title><rect x="1108.2" y="803.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1111.2" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1108.2" y="787.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1111.2" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.09%)</title><rect x="1108.2" y="771.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1111.2" y="782.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="1108.2" y="755.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1111.2" y="766.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.09%)</title><rect x="1108.2" y="739.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1111.2" y="750.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="1108.2" y="723.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1111.2" y="734.0"></text>
</g>
<g>
<title>ThreadCritical::ThreadCritical() (1 samples, 0.09%)</title><rect x="1108.2" y="707.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1111.2" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1109.2" y="787.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1112.2" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1109.2" y="771.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1112.2" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1110.2" y="787.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1113.2" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (36 samples, 3.12%)</title><rect x="1111.3" y="819.0" width="36.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1114.3" y="830.0">Pha..</text>
</g>
<g>
<title>MachNode::Opcode() const (1 samples, 0.09%)</title><rect x="1111.3" y="803.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1114.3" y="814.0"></text>
</g>
<g>
<title>MachNode::oper_input_base() const (1 samples, 0.09%)</title><rect x="1112.3" y="803.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1115.3" y="814.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.09%)</title><rect x="1113.3" y="803.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1116.3" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.17%)</title><rect x="1114.3" y="803.0" width="2.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1117.3" y="814.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.09%)</title><rect x="1115.4" y="787.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1118.4" y="798.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1115.4" y="771.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1118.4" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 0.52%)</title><rect x="1116.4" y="803.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1119.4" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::insert_proj(Block*, unsigned int, Node*, unsigned int) (1 samples, 0.09%)</title><rect x="1120.5" y="787.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1123.5" y="798.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.09%)</title><rect x="1120.5" y="771.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1123.5" y="782.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.09%)</title><rect x="1120.5" y="755.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1123.5" y="766.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.09%)</title><rect x="1120.5" y="739.0" width="1.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1123.5" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.09%)</title><rect x="1121.5" y="787.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1124.5" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (9 samples, 0.78%)</title><rect x="1122.5" y="803.0" width="9.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1125.5" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.26%)</title><rect x="1128.6" y="787.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1131.6" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (5 samples, 0.43%)</title><rect x="1131.7" y="803.0" width="5.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1134.7" y="814.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.09%)</title><rect x="1135.8" y="787.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1138.8" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.26%)</title><rect x="1136.8" y="803.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1139.8" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.17%)</title><rect x="1137.9" y="787.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1140.9" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (2 samples, 0.17%)</title><rect x="1137.9" y="771.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1140.9" y="782.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.09%)</title><rect x="1137.9" y="755.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1140.9" y="766.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (1 samples, 0.09%)</title><rect x="1138.9" y="755.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1141.9" y="766.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.09%)</title><rect x="1138.9" y="739.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1141.9" y="750.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (3 samples, 0.26%)</title><rect x="1139.9" y="803.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1142.9" y="814.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.09%)</title><rect x="1139.9" y="787.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1142.9" y="798.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.17%)</title><rect x="1140.9" y="787.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1143.9" y="798.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 0.17%)</title><rect x="1140.9" y="771.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1143.9" y="782.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (2 samples, 0.17%)</title><rect x="1140.9" y="755.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1143.9" y="766.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 0.43%)</title><rect x="1143.0" y="803.0" width="5.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1146.0" y="814.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.26%)</title><rect x="1145.0" y="787.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1148.0" y="798.0"></text>
</g>
<g>
<title>Compile::Optimize() (25 samples, 2.17%)</title><rect x="1148.1" y="835.0" width="25.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1151.1" y="846.0">C..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.09%)</title><rect x="1148.1" y="819.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1151.1" y="830.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.09%)</title><rect x="1148.1" y="803.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1151.1" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.09%)</title><rect x="1149.1" y="819.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1152.1" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.09%)</title><rect x="1149.1" y="803.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.1" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1149.1" y="787.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.1" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.09%)</title><rect x="1149.1" y="771.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1152.1" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field_uses_to_worklist(FieldNode*) (1 samples, 0.09%)</title><rect x="1149.1" y="755.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1152.1" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::add_fields_to_worklist(FieldNode*, PointsToNode*) (1 samples, 0.09%)</title><rect x="1149.1" y="739.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.1" y="750.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.09%)</title><rect x="1150.1" y="819.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.1" y="830.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.09%)</title><rect x="1150.1" y="803.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1153.1" y="814.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.09%)</title><rect x="1150.1" y="787.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.1" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (19 samples, 1.65%)</title><rect x="1151.1" y="819.0" width="19.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.1" y="830.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.09%)</title><rect x="1151.1" y="803.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1154.1" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (5 samples, 0.43%)</title><rect x="1152.2" y="803.0" width="5.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1155.2" y="814.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.09%)</title><rect x="1156.3" y="787.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1159.3" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (10 samples, 0.87%)</title><rect x="1157.3" y="803.0" width="10.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1160.3" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (8 samples, 0.69%)</title><rect x="1159.3" y="787.0" width="8.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.3" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.09%)</title><rect x="1160.3" y="771.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.3" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (6 samples, 0.52%)</title><rect x="1161.4" y="771.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.4" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1166.5" y="755.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.5" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.17%)</title><rect x="1167.5" y="803.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.5" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.17%)</title><rect x="1167.5" y="787.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.5" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.09%)</title><rect x="1167.5" y="771.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.5" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.09%)</title><rect x="1168.5" y="771.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.5" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1169.5" y="803.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.5" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1169.5" y="787.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.5" y="798.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1169.5" y="771.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.5" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.26%)</title><rect x="1170.6" y="819.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.6" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.26%)</title><rect x="1170.6" y="803.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.6" y="814.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1171.6" y="787.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.6" y="798.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1172.6" y="787.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.6" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.69%)</title><rect x="1173.6" y="835.0" width="8.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.6" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.69%)</title><rect x="1173.6" y="819.0" width="8.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.6" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.69%)</title><rect x="1173.6" y="803.0" width="8.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.6" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.69%)</title><rect x="1173.6" y="787.0" width="8.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.6" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.69%)</title><rect x="1173.6" y="771.0" width="8.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.6" y="782.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.09%)</title><rect x="1173.6" y="755.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.6" y="766.0"></text>
</g>
<g>
<title>CmpNode::CmpNode(Node*, Node*) (1 samples, 0.09%)</title><rect x="1173.6" y="739.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.6" y="750.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1173.6" y="723.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.61%)</title><rect x="1174.7" y="755.0" width="7.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.7" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.61%)</title><rect x="1174.7" y="739.0" width="7.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.7" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.61%)</title><rect x="1174.7" y="723.0" width="7.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.7" y="734.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.09%)</title><rect x="1174.7" y="707.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.7" y="718.0"></text>
</g>
<g>
<title>MergeMemNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1174.7" y="691.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.52%)</title><rect x="1175.7" y="707.0" width="6.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.52%)</title><rect x="1175.7" y="691.0" width="6.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.52%)</title><rect x="1175.7" y="675.0" width="6.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.52%)</title><rect x="1175.7" y="659.0" width="6.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.7" y="670.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1175.7" y="643.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.7" y="654.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1175.7" y="627.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.7" y="638.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1175.7" y="611.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.7" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1175.7" y="595.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.7" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1175.7" y="579.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.7" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1175.7" y="563.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.7" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1175.7" y="547.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.7" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1175.7" y="531.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.7" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_putfield(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1175.7" y="515.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.7" y="526.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.09%)</title><rect x="1175.7" y="499.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.7" y="510.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1175.7" y="483.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.7" y="494.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1175.7" y="467.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.7" y="478.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1175.7" y="451.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.7" y="462.0"></text>
</g>
<g>
<title>ConstantPool::impl_name_ref_at(int, bool) (1 samples, 0.09%)</title><rect x="1175.7" y="435.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.7" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.43%)</title><rect x="1176.7" y="643.0" width="5.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.7" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.43%)</title><rect x="1176.7" y="627.0" width="5.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.43%)</title><rect x="1176.7" y="611.0" width="5.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.43%)</title><rect x="1176.7" y="595.0" width="5.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.43%)</title><rect x="1176.7" y="579.0" width="5.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.43%)</title><rect x="1176.7" y="563.0" width="5.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.7" y="574.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1176.7" y="547.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.7" y="558.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1176.7" y="531.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.7" y="542.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1176.7" y="515.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.7" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1176.7" y="499.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.7" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1176.7" y="483.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.7" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1176.7" y="467.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.7" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.35%)</title><rect x="1177.7" y="547.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.7" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.35%)</title><rect x="1177.7" y="531.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.35%)</title><rect x="1177.7" y="515.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.35%)</title><rect x="1177.7" y="499.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.35%)</title><rect x="1177.7" y="483.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.35%)</title><rect x="1177.7" y="467.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.7" y="478.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_load_store(BasicType, LibraryCallKit::LoadStoreKind) (1 samples, 0.09%)</title><rect x="1177.7" y="451.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.7" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1178.8" y="451.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.8" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.26%)</title><rect x="1178.8" y="435.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.26%)</title><rect x="1178.8" y="419.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.26%)</title><rect x="1178.8" y="403.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.26%)</title><rect x="1178.8" y="387.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.26%)</title><rect x="1178.8" y="371.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.8" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1178.8" y="355.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.8" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.26%)</title><rect x="1178.8" y="339.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.26%)</title><rect x="1178.8" y="323.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.26%)</title><rect x="1178.8" y="307.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.26%)</title><rect x="1178.8" y="291.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1178.8" y="275.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.8" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.8" y="259.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.8" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1178.8" y="243.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.8" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1178.8" y="227.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.8" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1178.8" y="211.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.8" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1178.8" y="195.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.8" y="206.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1178.8" y="179.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.8" y="190.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1178.8" y="163.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.8" y="174.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.09%)</title><rect x="1178.8" y="147.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.8" y="158.0"></text>
</g>
<g>
<title>DecodeNarrowPtrNode::DecodeNarrowPtrNode(Node*, Type const*) (1 samples, 0.09%)</title><rect x="1178.8" y="131.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.8" y="142.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.8" y="259.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.8" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.8" y="243.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.8" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.8" y="227.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.8" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.8" y="211.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.8" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.8" y="195.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.8" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.8" y="179.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.8" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.8" y="163.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.8" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.8" y="147.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.8" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.8" y="131.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.8" y="142.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.8" y="115.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.8" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.8" y="99.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.8" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.8" y="83.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.8" y="94.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.8" y="67.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.8" y="78.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.8" y="51.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.8" y="62.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.8" y="35.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.8" y="46.0"></text>
</g>
<g>
<title>ciMethod::is_method_handle_intrinsic() const (1 samples, 0.09%)</title><rect x="1180.8" y="275.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.8" y="286.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (2 samples, 0.17%)</title><rect x="1181.8" y="835.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.8" y="846.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (2 samples, 0.17%)</title><rect x="1181.8" y="819.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.8" y="830.0"></text>
</g>
<g>
<title>Type::Initialize(Compile*) (1 samples, 0.09%)</title><rect x="1183.9" y="835.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.9" y="846.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1183.9" y="819.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.9" y="830.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.17%)</title><rect x="1184.9" y="867.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.9" y="878.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.17%)</title><rect x="1184.9" y="851.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.9" y="862.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.17%)</title><rect x="1184.9" y="835.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.9" y="846.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.09%)</title><rect x="1184.9" y="819.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.9" y="830.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.09%)</title><rect x="1184.9" y="803.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.9" y="814.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.09%)</title><rect x="1184.9" y="787.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.9" y="798.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.09%)</title><rect x="1184.9" y="771.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.9" y="782.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(LIR_OpList*, IntervalWalker*) (1 samples, 0.09%)</title><rect x="1184.9" y="755.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.9" y="766.0"></text>
</g>
<g>
<title>LIR_OpVisitState::visit(LIR_Op*) (1 samples, 0.09%)</title><rect x="1184.9" y="739.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.9" y="750.0"></text>
</g>
<g>
<title>LIR_OpVisitState::do_output(LIR_OprDesc*&amp;) (1 samples, 0.09%)</title><rect x="1184.9" y="723.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.9" y="734.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.09%)</title><rect x="1185.9" y="819.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.9" y="830.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.09%)</title><rect x="1185.9" y="803.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.9" y="814.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.09%)</title><rect x="1185.9" y="787.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.9" y="798.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.09%)</title><rect x="1185.9" y="771.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.9" y="782.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.09%)</title><rect x="1185.9" y="755.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.9" y="766.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.09%)</title><rect x="1186.9" y="883.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.9" y="894.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.09%)</title><rect x="1186.9" y="867.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.9" y="878.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.09%)</title><rect x="1186.9" y="851.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.9" y="862.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.09%)</title><rect x="1186.9" y="835.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.9" y="846.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.09%)</title><rect x="1186.9" y="819.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.9" y="830.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.17%)</title><rect x="1188.0" y="931.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.0" y="942.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.17%)</title><rect x="1188.0" y="915.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.0" y="926.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.09%)</title><rect x="1188.0" y="899.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.0" y="910.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::do_safepoint_work() (1 samples, 0.09%)</title><rect x="1188.0" y="883.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.0" y="894.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.09%)</title><rect x="1189.0" y="899.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1192.0" y="910.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.09%)</title><rect x="1189.0" y="883.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.0" y="894.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.09%)</title><rect x="1189.0" y="867.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1192.0" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.09%)</title><rect x="1189.0" y="851.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1192.0" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.09%)</title><rect x="1189.0" y="835.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1192.0" y="846.0"></text>
</g>
<g>
<title>OtherRegionsTable::occupied() const (1 samples, 0.09%)</title><rect x="1189.0" y="819.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.0" y="830.0"></text>
</g>
</g>
</svg>
