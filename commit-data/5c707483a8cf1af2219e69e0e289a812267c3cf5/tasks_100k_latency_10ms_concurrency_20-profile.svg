<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1158" onload="init(evt)" viewBox="0 0 1200 1158" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1141"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1141"> </text>
<g id="frames">
<g>
<title>all (340 samples, 100.00%)</title><rect x="10.0" y="1107.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1118.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (30 samples, 8.82%)</title><rect x="10.0" y="1091.0" width="104.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1102.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (2 samples, 0.59%)</title><rect x="10.0" y="1075.0" width="6.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (2 samples, 0.59%)</title><rect x="10.0" y="1059.0" width="6.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.commitReadyOffsets (1 samples, 0.29%)</title><rect x="10.0" y="1043.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>java/util/OptionalLong.ifPresent (1 samples, 0.29%)</title><rect x="10.0" y="1027.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$273/1771932420.accept (1 samples, 0.29%)</title><rect x="10.0" y="1011.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.29%)</title><rect x="13.5" y="1043.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.29%)</title><rect x="13.5" y="1027.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.29%)</title><rect x="13.5" y="1011.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.5" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.29%)</title><rect x="13.5" y="995.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.5" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.29%)</title><rect x="13.5" y="979.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.5" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.29%)</title><rect x="13.5" y="963.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.5" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.29%)</title><rect x="13.5" y="947.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.5" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.29%)</title><rect x="13.5" y="931.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.29%)</title><rect x="13.5" y="915.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.5" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.29%)</title><rect x="13.5" y="899.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.5" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/OffsetCommitRequest.toStruct (1 samples, 0.29%)</title><rect x="13.5" y="883.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitRequestData.toStruct (1 samples, 0.29%)</title><rect x="13.5" y="867.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.set (1 samples, 0.29%)</title><rect x="13.5" y="851.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.29%)</title><rect x="13.5" y="835.0" width="3.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="16.5" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.29%)</title><rect x="13.5" y="819.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="16.5" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.29%)</title><rect x="13.5" y="803.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.5" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (28 samples, 8.24%)</title><rect x="16.9" y="1075.0" width="97.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="19.9" y="1086.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (3 samples, 0.88%)</title><rect x="16.9" y="1059.0" width="10.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.9" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (3 samples, 0.88%)</title><rect x="16.9" y="1043.0" width="10.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="19.9" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.88%)</title><rect x="16.9" y="1027.0" width="10.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.9" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.59%)</title><rect x="20.4" y="1011.0" width="7.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.4" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.59%)</title><rect x="20.4" y="995.0" width="7.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.4" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.59%)</title><rect x="20.4" y="979.0" width="7.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="23.4" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.59%)</title><rect x="20.4" y="963.0" width="7.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.4" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (2 samples, 0.59%)</title><rect x="20.4" y="947.0" width="7.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="23.4" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.59%)</title><rect x="20.4" y="931.0" width="7.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="23.4" y="942.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.59%)</title><rect x="20.4" y="915.0" width="7.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.4" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (2 samples, 0.59%)</title><rect x="20.4" y="899.0" width="7.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="23.4" y="910.0"></text>
</g>
<g>
<title>Interpreter (1 samples, 0.29%)</title><rect x="20.4" y="883.0" width="3.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="23.4" y="894.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_virtual_call_C(JavaThread*) (1 samples, 0.29%)</title><rect x="23.9" y="883.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="26.9" y="894.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.29%)</title><rect x="23.9" y="867.0" width="3.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="26.9" y="878.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.29%)</title><rect x="23.9" y="851.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="26.9" y="862.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.29%)</title><rect x="23.9" y="835.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="26.9" y="846.0"></text>
</g>
<g>
<title>Bytecode_invoke::static_target(Thread*) (1 samples, 0.29%)</title><rect x="23.9" y="819.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="26.9" y="830.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method_statically(methodHandle&amp;, KlassHandle&amp;, Bytecodes::Code, constantPoolHandle, int, Thread*) (1 samples, 0.29%)</title><rect x="23.9" y="803.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="26.9" y="814.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.29%)</title><rect x="23.9" y="787.0" width="3.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="26.9" y="798.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (9 samples, 2.65%)</title><rect x="27.4" y="1059.0" width="31.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="30.4" y="1070.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$265/242806684.accept (9 samples, 2.65%)</title><rect x="27.4" y="1043.0" width="31.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="30.4" y="1054.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (9 samples, 2.65%)</title><rect x="27.4" y="1027.0" width="31.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="30.4" y="1038.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (6 samples, 1.76%)</title><rect x="27.4" y="1011.0" width="20.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="30.4" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (6 samples, 1.76%)</title><rect x="27.4" y="995.0" width="20.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="30.4" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (6 samples, 1.76%)</title><rect x="27.4" y="979.0" width="20.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="30.4" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (6 samples, 1.76%)</title><rect x="27.4" y="963.0" width="20.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="30.4" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (6 samples, 1.76%)</title><rect x="27.4" y="947.0" width="20.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="30.4" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (6 samples, 1.76%)</title><rect x="27.4" y="931.0" width="20.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="30.4" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.29%)</title><rect x="44.7" y="915.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="47.7" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.29%)</title><rect x="44.7" y="899.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="47.7" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.29%)</title><rect x="44.7" y="883.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="47.7" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (1 samples, 0.29%)</title><rect x="48.2" y="1011.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="51.2" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.29%)</title><rect x="48.2" y="995.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="51.2" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.29%)</title><rect x="48.2" y="979.0" width="3.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="51.2" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/TaskRequest.&lt;init&gt; (2 samples, 0.59%)</title><rect x="51.6" y="1011.0" width="7.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="54.6" y="1022.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.59%)</title><rect x="51.6" y="995.0" width="7.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="54.6" y="1006.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.59%)</title><rect x="51.6" y="979.0" width="7.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="54.6" y="990.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.59%)</title><rect x="51.6" y="963.0" width="7.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="54.6" y="974.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.59%)</title><rect x="51.6" y="947.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="54.6" y="958.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.59%)</title><rect x="51.6" y="931.0" width="7.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="54.6" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.29%)</title><rect x="55.1" y="915.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="58.1" y="926.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.29%)</title><rect x="55.1" y="899.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="58.1" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.29%)</title><rect x="55.1" y="883.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="58.1" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.29%)</title><rect x="55.1" y="867.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="58.1" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (16 samples, 4.71%)</title><rect x="58.6" y="1059.0" width="55.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="61.6" y="1070.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (16 samples, 4.71%)</title><rect x="58.6" y="1043.0" width="55.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="61.6" y="1054.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (9 samples, 2.65%)</title><rect x="58.6" y="1027.0" width="31.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="61.6" y="1038.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.18%)</title><rect x="58.6" y="1011.0" width="13.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="61.6" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.18%)</title><rect x="58.6" y="995.0" width="13.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="61.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.88%)</title><rect x="58.6" y="979.0" width="10.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="61.6" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.29%)</title><rect x="58.6" y="963.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="61.6" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.29%)</title><rect x="58.6" y="947.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="61.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/ResponseHeader.parse (1 samples, 0.29%)</title><rect x="58.6" y="931.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="61.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/ResponseHeaderData.&lt;init&gt; (1 samples, 0.29%)</title><rect x="58.6" y="915.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="61.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/ResponseHeaderData.read (1 samples, 0.29%)</title><rect x="58.6" y="899.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="61.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.29%)</title><rect x="58.6" y="883.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="61.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.59%)</title><rect x="62.1" y="963.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="65.1" y="974.0"></text>
</g>
<g>
<title>java/util/HashSet.isEmpty (1 samples, 0.29%)</title><rect x="62.1" y="947.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="65.1" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.29%)</title><rect x="65.5" y="947.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="68.5" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.29%)</title><rect x="65.5" y="931.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="68.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.29%)</title><rect x="65.5" y="915.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="68.5" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.29%)</title><rect x="65.5" y="899.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="68.5" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.29%)</title><rect x="65.5" y="883.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="68.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.failExpiredRequests (1 samples, 0.29%)</title><rect x="69.0" y="979.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="72.0" y="990.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.29%)</title><rect x="69.0" y="963.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="72.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (4 samples, 1.18%)</title><rect x="72.5" y="1011.0" width="13.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="75.5" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 0.88%)</title><rect x="72.5" y="995.0" width="10.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="75.5" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 0.88%)</title><rect x="72.5" y="979.0" width="10.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="75.5" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 0.88%)</title><rect x="72.5" y="963.0" width="10.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="75.5" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.29%)</title><rect x="72.5" y="947.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="75.5" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (2 samples, 0.59%)</title><rect x="75.9" y="947.0" width="7.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="78.9" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 0.59%)</title><rect x="75.9" y="931.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="78.9" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (2 samples, 0.59%)</title><rect x="75.9" y="915.0" width="7.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="78.9" y="926.0"></text>
</g>
<g>
<title>java/util/Optional.of (2 samples, 0.59%)</title><rect x="75.9" y="899.0" width="7.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="78.9" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.initializeCompletedFetch (1 samples, 0.29%)</title><rect x="82.9" y="995.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="85.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/MemoryRecords.sizeInBytes (1 samples, 0.29%)</title><rect x="82.9" y="979.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="85.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.29%)</title><rect x="86.4" y="1011.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="89.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.29%)</title><rect x="86.4" y="995.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="89.4" y="1006.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.29%)</title><rect x="86.4" y="979.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="89.4" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.29%)</title><rect x="86.4" y="963.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="89.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/LogContext$LocationAwareKafkaLogger.trace (1 samples, 0.29%)</title><rect x="86.4" y="947.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="89.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.59%)</title><rect x="89.8" y="1027.0" width="7.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="92.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.59%)</title><rect x="89.8" y="1011.0" width="7.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="92.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.59%)</title><rect x="89.8" y="995.0" width="7.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="92.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.29%)</title><rect x="89.8" y="979.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="92.8" y="990.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.29%)</title><rect x="89.8" y="963.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="92.8" y="974.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.29%)</title><rect x="89.8" y="947.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="92.8" y="958.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.29%)</title><rect x="89.8" y="931.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="92.8" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.29%)</title><rect x="89.8" y="915.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="92.8" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.29%)</title><rect x="89.8" y="899.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="92.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.29%)</title><rect x="93.3" y="979.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="96.3" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.29%)</title><rect x="93.3" y="963.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="96.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (4 samples, 1.18%)</title><rect x="96.8" y="1027.0" width="13.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="99.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.88%)</title><rect x="96.8" y="1011.0" width="10.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="99.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.88%)</title><rect x="96.8" y="995.0" width="10.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="99.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.59%)</title><rect x="100.2" y="979.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="103.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (2 samples, 0.59%)</title><rect x="100.2" y="963.0" width="7.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="103.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (2 samples, 0.59%)</title><rect x="100.2" y="947.0" width="7.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="103.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (2 samples, 0.59%)</title><rect x="100.2" y="931.0" width="7.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="103.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (2 samples, 0.59%)</title><rect x="100.2" y="915.0" width="7.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="103.2" y="926.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.29%)</title><rect x="100.2" y="899.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="103.2" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.29%)</title><rect x="100.2" y="883.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="103.2" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.29%)</title><rect x="103.7" y="899.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="106.7" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.29%)</title><rect x="107.2" y="1011.0" width="3.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="110.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.29%)</title><rect x="107.2" y="995.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="110.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.29%)</title><rect x="107.2" y="979.0" width="3.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="110.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.29%)</title><rect x="107.2" y="963.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="110.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.29%)</title><rect x="107.2" y="947.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="110.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.29%)</title><rect x="107.2" y="931.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="110.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.29%)</title><rect x="107.2" y="915.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="110.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.setIfExists (1 samples, 0.29%)</title><rect x="107.2" y="899.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="110.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.setIfExists (1 samples, 0.29%)</title><rect x="107.2" y="883.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="110.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.29%)</title><rect x="107.2" y="867.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="110.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.29%)</title><rect x="110.6" y="1027.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="113.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.29%)</title><rect x="110.6" y="1011.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="113.6" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.29%)</title><rect x="110.6" y="995.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="113.6" y="1006.0"></text>
</g>
<g>
<title>java/lang/Thread.run (209 samples, 61.47%)</title><rect x="114.1" y="1091.0" width="725.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="117.1" y="1102.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (209 samples, 61.47%)</title><rect x="114.1" y="1075.0" width="725.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="117.1" y="1086.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (209 samples, 61.47%)</title><rect x="114.1" y="1059.0" width="725.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="117.1" y="1070.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$285/159336158.run (191 samples, 56.18%)</title><rect x="117.6" y="1043.0" width="662.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="120.6" y="1054.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$285/159336158.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$70 (191 samples, 56.18%)</title><rect x="117.6" y="1027.0" width="662.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="120.6" y="1038.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$70</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (191 samples, 56.18%)</title><rect x="117.6" y="1011.0" width="662.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="120.6" y="1022.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (185 samples, 54.41%)</title><rect x="117.6" y="995.0" width="642.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="120.6" y="1006.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (32 samples, 9.41%)</title><rect x="131.5" y="979.0" width="111.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="134.5" y="990.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$42/815674463.extract (30 samples, 8.82%)</title><rect x="138.4" y="963.0" width="104.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="141.4" y="974.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (30 samples, 8.82%)</title><rect x="138.4" y="947.0" width="104.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="141.4" y="958.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (30 samples, 8.82%)</title><rect x="138.4" y="931.0" width="104.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="141.4" y="942.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (30 samples, 8.82%)</title><rect x="138.4" y="915.0" width="104.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="141.4" y="926.0">com/linecorp..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (30 samples, 8.82%)</title><rect x="138.4" y="899.0" width="104.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="141.4" y="910.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (11 samples, 3.24%)</title><rect x="138.4" y="883.0" width="38.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="141.4" y="894.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 1.18%)</title><rect x="138.4" y="867.0" width="13.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="141.4" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (4 samples, 1.18%)</title><rect x="138.4" y="851.0" width="13.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="141.4" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (4 samples, 1.18%)</title><rect x="138.4" y="835.0" width="13.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="141.4" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 1.18%)</title><rect x="138.4" y="819.0" width="13.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="141.4" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 1.18%)</title><rect x="138.4" y="803.0" width="13.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="141.4" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (7 samples, 2.06%)</title><rect x="152.3" y="867.0" width="24.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="155.3" y="878.0">c..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.29%)</title><rect x="152.3" y="851.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="155.3" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.29%)</title><rect x="152.3" y="835.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="155.3" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.29%)</title><rect x="152.3" y="819.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="155.3" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.29%)</title><rect x="152.3" y="803.0" width="3.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="155.3" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.29%)</title><rect x="152.3" y="787.0" width="3.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="155.3" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (6 samples, 1.76%)</title><rect x="155.8" y="851.0" width="20.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="158.8" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.59%)</title><rect x="155.8" y="835.0" width="6.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="158.8" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 0.59%)</title><rect x="155.8" y="819.0" width="6.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="158.8" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (4 samples, 1.18%)</title><rect x="162.7" y="835.0" width="13.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="165.7" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (4 samples, 1.18%)</title><rect x="162.7" y="819.0" width="13.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="165.7" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (2 samples, 0.59%)</title><rect x="162.7" y="803.0" width="6.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="165.7" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.29%)</title><rect x="169.6" y="803.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="172.6" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.29%)</title><rect x="169.6" y="787.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="172.6" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.29%)</title><rect x="169.6" y="771.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="172.6" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.29%)</title><rect x="169.6" y="755.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="172.6" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.29%)</title><rect x="173.1" y="803.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="176.1" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (15 samples, 4.41%)</title><rect x="176.6" y="883.0" width="52.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="179.6" y="894.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.29%)</title><rect x="176.6" y="867.0" width="3.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="179.6" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.29%)</title><rect x="176.6" y="851.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="179.6" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.29%)</title><rect x="180.1" y="867.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="183.1" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.29%)</title><rect x="180.1" y="851.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="183.1" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (13 samples, 3.82%)</title><rect x="183.5" y="867.0" width="45.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="186.5" y="878.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 1.47%)</title><rect x="183.5" y="851.0" width="17.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="186.5" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (5 samples, 1.47%)</title><rect x="183.5" y="835.0" width="17.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="186.5" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.29%)</title><rect x="183.5" y="819.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="186.5" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.29%)</title><rect x="183.5" y="803.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="186.5" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (4 samples, 1.18%)</title><rect x="187.0" y="819.0" width="13.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="190.0" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (4 samples, 1.18%)</title><rect x="187.0" y="803.0" width="13.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="190.0" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (4 samples, 1.18%)</title><rect x="187.0" y="787.0" width="13.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="190.0" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (4 samples, 1.18%)</title><rect x="187.0" y="771.0" width="13.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="190.0" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (8 samples, 2.35%)</title><rect x="200.9" y="851.0" width="27.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="203.9" y="862.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (8 samples, 2.35%)</title><rect x="200.9" y="835.0" width="27.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="203.9" y="846.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (8 samples, 2.35%)</title><rect x="200.9" y="819.0" width="27.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="203.9" y="830.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.18%)</title><rect x="204.4" y="803.0" width="13.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="207.4" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (2 samples, 0.59%)</title><rect x="204.4" y="787.0" width="6.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="207.4" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.29%)</title><rect x="211.3" y="787.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="214.3" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.29%)</title><rect x="211.3" y="771.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="214.3" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.29%)</title><rect x="211.3" y="755.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="214.3" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.29%)</title><rect x="211.3" y="739.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="214.3" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.29%)</title><rect x="214.8" y="787.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="217.8" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (2 samples, 0.59%)</title><rect x="218.2" y="803.0" width="7.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="221.2" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.59%)</title><rect x="218.2" y="787.0" width="7.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="221.2" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.59%)</title><rect x="218.2" y="771.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="221.2" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.59%)</title><rect x="218.2" y="755.0" width="7.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="221.2" y="766.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.59%)</title><rect x="218.2" y="739.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="221.2" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.29%)</title><rect x="225.2" y="803.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="228.2" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.29%)</title><rect x="225.2" y="787.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="228.2" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.29%)</title><rect x="225.2" y="771.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="228.2" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.29%)</title><rect x="225.2" y="755.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="228.2" y="766.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.29%)</title><rect x="225.2" y="739.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="228.2" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (4 samples, 1.18%)</title><rect x="228.6" y="883.0" width="13.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="231.6" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (4 samples, 1.18%)</title><rect x="228.6" y="867.0" width="13.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="231.6" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (4 samples, 1.18%)</title><rect x="228.6" y="851.0" width="13.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="231.6" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (4 samples, 1.18%)</title><rect x="228.6" y="835.0" width="13.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="231.6" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 1.18%)</title><rect x="228.6" y="819.0" width="13.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="231.6" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (133 samples, 39.12%)</title><rect x="242.5" y="979.0" width="461.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="245.5" y="990.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (15 samples, 4.41%)</title><rect x="242.5" y="963.0" width="52.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="245.5" y="974.0">com/l..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (13 samples, 3.82%)</title><rect x="249.5" y="947.0" width="45.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="252.5" y="958.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (8 samples, 2.35%)</title><rect x="266.8" y="931.0" width="27.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="269.8" y="942.0">c..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (7 samples, 2.06%)</title><rect x="270.3" y="915.0" width="24.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="273.3" y="926.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (6 samples, 1.76%)</title><rect x="273.8" y="899.0" width="20.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="276.8" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.29%)</title><rect x="273.8" y="883.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="276.8" y="894.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.29%)</title><rect x="273.8" y="867.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="276.8" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (5 samples, 1.47%)</title><rect x="277.2" y="883.0" width="17.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="280.2" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.29%)</title><rect x="294.6" y="963.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="297.6" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (27 samples, 7.94%)</title><rect x="298.1" y="963.0" width="93.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="301.1" y="974.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (27 samples, 7.94%)</title><rect x="298.1" y="947.0" width="93.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="301.1" y="958.0">com/linecor..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.59%)</title><rect x="305.0" y="931.0" width="6.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="308.0" y="942.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.59%)</title><rect x="305.0" y="915.0" width="6.9" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="308.0" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (16 samples, 4.71%)</title><rect x="311.9" y="931.0" width="55.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="314.9" y="942.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (11 samples, 3.24%)</title><rect x="322.4" y="915.0" width="38.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="325.4" y="926.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (9 samples, 2.65%)</title><rect x="329.3" y="899.0" width="31.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="332.3" y="910.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (6 samples, 1.76%)</title><rect x="332.8" y="883.0" width="20.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="335.8" y="894.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (6 samples, 1.76%)</title><rect x="332.8" y="867.0" width="20.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="335.8" y="878.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (6 samples, 1.76%)</title><rect x="332.8" y="851.0" width="20.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="335.8" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.88%)</title><rect x="336.2" y="835.0" width="10.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="339.2" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.59%)</title><rect x="339.7" y="819.0" width="6.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="342.7" y="830.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.29%)</title><rect x="339.7" y="803.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="342.7" y="814.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.29%)</title><rect x="343.2" y="803.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="346.2" y="814.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.29%)</title><rect x="343.2" y="787.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="346.2" y="798.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.29%)</title><rect x="343.2" y="771.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="346.2" y="782.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.29%)</title><rect x="343.2" y="755.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="346.2" y="766.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.59%)</title><rect x="346.6" y="835.0" width="7.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="349.6" y="846.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.59%)</title><rect x="353.6" y="883.0" width="6.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="356.6" y="894.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.59%)</title><rect x="360.5" y="915.0" width="7.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="363.5" y="926.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.29%)</title><rect x="367.5" y="931.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="370.5" y="942.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.29%)</title><rect x="367.5" y="915.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="370.5" y="926.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.29%)</title><rect x="367.5" y="899.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="370.5" y="910.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.29%)</title><rect x="370.9" y="931.0" width="3.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="373.9" y="942.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.29%)</title><rect x="370.9" y="915.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="373.9" y="926.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.29%)</title><rect x="370.9" y="899.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="373.9" y="910.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.29%)</title><rect x="370.9" y="883.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="373.9" y="894.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.29%)</title><rect x="370.9" y="867.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="373.9" y="878.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (5 samples, 1.47%)</title><rect x="374.4" y="931.0" width="17.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="377.4" y="942.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (5 samples, 1.47%)</title><rect x="374.4" y="915.0" width="17.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="377.4" y="926.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.29%)</title><rect x="374.4" y="899.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="377.4" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.29%)</title><rect x="374.4" y="883.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="377.4" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.29%)</title><rect x="374.4" y="867.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="377.4" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.29%)</title><rect x="374.4" y="851.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="377.4" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (4 samples, 1.18%)</title><rect x="377.9" y="899.0" width="13.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="380.9" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.88%)</title><rect x="381.4" y="883.0" width="10.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="384.4" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (82 samples, 24.12%)</title><rect x="391.8" y="963.0" width="284.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="394.8" y="974.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (82 samples, 24.12%)</title><rect x="391.8" y="947.0" width="284.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="394.8" y="958.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$207/259511601.process (60 samples, 17.65%)</title><rect x="419.5" y="931.0" width="208.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="422.5" y="942.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (60 samples, 17.65%)</title><rect x="419.5" y="915.0" width="208.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="422.5" y="926.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (58 samples, 17.06%)</title><rect x="423.0" y="899.0" width="201.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="426.0" y="910.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.59%)</title><rect x="433.4" y="883.0" width="7.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="436.4" y="894.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.59%)</title><rect x="433.4" y="867.0" width="7.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="436.4" y="878.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.59%)</title><rect x="433.4" y="851.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="436.4" y="862.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.59%)</title><rect x="433.4" y="835.0" width="7.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="436.4" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (53 samples, 15.59%)</title><rect x="440.4" y="883.0" width="183.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="443.4" y="894.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>java/lang/Thread.sleep (52 samples, 15.29%)</title><rect x="440.4" y="867.0" width="180.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="443.4" y="878.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (45 samples, 13.24%)</title><rect x="461.2" y="851.0" width="156.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="464.2" y="862.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.29%)</title><rect x="468.1" y="835.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="471.1" y="846.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.29%)</title><rect x="471.6" y="835.0" width="3.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="474.6" y="846.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.29%)</title><rect x="475.1" y="835.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="478.1" y="846.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (40 samples, 11.76%)</title><rect x="478.5" y="835.0" width="138.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="481.5" y="846.0">os::sleep(Thread*..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (7 samples, 2.06%)</title><rect x="513.2" y="819.0" width="24.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="516.2" y="830.0">M..</text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.29%)</title><rect x="534.1" y="803.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="537.1" y="814.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.29%)</title><rect x="537.5" y="819.0" width="3.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="540.5" y="830.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.29%)</title><rect x="537.5" y="803.0" width="3.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="540.5" y="814.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.59%)</title><rect x="541.0" y="819.0" width="6.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="544.0" y="830.0"></text>
</g>
<g>
<title>__pthread_cond_init (2 samples, 0.59%)</title><rect x="547.9" y="819.0" width="7.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="550.9" y="830.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (12 samples, 3.53%)</title><rect x="554.9" y="819.0" width="41.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="557.9" y="830.0">__p..</text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.29%)</title><rect x="596.5" y="819.0" width="3.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="599.5" y="830.0"></text>
</g>
<g>
<title>_init (1 samples, 0.29%)</title><rect x="600.0" y="819.0" width="3.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="603.0" y="830.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.59%)</title><rect x="603.5" y="819.0" width="6.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="606.5" y="830.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.29%)</title><rect x="610.4" y="819.0" width="3.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="613.4" y="830.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.29%)</title><rect x="613.9" y="819.0" width="3.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="616.9" y="830.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.29%)</title><rect x="617.4" y="851.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="620.4" y="862.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.29%)</title><rect x="620.8" y="867.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="623.8" y="878.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.29%)</title><rect x="620.8" y="851.0" width="3.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="623.8" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.29%)</title><rect x="624.3" y="899.0" width="3.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="627.3" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.29%)</title><rect x="624.3" y="883.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="627.3" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.29%)</title><rect x="624.3" y="867.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="627.3" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.29%)</title><rect x="624.3" y="851.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="627.3" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.29%)</title><rect x="624.3" y="835.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="627.3" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (2 samples, 0.59%)</title><rect x="627.8" y="931.0" width="6.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="630.8" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.29%)</title><rect x="634.7" y="931.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="637.7" y="942.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/789653861.linkToTargetMethod (1 samples, 0.29%)</title><rect x="638.2" y="931.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="641.2" y="942.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (1 samples, 0.29%)</title><rect x="638.2" y="915.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="641.2" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$292/349459954.get$Lambda (1 samples, 0.29%)</title><rect x="638.2" y="899.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="641.2" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.29%)</title><rect x="638.2" y="883.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="641.2" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.29%)</title><rect x="638.2" y="867.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="641.2" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.29%)</title><rect x="638.2" y="851.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="641.2" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.29%)</title><rect x="638.2" y="835.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="641.2" y="846.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.29%)</title><rect x="638.2" y="819.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="641.2" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.59%)</title><rect x="641.6" y="931.0" width="7.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="644.6" y="942.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.59%)</title><rect x="641.6" y="915.0" width="7.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="644.6" y="926.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.59%)</title><rect x="641.6" y="899.0" width="7.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="644.6" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.29%)</title><rect x="648.6" y="931.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="651.6" y="942.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.29%)</title><rect x="648.6" y="915.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="651.6" y="926.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (1 samples, 0.29%)</title><rect x="648.6" y="899.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="651.6" y="910.0"></text>
</g>
<g>
<title>java/util/ArrayList.elementData (1 samples, 0.29%)</title><rect x="648.6" y="883.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="651.6" y="894.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.59%)</title><rect x="652.1" y="931.0" width="6.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="655.1" y="942.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.29%)</title><rect x="655.5" y="915.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="658.5" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.29%)</title><rect x="655.5" y="899.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="658.5" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.29%)</title><rect x="655.5" y="883.0" width="3.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="658.5" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.29%)</title><rect x="655.5" y="867.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="658.5" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.29%)</title><rect x="655.5" y="851.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="658.5" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.29%)</title><rect x="655.5" y="835.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="658.5" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (5 samples, 1.47%)</title><rect x="659.0" y="931.0" width="17.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="662.0" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (1 samples, 0.29%)</title><rect x="676.4" y="963.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="679.4" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.29%)</title><rect x="676.4" y="947.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="679.4" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.29%)</title><rect x="676.4" y="931.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="679.4" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.29%)</title><rect x="676.4" y="915.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="679.4" y="926.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1020807789.linkToTargetMethod (1 samples, 0.29%)</title><rect x="679.8" y="963.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="682.8" y="974.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/399931359.invokeStatic_L3_L (1 samples, 0.29%)</title><rect x="679.8" y="947.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="682.8" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$298/1796956391.get$Lambda (1 samples, 0.29%)</title><rect x="679.8" y="931.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="682.8" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.29%)</title><rect x="679.8" y="915.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="682.8" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.29%)</title><rect x="679.8" y="899.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="682.8" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 1.76%)</title><rect x="683.3" y="963.0" width="20.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="686.3" y="974.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.29%)</title><rect x="700.6" y="947.0" width="3.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="703.6" y="958.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.29%)</title><rect x="700.6" y="931.0" width="3.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="703.6" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (14 samples, 4.12%)</title><rect x="704.1" y="979.0" width="48.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="707.1" y="990.0">java..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (1 samples, 0.29%)</title><rect x="704.1" y="963.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="707.1" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (13 samples, 3.82%)</title><rect x="707.6" y="963.0" width="45.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="710.6" y="974.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (12 samples, 3.53%)</title><rect x="711.1" y="947.0" width="41.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="714.1" y="958.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$300/1129549236.accept (12 samples, 3.53%)</title><rect x="711.1" y="931.0" width="41.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="714.1" y="942.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$61 (12 samples, 3.53%)</title><rect x="711.1" y="915.0" width="41.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="714.1" y="926.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$283/1342958301.complete (12 samples, 3.53%)</title><rect x="711.1" y="899.0" width="41.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="714.1" y="910.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$38 (12 samples, 3.53%)</title><rect x="711.1" y="883.0" width="41.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="714.1" y="894.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$282/735555407.complete (12 samples, 3.53%)</title><rect x="711.1" y="867.0" width="41.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="714.1" y="878.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$68 (12 samples, 3.53%)</title><rect x="711.1" y="851.0" width="41.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="714.1" y="862.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (12 samples, 3.53%)</title><rect x="711.1" y="835.0" width="41.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="714.1" y="846.0">com..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (12 samples, 3.53%)</title><rect x="711.1" y="819.0" width="41.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="714.1" y="830.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (12 samples, 3.53%)</title><rect x="711.1" y="803.0" width="41.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="714.1" y="814.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.29%)</title><rect x="749.2" y="787.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="752.2" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.29%)</title><rect x="749.2" y="771.0" width="3.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="752.2" y="782.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.59%)</title><rect x="752.7" y="979.0" width="6.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="755.7" y="990.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.29%)</title><rect x="756.2" y="963.0" width="3.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="759.2" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (6 samples, 1.76%)</title><rect x="759.6" y="995.0" width="20.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="762.6" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (7 samples, 2.06%)</title><rect x="780.5" y="1043.0" width="24.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="783.5" y="1054.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 2.06%)</title><rect x="780.5" y="1027.0" width="24.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="783.5" y="1038.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 2.06%)</title><rect x="780.5" y="1011.0" width="24.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="783.5" y="1022.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 2.06%)</title><rect x="780.5" y="995.0" width="24.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="783.5" y="1006.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (10 samples, 2.94%)</title><rect x="804.8" y="1043.0" width="34.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="807.8" y="1054.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (8 samples, 2.35%)</title><rect x="804.8" y="1027.0" width="27.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="807.8" y="1038.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 1.47%)</title><rect x="815.2" y="1011.0" width="17.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="818.2" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 1.47%)</title><rect x="815.2" y="995.0" width="17.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="818.2" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 1.47%)</title><rect x="815.2" y="979.0" width="17.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="818.2" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 1.47%)</title><rect x="815.2" y="963.0" width="17.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="818.2" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateOf (2 samples, 0.59%)</title><rect x="832.5" y="1027.0" width="7.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="835.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.59%)</title><rect x="839.5" y="1091.0" width="6.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="842.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.29%)</title><rect x="842.9" y="1075.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="845.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.29%)</title><rect x="842.9" y="1059.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="845.9" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.29%)</title><rect x="842.9" y="1043.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="845.9" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.29%)</title><rect x="842.9" y="1027.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="845.9" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.29%)</title><rect x="842.9" y="1011.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="845.9" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.29%)</title><rect x="842.9" y="995.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="845.9" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.29%)</title><rect x="842.9" y="979.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="845.9" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.29%)</title><rect x="842.9" y="963.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="845.9" y="974.0"></text>
</g>
<g>
<title>start_thread (99 samples, 29.12%)</title><rect x="846.4" y="1091.0" width="343.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="849.4" y="1102.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (99 samples, 29.12%)</title><rect x="846.4" y="1075.0" width="343.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="849.4" y="1086.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (25 samples, 7.35%)</title><rect x="846.4" y="1059.0" width="86.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="849.4" y="1070.0">GangWorker..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (2 samples, 0.59%)</title><rect x="846.4" y="1043.0" width="7.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="849.4" y="1054.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.59%)</title><rect x="846.4" y="1027.0" width="7.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="849.4" y="1038.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.59%)</title><rect x="846.4" y="1011.0" width="7.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="849.4" y="1022.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (23 samples, 6.76%)</title><rect x="853.4" y="1043.0" width="79.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="856.4" y="1054.0">G1ParTask..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (20 samples, 5.88%)</title><rect x="853.4" y="1027.0" width="69.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="856.4" y="1038.0">G1ParEv..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (18 samples, 5.29%)</title><rect x="856.8" y="1011.0" width="62.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="859.8" y="1022.0">G1ParS..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (14 samples, 4.12%)</title><rect x="863.8" y="995.0" width="48.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="866.8" y="1006.0">G1Pa..</text>
</g>
<g>
<title>G1ParGCAllocator::allocate_direct_or_new_plab(InCSetState, unsigned long, unsigned char) (1 samples, 0.29%)</title><rect x="891.5" y="979.0" width="3.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="894.5" y="990.0"></text>
</g>
<g>
<title>G1ParGCAllocBuffer::retire(bool, bool) (1 samples, 0.29%)</title><rect x="891.5" y="963.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="894.5" y="974.0"></text>
</g>
<g>
<title>ParGCAllocBuffer::retire(bool, bool) (1 samples, 0.29%)</title><rect x="891.5" y="947.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="894.5" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.29%)</title><rect x="891.5" y="931.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="894.5" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (4 samples, 1.18%)</title><rect x="895.0" y="979.0" width="13.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="898.0" y="990.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.29%)</title><rect x="905.4" y="963.0" width="3.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="908.4" y="974.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.29%)</title><rect x="908.9" y="979.0" width="3.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="911.9" y="990.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (2 samples, 0.59%)</title><rect x="912.4" y="995.0" width="6.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="915.4" y="1006.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.29%)</title><rect x="919.3" y="1011.0" width="3.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="922.3" y="1022.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (2 samples, 0.59%)</title><rect x="922.8" y="1027.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="925.8" y="1038.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.59%)</title><rect x="922.8" y="1011.0" width="6.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="925.8" y="1022.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.29%)</title><rect x="922.8" y="995.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="925.8" y="1006.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.29%)</title><rect x="922.8" y="979.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="925.8" y="990.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.29%)</title><rect x="922.8" y="963.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="925.8" y="974.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.29%)</title><rect x="926.2" y="995.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="929.2" y="1006.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.29%)</title><rect x="926.2" y="979.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="929.2" y="990.0"></text>
</g>
<g>
<title>JNIHandleBlock::oops_do(OopClosure*) (1 samples, 0.29%)</title><rect x="926.2" y="963.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="929.2" y="974.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.29%)</title><rect x="929.7" y="1027.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="932.7" y="1038.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.29%)</title><rect x="929.7" y="1011.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="932.7" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (1 samples, 0.29%)</title><rect x="929.7" y="995.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="932.7" y="1006.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (1 samples, 0.29%)</title><rect x="929.7" y="979.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="932.7" y="990.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.29%)</title><rect x="929.7" y="963.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="932.7" y="974.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (1 samples, 0.29%)</title><rect x="929.7" y="947.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="932.7" y="958.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.29%)</title><rect x="929.7" y="931.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="932.7" y="942.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.29%)</title><rect x="929.7" y="915.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="932.7" y="926.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.29%)</title><rect x="929.7" y="899.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="932.7" y="910.0"></text>
</g>
<g>
<title>JavaThread::run() (74 samples, 21.76%)</title><rect x="933.2" y="1059.0" width="256.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="936.2" y="1070.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (74 samples, 21.76%)</title><rect x="933.2" y="1043.0" width="256.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="936.2" y="1054.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (74 samples, 21.76%)</title><rect x="933.2" y="1027.0" width="256.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="936.2" y="1038.0">CompileBroker::compiler_thread_loo..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (74 samples, 21.76%)</title><rect x="933.2" y="1011.0" width="256.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="936.2" y="1022.0">CompileBroker::invoke_compiler_on_..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (69 samples, 20.29%)</title><rect x="933.2" y="995.0" width="239.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="936.2" y="1006.0">C2Compiler::compile_method(ciEnv..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (69 samples, 20.29%)</title><rect x="933.2" y="979.0" width="239.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="936.2" y="990.0">Compile::Compile(ciEnv*, C2Compi..</text>
</g>
<g>
<title>Compile::Code_Gen() (43 samples, 12.65%)</title><rect x="933.2" y="963.0" width="149.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="936.2" y="974.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.29%)</title><rect x="933.2" y="947.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="936.2" y="958.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.29%)</title><rect x="933.2" y="931.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="936.2" y="942.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.88%)</title><rect x="936.6" y="947.0" width="10.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="939.6" y="958.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.29%)</title><rect x="936.6" y="931.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="939.6" y="942.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.29%)</title><rect x="936.6" y="915.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="939.6" y="926.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.29%)</title><rect x="936.6" y="899.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="939.6" y="910.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.59%)</title><rect x="940.1" y="931.0" width="7.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="943.1" y="942.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.59%)</title><rect x="940.1" y="915.0" width="7.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="943.1" y="926.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 1.47%)</title><rect x="947.1" y="947.0" width="17.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="950.1" y="958.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 1.18%)</title><rect x="947.1" y="931.0" width="13.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="950.1" y="942.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 0.88%)</title><rect x="950.5" y="915.0" width="10.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="953.5" y="926.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.29%)</title><rect x="960.9" y="931.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="963.9" y="942.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.59%)</title><rect x="964.4" y="947.0" width="7.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="967.4" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.59%)</title><rect x="964.4" y="931.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="967.4" y="942.0"></text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.29%)</title><rect x="964.4" y="915.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="967.4" y="926.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.29%)</title><rect x="967.9" y="915.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="970.9" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (32 samples, 9.41%)</title><rect x="971.4" y="947.0" width="111.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="974.4" y="958.0">PhaseChaitin:..</text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.29%)</title><rect x="971.4" y="931.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="974.4" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.59%)</title><rect x="974.8" y="931.0" width="7.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="977.8" y="942.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.29%)</title><rect x="974.8" y="915.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="977.8" y="926.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.29%)</title><rect x="978.3" y="915.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="981.3" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (7 samples, 2.06%)</title><rect x="981.8" y="931.0" width="24.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="984.8" y="942.0">P..</text>
</g>
<g>
<title>LiveRangeMap::find(Node const*) (1 samples, 0.29%)</title><rect x="1002.6" y="915.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1005.6" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 1.47%)</title><rect x="1006.1" y="931.0" width="17.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1009.1" y="942.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.29%)</title><rect x="1006.1" y="915.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1009.1" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.88%)</title><rect x="1009.5" y="915.0" width="10.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1012.5" y="926.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.29%)</title><rect x="1019.9" y="915.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1022.9" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.29%)</title><rect x="1023.4" y="931.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1026.4" y="942.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.29%)</title><rect x="1023.4" y="915.0" width="3.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1026.4" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.29%)</title><rect x="1026.9" y="931.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1029.9" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.59%)</title><rect x="1030.4" y="931.0" width="6.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1033.4" y="942.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (5 samples, 1.47%)</title><rect x="1037.3" y="931.0" width="17.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1040.3" y="942.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (5 samples, 1.47%)</title><rect x="1037.3" y="915.0" width="17.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1040.3" y="926.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.29%)</title><rect x="1037.3" y="899.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1040.3" y="910.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (4 samples, 1.18%)</title><rect x="1040.8" y="899.0" width="13.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1043.8" y="910.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 0.59%)</title><rect x="1040.8" y="883.0" width="6.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1043.8" y="894.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (2 samples, 0.59%)</title><rect x="1047.7" y="883.0" width="6.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1050.7" y="894.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (3 samples, 0.88%)</title><rect x="1054.6" y="931.0" width="10.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1057.6" y="942.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.29%)</title><rect x="1058.1" y="915.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1061.1" y="926.0"></text>
</g>
<g>
<title>IndexSet::populate_free_list() (1 samples, 0.29%)</title><rect x="1058.1" y="899.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1061.1" y="910.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.29%)</title><rect x="1058.1" y="883.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1061.1" y="894.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.29%)</title><rect x="1058.1" y="867.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1061.1" y="878.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.29%)</title><rect x="1058.1" y="851.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1061.1" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.29%)</title><rect x="1061.6" y="915.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1064.6" y="926.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 1.18%)</title><rect x="1065.1" y="931.0" width="13.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1068.1" y="942.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.88%)</title><rect x="1068.5" y="915.0" width="10.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1071.5" y="926.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.29%)</title><rect x="1078.9" y="931.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1081.9" y="942.0"></text>
</g>
<g>
<title>Compile::Optimize() (21 samples, 6.18%)</title><rect x="1082.4" y="963.0" width="72.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1085.4" y="974.0">Compile:..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.29%)</title><rect x="1082.4" y="947.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1085.4" y="958.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.29%)</title><rect x="1082.4" y="931.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1085.4" y="942.0"></text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.29%)</title><rect x="1085.9" y="947.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1088.9" y="958.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (1 samples, 0.29%)</title><rect x="1085.9" y="931.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1088.9" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.29%)</title><rect x="1085.9" y="915.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1088.9" y="926.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.29%)</title><rect x="1089.4" y="947.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1092.4" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (13 samples, 3.82%)</title><rect x="1092.8" y="947.0" width="45.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1095.8" y="958.0">Phas..</text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.29%)</title><rect x="1092.8" y="931.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1095.8" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.29%)</title><rect x="1096.3" y="931.0" width="3.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1099.3" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (8 samples, 2.35%)</title><rect x="1099.8" y="931.0" width="27.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1102.8" y="942.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (7 samples, 2.06%)</title><rect x="1103.2" y="915.0" width="24.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1106.2" y="926.0">P..</text>
</g>
<g>
<title>Node::unique_ctrl_out() (1 samples, 0.29%)</title><rect x="1103.2" y="899.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1106.2" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (6 samples, 1.76%)</title><rect x="1106.7" y="899.0" width="20.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1109.7" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.29%)</title><rect x="1120.6" y="883.0" width="3.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1123.6" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.29%)</title><rect x="1120.6" y="867.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1123.6" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.29%)</title><rect x="1124.1" y="883.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1127.1" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::eliminate_useless_predicates() (1 samples, 0.29%)</title><rect x="1127.5" y="931.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1130.5" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::collect_potentially_useful_predicates(IdealLoopTree*, Unique_Node_List&amp;) (1 samples, 0.29%)</title><rect x="1127.5" y="915.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.5" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::find_predicate(Node*) (1 samples, 0.29%)</title><rect x="1127.5" y="899.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1130.5" y="910.0"></text>
</g>
<g>
<title>ProjNode::is_uncommon_trap_if_pattern(Deoptimization::DeoptReason) (1 samples, 0.29%)</title><rect x="1127.5" y="883.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1130.5" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.59%)</title><rect x="1131.0" y="931.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1134.0" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.29%)</title><rect x="1131.0" y="915.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1134.0" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::spinup(Node*, Node*, Node*, Node*, Node*, small_cache*) (1 samples, 0.29%)</title><rect x="1131.0" y="899.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1134.0" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.29%)</title><rect x="1134.5" y="915.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1137.5" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.29%)</title><rect x="1134.5" y="899.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1137.5" y="910.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.29%)</title><rect x="1134.5" y="883.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.5" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 1.47%)</title><rect x="1137.9" y="947.0" width="17.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1140.9" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 1.47%)</title><rect x="1137.9" y="931.0" width="17.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1140.9" y="942.0"></text>
</g>
<g>
<title>CmpNode::add_id() const (1 samples, 0.29%)</title><rect x="1137.9" y="915.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1140.9" y="926.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.29%)</title><rect x="1141.4" y="915.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1144.4" y="926.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.29%)</title><rect x="1141.4" y="899.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1144.4" y="910.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.29%)</title><rect x="1144.9" y="915.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.9" y="926.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.29%)</title><rect x="1148.4" y="915.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1151.4" y="926.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.29%)</title><rect x="1148.4" y="899.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1151.4" y="910.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.29%)</title><rect x="1148.4" y="883.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.4" y="894.0"></text>
</g>
<g>
<title>TypeOopPtr::filter_helper(Type const*, bool) const (1 samples, 0.29%)</title><rect x="1151.8" y="915.0" width="3.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1154.8" y="926.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.29%)</title><rect x="1151.8" y="899.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.8" y="910.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.29%)</title><rect x="1151.8" y="883.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.8" y="894.0"></text>
</g>
<g>
<title>TypeAryPtr::xmeet_helper(Type const*) const (1 samples, 0.29%)</title><rect x="1151.8" y="867.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.8" y="878.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.29%)</title><rect x="1151.8" y="851.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.8" y="862.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.29%)</title><rect x="1151.8" y="835.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.8" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.47%)</title><rect x="1155.3" y="963.0" width="17.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1158.3" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.47%)</title><rect x="1155.3" y="947.0" width="17.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1158.3" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.47%)</title><rect x="1155.3" y="931.0" width="17.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1158.3" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.47%)</title><rect x="1155.3" y="915.0" width="17.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1158.3" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.47%)</title><rect x="1155.3" y="899.0" width="17.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1158.3" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.47%)</title><rect x="1155.3" y="883.0" width="17.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.3" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.47%)</title><rect x="1155.3" y="867.0" width="17.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.3" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.47%)</title><rect x="1155.3" y="851.0" width="17.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.47%)</title><rect x="1155.3" y="835.0" width="17.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1158.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.47%)</title><rect x="1155.3" y="819.0" width="17.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1158.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.47%)</title><rect x="1155.3" y="803.0" width="17.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.3" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.47%)</title><rect x="1155.3" y="787.0" width="17.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1158.3" y="798.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1155.3" y="771.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1158.3" y="782.0"></text>
</g>
<g>
<title>GraphKit::set_results_for_java_call(CallJavaNode*, bool) (1 samples, 0.29%)</title><rect x="1155.3" y="755.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.3" y="766.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) (1 samples, 0.29%)</title><rect x="1155.3" y="739.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.3" y="750.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.29%)</title><rect x="1155.3" y="723.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.3" y="734.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.29%)</title><rect x="1155.3" y="707.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.3" y="718.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 1.18%)</title><rect x="1158.8" y="771.0" width="13.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1161.8" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.18%)</title><rect x="1158.8" y="755.0" width="13.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.8" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.18%)</title><rect x="1158.8" y="739.0" width="13.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.18%)</title><rect x="1158.8" y="723.0" width="13.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.18%)</title><rect x="1158.8" y="707.0" width="13.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.18%)</title><rect x="1158.8" y="691.0" width="13.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.18%)</title><rect x="1158.8" y="675.0" width="13.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.8" y="686.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.29%)</title><rect x="1158.8" y="659.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.8" y="670.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.29%)</title><rect x="1158.8" y="643.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.8" y="654.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.29%)</title><rect x="1158.8" y="627.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.8" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.29%)</title><rect x="1158.8" y="611.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.8" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.29%)</title><rect x="1158.8" y="595.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.8" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.29%)</title><rect x="1158.8" y="579.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.8" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.29%)</title><rect x="1158.8" y="563.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.8" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.29%)</title><rect x="1158.8" y="547.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1161.8" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.29%)</title><rect x="1158.8" y="531.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.8" y="542.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.29%)</title><rect x="1158.8" y="515.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.8" y="526.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.29%)</title><rect x="1158.8" y="499.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1161.8" y="510.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.29%)</title><rect x="1158.8" y="483.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.8" y="494.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.29%)</title><rect x="1158.8" y="467.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.8" y="478.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.29%)</title><rect x="1158.8" y="451.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.8" y="462.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.29%)</title><rect x="1158.8" y="435.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.8" y="446.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.29%)</title><rect x="1158.8" y="419.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.8" y="430.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.29%)</title><rect x="1158.8" y="403.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.8" y="414.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.29%)</title><rect x="1158.8" y="387.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.8" y="398.0"></text>
</g>
<g>
<title>SystemDictionary::find_instance_or_array_klass(Symbol*, Handle, Handle, Thread*) (1 samples, 0.29%)</title><rect x="1158.8" y="371.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1161.8" y="382.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.29%)</title><rect x="1158.8" y="355.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.8" y="366.0"></text>
</g>
<g>
<title>Dictionary::find(int, unsigned int, Symbol*, ClassLoaderData*, Handle, Thread*) (1 samples, 0.29%)</title><rect x="1158.8" y="339.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.8" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.88%)</title><rect x="1162.2" y="659.0" width="10.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.2" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.88%)</title><rect x="1162.2" y="643.0" width="10.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.88%)</title><rect x="1162.2" y="627.0" width="10.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.88%)</title><rect x="1162.2" y="611.0" width="10.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.88%)</title><rect x="1162.2" y="595.0" width="10.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1165.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.88%)</title><rect x="1162.2" y="579.0" width="10.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.2" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.88%)</title><rect x="1162.2" y="563.0" width="10.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1165.2" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.88%)</title><rect x="1162.2" y="547.0" width="10.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.88%)</title><rect x="1162.2" y="531.0" width="10.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.88%)</title><rect x="1162.2" y="515.0" width="10.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.88%)</title><rect x="1162.2" y="499.0" width="10.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1165.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.88%)</title><rect x="1162.2" y="483.0" width="10.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.2" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.88%)</title><rect x="1162.2" y="467.0" width="10.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1165.2" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.88%)</title><rect x="1162.2" y="451.0" width="10.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.88%)</title><rect x="1162.2" y="435.0" width="10.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.88%)</title><rect x="1162.2" y="419.0" width="10.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.88%)</title><rect x="1162.2" y="403.0" width="10.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.88%)</title><rect x="1162.2" y="387.0" width="10.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.2" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.88%)</title><rect x="1162.2" y="371.0" width="10.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.2" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.88%)</title><rect x="1162.2" y="355.0" width="10.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.2" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.88%)</title><rect x="1162.2" y="339.0" width="10.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1165.2" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.88%)</title><rect x="1162.2" y="323.0" width="10.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1165.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.88%)</title><rect x="1162.2" y="307.0" width="10.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1165.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.88%)</title><rect x="1162.2" y="291.0" width="10.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.2" y="302.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.29%)</title><rect x="1162.2" y="275.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.2" y="286.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.29%)</title><rect x="1162.2" y="259.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.2" y="270.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_call_or_null(KlassHandle, KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.29%)</title><rect x="1162.2" y="243.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.2" y="254.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_call(CallInfo&amp;, Handle, KlassHandle, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.29%)</title><rect x="1162.2" y="227.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.2" y="238.0"></text>
</g>
<g>
<title>LinkResolver::runtime_resolve_interface_method(CallInfo&amp;, methodHandle, KlassHandle, Handle, KlassHandle, bool, Thread*) (1 samples, 0.29%)</title><rect x="1162.2" y="211.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.2" y="222.0"></text>
</g>
<g>
<title>LinkResolver::lookup_instance_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, Thread*) (1 samples, 0.29%)</title><rect x="1162.2" y="195.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.2" y="206.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.29%)</title><rect x="1162.2" y="179.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.2" y="190.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.29%)</title><rect x="1162.2" y="163.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.2" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.59%)</title><rect x="1165.7" y="275.0" width="6.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.7" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.59%)</title><rect x="1165.7" y="259.0" width="6.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.7" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.59%)</title><rect x="1165.7" y="243.0" width="6.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.7" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.59%)</title><rect x="1165.7" y="227.0" width="6.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.7" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.59%)</title><rect x="1165.7" y="211.0" width="6.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.7" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.59%)</title><rect x="1165.7" y="195.0" width="6.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.7" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.59%)</title><rect x="1165.7" y="179.0" width="6.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.7" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.59%)</title><rect x="1165.7" y="163.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1168.7" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.59%)</title><rect x="1165.7" y="147.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.7" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.59%)</title><rect x="1165.7" y="131.0" width="6.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.7" y="142.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.29%)</title><rect x="1165.7" y="115.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.7" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.29%)</title><rect x="1169.2" y="115.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.2" y="126.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1169.2" y="99.0" width="3.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1172.2" y="110.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1169.2" y="83.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.2" y="94.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1169.2" y="67.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.2" y="78.0"></text>
</g>
<g>
<title>Parse::init_blocks() (1 samples, 0.29%)</title><rect x="1169.2" y="51.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.2" y="62.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.29%)</title><rect x="1169.2" y="35.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.2" y="46.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (4 samples, 1.18%)</title><rect x="1172.6" y="995.0" width="13.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.6" y="1006.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (4 samples, 1.18%)</title><rect x="1172.6" y="979.0" width="13.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.6" y="990.0"></text>
</g>
<g>
<title>Compilation::compile_method() (4 samples, 1.18%)</title><rect x="1172.6" y="963.0" width="13.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.6" y="974.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.88%)</title><rect x="1172.6" y="947.0" width="10.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.6" y="958.0"></text>
</g>
<g>
<title>Compilation::build_hir() (3 samples, 0.88%)</title><rect x="1172.6" y="931.0" width="10.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.6" y="942.0"></text>
</g>
<g>
<title>GlobalValueNumbering::GlobalValueNumbering(IR*) (1 samples, 0.29%)</title><rect x="1172.6" y="915.0" width="3.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.6" y="926.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (2 samples, 0.59%)</title><rect x="1176.1" y="915.0" width="7.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.1" y="926.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (2 samples, 0.59%)</title><rect x="1176.1" y="899.0" width="7.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.1" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (2 samples, 0.59%)</title><rect x="1176.1" y="883.0" width="7.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.1" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.59%)</title><rect x="1176.1" y="867.0" width="7.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.1" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.59%)</title><rect x="1176.1" y="851.0" width="7.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.1" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.59%)</title><rect x="1176.1" y="835.0" width="7.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.1" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (2 samples, 0.59%)</title><rect x="1176.1" y="819.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.1" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (2 samples, 0.59%)</title><rect x="1176.1" y="803.0" width="7.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.1" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.59%)</title><rect x="1176.1" y="787.0" width="7.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.1" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.59%)</title><rect x="1176.1" y="771.0" width="7.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.1" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.59%)</title><rect x="1176.1" y="755.0" width="7.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.1" y="766.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (2 samples, 0.59%)</title><rect x="1176.1" y="739.0" width="7.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.1" y="750.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (2 samples, 0.59%)</title><rect x="1176.1" y="723.0" width="7.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.1" y="734.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (2 samples, 0.59%)</title><rect x="1176.1" y="707.0" width="7.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.1" y="718.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.29%)</title><rect x="1176.1" y="691.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.1" y="702.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.29%)</title><rect x="1176.1" y="675.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.1" y="686.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call(CallInfo&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.29%)</title><rect x="1176.1" y="659.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.1" y="670.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_special_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.29%)</title><rect x="1176.1" y="643.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.1" y="654.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.29%)</title><rect x="1176.1" y="627.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.1" y="638.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.29%)</title><rect x="1176.1" y="611.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.1" y="622.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.29%)</title><rect x="1176.1" y="595.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.1" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.29%)</title><rect x="1176.1" y="579.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.1" y="590.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.29%)</title><rect x="1179.6" y="691.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.6" y="702.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.29%)</title><rect x="1179.6" y="675.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.6" y="686.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.29%)</title><rect x="1179.6" y="659.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.6" y="670.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.29%)</title><rect x="1183.1" y="947.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.1" y="958.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.29%)</title><rect x="1183.1" y="931.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.1" y="942.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.29%)</title><rect x="1183.1" y="915.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.1" y="926.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.29%)</title><rect x="1183.1" y="899.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.1" y="910.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.29%)</title><rect x="1183.1" y="883.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.1" y="894.0"></text>
</g>
<g>
<title>ciEnv::~ciEnv() (1 samples, 0.29%)</title><rect x="1186.5" y="995.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.5" y="1006.0"></text>
</g>
<g>
<title>ciObjectFactory::remove_symbols() (1 samples, 0.29%)</title><rect x="1186.5" y="979.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.5" y="990.0"></text>
</g>
<g>
<title>Symbol::decrement_refcount() (1 samples, 0.29%)</title><rect x="1186.5" y="963.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.5" y="974.0"></text>
</g>
</g>
</svg>
