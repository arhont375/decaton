<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1462" onload="init(evt)" viewBox="0 0 1200 1462" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1445"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1445"> </text>
<g id="frames">
<g>
<title>all (1,323 samples, 100.00%)</title><rect x="10.0" y="1411.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1422.0">all</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.08%)</title><rect x="10.0" y="1395.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.08%)</title><rect x="10.0" y="1379.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.08%)</title><rect x="10.0" y="1363.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.08%)</title><rect x="10.0" y="1347.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.08%)</title><rect x="10.0" y="1331.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (278 samples, 21.01%)</title><rect x="10.9" y="1395.0" width="247.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.9" y="1406.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (276 samples, 20.86%)</title><rect x="12.7" y="1379.0" width="246.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.7" y="1390.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.08%)</title><rect x="12.7" y="1363.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.7" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (1 samples, 0.08%)</title><rect x="12.7" y="1347.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.7" y="1358.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="12.7" y="1331.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.7" y="1342.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="12.7" y="1315.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.7" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="12.7" y="1299.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.7" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="12.7" y="1283.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.7" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="12.7" y="1267.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.7" y="1278.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="12.7" y="1251.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="15.7" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (2 samples, 0.15%)</title><rect x="13.6" y="1363.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.6" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (2 samples, 0.15%)</title><rect x="13.6" y="1347.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.6" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (3 samples, 0.23%)</title><rect x="15.4" y="1363.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.4" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (3 samples, 0.23%)</title><rect x="15.4" y="1347.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.4" y="1358.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (3 samples, 0.23%)</title><rect x="15.4" y="1331.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="18.4" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$266/57009747.accept (3 samples, 0.23%)</title><rect x="15.4" y="1315.0" width="2.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.4" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (3 samples, 0.23%)</title><rect x="15.4" y="1299.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.4" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.pendingOffsetsCount (1 samples, 0.08%)</title><rect x="15.4" y="1283.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="18.4" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.15%)</title><rect x="16.2" y="1283.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.2" y="1294.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.15%)</title><rect x="16.2" y="1267.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="19.2" y="1278.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.08%)</title><rect x="17.1" y="1251.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.1" y="1262.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (212 samples, 16.02%)</title><rect x="18.0" y="1363.0" width="189.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.0" y="1374.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$265/1436504617.accept (204 samples, 15.42%)</title><rect x="18.0" y="1347.0" width="182.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.0" y="1358.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (203 samples, 15.34%)</title><rect x="18.9" y="1331.0" width="181.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="21.9" y="1342.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (172 samples, 13.00%)</title><rect x="22.5" y="1315.0" width="153.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.5" y="1326.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (172 samples, 13.00%)</title><rect x="22.5" y="1299.0" width="153.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="25.5" y="1310.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (172 samples, 13.00%)</title><rect x="22.5" y="1283.0" width="153.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.5" y="1294.0">com/linecorp/decato..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (172 samples, 13.00%)</title><rect x="22.5" y="1267.0" width="153.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="25.5" y="1278.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (172 samples, 13.00%)</title><rect x="22.5" y="1251.0" width="153.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="25.5" y="1262.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (172 samples, 13.00%)</title><rect x="22.5" y="1235.0" width="153.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.5" y="1246.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (124 samples, 9.37%)</title><rect x="56.4" y="1219.0" width="110.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="59.4" y="1230.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (30 samples, 2.27%)</title><rect x="57.3" y="1203.0" width="26.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="60.3" y="1214.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (30 samples, 2.27%)</title><rect x="57.3" y="1187.0" width="26.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="60.3" y="1198.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (30 samples, 2.27%)</title><rect x="57.3" y="1171.0" width="26.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="60.3" y="1182.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (9 samples, 0.68%)</title><rect x="84.0" y="1203.0" width="8.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="87.0" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (9 samples, 0.68%)</title><rect x="84.0" y="1187.0" width="8.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="87.0" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.23%)</title><rect x="88.5" y="1171.0" width="2.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="91.5" y="1182.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (3 samples, 0.23%)</title><rect x="88.5" y="1155.0" width="2.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="91.5" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.08%)</title><rect x="91.2" y="1171.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="94.2" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (84 samples, 6.35%)</title><rect x="92.1" y="1203.0" width="74.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="95.1" y="1214.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (84 samples, 6.35%)</title><rect x="92.1" y="1187.0" width="74.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="95.1" y="1198.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (83 samples, 6.27%)</title><rect x="92.1" y="1171.0" width="74.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="95.1" y="1182.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (83 samples, 6.27%)</title><rect x="92.1" y="1155.0" width="74.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="95.1" y="1166.0">java/uti..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (82 samples, 6.20%)</title><rect x="92.9" y="1139.0" width="73.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="95.9" y="1150.0">sun/misc..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.15%)</title><rect x="94.7" y="1123.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="97.7" y="1134.0"></text>
</g>
<g>
<title>Unsafe_Unpark (70 samples, 5.29%)</title><rect x="96.5" y="1123.0" width="62.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="99.5" y="1134.0">Unsafe..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="97.4" y="1107.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="100.4" y="1118.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.15%)</title><rect x="98.3" y="1107.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="101.3" y="1118.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="100.1" y="1107.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="103.1" y="1118.0"></text>
</g>
<g>
<title>__pthread_cond_signal (55 samples, 4.16%)</title><rect x="101.0" y="1107.0" width="49.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="104.0" y="1118.0">__pth..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (3 samples, 0.23%)</title><rect x="150.0" y="1107.0" width="2.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="153.0" y="1118.0"></text>
</g>
<g>
<title>pthread_mutex_lock (7 samples, 0.53%)</title><rect x="152.7" y="1107.0" width="6.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="155.7" y="1118.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 0.38%)</title><rect x="158.9" y="1123.0" width="4.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="161.9" y="1134.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.23%)</title><rect x="163.4" y="1123.0" width="2.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="166.4" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.08%)</title><rect x="166.1" y="1171.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="169.1" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.08%)</title><rect x="167.0" y="1219.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="170.0" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.08%)</title><rect x="167.0" y="1203.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="170.0" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.08%)</title><rect x="167.0" y="1187.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="170.0" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.15%)</title><rect x="167.9" y="1219.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="170.9" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (2 samples, 0.15%)</title><rect x="167.9" y="1203.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="170.9" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.15%)</title><rect x="167.9" y="1187.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="170.9" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 0.45%)</title><rect x="169.7" y="1219.0" width="5.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="172.7" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.45%)</title><rect x="169.7" y="1203.0" width="5.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="172.7" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.15%)</title><rect x="169.7" y="1187.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="172.7" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (2 samples, 0.15%)</title><rect x="169.7" y="1171.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="172.7" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (4 samples, 0.30%)</title><rect x="171.4" y="1187.0" width="3.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="174.4" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.08%)</title><rect x="171.4" y="1171.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="174.4" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (3 samples, 0.23%)</title><rect x="172.3" y="1171.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="175.3" y="1182.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="175.0" y="1219.0" width="0.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="178.0" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (3 samples, 0.23%)</title><rect x="175.9" y="1315.0" width="2.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="178.9" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (3 samples, 0.23%)</title><rect x="175.9" y="1299.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="178.9" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (2 samples, 0.15%)</title><rect x="178.6" y="1315.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="181.6" y="1326.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.15%)</title><rect x="178.6" y="1299.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="181.6" y="1310.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.15%)</title><rect x="178.6" y="1283.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="181.6" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/TaskRequest.&lt;init&gt; (19 samples, 1.44%)</title><rect x="180.4" y="1315.0" width="16.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="183.4" y="1326.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.08%)</title><rect x="180.4" y="1299.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="183.4" y="1310.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (16 samples, 1.21%)</title><rect x="181.2" y="1299.0" width="14.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="184.2" y="1310.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.08%)</title><rect x="194.6" y="1283.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="197.6" y="1294.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.15%)</title><rect x="195.5" y="1299.0" width="1.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="198.5" y="1310.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.23%)</title><rect x="197.3" y="1315.0" width="2.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="200.3" y="1326.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.08%)</title><rect x="200.0" y="1347.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="203.0" y="1358.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.08%)</title><rect x="200.0" y="1331.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="203.0" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (6 samples, 0.45%)</title><rect x="200.9" y="1347.0" width="5.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="203.9" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (6 samples, 0.45%)</title><rect x="200.9" y="1331.0" width="5.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="203.9" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (6 samples, 0.45%)</title><rect x="200.9" y="1315.0" width="5.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="203.9" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (6 samples, 0.45%)</title><rect x="200.9" y="1299.0" width="5.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="203.9" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.08%)</title><rect x="206.2" y="1347.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="209.2" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (58 samples, 4.38%)</title><rect x="207.1" y="1363.0" width="51.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="210.1" y="1374.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (58 samples, 4.38%)</title><rect x="207.1" y="1347.0" width="51.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="210.1" y="1358.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (36 samples, 2.72%)</title><rect x="207.1" y="1331.0" width="32.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="210.1" y="1342.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (36 samples, 2.72%)</title><rect x="207.1" y="1315.0" width="32.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="210.1" y="1326.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (34 samples, 2.57%)</title><rect x="207.1" y="1299.0" width="30.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="210.1" y="1310.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (29 samples, 2.19%)</title><rect x="207.1" y="1283.0" width="25.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="210.1" y="1294.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (29 samples, 2.19%)</title><rect x="207.1" y="1267.0" width="25.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="210.1" y="1278.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (18 samples, 1.36%)</title><rect x="208.9" y="1251.0" width="16.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="211.9" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (8 samples, 0.60%)</title><rect x="217.8" y="1235.0" width="7.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="220.8" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (8 samples, 0.60%)</title><rect x="217.8" y="1219.0" width="7.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="220.8" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (8 samples, 0.60%)</title><rect x="217.8" y="1203.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="220.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (8 samples, 0.60%)</title><rect x="217.8" y="1187.0" width="7.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="220.8" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (8 samples, 0.60%)</title><rect x="217.8" y="1171.0" width="7.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="220.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (8 samples, 0.60%)</title><rect x="217.8" y="1155.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="220.8" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (8 samples, 0.60%)</title><rect x="217.8" y="1139.0" width="7.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="220.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (8 samples, 0.60%)</title><rect x="225.0" y="1251.0" width="7.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="228.0" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (8 samples, 0.60%)</title><rect x="225.0" y="1235.0" width="7.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="228.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (7 samples, 0.53%)</title><rect x="225.0" y="1219.0" width="6.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="228.0" y="1230.0"></text>
</g>
<g>
<title>java/util/Optional.of (7 samples, 0.53%)</title><rect x="225.0" y="1203.0" width="6.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="228.0" y="1214.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.23%)</title><rect x="228.5" y="1187.0" width="2.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="231.5" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.08%)</title><rect x="231.2" y="1219.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="234.2" y="1230.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.08%)</title><rect x="231.2" y="1203.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="234.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.08%)</title><rect x="232.1" y="1251.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="235.1" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.15%)</title><rect x="233.0" y="1283.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="236.0" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.15%)</title><rect x="233.0" y="1267.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="236.0" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.08%)</title><rect x="233.0" y="1251.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="236.0" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.08%)</title><rect x="233.0" y="1235.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="236.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="233.9" y="1251.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="236.9" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="233.9" y="1235.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="236.9" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="233.9" y="1219.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="236.9" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.08%)</title><rect x="233.9" y="1203.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="236.9" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/MetricConfig.quota (1 samples, 0.08%)</title><rect x="233.9" y="1187.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="236.9" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (2 samples, 0.15%)</title><rect x="234.8" y="1283.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="237.8" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (2 samples, 0.15%)</title><rect x="234.8" y="1267.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="237.8" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.08%)</title><rect x="234.8" y="1251.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="237.8" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.08%)</title><rect x="234.8" y="1235.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="237.8" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="235.7" y="1251.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="238.7" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="235.7" y="1235.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="238.7" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.08%)</title><rect x="236.5" y="1283.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="239.5" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$400 (1 samples, 0.08%)</title><rect x="236.5" y="1267.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="239.5" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.position (1 samples, 0.08%)</title><rect x="236.5" y="1251.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="239.5" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.hasValidPosition (1 samples, 0.08%)</title><rect x="236.5" y="1235.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="239.5" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.initializeCompletedFetch (1 samples, 0.08%)</title><rect x="237.4" y="1299.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="240.4" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/MemoryRecords.batches (1 samples, 0.08%)</title><rect x="237.4" y="1283.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="240.4" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.08%)</title><rect x="238.3" y="1299.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="241.3" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (5 samples, 0.38%)</title><rect x="239.2" y="1331.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="242.2" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (4 samples, 0.30%)</title><rect x="239.2" y="1315.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="242.2" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (4 samples, 0.30%)</title><rect x="239.2" y="1299.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="242.2" y="1310.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.15%)</title><rect x="239.2" y="1283.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="242.2" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$233/766664480.accept (2 samples, 0.15%)</title><rect x="239.2" y="1267.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="242.2" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (2 samples, 0.15%)</title><rect x="239.2" y="1251.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="242.2" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.08%)</title><rect x="239.2" y="1235.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="242.2" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.08%)</title><rect x="239.2" y="1219.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="242.2" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="239.2" y="1203.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="242.2" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="239.2" y="1187.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="242.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.08%)</title><rect x="240.1" y="1235.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="243.1" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.08%)</title><rect x="240.1" y="1219.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="243.1" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.08%)</title><rect x="240.1" y="1203.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="243.1" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="241.0" y="1283.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="244.0" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="241.0" y="1267.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="244.0" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="241.0" y="1251.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="244.0" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="241.0" y="1235.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="244.0" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="241.0" y="1219.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="244.0" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="241.0" y="1203.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="244.0" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$80/1694799324.get (1 samples, 0.08%)</title><rect x="241.0" y="1187.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="244.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.08%)</title><rect x="241.9" y="1283.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="244.9" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.08%)</title><rect x="241.9" y="1267.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="244.9" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="241.9" y="1251.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="244.9" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="241.9" y="1235.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="244.9" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="241.9" y="1219.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="244.9" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="241.9" y="1203.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="244.9" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="241.9" y="1187.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="244.9" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="241.9" y="1171.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="244.9" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$244/1085200245.get (1 samples, 0.08%)</title><rect x="241.9" y="1155.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="244.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.08%)</title><rect x="242.8" y="1315.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="245.8" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.pollHeartbeat (1 samples, 0.08%)</title><rect x="242.8" y="1299.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="245.8" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.08%)</title><rect x="243.7" y="1331.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="246.7" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.08%)</title><rect x="243.7" y="1315.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="246.7" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.08%)</title><rect x="243.7" y="1299.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="246.7" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.08%)</title><rect x="243.7" y="1283.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="246.7" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.08%)</title><rect x="243.7" y="1267.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="246.7" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (8 samples, 0.60%)</title><rect x="244.6" y="1331.0" width="7.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="247.6" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (6 samples, 0.45%)</title><rect x="244.6" y="1315.0" width="5.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="247.6" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (6 samples, 0.45%)</title><rect x="244.6" y="1299.0" width="5.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="247.6" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="244.6" y="1283.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="247.6" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="244.6" y="1267.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="247.6" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.08%)</title><rect x="244.6" y="1251.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="247.6" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.08%)</title><rect x="244.6" y="1235.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="247.6" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.hasStagedReceives (1 samples, 0.08%)</title><rect x="245.5" y="1283.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="248.5" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (4 samples, 0.30%)</title><rect x="246.4" y="1283.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="249.4" y="1294.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.08%)</title><rect x="246.4" y="1267.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="249.4" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.08%)</title><rect x="246.4" y="1251.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="249.4" y="1262.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="246.4" y="1235.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="249.4" y="1246.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="246.4" y="1219.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="249.4" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (3 samples, 0.23%)</title><rect x="247.2" y="1267.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="250.2" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (3 samples, 0.23%)</title><rect x="247.2" y="1251.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="250.2" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (3 samples, 0.23%)</title><rect x="247.2" y="1235.0" width="2.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="250.2" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (3 samples, 0.23%)</title><rect x="247.2" y="1219.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="250.2" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (3 samples, 0.23%)</title><rect x="247.2" y="1203.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="250.2" y="1214.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (3 samples, 0.23%)</title><rect x="247.2" y="1187.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="250.2" y="1198.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.15%)</title><rect x="247.2" y="1171.0" width="1.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="250.2" y="1182.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="249.0" y="1171.0" width="0.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="252.0" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.15%)</title><rect x="249.9" y="1315.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="252.9" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (2 samples, 0.15%)</title><rect x="249.9" y="1299.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="252.9" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.15%)</title><rect x="249.9" y="1283.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="252.9" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.15%)</title><rect x="249.9" y="1267.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="252.9" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.send (1 samples, 0.08%)</title><rect x="249.9" y="1251.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="252.9" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.setSend (1 samples, 0.08%)</title><rect x="249.9" y="1235.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="252.9" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.addInterestOps (1 samples, 0.08%)</title><rect x="249.9" y="1219.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="252.9" y="1230.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.interestOps (1 samples, 0.08%)</title><rect x="249.9" y="1203.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="252.9" y="1214.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.ensureValid (1 samples, 0.08%)</title><rect x="249.9" y="1187.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="252.9" y="1198.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.nioInterestOps (1 samples, 0.08%)</title><rect x="249.9" y="1171.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="252.9" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.08%)</title><rect x="250.8" y="1251.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="253.8" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.08%)</title><rect x="250.8" y="1235.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="253.8" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.08%)</title><rect x="250.8" y="1219.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="253.8" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.08%)</title><rect x="250.8" y="1203.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="253.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.08%)</title><rect x="250.8" y="1187.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="253.8" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$10.write (1 samples, 0.08%)</title><rect x="250.8" y="1171.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="253.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.08%)</title><rect x="250.8" y="1155.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="253.8" y="1166.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.08%)</title><rect x="250.8" y="1139.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="253.8" y="1150.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.08%)</title><rect x="250.8" y="1123.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="253.8" y="1134.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (1 samples, 0.08%)</title><rect x="250.8" y="1107.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="253.8" y="1118.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (1 samples, 0.08%)</title><rect x="250.8" y="1091.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="253.8" y="1102.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (1 samples, 0.08%)</title><rect x="250.8" y="1075.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="253.8" y="1086.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (1 samples, 0.08%)</title><rect x="250.8" y="1059.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="253.8" y="1070.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (1 samples, 0.08%)</title><rect x="250.8" y="1043.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="253.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (8 samples, 0.60%)</title><rect x="251.7" y="1331.0" width="7.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="254.7" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (8 samples, 0.60%)</title><rect x="251.7" y="1315.0" width="7.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="254.7" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.08%)</title><rect x="252.6" y="1299.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="255.6" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (4 samples, 0.30%)</title><rect x="253.5" y="1299.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="256.5" y="1310.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.08%)</title><rect x="253.5" y="1283.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="256.5" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (3 samples, 0.23%)</title><rect x="254.4" y="1283.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="257.4" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.15%)</title><rect x="255.3" y="1267.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="258.3" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.15%)</title><rect x="255.3" y="1251.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="258.3" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.15%)</title><rect x="255.3" y="1235.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="258.3" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.15%)</title><rect x="255.3" y="1219.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="258.3" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="255.3" y="1203.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="258.3" y="1214.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.08%)</title><rect x="255.3" y="1187.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="258.3" y="1198.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.08%)</title><rect x="255.3" y="1171.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="258.3" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.08%)</title><rect x="255.3" y="1155.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="258.3" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="255.3" y="1139.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="258.3" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="255.3" y="1123.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="258.3" y="1134.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="255.3" y="1107.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="258.3" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.08%)</title><rect x="256.2" y="1203.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="259.2" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.08%)</title><rect x="256.2" y="1187.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="259.2" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.08%)</title><rect x="256.2" y="1171.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="259.2" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.08%)</title><rect x="256.2" y="1155.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="259.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.selectReadReplica (2 samples, 0.15%)</title><rect x="257.1" y="1299.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="260.1" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.preferredReadReplica (2 samples, 0.15%)</title><rect x="257.1" y="1283.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="260.1" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (2 samples, 0.15%)</title><rect x="257.1" y="1267.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="260.1" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (2 samples, 0.15%)</title><rect x="257.1" y="1251.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="260.1" y="1262.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (2 samples, 0.15%)</title><rect x="257.1" y="1235.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="260.1" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.15%)</title><rect x="257.1" y="1219.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="260.1" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.08%)</title><rect x="258.0" y="1203.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="261.0" y="1214.0"></text>
</g>
<g>
<title>java/lang/Thread.run (762 samples, 57.60%)</title><rect x="258.8" y="1395.0" width="679.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="261.8" y="1406.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (762 samples, 57.60%)</title><rect x="258.8" y="1379.0" width="679.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="261.8" y="1390.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (762 samples, 57.60%)</title><rect x="258.8" y="1363.0" width="679.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="261.8" y="1374.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$285/1934659186.run (519 samples, 39.23%)</title><rect x="264.2" y="1347.0" width="462.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="267.2" y="1358.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$L..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$70 (518 samples, 39.15%)</title><rect x="265.1" y="1331.0" width="462.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="268.1" y="1342.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.la..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (518 samples, 39.15%)</title><rect x="265.1" y="1315.0" width="462.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="268.1" y="1326.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (512 samples, 38.70%)</title><rect x="265.1" y="1299.0" width="456.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="268.1" y="1310.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (4 samples, 0.30%)</title><rect x="275.8" y="1283.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="278.8" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (186 samples, 14.06%)</title><rect x="279.4" y="1283.0" width="165.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="282.4" y="1294.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$42/815674463.extract (186 samples, 14.06%)</title><rect x="279.4" y="1267.0" width="165.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="282.4" y="1278.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (186 samples, 14.06%)</title><rect x="279.4" y="1251.0" width="165.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="282.4" y="1262.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="279.4" y="1235.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="282.4" y="1246.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="279.4" y="1219.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="282.4" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (185 samples, 13.98%)</title><rect x="280.2" y="1235.0" width="165.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="283.2" y="1246.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (185 samples, 13.98%)</title><rect x="280.2" y="1219.0" width="165.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="283.2" y="1230.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (185 samples, 13.98%)</title><rect x="280.2" y="1203.0" width="165.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="283.2" y="1214.0">com/fasterxml/jackson..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (67 samples, 5.06%)</title><rect x="280.2" y="1187.0" width="59.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="283.2" y="1198.0">com/fa..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="303.4" y="1171.0" width="0.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="306.4" y="1182.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="303.4" y="1155.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="306.4" y="1166.0"></text>
</g>
<g>
<title>__clock_gettime (9 samples, 0.68%)</title><rect x="304.3" y="1171.0" width="8.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="307.3" y="1182.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.45%)</title><rect x="307.0" y="1155.0" width="5.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="310.0" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (8 samples, 0.60%)</title><rect x="312.4" y="1171.0" width="7.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="315.4" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (6 samples, 0.45%)</title><rect x="314.1" y="1155.0" width="5.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="317.1" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.08%)</title><rect x="315.9" y="1139.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="318.9" y="1150.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="315.9" y="1123.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="318.9" y="1134.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="315.9" y="1107.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="318.9" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="315.9" y="1091.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="318.9" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (3 samples, 0.23%)</title><rect x="316.8" y="1139.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="319.8" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.23%)</title><rect x="316.8" y="1123.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="319.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.23%)</title><rect x="316.8" y="1107.0" width="2.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="319.8" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.23%)</title><rect x="316.8" y="1091.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="319.8" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.23%)</title><rect x="316.8" y="1075.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="319.8" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (22 samples, 1.66%)</title><rect x="319.5" y="1171.0" width="19.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="322.5" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (3 samples, 0.23%)</title><rect x="336.4" y="1155.0" width="2.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="339.4" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (3 samples, 0.23%)</title><rect x="336.4" y="1139.0" width="2.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="339.4" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (3 samples, 0.23%)</title><rect x="336.4" y="1123.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="339.4" y="1134.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="339.1" y="1171.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="342.1" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (111 samples, 8.39%)</title><rect x="340.0" y="1187.0" width="99.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="343.0" y="1198.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.08%)</title><rect x="340.9" y="1171.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="343.9" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.08%)</title><rect x="341.8" y="1171.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="344.8" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (3 samples, 0.23%)</title><rect x="342.7" y="1171.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="345.7" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.23%)</title><rect x="342.7" y="1155.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="345.7" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (12 samples, 0.91%)</title><rect x="345.4" y="1171.0" width="10.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="348.4" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (12 samples, 0.91%)</title><rect x="345.4" y="1155.0" width="10.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="348.4" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.08%)</title><rect x="347.1" y="1139.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="350.1" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (8 samples, 0.60%)</title><rect x="348.0" y="1139.0" width="7.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="351.0" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (7 samples, 0.53%)</title><rect x="348.9" y="1123.0" width="6.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="351.9" y="1134.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (4 samples, 0.30%)</title><rect x="351.6" y="1107.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="354.6" y="1118.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (4 samples, 0.30%)</title><rect x="351.6" y="1091.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="354.6" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (4 samples, 0.30%)</title><rect x="351.6" y="1075.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="354.6" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.15%)</title><rect x="353.4" y="1059.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="356.4" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="354.3" y="1043.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="357.3" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.08%)</title><rect x="355.2" y="1139.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="358.2" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (5 samples, 0.38%)</title><rect x="356.1" y="1171.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="359.1" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (4 samples, 0.30%)</title><rect x="357.0" y="1155.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="360.0" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (84 samples, 6.35%)</title><rect x="360.5" y="1171.0" width="74.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="363.5" y="1182.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (26 samples, 1.97%)</title><rect x="361.4" y="1155.0" width="23.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="364.4" y="1166.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.08%)</title><rect x="362.3" y="1139.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="365.3" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.15%)</title><rect x="363.2" y="1139.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="366.2" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (9 samples, 0.68%)</title><rect x="365.0" y="1139.0" width="8.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="368.0" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (9 samples, 0.68%)</title><rect x="365.0" y="1123.0" width="8.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="368.0" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (9 samples, 0.68%)</title><rect x="365.0" y="1107.0" width="8.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="368.0" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (9 samples, 0.68%)</title><rect x="365.0" y="1091.0" width="8.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="368.0" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.15%)</title><rect x="371.2" y="1075.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="374.2" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (12 samples, 0.91%)</title><rect x="373.0" y="1139.0" width="10.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="376.0" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (7 samples, 0.53%)</title><rect x="373.0" y="1123.0" width="6.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="376.0" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (2 samples, 0.15%)</title><rect x="377.5" y="1107.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="380.5" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (5 samples, 0.38%)</title><rect x="379.3" y="1123.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="382.3" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (5 samples, 0.38%)</title><rect x="379.3" y="1107.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="382.3" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.08%)</title><rect x="382.8" y="1091.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="385.8" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (1 samples, 0.08%)</title><rect x="382.8" y="1075.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="385.8" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.08%)</title><rect x="383.7" y="1139.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="386.7" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.08%)</title><rect x="383.7" y="1123.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="386.7" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.08%)</title><rect x="384.6" y="1155.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="387.6" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (56 samples, 4.23%)</title><rect x="385.5" y="1155.0" width="49.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="388.5" y="1166.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (56 samples, 4.23%)</title><rect x="385.5" y="1139.0" width="49.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="388.5" y="1150.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (55 samples, 4.16%)</title><rect x="386.4" y="1123.0" width="49.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="389.4" y="1134.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (21 samples, 1.59%)</title><rect x="391.7" y="1107.0" width="18.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="394.7" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (3 samples, 0.23%)</title><rect x="393.5" y="1091.0" width="2.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="396.5" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.08%)</title><rect x="396.2" y="1091.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="399.2" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (9 samples, 0.68%)</title><rect x="397.1" y="1091.0" width="8.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="400.1" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (9 samples, 0.68%)</title><rect x="397.1" y="1075.0" width="8.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="400.1" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (9 samples, 0.68%)</title><rect x="397.1" y="1059.0" width="8.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="400.1" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (3 samples, 0.23%)</title><rect x="397.1" y="1043.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="400.1" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (6 samples, 0.45%)</title><rect x="399.8" y="1043.0" width="5.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="402.8" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (4 samples, 0.30%)</title><rect x="405.1" y="1091.0" width="3.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="408.1" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.08%)</title><rect x="405.1" y="1075.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="408.1" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (3 samples, 0.23%)</title><rect x="406.0" y="1075.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="409.0" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (3 samples, 0.23%)</title><rect x="406.0" y="1059.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="409.0" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.15%)</title><rect x="406.9" y="1043.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="409.9" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.08%)</title><rect x="408.7" y="1091.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="411.7" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.08%)</title><rect x="408.7" y="1075.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="411.7" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.08%)</title><rect x="409.6" y="1091.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="412.6" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (12 samples, 0.91%)</title><rect x="410.5" y="1107.0" width="10.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="413.5" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (10 samples, 0.76%)</title><rect x="412.3" y="1091.0" width="8.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="415.3" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (10 samples, 0.76%)</title><rect x="412.3" y="1075.0" width="8.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="415.3" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (10 samples, 0.76%)</title><rect x="412.3" y="1059.0" width="8.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="415.3" y="1070.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (10 samples, 0.76%)</title><rect x="412.3" y="1043.0" width="8.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="415.3" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.08%)</title><rect x="421.2" y="1107.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="424.2" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (9 samples, 0.68%)</title><rect x="422.1" y="1107.0" width="8.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="425.1" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (9 samples, 0.68%)</title><rect x="422.1" y="1091.0" width="8.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="425.1" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (9 samples, 0.68%)</title><rect x="422.1" y="1075.0" width="8.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="425.1" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (9 samples, 0.68%)</title><rect x="422.1" y="1059.0" width="8.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="425.1" y="1070.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (9 samples, 0.68%)</title><rect x="422.1" y="1043.0" width="8.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="425.1" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.08%)</title><rect x="429.2" y="1027.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="432.2" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (6 samples, 0.45%)</title><rect x="430.1" y="1107.0" width="5.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="433.1" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.45%)</title><rect x="430.1" y="1091.0" width="5.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="433.1" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.45%)</title><rect x="430.1" y="1075.0" width="5.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="433.1" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.checkUnresolvedObjectId (2 samples, 0.15%)</title><rect x="435.4" y="1171.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="438.4" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.15%)</title><rect x="437.2" y="1171.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="440.2" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (7 samples, 0.53%)</title><rect x="439.0" y="1187.0" width="6.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="442.0" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (7 samples, 0.53%)</title><rect x="439.0" y="1171.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="442.0" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (7 samples, 0.53%)</title><rect x="439.0" y="1155.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="442.0" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (7 samples, 0.53%)</title><rect x="439.0" y="1139.0" width="6.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="442.0" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (7 samples, 0.53%)</title><rect x="439.0" y="1123.0" width="6.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="442.0" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (291 samples, 22.00%)</title><rect x="445.3" y="1283.0" width="259.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="448.3" y="1294.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.38%)</title><rect x="455.1" y="1267.0" width="4.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="458.1" y="1278.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.38%)</title><rect x="455.1" y="1251.0" width="4.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="458.1" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (43 samples, 3.25%)</title><rect x="459.5" y="1267.0" width="38.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="462.5" y="1278.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (1 samples, 0.08%)</title><rect x="460.4" y="1251.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="463.4" y="1262.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (41 samples, 3.10%)</title><rect x="461.3" y="1251.0" width="36.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="464.3" y="1262.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (38 samples, 2.87%)</title><rect x="464.0" y="1235.0" width="33.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="467.0" y="1246.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (8 samples, 0.60%)</title><rect x="464.0" y="1219.0" width="7.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="467.0" y="1230.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (8 samples, 0.60%)</title><rect x="464.0" y="1203.0" width="7.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="467.0" y="1214.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (8 samples, 0.60%)</title><rect x="464.0" y="1187.0" width="7.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="467.0" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (8 samples, 0.60%)</title><rect x="464.0" y="1171.0" width="7.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="467.0" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.15%)</title><rect x="471.1" y="1219.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="474.1" y="1230.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.15%)</title><rect x="471.1" y="1203.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="474.1" y="1214.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.15%)</title><rect x="471.1" y="1187.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="474.1" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.15%)</title><rect x="471.1" y="1171.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="474.1" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 0.15%)</title><rect x="471.1" y="1155.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="474.1" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (28 samples, 2.12%)</title><rect x="472.9" y="1219.0" width="25.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="475.9" y="1230.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (7 samples, 0.53%)</title><rect x="491.6" y="1203.0" width="6.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="494.6" y="1214.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.08%)</title><rect x="492.5" y="1187.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="495.5" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.08%)</title><rect x="493.4" y="1187.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="496.4" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.08%)</title><rect x="493.4" y="1171.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="496.4" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 0.30%)</title><rect x="494.3" y="1187.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="497.3" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.53%)</title><rect x="497.9" y="1267.0" width="6.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="500.9" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.53%)</title><rect x="497.9" y="1251.0" width="6.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="500.9" y="1262.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="497.9" y="1235.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="500.9" y="1246.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="497.9" y="1219.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="500.9" y="1230.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (6 samples, 0.45%)</title><rect x="498.8" y="1235.0" width="5.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="501.8" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (155 samples, 11.72%)</title><rect x="504.1" y="1267.0" width="138.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="507.1" y="1278.0">com/linecorp/deca..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="504.1" y="1251.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="507.1" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (154 samples, 11.64%)</title><rect x="505.0" y="1251.0" width="137.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="508.0" y="1262.0">com/linecorp/deca..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="506.8" y="1235.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="509.8" y="1246.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="506.8" y="1219.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="509.8" y="1230.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="506.8" y="1203.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="509.8" y="1214.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="506.8" y="1187.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="509.8" y="1198.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="506.8" y="1171.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="509.8" y="1182.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="506.8" y="1155.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="509.8" y="1166.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="506.8" y="1139.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="509.8" y="1150.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.08%)</title><rect x="506.8" y="1123.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="509.8" y="1134.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.08%)</title><rect x="506.8" y="1107.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="509.8" y="1118.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.08%)</title><rect x="506.8" y="1091.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="509.8" y="1102.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_bytes_to_copy(HeapRegion*) (1 samples, 0.08%)</title><rect x="506.8" y="1075.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="509.8" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="507.7" y="1235.0" width="0.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="510.7" y="1246.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="507.7" y="1219.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="510.7" y="1230.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.45%)</title><rect x="508.6" y="1235.0" width="5.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="511.6" y="1246.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.38%)</title><rect x="509.5" y="1219.0" width="4.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="512.5" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (51 samples, 3.85%)</title><rect x="513.9" y="1235.0" width="45.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="516.9" y="1246.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (26 samples, 1.97%)</title><rect x="530.9" y="1219.0" width="23.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="533.9" y="1230.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (26 samples, 1.97%)</title><rect x="530.9" y="1203.0" width="23.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="533.9" y="1214.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (9 samples, 0.68%)</title><rect x="538.0" y="1187.0" width="8.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="541.0" y="1198.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (9 samples, 0.68%)</title><rect x="538.0" y="1171.0" width="8.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="541.0" y="1182.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (9 samples, 0.68%)</title><rect x="538.0" y="1155.0" width="8.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="541.0" y="1166.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (9 samples, 0.68%)</title><rect x="538.0" y="1139.0" width="8.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="541.0" y="1150.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (4 samples, 0.30%)</title><rect x="538.0" y="1123.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="541.0" y="1134.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="538.0" y="1107.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="541.0" y="1118.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.23%)</title><rect x="538.9" y="1107.0" width="2.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="541.9" y="1118.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (3 samples, 0.23%)</title><rect x="538.9" y="1091.0" width="2.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="541.9" y="1102.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="538.9" y="1075.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="541.9" y="1086.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="538.9" y="1059.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="541.9" y="1070.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.08%)</title><rect x="539.8" y="1075.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="542.8" y="1086.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.08%)</title><rect x="540.7" y="1075.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="543.7" y="1086.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.08%)</title><rect x="541.6" y="1123.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="544.6" y="1134.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.30%)</title><rect x="542.5" y="1123.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="545.5" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.23%)</title><rect x="543.4" y="1107.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="546.4" y="1118.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.08%)</title><rect x="543.4" y="1091.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="546.4" y="1102.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="544.3" y="1091.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="547.3" y="1102.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="544.3" y="1075.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="547.3" y="1086.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.08%)</title><rect x="544.3" y="1059.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="547.3" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.08%)</title><rect x="544.3" y="1043.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="547.3" y="1054.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="545.1" y="1091.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="548.1" y="1102.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.08%)</title><rect x="545.1" y="1075.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="548.1" y="1086.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.38%)</title><rect x="546.0" y="1187.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="549.0" y="1198.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.08%)</title><rect x="550.5" y="1187.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="553.5" y="1198.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="551.4" y="1187.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="554.4" y="1198.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.15%)</title><rect x="552.3" y="1187.0" width="1.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="555.3" y="1198.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.15%)</title><rect x="554.1" y="1219.0" width="1.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="557.1" y="1230.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.30%)</title><rect x="555.9" y="1219.0" width="3.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="558.9" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.15%)</title><rect x="559.4" y="1235.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="562.4" y="1246.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (8 samples, 0.60%)</title><rect x="561.2" y="1235.0" width="7.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="564.2" y="1246.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.08%)</title><rect x="561.2" y="1219.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="564.2" y="1230.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.08%)</title><rect x="561.2" y="1203.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="564.2" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.08%)</title><rect x="561.2" y="1187.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="564.2" y="1198.0"></text>
</g>
<g>
<title>java/lang/Long.toString (7 samples, 0.53%)</title><rect x="562.1" y="1219.0" width="6.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="565.1" y="1230.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (7 samples, 0.53%)</title><rect x="562.1" y="1203.0" width="6.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="565.1" y="1214.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (82 samples, 6.20%)</title><rect x="568.3" y="1235.0" width="73.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="571.3" y="1246.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (69 samples, 5.22%)</title><rect x="579.9" y="1219.0" width="61.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="582.9" y="1230.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 0.38%)</title><rect x="580.8" y="1203.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="583.8" y="1214.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.38%)</title><rect x="580.8" y="1187.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="583.8" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 0.38%)</title><rect x="580.8" y="1171.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="583.8" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.38%)</title><rect x="580.8" y="1155.0" width="4.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="583.8" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (63 samples, 4.76%)</title><rect x="585.3" y="1203.0" width="56.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="588.3" y="1214.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.put (58 samples, 4.38%)</title><rect x="589.7" y="1187.0" width="51.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="592.7" y="1198.0">java/..</text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.08%)</title><rect x="612.9" y="1171.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="615.9" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (31 samples, 2.34%)</title><rect x="613.8" y="1171.0" width="27.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="616.8" y="1182.0">j..</text>
</g>
<g>
<title>java/util/HashMap.newNode (9 samples, 0.68%)</title><rect x="631.7" y="1155.0" width="8.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="634.7" y="1166.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.15%)</title><rect x="639.7" y="1155.0" width="1.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="642.7" y="1166.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="641.5" y="1235.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="644.5" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (59 samples, 4.46%)</title><rect x="642.4" y="1267.0" width="52.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="645.4" y="1278.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (59 samples, 4.46%)</title><rect x="642.4" y="1251.0" width="52.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="645.4" y="1262.0">com/l..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="647.7" y="1235.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="650.7" y="1246.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="647.7" y="1219.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="650.7" y="1230.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="647.7" y="1203.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="650.7" y="1214.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="647.7" y="1187.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="650.7" y="1198.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="647.7" y="1171.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="650.7" y="1182.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.08%)</title><rect x="647.7" y="1155.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="650.7" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$207/833274017.process (26 samples, 1.97%)</title><rect x="648.6" y="1235.0" width="23.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="651.6" y="1246.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (26 samples, 1.97%)</title><rect x="648.6" y="1219.0" width="23.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="651.6" y="1230.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (25 samples, 1.89%)</title><rect x="648.6" y="1203.0" width="22.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="651.6" y="1214.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.15%)</title><rect x="649.5" y="1187.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="652.5" y="1198.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.15%)</title><rect x="649.5" y="1171.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="652.5" y="1182.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.15%)</title><rect x="649.5" y="1155.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="652.5" y="1166.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.15%)</title><rect x="649.5" y="1139.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="652.5" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (11 samples, 0.83%)</title><rect x="651.3" y="1187.0" width="9.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="654.3" y="1198.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="653.1" y="1171.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="656.1" y="1182.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.60%)</title><rect x="654.0" y="1171.0" width="7.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="657.0" y="1182.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.60%)</title><rect x="654.0" y="1155.0" width="7.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="657.0" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.08%)</title><rect x="661.1" y="1187.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="664.1" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (10 samples, 0.76%)</title><rect x="662.0" y="1187.0" width="8.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="665.0" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.15%)</title><rect x="669.1" y="1171.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="672.1" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.15%)</title><rect x="669.1" y="1155.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="672.1" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.08%)</title><rect x="670.9" y="1203.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="673.9" y="1214.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="670.9" y="1187.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="673.9" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="670.9" y="1171.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="673.9" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="670.9" y="1155.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="673.9" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.08%)</title><rect x="670.9" y="1139.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="673.9" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (5 samples, 0.38%)</title><rect x="671.8" y="1235.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="674.8" y="1246.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (9 samples, 0.68%)</title><rect x="676.3" y="1235.0" width="8.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="679.3" y="1246.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (9 samples, 0.68%)</title><rect x="676.3" y="1219.0" width="8.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="679.3" y="1230.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.30%)</title><rect x="677.2" y="1203.0" width="3.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="680.2" y="1214.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (4 samples, 0.30%)</title><rect x="680.7" y="1203.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="683.7" y="1214.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.15%)</title><rect x="684.3" y="1235.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="687.3" y="1246.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (10 samples, 0.76%)</title><rect x="686.1" y="1235.0" width="8.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="689.1" y="1246.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="694.1" y="1219.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="697.1" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (11 samples, 0.83%)</title><rect x="695.0" y="1267.0" width="9.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="698.0" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (11 samples, 0.83%)</title><rect x="695.0" y="1251.0" width="9.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="698.0" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (11 samples, 0.83%)</title><rect x="695.0" y="1235.0" width="9.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="698.0" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$295/1722066854.accept (11 samples, 0.83%)</title><rect x="695.0" y="1219.0" width="9.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="698.0" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$62 (11 samples, 0.83%)</title><rect x="695.0" y="1203.0" width="9.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="698.0" y="1214.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (11 samples, 0.83%)</title><rect x="695.0" y="1187.0" width="9.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="698.0" y="1198.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (11 samples, 0.83%)</title><rect x="695.0" y="1171.0" width="9.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="698.0" y="1182.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.30%)</title><rect x="701.2" y="1155.0" width="3.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="704.2" y="1166.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.30%)</title><rect x="701.2" y="1139.0" width="3.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="704.2" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (15 samples, 1.13%)</title><rect x="704.8" y="1283.0" width="13.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="707.8" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (15 samples, 1.13%)</title><rect x="704.8" y="1267.0" width="13.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="707.8" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (13 samples, 0.98%)</title><rect x="706.6" y="1251.0" width="11.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="709.6" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$296/687874697.accept (13 samples, 0.98%)</title><rect x="706.6" y="1235.0" width="11.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="709.6" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$61 (13 samples, 0.98%)</title><rect x="706.6" y="1219.0" width="11.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="709.6" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$283/1485762261.complete (13 samples, 0.98%)</title><rect x="706.6" y="1203.0" width="11.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="709.6" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$38 (13 samples, 0.98%)</title><rect x="706.6" y="1187.0" width="11.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="709.6" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$282/1582188772.complete (13 samples, 0.98%)</title><rect x="706.6" y="1171.0" width="11.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="709.6" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$68 (13 samples, 0.98%)</title><rect x="706.6" y="1155.0" width="11.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="709.6" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (13 samples, 0.98%)</title><rect x="706.6" y="1139.0" width="11.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="709.6" y="1150.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (13 samples, 0.98%)</title><rect x="706.6" y="1123.0" width="11.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="709.6" y="1134.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.30%)</title><rect x="718.2" y="1283.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="721.2" y="1294.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.30%)</title><rect x="718.2" y="1267.0" width="3.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="721.2" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.08%)</title><rect x="721.7" y="1299.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="724.7" y="1310.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.08%)</title><rect x="721.7" y="1283.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="724.7" y="1294.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.08%)</title><rect x="721.7" y="1267.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="724.7" y="1278.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="721.7" y="1251.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="724.7" y="1262.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="721.7" y="1235.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="724.7" y="1246.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="721.7" y="1219.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="724.7" y="1230.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.08%)</title><rect x="721.7" y="1203.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="724.7" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (5 samples, 0.38%)</title><rect x="722.6" y="1299.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="725.6" y="1310.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.30%)</title><rect x="723.5" y="1283.0" width="3.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="726.5" y="1294.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.30%)</title><rect x="723.5" y="1267.0" width="3.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="726.5" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.15%)</title><rect x="727.1" y="1347.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="730.1" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.15%)</title><rect x="727.1" y="1331.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="730.1" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.15%)</title><rect x="727.1" y="1315.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="730.1" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.15%)</title><rect x="727.1" y="1299.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="730.1" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (235 samples, 17.76%)</title><rect x="728.9" y="1347.0" width="209.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="731.9" y="1358.0">java/util/concurrent/Thread..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (235 samples, 17.76%)</title><rect x="728.9" y="1331.0" width="209.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="731.9" y="1342.0">java/util/concurrent/Linked..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (216 samples, 16.33%)</title><rect x="745.8" y="1315.0" width="192.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="748.8" y="1326.0">java/util/concurrent/lock..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (14 samples, 1.06%)</title><rect x="758.3" y="1299.0" width="12.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="761.3" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.08%)</title><rect x="770.8" y="1299.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="773.8" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.08%)</title><rect x="770.8" y="1283.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="773.8" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.08%)</title><rect x="770.8" y="1267.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="773.8" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.08%)</title><rect x="770.8" y="1251.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="773.8" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.08%)</title><rect x="770.8" y="1235.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="773.8" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (187 samples, 14.13%)</title><rect x="771.7" y="1299.0" width="166.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="774.7" y="1310.0">java/util/concurrent/..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (179 samples, 13.53%)</title><rect x="778.8" y="1283.0" width="159.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="781.8" y="1294.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="782.4" y="1267.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="785.4" y="1278.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (2 samples, 0.15%)</title><rect x="783.3" y="1267.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="786.3" y="1278.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.23%)</title><rect x="785.1" y="1267.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="788.1" y="1278.0"></text>
</g>
<g>
<title>Unsafe_Park (165 samples, 12.47%)</title><rect x="787.7" y="1267.0" width="147.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="790.7" y="1278.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="790.4" y="1251.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="793.4" y="1262.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.08%)</title><rect x="791.3" y="1251.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="794.3" y="1262.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (24 samples, 1.81%)</title><rect x="792.2" y="1251.0" width="21.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="795.2" y="1262.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (6 samples, 0.45%)</title><rect x="800.2" y="1235.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="803.2" y="1246.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.08%)</title><rect x="801.1" y="1219.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="804.1" y="1230.0"></text>
</g>
<g>
<title>Monitor::unlock() (4 samples, 0.30%)</title><rect x="802.0" y="1219.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="805.0" y="1230.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.15%)</title><rect x="805.6" y="1235.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="808.6" y="1246.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.08%)</title><rect x="807.4" y="1235.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="810.4" y="1246.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (6 samples, 0.45%)</title><rect x="808.3" y="1235.0" width="5.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="811.3" y="1246.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="813.6" y="1251.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="816.6" y="1262.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.08%)</title><rect x="814.5" y="1251.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="817.5" y="1262.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="815.4" y="1251.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="818.4" y="1262.0"></text>
</g>
<g>
<title>__lll_lock_wait (12 samples, 0.91%)</title><rect x="816.3" y="1251.0" width="10.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="819.3" y="1262.0"></text>
</g>
<g>
<title>__lll_unlock_wake (41 samples, 3.10%)</title><rect x="827.0" y="1251.0" width="36.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="830.0" y="1262.0">__l..</text>
</g>
<g>
<title>__pthread_cond_wait (54 samples, 4.08%)</title><rect x="863.6" y="1251.0" width="48.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="866.6" y="1262.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.30%)</title><rect x="911.7" y="1251.0" width="3.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="914.7" y="1262.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.08%)</title><rect x="915.3" y="1251.0" width="0.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="918.3" y="1262.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 0.23%)</title><rect x="916.2" y="1251.0" width="2.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="919.2" y="1262.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.08%)</title><rect x="918.9" y="1251.0" width="0.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="921.9" y="1262.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (6 samples, 0.45%)</title><rect x="919.8" y="1251.0" width="5.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="922.8" y="1262.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (4 samples, 0.30%)</title><rect x="925.1" y="1251.0" width="3.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="928.1" y="1262.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.23%)</title><rect x="928.7" y="1251.0" width="2.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="931.7" y="1262.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (4 samples, 0.30%)</title><rect x="931.3" y="1251.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="934.3" y="1262.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.15%)</title><rect x="934.9" y="1267.0" width="1.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="937.9" y="1278.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.08%)</title><rect x="936.7" y="1267.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="939.7" y="1278.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.08%)</title><rect x="937.6" y="1267.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="940.6" y="1278.0"></text>
</g>
<g>
<title>start_thread (282 samples, 21.32%)</title><rect x="938.5" y="1395.0" width="251.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="941.5" y="1406.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (282 samples, 21.32%)</title><rect x="938.5" y="1379.0" width="251.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="941.5" y="1390.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (26 samples, 1.97%)</title><rect x="938.5" y="1363.0" width="23.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="941.5" y="1374.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (10 samples, 0.76%)</title><rect x="938.5" y="1347.0" width="8.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="941.5" y="1358.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (10 samples, 0.76%)</title><rect x="938.5" y="1331.0" width="8.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="941.5" y="1342.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.08%)</title><rect x="938.5" y="1315.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="941.5" y="1326.0"></text>
</g>
<g>
<title>SpinPause (9 samples, 0.68%)</title><rect x="939.4" y="1315.0" width="8.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="942.4" y="1326.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (16 samples, 1.21%)</title><rect x="947.4" y="1347.0" width="14.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="950.4" y="1358.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.08%)</title><rect x="947.4" y="1331.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="950.4" y="1342.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.08%)</title><rect x="947.4" y="1315.0" width="0.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="950.4" y="1326.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (3 samples, 0.23%)</title><rect x="948.3" y="1331.0" width="2.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="951.3" y="1342.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.08%)</title><rect x="948.3" y="1315.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="951.3" y="1326.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="948.3" y="1299.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="951.3" y="1310.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="948.3" y="1283.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="951.3" y="1294.0"></text>
</g>
<g>
<title>JNIHandleBlock::oops_do(OopClosure*) (1 samples, 0.08%)</title><rect x="948.3" y="1267.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="951.3" y="1278.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.15%)</title><rect x="949.2" y="1315.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="952.2" y="1326.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (2 samples, 0.15%)</title><rect x="949.2" y="1299.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="952.2" y="1310.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (12 samples, 0.91%)</title><rect x="951.0" y="1331.0" width="10.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="954.0" y="1342.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (12 samples, 0.91%)</title><rect x="951.0" y="1315.0" width="10.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="954.0" y="1326.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (12 samples, 0.91%)</title><rect x="951.0" y="1299.0" width="10.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="954.0" y="1310.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (12 samples, 0.91%)</title><rect x="951.0" y="1283.0" width="10.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="954.0" y="1294.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (10 samples, 0.76%)</title><rect x="952.8" y="1267.0" width="8.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="955.8" y="1278.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (9 samples, 0.68%)</title><rect x="953.6" y="1251.0" width="8.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="956.6" y="1262.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (7 samples, 0.53%)</title><rect x="955.4" y="1235.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="958.4" y="1246.0"></text>
</g>
<g>
<title>G1BlockOffsetArray::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.08%)</title><rect x="955.4" y="1219.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="958.4" y="1230.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.08%)</title><rect x="956.3" y="1219.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="959.3" y="1230.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (2 samples, 0.15%)</title><rect x="957.2" y="1219.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="960.2" y="1230.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (1 samples, 0.08%)</title><rect x="958.1" y="1203.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="961.1" y="1214.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (2 samples, 0.15%)</title><rect x="959.0" y="1219.0" width="1.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="962.0" y="1230.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.08%)</title><rect x="959.9" y="1203.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="962.9" y="1214.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.08%)</title><rect x="960.8" y="1219.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="963.8" y="1230.0"></text>
</g>
<g>
<title>JavaThread::run() (254 samples, 19.20%)</title><rect x="961.7" y="1363.0" width="226.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="964.7" y="1374.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (254 samples, 19.20%)</title><rect x="961.7" y="1347.0" width="226.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="964.7" y="1358.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (254 samples, 19.20%)</title><rect x="961.7" y="1331.0" width="226.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="964.7" y="1342.0">CompileBroker::compiler_thread..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (254 samples, 19.20%)</title><rect x="961.7" y="1315.0" width="226.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="964.7" y="1326.0">CompileBroker::invoke_compiler..</text>
</g>
<g>
<title>Arena::~Arena() (1 samples, 0.08%)</title><rect x="961.7" y="1299.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="964.7" y="1310.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (251 samples, 18.97%)</title><rect x="962.6" y="1299.0" width="223.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="965.6" y="1310.0">C2Compiler::compile_method(ci..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (251 samples, 18.97%)</title><rect x="962.6" y="1283.0" width="223.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="965.6" y="1294.0">Compile::Compile(ciEnv*, C2Co..</text>
</g>
<g>
<title>Compile::Code_Gen() (75 samples, 5.67%)</title><rect x="962.6" y="1267.0" width="66.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="965.6" y="1278.0">Compile..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.15%)</title><rect x="962.6" y="1251.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="965.6" y="1262.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.15%)</title><rect x="962.6" y="1235.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="965.6" y="1246.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.23%)</title><rect x="964.3" y="1251.0" width="2.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="967.3" y="1262.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.08%)</title><rect x="964.3" y="1235.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="967.3" y="1246.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.08%)</title><rect x="964.3" y="1219.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="967.3" y="1230.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.15%)</title><rect x="965.2" y="1235.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="968.2" y="1246.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.15%)</title><rect x="965.2" y="1219.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="968.2" y="1230.0"></text>
</g>
<g>
<title>Matcher::match() (8 samples, 0.60%)</title><rect x="967.0" y="1251.0" width="7.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="970.0" y="1262.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.08%)</title><rect x="967.0" y="1235.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="970.0" y="1246.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (7 samples, 0.53%)</title><rect x="967.9" y="1235.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="970.9" y="1246.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (4 samples, 0.30%)</title><rect x="968.8" y="1219.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="971.8" y="1230.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.08%)</title><rect x="972.4" y="1219.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="975.4" y="1230.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.08%)</title><rect x="972.4" y="1203.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="975.4" y="1214.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.08%)</title><rect x="972.4" y="1187.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="975.4" y="1198.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.08%)</title><rect x="973.3" y="1219.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="976.3" y="1230.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (2 samples, 0.15%)</title><rect x="974.2" y="1251.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="977.2" y="1262.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (2 samples, 0.15%)</title><rect x="974.2" y="1235.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="977.2" y="1246.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 0.30%)</title><rect x="975.9" y="1251.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="978.9" y="1262.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 0.30%)</title><rect x="975.9" y="1235.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="978.9" y="1246.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.08%)</title><rect x="975.9" y="1219.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="978.9" y="1230.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="976.8" y="1219.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="979.8" y="1230.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.08%)</title><rect x="976.8" y="1203.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="979.8" y="1214.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.08%)</title><rect x="977.7" y="1219.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="980.7" y="1230.0"></text>
</g>
<g>
<title>PhaseCFG::set_next_call(Block*, Node*, VectorSet&amp;) (1 samples, 0.08%)</title><rect x="977.7" y="1203.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="980.7" y="1214.0"></text>
</g>
<g>
<title>storePNode::ideal_Opcode() const (1 samples, 0.08%)</title><rect x="978.6" y="1219.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="981.6" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (56 samples, 4.23%)</title><rect x="979.5" y="1251.0" width="50.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="982.5" y="1262.0">Phase..</text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.08%)</title><rect x="980.4" y="1235.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="983.4" y="1246.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.08%)</title><rect x="981.3" y="1235.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="984.3" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (5 samples, 0.38%)</title><rect x="982.2" y="1235.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="985.2" y="1246.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.08%)</title><rect x="984.0" y="1219.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="987.0" y="1230.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.15%)</title><rect x="984.9" y="1219.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="987.9" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.15%)</title><rect x="986.6" y="1235.0" width="1.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="989.6" y="1246.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.15%)</title><rect x="986.6" y="1219.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="989.6" y="1230.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.15%)</title><rect x="986.6" y="1203.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="989.6" y="1214.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 0.45%)</title><rect x="988.4" y="1235.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="991.4" y="1246.0"></text>
</g>
<g>
<title>loadNNode::rule() const (1 samples, 0.08%)</title><rect x="992.9" y="1219.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="995.9" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (11 samples, 0.83%)</title><rect x="993.8" y="1235.0" width="9.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="996.8" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (5 samples, 0.38%)</title><rect x="999.1" y="1219.0" width="4.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1002.1" y="1230.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.15%)</title><rect x="1001.8" y="1203.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1004.8" y="1214.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 0.30%)</title><rect x="1003.6" y="1235.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1006.6" y="1246.0"></text>
</g>
<g>
<title>RegMask::Size() const (3 samples, 0.23%)</title><rect x="1004.5" y="1219.0" width="2.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1007.5" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.08%)</title><rect x="1007.2" y="1235.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1010.2" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (6 samples, 0.45%)</title><rect x="1008.0" y="1235.0" width="5.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1011.0" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 0.23%)</title><rect x="1009.8" y="1219.0" width="2.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1012.8" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.08%)</title><rect x="1011.6" y="1203.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1014.6" y="1214.0"></text>
</g>
<g>
<title>Block::find_remove(Node const*) (1 samples, 0.08%)</title><rect x="1011.6" y="1187.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1014.6" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.08%)</title><rect x="1012.5" y="1219.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1015.5" y="1230.0"></text>
</g>
<g>
<title>Block::find_remove(Node const*) (1 samples, 0.08%)</title><rect x="1012.5" y="1203.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1015.5" y="1214.0"></text>
</g>
<g>
<title>Node_Array::remove(unsigned int) (1 samples, 0.08%)</title><rect x="1012.5" y="1187.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1015.5" y="1198.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (6 samples, 0.45%)</title><rect x="1013.4" y="1235.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1016.4" y="1246.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (5 samples, 0.38%)</title><rect x="1013.4" y="1219.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1016.4" y="1230.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.08%)</title><rect x="1014.3" y="1203.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1017.3" y="1214.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (3 samples, 0.23%)</title><rect x="1015.2" y="1203.0" width="2.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1018.2" y="1214.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 0.15%)</title><rect x="1015.2" y="1187.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1018.2" y="1198.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.08%)</title><rect x="1017.0" y="1187.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1020.0" y="1198.0"></text>
</g>
<g>
<title>addI_rRegNode::two_adr() const (1 samples, 0.08%)</title><rect x="1017.9" y="1219.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1020.9" y="1230.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.15%)</title><rect x="1018.8" y="1235.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1021.8" y="1246.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1019.6" y="1219.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1022.6" y="1230.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.15%)</title><rect x="1020.5" y="1235.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1023.5" y="1246.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.08%)</title><rect x="1020.5" y="1219.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1023.5" y="1230.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1021.4" y="1219.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1024.4" y="1230.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.08%)</title><rect x="1022.3" y="1235.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1025.3" y="1246.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 0.38%)</title><rect x="1023.2" y="1235.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1026.2" y="1246.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.15%)</title><rect x="1025.9" y="1219.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1028.9" y="1230.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.08%)</title><rect x="1027.7" y="1235.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1030.7" y="1246.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1028.6" y="1235.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1031.6" y="1246.0"></text>
</g>
<g>
<title>Compile::Optimize() (165 samples, 12.47%)</title><rect x="1029.5" y="1267.0" width="147.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1032.5" y="1278.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.08%)</title><rect x="1029.5" y="1251.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1032.5" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (4 samples, 0.30%)</title><rect x="1030.3" y="1251.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1033.3" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (4 samples, 0.30%)</title><rect x="1030.3" y="1235.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1033.3" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (4 samples, 0.30%)</title><rect x="1030.3" y="1219.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1033.3" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.23%)</title><rect x="1030.3" y="1203.0" width="2.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1033.3" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1030.3" y="1187.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1033.3" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1030.3" y="1171.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1033.3" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1030.3" y="1155.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1033.3" y="1166.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.08%)</title><rect x="1030.3" y="1139.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1033.3" y="1150.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.08%)</title><rect x="1030.3" y="1123.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1033.3" y="1134.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.08%)</title><rect x="1030.3" y="1107.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1033.3" y="1118.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.08%)</title><rect x="1030.3" y="1091.0" width="0.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1033.3" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.15%)</title><rect x="1031.2" y="1187.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1034.2" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.15%)</title><rect x="1031.2" y="1171.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1034.2" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.2" y="1155.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1034.2" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.2" y="1139.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1034.2" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.2" y="1123.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1034.2" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1031.2" y="1107.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1034.2" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="1031.2" y="1091.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1034.2" y="1102.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="1031.2" y="1075.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1034.2" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1032.1" y="1155.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1035.1" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1032.1" y="1139.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1035.1" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1032.1" y="1123.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1035.1" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1032.1" y="1107.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1035.1" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1032.1" y="1091.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1035.1" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1032.1" y="1075.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1035.1" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1032.1" y="1059.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1035.1" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1032.1" y="1043.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1035.1" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1032.1" y="1027.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1035.1" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1032.1" y="1011.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1035.1" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1032.1" y="995.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1035.1" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1032.1" y="979.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1035.1" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1032.1" y="963.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1035.1" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1032.1" y="947.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1035.1" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1032.1" y="931.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1035.1" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1032.1" y="915.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1035.1" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1032.1" y="899.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1035.1" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1032.1" y="883.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1035.1" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1032.1" y="867.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1035.1" y="878.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1032.1" y="851.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1035.1" y="862.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_java_lang_Object() const (1 samples, 0.08%)</title><rect x="1033.0" y="1203.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1036.0" y="1214.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.08%)</title><rect x="1033.9" y="1251.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1036.9" y="1262.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.08%)</title><rect x="1034.8" y="1251.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1037.8" y="1262.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.08%)</title><rect x="1034.8" y="1235.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1037.8" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (138 samples, 10.43%)</title><rect x="1035.7" y="1251.0" width="123.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1038.7" y="1262.0">PhaseIdealLoop:..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1035.7" y="1235.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1038.7" y="1246.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1035.7" y="1219.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1038.7" y="1230.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1035.7" y="1203.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1038.7" y="1214.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1035.7" y="1187.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1038.7" y="1198.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1035.7" y="1171.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1038.7" y="1182.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1035.7" y="1155.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1038.7" y="1166.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1035.7" y="1139.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1038.7" y="1150.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1035.7" y="1123.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1038.7" y="1134.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1035.7" y="1107.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1038.7" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.08%)</title><rect x="1035.7" y="1091.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1038.7" y="1102.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1035.7" y="1075.0" width="0.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1038.7" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (6 samples, 0.45%)</title><rect x="1036.6" y="1235.0" width="5.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1039.6" y="1246.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.15%)</title><rect x="1040.2" y="1219.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1043.2" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.30%)</title><rect x="1041.9" y="1235.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1044.9" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (124 samples, 9.37%)</title><rect x="1045.5" y="1235.0" width="110.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1048.5" y="1246.0">PhaseIdealLoo..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (120 samples, 9.07%)</title><rect x="1049.1" y="1219.0" width="107.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1052.1" y="1230.0">PhaseIdealLoo..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (7 samples, 0.53%)</title><rect x="1052.6" y="1203.0" width="6.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1055.6" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.08%)</title><rect x="1058.9" y="1203.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1061.9" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (108 samples, 8.16%)</title><rect x="1059.8" y="1203.0" width="96.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1062.8" y="1214.0">PhaseIdealL..</text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.08%)</title><rect x="1140.1" y="1187.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1143.1" y="1198.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.08%)</title><rect x="1140.1" y="1171.0" width="0.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1143.1" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.08%)</title><rect x="1140.9" y="1187.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1143.9" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1140.9" y="1171.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1143.9" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (16 samples, 1.21%)</title><rect x="1141.8" y="1187.0" width="14.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1144.8" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.15%)</title><rect x="1156.1" y="1235.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.1" y="1246.0"></text>
</g>
<g>
<title>CountedLoopEndNode::Opcode() const (1 samples, 0.08%)</title><rect x="1156.1" y="1219.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.1" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.08%)</title><rect x="1157.0" y="1219.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.0" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.08%)</title><rect x="1157.0" y="1203.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.0" y="1214.0"></text>
</g>
<g>
<title>AddPNode::Opcode() const (1 samples, 0.08%)</title><rect x="1157.0" y="1187.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.0" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.08%)</title><rect x="1157.9" y="1235.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.9" y="1246.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.08%)</title><rect x="1157.9" y="1219.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.9" y="1230.0"></text>
</g>
<g>
<title>MemNode::optimize_memory_chain(Node*, TypePtr const*, Node*, PhaseGVN*) (1 samples, 0.08%)</title><rect x="1157.9" y="1203.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.9" y="1214.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (18 samples, 1.36%)</title><rect x="1158.8" y="1251.0" width="16.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.8" y="1262.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1158.8" y="1235.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.8" y="1246.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (16 samples, 1.21%)</title><rect x="1159.7" y="1235.0" width="14.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.7" y="1246.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1159.7" y="1219.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1162.7" y="1230.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1159.7" y="1203.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.7" y="1214.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1160.6" y="1219.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1163.6" y="1230.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1160.6" y="1203.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1163.6" y="1214.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1160.6" y="1187.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.6" y="1198.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1160.6" y="1171.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.6" y="1182.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (3 samples, 0.23%)</title><rect x="1161.5" y="1219.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.5" y="1230.0"></text>
</g>
<g>
<title>Node::destruct() (1 samples, 0.08%)</title><rect x="1164.1" y="1219.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.1" y="1230.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1165.0" y="1219.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.0" y="1230.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.08%)</title><rect x="1165.9" y="1219.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.9" y="1230.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (6 samples, 0.45%)</title><rect x="1166.8" y="1219.0" width="5.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.8" y="1230.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.08%)</title><rect x="1169.5" y="1203.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.5" y="1214.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1170.4" y="1203.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.4" y="1214.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.08%)</title><rect x="1171.3" y="1203.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.3" y="1214.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.08%)</title><rect x="1171.3" y="1187.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.3" y="1198.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1172.2" y="1219.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.2" y="1230.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.08%)</title><rect x="1172.2" y="1203.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.2" y="1214.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1173.1" y="1219.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.1" y="1230.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.08%)</title><rect x="1173.1" y="1203.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.1" y="1214.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1173.1" y="1187.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.1" y="1198.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1173.1" y="1171.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.1" y="1182.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1173.1" y="1155.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.1" y="1166.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1173.1" y="1139.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.1" y="1150.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1173.1" y="1123.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.1" y="1134.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1173.1" y="1107.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.1" y="1118.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1173.1" y="1091.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.1" y="1102.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1173.1" y="1075.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.1" y="1086.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1173.1" y="1059.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.1" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1173.1" y="1043.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.1" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1173.1" y="1027.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.1" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1173.1" y="1011.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.1" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1173.1" y="995.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.1" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1173.1" y="979.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.1" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1173.1" y="963.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.1" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1173.1" y="947.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.1" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1173.1" y="931.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.1" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1173.1" y="915.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.1" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1173.1" y="899.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.1" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1173.1" y="883.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.1" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1173.1" y="867.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.1" y="878.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1173.1" y="851.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.1" y="862.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1173.1" y="835.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.1" y="846.0"></text>
</g>
<g>
<title>ProjNode::hash() const (1 samples, 0.08%)</title><rect x="1173.9" y="1235.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.9" y="1246.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.15%)</title><rect x="1174.8" y="1251.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.8" y="1262.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.15%)</title><rect x="1174.8" y="1235.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.8" y="1246.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.15%)</title><rect x="1174.8" y="1219.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.8" y="1230.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1174.8" y="1203.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.8" y="1214.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1175.7" y="1203.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.7" y="1214.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.08%)</title><rect x="1175.7" y="1187.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.7" y="1198.0"></text>
</g>
<g>
<title>Node_List::push(Node*) (1 samples, 0.08%)</title><rect x="1175.7" y="1171.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.7" y="1182.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.68%)</title><rect x="1176.6" y="1267.0" width="8.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.6" y="1278.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.68%)</title><rect x="1176.6" y="1251.0" width="8.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.6" y="1262.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 0.68%)</title><rect x="1176.6" y="1235.0" width="8.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.6" y="1246.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 0.68%)</title><rect x="1176.6" y="1219.0" width="8.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.6" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 0.68%)</title><rect x="1176.6" y="1203.0" width="8.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.6" y="1214.0"></text>
</g>
<g>
<title>Parse::do_call() (9 samples, 0.68%)</title><rect x="1176.6" y="1187.0" width="8.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.6" y="1198.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.60%)</title><rect x="1176.6" y="1171.0" width="7.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.6" y="1182.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.60%)</title><rect x="1176.6" y="1155.0" width="7.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.6" y="1166.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.60%)</title><rect x="1176.6" y="1139.0" width="7.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.6" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.60%)</title><rect x="1176.6" y="1123.0" width="7.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.6" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.60%)</title><rect x="1176.6" y="1107.0" width="7.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.6" y="1118.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.60%)</title><rect x="1176.6" y="1091.0" width="7.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.6" y="1102.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1176.6" y="1075.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.6" y="1086.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1176.6" y="1059.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.6" y="1070.0"></text>
</g>
<g>
<title>pass_initial_checks(ciMethod*, int, ciMethod*) (1 samples, 0.08%)</title><rect x="1176.6" y="1043.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1179.6" y="1054.0"></text>
</g>
<g>
<title>ciMethod::should_exclude() (1 samples, 0.08%)</title><rect x="1176.6" y="1027.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.6" y="1038.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::ThreadInVMfromNative(JavaThread*) (1 samples, 0.08%)</title><rect x="1176.6" y="1011.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.6" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.45%)</title><rect x="1177.5" y="1075.0" width="5.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.5" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.45%)</title><rect x="1177.5" y="1059.0" width="5.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.5" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.45%)</title><rect x="1177.5" y="1043.0" width="5.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.5" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.45%)</title><rect x="1177.5" y="1027.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.5" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.45%)</title><rect x="1177.5" y="1011.0" width="5.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.5" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.45%)</title><rect x="1177.5" y="995.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.5" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.38%)</title><rect x="1177.5" y="979.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.5" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.38%)</title><rect x="1177.5" y="963.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.5" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.38%)</title><rect x="1177.5" y="947.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.5" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.38%)</title><rect x="1177.5" y="931.0" width="4.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.5" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.38%)</title><rect x="1177.5" y="915.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.5" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.30%)</title><rect x="1177.5" y="899.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.5" y="910.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1177.5" y="883.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.5" y="894.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1177.5" y="867.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.5" y="878.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1177.5" y="851.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.5" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1177.5" y="835.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.5" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1177.5" y="819.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.5" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1177.5" y="803.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.5" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1177.5" y="787.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.5" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1177.5" y="771.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.5" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1177.5" y="755.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.5" y="766.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.08%)</title><rect x="1177.5" y="739.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.5" y="750.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1177.5" y="723.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.5" y="734.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1177.5" y="707.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.5" y="718.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1177.5" y="691.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.5" y="702.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1177.5" y="675.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.5" y="686.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1177.5" y="659.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.5" y="670.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.08%)</title><rect x="1177.5" y="643.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.5" y="654.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="1177.5" y="627.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1180.5" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1178.4" y="883.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.4" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1178.4" y="867.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.4" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1178.4" y="851.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.4" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1178.4" y="835.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.4" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1178.4" y="819.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.4" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1178.4" y="803.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.4" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1178.4" y="787.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.4" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1178.4" y="771.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.4" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1178.4" y="755.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.4" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1178.4" y="739.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.4" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1178.4" y="723.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.4" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1178.4" y="707.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.4" y="718.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1178.4" y="691.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.4" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1178.4" y="675.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.4" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1178.4" y="659.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1178.4" y="643.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.4" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1178.4" y="627.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.4" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1178.4" y="611.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1178.4" y="595.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.4" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1178.4" y="579.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.4" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1178.4" y="563.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1178.4" y="547.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1178.4" y="531.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1178.4" y="515.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1178.4" y="499.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.4" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1178.4" y="483.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.4" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1178.4" y="467.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1178.4" y="451.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1178.4" y="435.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1178.4" y="419.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1178.4" y="403.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.4" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1178.4" y="387.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.4" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1178.4" y="371.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1178.4" y="355.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1178.4" y="339.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.4" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1178.4" y="323.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.4" y="334.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1178.4" y="307.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.4" y="318.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1178.4" y="291.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.4" y="302.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.08%)</title><rect x="1178.4" y="275.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.4" y="286.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.08%)</title><rect x="1178.4" y="259.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.4" y="270.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.3" y="787.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.3" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.3" y="771.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.3" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1179.3" y="755.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1179.3" y="739.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1179.3" y="723.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1179.3" y="707.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1179.3" y="691.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.3" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.3" y="675.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.3" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1179.3" y="659.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1179.3" y="643.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1179.3" y="627.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1179.3" y="611.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1179.3" y="595.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.3" y="606.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.3" y="579.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.3" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.3" y="563.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.3" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1179.3" y="547.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1179.3" y="531.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1179.3" y="515.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1179.3" y="499.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1179.3" y="483.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.3" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.3" y="467.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.3" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1179.3" y="451.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1179.3" y="435.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1179.3" y="419.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1179.3" y="403.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1179.3" y="387.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.3" y="398.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.3" y="371.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.3" y="382.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_string_equals() (1 samples, 0.08%)</title><rect x="1179.3" y="355.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.3" y="366.0"></text>
</g>
<g>
<title>GraphKit::load_String_value(Node*, Node*) (1 samples, 0.08%)</title><rect x="1179.3" y="339.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.3" y="350.0"></text>
</g>
<g>
<title>TypeAryPtr::cast_to_stable(bool, int) const (1 samples, 0.08%)</title><rect x="1179.3" y="323.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.3" y="334.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1179.3" y="307.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.3" y="318.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1179.3" y="291.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.3" y="302.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1180.2" y="883.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.2" y="894.0"></text>
</g>
<g>
<title>ciBytecodeStream::has_method_type() (1 samples, 0.08%)</title><rect x="1180.2" y="867.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.2" y="878.0"></text>
</g>
<g>
<title>ConstantPool::has_method_type_at_if_loaded(constantPoolHandle, int) (1 samples, 0.08%)</title><rect x="1180.2" y="851.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.2" y="862.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.08%)</title><rect x="1181.1" y="899.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.1" y="910.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.08%)</title><rect x="1181.1" y="883.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.1" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::uncommon_trap_Type() (1 samples, 0.08%)</title><rect x="1181.1" y="867.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.1" y="878.0"></text>
</g>
<g>
<title>TypeTuple::fields(unsigned int) (1 samples, 0.08%)</title><rect x="1181.1" y="851.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.1" y="862.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.0" y="979.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.0" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.0" y="963.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.0" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.0" y="947.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.0" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.0" y="931.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.0" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.0" y="915.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.0" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.0" y="899.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.0" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.0" y="883.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.0" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.0" y="867.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.0" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.0" y="851.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.0" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.0" y="835.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.0" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.0" y="819.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.0" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.0" y="803.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.0" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.0" y="787.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.0" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.0" y="771.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.0" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.0" y="755.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.0" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.0" y="739.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.0" y="723.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.0" y="707.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.0" y="691.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.0" y="702.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.0" y="675.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.0" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.0" y="659.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.0" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.0" y="643.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.0" y="627.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.0" y="611.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.0" y="595.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.0" y="579.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.0" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.0" y="563.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.0" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.0" y="547.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.0" y="531.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.0" y="515.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.0" y="499.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.0" y="483.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.0" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.0" y="467.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.0" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.0" y="451.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.0" y="435.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.0" y="419.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.0" y="403.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.0" y="387.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.0" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.0" y="371.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.0" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.0" y="355.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.0" y="339.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.0" y="323.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.0" y="307.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.0" y="291.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.0" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.0" y="275.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.0" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.0" y="259.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.0" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.0" y="243.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.0" y="227.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.0" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.0" y="211.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.0" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.0" y="195.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.0" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.0" y="179.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.0" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.0" y="163.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.0" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.0" y="147.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.0" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.0" y="131.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.0" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.0" y="115.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.0" y="126.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1182.0" y="99.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.0" y="110.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1182.0" y="83.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.0" y="94.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.08%)</title><rect x="1182.0" y="67.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.0" y="78.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.08%)</title><rect x="1182.0" y="51.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.0" y="62.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.08%)</title><rect x="1182.0" y="35.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.0" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.9" y="1075.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.9" y="1086.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.9" y="1059.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.9" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.9" y="1043.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.9" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.9" y="1027.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.9" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.9" y="1011.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.9" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.9" y="995.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.9" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.9" y="979.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.9" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.9" y="963.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.9" y="974.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1182.9" y="947.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.9" y="958.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1182.9" y="931.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.9" y="942.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1182.9" y="915.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.9" y="926.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1182.9" y="899.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.9" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1182.9" y="883.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.9" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1182.9" y="867.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.9" y="878.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.8" y="1171.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.8" y="1182.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.8" y="1155.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.8" y="1166.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1183.8" y="1139.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.8" y="1150.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1183.8" y="1123.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.8" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1183.8" y="1107.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.8" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1183.8" y="1091.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.8" y="1102.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1183.8" y="1075.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.8" y="1086.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1183.8" y="1059.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.8" y="1070.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1183.8" y="1043.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.8" y="1054.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1183.8" y="1027.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.8" y="1038.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1183.8" y="1011.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.8" y="1022.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1183.8" y="995.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.8" y="1006.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1183.8" y="979.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.8" y="990.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.08%)</title><rect x="1183.8" y="963.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.8" y="974.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields() (1 samples, 0.08%)</title><rect x="1183.8" y="947.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.8" y="958.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields_impl(GrowableArray&lt;ciField*&gt;*) (1 samples, 0.08%)</title><rect x="1183.8" y="931.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.8" y="942.0"></text>
</g>
<g>
<title>ciField::ciField(fieldDescriptor*) (1 samples, 0.08%)</title><rect x="1183.8" y="915.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.8" y="926.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.08%)</title><rect x="1183.8" y="899.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.8" y="910.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (2 samples, 0.15%)</title><rect x="1184.6" y="1267.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.6" y="1278.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.08%)</title><rect x="1184.6" y="1251.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.6" y="1262.0"></text>
</g>
<g>
<title>Compile::update_dead_node_list(Unique_Node_List&amp;) (1 samples, 0.08%)</title><rect x="1185.5" y="1251.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.5" y="1262.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.08%)</title><rect x="1186.4" y="1299.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.4" y="1310.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.08%)</title><rect x="1186.4" y="1283.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.4" y="1294.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.08%)</title><rect x="1186.4" y="1267.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.4" y="1278.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.08%)</title><rect x="1186.4" y="1251.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.4" y="1262.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.08%)</title><rect x="1186.4" y="1235.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.4" y="1246.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.08%)</title><rect x="1186.4" y="1219.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.4" y="1230.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.08%)</title><rect x="1186.4" y="1203.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.4" y="1214.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(LIR_OpList*, IntervalWalker*) (1 samples, 0.08%)</title><rect x="1186.4" y="1187.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.4" y="1198.0"></text>
</g>
<g>
<title>LinearScan::compute_debug_info_for_scope(int, IRScope*, ValueStack*, ValueStack*) (1 samples, 0.08%)</title><rect x="1186.4" y="1171.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.4" y="1182.0"></text>
</g>
<g>
<title>LinearScan::compute_debug_info_for_scope(int, IRScope*, ValueStack*, ValueStack*) (1 samples, 0.08%)</title><rect x="1186.4" y="1155.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.4" y="1166.0"></text>
</g>
<g>
<title>LinearScan::append_scope_value(int, Instruction*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.08%)</title><rect x="1186.4" y="1139.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.4" y="1150.0"></text>
</g>
<g>
<title>LinearScan::color_lir_opr(LIR_OprDesc*, int, LIR_OpVisitState::OprMode) (1 samples, 0.08%)</title><rect x="1186.4" y="1123.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.4" y="1134.0"></text>
</g>
<g>
<title>LinearScan::split_child_at_op_id(Interval*, int, LIR_OpVisitState::OprMode) (1 samples, 0.08%)</title><rect x="1186.4" y="1107.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.4" y="1118.0"></text>
</g>
<g>
<title>ciEnv::~ciEnv() (1 samples, 0.08%)</title><rect x="1187.3" y="1299.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.3" y="1310.0"></text>
</g>
<g>
<title>Symbol::decrement_refcount() (1 samples, 0.08%)</title><rect x="1187.3" y="1283.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.3" y="1294.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.15%)</title><rect x="1188.2" y="1363.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.2" y="1374.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.15%)</title><rect x="1188.2" y="1347.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.2" y="1358.0"></text>
</g>
<g>
<title>SafepointSynchronize::end() (1 samples, 0.08%)</title><rect x="1188.2" y="1331.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.2" y="1342.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.08%)</title><rect x="1189.1" y="1331.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1192.1" y="1342.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.08%)</title><rect x="1189.1" y="1315.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1192.1" y="1326.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.08%)</title><rect x="1189.1" y="1299.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1192.1" y="1310.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.08%)</title><rect x="1189.1" y="1283.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1192.1" y="1294.0"></text>
</g>
<g>
<title>G1CollectedHeap::register_humongous_regions_with_in_cset_fast_test() (1 samples, 0.08%)</title><rect x="1189.1" y="1267.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1192.1" y="1278.0"></text>
</g>
<g>
<title>HeapRegionManager::iterate(HeapRegionClosure*) const (1 samples, 0.08%)</title><rect x="1189.1" y="1251.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.1" y="1262.0"></text>
</g>
<g>
<title>RegisterHumongousWithInCSetFastTestClosure::doHeapRegion(HeapRegion*) (1 samples, 0.08%)</title><rect x="1189.1" y="1235.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.1" y="1246.0"></text>
</g>
</g>
</svg>
