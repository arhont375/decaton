<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1254" onload="init(evt)" viewBox="0 0 1200 1254" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1237"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1237"> </text>
<g id="frames">
<g>
<title>all (1,150 samples, 100.00%)</title><rect x="10.0" y="1203.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1214.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (267 samples, 23.22%)</title><rect x="10.0" y="1187.0" width="274.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1198.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (267 samples, 23.22%)</title><rect x="10.0" y="1171.0" width="274.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1182.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (6 samples, 0.52%)</title><rect x="10.0" y="1155.0" width="6.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (6 samples, 0.52%)</title><rect x="10.0" y="1139.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>java/util/Collection.stream (2 samples, 0.17%)</title><rect x="11.0" y="1123.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="14.0" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (2 samples, 0.17%)</title><rect x="11.0" y="1107.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.0" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (2 samples, 0.17%)</title><rect x="11.0" y="1091.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.0" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.26%)</title><rect x="13.1" y="1123.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.1" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.26%)</title><rect x="13.1" y="1107.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.1" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.26%)</title><rect x="13.1" y="1091.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.1" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.26%)</title><rect x="13.1" y="1075.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.1" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.26%)</title><rect x="13.1" y="1059.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.1" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (2 samples, 0.17%)</title><rect x="13.1" y="1043.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.1" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.17%)</title><rect x="13.1" y="1027.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.1" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.17%)</title><rect x="13.1" y="1011.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.1" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$261/674248869.test (1 samples, 0.09%)</title><rect x="13.1" y="995.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.1" y="1006.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="14.1" y="995.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="17.1" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.09%)</title><rect x="15.1" y="1043.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.1" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.09%)</title><rect x="15.1" y="1027.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.1" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.09%)</title><rect x="15.1" y="1011.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="18.1" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.09%)</title><rect x="16.2" y="1155.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="19.2" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.09%)</title><rect x="16.2" y="1139.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.2" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (3 samples, 0.26%)</title><rect x="17.2" y="1155.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="20.2" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (3 samples, 0.26%)</title><rect x="17.2" y="1139.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.2" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (3 samples, 0.26%)</title><rect x="17.2" y="1123.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.2" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$260/1043839528.accept (2 samples, 0.17%)</title><rect x="18.2" y="1107.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.2" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (2 samples, 0.17%)</title><rect x="18.2" y="1091.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.2" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.17%)</title><rect x="18.2" y="1075.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.2" y="1086.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.09%)</title><rect x="19.2" y="1059.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="22.2" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (2 samples, 0.17%)</title><rect x="20.3" y="1155.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.3" y="1166.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.09%)</title><rect x="21.3" y="1139.0" width="1.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="24.3" y="1150.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (196 samples, 17.04%)</title><rect x="22.3" y="1155.0" width="201.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.3" y="1166.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$259/129894087.accept (186 samples, 16.17%)</title><rect x="23.3" y="1139.0" width="190.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="26.3" y="1150.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (186 samples, 16.17%)</title><rect x="23.3" y="1123.0" width="190.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="26.3" y="1134.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="23.3" y="1107.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="26.3" y="1118.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="23.3" y="1091.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="26.3" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="23.3" y="1075.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="26.3" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="23.3" y="1059.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="26.3" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="23.3" y="1043.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="26.3" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="23.3" y="1027.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="26.3" y="1038.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="23.3" y="1011.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="26.3" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.09%)</title><rect x="23.3" y="995.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="26.3" y="1006.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.09%)</title><rect x="23.3" y="979.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="26.3" y="990.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.09%)</title><rect x="23.3" y="963.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="26.3" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (141 samples, 12.26%)</title><rect x="24.4" y="1107.0" width="144.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="27.4" y="1118.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (141 samples, 12.26%)</title><rect x="24.4" y="1091.0" width="144.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="27.4" y="1102.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (141 samples, 12.26%)</title><rect x="24.4" y="1075.0" width="144.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="27.4" y="1086.0">com/linecorp/decat..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (141 samples, 12.26%)</title><rect x="24.4" y="1059.0" width="144.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="27.4" y="1070.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (141 samples, 12.26%)</title><rect x="24.4" y="1043.0" width="144.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="27.4" y="1054.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (140 samples, 12.17%)</title><rect x="25.4" y="1027.0" width="143.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.4" y="1038.0">java/util/concurre..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.09%)</title><rect x="68.5" y="1011.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="71.5" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (89 samples, 7.74%)</title><rect x="69.5" y="1011.0" width="91.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="72.5" y="1022.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (21 samples, 1.83%)</title><rect x="69.5" y="995.0" width="21.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="72.5" y="1006.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (21 samples, 1.83%)</title><rect x="69.5" y="979.0" width="21.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="72.5" y="990.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (21 samples, 1.83%)</title><rect x="69.5" y="963.0" width="21.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="72.5" y="974.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (8 samples, 0.70%)</title><rect x="91.1" y="995.0" width="8.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="94.1" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (8 samples, 0.70%)</title><rect x="91.1" y="979.0" width="8.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="94.1" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.09%)</title><rect x="94.1" y="963.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="97.1" y="974.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.09%)</title><rect x="94.1" y="947.0" width="1.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="97.1" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (4 samples, 0.35%)</title><rect x="95.2" y="963.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="98.2" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (60 samples, 5.22%)</title><rect x="99.3" y="995.0" width="61.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="102.3" y="1006.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (60 samples, 5.22%)</title><rect x="99.3" y="979.0" width="61.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="102.3" y="990.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (58 samples, 5.04%)</title><rect x="99.3" y="963.0" width="59.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="102.3" y="974.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (58 samples, 5.04%)</title><rect x="99.3" y="947.0" width="59.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="102.3" y="958.0">java/u..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (58 samples, 5.04%)</title><rect x="99.3" y="931.0" width="59.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="102.3" y="942.0">sun/mi..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.09%)</title><rect x="100.3" y="915.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="103.3" y="926.0"></text>
</g>
<g>
<title>Unsafe_Unpark (50 samples, 4.35%)</title><rect x="101.3" y="915.0" width="51.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="104.3" y="926.0">Unsaf..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="101.3" y="899.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="104.3" y="910.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.17%)</title><rect x="102.3" y="899.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="105.3" y="910.0"></text>
</g>
<g>
<title>__pthread_cond_signal (34 samples, 2.96%)</title><rect x="104.4" y="899.0" width="34.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="107.4" y="910.0">__..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.09%)</title><rect x="139.3" y="899.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="142.3" y="910.0"></text>
</g>
<g>
<title>pthread_mutex_lock (12 samples, 1.04%)</title><rect x="140.3" y="899.0" width="12.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="143.3" y="910.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 0.43%)</title><rect x="152.6" y="915.0" width="5.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="155.6" y="926.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.09%)</title><rect x="157.8" y="915.0" width="1.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="160.8" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.17%)</title><rect x="158.8" y="963.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="161.8" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.43%)</title><rect x="160.8" y="1011.0" width="5.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="163.8" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (5 samples, 0.43%)</title><rect x="160.8" y="995.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="163.8" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.43%)</title><rect x="160.8" y="979.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="163.8" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="164.9" y="963.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="167.9" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.09%)</title><rect x="166.0" y="1011.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="169.0" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.09%)</title><rect x="166.0" y="995.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="169.0" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="166.0" y="979.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="169.0" y="990.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.17%)</title><rect x="167.0" y="1011.0" width="2.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="170.0" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (2 samples, 0.17%)</title><rect x="169.0" y="1107.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="172.0" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 0.17%)</title><rect x="169.0" y="1091.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="172.0" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (5 samples, 0.43%)</title><rect x="171.1" y="1107.0" width="5.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="174.1" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.43%)</title><rect x="171.1" y="1091.0" width="5.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="174.1" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.43%)</title><rect x="171.1" y="1075.0" width="5.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="174.1" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/TaskRequest.&lt;init&gt; (37 samples, 3.22%)</title><rect x="176.2" y="1107.0" width="38.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="179.2" y="1118.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (36 samples, 3.13%)</title><rect x="177.3" y="1091.0" width="36.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="180.3" y="1102.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (11 samples, 0.96%)</title><rect x="199.8" y="1075.0" width="11.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="202.8" y="1086.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (10 samples, 0.87%)</title><rect x="199.8" y="1059.0" width="10.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="202.8" y="1070.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (10 samples, 0.87%)</title><rect x="199.8" y="1043.0" width="10.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="202.8" y="1054.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (10 samples, 0.87%)</title><rect x="199.8" y="1027.0" width="10.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="202.8" y="1038.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.17%)</title><rect x="208.0" y="1011.0" width="2.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="211.0" y="1022.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.09%)</title><rect x="210.1" y="1059.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="213.1" y="1070.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.09%)</title><rect x="211.1" y="1075.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="214.1" y="1086.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.17%)</title><rect x="212.1" y="1075.0" width="2.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="215.1" y="1086.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="214.2" y="1139.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="217.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (7 samples, 0.61%)</title><rect x="215.2" y="1139.0" width="7.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="218.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (7 samples, 0.61%)</title><rect x="215.2" y="1123.0" width="7.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="218.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.61%)</title><rect x="215.2" y="1107.0" width="7.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="218.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.61%)</title><rect x="215.2" y="1091.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="218.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.09%)</title><rect x="222.4" y="1139.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="225.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.09%)</title><rect x="222.4" y="1123.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="225.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.09%)</title><rect x="222.4" y="1107.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="225.4" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.09%)</title><rect x="222.4" y="1091.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="225.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.09%)</title><rect x="222.4" y="1075.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="225.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (59 samples, 5.13%)</title><rect x="223.4" y="1155.0" width="60.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="226.4" y="1166.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (58 samples, 5.04%)</title><rect x="224.5" y="1139.0" width="59.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="227.5" y="1150.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (31 samples, 2.70%)</title><rect x="224.5" y="1123.0" width="31.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="227.5" y="1134.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.09%)</title><rect x="224.5" y="1107.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="227.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.09%)</title><rect x="224.5" y="1091.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="227.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (1 samples, 0.09%)</title><rect x="224.5" y="1075.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="227.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (30 samples, 2.61%)</title><rect x="225.5" y="1107.0" width="30.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="228.5" y="1118.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (30 samples, 2.61%)</title><rect x="225.5" y="1091.0" width="30.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="228.5" y="1102.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (28 samples, 2.43%)</title><rect x="225.5" y="1075.0" width="28.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="228.5" y="1086.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (28 samples, 2.43%)</title><rect x="225.5" y="1059.0" width="28.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="228.5" y="1070.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (14 samples, 1.22%)</title><rect x="227.5" y="1043.0" width="14.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="230.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.09%)</title><rect x="234.7" y="1027.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="237.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.record (1 samples, 0.09%)</title><rect x="234.7" y="1011.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="237.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (6 samples, 0.52%)</title><rect x="235.7" y="1027.0" width="6.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="238.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (6 samples, 0.52%)</title><rect x="235.7" y="1011.0" width="6.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="238.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (6 samples, 0.52%)</title><rect x="235.7" y="995.0" width="6.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="238.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (6 samples, 0.52%)</title><rect x="235.7" y="979.0" width="6.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="238.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (6 samples, 0.52%)</title><rect x="235.7" y="963.0" width="6.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="238.7" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (6 samples, 0.52%)</title><rect x="235.7" y="947.0" width="6.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="238.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (6 samples, 0.52%)</title><rect x="235.7" y="931.0" width="6.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="238.7" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (12 samples, 1.04%)</title><rect x="241.9" y="1043.0" width="12.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="244.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.09%)</title><rect x="241.9" y="1027.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="244.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (11 samples, 0.96%)</title><rect x="242.9" y="1027.0" width="11.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="245.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (7 samples, 0.61%)</title><rect x="242.9" y="1011.0" width="7.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="245.9" y="1022.0"></text>
</g>
<g>
<title>java/util/Optional.of (7 samples, 0.61%)</title><rect x="242.9" y="995.0" width="7.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="245.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (4 samples, 0.35%)</title><rect x="250.1" y="1011.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="253.1" y="1022.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (4 samples, 0.35%)</title><rect x="250.1" y="995.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="253.1" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (2 samples, 0.17%)</title><rect x="254.2" y="1075.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="257.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (2 samples, 0.17%)</title><rect x="254.2" y="1059.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="257.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.09%)</title><rect x="254.2" y="1043.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="257.2" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.09%)</title><rect x="254.2" y="1027.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="257.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="255.2" y="1043.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="258.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="255.2" y="1027.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="258.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="255.2" y="1011.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="258.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="255.2" y="995.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="258.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.09%)</title><rect x="255.2" y="979.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="258.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Min.update (1 samples, 0.09%)</title><rect x="255.2" y="963.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="258.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (15 samples, 1.30%)</title><rect x="256.3" y="1123.0" width="15.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="259.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (13 samples, 1.13%)</title><rect x="256.3" y="1107.0" width="13.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="259.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (12 samples, 1.04%)</title><rect x="256.3" y="1091.0" width="12.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="259.3" y="1102.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 0.26%)</title><rect x="258.3" y="1075.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="261.3" y="1086.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.09%)</title><rect x="258.3" y="1059.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="261.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$227/1888122721.accept (2 samples, 0.17%)</title><rect x="259.3" y="1059.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="262.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (2 samples, 0.17%)</title><rect x="259.3" y="1043.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="262.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (2 samples, 0.17%)</title><rect x="259.3" y="1027.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="262.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.09%)</title><rect x="260.4" y="1011.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="263.4" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="260.4" y="995.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="263.4" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="260.4" y="979.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="263.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.09%)</title><rect x="261.4" y="1075.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="264.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.09%)</title><rect x="261.4" y="1059.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="264.4" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="261.4" y="1043.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="264.4" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="261.4" y="1027.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="264.4" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="261.4" y="1011.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="264.4" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="261.4" y="995.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="264.4" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="261.4" y="979.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="264.4" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.09%)</title><rect x="261.4" y="963.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="264.4" y="974.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$238/1187558452.get (1 samples, 0.09%)</title><rect x="261.4" y="947.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="264.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (3 samples, 0.26%)</title><rect x="262.4" y="1075.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="265.4" y="1086.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (2 samples, 0.17%)</title><rect x="263.4" y="1059.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="266.4" y="1070.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.09%)</title><rect x="263.4" y="1043.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="266.4" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.next (1 samples, 0.09%)</title><rect x="263.4" y="1027.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="266.4" y="1038.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (1 samples, 0.09%)</title><rect x="263.4" y="1011.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="266.4" y="1022.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.09%)</title><rect x="263.4" y="995.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="266.4" y="1006.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeySet.size (1 samples, 0.09%)</title><rect x="264.5" y="1043.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="267.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (3 samples, 0.26%)</title><rect x="265.5" y="1075.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="268.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (3 samples, 0.26%)</title><rect x="265.5" y="1059.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="268.5" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.17%)</title><rect x="265.5" y="1043.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="268.5" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.17%)</title><rect x="265.5" y="1027.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="268.5" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.09%)</title><rect x="265.5" y="1011.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="268.5" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.09%)</title><rect x="265.5" y="995.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="268.5" y="1006.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.09%)</title><rect x="265.5" y="979.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="268.5" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.09%)</title><rect x="265.5" y="963.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="268.5" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="265.5" y="947.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="268.5" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="266.5" y="1011.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="269.5" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="266.5" y="995.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="269.5" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="266.5" y="979.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="269.5" y="990.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="266.5" y="963.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="269.5" y="974.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.09%)</title><rect x="266.5" y="947.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="269.5" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="266.5" y="931.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="269.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates$$Lambda$231/1545672949.apply (1 samples, 0.09%)</title><rect x="266.5" y="915.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="269.5" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.09%)</title><rect x="267.5" y="1043.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="270.5" y="1054.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.09%)</title><rect x="267.5" y="1027.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="270.5" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.09%)</title><rect x="267.5" y="1011.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="270.5" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.09%)</title><rect x="267.5" y="995.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="270.5" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.09%)</title><rect x="268.6" y="1091.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="271.6" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.09%)</title><rect x="268.6" y="1075.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="271.6" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="268.6" y="1059.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="271.6" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.09%)</title><rect x="268.6" y="1043.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="271.6" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.09%)</title><rect x="268.6" y="1027.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="271.6" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$$Lambda$47/317071334.get (1 samples, 0.09%)</title><rect x="268.6" y="1011.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="271.6" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps.lambda$makeRef$237 (1 samples, 0.09%)</title><rect x="268.6" y="995.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="271.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (2 samples, 0.17%)</title><rect x="269.6" y="1107.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="272.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (2 samples, 0.17%)</title><rect x="269.6" y="1091.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="272.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (2 samples, 0.17%)</title><rect x="269.6" y="1075.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="272.6" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.09%)</title><rect x="270.6" y="1059.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="273.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (1 samples, 0.09%)</title><rect x="270.6" y="1043.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="273.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (1 samples, 0.09%)</title><rect x="270.6" y="1027.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="273.6" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="270.6" y="1011.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="273.6" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="270.6" y="995.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="273.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.09%)</title><rect x="271.7" y="1123.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="274.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (8 samples, 0.70%)</title><rect x="272.7" y="1123.0" width="8.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="275.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (7 samples, 0.61%)</title><rect x="272.7" y="1107.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="275.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (7 samples, 0.61%)</title><rect x="272.7" y="1091.0" width="7.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="275.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="272.7" y="1075.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="275.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="272.7" y="1059.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="275.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.09%)</title><rect x="273.7" y="1075.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="276.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.09%)</title><rect x="273.7" y="1059.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="276.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesReceived (1 samples, 0.09%)</title><rect x="273.7" y="1043.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="276.7" y="1054.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.09%)</title><rect x="273.7" y="1027.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="276.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (5 samples, 0.43%)</title><rect x="274.7" y="1075.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="277.7" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (2 samples, 0.17%)</title><rect x="274.7" y="1059.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="277.7" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (2 samples, 0.17%)</title><rect x="274.7" y="1043.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="277.7" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.17%)</title><rect x="274.7" y="1027.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="277.7" y="1038.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.17%)</title><rect x="274.7" y="1011.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="277.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.09%)</title><rect x="276.8" y="1059.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="279.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.09%)</title><rect x="276.8" y="1043.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="279.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.09%)</title><rect x="276.8" y="1027.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="279.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.17%)</title><rect x="277.8" y="1059.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="280.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.09%)</title><rect x="277.8" y="1043.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="280.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.09%)</title><rect x="277.8" y="1027.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="280.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.09%)</title><rect x="277.8" y="1011.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="280.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.09%)</title><rect x="277.8" y="995.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="280.8" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.09%)</title><rect x="277.8" y="979.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="280.8" y="990.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="277.8" y="963.0" width="1.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="280.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.hasStagedReceive (1 samples, 0.09%)</title><rect x="278.8" y="1043.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="281.8" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.09%)</title><rect x="278.8" y="1027.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="281.8" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="278.8" y="1011.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="281.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.09%)</title><rect x="279.9" y="1107.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="282.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.09%)</title><rect x="279.9" y="1091.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="282.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="279.9" y="1075.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="282.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="279.9" y="1059.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="282.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.09%)</title><rect x="279.9" y="1043.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="282.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.09%)</title><rect x="279.9" y="1027.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="282.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.09%)</title><rect x="279.9" y="1011.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="282.9" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (1 samples, 0.09%)</title><rect x="279.9" y="995.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="282.9" y="1006.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.hasNext (1 samples, 0.09%)</title><rect x="279.9" y="979.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="282.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (3 samples, 0.26%)</title><rect x="280.9" y="1123.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="283.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (3 samples, 0.26%)</title><rect x="280.9" y="1107.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="283.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 0.17%)</title><rect x="281.9" y="1091.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="284.9" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.next (1 samples, 0.09%)</title><rect x="281.9" y="1075.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="284.9" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.advance (1 samples, 0.09%)</title><rect x="281.9" y="1059.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="284.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.09%)</title><rect x="282.9" y="1075.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="285.9" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="282.9" y="1059.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="285.9" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="282.9" y="1043.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="285.9" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="282.9" y="1027.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="285.9" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="282.9" y="1011.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="285.9" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="282.9" y="995.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="285.9" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.09%)</title><rect x="282.9" y="979.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="285.9" y="990.0"></text>
</g>
<g>
<title>java/lang/Thread.run (768 samples, 66.78%)</title><rect x="284.0" y="1187.0" width="788.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="287.0" y="1198.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (768 samples, 66.78%)</title><rect x="284.0" y="1171.0" width="788.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="287.0" y="1182.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (768 samples, 66.78%)</title><rect x="284.0" y="1155.0" width="788.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="287.0" y="1166.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$279/1166843972.run (524 samples, 45.57%)</title><rect x="290.1" y="1139.0" width="537.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="293.1" y="1150.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$279/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$66 (524 samples, 45.57%)</title><rect x="290.1" y="1123.0" width="537.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="293.1" y="1134.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTa..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (524 samples, 45.57%)</title><rect x="290.1" y="1107.0" width="537.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="293.1" y="1118.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (518 samples, 45.04%)</title><rect x="290.1" y="1091.0" width="531.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="293.1" y="1102.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleT..</text>
</g>
<g>
<title>[vdso] (2 samples, 0.17%)</title><rect x="311.7" y="1075.0" width="2.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="314.7" y="1086.0"></text>
</g>
<g>
<title>__clock_gettime (12 samples, 1.04%)</title><rect x="313.7" y="1075.0" width="12.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="316.7" y="1086.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.78%)</title><rect x="316.8" y="1059.0" width="9.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="319.8" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (156 samples, 13.57%)</title><rect x="326.0" y="1075.0" width="160.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="329.0" y="1086.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (154 samples, 13.39%)</title><rect x="328.1" y="1059.0" width="158.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="331.1" y="1070.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (154 samples, 13.39%)</title><rect x="328.1" y="1043.0" width="158.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="331.1" y="1054.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (154 samples, 13.39%)</title><rect x="328.1" y="1027.0" width="158.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="331.1" y="1038.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (154 samples, 13.39%)</title><rect x="328.1" y="1011.0" width="158.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="331.1" y="1022.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (154 samples, 13.39%)</title><rect x="328.1" y="995.0" width="158.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="331.1" y="1006.0">com/fasterxml/jackso..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="328.1" y="979.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="331.1" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="328.1" y="963.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="331.1" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="328.1" y="947.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="331.1" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="328.1" y="931.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="331.1" y="942.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.09%)</title><rect x="328.1" y="915.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="331.1" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (50 samples, 4.35%)</title><rect x="329.1" y="979.0" width="51.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="332.1" y="990.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (13 samples, 1.13%)</title><rect x="329.1" y="963.0" width="13.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="332.1" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (13 samples, 1.13%)</title><rect x="329.1" y="947.0" width="13.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="332.1" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.17%)</title><rect x="340.4" y="931.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="343.4" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.17%)</title><rect x="340.4" y="915.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="343.4" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.17%)</title><rect x="340.4" y="899.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="343.4" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.17%)</title><rect x="340.4" y="883.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="343.4" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.17%)</title><rect x="340.4" y="867.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="343.4" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (37 samples, 3.22%)</title><rect x="342.5" y="963.0" width="37.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="345.5" y="974.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (37 samples, 3.22%)</title><rect x="342.5" y="947.0" width="37.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="345.5" y="958.0">com..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="342.5" y="931.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="345.5" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="342.5" y="915.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="345.5" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="342.5" y="899.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="345.5" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (11 samples, 0.96%)</title><rect x="343.5" y="931.0" width="11.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="346.5" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (11 samples, 0.96%)</title><rect x="343.5" y="915.0" width="11.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="346.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (3 samples, 0.26%)</title><rect x="350.7" y="899.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="353.7" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.09%)</title><rect x="353.7" y="899.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="356.7" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (16 samples, 1.39%)</title><rect x="354.8" y="931.0" width="16.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="357.8" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (16 samples, 1.39%)</title><rect x="354.8" y="915.0" width="16.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="357.8" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (3 samples, 0.26%)</title><rect x="360.9" y="899.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="363.9" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (5 samples, 0.43%)</title><rect x="364.0" y="899.0" width="5.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="367.0" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (2 samples, 0.17%)</title><rect x="369.1" y="899.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="372.1" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="370.2" y="883.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="373.2" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="370.2" y="867.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="373.2" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (9 samples, 0.78%)</title><rect x="371.2" y="931.0" width="9.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="374.2" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (5 samples, 0.43%)</title><rect x="371.2" y="915.0" width="5.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="374.2" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.getMask (2 samples, 0.17%)</title><rect x="374.3" y="899.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="377.3" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (4 samples, 0.35%)</title><rect x="376.3" y="915.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="379.3" y="926.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.09%)</title><rect x="379.4" y="899.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="382.4" y="910.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (1 samples, 0.09%)</title><rect x="379.4" y="883.0" width="1.0" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="382.4" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (91 samples, 7.91%)</title><rect x="380.4" y="979.0" width="93.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="383.4" y="990.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (4 samples, 0.35%)</title><rect x="380.4" y="963.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="383.4" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (4 samples, 0.35%)</title><rect x="380.4" y="947.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="383.4" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (4 samples, 0.35%)</title><rect x="380.4" y="931.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="383.4" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (4 samples, 0.35%)</title><rect x="380.4" y="915.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="383.4" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (1 samples, 0.09%)</title><rect x="381.4" y="899.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="384.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (1 samples, 0.09%)</title><rect x="381.4" y="883.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="384.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.checkedByteOffset (1 samples, 0.09%)</title><rect x="381.4" y="867.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="384.4" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.resetWithEmpty (2 samples, 0.17%)</title><rect x="382.5" y="899.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="385.5" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (3 samples, 0.26%)</title><rect x="384.5" y="963.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="387.5" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.26%)</title><rect x="384.5" y="947.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="387.5" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.09%)</title><rect x="386.6" y="931.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="389.6" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (11 samples, 0.96%)</title><rect x="387.6" y="963.0" width="11.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="390.6" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (7 samples, 0.61%)</title><rect x="391.7" y="947.0" width="7.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="394.7" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (5 samples, 0.43%)</title><rect x="393.8" y="931.0" width="5.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="396.8" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (4 samples, 0.35%)</title><rect x="394.8" y="915.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="397.8" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (3 samples, 0.26%)</title><rect x="398.9" y="963.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="401.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 0.26%)</title><rect x="398.9" y="947.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="401.9" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (3 samples, 0.26%)</title><rect x="398.9" y="931.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="401.9" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (3 samples, 0.26%)</title><rect x="398.9" y="915.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="401.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.09%)</title><rect x="398.9" y="899.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="401.9" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (2 samples, 0.17%)</title><rect x="399.9" y="899.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="402.9" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (70 samples, 6.09%)</title><rect x="402.0" y="963.0" width="71.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="405.0" y="974.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (10 samples, 0.87%)</title><rect x="403.0" y="947.0" width="10.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="406.0" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.17%)</title><rect x="404.0" y="931.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="407.0" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.17%)</title><rect x="404.0" y="915.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="407.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.17%)</title><rect x="404.0" y="899.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="407.0" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (6 samples, 0.52%)</title><rect x="406.1" y="931.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="409.1" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.09%)</title><rect x="412.2" y="931.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="415.2" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.09%)</title><rect x="412.2" y="915.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="415.2" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (59 samples, 5.13%)</title><rect x="413.3" y="947.0" width="60.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="416.3" y="958.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (59 samples, 5.13%)</title><rect x="413.3" y="931.0" width="60.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="416.3" y="942.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (59 samples, 5.13%)</title><rect x="413.3" y="915.0" width="60.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="416.3" y="926.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (21 samples, 1.83%)</title><rect x="422.5" y="899.0" width="21.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="425.5" y="910.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (14 samples, 1.22%)</title><rect x="428.6" y="883.0" width="14.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="431.6" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (14 samples, 1.22%)</title><rect x="428.6" y="867.0" width="14.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="431.6" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (14 samples, 1.22%)</title><rect x="428.6" y="851.0" width="14.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="431.6" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (10 samples, 0.87%)</title><rect x="432.7" y="835.0" width="10.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="435.7" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (10 samples, 0.87%)</title><rect x="432.7" y="819.0" width="10.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="435.7" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (5 samples, 0.43%)</title><rect x="437.9" y="803.0" width="5.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="440.9" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (5 samples, 0.43%)</title><rect x="437.9" y="787.0" width="5.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="440.9" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.09%)</title><rect x="443.0" y="883.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="446.0" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.09%)</title><rect x="443.0" y="867.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="446.0" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (15 samples, 1.30%)</title><rect x="444.0" y="899.0" width="15.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="447.0" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (13 samples, 1.13%)</title><rect x="446.1" y="883.0" width="13.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="449.1" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (13 samples, 1.13%)</title><rect x="446.1" y="867.0" width="13.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="449.1" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (13 samples, 1.13%)</title><rect x="446.1" y="851.0" width="13.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="449.1" y="862.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (13 samples, 1.13%)</title><rect x="446.1" y="835.0" width="13.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="449.1" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.09%)</title><rect x="459.4" y="899.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="462.4" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (7 samples, 0.61%)</title><rect x="460.5" y="899.0" width="7.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="463.5" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (7 samples, 0.61%)</title><rect x="460.5" y="883.0" width="7.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="463.5" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (7 samples, 0.61%)</title><rect x="460.5" y="867.0" width="7.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="463.5" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (7 samples, 0.61%)</title><rect x="460.5" y="851.0" width="7.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="463.5" y="862.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (7 samples, 0.61%)</title><rect x="460.5" y="835.0" width="7.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="463.5" y="846.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (7 samples, 0.61%)</title><rect x="460.5" y="819.0" width="7.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="463.5" y="830.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (7 samples, 0.61%)</title><rect x="460.5" y="803.0" width="7.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="463.5" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (6 samples, 0.52%)</title><rect x="467.6" y="899.0" width="6.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="470.6" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.52%)</title><rect x="467.6" y="883.0" width="6.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="470.6" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.52%)</title><rect x="467.6" y="867.0" width="6.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="470.6" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.17%)</title><rect x="471.7" y="851.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="474.7" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (12 samples, 1.04%)</title><rect x="473.8" y="979.0" width="12.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="476.8" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (12 samples, 1.04%)</title><rect x="473.8" y="963.0" width="12.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="476.8" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (12 samples, 1.04%)</title><rect x="473.8" y="947.0" width="12.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="476.8" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (12 samples, 1.04%)</title><rect x="473.8" y="931.0" width="12.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="476.8" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (12 samples, 1.04%)</title><rect x="473.8" y="915.0" width="12.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="476.8" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (2 samples, 0.17%)</title><rect x="481.0" y="899.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="484.0" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (3 samples, 0.26%)</title><rect x="483.0" y="899.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="486.0" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (302 samples, 26.26%)</title><rect x="486.1" y="1075.0" width="309.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="489.1" y="1086.0">com/linecorp/decaton/processor/runtime/int..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (50 samples, 4.35%)</title><rect x="486.1" y="1059.0" width="51.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="489.1" y="1070.0">com/l..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (49 samples, 4.26%)</title><rect x="487.1" y="1043.0" width="50.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="490.1" y="1054.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (47 samples, 4.09%)</title><rect x="488.2" y="1027.0" width="48.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="491.2" y="1038.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 0.35%)</title><rect x="491.2" y="1011.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="494.2" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 0.35%)</title><rect x="491.2" y="995.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="494.2" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (4 samples, 0.35%)</title><rect x="491.2" y="979.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="494.2" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 0.35%)</title><rect x="491.2" y="963.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="494.2" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.17%)</title><rect x="495.3" y="1011.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="498.3" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.17%)</title><rect x="495.3" y="995.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="498.3" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.17%)</title><rect x="495.3" y="979.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="498.3" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.17%)</title><rect x="495.3" y="963.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="498.3" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.17%)</title><rect x="495.3" y="947.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="498.3" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (38 samples, 3.30%)</title><rect x="497.4" y="1011.0" width="39.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="500.4" y="1022.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (31 samples, 2.70%)</title><rect x="504.6" y="995.0" width="31.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="507.6" y="1006.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (10 samples, 0.87%)</title><rect x="526.1" y="979.0" width="10.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="529.1" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.09%)</title><rect x="536.4" y="1027.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="539.4" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.26%)</title><rect x="537.4" y="1059.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="540.4" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.26%)</title><rect x="537.4" y="1043.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="540.4" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.26%)</title><rect x="537.4" y="1027.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="540.4" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (161 samples, 14.00%)</title><rect x="540.5" y="1059.0" width="165.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="543.5" y="1070.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (161 samples, 14.00%)</title><rect x="540.5" y="1043.0" width="165.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="543.5" y="1054.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="541.5" y="1027.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="544.5" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="541.5" y="1011.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="544.5" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="541.5" y="995.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="544.5" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="541.5" y="979.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="544.5" y="990.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="541.5" y="963.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="544.5" y="974.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.35%)</title><rect x="542.5" y="1027.0" width="4.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="545.5" y="1038.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.26%)</title><rect x="543.6" y="1011.0" width="3.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="546.6" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (58 samples, 5.04%)</title><rect x="546.6" y="1027.0" width="59.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="549.6" y="1038.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (42 samples, 3.65%)</title><rect x="554.9" y="1011.0" width="43.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="557.9" y="1022.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (40 samples, 3.48%)</title><rect x="556.9" y="995.0" width="41.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="559.9" y="1006.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (23 samples, 2.00%)</title><rect x="568.2" y="979.0" width="23.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="571.2" y="990.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (23 samples, 2.00%)</title><rect x="568.2" y="963.0" width="23.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="571.2" y="974.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (23 samples, 2.00%)</title><rect x="568.2" y="947.0" width="23.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="571.2" y="958.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (12 samples, 1.04%)</title><rect x="574.3" y="931.0" width="12.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="577.3" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (7 samples, 0.61%)</title><rect x="575.4" y="915.0" width="7.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="578.4" y="926.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (7 samples, 0.61%)</title><rect x="575.4" y="899.0" width="7.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="578.4" y="910.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.09%)</title><rect x="575.4" y="883.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="578.4" y="894.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (6 samples, 0.52%)</title><rect x="576.4" y="883.0" width="6.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="579.4" y="894.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="576.4" y="867.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="579.4" y="878.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.09%)</title><rect x="576.4" y="851.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="579.4" y="862.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (4 samples, 0.35%)</title><rect x="577.4" y="867.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="580.4" y="878.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (2 samples, 0.17%)</title><rect x="579.5" y="851.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="582.5" y="862.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.09%)</title><rect x="581.5" y="867.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="584.5" y="878.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.09%)</title><rect x="582.6" y="915.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="585.6" y="926.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.17%)</title><rect x="583.6" y="915.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="586.6" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.17%)</title><rect x="583.6" y="899.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="586.6" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="583.6" y="883.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="586.6" y="894.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.09%)</title><rect x="584.6" y="883.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="587.6" y="894.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="585.6" y="915.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="588.6" y="926.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.43%)</title><rect x="586.7" y="931.0" width="5.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="589.7" y="942.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.26%)</title><rect x="591.8" y="979.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="594.8" y="990.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.17%)</title><rect x="594.9" y="979.0" width="2.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="597.9" y="990.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="596.9" y="979.0" width="1.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="599.9" y="990.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.17%)</title><rect x="597.9" y="1011.0" width="2.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="600.9" y="1022.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.52%)</title><rect x="600.0" y="1011.0" width="6.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="603.0" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.17%)</title><rect x="606.2" y="1027.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="609.2" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (6 samples, 0.52%)</title><rect x="608.2" y="1027.0" width="6.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="611.2" y="1038.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.09%)</title><rect x="608.2" y="1011.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="611.2" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.09%)</title><rect x="608.2" y="995.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="611.2" y="1006.0"></text>
</g>
<g>
<title>java/lang/Long.toString (5 samples, 0.43%)</title><rect x="609.2" y="1011.0" width="5.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="612.2" y="1022.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.43%)</title><rect x="609.2" y="995.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="612.2" y="1006.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (89 samples, 7.74%)</title><rect x="614.4" y="1027.0" width="91.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="617.4" y="1038.0">org/slf4j/M..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (76 samples, 6.61%)</title><rect x="625.7" y="1011.0" width="77.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="628.7" y="1022.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.17%)</title><rect x="625.7" y="995.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="628.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.17%)</title><rect x="625.7" y="979.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="628.7" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.17%)</title><rect x="625.7" y="963.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="628.7" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.17%)</title><rect x="625.7" y="947.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="628.7" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="627.7" y="995.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="630.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="627.7" y="979.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="630.7" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="627.7" y="963.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="630.7" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.09%)</title><rect x="627.7" y="947.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="630.7" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="627.7" y="931.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="630.7" y="942.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (73 samples, 6.35%)</title><rect x="628.7" y="995.0" width="74.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="631.7" y="1006.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.put (67 samples, 5.83%)</title><rect x="634.9" y="979.0" width="68.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="637.9" y="990.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.putVal (37 samples, 3.22%)</title><rect x="665.7" y="963.0" width="37.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="668.7" y="974.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (4 samples, 0.35%)</title><rect x="684.1" y="947.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="687.1" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (13 samples, 1.13%)</title><rect x="688.2" y="947.0" width="13.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="691.2" y="958.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="700.6" y="931.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="703.6" y="942.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.17%)</title><rect x="701.6" y="947.0" width="2.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="704.6" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (2 samples, 0.17%)</title><rect x="703.6" y="1011.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="706.6" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (68 samples, 5.91%)</title><rect x="705.7" y="1059.0" width="69.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="708.7" y="1070.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (68 samples, 5.91%)</title><rect x="705.7" y="1043.0" width="69.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="708.7" y="1054.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$206/641828730.process (35 samples, 3.04%)</title><rect x="708.8" y="1027.0" width="35.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="711.8" y="1038.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (35 samples, 3.04%)</title><rect x="708.8" y="1011.0" width="35.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="711.8" y="1022.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (30 samples, 2.61%)</title><rect x="708.8" y="995.0" width="30.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="711.8" y="1006.0">co..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.26%)</title><rect x="714.9" y="979.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="717.9" y="990.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.26%)</title><rect x="714.9" y="963.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="717.9" y="974.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 0.26%)</title><rect x="714.9" y="947.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="717.9" y="958.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (3 samples, 0.26%)</title><rect x="714.9" y="931.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="717.9" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (3 samples, 0.26%)</title><rect x="714.9" y="915.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="717.9" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.09%)</title><rect x="717.0" y="899.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="720.0" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (14 samples, 1.22%)</title><rect x="718.0" y="979.0" width="14.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="721.0" y="990.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.70%)</title><rect x="724.2" y="963.0" width="8.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="727.2" y="974.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.70%)</title><rect x="724.2" y="947.0" width="8.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="727.2" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.09%)</title><rect x="732.4" y="979.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="735.4" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.52%)</title><rect x="733.4" y="979.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="736.4" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (5 samples, 0.43%)</title><rect x="739.5" y="995.0" width="5.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="742.5" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.35%)</title><rect x="740.6" y="979.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="743.6" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.26%)</title><rect x="741.6" y="963.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="744.6" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.26%)</title><rect x="741.6" y="947.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="744.6" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (2 samples, 0.17%)</title><rect x="744.7" y="1027.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="747.7" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.43%)</title><rect x="746.7" y="1027.0" width="5.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="749.7" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.43%)</title><rect x="746.7" y="1011.0" width="5.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="749.7" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.loggingExceptions (2 samples, 0.17%)</title><rect x="751.9" y="1027.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="754.9" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$286/1703941699.get (2 samples, 0.17%)</title><rect x="751.9" y="1011.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="754.9" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$72 (2 samples, 0.17%)</title><rect x="751.9" y="995.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="754.9" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1016925085.linkToTargetMethod (2 samples, 0.17%)</title><rect x="753.9" y="1027.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="756.9" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (2 samples, 0.17%)</title><rect x="753.9" y="1011.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="756.9" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$291/785440401.get$Lambda (2 samples, 0.17%)</title><rect x="753.9" y="995.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="756.9" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.09%)</title><rect x="756.0" y="1027.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="759.0" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (9 samples, 0.78%)</title><rect x="757.0" y="1027.0" width="9.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="760.0" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.52%)</title><rect x="760.1" y="1011.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="763.1" y="1022.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.35%)</title><rect x="760.1" y="995.0" width="4.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="763.1" y="1006.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.17%)</title><rect x="764.2" y="995.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="767.2" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (7 samples, 0.61%)</title><rect x="766.2" y="1027.0" width="7.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="769.2" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.17%)</title><rect x="771.4" y="1011.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="774.4" y="1022.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (1 samples, 0.09%)</title><rect x="772.4" y="995.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="775.4" y="1006.0"></text>
</g>
<g>
<title>java/util/ArrayList.elementData (1 samples, 0.09%)</title><rect x="772.4" y="979.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="775.4" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.17%)</title><rect x="773.4" y="1027.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="776.4" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.17%)</title><rect x="773.4" y="1011.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="776.4" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (20 samples, 1.74%)</title><rect x="775.5" y="1059.0" width="20.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="778.5" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (20 samples, 1.74%)</title><rect x="775.5" y="1043.0" width="20.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="778.5" y="1054.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="781.6" y="1027.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="784.6" y="1038.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.35%)</title><rect x="782.6" y="1027.0" width="4.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="785.6" y="1038.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.35%)</title><rect x="782.6" y="1011.0" width="4.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="785.6" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (9 samples, 0.78%)</title><rect x="786.7" y="1027.0" width="9.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="789.7" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$292/330580454.accept (9 samples, 0.78%)</title><rect x="786.7" y="1011.0" width="9.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="789.7" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$61 (9 samples, 0.78%)</title><rect x="786.7" y="995.0" width="9.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="789.7" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (9 samples, 0.78%)</title><rect x="786.7" y="979.0" width="9.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="789.7" y="990.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (9 samples, 0.78%)</title><rect x="786.7" y="963.0" width="9.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="789.7" y="974.0"></text>
</g>
<g>
<title>java/time/Duration.create (9 samples, 0.78%)</title><rect x="786.7" y="947.0" width="9.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="789.7" y="958.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.52%)</title><rect x="789.8" y="931.0" width="6.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="792.8" y="942.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.26%)</title><rect x="792.9" y="915.0" width="3.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="795.9" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (19 samples, 1.65%)</title><rect x="796.0" y="1075.0" width="19.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="799.0" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (19 samples, 1.65%)</title><rect x="796.0" y="1059.0" width="19.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="799.0" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (18 samples, 1.57%)</title><rect x="797.0" y="1043.0" width="18.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="800.0" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$292/330580454.accept (5 samples, 0.43%)</title><rect x="797.0" y="1027.0" width="5.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="800.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$61 (5 samples, 0.43%)</title><rect x="797.0" y="1011.0" width="5.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="800.0" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (5 samples, 0.43%)</title><rect x="797.0" y="995.0" width="5.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="800.0" y="1006.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (5 samples, 0.43%)</title><rect x="797.0" y="979.0" width="5.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="800.0" y="990.0"></text>
</g>
<g>
<title>java/time/Duration.create (5 samples, 0.43%)</title><rect x="797.0" y="963.0" width="5.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="800.0" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$311/80645912.accept (13 samples, 1.13%)</title><rect x="802.1" y="1027.0" width="13.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="805.1" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$60 (13 samples, 1.13%)</title><rect x="802.1" y="1011.0" width="13.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="805.1" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$277/1959900896.complete (13 samples, 1.13%)</title><rect x="802.1" y="995.0" width="13.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="805.1" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$37 (13 samples, 1.13%)</title><rect x="802.1" y="979.0" width="13.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="805.1" y="990.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.09%)</title><rect x="802.1" y="963.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="805.1" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$276/1294533492.complete (12 samples, 1.04%)</title><rect x="803.2" y="963.0" width="12.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="806.2" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$65 (12 samples, 1.04%)</title><rect x="803.2" y="947.0" width="12.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="806.2" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (12 samples, 1.04%)</title><rect x="803.2" y="931.0" width="12.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="806.2" y="942.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (12 samples, 1.04%)</title><rect x="803.2" y="915.0" width="12.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="806.2" y="926.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (12 samples, 1.04%)</title><rect x="803.2" y="899.0" width="12.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="806.2" y="910.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (12 samples, 1.04%)</title><rect x="803.2" y="883.0" width="12.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="806.2" y="894.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.52%)</title><rect x="815.5" y="1075.0" width="6.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="818.5" y="1086.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.43%)</title><rect x="816.5" y="1059.0" width="5.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="819.5" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (6 samples, 0.52%)</title><rect x="821.6" y="1091.0" width="6.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="824.6" y="1102.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.43%)</title><rect x="822.7" y="1075.0" width="5.1" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="825.7" y="1086.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.43%)</title><rect x="822.7" y="1059.0" width="5.1" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="825.7" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (5 samples, 0.43%)</title><rect x="827.8" y="1139.0" width="5.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="830.8" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.43%)</title><rect x="827.8" y="1123.0" width="5.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="830.8" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.43%)</title><rect x="827.8" y="1107.0" width="5.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="830.8" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.43%)</title><rect x="827.8" y="1091.0" width="5.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="830.8" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (233 samples, 20.26%)</title><rect x="832.9" y="1139.0" width="239.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="835.9" y="1150.0">java/util/concurrent/ThreadPoolE..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (233 samples, 20.26%)</title><rect x="832.9" y="1123.0" width="239.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="835.9" y="1134.0">java/util/concurrent/LinkedBlock..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (231 samples, 20.09%)</title><rect x="833.9" y="1107.0" width="237.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="836.9" y="1118.0">java/util/concurrent/locks/Abst..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (13 samples, 1.13%)</title><rect x="850.4" y="1091.0" width="13.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="853.4" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (11 samples, 0.96%)</title><rect x="863.7" y="1091.0" width="11.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="866.7" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (11 samples, 0.96%)</title><rect x="863.7" y="1075.0" width="11.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="866.7" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (191 samples, 16.61%)</title><rect x="875.0" y="1091.0" width="196.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="878.0" y="1102.0">java/util/concurrent/lock..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (168 samples, 14.61%)</title><rect x="898.6" y="1075.0" width="172.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="901.6" y="1086.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.17%)</title><rect x="908.9" y="1059.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="911.9" y="1070.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (3 samples, 0.26%)</title><rect x="910.9" y="1059.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="913.9" y="1070.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.17%)</title><rect x="914.0" y="1059.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="917.0" y="1070.0"></text>
</g>
<g>
<title>Unsafe_Park (146 samples, 12.70%)</title><rect x="916.0" y="1059.0" width="149.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="919.0" y="1070.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.17%)</title><rect x="918.1" y="1043.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="921.1" y="1054.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (2 samples, 0.17%)</title><rect x="920.1" y="1043.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="923.1" y="1054.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (27 samples, 2.35%)</title><rect x="922.2" y="1043.0" width="27.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="925.2" y="1054.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (6 samples, 0.52%)</title><rect x="932.5" y="1027.0" width="6.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="935.5" y="1038.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="934.5" y="1011.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="937.5" y="1022.0"></text>
</g>
<g>
<title>pthread_getspecific (3 samples, 0.26%)</title><rect x="935.5" y="1011.0" width="3.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="938.5" y="1022.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.17%)</title><rect x="938.6" y="1027.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="941.6" y="1038.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (9 samples, 0.78%)</title><rect x="940.7" y="1027.0" width="9.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="943.7" y="1038.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="949.9" y="1043.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="952.9" y="1054.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.26%)</title><rect x="950.9" y="1043.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="953.9" y="1054.0"></text>
</g>
<g>
<title>__lll_lock_wait (15 samples, 1.30%)</title><rect x="954.0" y="1043.0" width="15.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="957.0" y="1054.0"></text>
</g>
<g>
<title>__lll_unlock_wake (32 samples, 2.78%)</title><rect x="969.4" y="1043.0" width="32.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="972.4" y="1054.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (40 samples, 3.48%)</title><rect x="1002.2" y="1043.0" width="41.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1005.2" y="1054.0">__p..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.35%)</title><rect x="1043.3" y="1043.0" width="4.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1046.3" y="1054.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.09%)</title><rect x="1047.4" y="1043.0" width="1.0" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1050.4" y="1054.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.17%)</title><rect x="1048.4" y="1043.0" width="2.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1051.4" y="1054.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.09%)</title><rect x="1050.5" y="1043.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1053.5" y="1054.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (7 samples, 0.61%)</title><rect x="1051.5" y="1043.0" width="7.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1054.5" y="1054.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.09%)</title><rect x="1058.7" y="1043.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1061.7" y="1054.0"></text>
</g>
<g>
<title>_init (1 samples, 0.09%)</title><rect x="1059.7" y="1043.0" width="1.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1062.7" y="1054.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.26%)</title><rect x="1060.7" y="1043.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1063.7" y="1054.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.17%)</title><rect x="1063.8" y="1043.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1066.8" y="1054.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.35%)</title><rect x="1065.8" y="1059.0" width="4.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1068.8" y="1070.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.09%)</title><rect x="1069.9" y="1059.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1072.9" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.09%)</title><rect x="1071.0" y="1107.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1074.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.09%)</title><rect x="1072.0" y="1187.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1075.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.09%)</title><rect x="1072.0" y="1171.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1075.0" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="1072.0" y="1155.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1075.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.09%)</title><rect x="1072.0" y="1139.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1075.0" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient$DefaultMetadataUpdater.maybeUpdate (1 samples, 0.09%)</title><rect x="1072.0" y="1123.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1075.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.timeToNextUpdate (1 samples, 0.09%)</title><rect x="1072.0" y="1107.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1075.0" y="1118.0"></text>
</g>
<g>
<title>start_thread (114 samples, 9.91%)</title><rect x="1073.0" y="1187.0" width="117.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1076.0" y="1198.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (114 samples, 9.91%)</title><rect x="1073.0" y="1171.0" width="117.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1076.0" y="1182.0">java_start(Thr..</text>
</g>
<g>
<title>GangWorker::loop() (19 samples, 1.65%)</title><rect x="1073.0" y="1155.0" width="19.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1076.0" y="1166.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.09%)</title><rect x="1073.0" y="1139.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1076.0" y="1150.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.09%)</title><rect x="1073.0" y="1123.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1076.0" y="1134.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.09%)</title><rect x="1073.0" y="1107.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1076.0" y="1118.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (17 samples, 1.48%)</title><rect x="1074.1" y="1139.0" width="17.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1077.1" y="1150.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.43%)</title><rect x="1074.1" y="1123.0" width="5.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1077.1" y="1134.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 0.26%)</title><rect x="1074.1" y="1107.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1077.1" y="1118.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.17%)</title><rect x="1077.1" y="1107.0" width="2.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1080.1" y="1118.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (7 samples, 0.61%)</title><rect x="1079.2" y="1123.0" width="7.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1082.2" y="1134.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.35%)</title><rect x="1079.2" y="1107.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1082.2" y="1118.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (3 samples, 0.26%)</title><rect x="1079.2" y="1091.0" width="3.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1082.2" y="1102.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (3 samples, 0.26%)</title><rect x="1079.2" y="1075.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1082.2" y="1086.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (2 samples, 0.17%)</title><rect x="1079.2" y="1059.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1082.2" y="1070.0"></text>
</g>
<g>
<title>JNIHandleBlock::oops_do(OopClosure*) (1 samples, 0.09%)</title><rect x="1081.2" y="1059.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1084.2" y="1070.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1082.3" y="1091.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1085.3" y="1102.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1082.3" y="1075.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1085.3" y="1086.0"></text>
</g>
<g>
<title>JNIHandleBlock::oops_do(OopClosure*) (1 samples, 0.09%)</title><rect x="1082.3" y="1059.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1085.3" y="1070.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.26%)</title><rect x="1083.3" y="1107.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1086.3" y="1118.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (2 samples, 0.17%)</title><rect x="1083.3" y="1091.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1086.3" y="1102.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.09%)</title><rect x="1084.3" y="1075.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1087.3" y="1086.0"></text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.09%)</title><rect x="1085.3" y="1091.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1088.3" y="1102.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.09%)</title><rect x="1085.3" y="1075.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1088.3" y="1086.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (4 samples, 0.35%)</title><rect x="1086.4" y="1123.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1089.4" y="1134.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (4 samples, 0.35%)</title><rect x="1086.4" y="1107.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1089.4" y="1118.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (4 samples, 0.35%)</title><rect x="1086.4" y="1091.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1089.4" y="1102.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (4 samples, 0.35%)</title><rect x="1086.4" y="1075.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1089.4" y="1086.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (4 samples, 0.35%)</title><rect x="1086.4" y="1059.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1089.4" y="1070.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (4 samples, 0.35%)</title><rect x="1086.4" y="1043.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1089.4" y="1054.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (4 samples, 0.35%)</title><rect x="1086.4" y="1027.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1089.4" y="1038.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.09%)</title><rect x="1089.4" y="1011.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1092.4" y="1022.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.09%)</title><rect x="1090.5" y="1123.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1093.5" y="1134.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="1090.5" y="1107.0" width="1.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1093.5" y="1118.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.09%)</title><rect x="1091.5" y="1139.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1094.5" y="1150.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.09%)</title><rect x="1091.5" y="1123.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1094.5" y="1134.0"></text>
</g>
<g>
<title>JavaThread::run() (93 samples, 8.09%)</title><rect x="1092.5" y="1155.0" width="95.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1095.5" y="1166.0">JavaThread:..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (93 samples, 8.09%)</title><rect x="1092.5" y="1139.0" width="95.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1095.5" y="1150.0">JavaThread:..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (93 samples, 8.09%)</title><rect x="1092.5" y="1123.0" width="95.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1095.5" y="1134.0">CompileBrok..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (92 samples, 8.00%)</title><rect x="1092.5" y="1107.0" width="94.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1095.5" y="1118.0">CompileBrok..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (91 samples, 7.91%)</title><rect x="1092.5" y="1091.0" width="93.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1095.5" y="1102.0">C2Compiler:..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (91 samples, 7.91%)</title><rect x="1092.5" y="1075.0" width="93.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1095.5" y="1086.0">Compile::Co..</text>
</g>
<g>
<title>Compile::Code_Gen() (46 samples, 4.00%)</title><rect x="1092.5" y="1059.0" width="47.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1095.5" y="1070.0">Comp..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.17%)</title><rect x="1092.5" y="1043.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1095.5" y="1054.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.09%)</title><rect x="1092.5" y="1027.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1095.5" y="1038.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.09%)</title><rect x="1093.5" y="1027.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1096.5" y="1038.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.09%)</title><rect x="1093.5" y="1011.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1096.5" y="1022.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.09%)</title><rect x="1093.5" y="995.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1096.5" y="1006.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.09%)</title><rect x="1093.5" y="979.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1096.5" y="990.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.17%)</title><rect x="1094.6" y="1043.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1097.6" y="1054.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.09%)</title><rect x="1094.6" y="1027.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1097.6" y="1038.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.09%)</title><rect x="1094.6" y="1011.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1097.6" y="1022.0"></text>
</g>
<g>
<title>JVMState::same_calls_as(JVMState const*) const (1 samples, 0.09%)</title><rect x="1095.6" y="1027.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1098.6" y="1038.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 0.35%)</title><rect x="1096.6" y="1043.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1099.6" y="1054.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.09%)</title><rect x="1096.6" y="1027.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1099.6" y="1038.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.26%)</title><rect x="1097.7" y="1027.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1100.7" y="1038.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.09%)</title><rect x="1097.7" y="1011.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1100.7" y="1022.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.17%)</title><rect x="1098.7" y="1011.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1101.7" y="1022.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.09%)</title><rect x="1098.7" y="995.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1101.7" y="1006.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.09%)</title><rect x="1098.7" y="979.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1101.7" y="990.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.09%)</title><rect x="1099.7" y="995.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1102.7" y="1006.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.09%)</title><rect x="1099.7" y="979.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1102.7" y="990.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.09%)</title><rect x="1100.7" y="1043.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1103.7" y="1054.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.09%)</title><rect x="1100.7" y="1027.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1103.7" y="1038.0"></text>
</g>
<g>
<title>Block::num_fall_throughs() (1 samples, 0.09%)</title><rect x="1100.7" y="1011.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1103.7" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.09%)</title><rect x="1101.8" y="1043.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1104.8" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.09%)</title><rect x="1101.8" y="1027.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1104.8" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (5 samples, 0.43%)</title><rect x="1102.8" y="1043.0" width="5.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1105.8" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (5 samples, 0.43%)</title><rect x="1102.8" y="1027.0" width="5.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1105.8" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1102.8" y="1011.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1105.8" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.09%)</title><rect x="1102.8" y="995.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1105.8" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (2 samples, 0.17%)</title><rect x="1103.8" y="1011.0" width="2.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1106.8" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1103.8" y="995.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1106.8" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int) (1 samples, 0.09%)</title><rect x="1104.8" y="995.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1107.8" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (2 samples, 0.17%)</title><rect x="1105.9" y="1011.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1108.9" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (31 samples, 2.70%)</title><rect x="1107.9" y="1043.0" width="31.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1110.9" y="1054.0">Ph..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.09%)</title><rect x="1108.9" y="1027.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1111.9" y="1038.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.09%)</title><rect x="1110.0" y="1027.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1113.0" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.17%)</title><rect x="1111.0" y="1027.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1114.0" y="1038.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.09%)</title><rect x="1112.0" y="1011.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1115.0" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1112.0" y="995.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1115.0" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.17%)</title><rect x="1113.0" y="1027.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1116.0" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1114.1" y="1011.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1117.1" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 0.35%)</title><rect x="1115.1" y="1027.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1118.1" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 0.43%)</title><rect x="1119.2" y="1027.0" width="5.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1122.2" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1121.3" y="1011.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1124.3" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.17%)</title><rect x="1122.3" y="1011.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1125.3" y="1022.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1123.3" y="995.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1126.3" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (6 samples, 0.52%)</title><rect x="1124.3" y="1027.0" width="6.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1127.3" y="1038.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.09%)</title><rect x="1129.5" y="1011.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1132.5" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.09%)</title><rect x="1130.5" y="1027.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1133.5" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::possibly_merge_multidef(Node*, unsigned int, Block*, GrowableArray&lt;PhaseChaitin::RegDefUse&gt;&amp;) (1 samples, 0.09%)</title><rect x="1130.5" y="1011.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1133.5" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.09%)</title><rect x="1131.5" y="1027.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1134.5" y="1038.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.09%)</title><rect x="1132.5" y="1027.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1135.5" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1132.5" y="1011.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1135.5" y="1022.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.17%)</title><rect x="1133.6" y="1027.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1136.6" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.17%)</title><rect x="1133.6" y="1011.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1136.6" y="1022.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 0.35%)</title><rect x="1135.6" y="1027.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1138.6" y="1038.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (4 samples, 0.35%)</title><rect x="1135.6" y="1011.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.6" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.26%)</title><rect x="1136.6" y="995.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1139.6" y="1006.0"></text>
</g>
<g>
<title>Compile::Optimize() (36 samples, 3.13%)</title><rect x="1139.7" y="1059.0" width="37.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1142.7" y="1070.0">Com..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.09%)</title><rect x="1139.7" y="1043.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1142.7" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.09%)</title><rect x="1139.7" y="1027.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1142.7" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::add_final_edges(Node*) (1 samples, 0.09%)</title><rect x="1139.7" y="1011.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1142.7" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::add_base(FieldNode*, PointsToNode*) (1 samples, 0.09%)</title><rect x="1139.7" y="995.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1142.7" y="1006.0"></text>
</g>
<g>
<title>GrowableArray&lt;PointsToNode*&gt;::append(PointsToNode* const&amp;) (1 samples, 0.09%)</title><rect x="1139.7" y="979.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1142.7" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;, bool, bool) (1 samples, 0.09%)</title><rect x="1140.7" y="1043.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1143.7" y="1054.0"></text>
</g>
<g>
<title>PhaseTransform::PhaseTransform(Phase::PhaseNumber) (1 samples, 0.09%)</title><rect x="1140.7" y="1027.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1143.7" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (19 samples, 1.65%)</title><rect x="1141.8" y="1043.0" width="19.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.8" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.09%)</title><rect x="1141.8" y="1027.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1144.8" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (15 samples, 1.30%)</title><rect x="1142.8" y="1027.0" width="15.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1145.8" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (13 samples, 1.13%)</title><rect x="1144.9" y="1011.0" width="13.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1147.9" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.09%)</title><rect x="1144.9" y="995.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.9" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.09%)</title><rect x="1145.9" y="995.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1148.9" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (10 samples, 0.87%)</title><rect x="1146.9" y="995.0" width="10.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1149.9" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.09%)</title><rect x="1154.1" y="979.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1157.1" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1154.1" y="963.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.1" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.09%)</title><rect x="1155.1" y="979.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1158.1" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1156.1" y="979.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.1" y="990.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1157.2" y="995.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1160.2" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.17%)</title><rect x="1158.2" y="1027.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.2" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.17%)</title><rect x="1158.2" y="1011.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.2" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (2 samples, 0.17%)</title><rect x="1158.2" y="995.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1161.2" y="1006.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1158.2" y="979.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.2" y="990.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1158.2" y="963.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.2" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.09%)</title><rect x="1159.2" y="979.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.2" y="990.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.09%)</title><rect x="1159.2" y="963.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1162.2" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1160.2" y="1027.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1163.2" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1160.2" y="1011.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.2" y="1022.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1160.2" y="995.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1163.2" y="1006.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.09%)</title><rect x="1160.2" y="979.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.2" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (12 samples, 1.04%)</title><rect x="1161.3" y="1043.0" width="12.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.3" y="1054.0"></text>
</g>
<g>
<title>Node::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1161.3" y="1027.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.3" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (10 samples, 0.87%)</title><rect x="1162.3" y="1027.0" width="10.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.3" y="1038.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1163.3" y="1011.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.3" y="1022.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1163.3" y="995.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.3" y="1006.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.09%)</title><rect x="1163.3" y="979.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.3" y="990.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.09%)</title><rect x="1163.3" y="963.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.3" y="974.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.09%)</title><rect x="1163.3" y="947.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.3" y="958.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1163.3" y="931.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.3" y="942.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1163.3" y="915.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.3" y="926.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (3 samples, 0.26%)</title><rect x="1164.3" y="1011.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.3" y="1022.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.09%)</title><rect x="1165.4" y="995.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.4" y="1006.0"></text>
</g>
<g>
<title>ProjNode::hash() const (1 samples, 0.09%)</title><rect x="1165.4" y="979.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.4" y="990.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.09%)</title><rect x="1166.4" y="995.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.4" y="1006.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.09%)</title><rect x="1166.4" y="979.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.4" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1167.4" y="1011.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.4" y="1022.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.09%)</title><rect x="1167.4" y="995.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.4" y="1006.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.09%)</title><rect x="1167.4" y="979.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.4" y="990.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1168.5" y="1011.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.5" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1168.5" y="995.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.5" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.09%)</title><rect x="1168.5" y="979.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.5" y="990.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.09%)</title><rect x="1168.5" y="963.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.5" y="974.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (3 samples, 0.26%)</title><rect x="1169.5" y="1011.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.5" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.17%)</title><rect x="1169.5" y="995.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.5" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1169.5" y="979.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.5" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1169.5" y="963.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.5" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1169.5" y="947.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1172.5" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1169.5" y="931.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.5" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1169.5" y="915.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.5" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1169.5" y="899.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.5" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1169.5" y="883.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.5" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1169.5" y="867.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.5" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1169.5" y="851.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1172.5" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1169.5" y="835.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.5" y="846.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1169.5" y="819.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.5" y="830.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1169.5" y="803.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.5" y="814.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1170.5" y="947.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.5" y="958.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1170.5" y="931.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.5" y="942.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1171.5" y="995.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.5" y="1006.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.09%)</title><rect x="1171.5" y="979.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.5" y="990.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1171.5" y="963.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.5" y="974.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1171.5" y="947.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.5" y="958.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1171.5" y="931.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.5" y="942.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_interface() (1 samples, 0.09%)</title><rect x="1171.5" y="915.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.5" y="926.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.09%)</title><rect x="1172.6" y="1027.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.6" y="1038.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.09%)</title><rect x="1173.6" y="1043.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.6" y="1054.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.09%)</title><rect x="1173.6" y="1027.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.6" y="1038.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1173.6" y="1011.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.6" y="1022.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1173.6" y="995.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.6" y="1006.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1173.6" y="979.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.6" y="990.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1173.6" y="963.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.6" y="974.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.09%)</title><rect x="1173.6" y="947.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.6" y="958.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.17%)</title><rect x="1174.6" y="1043.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.6" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1174.6" y="1027.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.6" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1174.6" y="1011.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.6" y="1022.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1174.6" y="995.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.6" y="1006.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1174.6" y="979.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.6" y="990.0"></text>
</g>
<g>
<title>TypeLong::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="1174.6" y="963.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.6" y="974.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1174.6" y="947.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.6" y="958.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.09%)</title><rect x="1174.6" y="931.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.6" y="942.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.09%)</title><rect x="1175.6" y="1027.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.6" y="1038.0"></text>
</g>
<g>
<title>SafePointNode::jvms() const (1 samples, 0.09%)</title><rect x="1175.6" y="1011.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.6" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.70%)</title><rect x="1176.7" y="1059.0" width="8.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.7" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.70%)</title><rect x="1176.7" y="1043.0" width="8.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.7" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.70%)</title><rect x="1176.7" y="1027.0" width="8.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.7" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.70%)</title><rect x="1176.7" y="1011.0" width="8.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.7" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.70%)</title><rect x="1176.7" y="995.0" width="8.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.7" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.70%)</title><rect x="1176.7" y="979.0" width="8.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.7" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.61%)</title><rect x="1176.7" y="963.0" width="7.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.7" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.61%)</title><rect x="1176.7" y="947.0" width="7.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.7" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.61%)</title><rect x="1176.7" y="931.0" width="7.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.7" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.61%)</title><rect x="1176.7" y="915.0" width="7.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.7" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.61%)</title><rect x="1176.7" y="899.0" width="7.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.7" y="910.0"></text>
</g>
<g>
<title>Node::disconnect_inputs(Node*, Compile*) (1 samples, 0.09%)</title><rect x="1176.7" y="883.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.7" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.43%)</title><rect x="1177.7" y="883.0" width="5.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.7" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1177.7" y="867.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.7" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.26%)</title><rect x="1177.7" y="851.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.26%)</title><rect x="1177.7" y="835.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.7" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.26%)</title><rect x="1177.7" y="819.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.7" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.26%)</title><rect x="1177.7" y="803.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.7" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.26%)</title><rect x="1177.7" y="787.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.7" y="798.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1177.7" y="771.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.7" y="782.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1177.7" y="755.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.7" y="766.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1177.7" y="739.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.7" y="750.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.09%)</title><rect x="1178.7" y="771.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.7" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.7" y="771.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.7" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.7" y="755.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.7" y="739.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.7" y="723.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.7" y="707.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.7" y="691.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.7" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.7" y="675.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.7" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.7" y="659.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.7" y="643.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.7" y="627.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.7" y="611.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.7" y="595.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.7" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.7" y="579.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.7" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.7" y="563.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.7" y="547.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.7" y="531.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.7" y="515.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.7" y="499.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.7" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.7" y="483.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.7" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.7" y="467.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.7" y="451.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.7" y="435.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.7" y="419.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.7" y="403.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.7" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.7" y="387.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.7" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.7" y="371.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.7" y="355.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.7" y="339.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.7" y="323.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.7" y="307.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.7" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.7" y="291.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.7" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.7" y="275.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.7" y="259.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.7" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.7" y="243.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.7" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.7" y="227.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.7" y="238.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1179.7" y="211.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.7" y="222.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1179.7" y="195.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.7" y="206.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.09%)</title><rect x="1179.7" y="179.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.7" y="190.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.09%)</title><rect x="1179.7" y="163.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.7" y="174.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.09%)</title><rect x="1179.7" y="147.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.7" y="158.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.09%)</title><rect x="1179.7" y="131.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.7" y="142.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.09%)</title><rect x="1179.7" y="115.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.7" y="126.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1180.8" y="867.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.8" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1180.8" y="851.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.8" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1180.8" y="835.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1180.8" y="819.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.8" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1180.8" y="803.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.8" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1180.8" y="787.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1180.8" y="771.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.8" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1180.8" y="755.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.8" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1180.8" y="739.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1180.8" y="723.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1180.8" y="707.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1180.8" y="691.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1180.8" y="675.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.8" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.8" y="659.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.8" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.8" y="643.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.8" y="627.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.8" y="611.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.8" y="595.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.8" y="579.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.8" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.8" y="563.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.8" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.8" y="547.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.8" y="531.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.8" y="515.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.8" y="499.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.8" y="483.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.8" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.8" y="467.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.8" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.8" y="451.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.8" y="435.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.8" y="419.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.8" y="403.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.8" y="387.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.8" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.8" y="371.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.8" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.8" y="355.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.8" y="339.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.8" y="323.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.8" y="307.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.8" y="291.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.8" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.8" y="275.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.8" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.8" y="259.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.8" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.8" y="243.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.8" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.8" y="227.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.8" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.8" y="211.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.8" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.8" y="195.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.8" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.8" y="179.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.8" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.8" y="163.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.8" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.8" y="147.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.8" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.8" y="131.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.8" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.8" y="115.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.8" y="126.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1180.8" y="99.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.8" y="110.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1180.8" y="83.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.8" y="94.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.09%)</title><rect x="1180.8" y="67.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.8" y="78.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1180.8" y="51.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.8" y="62.0"></text>
</g>
<g>
<title>LoadLNode::Opcode() const (1 samples, 0.09%)</title><rect x="1180.8" y="35.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.8" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.8" y="659.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.8" y="670.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.09%)</title><rect x="1181.8" y="643.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.8" y="654.0"></text>
</g>
<g>
<title>GraphKit::cast_not_null(Node*, bool) (1 samples, 0.09%)</title><rect x="1181.8" y="627.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.8" y="638.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1181.8" y="611.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.8" y="622.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="1181.8" y="595.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.8" y="606.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.09%)</title><rect x="1181.8" y="579.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.8" y="590.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1181.8" y="563.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.8" y="574.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.09%)</title><rect x="1181.8" y="547.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1182.8" y="883.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.8" y="894.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1182.8" y="867.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.8" y="878.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.09%)</title><rect x="1182.8" y="851.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.8" y="862.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1182.8" y="835.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.8" y="846.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1182.8" y="819.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.8" y="830.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1182.8" y="803.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.8" y="814.0"></text>
</g>
<g>
<title>TypeOopPtr::klass() const (1 samples, 0.09%)</title><rect x="1182.8" y="787.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.8" y="798.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.8" y="963.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.8" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.8" y="947.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.8" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1183.8" y="931.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.8" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1183.8" y="915.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.8" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1183.8" y="899.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.8" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1183.8" y="883.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.8" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1183.8" y="867.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.8" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.8" y="851.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.8" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1183.8" y="835.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1183.8" y="819.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.8" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1183.8" y="803.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.8" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1183.8" y="787.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1183.8" y="771.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.8" y="782.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1183.8" y="755.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.8" y="766.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1183.8" y="739.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.8" y="750.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1183.8" y="723.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.8" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1183.8" y="707.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.8" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1183.8" y="691.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.8" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1183.8" y="675.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.8" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1183.8" y="659.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.8" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1183.8" y="643.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.8" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.09%)</title><rect x="1183.8" y="627.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.8" y="638.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1183.8" y="611.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.8" y="622.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1183.8" y="595.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.8" y="606.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1183.8" y="579.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.8" y="590.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1183.8" y="563.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.8" y="574.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.09%)</title><rect x="1183.8" y="547.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.8" y="558.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.09%)</title><rect x="1183.8" y="531.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.8" y="542.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.09%)</title><rect x="1183.8" y="515.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.8" y="526.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.09%)</title><rect x="1183.8" y="499.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.8" y="510.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.09%)</title><rect x="1183.8" y="483.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.8" y="494.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.09%)</title><rect x="1183.8" y="467.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.8" y="478.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.09%)</title><rect x="1184.9" y="1059.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.9" y="1070.0"></text>
</g>
<g>
<title>Unique_Node_List::remove_useless_nodes(VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1184.9" y="1043.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.9" y="1054.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1185.9" y="1091.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.9" y="1102.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.09%)</title><rect x="1185.9" y="1075.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.9" y="1086.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.09%)</title><rect x="1185.9" y="1059.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.9" y="1070.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.09%)</title><rect x="1185.9" y="1043.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.9" y="1054.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.09%)</title><rect x="1185.9" y="1027.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.9" y="1038.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1185.9" y="1011.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.9" y="1022.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.09%)</title><rect x="1185.9" y="995.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.9" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.09%)</title><rect x="1185.9" y="979.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.9" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.09%)</title><rect x="1185.9" y="963.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.9" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.09%)</title><rect x="1185.9" y="947.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.9" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1185.9" y="931.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.9" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.09%)</title><rect x="1185.9" y="915.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.9" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_intrinsics(ciMethod*) (1 samples, 0.09%)</title><rect x="1185.9" y="899.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.9" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.09%)</title><rect x="1185.9" y="883.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.9" y="894.0"></text>
</g>
<g>
<title>ValueStack::copy(ValueStack::Kind, int) (1 samples, 0.09%)</title><rect x="1185.9" y="867.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.9" y="878.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.09%)</title><rect x="1186.9" y="1107.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.9" y="1118.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.09%)</title><rect x="1186.9" y="1091.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.9" y="1102.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.09%)</title><rect x="1186.9" y="1075.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.9" y="1086.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.09%)</title><rect x="1186.9" y="1059.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.9" y="1070.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.09%)</title><rect x="1186.9" y="1043.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.9" y="1054.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.17%)</title><rect x="1187.9" y="1155.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.9" y="1166.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.17%)</title><rect x="1187.9" y="1139.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.9" y="1150.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.09%)</title><rect x="1187.9" y="1123.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.9" y="1134.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.09%)</title><rect x="1187.9" y="1107.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.9" y="1118.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.09%)</title><rect x="1187.9" y="1091.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.9" y="1102.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1187.9" y="1075.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.9" y="1086.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1187.9" y="1059.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.9" y="1070.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="1187.9" y="1043.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.9" y="1054.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.09%)</title><rect x="1187.9" y="1027.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.9" y="1038.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.09%)</title><rect x="1187.9" y="1011.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.9" y="1022.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.09%)</title><rect x="1189.0" y="1123.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.0" y="1134.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.09%)</title><rect x="1189.0" y="1107.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1192.0" y="1118.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.09%)</title><rect x="1189.0" y="1091.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1192.0" y="1102.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.09%)</title><rect x="1189.0" y="1075.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1192.0" y="1086.0"></text>
</g>
<g>
<title>G1CollectedHeap::gc_prologue(bool) (1 samples, 0.09%)</title><rect x="1189.0" y="1059.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1192.0" y="1070.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::accumulate_statistics_before_gc() (1 samples, 0.09%)</title><rect x="1189.0" y="1043.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.0" y="1054.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::accumulate_statistics() (1 samples, 0.09%)</title><rect x="1189.0" y="1027.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.0" y="1038.0"></text>
</g>
</g>
</svg>
