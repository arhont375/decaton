<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1542" onload="init(evt)" viewBox="0 0 1200 1542" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1525"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1525"> </text>
<g id="frames">
<g>
<title>all (363 samples, 100.00%)</title><rect x="10.0" y="1491.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1502.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.28%)</title><rect x="10.0" y="1475.0" width="3.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>_new_instance_Java (1 samples, 0.28%)</title><rect x="10.0" y="1459.0" width="3.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.55%)</title><rect x="13.3" y="1475.0" width="6.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="16.3" y="1486.0"></text>
</g>
<g>
<title>__vsnprintf (2 samples, 0.55%)</title><rect x="13.3" y="1459.0" width="6.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="16.3" y="1470.0"></text>
</g>
<g>
<title>__GI__IO_padn (1 samples, 0.28%)</title><rect x="13.3" y="1443.0" width="3.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="16.3" y="1454.0"></text>
</g>
<g>
<title>vfprintf (1 samples, 0.28%)</title><rect x="16.5" y="1443.0" width="3.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="19.5" y="1454.0"></text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.28%)</title><rect x="19.8" y="1475.0" width="3.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="22.8" y="1486.0"></text>
</g>
<g>
<title>Interpreter (1 samples, 0.28%)</title><rect x="19.8" y="1459.0" width="3.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="22.8" y="1470.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (23 samples, 6.34%)</title><rect x="23.0" y="1475.0" width="74.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="26.0" y="1486.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (2 samples, 0.55%)</title><rect x="23.0" y="1459.0" width="6.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="26.0" y="1470.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (2 samples, 0.55%)</title><rect x="23.0" y="1443.0" width="6.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="26.0" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (2 samples, 0.55%)</title><rect x="23.0" y="1427.0" width="6.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="26.0" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (2 samples, 0.55%)</title><rect x="23.0" y="1411.0" width="6.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.0" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.doCommitOffsetsAsync (1 samples, 0.28%)</title><rect x="23.0" y="1395.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="26.0" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.sendOffsetCommitRequest (1 samples, 0.28%)</title><rect x="23.0" y="1379.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.0" y="1390.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.28%)</title><rect x="23.0" y="1363.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="26.0" y="1374.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (1 samples, 0.28%)</title><rect x="23.0" y="1347.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="26.0" y="1358.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.28%)</title><rect x="23.0" y="1331.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.0" y="1342.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (1 samples, 0.28%)</title><rect x="23.0" y="1315.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="26.0" y="1326.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.28%)</title><rect x="23.0" y="1299.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="26.0" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.28%)</title><rect x="26.3" y="1395.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="29.3" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.28%)</title><rect x="26.3" y="1379.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="29.3" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.28%)</title><rect x="26.3" y="1363.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="29.3" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.28%)</title><rect x="26.3" y="1347.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="29.3" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.28%)</title><rect x="26.3" y="1331.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="29.3" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.28%)</title><rect x="26.3" y="1315.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="29.3" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.28%)</title><rect x="26.3" y="1299.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="29.3" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.28%)</title><rect x="26.3" y="1283.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="29.3" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.28%)</title><rect x="26.3" y="1267.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="29.3" y="1278.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.28%)</title><rect x="26.3" y="1251.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="29.3" y="1262.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.28%)</title><rect x="26.3" y="1235.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="29.3" y="1246.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.28%)</title><rect x="26.3" y="1219.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="29.3" y="1230.0"></text>
</g>
<g>
<title>_init (1 samples, 0.28%)</title><rect x="26.3" y="1203.0" width="3.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="29.3" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (21 samples, 5.79%)</title><rect x="29.5" y="1459.0" width="68.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="32.5" y="1470.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (2 samples, 0.55%)</title><rect x="29.5" y="1443.0" width="6.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="32.5" y="1454.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (2 samples, 0.55%)</title><rect x="29.5" y="1427.0" width="6.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="32.5" y="1438.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.28%)</title><rect x="29.5" y="1411.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="32.5" y="1422.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.spliterator (1 samples, 0.28%)</title><rect x="29.5" y="1395.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="32.5" y="1406.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.28%)</title><rect x="29.5" y="1379.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="32.5" y="1390.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.filter (1 samples, 0.28%)</title><rect x="32.8" y="1411.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="35.8" y="1422.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2.&lt;init&gt; (1 samples, 0.28%)</title><rect x="32.8" y="1395.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="35.8" y="1406.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.28%)</title><rect x="32.8" y="1379.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="35.8" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.28%)</title><rect x="36.0" y="1443.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="39.0" y="1454.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.28%)</title><rect x="36.0" y="1427.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="39.0" y="1438.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.28%)</title><rect x="36.0" y="1411.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="39.0" y="1422.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.28%)</title><rect x="36.0" y="1395.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="39.0" y="1406.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.28%)</title><rect x="36.0" y="1379.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="39.0" y="1390.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.28%)</title><rect x="36.0" y="1363.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="39.0" y="1374.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.28%)</title><rect x="36.0" y="1347.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="39.0" y="1358.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.28%)</title><rect x="36.0" y="1331.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="39.0" y="1342.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.28%)</title><rect x="36.0" y="1315.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="39.0" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.28%)</title><rect x="36.0" y="1299.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="39.0" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$274/1083831233.test (1 samples, 0.28%)</title><rect x="36.0" y="1283.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="39.0" y="1294.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.28%)</title><rect x="36.0" y="1267.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="39.0" y="1278.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.28%)</title><rect x="36.0" y="1251.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="39.0" y="1262.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.28%)</title><rect x="36.0" y="1235.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="39.0" y="1246.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_invocation_event(methodHandle, methodHandle, CompLevel, nmethod*, JavaThread*) (1 samples, 0.28%)</title><rect x="36.0" y="1219.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="39.0" y="1230.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.28%)</title><rect x="36.0" y="1203.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="39.0" y="1214.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::submit_compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.28%)</title><rect x="36.0" y="1187.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="39.0" y="1198.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.28%)</title><rect x="36.0" y="1171.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="39.0" y="1182.0"></text>
</g>
<g>
<title>CompileBroker::compile_method_base(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.28%)</title><rect x="36.0" y="1155.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="39.0" y="1166.0"></text>
</g>
<g>
<title>CompileBroker::create_compile_task(CompileQueue*, int, methodHandle, int, int, methodHandle, int, char const*, bool) (1 samples, 0.28%)</title><rect x="36.0" y="1139.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="39.0" y="1150.0"></text>
</g>
<g>
<title>CompileTask::initialize(int, methodHandle, int, int, methodHandle, int, char const*, bool) (1 samples, 0.28%)</title><rect x="36.0" y="1123.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="39.0" y="1134.0"></text>
</g>
<g>
<title>JNIHandles::make_global(Handle) (1 samples, 0.28%)</title><rect x="36.0" y="1107.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="39.0" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (2 samples, 0.55%)</title><rect x="39.3" y="1443.0" width="6.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="42.3" y="1454.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (2 samples, 0.55%)</title><rect x="39.3" y="1427.0" width="6.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="42.3" y="1438.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 0.55%)</title><rect x="39.3" y="1411.0" width="6.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="42.3" y="1422.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$269/450538636.accept (2 samples, 0.55%)</title><rect x="39.3" y="1395.0" width="6.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="42.3" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (2 samples, 0.55%)</title><rect x="39.3" y="1379.0" width="6.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="42.3" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.55%)</title><rect x="39.3" y="1363.0" width="6.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="42.3" y="1374.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.55%)</title><rect x="39.3" y="1347.0" width="6.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="42.3" y="1358.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 0.83%)</title><rect x="45.8" y="1443.0" width="9.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="48.8" y="1454.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$268/1313247918.accept (3 samples, 0.83%)</title><rect x="45.8" y="1427.0" width="9.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="48.8" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (3 samples, 0.83%)</title><rect x="45.8" y="1411.0" width="9.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="48.8" y="1422.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (1 samples, 0.28%)</title><rect x="45.8" y="1395.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="48.8" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (1 samples, 0.28%)</title><rect x="45.8" y="1379.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="48.8" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (1 samples, 0.28%)</title><rect x="45.8" y="1363.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="48.8" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (1 samples, 0.28%)</title><rect x="45.8" y="1347.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="48.8" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.28%)</title><rect x="45.8" y="1331.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="48.8" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.28%)</title><rect x="45.8" y="1315.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="48.8" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.28%)</title><rect x="45.8" y="1299.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="48.8" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.28%)</title><rect x="45.8" y="1283.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="48.8" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.28%)</title><rect x="45.8" y="1267.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="48.8" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (2 samples, 0.55%)</title><rect x="49.0" y="1395.0" width="6.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="52.0" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 0.55%)</title><rect x="49.0" y="1379.0" width="6.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="52.0" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.55%)</title><rect x="49.0" y="1363.0" width="6.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="52.0" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.55%)</title><rect x="49.0" y="1347.0" width="6.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="52.0" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.55%)</title><rect x="49.0" y="1331.0" width="6.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="52.0" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.55%)</title><rect x="49.0" y="1315.0" width="6.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="52.0" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.55%)</title><rect x="49.0" y="1299.0" width="6.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="52.0" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (13 samples, 3.58%)</title><rect x="55.5" y="1443.0" width="42.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="58.5" y="1454.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (13 samples, 3.58%)</title><rect x="55.5" y="1427.0" width="42.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="58.5" y="1438.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (12 samples, 3.31%)</title><rect x="55.5" y="1411.0" width="39.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="58.5" y="1422.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.55%)</title><rect x="55.5" y="1395.0" width="6.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="58.5" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.55%)</title><rect x="55.5" y="1379.0" width="6.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="58.5" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.55%)</title><rect x="55.5" y="1363.0" width="6.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="58.5" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.55%)</title><rect x="55.5" y="1347.0" width="6.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="58.5" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.28%)</title><rect x="55.5" y="1331.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="58.5" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.28%)</title><rect x="55.5" y="1315.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="58.5" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesReceived (1 samples, 0.28%)</title><rect x="55.5" y="1299.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="58.5" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.28%)</title><rect x="55.5" y="1283.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="58.5" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.28%)</title><rect x="55.5" y="1267.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="58.5" y="1278.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.28%)</title><rect x="55.5" y="1251.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="58.5" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.28%)</title><rect x="58.8" y="1331.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="61.8" y="1342.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.28%)</title><rect x="58.8" y="1315.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="61.8" y="1326.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.28%)</title><rect x="58.8" y="1299.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="61.8" y="1310.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.28%)</title><rect x="58.8" y="1283.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="61.8" y="1294.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.28%)</title><rect x="58.8" y="1267.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="61.8" y="1278.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.28%)</title><rect x="58.8" y="1251.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="61.8" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (8 samples, 2.20%)</title><rect x="62.0" y="1395.0" width="26.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="65.0" y="1406.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (8 samples, 2.20%)</title><rect x="62.0" y="1379.0" width="26.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="65.0" y="1390.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (7 samples, 1.93%)</title><rect x="62.0" y="1363.0" width="22.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="65.0" y="1374.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (7 samples, 1.93%)</title><rect x="62.0" y="1347.0" width="22.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="65.0" y="1358.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (5 samples, 1.38%)</title><rect x="62.0" y="1331.0" width="16.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="65.0" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.28%)</title><rect x="65.3" y="1315.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="68.3" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.record (1 samples, 0.28%)</title><rect x="65.3" y="1299.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="68.3" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.28%)</title><rect x="65.3" y="1283.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="68.3" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.28%)</title><rect x="65.3" y="1267.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="68.3" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.28%)</title><rect x="65.3" y="1251.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="68.3" y="1262.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.28%)</title><rect x="65.3" y="1235.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="68.3" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (2 samples, 0.55%)</title><rect x="68.5" y="1315.0" width="6.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="71.5" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (2 samples, 0.55%)</title><rect x="68.5" y="1299.0" width="6.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="71.5" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (2 samples, 0.55%)</title><rect x="68.5" y="1283.0" width="6.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="71.5" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (2 samples, 0.55%)</title><rect x="68.5" y="1267.0" width="6.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="71.5" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (2 samples, 0.55%)</title><rect x="68.5" y="1251.0" width="6.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="71.5" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (2 samples, 0.55%)</title><rect x="68.5" y="1235.0" width="6.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="71.5" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (2 samples, 0.55%)</title><rect x="68.5" y="1219.0" width="6.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="71.5" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.28%)</title><rect x="75.0" y="1315.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="78.0" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (2 samples, 0.55%)</title><rect x="78.3" y="1331.0" width="6.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="81.3" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 0.55%)</title><rect x="78.3" y="1315.0" width="6.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="81.3" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.28%)</title><rect x="78.3" y="1299.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="81.3" y="1310.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.28%)</title><rect x="78.3" y="1283.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="81.3" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.28%)</title><rect x="81.5" y="1299.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="84.5" y="1310.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.28%)</title><rect x="81.5" y="1283.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="84.5" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.28%)</title><rect x="84.8" y="1363.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="87.8" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.28%)</title><rect x="84.8" y="1347.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="87.8" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.28%)</title><rect x="84.8" y="1331.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="87.8" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.28%)</title><rect x="84.8" y="1315.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="87.8" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.28%)</title><rect x="84.8" y="1299.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="87.8" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.28%)</title><rect x="84.8" y="1283.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="87.8" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Value.record (1 samples, 0.28%)</title><rect x="84.8" y="1267.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="87.8" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.55%)</title><rect x="88.0" y="1395.0" width="6.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="91.0" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 0.55%)</title><rect x="88.0" y="1379.0" width="6.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="91.0" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.28%)</title><rect x="91.3" y="1363.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="94.3" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.28%)</title><rect x="94.5" y="1411.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="97.5" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.28%)</title><rect x="94.5" y="1395.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="97.5" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.28%)</title><rect x="94.5" y="1379.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="97.5" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.28%)</title><rect x="94.5" y="1363.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="97.5" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.28%)</title><rect x="94.5" y="1347.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="97.5" y="1358.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.28%)</title><rect x="94.5" y="1331.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="97.5" y="1342.0"></text>
</g>
<g>
<title>java/lang/Thread.run (236 samples, 65.01%)</title><rect x="97.8" y="1475.0" width="767.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="100.8" y="1486.0">java/lang/Thread.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$288/567194440.run (1 samples, 0.28%)</title><rect x="97.8" y="1459.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="100.8" y="1470.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62 (1 samples, 0.28%)</title><rect x="97.8" y="1443.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="100.8" y="1454.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (1 samples, 0.28%)</title><rect x="97.8" y="1427.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="100.8" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (1 samples, 0.28%)</title><rect x="97.8" y="1411.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="100.8" y="1422.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (1 samples, 0.28%)</title><rect x="97.8" y="1395.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="100.8" y="1406.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.28%)</title><rect x="97.8" y="1379.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="100.8" y="1390.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.28%)</title><rect x="97.8" y="1363.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="100.8" y="1374.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.28%)</title><rect x="97.8" y="1347.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="100.8" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (235 samples, 64.74%)</title><rect x="101.0" y="1459.0" width="763.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="104.0" y="1470.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (235 samples, 64.74%)</title><rect x="101.0" y="1443.0" width="763.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="104.0" y="1454.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$288/567194440.run (219 samples, 60.33%)</title><rect x="101.0" y="1427.0" width="711.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="104.0" y="1438.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$288/567194440.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62 (219 samples, 60.33%)</title><rect x="101.0" y="1411.0" width="711.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="104.0" y="1422.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (219 samples, 60.33%)</title><rect x="101.0" y="1395.0" width="711.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="104.0" y="1406.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (219 samples, 60.33%)</title><rect x="101.0" y="1379.0" width="711.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="104.0" y="1390.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (4 samples, 1.10%)</title><rect x="127.0" y="1363.0" width="13.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="130.0" y="1374.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (4 samples, 1.10%)</title><rect x="127.0" y="1347.0" width="13.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="130.0" y="1358.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 1.10%)</title><rect x="127.0" y="1331.0" width="13.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="130.0" y="1342.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.28%)</title><rect x="127.0" y="1315.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="130.0" y="1326.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.83%)</title><rect x="130.3" y="1315.0" width="9.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="133.3" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (24 samples, 6.61%)</title><rect x="140.0" y="1363.0" width="78.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="143.0" y="1374.0">com/linec..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/260840925.linkToTargetMethod (1 samples, 0.28%)</title><rect x="140.0" y="1347.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="143.0" y="1358.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/205962452.invokeStatic_L_L (1 samples, 0.28%)</title><rect x="140.0" y="1331.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="143.0" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$301/48949765.get$Lambda (1 samples, 0.28%)</title><rect x="140.0" y="1315.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="143.0" y="1326.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.28%)</title><rect x="140.0" y="1299.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="143.0" y="1310.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.28%)</title><rect x="140.0" y="1283.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="143.0" y="1294.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.28%)</title><rect x="140.0" y="1267.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="143.0" y="1278.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.28%)</title><rect x="140.0" y="1251.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="143.0" y="1262.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.28%)</title><rect x="140.0" y="1235.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="143.0" y="1246.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.28%)</title><rect x="140.0" y="1219.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="143.0" y="1230.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.28%)</title><rect x="140.0" y="1203.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="143.0" y="1214.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.28%)</title><rect x="140.0" y="1187.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="143.0" y="1198.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.28%)</title><rect x="140.0" y="1171.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="143.0" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (23 samples, 6.34%)</title><rect x="143.3" y="1347.0" width="74.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="146.3" y="1358.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (23 samples, 6.34%)</title><rect x="143.3" y="1331.0" width="74.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="146.3" y="1342.0">java/uti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (1 samples, 0.28%)</title><rect x="172.5" y="1315.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="175.5" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (13 samples, 3.58%)</title><rect x="175.8" y="1315.0" width="42.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="178.8" y="1326.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (13 samples, 3.58%)</title><rect x="175.8" y="1299.0" width="42.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="178.8" y="1310.0">java..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$301/48949765.accept (13 samples, 3.58%)</title><rect x="175.8" y="1283.0" width="42.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="178.8" y="1294.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (13 samples, 3.58%)</title><rect x="175.8" y="1267.0" width="42.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="178.8" y="1278.0">com/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (13 samples, 3.58%)</title><rect x="175.8" y="1251.0" width="42.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="178.8" y="1262.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (13 samples, 3.58%)</title><rect x="175.8" y="1235.0" width="42.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="178.8" y="1246.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (13 samples, 3.58%)</title><rect x="175.8" y="1219.0" width="42.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="178.8" y="1230.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (4 samples, 1.10%)</title><rect x="175.8" y="1203.0" width="13.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="178.8" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (4 samples, 1.10%)</title><rect x="175.8" y="1187.0" width="13.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="178.8" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$285/587439653.accept (1 samples, 0.28%)</title><rect x="175.8" y="1171.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="178.8" y="1182.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.83%)</title><rect x="179.0" y="1171.0" width="9.8" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="182.0" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (9 samples, 2.48%)</title><rect x="188.8" y="1203.0" width="29.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="191.8" y="1214.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$286/651014923.accept (1 samples, 0.28%)</title><rect x="211.5" y="1187.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="214.5" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$receive$83 (1 samples, 0.28%)</title><rect x="211.5" y="1171.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="214.5" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$285/587439653.accept (1 samples, 0.28%)</title><rect x="214.8" y="1187.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="217.8" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (40 samples, 11.02%)</title><rect x="218.0" y="1363.0" width="130.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="221.0" y="1374.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$45/1556995360.extract (40 samples, 11.02%)</title><rect x="218.0" y="1347.0" width="130.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="221.0" y="1358.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (40 samples, 11.02%)</title><rect x="218.0" y="1331.0" width="130.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="221.0" y="1342.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (40 samples, 11.02%)</title><rect x="218.0" y="1315.0" width="130.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="221.0" y="1326.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (40 samples, 11.02%)</title><rect x="218.0" y="1299.0" width="130.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="221.0" y="1310.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (40 samples, 11.02%)</title><rect x="218.0" y="1283.0" width="130.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="221.0" y="1294.0">com/fasterxml/ja..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (18 samples, 4.96%)</title><rect x="218.0" y="1267.0" width="58.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="221.0" y="1278.0">com/fa..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.28%)</title><rect x="240.8" y="1251.0" width="3.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="243.8" y="1262.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.28%)</title><rect x="240.8" y="1235.0" width="3.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="243.8" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 1.10%)</title><rect x="244.0" y="1251.0" width="13.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="247.0" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (4 samples, 1.10%)</title><rect x="244.0" y="1235.0" width="13.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="247.0" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (4 samples, 1.10%)</title><rect x="244.0" y="1219.0" width="13.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="247.0" y="1230.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 1.10%)</title><rect x="244.0" y="1203.0" width="13.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="247.0" y="1214.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 1.10%)</title><rect x="244.0" y="1187.0" width="13.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="247.0" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 1.10%)</title><rect x="244.0" y="1171.0" width="13.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="247.0" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (4 samples, 1.10%)</title><rect x="244.0" y="1155.0" width="13.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="247.0" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (6 samples, 1.65%)</title><rect x="257.1" y="1251.0" width="19.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="260.1" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (6 samples, 1.65%)</title><rect x="257.1" y="1235.0" width="19.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="260.1" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.55%)</title><rect x="263.6" y="1219.0" width="6.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="266.6" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 0.55%)</title><rect x="263.6" y="1203.0" width="6.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="266.6" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.55%)</title><rect x="270.1" y="1219.0" width="6.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="273.1" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 0.55%)</title><rect x="270.1" y="1203.0" width="6.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="273.1" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 0.55%)</title><rect x="270.1" y="1187.0" width="6.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="273.1" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (17 samples, 4.68%)</title><rect x="276.6" y="1267.0" width="55.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="279.6" y="1278.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.28%)</title><rect x="276.6" y="1251.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="279.6" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.28%)</title><rect x="276.6" y="1235.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="279.6" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.28%)</title><rect x="276.6" y="1219.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="279.6" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (5 samples, 1.38%)</title><rect x="279.8" y="1251.0" width="16.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="282.8" y="1262.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.55%)</title><rect x="279.8" y="1235.0" width="6.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="282.8" y="1246.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.28%)</title><rect x="279.8" y="1219.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="282.8" y="1230.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.28%)</title><rect x="283.1" y="1219.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="286.1" y="1230.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.28%)</title><rect x="283.1" y="1203.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="286.1" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 0.83%)</title><rect x="286.3" y="1235.0" width="9.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="289.3" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (11 samples, 3.03%)</title><rect x="296.1" y="1251.0" width="35.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="299.1" y="1262.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.28%)</title><rect x="296.1" y="1235.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="299.1" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (10 samples, 2.75%)</title><rect x="299.3" y="1235.0" width="32.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="302.3" y="1246.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.83%)</title><rect x="299.3" y="1219.0" width="9.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="302.3" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (7 samples, 1.93%)</title><rect x="309.1" y="1219.0" width="22.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="312.1" y="1230.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (7 samples, 1.93%)</title><rect x="309.1" y="1203.0" width="22.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="312.1" y="1214.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (7 samples, 1.93%)</title><rect x="309.1" y="1187.0" width="22.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="312.1" y="1198.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.28%)</title><rect x="312.3" y="1171.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="315.3" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.28%)</title><rect x="312.3" y="1155.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="315.3" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.28%)</title><rect x="312.3" y="1139.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="315.3" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.28%)</title><rect x="312.3" y="1123.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="315.3" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (3 samples, 0.83%)</title><rect x="315.6" y="1171.0" width="9.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="318.6" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 0.83%)</title><rect x="315.6" y="1155.0" width="9.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="318.6" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.83%)</title><rect x="315.6" y="1139.0" width="9.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="318.6" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.83%)</title><rect x="315.6" y="1123.0" width="9.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="318.6" y="1134.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 0.83%)</title><rect x="315.6" y="1107.0" width="9.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="318.6" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.28%)</title><rect x="325.3" y="1171.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="328.3" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.28%)</title><rect x="325.3" y="1155.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="328.3" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.28%)</title><rect x="325.3" y="1139.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="328.3" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.28%)</title><rect x="328.6" y="1171.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="331.6" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (5 samples, 1.38%)</title><rect x="331.8" y="1267.0" width="16.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="334.8" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (5 samples, 1.38%)</title><rect x="331.8" y="1251.0" width="16.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="334.8" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (5 samples, 1.38%)</title><rect x="331.8" y="1235.0" width="16.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="334.8" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (5 samples, 1.38%)</title><rect x="331.8" y="1219.0" width="16.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="334.8" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 1.38%)</title><rect x="331.8" y="1203.0" width="16.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="334.8" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$TreeBin.find (3 samples, 0.83%)</title><rect x="338.3" y="1187.0" width="9.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="341.3" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$TreeNode.findTreeNode (3 samples, 0.83%)</title><rect x="338.3" y="1171.0" width="9.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="341.3" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (141 samples, 38.84%)</title><rect x="348.1" y="1363.0" width="458.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="351.1" y="1374.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (21 samples, 5.79%)</title><rect x="364.3" y="1347.0" width="68.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="367.3" y="1358.0">com/lin..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (21 samples, 5.79%)</title><rect x="364.3" y="1331.0" width="68.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="367.3" y="1342.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (20 samples, 5.51%)</title><rect x="367.6" y="1315.0" width="65.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="370.6" y="1326.0">ch/qos/..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (16 samples, 4.41%)</title><rect x="367.6" y="1299.0" width="52.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="370.6" y="1310.0">java/..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (16 samples, 4.41%)</title><rect x="367.6" y="1283.0" width="52.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="370.6" y="1294.0">java/..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (16 samples, 4.41%)</title><rect x="367.6" y="1267.0" width="52.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="370.6" y="1278.0">java/..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (16 samples, 4.41%)</title><rect x="367.6" y="1251.0" width="52.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="370.6" y="1262.0">java/..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (4 samples, 1.10%)</title><rect x="419.6" y="1299.0" width="13.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="422.6" y="1310.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (3 samples, 0.83%)</title><rect x="422.8" y="1283.0" width="9.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="425.8" y="1294.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (3 samples, 0.83%)</title><rect x="422.8" y="1267.0" width="9.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="425.8" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (23 samples, 6.34%)</title><rect x="432.6" y="1347.0" width="74.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="435.6" y="1358.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (22 samples, 6.06%)</title><rect x="432.6" y="1331.0" width="71.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="435.6" y="1342.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (5 samples, 1.38%)</title><rect x="442.3" y="1315.0" width="16.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="445.3" y="1326.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 0.83%)</title><rect x="445.6" y="1299.0" width="9.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="448.6" y="1310.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 0.83%)</title><rect x="445.6" y="1283.0" width="9.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="448.6" y="1294.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.55%)</title><rect x="445.6" y="1267.0" width="6.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="448.6" y="1278.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.55%)</title><rect x="445.6" y="1251.0" width="6.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="448.6" y="1262.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.55%)</title><rect x="445.6" y="1235.0" width="6.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="448.6" y="1246.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.55%)</title><rect x="445.6" y="1219.0" width="6.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="448.6" y="1230.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.28%)</title><rect x="445.6" y="1203.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="448.6" y="1214.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.28%)</title><rect x="445.6" y="1187.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="448.6" y="1198.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.28%)</title><rect x="445.6" y="1171.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="448.6" y="1182.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.28%)</title><rect x="448.8" y="1203.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="451.8" y="1214.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.28%)</title><rect x="448.8" y="1187.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="451.8" y="1198.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.28%)</title><rect x="452.1" y="1267.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="455.1" y="1278.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.28%)</title><rect x="455.3" y="1299.0" width="3.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="458.3" y="1310.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.28%)</title><rect x="458.6" y="1315.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="461.6" y="1326.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.28%)</title><rect x="458.6" y="1299.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="461.6" y="1310.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.28%)</title><rect x="458.6" y="1283.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="461.6" y="1294.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.28%)</title><rect x="461.8" y="1315.0" width="3.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="464.8" y="1326.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (12 samples, 3.31%)</title><rect x="465.1" y="1315.0" width="39.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="468.1" y="1326.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (12 samples, 3.31%)</title><rect x="465.1" y="1299.0" width="39.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="468.1" y="1310.0">ch/..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (12 samples, 3.31%)</title><rect x="465.1" y="1283.0" width="39.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="468.1" y="1294.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.put (11 samples, 3.03%)</title><rect x="468.3" y="1267.0" width="35.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="471.3" y="1278.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.putVal (9 samples, 2.48%)</title><rect x="474.8" y="1251.0" width="29.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="477.8" y="1262.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.newNode (5 samples, 1.38%)</title><rect x="487.9" y="1235.0" width="16.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="490.9" y="1246.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.28%)</title><rect x="500.9" y="1219.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="503.9" y="1230.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.28%)</title><rect x="500.9" y="1203.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="503.9" y="1214.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.28%)</title><rect x="500.9" y="1187.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="503.9" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (1 samples, 0.28%)</title><rect x="504.1" y="1331.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="507.1" y="1342.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.28%)</title><rect x="504.1" y="1315.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="507.1" y="1326.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.28%)</title><rect x="504.1" y="1299.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="507.1" y="1310.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.28%)</title><rect x="504.1" y="1283.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="507.1" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (82 samples, 22.59%)</title><rect x="507.4" y="1347.0" width="266.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="510.4" y="1358.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (82 samples, 22.59%)</title><rect x="507.4" y="1331.0" width="266.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="510.4" y="1342.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$209/1522548880.process (61 samples, 16.80%)</title><rect x="507.4" y="1315.0" width="198.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="510.4" y="1326.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (61 samples, 16.80%)</title><rect x="507.4" y="1299.0" width="198.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="510.4" y="1310.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (60 samples, 16.53%)</title><rect x="507.4" y="1283.0" width="195.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="510.4" y="1294.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.55%)</title><rect x="507.4" y="1267.0" width="6.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="510.4" y="1278.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.55%)</title><rect x="507.4" y="1251.0" width="6.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="510.4" y="1262.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.55%)</title><rect x="507.4" y="1235.0" width="6.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="510.4" y="1246.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.55%)</title><rect x="507.4" y="1219.0" width="6.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="510.4" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.28%)</title><rect x="510.6" y="1203.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="513.6" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (57 samples, 15.70%)</title><rect x="513.9" y="1267.0" width="185.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="516.9" y="1278.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>java/lang/Thread.sleep (56 samples, 15.43%)</title><rect x="513.9" y="1251.0" width="182.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="516.9" y="1262.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (46 samples, 12.67%)</title><rect x="539.9" y="1235.0" width="149.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="542.9" y="1246.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (4 samples, 1.10%)</title><rect x="556.1" y="1219.0" width="13.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="559.1" y="1230.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.28%)</title><rect x="569.1" y="1219.0" width="3.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="572.1" y="1230.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.55%)</title><rect x="572.4" y="1219.0" width="6.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="575.4" y="1230.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.55%)</title><rect x="578.9" y="1219.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="581.9" y="1230.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.55%)</title><rect x="585.4" y="1219.0" width="6.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="588.4" y="1230.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (30 samples, 8.26%)</title><rect x="591.9" y="1219.0" width="97.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="594.9" y="1230.0">os::sleep(T..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.28%)</title><rect x="624.4" y="1203.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="627.4" y="1214.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.28%)</title><rect x="624.4" y="1187.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="627.4" y="1198.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 1.10%)</title><rect x="627.6" y="1203.0" width="13.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="630.6" y="1214.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (9 samples, 2.48%)</title><rect x="640.6" y="1203.0" width="29.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="643.6" y="1214.0">__..</text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.28%)</title><rect x="669.9" y="1203.0" width="3.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="672.9" y="1214.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.83%)</title><rect x="673.1" y="1203.0" width="9.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="676.1" y="1214.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.55%)</title><rect x="682.9" y="1203.0" width="6.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="685.9" y="1214.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.28%)</title><rect x="689.4" y="1235.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="692.4" y="1246.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (1 samples, 0.28%)</title><rect x="692.6" y="1235.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="695.6" y="1246.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.28%)</title><rect x="695.9" y="1251.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="698.9" y="1262.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.28%)</title><rect x="695.9" y="1235.0" width="3.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="698.9" y="1246.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.28%)</title><rect x="699.1" y="1267.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="702.1" y="1278.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.28%)</title><rect x="699.1" y="1251.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="702.1" y="1262.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.28%)</title><rect x="699.1" y="1235.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="702.1" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.28%)</title><rect x="702.4" y="1283.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="705.4" y="1294.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.28%)</title><rect x="702.4" y="1267.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="705.4" y="1278.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.28%)</title><rect x="702.4" y="1251.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="705.4" y="1262.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.28%)</title><rect x="702.4" y="1235.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="705.4" y="1246.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.28%)</title><rect x="702.4" y="1219.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="705.4" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (7 samples, 1.93%)</title><rect x="705.6" y="1315.0" width="22.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="708.6" y="1326.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (7 samples, 1.93%)</title><rect x="705.6" y="1299.0" width="22.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="708.6" y="1310.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (7 samples, 1.93%)</title><rect x="705.6" y="1283.0" width="22.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="708.6" y="1294.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (7 samples, 1.93%)</title><rect x="705.6" y="1267.0" width="22.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="708.6" y="1278.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (7 samples, 1.93%)</title><rect x="705.6" y="1251.0" width="22.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="708.6" y="1262.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 1.93%)</title><rect x="705.6" y="1235.0" width="22.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="708.6" y="1246.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.28%)</title><rect x="728.4" y="1315.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="731.4" y="1326.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.28%)</title><rect x="728.4" y="1299.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="731.4" y="1310.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 1.65%)</title><rect x="731.7" y="1315.0" width="19.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="734.7" y="1326.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.55%)</title><rect x="744.7" y="1299.0" width="6.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="747.7" y="1310.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.28%)</title><rect x="744.7" y="1283.0" width="3.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="747.7" y="1294.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.28%)</title><rect x="747.9" y="1283.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="750.9" y="1294.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.28%)</title><rect x="751.2" y="1315.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="754.2" y="1326.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.28%)</title><rect x="751.2" y="1299.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="754.2" y="1310.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.28%)</title><rect x="754.4" y="1315.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="757.4" y="1326.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.28%)</title><rect x="754.4" y="1299.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="757.4" y="1310.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.28%)</title><rect x="754.4" y="1283.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="757.4" y="1294.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.28%)</title><rect x="754.4" y="1267.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="757.4" y="1278.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.28%)</title><rect x="754.4" y="1251.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="757.4" y="1262.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.28%)</title><rect x="754.4" y="1235.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="757.4" y="1246.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.28%)</title><rect x="754.4" y="1219.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="757.4" y="1230.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.28%)</title><rect x="754.4" y="1203.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="757.4" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 1.10%)</title><rect x="757.7" y="1315.0" width="13.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="760.7" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.28%)</title><rect x="770.7" y="1315.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="773.7" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.28%)</title><rect x="770.7" y="1299.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="773.7" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.28%)</title><rect x="770.7" y="1283.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="773.7" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.28%)</title><rect x="770.7" y="1267.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="773.7" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.28%)</title><rect x="770.7" y="1251.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="773.7" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.28%)</title><rect x="770.7" y="1235.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="773.7" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 2.75%)</title><rect x="773.9" y="1347.0" width="32.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="776.9" y="1358.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 2.75%)</title><rect x="773.9" y="1331.0" width="32.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="776.9" y="1342.0">ja..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.28%)</title><rect x="799.9" y="1315.0" width="3.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="802.9" y="1326.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.28%)</title><rect x="799.9" y="1299.0" width="3.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="802.9" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.28%)</title><rect x="803.2" y="1315.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="806.2" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.28%)</title><rect x="803.2" y="1299.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="806.2" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$298/487407151.accept (1 samples, 0.28%)</title><rect x="803.2" y="1283.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="806.2" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$57 (1 samples, 0.28%)</title><rect x="803.2" y="1267.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="806.2" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.28%)</title><rect x="803.2" y="1251.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="806.2" y="1262.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.28%)</title><rect x="803.2" y="1235.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="806.2" y="1246.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.28%)</title><rect x="803.2" y="1219.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="806.2" y="1230.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.55%)</title><rect x="806.4" y="1363.0" width="6.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="809.4" y="1374.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.55%)</title><rect x="806.4" y="1347.0" width="6.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="809.4" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.55%)</title><rect x="812.9" y="1427.0" width="6.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="815.9" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.55%)</title><rect x="812.9" y="1411.0" width="6.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="815.9" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.55%)</title><rect x="812.9" y="1395.0" width="6.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="815.9" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.55%)</title><rect x="812.9" y="1379.0" width="6.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="815.9" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (14 samples, 3.86%)</title><rect x="819.4" y="1427.0" width="45.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="822.4" y="1438.0">java..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (12 samples, 3.31%)</title><rect x="822.7" y="1411.0" width="39.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="825.7" y="1422.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 1.10%)</title><rect x="848.7" y="1395.0" width="13.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="851.7" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 1.10%)</title><rect x="848.7" y="1379.0" width="13.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="851.7" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 1.10%)</title><rect x="848.7" y="1363.0" width="13.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="851.7" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateOf (1 samples, 0.28%)</title><rect x="861.7" y="1411.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="864.7" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.28%)</title><rect x="864.9" y="1475.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="867.9" y="1486.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.28%)</title><rect x="864.9" y="1459.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="867.9" y="1470.0"></text>
</g>
<g>
<title>start_thread (99 samples, 27.27%)</title><rect x="868.2" y="1475.0" width="321.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="871.2" y="1486.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (99 samples, 27.27%)</title><rect x="868.2" y="1459.0" width="321.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="871.2" y="1470.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (10 samples, 2.75%)</title><rect x="868.2" y="1443.0" width="32.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="871.2" y="1454.0">Ga..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (10 samples, 2.75%)</title><rect x="868.2" y="1427.0" width="32.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="871.2" y="1438.0">G1..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (9 samples, 2.48%)</title><rect x="868.2" y="1411.0" width="29.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="871.2" y="1422.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.28%)</title><rect x="868.2" y="1395.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="871.2" y="1406.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (8 samples, 2.20%)</title><rect x="871.4" y="1395.0" width="26.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="874.4" y="1406.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.55%)</title><rect x="884.4" y="1379.0" width="6.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="887.4" y="1390.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.28%)</title><rect x="887.7" y="1363.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="890.7" y="1374.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (2 samples, 0.55%)</title><rect x="890.9" y="1379.0" width="6.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="893.9" y="1390.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.28%)</title><rect x="897.4" y="1411.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="900.4" y="1422.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.28%)</title><rect x="897.4" y="1395.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="900.4" y="1406.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.28%)</title><rect x="897.4" y="1379.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="900.4" y="1390.0"></text>
</g>
<g>
<title>JavaThread::run() (89 samples, 24.52%)</title><rect x="900.7" y="1443.0" width="289.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="903.7" y="1454.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (89 samples, 24.52%)</title><rect x="900.7" y="1427.0" width="289.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="903.7" y="1438.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (89 samples, 24.52%)</title><rect x="900.7" y="1411.0" width="289.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="903.7" y="1422.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (89 samples, 24.52%)</title><rect x="900.7" y="1395.0" width="289.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="903.7" y="1406.0">CompileBroker::invoke_compiler_on_metho..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (86 samples, 23.69%)</title><rect x="900.7" y="1379.0" width="279.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="903.7" y="1390.0">C2Compiler::compile_method(ciEnv*, ci..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (86 samples, 23.69%)</title><rect x="900.7" y="1363.0" width="279.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="903.7" y="1374.0">Compile::Compile(ciEnv*, C2Compiler*,..</text>
</g>
<g>
<title>Compile::Code_Gen() (53 samples, 14.60%)</title><rect x="900.7" y="1347.0" width="172.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="903.7" y="1358.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.55%)</title><rect x="900.7" y="1331.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="903.7" y="1342.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.55%)</title><rect x="900.7" y="1315.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="903.7" y="1326.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.55%)</title><rect x="900.7" y="1299.0" width="6.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="903.7" y="1310.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.28%)</title><rect x="903.9" y="1283.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="906.9" y="1294.0"></text>
</g>
<g>
<title>MachOper::reg(PhaseRegAlloc*, Node const*) const (1 samples, 0.28%)</title><rect x="903.9" y="1267.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="906.9" y="1278.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (5 samples, 1.38%)</title><rect x="907.2" y="1331.0" width="16.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="910.2" y="1342.0"></text>
</g>
<g>
<title>CodeBuffer::locator_address(int) const (1 samples, 0.28%)</title><rect x="910.4" y="1315.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="913.4" y="1326.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.55%)</title><rect x="913.7" y="1315.0" width="6.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="916.7" y="1326.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.28%)</title><rect x="913.7" y="1299.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="916.7" y="1310.0"></text>
</g>
<g>
<title>ConstantOopWriteValue::write_on(DebugInfoWriteStream*) (1 samples, 0.28%)</title><rect x="913.7" y="1283.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="916.7" y="1294.0"></text>
</g>
<g>
<title>ValueRecorder&lt;_jobject*&gt;::maybe_find_index(_jobject*) (1 samples, 0.28%)</title><rect x="913.7" y="1267.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="916.7" y="1278.0"></text>
</g>
<g>
<title>DebugInformationRecorder::dump_object_pool(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.28%)</title><rect x="916.9" y="1299.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="919.9" y="1310.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.28%)</title><rect x="916.9" y="1283.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="919.9" y="1294.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.28%)</title><rect x="920.2" y="1315.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="923.2" y="1326.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.28%)</title><rect x="920.2" y="1299.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="923.2" y="1310.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 1.10%)</title><rect x="923.4" y="1331.0" width="13.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="926.4" y="1342.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 1.10%)</title><rect x="923.4" y="1315.0" width="13.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="926.4" y="1326.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 0.83%)</title><rect x="926.7" y="1299.0" width="9.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="929.7" y="1310.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.83%)</title><rect x="936.4" y="1331.0" width="9.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="939.4" y="1342.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.83%)</title><rect x="936.4" y="1315.0" width="9.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="939.4" y="1326.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.28%)</title><rect x="936.4" y="1299.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="939.4" y="1310.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.28%)</title><rect x="936.4" y="1283.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="939.4" y="1294.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.28%)</title><rect x="939.7" y="1299.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="942.7" y="1310.0"></text>
</g>
<g>
<title>Node::is_iteratively_computed() (1 samples, 0.28%)</title><rect x="939.7" y="1283.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="942.7" y="1294.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.28%)</title><rect x="939.7" y="1267.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="942.7" y="1278.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.28%)</title><rect x="942.9" y="1299.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="945.9" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (39 samples, 10.74%)</title><rect x="946.2" y="1331.0" width="126.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="949.2" y="1342.0">PhaseChaitin::Re..</text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.28%)</title><rect x="949.4" y="1315.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="952.4" y="1326.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.28%)</title><rect x="952.7" y="1315.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="955.7" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.55%)</title><rect x="956.0" y="1315.0" width="6.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="959.0" y="1326.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.55%)</title><rect x="956.0" y="1299.0" width="6.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="959.0" y="1310.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.28%)</title><rect x="959.2" y="1283.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="962.2" y="1294.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.55%)</title><rect x="962.5" y="1315.0" width="6.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="965.5" y="1326.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.55%)</title><rect x="962.5" y="1299.0" width="6.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="965.5" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 1.38%)</title><rect x="969.0" y="1315.0" width="16.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="972.0" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 1.38%)</title><rect x="985.2" y="1315.0" width="16.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="988.2" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.28%)</title><rect x="991.7" y="1299.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="994.7" y="1310.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.28%)</title><rect x="995.0" y="1299.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="998.0" y="1310.0"></text>
</g>
<g>
<title>decodeKlass_not_nullNode::rule() const (1 samples, 0.28%)</title><rect x="998.2" y="1299.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1001.2" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.28%)</title><rect x="1001.5" y="1315.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1004.5" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.28%)</title><rect x="1004.7" y="1315.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1007.7" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 1.10%)</title><rect x="1008.0" y="1315.0" width="13.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1011.0" y="1326.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.28%)</title><rect x="1014.5" y="1299.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1017.5" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.28%)</title><rect x="1017.7" y="1299.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1020.7" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (2 samples, 0.55%)</title><rect x="1021.0" y="1315.0" width="6.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1024.0" y="1326.0"></text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (1 samples, 0.28%)</title><rect x="1024.2" y="1299.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1027.2" y="1310.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (4 samples, 1.10%)</title><rect x="1027.5" y="1315.0" width="13.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1030.5" y="1326.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (4 samples, 1.10%)</title><rect x="1027.5" y="1299.0" width="13.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1030.5" y="1310.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (4 samples, 1.10%)</title><rect x="1027.5" y="1283.0" width="13.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1030.5" y="1294.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 0.55%)</title><rect x="1027.5" y="1267.0" width="6.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1030.5" y="1278.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (2 samples, 0.55%)</title><rect x="1034.0" y="1267.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1037.0" y="1278.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.55%)</title><rect x="1040.5" y="1315.0" width="6.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1043.5" y="1326.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.28%)</title><rect x="1043.7" y="1299.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1046.7" y="1310.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.28%)</title><rect x="1047.0" y="1315.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1050.0" y="1326.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.28%)</title><rect x="1047.0" y="1299.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1050.0" y="1310.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 1.38%)</title><rect x="1050.2" y="1315.0" width="16.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1053.2" y="1326.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (4 samples, 1.10%)</title><rect x="1053.5" y="1299.0" width="13.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1056.5" y="1310.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.28%)</title><rect x="1066.5" y="1315.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1069.5" y="1326.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.28%)</title><rect x="1069.7" y="1315.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1072.7" y="1326.0"></text>
</g>
<g>
<title>Compile::Optimize() (25 samples, 6.89%)</title><rect x="1073.0" y="1347.0" width="81.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1076.0" y="1358.0">Compile::..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.28%)</title><rect x="1073.0" y="1331.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1076.0" y="1342.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.28%)</title><rect x="1073.0" y="1315.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1076.0" y="1326.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.28%)</title><rect x="1073.0" y="1299.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1076.0" y="1310.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.28%)</title><rect x="1076.2" y="1331.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1079.2" y="1342.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.28%)</title><rect x="1076.2" y="1315.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1079.2" y="1326.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.28%)</title><rect x="1076.2" y="1299.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1079.2" y="1310.0"></text>
</g>
<g>
<title>CmpPNode::sub(Type const*, Type const*) const (1 samples, 0.28%)</title><rect x="1076.2" y="1283.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1079.2" y="1294.0"></text>
</g>
<g>
<title>TypeOopPtr::singleton() const (1 samples, 0.28%)</title><rect x="1076.2" y="1267.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1079.2" y="1278.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.28%)</title><rect x="1079.5" y="1331.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1082.5" y="1342.0"></text>
</g>
<g>
<title>SafePointNode::Value(PhaseTransform*) const (1 samples, 0.28%)</title><rect x="1079.5" y="1315.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1082.5" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (18 samples, 4.96%)</title><rect x="1082.7" y="1331.0" width="58.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1085.7" y="1342.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (4 samples, 1.10%)</title><rect x="1082.7" y="1315.0" width="13.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1085.7" y="1326.0"></text>
</g>
<g>
<title>CProjNode::is_CFG() const (1 samples, 0.28%)</title><rect x="1092.5" y="1299.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1095.5" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.55%)</title><rect x="1095.7" y="1315.0" width="6.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1098.7" y="1326.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.28%)</title><rect x="1099.0" y="1299.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1102.0" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 1.65%)</title><rect x="1102.2" y="1315.0" width="19.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1105.2" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (5 samples, 1.38%)</title><rect x="1105.5" y="1299.0" width="16.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1108.5" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.28%)</title><rect x="1105.5" y="1283.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1108.5" y="1294.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (4 samples, 1.10%)</title><rect x="1108.7" y="1283.0" width="13.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1111.7" y="1294.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.28%)</title><rect x="1118.5" y="1267.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1121.5" y="1278.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.28%)</title><rect x="1121.7" y="1315.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1124.7" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.28%)</title><rect x="1125.0" y="1315.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1128.0" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.83%)</title><rect x="1128.2" y="1315.0" width="9.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1131.2" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.28%)</title><rect x="1131.5" y="1299.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1134.5" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::spinup(Node*, Node*, Node*, Node*, Node*, small_cache*) (1 samples, 0.28%)</title><rect x="1131.5" y="1283.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1134.5" y="1294.0"></text>
</g>
<g>
<title>Dict::operator[](void const*) const (1 samples, 0.28%)</title><rect x="1131.5" y="1267.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.5" y="1278.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.28%)</title><rect x="1134.7" y="1299.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1137.7" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.28%)</title><rect x="1134.7" y="1283.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1137.7" y="1294.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.28%)</title><rect x="1134.7" y="1267.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1137.7" y="1278.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.28%)</title><rect x="1134.7" y="1251.0" width="3.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1137.7" y="1262.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.28%)</title><rect x="1138.0" y="1315.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1141.0" y="1326.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.55%)</title><rect x="1141.2" y="1331.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1144.2" y="1342.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.55%)</title><rect x="1141.2" y="1315.0" width="6.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1144.2" y="1326.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.28%)</title><rect x="1141.2" y="1299.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1144.2" y="1310.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.28%)</title><rect x="1141.2" y="1283.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1144.2" y="1294.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.28%)</title><rect x="1141.2" y="1267.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1144.2" y="1278.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.28%)</title><rect x="1141.2" y="1251.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1144.2" y="1262.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.28%)</title><rect x="1144.5" y="1299.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1147.5" y="1310.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.28%)</title><rect x="1147.7" y="1331.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1150.7" y="1342.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.28%)</title><rect x="1151.0" y="1331.0" width="3.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1154.0" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 1.93%)</title><rect x="1154.2" y="1347.0" width="22.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.2" y="1358.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 1.93%)</title><rect x="1154.2" y="1331.0" width="22.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.2" y="1342.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 1.93%)</title><rect x="1154.2" y="1315.0" width="22.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.2" y="1326.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 1.93%)</title><rect x="1154.2" y="1299.0" width="22.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1157.2" y="1310.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 1.93%)</title><rect x="1154.2" y="1283.0" width="22.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1157.2" y="1294.0">P..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 1.65%)</title><rect x="1154.2" y="1267.0" width="19.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1157.2" y="1278.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.28%)</title><rect x="1154.2" y="1251.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.2" y="1262.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.28%)</title><rect x="1154.2" y="1235.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.2" y="1246.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.28%)</title><rect x="1154.2" y="1219.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.2" y="1230.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.28%)</title><rect x="1154.2" y="1203.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1157.2" y="1214.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.28%)</title><rect x="1154.2" y="1187.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1157.2" y="1198.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.28%)</title><rect x="1154.2" y="1171.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1157.2" y="1182.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.28%)</title><rect x="1154.2" y="1155.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1157.2" y="1166.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.28%)</title><rect x="1154.2" y="1139.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1157.2" y="1150.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.28%)</title><rect x="1154.2" y="1123.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1157.2" y="1134.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.28%)</title><rect x="1154.2" y="1107.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1157.2" y="1118.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.28%)</title><rect x="1154.2" y="1091.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1157.2" y="1102.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.28%)</title><rect x="1154.2" y="1075.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1157.2" y="1086.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.28%)</title><rect x="1154.2" y="1059.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.2" y="1070.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.28%)</title><rect x="1154.2" y="1043.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.2" y="1054.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.28%)</title><rect x="1154.2" y="1027.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1157.2" y="1038.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.28%)</title><rect x="1154.2" y="1011.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1157.2" y="1022.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.28%)</title><rect x="1154.2" y="995.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.2" y="1006.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.28%)</title><rect x="1154.2" y="979.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.2" y="990.0"></text>
</g>
<g>
<title>SystemDictionary::find_instance_or_array_klass(Symbol*, Handle, Handle, Thread*) (1 samples, 0.28%)</title><rect x="1154.2" y="963.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1157.2" y="974.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.28%)</title><rect x="1154.2" y="947.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1157.2" y="958.0"></text>
</g>
<g>
<title>Dictionary::find(int, unsigned int, Symbol*, ClassLoaderData*, Handle, Thread*) (1 samples, 0.28%)</title><rect x="1154.2" y="931.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.2" y="942.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.28%)</title><rect x="1157.5" y="1251.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.5" y="1262.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.28%)</title><rect x="1157.5" y="1235.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1160.5" y="1246.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.28%)</title><rect x="1157.5" y="1219.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.5" y="1230.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.28%)</title><rect x="1157.5" y="1203.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.5" y="1214.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.28%)</title><rect x="1157.5" y="1187.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.5" y="1198.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.28%)</title><rect x="1157.5" y="1171.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1160.5" y="1182.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.83%)</title><rect x="1160.7" y="1251.0" width="9.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.7" y="1262.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.83%)</title><rect x="1160.7" y="1235.0" width="9.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.7" y="1246.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.83%)</title><rect x="1160.7" y="1219.0" width="9.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.7" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.83%)</title><rect x="1160.7" y="1203.0" width="9.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.7" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.83%)</title><rect x="1160.7" y="1187.0" width="9.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1163.7" y="1198.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.83%)</title><rect x="1160.7" y="1171.0" width="9.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.7" y="1182.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.28%)</title><rect x="1160.7" y="1155.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.7" y="1166.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.28%)</title><rect x="1160.7" y="1139.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.7" y="1150.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.28%)</title><rect x="1160.7" y="1123.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.7" y="1134.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.28%)</title><rect x="1160.7" y="1107.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1163.7" y="1118.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.28%)</title><rect x="1160.7" y="1091.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.7" y="1102.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle, Thread*) (1 samples, 0.28%)</title><rect x="1160.7" y="1075.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.7" y="1086.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol_or_null() (1 samples, 0.28%)</title><rect x="1160.7" y="1059.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.7" y="1070.0"></text>
</g>
<g>
<title>SymbolTable::lookup_only(char const*, int, unsigned int&amp;) (1 samples, 0.28%)</title><rect x="1160.7" y="1043.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.7" y="1054.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.55%)</title><rect x="1164.0" y="1155.0" width="6.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.0" y="1166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.55%)</title><rect x="1164.0" y="1139.0" width="6.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.0" y="1150.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.55%)</title><rect x="1164.0" y="1123.0" width="6.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.0" y="1134.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.55%)</title><rect x="1164.0" y="1107.0" width="6.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.0" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.55%)</title><rect x="1164.0" y="1091.0" width="6.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1167.0" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.55%)</title><rect x="1164.0" y="1075.0" width="6.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.0" y="1086.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.55%)</title><rect x="1164.0" y="1059.0" width="6.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1167.0" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.55%)</title><rect x="1164.0" y="1043.0" width="6.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.0" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.55%)</title><rect x="1164.0" y="1027.0" width="6.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.0" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.55%)</title><rect x="1164.0" y="1011.0" width="6.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.0" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.55%)</title><rect x="1164.0" y="995.0" width="6.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.0" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.55%)</title><rect x="1164.0" y="979.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.0" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.55%)</title><rect x="1164.0" y="963.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.0" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.55%)</title><rect x="1164.0" y="947.0" width="6.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.0" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.55%)</title><rect x="1164.0" y="931.0" width="6.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.0" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.55%)</title><rect x="1164.0" y="915.0" width="6.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.0" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.55%)</title><rect x="1164.0" y="899.0" width="6.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.0" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.55%)</title><rect x="1164.0" y="883.0" width="6.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.0" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.55%)</title><rect x="1164.0" y="867.0" width="6.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.0" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.55%)</title><rect x="1164.0" y="851.0" width="6.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.0" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.55%)</title><rect x="1164.0" y="835.0" width="6.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.0" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.55%)</title><rect x="1164.0" y="819.0" width="6.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.0" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.55%)</title><rect x="1164.0" y="803.0" width="6.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.0" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.55%)</title><rect x="1164.0" y="787.0" width="6.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.0" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.55%)</title><rect x="1164.0" y="771.0" width="6.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.0" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.55%)</title><rect x="1164.0" y="755.0" width="6.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.0" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.55%)</title><rect x="1164.0" y="739.0" width="6.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.55%)</title><rect x="1164.0" y="723.0" width="6.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.55%)</title><rect x="1164.0" y="707.0" width="6.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1167.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.55%)</title><rect x="1164.0" y="691.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.55%)</title><rect x="1164.0" y="675.0" width="6.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.0" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.55%)</title><rect x="1164.0" y="659.0" width="6.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.0" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.55%)</title><rect x="1164.0" y="643.0" width="6.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.55%)</title><rect x="1164.0" y="627.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.55%)</title><rect x="1164.0" y="611.0" width="6.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.55%)</title><rect x="1164.0" y="595.0" width="6.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.55%)</title><rect x="1164.0" y="579.0" width="6.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.0" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1164.0" y="563.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.0" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1164.0" y="547.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1164.0" y="531.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1164.0" y="515.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1164.0" y="499.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1164.0" y="483.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.0" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1164.0" y="467.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.0" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1164.0" y="451.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.0" y="462.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.28%)</title><rect x="1164.0" y="435.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.0" y="446.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.28%)</title><rect x="1164.0" y="419.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.0" y="430.0"></text>
</g>
<g>
<title>GraphKit::cast_not_null(Node*, bool) (1 samples, 0.28%)</title><rect x="1164.0" y="403.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.0" y="414.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.28%)</title><rect x="1164.0" y="387.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.0" y="398.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.28%)</title><rect x="1164.0" y="371.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.0" y="382.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.28%)</title><rect x="1164.0" y="355.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.0" y="366.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.28%)</title><rect x="1164.0" y="339.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.0" y="350.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.28%)</title><rect x="1164.0" y="323.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.0" y="334.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.28%)</title><rect x="1164.0" y="307.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.0" y="318.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1167.2" y="563.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.2" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1167.2" y="547.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.2" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1167.2" y="531.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1167.2" y="515.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1167.2" y="499.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1167.2" y="483.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1167.2" y="467.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.2" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1167.2" y="451.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.2" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1167.2" y="435.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1167.2" y="419.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1167.2" y="403.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1167.2" y="387.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1167.2" y="371.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.2" y="382.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1167.2" y="355.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.2" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1167.2" y="339.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.2" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1167.2" y="323.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1167.2" y="307.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1167.2" y="291.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.2" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1167.2" y="275.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.2" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1167.2" y="259.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.2" y="270.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.28%)</title><rect x="1167.2" y="243.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.2" y="254.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.28%)</title><rect x="1167.2" y="227.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.2" y="238.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.28%)</title><rect x="1167.2" y="211.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.2" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.28%)</title><rect x="1167.2" y="195.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.2" y="206.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.28%)</title><rect x="1167.2" y="179.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.2" y="190.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.28%)</title><rect x="1167.2" y="163.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.2" y="174.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.28%)</title><rect x="1167.2" y="147.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.2" y="158.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.28%)</title><rect x="1167.2" y="131.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.2" y="142.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.28%)</title><rect x="1167.2" y="115.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.2" y="126.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.28%)</title><rect x="1167.2" y="99.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.2" y="110.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.28%)</title><rect x="1167.2" y="83.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.2" y="94.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.28%)</title><rect x="1167.2" y="67.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.2" y="78.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.28%)</title><rect x="1167.2" y="51.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.2" y="62.0"></text>
</g>
<g>
<title>ConstantPool::impl_name_ref_at(int, bool) (1 samples, 0.28%)</title><rect x="1167.2" y="35.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.2" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1170.5" y="1251.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.5" y="1262.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1170.5" y="1235.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.5" y="1246.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1170.5" y="1219.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.5" y="1230.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1170.5" y="1203.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.5" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1170.5" y="1187.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.5" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1170.5" y="1171.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1173.5" y="1182.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1170.5" y="1155.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.5" y="1166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1170.5" y="1139.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1173.5" y="1150.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1170.5" y="1123.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.5" y="1134.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1170.5" y="1107.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.5" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1170.5" y="1091.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.5" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1170.5" y="1075.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.5" y="1086.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.28%)</title><rect x="1170.5" y="1059.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1173.5" y="1070.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.28%)</title><rect x="1170.5" y="1043.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.5" y="1054.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.28%)</title><rect x="1170.5" y="1027.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.5" y="1038.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.28%)</title><rect x="1170.5" y="1011.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.5" y="1022.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.28%)</title><rect x="1170.5" y="995.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1173.5" y="1006.0"></text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 0.28%)</title><rect x="1170.5" y="979.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1173.5" y="990.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_appendix() (1 samples, 0.28%)</title><rect x="1173.7" y="1267.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.7" y="1278.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.28%)</title><rect x="1177.0" y="1347.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.0" y="1358.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.28%)</title><rect x="1177.0" y="1331.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.0" y="1342.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.55%)</title><rect x="1180.2" y="1379.0" width="6.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.2" y="1390.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.55%)</title><rect x="1180.2" y="1363.0" width="6.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.2" y="1374.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.55%)</title><rect x="1180.2" y="1347.0" width="6.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.2" y="1358.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.55%)</title><rect x="1180.2" y="1331.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.2" y="1342.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.55%)</title><rect x="1180.2" y="1315.0" width="6.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.2" y="1326.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 0.55%)</title><rect x="1180.2" y="1299.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.2" y="1310.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.28%)</title><rect x="1180.2" y="1283.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.2" y="1294.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.28%)</title><rect x="1180.2" y="1267.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.2" y="1278.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.28%)</title><rect x="1180.2" y="1251.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.2" y="1262.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (1 samples, 0.28%)</title><rect x="1180.2" y="1235.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.2" y="1246.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.28%)</title><rect x="1183.5" y="1283.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.5" y="1294.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(LIR_OpList*, IntervalWalker*) (1 samples, 0.28%)</title><rect x="1183.5" y="1267.0" width="3.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.5" y="1278.0"></text>
</g>
<g>
<title>ciEnv::ciEnv(CompileTask*, int) (1 samples, 0.28%)</title><rect x="1186.7" y="1379.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.7" y="1390.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.28%)</title><rect x="1186.7" y="1363.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.7" y="1374.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.28%)</title><rect x="1186.7" y="1347.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.7" y="1358.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.28%)</title><rect x="1186.7" y="1331.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.7" y="1342.0"></text>
</g>
<g>
<title>java_lang_Class::protection_domain(oopDesc*) (1 samples, 0.28%)</title><rect x="1186.7" y="1315.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.7" y="1326.0"></text>
</g>
</g>
</svg>
