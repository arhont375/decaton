<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="934" onload="init(evt)" viewBox="0 0 1200 934" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="917"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="917"> </text>
<g id="frames">
<g>
<title>all (1,144 samples, 100.00%)</title><rect x="10.0" y="883.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="894.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.09%)</title><rect x="10.0" y="867.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>_new_array_nozero_Java (1 samples, 0.09%)</title><rect x="10.0" y="851.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="11.0" y="867.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="14.0" y="878.0"></text>
</g>
<g>
<title>__vsnprintf (1 samples, 0.09%)</title><rect x="11.0" y="851.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="14.0" y="862.0"></text>
</g>
<g>
<title>free (1 samples, 0.09%)</title><rect x="11.0" y="835.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="14.0" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (237 samples, 20.72%)</title><rect x="12.1" y="867.0" width="244.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.1" y="878.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (236 samples, 20.63%)</title><rect x="13.1" y="851.0" width="243.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.1" y="862.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (3 samples, 0.26%)</title><rect x="13.1" y="835.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.1" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (3 samples, 0.26%)</title><rect x="13.1" y="819.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.1" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.26%)</title><rect x="13.1" y="803.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.1" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.26%)</title><rect x="13.1" y="787.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.1" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.26%)</title><rect x="13.1" y="771.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.1" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.26%)</title><rect x="13.1" y="755.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.1" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.17%)</title><rect x="13.1" y="739.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.1" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="13.1" y="723.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.1" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="13.1" y="707.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.1" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="13.1" y="691.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.1" y="702.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="13.1" y="675.0" width="1.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="16.1" y="686.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.09%)</title><rect x="14.1" y="723.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.1" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.09%)</title><rect x="15.2" y="739.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="18.2" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.09%)</title><rect x="15.2" y="723.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.2" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.09%)</title><rect x="15.2" y="707.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.2" y="718.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.09%)</title><rect x="15.2" y="691.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="18.2" y="702.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.09%)</title><rect x="15.2" y="675.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.2" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (4 samples, 0.35%)</title><rect x="16.2" y="835.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="19.2" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (4 samples, 0.35%)</title><rect x="16.2" y="819.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.2" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (4 samples, 0.35%)</title><rect x="16.2" y="803.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.2" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$269/1029624210.accept (4 samples, 0.35%)</title><rect x="16.2" y="787.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="19.2" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (4 samples, 0.35%)</title><rect x="16.2" y="771.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="19.2" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (4 samples, 0.35%)</title><rect x="16.2" y="755.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.2" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (4 samples, 0.35%)</title><rect x="16.2" y="739.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="19.2" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.09%)</title><rect x="19.3" y="723.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.3" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (2 samples, 0.17%)</title><rect x="20.3" y="835.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.3" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.elapsedNanos (1 samples, 0.09%)</title><rect x="20.3" y="819.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="23.3" y="830.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.09%)</title><rect x="20.3" y="803.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="23.3" y="814.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="20.3" y="787.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="23.3" y="798.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.09%)</title><rect x="21.3" y="819.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="24.3" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="21.3" y="803.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="24.3" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="21.3" y="787.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="24.3" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="21.3" y="771.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="24.3" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="21.3" y="755.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="24.3" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="21.3" y="739.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="24.3" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="21.3" y="723.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="24.3" y="734.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="21.3" y="707.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="24.3" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.09%)</title><rect x="21.3" y="691.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="24.3" y="702.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.09%)</title><rect x="21.3" y="675.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="24.3" y="686.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.09%)</title><rect x="21.3" y="659.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="24.3" y="670.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.09%)</title><rect x="21.3" y="643.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="24.3" y="654.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (176 samples, 15.38%)</title><rect x="22.4" y="835.0" width="181.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="25.4" y="846.0">java/lang/Iterable.forE..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$268/1676727645.accept (167 samples, 14.60%)</title><rect x="23.4" y="819.0" width="172.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.4" y="830.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (167 samples, 14.60%)</title><rect x="23.4" y="803.0" width="172.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="26.4" y="814.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (154 samples, 13.46%)</title><rect x="23.4" y="787.0" width="158.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="26.4" y="798.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (154 samples, 13.46%)</title><rect x="23.4" y="771.0" width="158.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="26.4" y="782.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (154 samples, 13.46%)</title><rect x="23.4" y="755.0" width="158.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="26.4" y="766.0">com/linecorp/decaton..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (154 samples, 13.46%)</title><rect x="23.4" y="739.0" width="158.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="26.4" y="750.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (154 samples, 13.46%)</title><rect x="23.4" y="723.0" width="158.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="26.4" y="734.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (154 samples, 13.46%)</title><rect x="23.4" y="707.0" width="158.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="26.4" y="718.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (116 samples, 10.14%)</title><rect x="61.6" y="691.0" width="119.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="64.6" y="702.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (25 samples, 2.19%)</title><rect x="67.8" y="675.0" width="25.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="70.8" y="686.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (25 samples, 2.19%)</title><rect x="67.8" y="659.0" width="25.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="70.8" y="670.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (25 samples, 2.19%)</title><rect x="67.8" y="643.0" width="25.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="70.8" y="654.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (85 samples, 7.43%)</title><rect x="93.5" y="675.0" width="87.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="96.5" y="686.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (85 samples, 7.43%)</title><rect x="93.5" y="659.0" width="87.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="96.5" y="670.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (82 samples, 7.17%)</title><rect x="93.5" y="643.0" width="84.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="96.5" y="654.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.09%)</title><rect x="94.6" y="627.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="97.6" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (80 samples, 6.99%)</title><rect x="95.6" y="627.0" width="82.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="98.6" y="638.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (80 samples, 6.99%)</title><rect x="95.6" y="611.0" width="82.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="98.6" y="622.0">sun/misc/..</text>
</g>
<g>
<title>Unsafe_Unpark (69 samples, 6.03%)</title><rect x="96.6" y="595.0" width="71.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="99.6" y="606.0">Unsafe_U..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.26%)</title><rect x="97.7" y="579.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="100.7" y="590.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.09%)</title><rect x="100.8" y="579.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="103.8" y="590.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.09%)</title><rect x="101.8" y="579.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="104.8" y="590.0"></text>
</g>
<g>
<title>__pthread_cond_signal (47 samples, 4.11%)</title><rect x="102.8" y="579.0" width="48.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="105.8" y="590.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (3 samples, 0.26%)</title><rect x="151.3" y="579.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="154.3" y="590.0"></text>
</g>
<g>
<title>pthread_mutex_lock (13 samples, 1.14%)</title><rect x="154.4" y="579.0" width="13.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="157.4" y="590.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 0.35%)</title><rect x="167.8" y="595.0" width="4.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="170.8" y="606.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.26%)</title><rect x="171.9" y="595.0" width="3.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="174.9" y="606.0"></text>
</g>
<g>
<title>_init (2 samples, 0.17%)</title><rect x="175.0" y="595.0" width="2.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="178.0" y="606.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.09%)</title><rect x="177.1" y="595.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="180.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (3 samples, 0.26%)</title><rect x="178.1" y="643.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="181.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.09%)</title><rect x="178.1" y="627.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="181.1" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (2 samples, 0.17%)</title><rect x="179.2" y="627.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="182.2" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.09%)</title><rect x="181.2" y="691.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="184.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.09%)</title><rect x="181.2" y="675.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="184.2" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="181.2" y="659.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="184.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.09%)</title><rect x="181.2" y="643.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="184.2" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (12 samples, 1.05%)</title><rect x="182.3" y="787.0" width="12.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="185.3" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (8 samples, 0.70%)</title><rect x="186.4" y="771.0" width="8.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="189.4" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 0.61%)</title><rect x="187.4" y="755.0" width="7.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="190.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 0.61%)</title><rect x="187.4" y="739.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="190.4" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.17%)</title><rect x="192.6" y="723.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="195.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.17%)</title><rect x="192.6" y="707.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="195.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.17%)</title><rect x="192.6" y="691.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="195.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.09%)</title><rect x="194.6" y="787.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="197.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.09%)</title><rect x="194.6" y="771.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="197.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.09%)</title><rect x="194.6" y="755.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="197.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.09%)</title><rect x="194.6" y="739.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="197.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.09%)</title><rect x="194.6" y="723.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="197.6" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (6 samples, 0.52%)</title><rect x="195.7" y="819.0" width="6.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="198.7" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (6 samples, 0.52%)</title><rect x="195.7" y="803.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="198.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (6 samples, 0.52%)</title><rect x="195.7" y="787.0" width="6.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="198.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (6 samples, 0.52%)</title><rect x="195.7" y="771.0" width="6.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="198.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (2 samples, 0.17%)</title><rect x="201.9" y="819.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="204.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.17%)</title><rect x="201.9" y="803.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="204.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (51 samples, 4.46%)</title><rect x="203.9" y="835.0" width="52.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="206.9" y="846.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (51 samples, 4.46%)</title><rect x="203.9" y="819.0" width="52.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="206.9" y="830.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquireAndEnsureOpen (1 samples, 0.09%)</title><rect x="204.9" y="803.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="207.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (34 samples, 2.97%)</title><rect x="206.0" y="803.0" width="35.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="209.0" y="814.0">org..</text>
</g>
<g>
<title>java/util/HashMap.isEmpty (1 samples, 0.09%)</title><rect x="206.0" y="787.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="209.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (33 samples, 2.88%)</title><rect x="207.0" y="787.0" width="34.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="210.0" y="798.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (33 samples, 2.88%)</title><rect x="207.0" y="771.0" width="34.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="210.0" y="782.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (29 samples, 2.53%)</title><rect x="207.0" y="755.0" width="29.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="210.0" y="766.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (29 samples, 2.53%)</title><rect x="207.0" y="739.0" width="29.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="210.0" y="750.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (14 samples, 1.22%)</title><rect x="210.1" y="723.0" width="14.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="213.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (6 samples, 0.52%)</title><rect x="210.1" y="707.0" width="6.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="213.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (6 samples, 0.52%)</title><rect x="210.1" y="691.0" width="6.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="213.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (6 samples, 0.52%)</title><rect x="210.1" y="675.0" width="6.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="213.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (6 samples, 0.52%)</title><rect x="210.1" y="659.0" width="6.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="213.1" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (6 samples, 0.52%)</title><rect x="210.1" y="643.0" width="6.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="213.1" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (5 samples, 0.44%)</title><rect x="210.1" y="627.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="213.1" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (5 samples, 0.44%)</title><rect x="210.1" y="611.0" width="5.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="213.1" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.create (1 samples, 0.09%)</title><rect x="215.3" y="627.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="218.3" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C$PureJavaChecksumFactory.create (1 samples, 0.09%)</title><rect x="215.3" y="611.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="218.3" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (8 samples, 0.70%)</title><rect x="216.3" y="707.0" width="8.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="219.3" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (8 samples, 0.70%)</title><rect x="216.3" y="691.0" width="8.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="219.3" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (12 samples, 1.05%)</title><rect x="224.5" y="723.0" width="12.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="227.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (12 samples, 1.05%)</title><rect x="224.5" y="707.0" width="12.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="227.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (12 samples, 1.05%)</title><rect x="224.5" y="691.0" width="12.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="227.5" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (12 samples, 1.05%)</title><rect x="224.5" y="675.0" width="12.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="227.5" y="686.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (6 samples, 0.52%)</title><rect x="230.7" y="659.0" width="6.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="233.7" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (6 samples, 0.52%)</title><rect x="230.7" y="643.0" width="6.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="233.7" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (6 samples, 0.52%)</title><rect x="230.7" y="627.0" width="6.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="233.7" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (6 samples, 0.52%)</title><rect x="230.7" y="611.0" width="6.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="233.7" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.17%)</title><rect x="236.9" y="755.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="239.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.17%)</title><rect x="236.9" y="739.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="239.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="236.9" y="723.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="239.9" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="236.9" y="707.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="239.9" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="236.9" y="691.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="239.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (2 samples, 0.17%)</title><rect x="236.9" y="675.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="239.9" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.09%)</title><rect x="239.0" y="755.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="242.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.09%)</title><rect x="240.0" y="755.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="243.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.09%)</title><rect x="240.0" y="739.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="243.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (9 samples, 0.79%)</title><rect x="241.0" y="803.0" width="9.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="244.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (8 samples, 0.70%)</title><rect x="241.0" y="787.0" width="8.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="244.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (7 samples, 0.61%)</title><rect x="241.0" y="771.0" width="7.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="244.0" y="782.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.09%)</title><rect x="243.1" y="755.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="246.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$236/343880405.accept (1 samples, 0.09%)</title><rect x="243.1" y="739.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="246.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.09%)</title><rect x="243.1" y="723.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="246.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.09%)</title><rect x="243.1" y="707.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="246.1" y="718.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.09%)</title><rect x="244.1" y="755.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="247.1" y="766.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.09%)</title><rect x="244.1" y="739.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="247.1" y="750.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.09%)</title><rect x="244.1" y="723.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="247.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 0.17%)</title><rect x="245.2" y="755.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="248.2" y="766.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (2 samples, 0.17%)</title><rect x="245.2" y="739.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="248.2" y="750.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (2 samples, 0.17%)</title><rect x="245.2" y="723.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="248.2" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.next (1 samples, 0.09%)</title><rect x="245.2" y="707.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="248.2" y="718.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="246.2" y="707.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="249.2" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="246.2" y="691.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="249.2" y="702.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.hasNext (1 samples, 0.09%)</title><rect x="246.2" y="675.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="249.2" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.09%)</title><rect x="247.2" y="755.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="250.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.09%)</title><rect x="247.2" y="739.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="250.2" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="247.2" y="723.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="250.2" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="247.2" y="707.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="250.2" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="247.2" y="691.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="250.2" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="247.2" y="675.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="250.2" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="247.2" y="659.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="250.2" y="670.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="247.2" y="643.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="250.2" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.09%)</title><rect x="248.3" y="771.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="251.3" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.09%)</title><rect x="248.3" y="755.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="251.3" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="248.3" y="739.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="251.3" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.09%)</title><rect x="249.3" y="787.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="252.3" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.09%)</title><rect x="249.3" y="771.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="252.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.09%)</title><rect x="249.3" y="755.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="252.3" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.09%)</title><rect x="249.3" y="739.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="252.3" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (1 samples, 0.09%)</title><rect x="249.3" y="723.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="252.3" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (1 samples, 0.09%)</title><rect x="249.3" y="707.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="252.3" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="249.3" y="691.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="252.3" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="249.3" y="675.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="252.3" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 0.26%)</title><rect x="250.3" y="803.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="253.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.17%)</title><rect x="250.3" y="787.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="253.3" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.17%)</title><rect x="250.3" y="771.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="253.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.17%)</title><rect x="250.3" y="755.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="253.3" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (2 samples, 0.17%)</title><rect x="250.3" y="739.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="253.3" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (2 samples, 0.17%)</title><rect x="250.3" y="723.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="253.3" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (2 samples, 0.17%)</title><rect x="250.3" y="707.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="253.3" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (2 samples, 0.17%)</title><rect x="250.3" y="691.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="253.3" y="702.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (2 samples, 0.17%)</title><rect x="250.3" y="675.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="253.3" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (2 samples, 0.17%)</title><rect x="250.3" y="659.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="253.3" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (2 samples, 0.17%)</title><rect x="250.3" y="643.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="253.3" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.writev (1 samples, 0.09%)</title><rect x="250.3" y="627.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="253.3" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.09%)</title><rect x="251.4" y="627.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="254.4" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.09%)</title><rect x="252.4" y="787.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="255.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.09%)</title><rect x="252.4" y="771.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="255.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="252.4" y="755.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="255.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="252.4" y="739.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="255.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.09%)</title><rect x="252.4" y="723.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="255.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.09%)</title><rect x="252.4" y="707.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="255.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.09%)</title><rect x="252.4" y="691.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="255.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.sizeOf (1 samples, 0.09%)</title><rect x="252.4" y="675.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="255.4" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.sizeOf (1 samples, 0.09%)</title><rect x="252.4" y="659.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="255.4" y="670.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.09%)</title><rect x="252.4" y="643.0" width="1.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="255.4" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (3 samples, 0.26%)</title><rect x="253.4" y="803.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="256.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (3 samples, 0.26%)</title><rect x="253.4" y="787.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="256.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (3 samples, 0.26%)</title><rect x="253.4" y="771.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="256.4" y="782.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="254.5" y="755.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="257.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.09%)</title><rect x="255.5" y="755.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="258.5" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="255.5" y="739.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="258.5" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="255.5" y="723.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="258.5" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.09%)</title><rect x="255.5" y="707.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="258.5" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.09%)</title><rect x="255.5" y="691.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="258.5" y="702.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.09%)</title><rect x="255.5" y="675.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="258.5" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.09%)</title><rect x="255.5" y="659.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="258.5" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="255.5" y="643.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="258.5" y="654.0"></text>
</g>
<g>
<title>java/lang/Thread.run (808 samples, 70.63%)</title><rect x="256.5" y="867.0" width="833.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="259.5" y="878.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (808 samples, 70.63%)</title><rect x="256.5" y="851.0" width="833.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="259.5" y="862.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (808 samples, 70.63%)</title><rect x="256.5" y="835.0" width="833.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="259.5" y="846.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$288/1551383007.run (552 samples, 48.25%)</title><rect x="260.6" y="819.0" width="569.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="263.6" y="830.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$288/15513..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62 (552 samples, 48.25%)</title><rect x="260.6" y="803.0" width="569.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="263.6" y="814.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (552 samples, 48.25%)</title><rect x="260.6" y="787.0" width="569.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="263.6" y="798.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (552 samples, 48.25%)</title><rect x="260.6" y="771.0" width="569.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="263.6" y="782.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenPro..</text>
</g>
<g>
<title>__clock_gettime (11 samples, 0.96%)</title><rect x="264.8" y="755.0" width="11.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="267.8" y="766.0"></text>
</g>
<g>
<title>[vdso] (10 samples, 0.87%)</title><rect x="265.8" y="739.0" width="10.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="268.8" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (12 samples, 1.05%)</title><rect x="276.1" y="755.0" width="12.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="279.1" y="766.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (12 samples, 1.05%)</title><rect x="276.1" y="739.0" width="12.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="279.1" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.get (12 samples, 1.05%)</title><rect x="276.1" y="723.0" width="12.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="279.1" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.17%)</title><rect x="276.1" y="707.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="279.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.09%)</title><rect x="277.2" y="691.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="280.2" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (10 samples, 0.87%)</title><rect x="278.2" y="707.0" width="10.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="281.2" y="718.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.52%)</title><rect x="282.3" y="691.0" width="6.2" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="285.3" y="702.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.52%)</title><rect x="282.3" y="675.0" width="6.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="285.3" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (43 samples, 3.76%)</title><rect x="288.5" y="755.0" width="44.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="291.5" y="766.0">com/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (43 samples, 3.76%)</title><rect x="288.5" y="739.0" width="44.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="291.5" y="750.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (43 samples, 3.76%)</title><rect x="288.5" y="723.0" width="44.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="291.5" y="734.0">java..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (1 samples, 0.09%)</title><rect x="302.9" y="707.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="305.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (28 samples, 2.45%)</title><rect x="304.0" y="707.0" width="28.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="307.0" y="718.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.26%)</title><rect x="304.0" y="691.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="307.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (3 samples, 0.26%)</title><rect x="304.0" y="675.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="307.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (3 samples, 0.26%)</title><rect x="304.0" y="659.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="307.0" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$295/1579218967.accept (1 samples, 0.09%)</title><rect x="304.0" y="643.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="307.0" y="654.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.17%)</title><rect x="305.0" y="643.0" width="2.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="308.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (25 samples, 2.19%)</title><rect x="307.1" y="691.0" width="25.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="310.1" y="702.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$295/1579218967.accept (25 samples, 2.19%)</title><rect x="307.1" y="675.0" width="25.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="310.1" y="686.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (25 samples, 2.19%)</title><rect x="307.1" y="659.0" width="25.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="310.1" y="670.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (25 samples, 2.19%)</title><rect x="307.1" y="643.0" width="25.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="310.1" y="654.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (25 samples, 2.19%)</title><rect x="307.1" y="627.0" width="25.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="310.1" y="638.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (25 samples, 2.19%)</title><rect x="307.1" y="611.0" width="25.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="310.1" y="622.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (6 samples, 0.52%)</title><rect x="307.1" y="595.0" width="6.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="310.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (6 samples, 0.52%)</title><rect x="307.1" y="579.0" width="6.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="310.1" y="590.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.17%)</title><rect x="311.2" y="563.0" width="2.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="314.2" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (19 samples, 1.66%)</title><rect x="313.3" y="595.0" width="19.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="316.3" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (172 samples, 15.03%)</title><rect x="332.8" y="755.0" width="177.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="335.8" y="766.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$45/1556995360.extract (172 samples, 15.03%)</title><rect x="332.8" y="739.0" width="177.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="335.8" y="750.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (172 samples, 15.03%)</title><rect x="332.8" y="723.0" width="177.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="335.8" y="734.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="332.8" y="707.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="335.8" y="718.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="332.8" y="691.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="335.8" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="332.8" y="675.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="335.8" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="332.8" y="659.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="335.8" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (171 samples, 14.95%)</title><rect x="333.9" y="707.0" width="176.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="336.9" y="718.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (171 samples, 14.95%)</title><rect x="333.9" y="691.0" width="176.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="336.9" y="702.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (171 samples, 14.95%)</title><rect x="333.9" y="675.0" width="176.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="336.9" y="686.0">com/fasterxml/jackson/d..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="333.9" y="659.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="336.9" y="670.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="333.9" y="643.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="336.9" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="333.9" y="627.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="336.9" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="333.9" y="611.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="336.9" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="333.9" y="595.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="336.9" y="606.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="333.9" y="579.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="336.9" y="590.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.09%)</title><rect x="333.9" y="563.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="336.9" y="574.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.09%)</title><rect x="333.9" y="547.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="336.9" y="558.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.09%)</title><rect x="333.9" y="531.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="336.9" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (57 samples, 4.98%)</title><rect x="334.9" y="659.0" width="58.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="337.9" y="670.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (13 samples, 1.14%)</title><rect x="334.9" y="643.0" width="13.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="337.9" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (13 samples, 1.14%)</title><rect x="334.9" y="627.0" width="13.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="337.9" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (13 samples, 1.14%)</title><rect x="334.9" y="611.0" width="13.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="337.9" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (13 samples, 1.14%)</title><rect x="334.9" y="595.0" width="13.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="337.9" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="346.3" y="579.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="349.3" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="346.3" y="563.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="349.3" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.09%)</title><rect x="346.3" y="547.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="349.3" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.09%)</title><rect x="347.3" y="579.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="350.3" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (44 samples, 3.85%)</title><rect x="348.3" y="643.0" width="45.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="351.3" y="654.0">com/..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="348.3" y="627.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="351.3" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="348.3" y="611.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="351.3" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="348.3" y="595.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="351.3" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="348.3" y="579.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="351.3" y="590.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="348.3" y="563.0" width="1.1" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="351.3" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (43 samples, 3.76%)</title><rect x="349.4" y="627.0" width="44.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="352.4" y="638.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (13 samples, 1.14%)</title><rect x="349.4" y="611.0" width="13.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="352.4" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (13 samples, 1.14%)</title><rect x="349.4" y="595.0" width="13.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="352.4" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (1 samples, 0.09%)</title><rect x="359.7" y="579.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="362.7" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.17%)</title><rect x="360.7" y="579.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="363.7" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (20 samples, 1.75%)</title><rect x="362.8" y="611.0" width="20.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="365.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (20 samples, 1.75%)</title><rect x="362.8" y="595.0" width="20.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="365.8" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (1 samples, 0.09%)</title><rect x="371.0" y="579.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="374.0" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (3 samples, 0.26%)</title><rect x="372.0" y="579.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="375.0" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (6 samples, 0.52%)</title><rect x="375.1" y="579.0" width="6.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="378.1" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.09%)</title><rect x="381.3" y="579.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="384.3" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="381.3" y="563.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="384.3" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="381.3" y="547.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="384.3" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="381.3" y="531.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="384.3" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="381.3" y="515.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="384.3" y="526.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="381.3" y="499.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="384.3" y="510.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="381.3" y="483.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="384.3" y="494.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="381.3" y="467.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="384.3" y="478.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.09%)</title><rect x="381.3" y="451.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="384.3" y="462.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.09%)</title><rect x="381.3" y="435.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="384.3" y="446.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.09%)</title><rect x="381.3" y="419.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="384.3" y="430.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.09%)</title><rect x="382.4" y="579.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="385.4" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (10 samples, 0.87%)</title><rect x="383.4" y="611.0" width="10.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="386.4" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.17%)</title><rect x="383.4" y="595.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="386.4" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.17%)</title><rect x="383.4" y="579.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="386.4" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.17%)</title><rect x="383.4" y="563.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="386.4" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.17%)</title><rect x="383.4" y="547.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="386.4" y="558.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="383.4" y="531.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="386.4" y="542.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="384.4" y="531.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="387.4" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (3 samples, 0.26%)</title><rect x="385.5" y="595.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="388.5" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.getMask (1 samples, 0.09%)</title><rect x="387.5" y="579.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="390.5" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (5 samples, 0.44%)</title><rect x="388.5" y="595.0" width="5.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="391.5" y="606.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (3 samples, 0.26%)</title><rect x="390.6" y="579.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="393.6" y="590.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (3 samples, 0.26%)</title><rect x="390.6" y="563.0" width="3.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="393.6" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (99 samples, 8.65%)</title><rect x="393.7" y="659.0" width="102.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="396.7" y="670.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (5 samples, 0.44%)</title><rect x="393.7" y="643.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="396.7" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (5 samples, 0.44%)</title><rect x="393.7" y="627.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="396.7" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (5 samples, 0.44%)</title><rect x="393.7" y="611.0" width="5.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="396.7" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (5 samples, 0.44%)</title><rect x="393.7" y="595.0" width="5.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="396.7" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (2 samples, 0.17%)</title><rect x="395.8" y="579.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="398.8" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (2 samples, 0.17%)</title><rect x="395.8" y="563.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="398.8" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.checkedByteOffset (2 samples, 0.17%)</title><rect x="395.8" y="547.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="398.8" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.09%)</title><rect x="397.8" y="579.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="400.8" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (7 samples, 0.61%)</title><rect x="398.9" y="643.0" width="7.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="401.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (7 samples, 0.61%)</title><rect x="398.9" y="627.0" width="7.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="401.9" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.09%)</title><rect x="405.1" y="611.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="408.1" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (8 samples, 0.70%)</title><rect x="406.1" y="643.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="409.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (7 samples, 0.61%)</title><rect x="406.1" y="627.0" width="7.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="409.1" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.09%)</title><rect x="406.1" y="611.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="409.1" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.17%)</title><rect x="407.1" y="611.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="410.1" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.09%)</title><rect x="408.1" y="595.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="411.1" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.17%)</title><rect x="409.2" y="611.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="412.2" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.17%)</title><rect x="409.2" y="595.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="412.2" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.17%)</title><rect x="409.2" y="579.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="412.2" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.17%)</title><rect x="409.2" y="563.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="412.2" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.09%)</title><rect x="411.2" y="611.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="414.2" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.09%)</title><rect x="411.2" y="595.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="414.2" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.09%)</title><rect x="411.2" y="579.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="414.2" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.09%)</title><rect x="412.3" y="611.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="415.3" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.09%)</title><rect x="413.3" y="627.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="416.3" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (6 samples, 0.52%)</title><rect x="414.3" y="643.0" width="6.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="417.3" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 0.26%)</title><rect x="417.4" y="627.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="420.4" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (73 samples, 6.38%)</title><rect x="420.5" y="643.0" width="75.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="423.5" y="654.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (73 samples, 6.38%)</title><rect x="420.5" y="627.0" width="75.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="423.5" y="638.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (21 samples, 1.84%)</title><rect x="424.7" y="611.0" width="21.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="427.7" y="622.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (10 samples, 0.87%)</title><rect x="425.7" y="595.0" width="10.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="428.7" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (10 samples, 0.87%)</title><rect x="425.7" y="579.0" width="10.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="428.7" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (10 samples, 0.87%)</title><rect x="425.7" y="563.0" width="10.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="428.7" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.17%)</title><rect x="433.9" y="547.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="436.9" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.17%)</title><rect x="433.9" y="531.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="436.9" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (7 samples, 0.61%)</title><rect x="436.0" y="595.0" width="7.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="439.0" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (6 samples, 0.52%)</title><rect x="436.0" y="579.0" width="6.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="439.0" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (4 samples, 0.35%)</title><rect x="438.1" y="563.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="441.1" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.09%)</title><rect x="442.2" y="579.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="445.2" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.09%)</title><rect x="442.2" y="563.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="445.2" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.09%)</title><rect x="442.2" y="547.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="445.2" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (1 samples, 0.09%)</title><rect x="442.2" y="531.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="445.2" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.26%)</title><rect x="443.2" y="595.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="446.2" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.26%)</title><rect x="443.2" y="579.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="446.2" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (48 samples, 4.20%)</title><rect x="446.3" y="611.0" width="49.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="449.3" y="622.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (48 samples, 4.20%)</title><rect x="446.3" y="595.0" width="49.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="449.3" y="606.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (48 samples, 4.20%)</title><rect x="446.3" y="579.0" width="49.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="449.3" y="590.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (19 samples, 1.66%)</title><rect x="450.4" y="563.0" width="19.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="453.4" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (2 samples, 0.17%)</title><rect x="452.5" y="547.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="455.5" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.09%)</title><rect x="454.6" y="547.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="457.6" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (8 samples, 0.70%)</title><rect x="455.6" y="547.0" width="8.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="458.6" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (8 samples, 0.70%)</title><rect x="455.6" y="531.0" width="8.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="458.6" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (8 samples, 0.70%)</title><rect x="455.6" y="515.0" width="8.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="458.6" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.09%)</title><rect x="458.7" y="499.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="461.7" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (4 samples, 0.35%)</title><rect x="459.7" y="499.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="462.7" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (4 samples, 0.35%)</title><rect x="463.8" y="547.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="466.8" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (4 samples, 0.35%)</title><rect x="463.8" y="531.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="466.8" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (2 samples, 0.17%)</title><rect x="468.0" y="547.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="471.0" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (6 samples, 0.52%)</title><rect x="470.0" y="563.0" width="6.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="473.0" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (5 samples, 0.44%)</title><rect x="471.1" y="547.0" width="5.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="474.1" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 0.44%)</title><rect x="471.1" y="531.0" width="5.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="474.1" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 0.44%)</title><rect x="471.1" y="515.0" width="5.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="474.1" y="526.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (5 samples, 0.44%)</title><rect x="471.1" y="499.0" width="5.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="474.1" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.17%)</title><rect x="476.2" y="563.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="479.2" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (5 samples, 0.44%)</title><rect x="478.3" y="563.0" width="5.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="481.3" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (5 samples, 0.44%)</title><rect x="478.3" y="547.0" width="5.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="481.3" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (5 samples, 0.44%)</title><rect x="478.3" y="531.0" width="5.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="481.3" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (5 samples, 0.44%)</title><rect x="478.3" y="515.0" width="5.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="481.3" y="526.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (5 samples, 0.44%)</title><rect x="478.3" y="499.0" width="5.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="481.3" y="510.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (4 samples, 0.35%)</title><rect x="479.3" y="483.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="482.3" y="494.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor2.newInstance (1 samples, 0.09%)</title><rect x="482.4" y="467.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="485.4" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (5 samples, 0.44%)</title><rect x="483.4" y="563.0" width="5.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="486.4" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.44%)</title><rect x="483.4" y="547.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="486.4" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.44%)</title><rect x="483.4" y="531.0" width="5.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="486.4" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (7 samples, 0.61%)</title><rect x="488.6" y="563.0" width="7.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="491.6" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.09%)</title><rect x="494.8" y="547.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="497.8" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="494.8" y="531.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="497.8" y="542.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="494.8" y="515.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="497.8" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="494.8" y="499.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="497.8" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="494.8" y="483.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="497.8" y="494.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="494.8" y="467.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="497.8" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.09%)</title><rect x="494.8" y="451.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="497.8" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (14 samples, 1.22%)</title><rect x="495.8" y="659.0" width="14.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="498.8" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (14 samples, 1.22%)</title><rect x="495.8" y="643.0" width="14.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="498.8" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (14 samples, 1.22%)</title><rect x="495.8" y="627.0" width="14.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="498.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (14 samples, 1.22%)</title><rect x="495.8" y="611.0" width="14.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="498.8" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (14 samples, 1.22%)</title><rect x="495.8" y="595.0" width="14.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="498.8" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.09%)</title><rect x="508.2" y="579.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="511.2" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (1 samples, 0.09%)</title><rect x="509.2" y="579.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="512.2" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (305 samples, 26.66%)</title><rect x="510.3" y="755.0" width="314.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="513.3" y="766.0">com/linecorp/decaton/processor/runtime/int..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (58 samples, 5.07%)</title><rect x="516.5" y="739.0" width="59.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="519.5" y="750.0">com/li..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (58 samples, 5.07%)</title><rect x="516.5" y="723.0" width="59.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="519.5" y="734.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (53 samples, 4.63%)</title><rect x="521.6" y="707.0" width="54.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="524.6" y="718.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (7 samples, 0.61%)</title><rect x="522.6" y="691.0" width="7.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="525.6" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (7 samples, 0.61%)</title><rect x="522.6" y="675.0" width="7.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="525.6" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (7 samples, 0.61%)</title><rect x="522.6" y="659.0" width="7.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="525.6" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (7 samples, 0.61%)</title><rect x="522.6" y="643.0" width="7.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="525.6" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.17%)</title><rect x="529.9" y="691.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="532.9" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.17%)</title><rect x="529.9" y="675.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="532.9" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.17%)</title><rect x="529.9" y="659.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="532.9" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.17%)</title><rect x="529.9" y="643.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="532.9" y="654.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (43 samples, 3.76%)</title><rect x="531.9" y="691.0" width="44.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="534.9" y="702.0">java..</text>
</g>
<g>
<title>java/util/HashMap.remove (17 samples, 1.49%)</title><rect x="558.7" y="675.0" width="17.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="561.7" y="686.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.09%)</title><rect x="560.8" y="659.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="563.8" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.26%)</title><rect x="561.8" y="659.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="564.8" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.17%)</title><rect x="562.9" y="643.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="565.9" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (9 samples, 0.79%)</title><rect x="564.9" y="659.0" width="9.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="567.9" y="670.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.17%)</title><rect x="574.2" y="659.0" width="2.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="577.2" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (11 samples, 0.96%)</title><rect x="576.3" y="739.0" width="11.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="579.3" y="750.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (9 samples, 0.79%)</title><rect x="578.3" y="723.0" width="9.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="581.3" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (139 samples, 12.15%)</title><rect x="587.6" y="739.0" width="143.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="590.6" y="750.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (134 samples, 11.71%)</title><rect x="587.6" y="723.0" width="138.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="590.6" y="734.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (42 samples, 3.67%)</title><rect x="595.9" y="707.0" width="43.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="598.9" y="718.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (13 samples, 1.14%)</title><rect x="609.3" y="691.0" width="13.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="612.3" y="702.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (13 samples, 1.14%)</title><rect x="609.3" y="675.0" width="13.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="612.3" y="686.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (6 samples, 0.52%)</title><rect x="615.5" y="659.0" width="6.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="618.5" y="670.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (6 samples, 0.52%)</title><rect x="615.5" y="643.0" width="6.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="618.5" y="654.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (6 samples, 0.52%)</title><rect x="615.5" y="627.0" width="6.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="618.5" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (6 samples, 0.52%)</title><rect x="615.5" y="611.0" width="6.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="618.5" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.26%)</title><rect x="615.5" y="595.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="618.5" y="606.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.09%)</title><rect x="615.5" y="579.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="618.5" y="590.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="616.5" y="579.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="619.5" y="590.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.09%)</title><rect x="617.5" y="579.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="620.5" y="590.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.26%)</title><rect x="618.6" y="595.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="621.6" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="618.6" y="579.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="621.6" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="619.6" y="579.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="622.6" y="590.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.09%)</title><rect x="620.6" y="579.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="623.6" y="590.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.09%)</title><rect x="621.7" y="659.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="624.7" y="670.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (2 samples, 0.17%)</title><rect x="622.7" y="691.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="625.7" y="702.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.09%)</title><rect x="623.7" y="675.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="626.7" y="686.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.09%)</title><rect x="623.7" y="659.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="626.7" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="623.7" y="643.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="626.7" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="623.7" y="627.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="626.7" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="623.7" y="611.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="626.7" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="623.7" y="595.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="626.7" y="606.0"></text>
</g>
<g>
<title>jshort_arraycopy (3 samples, 0.26%)</title><rect x="624.8" y="691.0" width="3.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="627.8" y="702.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (11 samples, 0.96%)</title><rect x="627.8" y="691.0" width="11.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="630.8" y="702.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (6 samples, 0.52%)</title><rect x="639.2" y="707.0" width="6.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="642.2" y="718.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.09%)</title><rect x="639.2" y="691.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="642.2" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="639.2" y="675.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="642.2" y="686.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="639.2" y="659.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="642.2" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="639.2" y="643.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="642.2" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="639.2" y="627.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="642.2" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="639.2" y="611.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="642.2" y="622.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.09%)</title><rect x="639.2" y="595.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="642.2" y="606.0"></text>
</g>
<g>
<title>SurvRateGroup::next_age_index() (1 samples, 0.09%)</title><rect x="639.2" y="579.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="642.2" y="590.0"></text>
</g>
<g>
<title>java/lang/Long.toString (5 samples, 0.44%)</title><rect x="640.2" y="691.0" width="5.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="643.2" y="702.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.44%)</title><rect x="640.2" y="675.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="643.2" y="686.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (78 samples, 6.82%)</title><rect x="645.4" y="707.0" width="80.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="648.4" y="718.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (78 samples, 6.82%)</title><rect x="645.4" y="691.0" width="80.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="648.4" y="702.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 0.35%)</title><rect x="645.4" y="675.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="648.4" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 0.35%)</title><rect x="645.4" y="659.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="648.4" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (4 samples, 0.35%)</title><rect x="645.4" y="643.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="648.4" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 0.35%)</title><rect x="645.4" y="627.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="648.4" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.17%)</title><rect x="649.5" y="675.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="652.5" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.17%)</title><rect x="649.5" y="659.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="652.5" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.17%)</title><rect x="649.5" y="643.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="652.5" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.17%)</title><rect x="649.5" y="627.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="652.5" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.17%)</title><rect x="649.5" y="611.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="652.5" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (72 samples, 6.29%)</title><rect x="651.6" y="675.0" width="74.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="654.6" y="686.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.put (72 samples, 6.29%)</title><rect x="651.6" y="659.0" width="74.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="654.6" y="670.0">java/uti..</text>
</g>
<g>
<title>SharedRuntime::g1_wb_post(void*, JavaThread*) (1 samples, 0.09%)</title><rect x="692.8" y="643.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="695.8" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (31 samples, 2.71%)</title><rect x="693.9" y="643.0" width="31.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="696.9" y="654.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (4 samples, 0.35%)</title><rect x="707.3" y="627.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="710.3" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (12 samples, 1.05%)</title><rect x="711.4" y="627.0" width="12.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="714.4" y="638.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.17%)</title><rect x="723.8" y="627.0" width="2.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="726.8" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (5 samples, 0.44%)</title><rect x="725.8" y="723.0" width="5.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="728.8" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (5 samples, 0.44%)</title><rect x="725.8" y="707.0" width="5.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="728.8" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.44%)</title><rect x="725.8" y="691.0" width="5.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="728.8" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.44%)</title><rect x="725.8" y="675.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="728.8" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (57 samples, 4.98%)</title><rect x="731.0" y="739.0" width="58.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="734.0" y="750.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (2 samples, 0.17%)</title><rect x="731.0" y="723.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="734.0" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (55 samples, 4.81%)</title><rect x="733.1" y="723.0" width="56.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="736.1" y="734.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$209/252542782.process (25 samples, 2.19%)</title><rect x="735.1" y="707.0" width="25.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="738.1" y="718.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (25 samples, 2.19%)</title><rect x="735.1" y="691.0" width="25.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="738.1" y="702.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (24 samples, 2.10%)</title><rect x="736.2" y="675.0" width="24.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="739.2" y="686.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.17%)</title><rect x="746.5" y="659.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="749.5" y="670.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.17%)</title><rect x="746.5" y="643.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="749.5" y="654.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.17%)</title><rect x="746.5" y="627.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="749.5" y="638.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.17%)</title><rect x="746.5" y="611.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="749.5" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.17%)</title><rect x="746.5" y="595.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="749.5" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.09%)</title><rect x="747.5" y="579.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="750.5" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (11 samples, 0.96%)</title><rect x="748.5" y="659.0" width="11.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="751.5" y="670.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (10 samples, 0.87%)</title><rect x="749.6" y="643.0" width="10.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="752.6" y="654.0"></text>
</g>
<g>
<title>[vdso] (10 samples, 0.87%)</title><rect x="749.6" y="627.0" width="10.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="752.6" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="759.9" y="659.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="762.9" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="759.9" y="643.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="762.9" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="759.9" y="627.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="762.9" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (3 samples, 0.26%)</title><rect x="760.9" y="707.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="763.9" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (3 samples, 0.26%)</title><rect x="760.9" y="691.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="763.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (3 samples, 0.26%)</title><rect x="760.9" y="675.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="763.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (3 samples, 0.26%)</title><rect x="760.9" y="659.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="763.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.26%)</title><rect x="760.9" y="643.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="763.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.26%)</title><rect x="760.9" y="627.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="763.9" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.35%)</title><rect x="764.0" y="707.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="767.0" y="718.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.35%)</title><rect x="764.0" y="691.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="767.0" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.09%)</title><rect x="768.1" y="707.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="771.1" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.09%)</title><rect x="768.1" y="691.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="771.1" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 0.26%)</title><rect x="769.2" y="707.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="772.2" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.09%)</title><rect x="771.2" y="691.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="774.2" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.09%)</title><rect x="771.2" y="675.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="774.2" y="686.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.09%)</title><rect x="772.3" y="707.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="775.3" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.09%)</title><rect x="772.3" y="691.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="775.3" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (6 samples, 0.52%)</title><rect x="773.3" y="707.0" width="6.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="776.3" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.17%)</title><rect x="777.4" y="691.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="780.4" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.09%)</title><rect x="778.4" y="675.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="781.4" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="778.4" y="659.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="781.4" y="670.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="778.4" y="643.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="781.4" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="778.4" y="627.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="781.4" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="778.4" y="611.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="781.4" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="778.4" y="595.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="781.4" y="606.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="778.4" y="579.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="781.4" y="590.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="778.4" y="563.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="781.4" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.09%)</title><rect x="778.4" y="547.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="781.4" y="558.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.09%)</title><rect x="778.4" y="531.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="781.4" y="542.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.09%)</title><rect x="778.4" y="515.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="781.4" y="526.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_bytes_to_copy(HeapRegion*) (1 samples, 0.09%)</title><rect x="778.4" y="499.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="781.4" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 0.87%)</title><rect x="779.5" y="707.0" width="10.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="782.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 0.87%)</title><rect x="779.5" y="691.0" width="10.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="782.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (8 samples, 0.70%)</title><rect x="781.5" y="675.0" width="8.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="784.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (7 samples, 0.61%)</title><rect x="781.5" y="659.0" width="7.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="784.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (7 samples, 0.61%)</title><rect x="781.5" y="643.0" width="7.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="784.5" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (7 samples, 0.61%)</title><rect x="781.5" y="627.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="784.5" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$293/1029247036.accept (2 samples, 0.17%)</title><rect x="785.7" y="611.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="788.7" y="622.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="787.7" y="611.0" width="1.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="790.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.09%)</title><rect x="788.8" y="659.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="791.8" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (33 samples, 2.88%)</title><rect x="789.8" y="739.0" width="34.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="792.8" y="750.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (33 samples, 2.88%)</title><rect x="789.8" y="723.0" width="34.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="792.8" y="734.0">ja..</text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.61%)</title><rect x="801.1" y="707.0" width="7.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="804.1" y="718.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.52%)</title><rect x="802.2" y="691.0" width="6.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="805.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (14 samples, 1.22%)</title><rect x="808.4" y="707.0" width="14.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="811.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (7 samples, 0.61%)</title><rect x="808.4" y="691.0" width="7.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="811.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (6 samples, 0.52%)</title><rect x="808.4" y="675.0" width="6.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="811.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (6 samples, 0.52%)</title><rect x="808.4" y="659.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="811.4" y="670.0"></text>
</g>
<g>
<title>itable stub (5 samples, 0.44%)</title><rect x="809.4" y="643.0" width="5.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="812.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.09%)</title><rect x="814.5" y="675.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="817.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 0.61%)</title><rect x="815.6" y="691.0" width="7.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="818.6" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$294/1217822280.accept (6 samples, 0.52%)</title><rect x="816.6" y="675.0" width="6.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="819.6" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$57 (6 samples, 0.52%)</title><rect x="816.6" y="659.0" width="6.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="819.6" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (6 samples, 0.52%)</title><rect x="816.6" y="643.0" width="6.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="819.6" y="654.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (6 samples, 0.52%)</title><rect x="816.6" y="627.0" width="6.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="819.6" y="638.0"></text>
</g>
<g>
<title>java/time/Duration.create (6 samples, 0.52%)</title><rect x="816.6" y="611.0" width="6.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="819.6" y="622.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.35%)</title><rect x="817.6" y="595.0" width="4.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="820.6" y="606.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.26%)</title><rect x="818.7" y="579.0" width="3.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="821.7" y="590.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="821.8" y="595.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="824.8" y="606.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="822.8" y="707.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="825.8" y="718.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="823.8" y="739.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="826.8" y="750.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.44%)</title><rect x="824.9" y="755.0" width="5.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="827.9" y="766.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.44%)</title><rect x="824.9" y="739.0" width="5.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="827.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (8 samples, 0.70%)</title><rect x="830.0" y="819.0" width="8.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="833.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 0.70%)</title><rect x="830.0" y="803.0" width="8.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="833.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 0.70%)</title><rect x="830.0" y="787.0" width="8.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="833.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 0.70%)</title><rect x="830.0" y="771.0" width="8.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="833.0" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$288/1551383007.run (1 samples, 0.09%)</title><rect x="837.2" y="755.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="840.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (244 samples, 21.33%)</title><rect x="838.3" y="819.0" width="251.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="841.3" y="830.0">java/util/concurrent/ThreadPoolEx..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (242 samples, 21.15%)</title><rect x="840.3" y="803.0" width="249.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="843.3" y="814.0">java/util/concurrent/LinkedBlocki..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (221 samples, 19.32%)</title><rect x="861.0" y="787.0" width="227.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="864.0" y="798.0">java/util/concurrent/locks/Abs..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.09%)</title><rect x="874.4" y="771.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="877.4" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.09%)</title><rect x="874.4" y="755.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="877.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1 samples, 0.09%)</title><rect x="875.4" y="771.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="878.4" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="875.4" y="755.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="878.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (25 samples, 2.19%)</title><rect x="876.4" y="771.0" width="25.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="879.4" y="782.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (8 samples, 0.70%)</title><rect x="902.2" y="771.0" width="8.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="905.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 0.70%)</title><rect x="902.2" y="755.0" width="8.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="905.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 0.70%)</title><rect x="902.2" y="739.0" width="8.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="905.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 0.70%)</title><rect x="902.2" y="723.0" width="8.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="905.2" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (173 samples, 15.12%)</title><rect x="910.5" y="771.0" width="178.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="913.5" y="782.0">java/util/concurrent/lo..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (171 samples, 14.95%)</title><rect x="912.5" y="755.0" width="176.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="915.5" y="766.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.17%)</title><rect x="922.8" y="739.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="925.8" y="750.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.17%)</title><rect x="924.9" y="739.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="927.9" y="750.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="927.0" y="739.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="930.0" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.26%)</title><rect x="928.0" y="739.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="931.0" y="750.0"></text>
</g>
<g>
<title>Unsafe_Park (152 samples, 13.29%)</title><rect x="931.1" y="739.0" width="156.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="934.1" y="750.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="932.1" y="723.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="935.1" y="734.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (28 samples, 2.45%)</title><rect x="933.2" y="723.0" width="28.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="936.2" y="734.0">Pa..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (10 samples, 0.87%)</title><rect x="943.5" y="707.0" width="10.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="946.5" y="718.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (5 samples, 0.44%)</title><rect x="944.5" y="691.0" width="5.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="947.5" y="702.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (3 samples, 0.26%)</title><rect x="946.6" y="675.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="949.6" y="686.0"></text>
</g>
<g>
<title>pthread_getspecific (4 samples, 0.35%)</title><rect x="949.7" y="691.0" width="4.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="952.7" y="702.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.09%)</title><rect x="953.8" y="707.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="956.8" y="718.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="954.8" y="707.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="957.8" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (6 samples, 0.52%)</title><rect x="955.9" y="707.0" width="6.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="958.9" y="718.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (3 samples, 0.26%)</title><rect x="962.0" y="723.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="965.0" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.17%)</title><rect x="965.1" y="723.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="968.1" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.26%)</title><rect x="967.2" y="723.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="970.2" y="734.0"></text>
</g>
<g>
<title>__lll_lock_wait (6 samples, 0.52%)</title><rect x="970.3" y="723.0" width="6.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="973.3" y="734.0"></text>
</g>
<g>
<title>__lll_unlock_wake (41 samples, 3.58%)</title><rect x="976.5" y="723.0" width="42.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="979.5" y="734.0">__ll..</text>
</g>
<g>
<title>__pthread_cond_wait (50 samples, 4.37%)</title><rect x="1018.8" y="723.0" width="51.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1021.8" y="734.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.35%)</title><rect x="1070.3" y="723.0" width="4.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1073.3" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.09%)</title><rect x="1074.5" y="723.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1077.5" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.26%)</title><rect x="1075.5" y="723.0" width="3.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1078.5" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.26%)</title><rect x="1078.6" y="723.0" width="3.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1081.6" y="734.0"></text>
</g>
<g>
<title>_init (1 samples, 0.09%)</title><rect x="1081.7" y="723.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1084.7" y="734.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.09%)</title><rect x="1082.7" y="723.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1085.7" y="734.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.09%)</title><rect x="1083.8" y="723.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1086.8" y="734.0"></text>
</g>
<g>
<title>pthread_getspecific (3 samples, 0.26%)</title><rect x="1084.8" y="723.0" width="3.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1087.8" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.09%)</title><rect x="1087.9" y="739.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1090.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.09%)</title><rect x="1088.9" y="787.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1091.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.09%)</title><rect x="1088.9" y="771.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1091.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="1088.9" y="755.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1091.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.09%)</title><rect x="1088.9" y="739.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1091.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.09%)</title><rect x="1089.9" y="867.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1092.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.09%)</title><rect x="1089.9" y="851.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1092.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="1089.9" y="835.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1092.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.09%)</title><rect x="1089.9" y="819.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1092.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.requestIterator (1 samples, 0.09%)</title><rect x="1089.9" y="803.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1092.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.09%)</title><rect x="1089.9" y="787.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1092.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/Node.equals (1 samples, 0.09%)</title><rect x="1089.9" y="771.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1092.9" y="782.0"></text>
</g>
<g>
<title>start_thread (96 samples, 8.39%)</title><rect x="1091.0" y="867.0" width="99.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1094.0" y="878.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (96 samples, 8.39%)</title><rect x="1091.0" y="851.0" width="99.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1094.0" y="862.0">java_start(T..</text>
</g>
<g>
<title>GangWorker::loop() (20 samples, 1.75%)</title><rect x="1091.0" y="835.0" width="20.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1094.0" y="846.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (5 samples, 0.44%)</title><rect x="1091.0" y="819.0" width="5.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1094.0" y="830.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.44%)</title><rect x="1091.0" y="803.0" width="5.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1094.0" y="814.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.09%)</title><rect x="1091.0" y="787.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1094.0" y="798.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.35%)</title><rect x="1092.0" y="787.0" width="4.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1095.0" y="798.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (15 samples, 1.31%)</title><rect x="1096.1" y="819.0" width="15.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1099.1" y="830.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 0.35%)</title><rect x="1096.1" y="803.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1099.1" y="814.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.09%)</title><rect x="1096.1" y="787.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1099.1" y="798.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.09%)</title><rect x="1096.1" y="771.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1099.1" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.09%)</title><rect x="1096.1" y="755.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1099.1" y="766.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.09%)</title><rect x="1097.2" y="787.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1100.2" y="798.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.17%)</title><rect x="1098.2" y="787.0" width="2.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1101.2" y="798.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (5 samples, 0.44%)</title><rect x="1100.3" y="803.0" width="5.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1103.3" y="814.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.26%)</title><rect x="1100.3" y="787.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1103.3" y="798.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.09%)</title><rect x="1100.3" y="771.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1103.3" y="782.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.09%)</title><rect x="1100.3" y="755.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1103.3" y="766.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.09%)</title><rect x="1100.3" y="739.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1103.3" y="750.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.17%)</title><rect x="1101.3" y="771.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1104.3" y="782.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.17%)</title><rect x="1101.3" y="755.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1104.3" y="766.0"></text>
</g>
<g>
<title>frame::oops_entry_do(OopClosure*, RegisterMap const*) (1 samples, 0.09%)</title><rect x="1101.3" y="739.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1104.3" y="750.0"></text>
</g>
<g>
<title>JNIHandleBlock::oops_do(OopClosure*) (1 samples, 0.09%)</title><rect x="1101.3" y="723.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1104.3" y="734.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, CLDClosure*, RegisterMap const*, bool) (1 samples, 0.09%)</title><rect x="1102.3" y="739.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1105.3" y="750.0"></text>
</g>
<g>
<title>Method::mask_for(int, InterpreterOopMap*) (1 samples, 0.09%)</title><rect x="1102.3" y="723.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1105.3" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::mask_for(methodHandle, int, InterpreterOopMap*) (1 samples, 0.09%)</title><rect x="1102.3" y="707.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1105.3" y="718.0"></text>
</g>
<g>
<title>OopMapCache::lookup(methodHandle, int, InterpreterOopMap*) const (1 samples, 0.09%)</title><rect x="1102.3" y="691.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1105.3" y="702.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.09%)</title><rect x="1102.3" y="675.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1105.3" y="686.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.17%)</title><rect x="1103.4" y="787.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1106.4" y="798.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.09%)</title><rect x="1103.4" y="771.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1106.4" y="782.0"></text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.09%)</title><rect x="1104.4" y="771.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1107.4" y="782.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.09%)</title><rect x="1104.4" y="755.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1107.4" y="766.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (6 samples, 0.52%)</title><rect x="1105.4" y="803.0" width="6.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1108.4" y="814.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (6 samples, 0.52%)</title><rect x="1105.4" y="787.0" width="6.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1108.4" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (6 samples, 0.52%)</title><rect x="1105.4" y="771.0" width="6.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1108.4" y="782.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (6 samples, 0.52%)</title><rect x="1105.4" y="755.0" width="6.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1108.4" y="766.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (6 samples, 0.52%)</title><rect x="1105.4" y="739.0" width="6.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1108.4" y="750.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (6 samples, 0.52%)</title><rect x="1105.4" y="723.0" width="6.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1108.4" y="734.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (5 samples, 0.44%)</title><rect x="1106.5" y="707.0" width="5.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1109.5" y="718.0"></text>
</g>
<g>
<title>G1BlockOffsetArray::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.09%)</title><rect x="1107.5" y="691.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1110.5" y="702.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.09%)</title><rect x="1107.5" y="675.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1110.5" y="686.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.09%)</title><rect x="1108.5" y="691.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1111.5" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.09%)</title><rect x="1109.5" y="691.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1112.5" y="702.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, int) (1 samples, 0.09%)</title><rect x="1110.6" y="691.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1113.6" y="702.0"></text>
</g>
<g>
<title>JavaThread::run() (76 samples, 6.64%)</title><rect x="1111.6" y="835.0" width="78.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1114.6" y="846.0">JavaThrea..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (76 samples, 6.64%)</title><rect x="1111.6" y="819.0" width="78.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1114.6" y="830.0">JavaThrea..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (76 samples, 6.64%)</title><rect x="1111.6" y="803.0" width="78.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1114.6" y="814.0">CompileBr..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (76 samples, 6.64%)</title><rect x="1111.6" y="787.0" width="78.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1114.6" y="798.0">CompileBr..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (76 samples, 6.64%)</title><rect x="1111.6" y="771.0" width="78.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1114.6" y="782.0">C2Compile..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (76 samples, 6.64%)</title><rect x="1111.6" y="755.0" width="78.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1114.6" y="766.0">Compile::..</text>
</g>
<g>
<title>Compile::Code_Gen() (32 samples, 2.80%)</title><rect x="1111.6" y="739.0" width="33.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1114.6" y="750.0">Co..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.09%)</title><rect x="1111.6" y="723.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1114.6" y="734.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.09%)</title><rect x="1111.6" y="707.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1114.6" y="718.0"></text>
</g>
<g>
<title>jmpDirNode::short_branch_version(Compile*) (1 samples, 0.09%)</title><rect x="1111.6" y="691.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1114.6" y="702.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.17%)</title><rect x="1112.6" y="723.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1115.6" y="734.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.09%)</title><rect x="1113.7" y="707.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1116.7" y="718.0"></text>
</g>
<g>
<title>DebugInformationRecorder::dump_object_pool(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.09%)</title><rect x="1113.7" y="691.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1116.7" y="702.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.09%)</title><rect x="1113.7" y="675.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1116.7" y="686.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 0.26%)</title><rect x="1114.7" y="723.0" width="3.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1117.7" y="734.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.09%)</title><rect x="1114.7" y="707.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1117.7" y="718.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.09%)</title><rect x="1115.7" y="707.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1118.7" y="718.0"></text>
</g>
<g>
<title>Matcher::is_bmi_pattern(Node*, Node*) (1 samples, 0.09%)</title><rect x="1115.7" y="691.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1118.7" y="702.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.09%)</title><rect x="1116.8" y="707.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1119.8" y="718.0"></text>
</g>
<g>
<title>Matcher::collect_null_checks(Node*, Node*) (1 samples, 0.09%)</title><rect x="1116.8" y="691.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1119.8" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.26%)</title><rect x="1117.8" y="723.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1120.8" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.26%)</title><rect x="1117.8" y="707.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1120.8" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1117.8" y="691.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1120.8" y="702.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.09%)</title><rect x="1117.8" y="675.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1120.8" y="686.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (2 samples, 0.17%)</title><rect x="1118.8" y="691.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1121.8" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int) (1 samples, 0.09%)</title><rect x="1119.9" y="675.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1122.9" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (22 samples, 1.92%)</title><rect x="1120.9" y="723.0" width="22.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1123.9" y="734.0">P..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.09%)</title><rect x="1120.9" y="707.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1123.9" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.17%)</title><rect x="1121.9" y="707.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1124.9" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.09%)</title><rect x="1123.0" y="691.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1126.0" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1123.0" y="675.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1126.0" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.17%)</title><rect x="1124.0" y="707.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1127.0" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.17%)</title><rect x="1124.0" y="691.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1127.0" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1125.0" y="675.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1128.0" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 0.26%)</title><rect x="1126.0" y="707.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.0" y="718.0"></text>
</g>
<g>
<title>divD_reg_regNode::rule() const (1 samples, 0.09%)</title><rect x="1128.1" y="691.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1131.1" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 0.35%)</title><rect x="1129.1" y="707.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1132.1" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.17%)</title><rect x="1131.2" y="691.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1134.2" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1132.2" y="675.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1135.2" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.09%)</title><rect x="1133.3" y="707.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1136.3" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.26%)</title><rect x="1134.3" y="707.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1137.3" y="718.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.09%)</title><rect x="1136.4" y="691.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1139.4" y="702.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.09%)</title><rect x="1136.4" y="675.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1139.4" y="686.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.09%)</title><rect x="1137.4" y="707.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1140.4" y="718.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 0.35%)</title><rect x="1138.4" y="707.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1141.4" y="718.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.17%)</title><rect x="1140.5" y="691.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1143.5" y="702.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.09%)</title><rect x="1141.5" y="675.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1144.5" y="686.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1142.6" y="707.0" width="1.0" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1145.6" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.09%)</title><rect x="1143.6" y="723.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1146.6" y="734.0"></text>
</g>
<g>
<title>Compile::Optimize() (35 samples, 3.06%)</title><rect x="1144.6" y="739.0" width="36.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1147.6" y="750.0">Com..</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.09%)</title><rect x="1144.6" y="723.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1147.6" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.09%)</title><rect x="1145.6" y="723.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1148.6" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.09%)</title><rect x="1145.6" y="707.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.6" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.09%)</title><rect x="1145.6" y="691.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.6" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (27 samples, 2.36%)</title><rect x="1146.7" y="723.0" width="27.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1149.7" y="734.0">P..</text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.09%)</title><rect x="1146.7" y="707.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1149.7" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.09%)</title><rect x="1147.7" y="707.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.7" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (23 samples, 2.01%)</title><rect x="1148.7" y="707.0" width="23.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1151.7" y="718.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (20 samples, 1.75%)</title><rect x="1151.8" y="691.0" width="20.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1154.8" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.09%)</title><rect x="1151.8" y="675.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.8" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (19 samples, 1.66%)</title><rect x="1152.9" y="675.0" width="19.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.9" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.09%)</title><rect x="1167.3" y="659.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.3" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1167.3" y="643.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.3" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (4 samples, 0.35%)</title><rect x="1168.3" y="659.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.3" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.09%)</title><rect x="1172.5" y="707.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.5" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.09%)</title><rect x="1172.5" y="691.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.5" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::spinup(Node*, Node*, Node*, Node*, Node*, small_cache*) (1 samples, 0.09%)</title><rect x="1172.5" y="675.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.5" y="686.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.09%)</title><rect x="1173.5" y="707.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.5" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (6 samples, 0.52%)</title><rect x="1174.5" y="723.0" width="6.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.5" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 0.35%)</title><rect x="1175.6" y="707.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.6" y="718.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1175.6" y="691.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.6" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1175.6" y="675.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.6" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.09%)</title><rect x="1175.6" y="659.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.6" y="670.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1176.6" y="691.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.6" y="702.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (1 samples, 0.09%)</title><rect x="1176.6" y="675.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.6" y="686.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1176.6" y="659.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.6" y="670.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1176.6" y="643.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.6" y="654.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1176.6" y="627.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.6" y="638.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1176.6" y="611.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.6" y="622.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1176.6" y="595.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.6" y="606.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1177.6" y="691.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.6" y="702.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1178.7" y="691.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.7" y="702.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.09%)</title><rect x="1178.7" y="675.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.7" y="686.0"></text>
</g>
<g>
<title>RegionNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1179.7" y="707.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.7" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.70%)</title><rect x="1180.7" y="739.0" width="8.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.7" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.70%)</title><rect x="1180.7" y="723.0" width="8.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.70%)</title><rect x="1180.7" y="707.0" width="8.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.70%)</title><rect x="1180.7" y="691.0" width="8.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.61%)</title><rect x="1181.7" y="675.0" width="7.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.52%)</title><rect x="1181.7" y="659.0" width="6.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.7" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.44%)</title><rect x="1181.7" y="643.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.7" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.44%)</title><rect x="1181.7" y="627.0" width="5.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.44%)</title><rect x="1181.7" y="611.0" width="5.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.44%)</title><rect x="1181.7" y="595.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.44%)</title><rect x="1181.7" y="579.0" width="5.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.35%)</title><rect x="1181.7" y="563.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.7" y="574.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1181.7" y="547.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.7" y="558.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1181.7" y="531.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.7" y="542.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1181.7" y="515.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.7" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1181.7" y="499.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.7" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1181.7" y="483.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.7" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1181.7" y="467.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.7" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1181.7" y="451.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.7" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1181.7" y="435.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.7" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1181.7" y="419.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.7" y="430.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.09%)</title><rect x="1181.7" y="403.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.7" y="414.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1181.7" y="387.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.7" y="398.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1181.7" y="371.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.7" y="382.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1181.7" y="355.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.7" y="366.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1181.7" y="339.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.7" y="350.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1181.7" y="323.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.7" y="334.0"></text>
</g>
<g>
<title>ciSymbol::ciSymbol(Symbol*, vmSymbols::SID) (1 samples, 0.09%)</title><rect x="1181.7" y="307.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.7" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.8" y="547.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.8" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.8" y="531.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.8" y="515.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.8" y="499.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.8" y="483.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1182.8" y="467.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.8" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.8" y="451.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.8" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.8" y="435.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.8" y="419.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.8" y="403.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.8" y="387.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1182.8" y="371.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.8" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.8" y="355.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.8" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.8" y="339.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.8" y="323.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.8" y="307.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.8" y="291.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1182.8" y="275.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.8" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.8" y="259.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.8" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.8" y="243.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.8" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.8" y="227.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.8" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.8" y="211.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.8" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.8" y="195.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.8" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1182.8" y="179.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.8" y="190.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.8" y="163.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.8" y="174.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_ordered_store(BasicType) (1 samples, 0.09%)</title><rect x="1182.8" y="147.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.8" y="158.0"></text>
</g>
<g>
<title>GraphKit::store_oop_to_unknown(Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd) (1 samples, 0.09%)</title><rect x="1182.8" y="131.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.8" y="142.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.09%)</title><rect x="1182.8" y="115.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.8" y="126.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.09%)</title><rect x="1182.8" y="99.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.8" y="110.0"></text>
</g>
<g>
<title>StoreNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd) (1 samples, 0.09%)</title><rect x="1182.8" y="83.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.8" y="94.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1182.8" y="67.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.8" y="78.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1182.8" y="51.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.8" y="62.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1182.8" y="35.0" width="1.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1185.8" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1183.8" y="547.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.8" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1183.8" y="531.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.8" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1183.8" y="515.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1183.8" y="499.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1183.8" y="483.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1183.8" y="467.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1183.8" y="451.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.8" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1183.8" y="435.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.8" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1183.8" y="419.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1183.8" y="403.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1183.8" y="387.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1183.8" y="371.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1183.8" y="355.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.8" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.8" y="339.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.8" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1183.8" y="323.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1183.8" y="307.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1183.8" y="291.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1183.8" y="275.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1183.8" y="259.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.8" y="270.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1183.8" y="243.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.8" y="254.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1183.8" y="227.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.8" y="238.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1183.8" y="211.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.8" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1183.8" y="195.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.8" y="206.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1183.8" y="179.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.8" y="190.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1183.8" y="163.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.8" y="174.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1183.8" y="147.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.8" y="158.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1183.8" y="131.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.8" y="142.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.8" y="339.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.8" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.8" y="323.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.8" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1184.8" y="307.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1184.8" y="291.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1184.8" y="275.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1184.8" y="259.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.8" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1184.8" y="243.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.8" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.8" y="227.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.8" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1184.8" y="211.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.8" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1184.8" y="195.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.8" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1184.8" y="179.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.8" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1184.8" y="163.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.8" y="174.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1184.8" y="147.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.8" y="158.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1184.8" y="131.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.8" y="142.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.09%)</title><rect x="1184.8" y="115.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.8" y="126.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.09%)</title><rect x="1184.8" y="99.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.8" y="110.0"></text>
</g>
<g>
<title>MergeMemNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1184.8" y="83.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.8" y="94.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.09%)</title><rect x="1185.9" y="563.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.9" y="574.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.09%)</title><rect x="1185.9" y="547.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.9" y="558.0"></text>
</g>
<g>
<title>PhaseTransform::intcon(int) (1 samples, 0.09%)</title><rect x="1185.9" y="531.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.9" y="542.0"></text>
</g>
<g>
<title>TypeInt::make(int) (1 samples, 0.09%)</title><rect x="1185.9" y="515.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.9" y="526.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.09%)</title><rect x="1185.9" y="499.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.9" y="510.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1186.9" y="643.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.9" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1186.9" y="627.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.9" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1186.9" y="611.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1186.9" y="595.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1186.9" y="579.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1186.9" y="563.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1186.9" y="547.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.9" y="558.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1186.9" y="531.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.9" y="542.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, ciSymbol*, ciMethodType*) (1 samples, 0.09%)</title><rect x="1186.9" y="515.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1187.9" y="659.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1187.9" y="643.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.9" y="654.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.09%)</title><rect x="1187.9" y="627.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.9" y="638.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.09%)</title><rect x="1187.9" y="611.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.9" y="622.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1187.9" y="595.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.9" y="606.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1187.9" y="579.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.9" y="590.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.09%)</title><rect x="1189.0" y="739.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1192.0" y="750.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.09%)</title><rect x="1189.0" y="723.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1192.0" y="734.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.09%)</title><rect x="1189.0" y="707.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1192.0" y="718.0"></text>
</g>
<g>
<title>CodeBlob::CodeBlob(char const*, CodeBuffer*, int, int, int, int, OopMapSet*) (1 samples, 0.09%)</title><rect x="1189.0" y="691.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.0" y="702.0"></text>
</g>
<g>
<title>CodeBuffer::copy_code_to(CodeBlob*) (1 samples, 0.09%)</title><rect x="1189.0" y="675.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.0" y="686.0"></text>
</g>
<g>
<title>CodeBuffer::relocate_code_to(CodeBuffer*) const (1 samples, 0.09%)</title><rect x="1189.0" y="659.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1192.0" y="670.0"></text>
</g>
<g>
<title>CallRelocation::fix_relocation_after_move(CodeBuffer const*, CodeBuffer*) (1 samples, 0.09%)</title><rect x="1189.0" y="643.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.0" y="654.0"></text>
</g>
<g>
<title>Relocation::pd_call_destination(unsigned char*) (1 samples, 0.09%)</title><rect x="1189.0" y="627.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1192.0" y="638.0"></text>
</g>
</g>
</svg>
