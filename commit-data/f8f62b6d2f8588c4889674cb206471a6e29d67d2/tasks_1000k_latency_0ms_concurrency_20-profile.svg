<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1190" onload="init(evt)" viewBox="0 0 1200 1190" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1173"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1173"> </text>
<g id="frames">
<g>
<title>all (1,213 samples, 100.00%)</title><rect x="10.0" y="1139.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1150.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="10.0" y="1123.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>__vsnprintf (1 samples, 0.08%)</title><rect x="10.0" y="1107.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>vfprintf (1 samples, 0.08%)</title><rect x="10.0" y="1091.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (275 samples, 22.67%)</title><rect x="11.0" y="1123.0" width="267.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.0" y="1134.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.08%)</title><rect x="11.9" y="1107.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="14.9" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (1 samples, 0.08%)</title><rect x="11.9" y="1091.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.08%)</title><rect x="11.9" y="1075.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.08%)</title><rect x="11.9" y="1059.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.08%)</title><rect x="11.9" y="1043.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="11.9" y="1027.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="14.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.08%)</title><rect x="11.9" y="1011.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="14.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.08%)</title><rect x="11.9" y="995.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.08%)</title><rect x="11.9" y="979.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="14.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.08%)</title><rect x="11.9" y="963.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="14.9" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.08%)</title><rect x="11.9" y="947.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.9" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.08%)</title><rect x="11.9" y="931.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="14.9" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.handleResponse (1 samples, 0.08%)</title><rect x="11.9" y="915.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="14.9" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.verifyIncrementalFetchResponsePartitions (1 samples, 0.08%)</title><rect x="11.9" y="899.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="14.9" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.findMissing (1 samples, 0.08%)</title><rect x="11.9" y="883.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="14.9" y="894.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeySet.contains (1 samples, 0.08%)</title><rect x="11.9" y="867.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="14.9" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.08%)</title><rect x="11.9" y="851.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="14.9" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.08%)</title><rect x="11.9" y="835.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="14.9" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (273 samples, 22.51%)</title><rect x="12.9" y="1107.0" width="265.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="15.9" y="1118.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (3 samples, 0.25%)</title><rect x="13.9" y="1091.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.9" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (3 samples, 0.25%)</title><rect x="13.9" y="1075.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="16.9" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="15.8" y="1059.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.8" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="15.8" y="1043.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.8" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="15.8" y="1027.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="18.8" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="15.8" y="1011.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="18.8" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="15.8" y="995.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.8" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.08%)</title><rect x="15.8" y="979.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="18.8" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (8 samples, 0.66%)</title><rect x="16.8" y="1091.0" width="7.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.8" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (8 samples, 0.66%)</title><rect x="16.8" y="1075.0" width="7.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.8" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (8 samples, 0.66%)</title><rect x="16.8" y="1059.0" width="7.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.8" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$273/80820806.accept (8 samples, 0.66%)</title><rect x="16.8" y="1043.0" width="7.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.8" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (8 samples, 0.66%)</title><rect x="16.8" y="1027.0" width="7.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="19.8" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (8 samples, 0.66%)</title><rect x="16.8" y="1011.0" width="7.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="19.8" y="1022.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (8 samples, 0.66%)</title><rect x="16.8" y="995.0" width="7.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.8" y="1006.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (197 samples, 16.24%)</title><rect x="24.6" y="1091.0" width="191.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="27.6" y="1102.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$272/177998098.accept (190 samples, 15.66%)</title><rect x="25.6" y="1075.0" width="184.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.6" y="1086.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (190 samples, 15.66%)</title><rect x="25.6" y="1059.0" width="184.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="28.6" y="1070.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/BlacklistedKeysFilter.shouldTake (1 samples, 0.08%)</title><rect x="26.5" y="1043.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="29.5" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (165 samples, 13.60%)</title><rect x="27.5" y="1043.0" width="160.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="30.5" y="1054.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (165 samples, 13.60%)</title><rect x="27.5" y="1027.0" width="160.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="30.5" y="1038.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (165 samples, 13.60%)</title><rect x="27.5" y="1011.0" width="160.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="30.5" y="1022.0">com/linecorp/decaton..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (165 samples, 13.60%)</title><rect x="27.5" y="995.0" width="160.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="30.5" y="1006.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (165 samples, 13.60%)</title><rect x="27.5" y="979.0" width="160.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="30.5" y="990.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (165 samples, 13.60%)</title><rect x="27.5" y="963.0" width="160.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="30.5" y="974.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (123 samples, 10.14%)</title><rect x="62.5" y="947.0" width="119.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="65.5" y="958.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (26 samples, 2.14%)</title><rect x="64.5" y="931.0" width="25.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="67.5" y="942.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (26 samples, 2.14%)</title><rect x="64.5" y="915.0" width="25.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="67.5" y="926.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (26 samples, 2.14%)</title><rect x="64.5" y="899.0" width="25.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="67.5" y="910.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (8 samples, 0.66%)</title><rect x="89.8" y="931.0" width="7.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="92.8" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (8 samples, 0.66%)</title><rect x="89.8" y="915.0" width="7.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="92.8" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.16%)</title><rect x="91.7" y="899.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="94.7" y="910.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (2 samples, 0.16%)</title><rect x="91.7" y="883.0" width="2.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="94.7" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (4 samples, 0.33%)</title><rect x="93.7" y="899.0" width="3.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="96.7" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (87 samples, 7.17%)</title><rect x="97.6" y="931.0" width="84.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="100.6" y="942.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (87 samples, 7.17%)</title><rect x="97.6" y="915.0" width="84.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="100.6" y="926.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (82 samples, 6.76%)</title><rect x="98.5" y="899.0" width="79.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="101.5" y="910.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (82 samples, 6.76%)</title><rect x="98.5" y="883.0" width="79.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="101.5" y="894.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (81 samples, 6.68%)</title><rect x="99.5" y="867.0" width="78.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="102.5" y="878.0">sun/misc/..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="99.5" y="851.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="102.5" y="862.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.08%)</title><rect x="100.5" y="851.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="103.5" y="862.0"></text>
</g>
<g>
<title>Unsafe_Unpark (76 samples, 6.27%)</title><rect x="101.4" y="851.0" width="74.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="104.4" y="862.0">Unsafe_U..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="101.4" y="835.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="104.4" y="846.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.08%)</title><rect x="102.4" y="835.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="105.4" y="846.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="103.4" y="835.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="106.4" y="846.0"></text>
</g>
<g>
<title>__pthread_cond_signal (52 samples, 4.29%)</title><rect x="104.4" y="835.0" width="50.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="107.4" y="846.0">__pth..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.16%)</title><rect x="154.9" y="835.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="157.9" y="846.0"></text>
</g>
<g>
<title>pthread_mutex_lock (19 samples, 1.57%)</title><rect x="156.9" y="835.0" width="18.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="159.9" y="846.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.25%)</title><rect x="175.4" y="851.0" width="2.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="178.4" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (4 samples, 0.33%)</title><rect x="178.3" y="899.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="181.3" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.33%)</title><rect x="182.2" y="947.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="185.2" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (4 samples, 0.33%)</title><rect x="182.2" y="931.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="185.2" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.33%)</title><rect x="182.2" y="915.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="185.2" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.08%)</title><rect x="185.1" y="899.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="188.1" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.16%)</title><rect x="186.1" y="947.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="189.1" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.16%)</title><rect x="186.1" y="931.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="189.1" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.16%)</title><rect x="186.1" y="915.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="189.1" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (2 samples, 0.16%)</title><rect x="186.1" y="899.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="189.1" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (18 samples, 1.48%)</title><rect x="188.0" y="1043.0" width="17.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="191.0" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (18 samples, 1.48%)</title><rect x="188.0" y="1027.0" width="17.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="191.0" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.16%)</title><rect x="203.6" y="1011.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="206.6" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.16%)</title><rect x="203.6" y="995.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="206.6" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.16%)</title><rect x="203.6" y="979.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="206.6" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="203.6" y="963.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="206.6" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="203.6" y="947.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="206.6" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="203.6" y="931.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="206.6" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="203.6" y="915.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="206.6" y="926.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="203.6" y="899.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="206.6" y="910.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.08%)</title><rect x="203.6" y="883.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="206.6" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.08%)</title><rect x="204.6" y="963.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="207.6" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.08%)</title><rect x="204.6" y="947.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="207.6" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (2 samples, 0.16%)</title><rect x="205.5" y="1043.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="208.5" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.16%)</title><rect x="205.5" y="1027.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="208.5" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.16%)</title><rect x="205.5" y="1011.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="208.5" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.25%)</title><rect x="207.5" y="1043.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="210.5" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.25%)</title><rect x="207.5" y="1027.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="210.5" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.25%)</title><rect x="207.5" y="1011.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="210.5" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.25%)</title><rect x="207.5" y="995.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="210.5" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.25%)</title><rect x="207.5" y="979.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="210.5" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (6 samples, 0.49%)</title><rect x="210.4" y="1075.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="213.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (6 samples, 0.49%)</title><rect x="210.4" y="1059.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="213.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (6 samples, 0.49%)</title><rect x="210.4" y="1043.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="213.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (6 samples, 0.49%)</title><rect x="210.4" y="1027.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="213.4" y="1038.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (4 samples, 0.33%)</title><rect x="212.3" y="1011.0" width="3.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="215.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (64 samples, 5.28%)</title><rect x="216.2" y="1091.0" width="62.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="219.2" y="1102.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (63 samples, 5.19%)</title><rect x="216.2" y="1075.0" width="61.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="219.2" y="1086.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (43 samples, 3.54%)</title><rect x="216.2" y="1059.0" width="41.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="219.2" y="1070.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (2 samples, 0.16%)</title><rect x="216.2" y="1043.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="219.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (2 samples, 0.16%)</title><rect x="216.2" y="1027.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="219.2" y="1038.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.08%)</title><rect x="216.2" y="1011.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="219.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (1 samples, 0.08%)</title><rect x="217.2" y="1011.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="220.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="218.2" y="1043.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="221.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="218.2" y="1027.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="221.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$264/1141754030.shouldBlock (1 samples, 0.08%)</title><rect x="218.2" y="1011.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="221.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.08%)</title><rect x="218.2" y="995.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="221.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.08%)</title><rect x="218.2" y="979.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="221.2" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.anyMatch (1 samples, 0.08%)</title><rect x="218.2" y="963.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="221.2" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="218.2" y="947.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="221.2" y="958.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.08%)</title><rect x="218.2" y="931.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="221.2" y="942.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.08%)</title><rect x="218.2" y="915.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="221.2" y="926.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="218.2" y="899.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="221.2" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="218.2" y="883.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="221.2" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.08%)</title><rect x="218.2" y="867.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="221.2" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.08%)</title><rect x="218.2" y="851.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="221.2" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$CLQSpliterator.tryAdvance (1 samples, 0.08%)</title><rect x="218.2" y="835.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="221.2" y="846.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.08%)</title><rect x="218.2" y="819.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="221.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$266/583731454.test (1 samples, 0.08%)</title><rect x="218.2" y="803.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="221.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$hasAvailableFetches$0 (1 samples, 0.08%)</title><rect x="218.2" y="787.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="221.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isFetchable (1 samples, 0.08%)</title><rect x="218.2" y="771.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="221.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$2300 (1 samples, 0.08%)</title><rect x="218.2" y="755.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="221.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.isFetchable (1 samples, 0.08%)</title><rect x="218.2" y="739.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="221.2" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.hasValidPosition (1 samples, 0.08%)</title><rect x="218.2" y="723.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="221.2" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (40 samples, 3.30%)</title><rect x="219.2" y="1043.0" width="38.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="222.2" y="1054.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (40 samples, 3.30%)</title><rect x="219.2" y="1027.0" width="38.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="222.2" y="1038.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (35 samples, 2.89%)</title><rect x="219.2" y="1011.0" width="34.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="222.2" y="1022.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (35 samples, 2.89%)</title><rect x="219.2" y="995.0" width="34.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="222.2" y="1006.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (17 samples, 1.40%)</title><rect x="221.1" y="979.0" width="16.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="224.1" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (5 samples, 0.41%)</title><rect x="231.8" y="963.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="234.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (5 samples, 0.41%)</title><rect x="231.8" y="947.0" width="4.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="234.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (5 samples, 0.41%)</title><rect x="231.8" y="931.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="234.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (5 samples, 0.41%)</title><rect x="231.8" y="915.0" width="4.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="234.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (5 samples, 0.41%)</title><rect x="231.8" y="899.0" width="4.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="234.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (5 samples, 0.41%)</title><rect x="231.8" y="883.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="234.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (5 samples, 0.41%)</title><rect x="231.8" y="867.0" width="4.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="234.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.08%)</title><rect x="236.7" y="963.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="239.7" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.08%)</title><rect x="236.7" y="947.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="239.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (1 samples, 0.08%)</title><rect x="236.7" y="931.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="239.7" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.08%)</title><rect x="236.7" y="915.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="239.7" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.08%)</title><rect x="236.7" y="899.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="239.7" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="236.7" y="883.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="239.7" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="236.7" y="867.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="239.7" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="236.7" y="851.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="239.7" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="236.7" y="835.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="239.7" y="846.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.08%)</title><rect x="236.7" y="819.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="239.7" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (16 samples, 1.32%)</title><rect x="237.6" y="979.0" width="15.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="240.6" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (15 samples, 1.24%)</title><rect x="238.6" y="963.0" width="14.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="241.6" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (15 samples, 1.24%)</title><rect x="238.6" y="947.0" width="14.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="241.6" y="958.0"></text>
</g>
<g>
<title>java/util/Optional.of (15 samples, 1.24%)</title><rect x="238.6" y="931.0" width="14.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="241.6" y="942.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="251.3" y="915.0" width="0.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="254.3" y="926.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="252.2" y="915.0" width="1.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="255.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.08%)</title><rect x="253.2" y="1011.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="256.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.08%)</title><rect x="253.2" y="995.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="256.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="253.2" y="979.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="256.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (2 samples, 0.16%)</title><rect x="254.2" y="1011.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="257.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (2 samples, 0.16%)</title><rect x="254.2" y="995.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="257.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="254.2" y="979.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="257.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="254.2" y="963.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="257.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="254.2" y="947.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="257.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (2 samples, 0.16%)</title><rect x="254.2" y="931.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="257.2" y="942.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="254.2" y="915.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="257.2" y="926.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedValueIterator.next (1 samples, 0.08%)</title><rect x="255.1" y="915.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="258.1" y="926.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.08%)</title><rect x="255.1" y="899.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="258.1" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (2 samples, 0.16%)</title><rect x="256.1" y="1011.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="259.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.08%)</title><rect x="257.1" y="995.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="260.1" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.08%)</title><rect x="257.1" y="979.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="260.1" y="990.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.08%)</title><rect x="257.1" y="963.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="260.1" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="257.1" y="947.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="260.1" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (9 samples, 0.74%)</title><rect x="258.1" y="1059.0" width="8.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="261.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (9 samples, 0.74%)</title><rect x="258.1" y="1043.0" width="8.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="261.1" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (8 samples, 0.66%)</title><rect x="258.1" y="1027.0" width="7.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="261.1" y="1038.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.08%)</title><rect x="258.1" y="1011.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="261.1" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="259.0" y="1011.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="262.0" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="259.0" y="995.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="262.0" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="259.0" y="979.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="262.0" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="259.0" y="963.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="262.0" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="259.0" y="947.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="262.0" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="259.0" y="931.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="262.0" y="942.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$82/1105111130.get (1 samples, 0.08%)</title><rect x="259.0" y="915.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="262.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.08%)</title><rect x="260.0" y="1011.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="263.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.08%)</title><rect x="260.0" y="995.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="263.0" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="260.0" y="979.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="263.0" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="260.0" y="963.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="263.0" y="974.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="260.0" y="947.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="263.0" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="260.0" y="931.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="263.0" y="942.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="260.0" y="915.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="263.0" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="260.0" y="899.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="263.0" y="910.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$247/812286790.get (1 samples, 0.08%)</title><rect x="260.0" y="883.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="263.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (3 samples, 0.25%)</title><rect x="261.0" y="1011.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="264.0" y="1022.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (3 samples, 0.25%)</title><rect x="261.0" y="995.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="264.0" y="1006.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (3 samples, 0.25%)</title><rect x="261.0" y="979.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="264.0" y="990.0"></text>
</g>
<g>
<title>java/util/HashSet.add (3 samples, 0.25%)</title><rect x="261.0" y="963.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="264.0" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.25%)</title><rect x="261.0" y="947.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="264.0" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="262.9" y="931.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="265.9" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.08%)</title><rect x="262.9" y="915.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="265.9" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="262.9" y="899.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="265.9" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="262.9" y="883.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="265.9" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.08%)</title><rect x="262.9" y="867.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="265.9" y="878.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::write_region_work(MemRegion) (1 samples, 0.08%)</title><rect x="262.9" y="851.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="265.9" y="862.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::invalidate(MemRegion, bool) (1 samples, 0.08%)</title><rect x="262.9" y="835.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="265.9" y="846.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.08%)</title><rect x="262.9" y="819.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="265.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.16%)</title><rect x="263.9" y="1011.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="266.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.16%)</title><rect x="263.9" y="995.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="266.9" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="264.9" y="979.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="267.9" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="264.9" y="963.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="267.9" y="974.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="264.9" y="947.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="267.9" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="264.9" y="931.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="267.9" y="942.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="264.9" y="915.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="267.9" y="926.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="264.9" y="899.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="267.9" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="264.9" y="883.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="267.9" y="894.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="264.9" y="867.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="267.9" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="264.9" y="851.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="267.9" y="862.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$59/551479935.get (1 samples, 0.08%)</title><rect x="264.9" y="835.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="267.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.08%)</title><rect x="265.8" y="1027.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="268.8" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.08%)</title><rect x="265.8" y="1011.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="268.8" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="265.8" y="995.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="268.8" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.08%)</title><rect x="265.8" y="979.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="268.8" y="990.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.08%)</title><rect x="265.8" y="963.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="268.8" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="265.8" y="947.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="268.8" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="265.8" y="931.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="268.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.08%)</title><rect x="266.8" y="1059.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="269.8" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.08%)</title><rect x="266.8" y="1043.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="269.8" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.08%)</title><rect x="266.8" y="1027.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="269.8" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.08%)</title><rect x="266.8" y="1011.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="269.8" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.08%)</title><rect x="266.8" y="995.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="269.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (5 samples, 0.41%)</title><rect x="267.8" y="1059.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="270.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 0.33%)</title><rect x="267.8" y="1043.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="270.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (4 samples, 0.33%)</title><rect x="267.8" y="1027.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="270.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (4 samples, 0.33%)</title><rect x="267.8" y="1011.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="270.8" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.08%)</title><rect x="267.8" y="995.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="270.8" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.08%)</title><rect x="267.8" y="979.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="270.8" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="267.8" y="963.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="270.8" y="974.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="267.8" y="947.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="270.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.08%)</title><rect x="268.8" y="995.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="271.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.08%)</title><rect x="268.8" y="979.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="271.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.08%)</title><rect x="268.8" y="963.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="271.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.08%)</title><rect x="268.8" y="947.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="271.8" y="958.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.08%)</title><rect x="268.8" y="931.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="271.8" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.08%)</title><rect x="268.8" y="915.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="271.8" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.08%)</title><rect x="268.8" y="899.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="271.8" y="910.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.08%)</title><rect x="268.8" y="883.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="271.8" y="894.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.08%)</title><rect x="268.8" y="867.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="271.8" y="878.0"></text>
</g>
<g>
<title>java/nio/Bits.copyFromArray (1 samples, 0.08%)</title><rect x="268.8" y="851.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="271.8" y="862.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.copyMemory (1 samples, 0.08%)</title><rect x="268.8" y="835.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="271.8" y="846.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.08%)</title><rect x="268.8" y="819.0" width="0.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="271.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.16%)</title><rect x="269.7" y="995.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="272.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.16%)</title><rect x="269.7" y="979.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="272.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 0.16%)</title><rect x="269.7" y="963.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="272.7" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 0.16%)</title><rect x="269.7" y="947.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="272.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (2 samples, 0.16%)</title><rect x="269.7" y="931.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="272.7" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.16%)</title><rect x="269.7" y="915.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="272.7" y="926.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="269.7" y="899.0" width="1.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="272.7" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.08%)</title><rect x="270.7" y="899.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="273.7" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.08%)</title><rect x="270.7" y="883.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="273.7" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="270.7" y="867.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="273.7" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="270.7" y="851.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="273.7" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="270.7" y="835.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="273.7" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.08%)</title><rect x="270.7" y="819.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="273.7" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.08%)</title><rect x="271.7" y="1043.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="274.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.08%)</title><rect x="271.7" y="1027.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="274.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.08%)</title><rect x="271.7" y="1011.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="274.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.08%)</title><rect x="271.7" y="995.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="274.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.08%)</title><rect x="271.7" y="979.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="274.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.08%)</title><rect x="271.7" y="963.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="274.7" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.08%)</title><rect x="271.7" y="947.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="274.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.requestSchema (1 samples, 0.08%)</title><rect x="271.7" y="931.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="274.7" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (3 samples, 0.25%)</title><rect x="272.7" y="1059.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="275.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 0.16%)</title><rect x="273.6" y="1043.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="276.6" y="1054.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.08%)</title><rect x="273.6" y="1027.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="276.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$260/257566359.accept (1 samples, 0.08%)</title><rect x="273.6" y="1011.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="276.6" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.08%)</title><rect x="273.6" y="995.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="276.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.08%)</title><rect x="273.6" y="979.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="276.6" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.08%)</title><rect x="273.6" y="963.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="276.6" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.08%)</title><rect x="273.6" y="947.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="276.6" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="273.6" y="931.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="276.6" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="273.6" y="915.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="276.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.08%)</title><rect x="274.6" y="1027.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="277.6" y="1038.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.08%)</title><rect x="274.6" y="1011.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="277.6" y="1022.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.08%)</title><rect x="274.6" y="995.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="277.6" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (1 samples, 0.08%)</title><rect x="274.6" y="979.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="277.6" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.&lt;init&gt; (1 samples, 0.08%)</title><rect x="274.6" y="963.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="277.6" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (2 samples, 0.16%)</title><rect x="275.6" y="1059.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="278.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="275.6" y="1043.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="278.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.shouldRecord (1 samples, 0.08%)</title><rect x="276.5" y="1027.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="279.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.08%)</title><rect x="277.5" y="1075.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="280.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/Thread.run (813 samples, 67.02%)</title><rect x="278.5" y="1123.0" width="790.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="281.5" y="1134.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (813 samples, 67.02%)</title><rect x="278.5" y="1107.0" width="790.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="281.5" y="1118.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (813 samples, 67.02%)</title><rect x="278.5" y="1091.0" width="790.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="281.5" y="1102.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$288/708644685.run (558 samples, 46.00%)</title><rect x="284.3" y="1075.0" width="542.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="287.3" y="1086.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$288/7..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62 (558 samples, 46.00%)</title><rect x="284.3" y="1059.0" width="542.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="287.3" y="1070.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTas..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (558 samples, 46.00%)</title><rect x="284.3" y="1043.0" width="542.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="287.3" y="1054.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (558 samples, 46.00%)</title><rect x="284.3" y="1027.0" width="542.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="287.3" y="1038.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThe..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (9 samples, 0.74%)</title><rect x="293.1" y="1011.0" width="8.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="296.1" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (9 samples, 0.74%)</title><rect x="293.1" y="995.0" width="8.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="296.1" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.get (9 samples, 0.74%)</title><rect x="293.1" y="979.0" width="8.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="296.1" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (9 samples, 0.74%)</title><rect x="293.1" y="963.0" width="8.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="296.1" y="974.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.58%)</title><rect x="295.0" y="947.0" width="6.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="298.0" y="958.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.58%)</title><rect x="295.0" y="931.0" width="6.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="298.0" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (61 samples, 5.03%)</title><rect x="301.8" y="1011.0" width="59.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="304.8" y="1022.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (1 samples, 0.08%)</title><rect x="318.4" y="995.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="321.4" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/260840925.linkToTargetMethod (2 samples, 0.16%)</title><rect x="319.3" y="995.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="322.3" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/205962452.invokeStatic_L_L (2 samples, 0.16%)</title><rect x="319.3" y="979.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="322.3" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$297/238351761.get$Lambda (2 samples, 0.16%)</title><rect x="319.3" y="963.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="322.3" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.16%)</title><rect x="319.3" y="947.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="322.3" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.16%)</title><rect x="319.3" y="931.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="322.3" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.16%)</title><rect x="319.3" y="915.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="322.3" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.16%)</title><rect x="319.3" y="899.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="322.3" y="910.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.08%)</title><rect x="319.3" y="883.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="322.3" y="894.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="320.3" y="883.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="323.3" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.08%)</title><rect x="320.3" y="867.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="323.3" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (41 samples, 3.38%)</title><rect x="321.3" y="995.0" width="39.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="324.3" y="1006.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (41 samples, 3.38%)</title><rect x="321.3" y="979.0" width="39.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="324.3" y="990.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (41 samples, 3.38%)</title><rect x="321.3" y="963.0" width="39.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="324.3" y="974.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (4 samples, 0.33%)</title><rect x="321.3" y="947.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="324.3" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (4 samples, 0.33%)</title><rect x="321.3" y="931.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="324.3" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (4 samples, 0.33%)</title><rect x="321.3" y="915.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="324.3" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$297/238351761.accept (2 samples, 0.16%)</title><rect x="322.3" y="899.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="325.3" y="910.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="324.2" y="899.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="327.2" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (37 samples, 3.05%)</title><rect x="325.2" y="947.0" width="36.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="328.2" y="958.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$297/238351761.accept (36 samples, 2.97%)</title><rect x="326.2" y="931.0" width="35.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="329.2" y="942.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (36 samples, 2.97%)</title><rect x="326.2" y="915.0" width="35.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="329.2" y="926.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$286/1837757178.accept (2 samples, 0.16%)</title><rect x="331.0" y="899.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="334.0" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$285/2145153079.accept (2 samples, 0.16%)</title><rect x="333.0" y="899.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="336.0" y="910.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.16%)</title><rect x="334.9" y="899.0" width="2.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="337.9" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (25 samples, 2.06%)</title><rect x="336.9" y="899.0" width="24.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="339.9" y="910.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (25 samples, 2.06%)</title><rect x="336.9" y="883.0" width="24.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="339.9" y="894.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (24 samples, 1.98%)</title><rect x="337.8" y="867.0" width="23.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="340.8" y="878.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (4 samples, 0.33%)</title><rect x="337.8" y="851.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="340.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (4 samples, 0.33%)</title><rect x="337.8" y="835.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="340.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (20 samples, 1.65%)</title><rect x="341.7" y="851.0" width="19.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="344.7" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$286/1837757178.accept (1 samples, 0.08%)</title><rect x="359.2" y="835.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="362.2" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$receive$83 (1 samples, 0.08%)</title><rect x="359.2" y="819.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="362.2" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$285/2145153079.accept (1 samples, 0.08%)</title><rect x="360.2" y="835.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="363.2" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (165 samples, 13.60%)</title><rect x="361.2" y="1011.0" width="160.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="364.2" y="1022.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$45/1556995360.extract (165 samples, 13.60%)</title><rect x="361.2" y="995.0" width="160.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="364.2" y="1006.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (165 samples, 13.60%)</title><rect x="361.2" y="979.0" width="160.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="364.2" y="990.0">com/linecorp/decaton..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.25%)</title><rect x="361.2" y="963.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="364.2" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="361.2" y="947.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="364.2" y="958.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.08%)</title><rect x="361.2" y="931.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="364.2" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.16%)</title><rect x="362.2" y="947.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="365.2" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.16%)</title><rect x="362.2" y="931.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="365.2" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="363.1" y="915.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="366.1" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="363.1" y="899.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="366.1" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="363.1" y="883.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="366.1" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.08%)</title><rect x="363.1" y="867.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="366.1" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (162 samples, 13.36%)</title><rect x="364.1" y="963.0" width="157.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="367.1" y="974.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (162 samples, 13.36%)</title><rect x="364.1" y="947.0" width="157.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="367.1" y="958.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (162 samples, 13.36%)</title><rect x="364.1" y="931.0" width="157.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="367.1" y="942.0">com/fasterxml/jackso..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (64 samples, 5.28%)</title><rect x="364.1" y="915.0" width="62.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="367.1" y="926.0">com/fa..</text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.49%)</title><rect x="385.5" y="899.0" width="5.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="388.5" y="910.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.49%)</title><rect x="385.5" y="883.0" width="5.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="388.5" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (8 samples, 0.66%)</title><rect x="391.3" y="899.0" width="7.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="394.3" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (7 samples, 0.58%)</title><rect x="392.3" y="883.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="395.3" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (7 samples, 0.58%)</title><rect x="392.3" y="867.0" width="6.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="395.3" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 0.58%)</title><rect x="392.3" y="851.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="395.3" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (7 samples, 0.58%)</title><rect x="392.3" y="835.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="395.3" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (7 samples, 0.58%)</title><rect x="392.3" y="819.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="395.3" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (7 samples, 0.58%)</title><rect x="392.3" y="803.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="395.3" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (28 samples, 2.31%)</title><rect x="399.1" y="899.0" width="27.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="402.1" y="910.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (4 samples, 0.33%)</title><rect x="422.5" y="883.0" width="3.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="425.5" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (3 samples, 0.25%)</title><rect x="423.4" y="867.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="426.4" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="423.4" y="851.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="426.4" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="424.4" y="851.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="427.4" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.08%)</title><rect x="425.4" y="851.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="428.4" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (92 samples, 7.58%)</title><rect x="426.4" y="915.0" width="89.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="429.4" y="926.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (3 samples, 0.25%)</title><rect x="427.3" y="899.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="430.3" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (2 samples, 0.16%)</title><rect x="430.2" y="899.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="433.2" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (5 samples, 0.41%)</title><rect x="432.2" y="899.0" width="4.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="435.2" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.16%)</title><rect x="435.1" y="883.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="438.1" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (12 samples, 0.99%)</title><rect x="437.1" y="899.0" width="11.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="440.1" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (10 samples, 0.82%)</title><rect x="439.0" y="883.0" width="9.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="442.0" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (6 samples, 0.49%)</title><rect x="441.9" y="867.0" width="5.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="444.9" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (5 samples, 0.41%)</title><rect x="442.9" y="851.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="445.9" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="445.8" y="835.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="448.8" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="445.8" y="819.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="448.8" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="445.8" y="803.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="448.8" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="445.8" y="787.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="448.8" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="445.8" y="771.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="448.8" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="445.8" y="755.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="448.8" y="766.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="445.8" y="739.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="448.8" y="750.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_eden_size() (1 samples, 0.08%)</title><rect x="445.8" y="723.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="448.8" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.08%)</title><rect x="446.8" y="835.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="449.8" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.08%)</title><rect x="447.8" y="867.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="450.8" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.08%)</title><rect x="447.8" y="851.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="450.8" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (3 samples, 0.25%)</title><rect x="448.7" y="899.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="451.7" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 0.25%)</title><rect x="448.7" y="883.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="451.7" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (3 samples, 0.25%)</title><rect x="448.7" y="867.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="451.7" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (3 samples, 0.25%)</title><rect x="448.7" y="851.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="451.7" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (3 samples, 0.25%)</title><rect x="448.7" y="835.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="451.7" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.checkUnresolvedObjectId (3 samples, 0.25%)</title><rect x="451.6" y="899.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="454.6" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (61 samples, 5.03%)</title><rect x="454.6" y="899.0" width="59.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="457.6" y="910.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 0.16%)</title><rect x="454.6" y="883.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="457.6" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (59 samples, 4.86%)</title><rect x="456.5" y="883.0" width="57.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="459.5" y="894.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (16 samples, 1.32%)</title><rect x="457.5" y="867.0" width="15.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="460.5" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.41%)</title><rect x="460.4" y="851.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="463.4" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.41%)</title><rect x="460.4" y="835.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="463.4" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.41%)</title><rect x="460.4" y="819.0" width="4.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="463.4" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (8 samples, 0.66%)</title><rect x="465.3" y="851.0" width="7.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="468.3" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (42 samples, 3.46%)</title><rect x="473.1" y="867.0" width="40.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="476.1" y="878.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (42 samples, 3.46%)</title><rect x="473.1" y="851.0" width="40.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="476.1" y="862.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (39 samples, 3.22%)</title><rect x="476.0" y="835.0" width="37.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="479.0" y="846.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (15 samples, 1.24%)</title><rect x="479.9" y="819.0" width="14.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="482.9" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.41%)</title><rect x="486.7" y="803.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="489.7" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.41%)</title><rect x="486.7" y="787.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="489.7" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.41%)</title><rect x="486.7" y="771.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="489.7" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (4 samples, 0.33%)</title><rect x="487.6" y="755.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="490.6" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (4 samples, 0.33%)</title><rect x="487.6" y="739.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="490.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.16%)</title><rect x="489.6" y="723.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="492.6" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (2 samples, 0.16%)</title><rect x="489.6" y="707.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="492.6" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.16%)</title><rect x="491.5" y="803.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="494.5" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.08%)</title><rect x="493.5" y="803.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="496.5" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (5 samples, 0.41%)</title><rect x="494.5" y="819.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="497.5" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (4 samples, 0.33%)</title><rect x="495.4" y="803.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="498.4" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 0.33%)</title><rect x="495.4" y="787.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="498.4" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 0.33%)</title><rect x="495.4" y="771.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="498.4" y="782.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (4 samples, 0.33%)</title><rect x="495.4" y="755.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="498.4" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (8 samples, 0.66%)</title><rect x="499.3" y="819.0" width="7.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="502.3" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (8 samples, 0.66%)</title><rect x="499.3" y="803.0" width="7.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="502.3" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (8 samples, 0.66%)</title><rect x="499.3" y="787.0" width="7.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="502.3" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (8 samples, 0.66%)</title><rect x="499.3" y="771.0" width="7.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="502.3" y="782.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (8 samples, 0.66%)</title><rect x="499.3" y="755.0" width="7.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="502.3" y="766.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (6 samples, 0.49%)</title><rect x="501.3" y="739.0" width="5.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="504.3" y="750.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor3.newInstance (1 samples, 0.08%)</title><rect x="506.1" y="723.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="509.1" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (7 samples, 0.58%)</title><rect x="507.1" y="819.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="510.1" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.58%)</title><rect x="507.1" y="803.0" width="6.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="510.1" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.58%)</title><rect x="507.1" y="787.0" width="6.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="510.1" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.16%)</title><rect x="512.0" y="771.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="515.0" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.16%)</title><rect x="513.9" y="899.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="516.9" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (6 samples, 0.49%)</title><rect x="515.9" y="915.0" width="5.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="518.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.08%)</title><rect x="515.9" y="899.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="518.9" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (5 samples, 0.41%)</title><rect x="516.8" y="899.0" width="4.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="519.8" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (5 samples, 0.41%)</title><rect x="516.8" y="883.0" width="4.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="519.8" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (5 samples, 0.41%)</title><rect x="516.8" y="867.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="519.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.41%)</title><rect x="516.8" y="851.0" width="4.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="519.8" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (311 samples, 25.64%)</title><rect x="521.7" y="1011.0" width="302.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="524.7" y="1022.0">com/linecorp/decaton/processor/runtime/in..</text>
</g>
<g>
<title>__clock_gettime (11 samples, 0.91%)</title><rect x="532.4" y="995.0" width="10.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="535.4" y="1006.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.58%)</title><rect x="536.3" y="979.0" width="6.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="539.3" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (46 samples, 3.79%)</title><rect x="543.1" y="995.0" width="44.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="546.1" y="1006.0">com/..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (46 samples, 3.79%)</title><rect x="543.1" y="979.0" width="44.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="546.1" y="990.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (46 samples, 3.79%)</title><rect x="543.1" y="963.0" width="44.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="546.1" y="974.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (21 samples, 1.73%)</title><rect x="547.0" y="947.0" width="20.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="550.0" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (21 samples, 1.73%)</title><rect x="547.0" y="931.0" width="20.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="550.0" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (21 samples, 1.73%)</title><rect x="547.0" y="915.0" width="20.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="550.0" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (21 samples, 1.73%)</title><rect x="547.0" y="899.0" width="20.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="550.0" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (21 samples, 1.73%)</title><rect x="547.0" y="883.0" width="20.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="550.0" y="894.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.wasLastOpReadOrNull (1 samples, 0.08%)</title><rect x="567.4" y="947.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="570.4" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="568.4" y="947.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="571.4" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (19 samples, 1.57%)</title><rect x="569.4" y="947.0" width="18.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="572.4" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (4 samples, 0.33%)</title><rect x="579.1" y="931.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="582.1" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 0.33%)</title><rect x="579.1" y="915.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="582.1" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (5 samples, 0.41%)</title><rect x="583.0" y="931.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="586.0" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.49%)</title><rect x="587.8" y="995.0" width="5.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="590.8" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (6 samples, 0.49%)</title><rect x="587.8" y="979.0" width="5.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="590.8" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (163 samples, 13.44%)</title><rect x="593.7" y="995.0" width="158.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="596.7" y="1006.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (157 samples, 12.94%)</title><rect x="593.7" y="979.0" width="152.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="596.7" y="990.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (56 samples, 4.62%)</title><rect x="603.4" y="963.0" width="54.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="606.4" y="974.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (41 samples, 3.38%)</title><rect x="614.1" y="947.0" width="39.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="617.1" y="958.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (22 samples, 1.81%)</title><rect x="624.8" y="931.0" width="21.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="627.8" y="942.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.16%)</title><rect x="632.6" y="915.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="635.6" y="926.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (6 samples, 0.49%)</title><rect x="634.5" y="915.0" width="5.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="637.5" y="926.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (6 samples, 0.49%)</title><rect x="634.5" y="899.0" width="5.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="637.5" y="910.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (6 samples, 0.49%)</title><rect x="634.5" y="883.0" width="5.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="637.5" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (6 samples, 0.49%)</title><rect x="634.5" y="867.0" width="5.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="637.5" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.25%)</title><rect x="635.5" y="851.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="638.5" y="862.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="635.5" y="835.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="638.5" y="846.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.16%)</title><rect x="636.5" y="835.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="639.5" y="846.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.08%)</title><rect x="637.5" y="819.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="640.5" y="830.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.08%)</title><rect x="637.5" y="803.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="640.5" y="814.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.08%)</title><rect x="638.4" y="851.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="641.4" y="862.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="639.4" y="851.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="642.4" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="639.4" y="835.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="642.4" y="846.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.08%)</title><rect x="639.4" y="819.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="642.4" y="830.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.25%)</title><rect x="640.4" y="915.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="643.4" y="926.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.16%)</title><rect x="643.3" y="915.0" width="1.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="646.3" y="926.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="645.2" y="915.0" width="1.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="648.2" y="926.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.08%)</title><rect x="646.2" y="931.0" width="1.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="649.2" y="942.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (7 samples, 0.58%)</title><rect x="647.2" y="931.0" width="6.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="650.2" y="942.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.08%)</title><rect x="654.0" y="947.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="657.0" y="958.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.08%)</title><rect x="654.0" y="931.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="657.0" y="942.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.08%)</title><rect x="654.0" y="915.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="657.0" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="654.0" y="899.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="657.0" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="654.0" y="883.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="657.0" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.08%)</title><rect x="654.0" y="867.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="657.0" y="878.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.25%)</title><rect x="655.0" y="947.0" width="2.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="658.0" y="958.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (6 samples, 0.49%)</title><rect x="657.9" y="963.0" width="5.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="660.9" y="974.0"></text>
</g>
<g>
<title>java/lang/Long.toString (6 samples, 0.49%)</title><rect x="657.9" y="947.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="660.9" y="958.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="657.9" y="931.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="660.9" y="942.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="657.9" y="915.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="660.9" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="657.9" y="899.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="660.9" y="910.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="657.9" y="883.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="660.9" y="894.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.08%)</title><rect x="657.9" y="867.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="660.9" y="878.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.41%)</title><rect x="658.9" y="931.0" width="4.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="661.9" y="942.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.08%)</title><rect x="662.7" y="915.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="665.7" y="926.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (85 samples, 7.01%)</title><rect x="663.7" y="963.0" width="82.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="666.7" y="974.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (83 samples, 6.84%)</title><rect x="665.7" y="947.0" width="80.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="668.7" y="958.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 0.33%)</title><rect x="665.7" y="931.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="668.7" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 0.33%)</title><rect x="665.7" y="915.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="668.7" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (4 samples, 0.33%)</title><rect x="665.7" y="899.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="668.7" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 0.33%)</title><rect x="665.7" y="883.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="668.7" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="669.6" y="931.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="672.6" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="669.6" y="915.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="672.6" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="669.6" y="899.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="672.6" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.08%)</title><rect x="669.6" y="883.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="672.6" y="894.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (78 samples, 6.43%)</title><rect x="670.5" y="931.0" width="75.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="673.5" y="942.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.put (74 samples, 6.10%)</title><rect x="674.4" y="915.0" width="72.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="677.4" y="926.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.putVal (37 samples, 3.05%)</title><rect x="710.4" y="899.0" width="36.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="713.4" y="910.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.25%)</title><rect x="732.8" y="883.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="735.8" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (9 samples, 0.74%)</title><rect x="735.7" y="883.0" width="8.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="738.7" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="743.5" y="867.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="746.5" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="743.5" y="851.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="746.5" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="743.5" y="835.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="746.5" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="743.5" y="819.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="746.5" y="830.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.16%)</title><rect x="744.5" y="883.0" width="1.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="747.5" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (6 samples, 0.49%)</title><rect x="746.4" y="979.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="749.4" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (6 samples, 0.49%)</title><rect x="746.4" y="963.0" width="5.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="749.4" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.49%)</title><rect x="746.4" y="947.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="749.4" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.49%)</title><rect x="746.4" y="931.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="749.4" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (61 samples, 5.03%)</title><rect x="752.2" y="995.0" width="59.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="755.2" y="1006.0">com/li..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="752.2" y="979.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="755.2" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="752.2" y="963.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="755.2" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (1 samples, 0.08%)</title><rect x="753.2" y="979.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="756.2" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (59 samples, 4.86%)</title><rect x="754.2" y="979.0" width="57.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="757.2" y="990.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$209/1328946355.process (25 samples, 2.06%)</title><rect x="755.2" y="963.0" width="24.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="758.2" y="974.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (25 samples, 2.06%)</title><rect x="755.2" y="947.0" width="24.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="758.2" y="958.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (19 samples, 1.57%)</title><rect x="755.2" y="931.0" width="18.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="758.2" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (9 samples, 0.74%)</title><rect x="763.9" y="915.0" width="8.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="766.9" y="926.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.49%)</title><rect x="766.8" y="899.0" width="5.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="769.8" y="910.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.49%)</title><rect x="766.8" y="883.0" width="5.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="769.8" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.08%)</title><rect x="772.7" y="915.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="775.7" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (6 samples, 0.49%)</title><rect x="773.6" y="931.0" width="5.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="776.6" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.41%)</title><rect x="773.6" y="915.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="776.6" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.25%)</title><rect x="775.6" y="899.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="778.6" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.25%)</title><rect x="775.6" y="883.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="778.6" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.08%)</title><rect x="778.5" y="915.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="781.5" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (2 samples, 0.16%)</title><rect x="779.5" y="963.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="782.5" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (1 samples, 0.08%)</title><rect x="779.5" y="947.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="782.5" y="958.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="779.5" y="931.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="782.5" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="779.5" y="915.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="782.5" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="779.5" y="899.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="782.5" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="779.5" y="883.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="782.5" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="779.5" y="867.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="782.5" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (1 samples, 0.08%)</title><rect x="780.5" y="947.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="783.5" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.08%)</title><rect x="780.5" y="931.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="783.5" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.08%)</title><rect x="780.5" y="915.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="783.5" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.08%)</title><rect x="780.5" y="899.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="783.5" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.08%)</title><rect x="780.5" y="883.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="783.5" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.08%)</title><rect x="780.5" y="867.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="783.5" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.25%)</title><rect x="781.4" y="963.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="784.4" y="974.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.25%)</title><rect x="781.4" y="947.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="784.4" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (8 samples, 0.66%)</title><rect x="784.3" y="963.0" width="7.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="787.3" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (7 samples, 0.58%)</title><rect x="785.3" y="947.0" width="6.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="788.3" y="958.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.25%)</title><rect x="785.3" y="931.0" width="2.9" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="788.3" y="942.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (4 samples, 0.33%)</title><rect x="788.2" y="931.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="791.2" y="942.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.16%)</title><rect x="792.1" y="963.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="795.1" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.16%)</title><rect x="792.1" y="947.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="795.1" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (10 samples, 0.82%)</title><rect x="794.1" y="963.0" width="9.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="797.1" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="798.0" y="947.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="801.0" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="798.0" y="931.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="801.0" y="942.0"></text>
</g>
<g>
<title>post_allocation_notify(KlassHandle, oopDesc*, int) (1 samples, 0.08%)</title><rect x="798.0" y="915.0" width="0.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="801.0" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (5 samples, 0.41%)</title><rect x="798.9" y="947.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="801.9" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 0.66%)</title><rect x="803.8" y="963.0" width="7.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="806.8" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 0.66%)</title><rect x="803.8" y="947.0" width="7.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="806.8" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (8 samples, 0.66%)</title><rect x="803.8" y="931.0" width="7.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="806.8" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (4 samples, 0.33%)</title><rect x="803.8" y="915.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="806.8" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (4 samples, 0.33%)</title><rect x="803.8" y="899.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="806.8" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (4 samples, 0.33%)</title><rect x="803.8" y="883.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="806.8" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$292/1740092014.accept (2 samples, 0.16%)</title><rect x="803.8" y="867.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="806.8" y="878.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.16%)</title><rect x="805.7" y="867.0" width="2.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="808.7" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 0.33%)</title><rect x="807.7" y="915.0" width="3.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="810.7" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$292/1740092014.accept (1 samples, 0.08%)</title><rect x="810.6" y="899.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="813.6" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$76 (1 samples, 0.08%)</title><rect x="810.6" y="883.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="813.6" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (11 samples, 0.91%)</title><rect x="811.6" y="995.0" width="10.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="814.6" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (11 samples, 0.91%)</title><rect x="811.6" y="979.0" width="10.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="814.6" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (11 samples, 0.91%)</title><rect x="811.6" y="963.0" width="10.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="814.6" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.25%)</title><rect x="811.6" y="947.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="814.6" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.16%)</title><rect x="811.6" y="931.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="814.6" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 0.16%)</title><rect x="811.6" y="915.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="814.6" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$294/127421729.accept (1 samples, 0.08%)</title><rect x="811.6" y="899.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="814.6" y="910.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="812.6" y="899.0" width="0.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="815.6" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.08%)</title><rect x="813.5" y="931.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="816.5" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 0.66%)</title><rect x="814.5" y="947.0" width="7.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="817.5" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$294/127421729.accept (8 samples, 0.66%)</title><rect x="814.5" y="931.0" width="7.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="817.5" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$57 (8 samples, 0.66%)</title><rect x="814.5" y="915.0" width="7.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="817.5" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (8 samples, 0.66%)</title><rect x="814.5" y="899.0" width="7.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="817.5" y="910.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (8 samples, 0.66%)</title><rect x="814.5" y="883.0" width="7.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="817.5" y="894.0"></text>
</g>
<g>
<title>java/time/Duration.create (8 samples, 0.66%)</title><rect x="814.5" y="867.0" width="7.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="817.5" y="878.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.33%)</title><rect x="818.4" y="851.0" width="3.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="821.4" y="862.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.33%)</title><rect x="818.4" y="835.0" width="3.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="821.4" y="846.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.16%)</title><rect x="822.3" y="995.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="825.3" y="1006.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.25%)</title><rect x="824.2" y="1011.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="827.2" y="1022.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.25%)</title><rect x="824.2" y="995.0" width="2.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="827.2" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.16%)</title><rect x="827.1" y="1075.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="830.1" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.16%)</title><rect x="827.1" y="1059.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="830.1" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.16%)</title><rect x="827.1" y="1043.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="830.1" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.16%)</title><rect x="827.1" y="1027.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="830.1" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (247 samples, 20.36%)</title><rect x="829.1" y="1075.0" width="240.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="832.1" y="1086.0">java/util/concurrent/ThreadPoolE..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (246 samples, 20.28%)</title><rect x="830.1" y="1059.0" width="239.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="833.1" y="1070.0">java/util/concurrent/LinkedBlock..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (223 samples, 18.38%)</title><rect x="852.4" y="1043.0" width="217.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="855.4" y="1054.0">java/util/concurrent/locks/A..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (19 samples, 1.57%)</title><rect x="871.9" y="1027.0" width="18.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="874.9" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (3 samples, 0.25%)</title><rect x="890.4" y="1027.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="893.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.25%)</title><rect x="890.4" y="1011.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="893.4" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.25%)</title><rect x="890.4" y="995.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="893.4" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.25%)</title><rect x="890.4" y="979.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="893.4" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.25%)</title><rect x="890.4" y="963.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="893.4" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (180 samples, 14.84%)</title><rect x="893.3" y="1027.0" width="175.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="896.3" y="1038.0">java/util/concurrent/lo..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (171 samples, 14.10%)</title><rect x="902.1" y="1011.0" width="166.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="905.1" y="1022.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="906.9" y="995.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="909.9" y="1006.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (3 samples, 0.25%)</title><rect x="907.9" y="995.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="910.9" y="1006.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.16%)</title><rect x="910.8" y="995.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="913.8" y="1006.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.25%)</title><rect x="912.8" y="995.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="915.8" y="1006.0"></text>
</g>
<g>
<title>Unsafe_Park (152 samples, 12.53%)</title><rect x="915.7" y="995.0" width="147.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="918.7" y="1006.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="917.6" y="979.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="920.6" y="990.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (24 samples, 1.98%)</title><rect x="918.6" y="979.0" width="23.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="921.6" y="990.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (11 samples, 0.91%)</title><rect x="925.4" y="963.0" width="10.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="928.4" y="974.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.25%)</title><rect x="928.3" y="947.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="931.3" y="958.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.16%)</title><rect x="929.3" y="931.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="932.3" y="942.0"></text>
</g>
<g>
<title>Monitor::unlock() (4 samples, 0.33%)</title><rect x="931.2" y="947.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="934.2" y="958.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="935.1" y="947.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="938.1" y="958.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.08%)</title><rect x="936.1" y="963.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="939.1" y="974.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.08%)</title><rect x="937.1" y="963.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="940.1" y="974.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (4 samples, 0.33%)</title><rect x="938.0" y="963.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="941.0" y="974.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (3 samples, 0.25%)</title><rect x="941.9" y="979.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="944.9" y="990.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.25%)</title><rect x="944.9" y="979.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="947.9" y="990.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.08%)</title><rect x="947.8" y="979.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="950.8" y="990.0"></text>
</g>
<g>
<title>__lll_lock_wait (12 samples, 0.99%)</title><rect x="948.7" y="979.0" width="11.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="951.7" y="990.0"></text>
</g>
<g>
<title>__lll_unlock_wake (23 samples, 1.90%)</title><rect x="960.4" y="979.0" width="22.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="963.4" y="990.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (57 samples, 4.70%)</title><rect x="982.8" y="979.0" width="55.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="985.8" y="990.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (7 samples, 0.58%)</title><rect x="1038.2" y="979.0" width="6.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1041.2" y="990.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.16%)</title><rect x="1045.1" y="979.0" width="1.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1048.1" y="990.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (4 samples, 0.33%)</title><rect x="1047.0" y="979.0" width="3.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1050.0" y="990.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.08%)</title><rect x="1050.9" y="979.0" width="1.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1053.9" y="990.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (6 samples, 0.49%)</title><rect x="1051.9" y="979.0" width="5.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1054.9" y="990.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.08%)</title><rect x="1057.7" y="979.0" width="1.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1060.7" y="990.0"></text>
</g>
<g>
<title>_init (1 samples, 0.08%)</title><rect x="1058.7" y="979.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1061.7" y="990.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.08%)</title><rect x="1059.6" y="979.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1062.6" y="990.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="1060.6" y="979.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1063.6" y="990.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.16%)</title><rect x="1061.6" y="979.0" width="1.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1064.6" y="990.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.16%)</title><rect x="1063.5" y="995.0" width="2.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1066.5" y="1006.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.08%)</title><rect x="1065.5" y="995.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1068.5" y="1006.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.16%)</title><rect x="1066.5" y="995.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1069.5" y="1006.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.08%)</title><rect x="1068.4" y="1027.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1071.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.08%)</title><rect x="1069.4" y="1123.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1072.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.08%)</title><rect x="1069.4" y="1107.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1072.4" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="1069.4" y="1091.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1072.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.08%)</title><rect x="1069.4" y="1075.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1072.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.08%)</title><rect x="1069.4" y="1059.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1072.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.08%)</title><rect x="1069.4" y="1043.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1072.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.08%)</title><rect x="1069.4" y="1027.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1072.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.08%)</title><rect x="1069.4" y="1011.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1072.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.08%)</title><rect x="1069.4" y="995.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1072.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.08%)</title><rect x="1069.4" y="979.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1072.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.08%)</title><rect x="1069.4" y="963.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1072.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.08%)</title><rect x="1069.4" y="947.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1072.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.08%)</title><rect x="1069.4" y="931.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1072.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.08%)</title><rect x="1069.4" y="915.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1072.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.08%)</title><rect x="1069.4" y="899.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1072.4" y="910.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.08%)</title><rect x="1069.4" y="883.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1072.4" y="894.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (1 samples, 0.08%)</title><rect x="1069.4" y="867.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1072.4" y="878.0"></text>
</g>
<g>
<title>start_thread (123 samples, 10.14%)</title><rect x="1070.3" y="1123.0" width="119.7" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1073.3" y="1134.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (123 samples, 10.14%)</title><rect x="1070.3" y="1107.0" width="119.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1073.3" y="1118.0">java_start(Thre..</text>
</g>
<g>
<title>GangWorker::loop() (19 samples, 1.57%)</title><rect x="1070.3" y="1091.0" width="18.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1073.3" y="1102.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (5 samples, 0.41%)</title><rect x="1070.3" y="1075.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1073.3" y="1086.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.41%)</title><rect x="1070.3" y="1059.0" width="4.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1073.3" y="1070.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.16%)</title><rect x="1070.3" y="1043.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1073.3" y="1054.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.25%)</title><rect x="1072.3" y="1043.0" width="2.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1075.3" y="1054.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (14 samples, 1.15%)</title><rect x="1075.2" y="1075.0" width="13.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1078.2" y="1086.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.25%)</title><rect x="1075.2" y="1059.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1078.2" y="1070.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.08%)</title><rect x="1075.2" y="1043.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1078.2" y="1054.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.08%)</title><rect x="1076.2" y="1043.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1079.2" y="1054.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.08%)</title><rect x="1077.2" y="1043.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1080.2" y="1054.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (5 samples, 0.41%)</title><rect x="1078.1" y="1059.0" width="4.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1081.1" y="1070.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.25%)</title><rect x="1078.1" y="1043.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1081.1" y="1054.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (3 samples, 0.25%)</title><rect x="1078.1" y="1027.0" width="2.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1081.1" y="1038.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (3 samples, 0.25%)</title><rect x="1078.1" y="1011.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1081.1" y="1022.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (3 samples, 0.25%)</title><rect x="1078.1" y="995.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1081.1" y="1006.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.16%)</title><rect x="1081.0" y="1043.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1084.0" y="1054.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (2 samples, 0.16%)</title><rect x="1081.0" y="1027.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1084.0" y="1038.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (6 samples, 0.49%)</title><rect x="1083.0" y="1059.0" width="5.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1086.0" y="1070.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (6 samples, 0.49%)</title><rect x="1083.0" y="1043.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1086.0" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (6 samples, 0.49%)</title><rect x="1083.0" y="1027.0" width="5.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1086.0" y="1038.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (6 samples, 0.49%)</title><rect x="1083.0" y="1011.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1086.0" y="1022.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (6 samples, 0.49%)</title><rect x="1083.0" y="995.0" width="5.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1086.0" y="1006.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (6 samples, 0.49%)</title><rect x="1083.0" y="979.0" width="5.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1086.0" y="990.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (5 samples, 0.41%)</title><rect x="1084.0" y="963.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1087.0" y="974.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.08%)</title><rect x="1084.9" y="947.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1087.9" y="958.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.08%)</title><rect x="1084.9" y="931.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1087.9" y="942.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (2 samples, 0.16%)</title><rect x="1085.9" y="947.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1088.9" y="958.0"></text>
</g>
<g>
<title>G1CollectedHeap::heap() (1 samples, 0.08%)</title><rect x="1086.9" y="931.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1089.9" y="942.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.08%)</title><rect x="1087.9" y="947.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1090.9" y="958.0"></text>
</g>
<g>
<title>JavaThread::run() (103 samples, 8.49%)</title><rect x="1088.8" y="1091.0" width="100.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1091.8" y="1102.0">JavaThread::..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (103 samples, 8.49%)</title><rect x="1088.8" y="1075.0" width="100.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1091.8" y="1086.0">JavaThread::..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (103 samples, 8.49%)</title><rect x="1088.8" y="1059.0" width="100.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1091.8" y="1070.0">CompileBroke..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (103 samples, 8.49%)</title><rect x="1088.8" y="1043.0" width="100.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1091.8" y="1054.0">CompileBroke..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (102 samples, 8.41%)</title><rect x="1088.8" y="1027.0" width="99.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1091.8" y="1038.0">C2Compiler::..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (102 samples, 8.41%)</title><rect x="1088.8" y="1011.0" width="99.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1091.8" y="1022.0">Compile::Com..</text>
</g>
<g>
<title>Compile::Code_Gen() (45 samples, 3.71%)</title><rect x="1088.8" y="995.0" width="43.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1091.8" y="1006.0">Comp..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.16%)</title><rect x="1088.8" y="979.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1091.8" y="990.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.16%)</title><rect x="1088.8" y="963.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1091.8" y="974.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.08%)</title><rect x="1089.8" y="947.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1092.8" y="958.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.08%)</title><rect x="1090.8" y="979.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1093.8" y="990.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.08%)</title><rect x="1090.8" y="963.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1093.8" y="974.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.08%)</title><rect x="1090.8" y="947.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1093.8" y="958.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 0.33%)</title><rect x="1091.7" y="979.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1094.7" y="990.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.25%)</title><rect x="1091.7" y="963.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1094.7" y="974.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.08%)</title><rect x="1091.7" y="947.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1094.7" y="958.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.08%)</title><rect x="1092.7" y="947.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1095.7" y="958.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.08%)</title><rect x="1092.7" y="931.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1095.7" y="942.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.08%)</title><rect x="1092.7" y="915.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1095.7" y="926.0"></text>
</g>
<g>
<title>Node::operator new(unsigned long, Compile*) (1 samples, 0.08%)</title><rect x="1092.7" y="899.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1095.7" y="910.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.08%)</title><rect x="1093.7" y="947.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1096.7" y="958.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.08%)</title><rect x="1093.7" y="931.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1096.7" y="942.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.08%)</title><rect x="1093.7" y="915.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1096.7" y="926.0"></text>
</g>
<g>
<title>MergeMemNode::Opcode() const (1 samples, 0.08%)</title><rect x="1094.7" y="963.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1097.7" y="974.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.25%)</title><rect x="1095.6" y="979.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1098.6" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::estimate_block_frequency() (1 samples, 0.08%)</title><rect x="1095.6" y="963.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1098.6" y="974.0"></text>
</g>
<g>
<title>CFGLoop::compute_freq() (1 samples, 0.08%)</title><rect x="1095.6" y="947.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1098.6" y="958.0"></text>
</g>
<g>
<title>RethrowExceptionNode::is_block_proj() const (1 samples, 0.08%)</title><rect x="1095.6" y="931.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1098.6" y="942.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.16%)</title><rect x="1096.6" y="963.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1099.6" y="974.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.16%)</title><rect x="1096.6" y="947.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1099.6" y="958.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.08%)</title><rect x="1096.6" y="931.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1099.6" y="942.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.08%)</title><rect x="1097.6" y="931.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1100.6" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (35 samples, 2.89%)</title><rect x="1098.6" y="979.0" width="34.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1101.6" y="990.0">Ph..</text>
</g>
<g>
<title>Node::rematerialize() const (2 samples, 0.16%)</title><rect x="1098.6" y="963.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1101.6" y="974.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.08%)</title><rect x="1100.5" y="963.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1103.5" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.16%)</title><rect x="1101.5" y="963.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1104.5" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.08%)</title><rect x="1102.4" y="947.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1105.4" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 0.25%)</title><rect x="1103.4" y="963.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1106.4" y="974.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.08%)</title><rect x="1104.4" y="947.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1107.4" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (1 samples, 0.08%)</title><rect x="1105.4" y="947.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1108.4" y="958.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.08%)</title><rect x="1105.4" y="931.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1108.4" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 0.58%)</title><rect x="1106.3" y="963.0" width="6.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1109.3" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 0.33%)</title><rect x="1108.3" y="947.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1111.3" y="958.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.25%)</title><rect x="1109.3" y="931.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1112.3" y="942.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.08%)</title><rect x="1112.2" y="947.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1115.2" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.08%)</title><rect x="1113.1" y="963.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1116.1" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1113.1" y="947.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1116.1" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (1 samples, 0.08%)</title><rect x="1114.1" y="963.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1117.1" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.25%)</title><rect x="1115.1" y="963.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1118.1" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.25%)</title><rect x="1118.0" y="963.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1121.0" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.08%)</title><rect x="1120.0" y="947.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1123.0" y="958.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.16%)</title><rect x="1120.9" y="963.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1123.9" y="974.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.16%)</title><rect x="1120.9" y="947.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1123.9" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (2 samples, 0.16%)</title><rect x="1120.9" y="931.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1123.9" y="942.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (5 samples, 0.41%)</title><rect x="1122.9" y="963.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1125.9" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.25%)</title><rect x="1124.8" y="947.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1127.8" y="958.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.16%)</title><rect x="1127.7" y="963.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1130.7" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1128.7" y="947.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1131.7" y="958.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.16%)</title><rect x="1129.7" y="963.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1132.7" y="974.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.08%)</title><rect x="1130.7" y="947.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1133.7" y="958.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.08%)</title><rect x="1131.6" y="963.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1134.6" y="974.0"></text>
</g>
<g>
<title>Compile::Optimize() (48 samples, 3.96%)</title><rect x="1132.6" y="995.0" width="46.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1135.6" y="1006.0">Comp..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.08%)</title><rect x="1132.6" y="979.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1135.6" y="990.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.08%)</title><rect x="1132.6" y="963.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1135.6" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.16%)</title><rect x="1133.6" y="979.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1136.6" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.16%)</title><rect x="1133.6" y="963.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1136.6" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::add_final_edges(Node*) (1 samples, 0.08%)</title><rect x="1133.6" y="947.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1136.6" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.08%)</title><rect x="1133.6" y="931.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1136.6" y="942.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.08%)</title><rect x="1133.6" y="915.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1136.6" y="926.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.08%)</title><rect x="1133.6" y="899.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.6" y="910.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.08%)</title><rect x="1133.6" y="883.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.6" y="894.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.08%)</title><rect x="1133.6" y="867.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1136.6" y="878.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1133.6" y="851.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1136.6" y="862.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1133.6" y="835.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1136.6" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1134.6" y="947.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1137.6" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1134.6" y="931.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1137.6" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1134.6" y="915.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1137.6" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1134.6" y="899.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1137.6" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1134.6" y="883.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1137.6" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1134.6" y="867.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1137.6" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1134.6" y="851.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1137.6" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1134.6" y="835.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1137.6" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1134.6" y="819.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1137.6" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="1134.6" y="803.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1137.6" y="814.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="1134.6" y="787.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1137.6" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (36 samples, 2.97%)</title><rect x="1135.5" y="979.0" width="35.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.5" y="990.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (4 samples, 0.33%)</title><rect x="1135.5" y="963.0" width="3.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1138.5" y="974.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.08%)</title><rect x="1138.4" y="947.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1141.4" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 0.41%)</title><rect x="1139.4" y="963.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1142.4" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.08%)</title><rect x="1141.4" y="947.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1144.4" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.08%)</title><rect x="1142.3" y="947.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1145.3" y="958.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.08%)</title><rect x="1143.3" y="947.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1146.3" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (19 samples, 1.57%)</title><rect x="1144.3" y="963.0" width="18.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1147.3" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (17 samples, 1.40%)</title><rect x="1146.2" y="947.0" width="16.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1149.2" y="958.0"></text>
</g>
<g>
<title>Node::unique_ctrl_out() (1 samples, 0.08%)</title><rect x="1146.2" y="931.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.2" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (16 samples, 1.32%)</title><rect x="1147.2" y="931.0" width="15.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1150.2" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1161.8" y="915.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.8" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.08%)</title><rect x="1162.8" y="963.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.8" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (5 samples, 0.41%)</title><rect x="1163.7" y="963.0" width="4.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1166.7" y="974.0"></text>
</g>
<g>
<title>MemBarCPUOrderNode::Opcode() const (1 samples, 0.08%)</title><rect x="1164.7" y="947.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.7" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (2 samples, 0.16%)</title><rect x="1165.7" y="947.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.7" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.08%)</title><rect x="1167.6" y="947.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.6" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca(Node*, Node*) const (1 samples, 0.08%)</title><rect x="1167.6" y="931.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.6" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_internal(Node*, Node*) const (1 samples, 0.08%)</title><rect x="1167.6" y="915.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.6" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.16%)</title><rect x="1168.6" y="963.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.6" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.16%)</title><rect x="1168.6" y="947.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.6" y="958.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.08%)</title><rect x="1168.6" y="931.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.6" y="942.0"></text>
</g>
<g>
<title>Type::hash() const (1 samples, 0.08%)</title><rect x="1168.6" y="915.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.6" y="926.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1169.6" y="931.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.6" y="942.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.08%)</title><rect x="1169.6" y="915.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.6" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (9 samples, 0.74%)</title><rect x="1170.5" y="979.0" width="8.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.5" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (9 samples, 0.74%)</title><rect x="1170.5" y="963.0" width="8.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.5" y="974.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (3 samples, 0.25%)</title><rect x="1170.5" y="947.0" width="3.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1173.5" y="958.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1170.5" y="931.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.5" y="942.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.08%)</title><rect x="1170.5" y="915.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.5" y="926.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1170.5" y="899.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.5" y="910.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1170.5" y="883.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.5" y="894.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1170.5" y="867.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.5" y="878.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1170.5" y="851.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.5" y="862.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (2 samples, 0.16%)</title><rect x="1171.5" y="931.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.5" y="942.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (2 samples, 0.16%)</title><rect x="1171.5" y="915.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.5" y="926.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1171.5" y="899.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.5" y="910.0"></text>
</g>
<g>
<title>Node::find_exact_control(Node*) (1 samples, 0.08%)</title><rect x="1172.5" y="899.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.5" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (3 samples, 0.25%)</title><rect x="1173.5" y="947.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.5" y="958.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.16%)</title><rect x="1173.5" y="931.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.5" y="942.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.08%)</title><rect x="1174.4" y="915.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.4" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.08%)</title><rect x="1175.4" y="931.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.4" y="942.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.08%)</title><rect x="1175.4" y="915.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.4" y="926.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1176.4" y="947.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.4" y="958.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.08%)</title><rect x="1176.4" y="931.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.4" y="942.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.16%)</title><rect x="1177.4" y="947.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.4" y="958.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.16%)</title><rect x="1177.4" y="931.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.4" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.16%)</title><rect x="1177.4" y="915.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.4" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.16%)</title><rect x="1177.4" y="899.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.4" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.16%)</title><rect x="1177.4" y="883.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.4" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.16%)</title><rect x="1177.4" y="867.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.4" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.16%)</title><rect x="1177.4" y="851.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.4" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.16%)</title><rect x="1177.4" y="835.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.4" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.16%)</title><rect x="1177.4" y="819.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.4" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.16%)</title><rect x="1177.4" y="803.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.4" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.16%)</title><rect x="1177.4" y="787.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.4" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.16%)</title><rect x="1177.4" y="771.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.4" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1177.4" y="755.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.4" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1177.4" y="739.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.4" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1177.4" y="723.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.4" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1177.4" y="707.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.4" y="718.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1177.4" y="691.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.4" y="702.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1177.4" y="675.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.4" y="686.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1178.3" y="755.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.3" y="766.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1178.3" y="739.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.3" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.58%)</title><rect x="1179.3" y="995.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.3" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.58%)</title><rect x="1179.3" y="979.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.3" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.49%)</title><rect x="1179.3" y="963.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.3" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.49%)</title><rect x="1179.3" y="947.0" width="5.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.3" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.49%)</title><rect x="1179.3" y="931.0" width="5.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.3" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.49%)</title><rect x="1179.3" y="915.0" width="5.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.3" y="926.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1179.3" y="899.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.3" y="910.0"></text>
</g>
<g>
<title>Compile::find_intrinsic(ciMethod*, bool) (1 samples, 0.08%)</title><rect x="1179.3" y="883.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.3" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.33%)</title><rect x="1180.3" y="899.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.3" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.33%)</title><rect x="1180.3" y="883.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.3" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.33%)</title><rect x="1180.3" y="867.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.33%)</title><rect x="1180.3" y="851.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.33%)</title><rect x="1180.3" y="835.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.33%)</title><rect x="1180.3" y="819.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.3" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1180.3" y="803.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.3" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1180.3" y="787.0" width="1.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.3" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1180.3" y="771.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1180.3" y="755.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1180.3" y="739.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1180.3" y="723.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.3" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1180.3" y="707.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.3" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1180.3" y="691.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1180.3" y="675.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1180.3" y="659.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1180.3" y="643.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1180.3" y="627.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.3" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1180.3" y="611.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.3" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1180.3" y="595.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1180.3" y="579.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1180.3" y="563.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1180.3" y="547.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1180.3" y="531.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.3" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.3" y="515.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.3" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1180.3" y="499.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1180.3" y="483.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1180.3" y="467.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1180.3" y="451.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1180.3" y="435.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.3" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.3" y="419.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.3" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1180.3" y="403.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1180.3" y="387.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1180.3" y="371.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1180.3" y="355.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.3" y="366.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1180.3" y="339.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.3" y="350.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.08%)</title><rect x="1180.3" y="323.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.3" y="334.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1180.3" y="307.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1181.2" y="531.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1181.2" y="515.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.2" y="526.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.08%)</title><rect x="1181.2" y="499.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.2" y="510.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.08%)</title><rect x="1181.2" y="483.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.2" y="494.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.08%)</title><rect x="1181.2" y="467.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.2" y="478.0"></text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 0.08%)</title><rect x="1181.2" y="451.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.2" y="462.0"></text>
</g>
<g>
<title>IdealKit::do_memory_merge(Node*, Node*) (1 samples, 0.08%)</title><rect x="1181.2" y="435.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.2" y="446.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1182.2" y="803.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.2" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1182.2" y="787.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.2" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1182.2" y="771.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.2" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1182.2" y="755.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1182.2" y="739.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1182.2" y="723.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1182.2" y="707.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.2" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1182.2" y="691.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.2" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1182.2" y="675.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.2" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1182.2" y="659.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1182.2" y="643.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1182.2" y="627.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1182.2" y="611.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.2" y="622.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1182.2" y="595.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.2" y="606.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1182.2" y="579.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.2" y="590.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1182.2" y="563.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.2" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1182.2" y="547.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.2" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1182.2" y="531.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.2" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1182.2" y="515.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.2" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1182.2" y="499.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.2" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1182.2" y="483.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.2" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.08%)</title><rect x="1182.2" y="467.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.2" y="478.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1182.2" y="451.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.2" y="462.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1182.2" y="435.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.2" y="446.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1182.2" y="419.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.2" y="430.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.08%)</title><rect x="1182.2" y="403.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.2" y="414.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_interface_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.08%)</title><rect x="1182.2" y="387.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.2" y="398.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="1182.2" y="371.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.2" y="382.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.08%)</title><rect x="1182.2" y="355.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.2" y="366.0"></text>
</g>
<g>
<title>SystemDictionary::add_loader_constraint(Symbol*, Handle, Handle, Thread*) (1 samples, 0.08%)</title><rect x="1182.2" y="339.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.2" y="350.0"></text>
</g>
<g>
<title>LoaderConstraintTable::add_entry(Symbol*, Klass*, Handle, Klass*, Handle) (1 samples, 0.08%)</title><rect x="1182.2" y="323.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.2" y="334.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.2" y="595.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.2" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.2" y="579.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.2" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1183.2" y="563.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1183.2" y="547.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1183.2" y="531.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1183.2" y="515.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1183.2" y="499.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.2" y="510.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.2" y="483.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.2" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.2" y="467.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.2" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1183.2" y="451.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1183.2" y="435.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1183.2" y="419.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1183.2" y="403.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1183.2" y="387.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.2" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.2" y="371.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.2" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1183.2" y="355.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.2" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1183.2" y="339.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.2" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1183.2" y="323.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1183.2" y="307.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1183.2" y="291.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.2" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.2" y="275.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.2" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1183.2" y="259.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.2" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1183.2" y="243.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.2" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1183.2" y="227.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.2" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1183.2" y="211.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.2" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1183.2" y="195.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.2" y="206.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.2" y="179.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.2" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.2" y="163.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.2" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1183.2" y="147.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.2" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1183.2" y="131.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.2" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1183.2" y="115.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.2" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1183.2" y="99.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.2" y="110.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.08%)</title><rect x="1183.2" y="83.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.2" y="94.0"></text>
</g>
<g>
<title>BuildCutout::BuildCutout(GraphKit*, Node*, float, float) (1 samples, 0.08%)</title><rect x="1183.2" y="67.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.2" y="78.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.08%)</title><rect x="1183.2" y="51.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.2" y="62.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.08%)</title><rect x="1183.2" y="35.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1186.2" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.2" y="899.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.2" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.2" y="883.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.2" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1184.2" y="867.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.2" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1184.2" y="851.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.2" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1184.2" y="835.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.2" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1184.2" y="819.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.2" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1184.2" y="803.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.2" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.2" y="787.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.2" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1184.2" y="771.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.2" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1184.2" y="755.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1184.2" y="739.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1184.2" y="723.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1184.2" y="707.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.2" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.2" y="691.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.2" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1184.2" y="675.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.2" y="686.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.08%)</title><rect x="1184.2" y="659.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.2" y="670.0"></text>
</g>
<g>
<title>ciBaseObject::set_ident(unsigned int) (1 samples, 0.08%)</title><rect x="1184.2" y="643.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.2" y="654.0"></text>
</g>
<g>
<title>ciMethod::get_osr_flow_analysis(int) (1 samples, 0.08%)</title><rect x="1185.1" y="963.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.1" y="974.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1185.1" y="947.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.1" y="958.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1185.1" y="931.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.1" y="942.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1185.1" y="915.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.1" y="926.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1185.1" y="899.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.1" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1185.1" y="883.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.1" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.08%)</title><rect x="1185.1" y="867.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.1" y="878.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1185.1" y="851.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.1" y="862.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1185.1" y="835.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.1" y="846.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1185.1" y="819.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.1" y="830.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1185.1" y="803.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.1" y="814.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (2 samples, 0.16%)</title><rect x="1186.1" y="995.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.1" y="1006.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.08%)</title><rect x="1186.1" y="979.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.1" y="990.0"></text>
</g>
<g>
<title>Unique_Node_List::remove_useless_nodes(VectorSet&amp;) (1 samples, 0.08%)</title><rect x="1187.1" y="979.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.1" y="990.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.08%)</title><rect x="1188.1" y="1027.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.1" y="1038.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.08%)</title><rect x="1188.1" y="1011.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.1" y="1022.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.08%)</title><rect x="1188.1" y="995.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.1" y="1006.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.08%)</title><rect x="1188.1" y="979.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.1" y="990.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.08%)</title><rect x="1188.1" y="963.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.1" y="974.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.08%)</title><rect x="1188.1" y="947.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.1" y="958.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.08%)</title><rect x="1188.1" y="931.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.1" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.08%)</title><rect x="1188.1" y="915.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.1" y="926.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.08%)</title><rect x="1188.1" y="899.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.1" y="910.0"></text>
</g>
<g>
<title>BlockListBuilder::set_leaders() (1 samples, 0.08%)</title><rect x="1188.1" y="883.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.1" y="894.0"></text>
</g>
<g>
<title>ciMethod::bci_block_start() (1 samples, 0.08%)</title><rect x="1188.1" y="867.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.1" y="878.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.08%)</title><rect x="1188.1" y="851.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.1" y="862.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.08%)</title><rect x="1188.1" y="835.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1191.1" y="846.0"></text>
</g>
<g>
<title>ciMethod::get_method_blocks() (1 samples, 0.08%)</title><rect x="1188.1" y="819.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.1" y="830.0"></text>
</g>
<g>
<title>ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*) (1 samples, 0.08%)</title><rect x="1188.1" y="803.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.1" y="814.0"></text>
</g>
<g>
<title>ciMethodBlocks::do_analysis() (1 samples, 0.08%)</title><rect x="1188.1" y="787.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.1" y="798.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.08%)</title><rect x="1189.0" y="1091.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1192.0" y="1102.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.08%)</title><rect x="1189.0" y="1075.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.0" y="1086.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.08%)</title><rect x="1189.0" y="1059.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1192.0" y="1070.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.08%)</title><rect x="1189.0" y="1043.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.0" y="1054.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.08%)</title><rect x="1189.0" y="1027.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1192.0" y="1038.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.08%)</title><rect x="1189.0" y="1011.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.0" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.08%)</title><rect x="1189.0" y="995.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1192.0" y="1006.0"></text>
</g>
<g>
<title>G1CollectedHeap::process_discovered_references(unsigned int) (1 samples, 0.08%)</title><rect x="1189.0" y="979.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.0" y="990.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_discovered_references(BoolObjectClosure*, OopClosure*, VoidClosure*, AbstractRefProcTaskExecutor*, GCTimer*, GCId) (1 samples, 0.08%)</title><rect x="1189.0" y="963.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1192.0" y="974.0"></text>
</g>
<g>
<title>JNIHandles::weak_oops_do(BoolObjectClosure*, OopClosure*) (1 samples, 0.08%)</title><rect x="1189.0" y="947.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.0" y="958.0"></text>
</g>
</g>
</svg>
