<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1270" onload="init(evt)" viewBox="0 0 1200 1270" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1253"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1253"> </text>
<g id="frames">
<g>
<title>all (495 samples, 100.00%)</title><rect x="10.0" y="1219.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1230.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (32 samples, 6.46%)</title><rect x="10.0" y="1203.0" width="76.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1214.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (32 samples, 6.46%)</title><rect x="10.0" y="1187.0" width="76.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1198.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.20%)</title><rect x="10.0" y="1171.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (1 samples, 0.20%)</title><rect x="10.0" y="1155.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.20%)</title><rect x="10.0" y="1139.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.20%)</title><rect x="10.0" y="1123.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (1 samples, 0.20%)</title><rect x="12.4" y="1171.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.4" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (1 samples, 0.20%)</title><rect x="12.4" y="1155.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.4" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.20%)</title><rect x="12.4" y="1139.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.4" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$269/1390103239.accept (1 samples, 0.20%)</title><rect x="12.4" y="1123.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.4" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (1 samples, 0.20%)</title><rect x="12.4" y="1107.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.4" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.20%)</title><rect x="12.4" y="1091.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.4" y="1102.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.20%)</title><rect x="12.4" y="1075.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.4" y="1086.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (8 samples, 1.62%)</title><rect x="14.8" y="1171.0" width="19.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.8" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$268/2117666305.accept (5 samples, 1.01%)</title><rect x="14.8" y="1155.0" width="11.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.8" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (5 samples, 1.01%)</title><rect x="14.8" y="1139.0" width="11.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.8" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (3 samples, 0.61%)</title><rect x="14.8" y="1123.0" width="7.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.8" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (3 samples, 0.61%)</title><rect x="14.8" y="1107.0" width="7.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.8" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (3 samples, 0.61%)</title><rect x="14.8" y="1091.0" width="7.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.8" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (3 samples, 0.61%)</title><rect x="14.8" y="1075.0" width="7.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="17.8" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 0.61%)</title><rect x="14.8" y="1059.0" width="7.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.8" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (3 samples, 0.61%)</title><rect x="14.8" y="1043.0" width="7.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.8" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (3 samples, 0.61%)</title><rect x="14.8" y="1027.0" width="7.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="17.8" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (3 samples, 0.61%)</title><rect x="14.8" y="1011.0" width="7.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.8" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (3 samples, 0.61%)</title><rect x="14.8" y="995.0" width="7.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="17.8" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (2 samples, 0.40%)</title><rect x="21.9" y="1123.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="24.9" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 0.40%)</title><rect x="21.9" y="1107.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="24.9" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.20%)</title><rect x="24.3" y="1091.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="27.3" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.20%)</title><rect x="24.3" y="1075.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="27.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.20%)</title><rect x="24.3" y="1059.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.3" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.20%)</title><rect x="24.3" y="1043.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="27.3" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.20%)</title><rect x="24.3" y="1027.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="27.3" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (1 samples, 0.20%)</title><rect x="24.3" y="1011.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="27.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (3 samples, 0.61%)</title><rect x="26.7" y="1155.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="29.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (3 samples, 0.61%)</title><rect x="26.7" y="1139.0" width="7.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="29.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.61%)</title><rect x="26.7" y="1123.0" width="7.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="29.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.61%)</title><rect x="26.7" y="1107.0" width="7.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="29.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (22 samples, 4.44%)</title><rect x="33.8" y="1171.0" width="52.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="36.8" y="1182.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (22 samples, 4.44%)</title><rect x="33.8" y="1155.0" width="52.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="36.8" y="1166.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (15 samples, 3.03%)</title><rect x="33.8" y="1139.0" width="35.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="36.8" y="1150.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (7 samples, 1.41%)</title><rect x="33.8" y="1123.0" width="16.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="36.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (7 samples, 1.41%)</title><rect x="33.8" y="1107.0" width="16.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="36.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.maybeThrowAnyException (1 samples, 0.20%)</title><rect x="33.8" y="1091.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="36.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.clearErrorsAndMaybeThrowException (1 samples, 0.20%)</title><rect x="33.8" y="1075.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="36.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 0.81%)</title><rect x="36.2" y="1091.0" width="9.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="39.2" y="1102.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.20%)</title><rect x="36.2" y="1075.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="39.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$4.read (1 samples, 0.20%)</title><rect x="36.2" y="1059.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="39.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.20%)</title><rect x="38.6" y="1075.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="41.6" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.20%)</title><rect x="38.6" y="1059.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="41.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/OffsetCommitResponse.&lt;init&gt; (1 samples, 0.20%)</title><rect x="38.6" y="1043.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="41.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitResponseData.&lt;init&gt; (1 samples, 0.20%)</title><rect x="38.6" y="1027.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="41.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitResponseData.fromStruct (1 samples, 0.20%)</title><rect x="38.6" y="1011.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="41.6" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.40%)</title><rect x="41.0" y="1075.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="44.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.20%)</title><rect x="41.0" y="1059.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="44.0" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.20%)</title><rect x="41.0" y="1043.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="44.0" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.20%)</title><rect x="41.0" y="1027.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="44.0" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.20%)</title><rect x="41.0" y="1011.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="44.0" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.20%)</title><rect x="41.0" y="995.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="44.0" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.20%)</title><rect x="41.0" y="979.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="44.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/SystemTime.milliseconds (1 samples, 0.20%)</title><rect x="43.4" y="1059.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="46.4" y="1070.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.20%)</title><rect x="43.4" y="1043.0" width="2.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="46.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$264/1293435343.shouldBlock (1 samples, 0.20%)</title><rect x="45.8" y="1091.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="48.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.20%)</title><rect x="45.8" y="1075.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="48.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.20%)</title><rect x="45.8" y="1059.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="48.8" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.anyMatch (1 samples, 0.20%)</title><rect x="45.8" y="1043.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="48.8" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.20%)</title><rect x="45.8" y="1027.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="48.8" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.20%)</title><rect x="45.8" y="1011.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="48.8" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.20%)</title><rect x="45.8" y="995.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="48.8" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$$Lambda$51/1794717576.get (1 samples, 0.20%)</title><rect x="45.8" y="979.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="48.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.20%)</title><rect x="48.1" y="1091.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="51.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.20%)</title><rect x="48.1" y="1075.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="51.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.20%)</title><rect x="48.1" y="1059.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="51.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.20%)</title><rect x="48.1" y="1043.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="51.1" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture$1.onSuccess (1 samples, 0.20%)</title><rect x="48.1" y="1027.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="51.1" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$CoordinatorResponseHandler.onSuccess (1 samples, 0.20%)</title><rect x="48.1" y="1011.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="51.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$CoordinatorResponseHandler.onSuccess (1 samples, 0.20%)</title><rect x="48.1" y="995.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="51.1" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (7 samples, 1.41%)</title><rect x="50.5" y="1123.0" width="16.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="53.5" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.20%)</title><rect x="50.5" y="1107.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="53.5" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.20%)</title><rect x="50.5" y="1091.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="53.5" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.addAll (1 samples, 0.20%)</title><rect x="52.9" y="1107.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="55.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (5 samples, 1.01%)</title><rect x="55.3" y="1107.0" width="11.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="58.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (5 samples, 1.01%)</title><rect x="55.3" y="1091.0" width="11.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="58.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (5 samples, 1.01%)</title><rect x="55.3" y="1075.0" width="11.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="58.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.40%)</title><rect x="55.3" y="1059.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="58.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (2 samples, 0.40%)</title><rect x="55.3" y="1043.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="58.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (2 samples, 0.40%)</title><rect x="55.3" y="1027.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="58.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.ensureNoneRemaining (2 samples, 0.40%)</title><rect x="55.3" y="1011.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="58.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (3 samples, 0.61%)</title><rect x="60.1" y="1059.0" width="7.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="63.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (3 samples, 0.61%)</title><rect x="60.1" y="1043.0" width="7.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="63.1" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (2 samples, 0.40%)</title><rect x="60.1" y="1027.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="63.1" y="1038.0"></text>
</g>
<g>
<title>java/util/Optional.of (2 samples, 0.40%)</title><rect x="60.1" y="1011.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="63.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.20%)</title><rect x="64.8" y="1027.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="67.8" y="1038.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.20%)</title><rect x="64.8" y="1011.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="67.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.20%)</title><rect x="67.2" y="1123.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="70.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.20%)</title><rect x="67.2" y="1107.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="70.2" y="1118.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.20%)</title><rect x="67.2" y="1091.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="70.2" y="1102.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.20%)</title><rect x="67.2" y="1075.0" width="2.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="70.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (3 samples, 0.61%)</title><rect x="69.6" y="1139.0" width="7.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="72.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (3 samples, 0.61%)</title><rect x="69.6" y="1123.0" width="7.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="72.6" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (3 samples, 0.61%)</title><rect x="69.6" y="1107.0" width="7.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="72.6" y="1118.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.20%)</title><rect x="69.6" y="1091.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="72.6" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.20%)</title><rect x="69.6" y="1075.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="72.6" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.20%)</title><rect x="69.6" y="1059.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="72.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.20%)</title><rect x="69.6" y="1043.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="72.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.40%)</title><rect x="72.0" y="1091.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="75.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.40%)</title><rect x="72.0" y="1075.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="75.0" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.40%)</title><rect x="72.0" y="1059.0" width="4.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="75.0" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.40%)</title><rect x="72.0" y="1043.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="75.0" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.40%)</title><rect x="72.0" y="1027.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="75.0" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.40%)</title><rect x="72.0" y="1011.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="75.0" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.40%)</title><rect x="72.0" y="995.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="75.0" y="1006.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.20%)</title><rect x="72.0" y="979.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="75.0" y="990.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.20%)</title><rect x="74.4" y="979.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="77.4" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.20%)</title><rect x="74.4" y="963.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="77.4" y="974.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.20%)</title><rect x="74.4" y="947.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="77.4" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.20%)</title><rect x="74.4" y="931.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="77.4" y="942.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$59/551479935.get (1 samples, 0.20%)</title><rect x="74.4" y="915.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="77.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 0.40%)</title><rect x="76.7" y="1139.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="79.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.40%)</title><rect x="76.7" y="1123.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="79.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.pollDelayMs (1 samples, 0.20%)</title><rect x="76.7" y="1107.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="79.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.pollDelayMs (1 samples, 0.20%)</title><rect x="76.7" y="1091.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="79.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isConnected (1 samples, 0.20%)</title><rect x="76.7" y="1075.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="79.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.throttleDelayMs (1 samples, 0.20%)</title><rect x="76.7" y="1059.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="79.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.20%)</title><rect x="79.1" y="1107.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="82.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.20%)</title><rect x="79.1" y="1091.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="82.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.20%)</title><rect x="79.1" y="1075.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="82.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.20%)</title><rect x="79.1" y="1059.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="82.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.20%)</title><rect x="79.1" y="1043.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="82.1" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.20%)</title><rect x="79.1" y="1027.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="82.1" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest$TopicAndPartitionData.batchByTopic (1 samples, 0.20%)</title><rect x="79.1" y="1011.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="82.1" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry.getValue (1 samples, 0.20%)</title><rect x="79.1" y="995.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="82.1" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.40%)</title><rect x="81.5" y="1139.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="84.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 0.40%)</title><rect x="81.5" y="1123.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="84.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (2 samples, 0.40%)</title><rect x="81.5" y="1107.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="84.5" y="1118.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.&lt;init&gt; (1 samples, 0.20%)</title><rect x="81.5" y="1091.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="84.5" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.putMapEntries (1 samples, 0.20%)</title><rect x="81.5" y="1075.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="84.5" y="1086.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.20%)</title><rect x="81.5" y="1059.0" width="2.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="84.5" y="1070.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.20%)</title><rect x="83.9" y="1091.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="86.9" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.20%)</title><rect x="83.9" y="1075.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="86.9" y="1086.0"></text>
</g>
<g>
<title>java/lang/Thread.run (260 samples, 52.53%)</title><rect x="86.3" y="1203.0" width="619.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="89.3" y="1214.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (260 samples, 52.53%)</title><rect x="86.3" y="1187.0" width="619.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="89.3" y="1198.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (260 samples, 52.53%)</title><rect x="86.3" y="1171.0" width="619.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="89.3" y="1182.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$288/426485627.run (245 samples, 49.49%)</title><rect x="93.4" y="1155.0" width="584.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="96.4" y="1166.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$288/4264856..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62 (245 samples, 49.49%)</title><rect x="93.4" y="1139.0" width="584.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="96.4" y="1150.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (245 samples, 49.49%)</title><rect x="93.4" y="1123.0" width="584.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="96.4" y="1134.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (245 samples, 49.49%)</title><rect x="93.4" y="1107.0" width="584.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="96.4" y="1118.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (10 samples, 2.02%)</title><rect x="103.0" y="1091.0" width="23.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="106.0" y="1102.0">c..</text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (10 samples, 2.02%)</title><rect x="103.0" y="1075.0" width="23.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="106.0" y="1086.0">j..</text>
</g>
<g>
<title>java/util/HashMap.get (10 samples, 2.02%)</title><rect x="103.0" y="1059.0" width="23.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="106.0" y="1070.0">j..</text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.61%)</title><rect x="103.0" y="1043.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="106.0" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (7 samples, 1.41%)</title><rect x="110.1" y="1043.0" width="16.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="113.1" y="1054.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.20%)</title><rect x="124.4" y="1027.0" width="2.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="127.4" y="1038.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.20%)</title><rect x="124.4" y="1011.0" width="2.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="127.4" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (16 samples, 3.23%)</title><rect x="126.8" y="1091.0" width="38.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="129.8" y="1102.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (1 samples, 0.20%)</title><rect x="145.9" y="1075.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="148.9" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 1.41%)</title><rect x="148.3" y="1075.0" width="16.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="151.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 1.41%)</title><rect x="148.3" y="1059.0" width="16.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="151.3" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (7 samples, 1.41%)</title><rect x="148.3" y="1043.0" width="16.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="151.3" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.40%)</title><rect x="148.3" y="1027.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="151.3" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.40%)</title><rect x="148.3" y="1011.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="151.3" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$300/823478079.accept (2 samples, 0.40%)</title><rect x="148.3" y="995.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="151.3" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 1.01%)</title><rect x="153.0" y="1027.0" width="11.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="156.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$300/823478079.accept (5 samples, 1.01%)</title><rect x="153.0" y="1011.0" width="11.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="156.0" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (5 samples, 1.01%)</title><rect x="153.0" y="995.0" width="11.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="156.0" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (5 samples, 1.01%)</title><rect x="153.0" y="979.0" width="11.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="156.0" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (5 samples, 1.01%)</title><rect x="153.0" y="963.0" width="11.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="156.0" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (5 samples, 1.01%)</title><rect x="153.0" y="947.0" width="11.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="156.0" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.40%)</title><rect x="153.0" y="931.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="156.0" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 0.40%)</title><rect x="153.0" y="915.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="156.0" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$285/875407282.accept (1 samples, 0.20%)</title><rect x="155.4" y="899.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="158.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.61%)</title><rect x="157.8" y="931.0" width="7.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="160.8" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (1 samples, 0.20%)</title><rect x="162.6" y="915.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="165.6" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (38 samples, 7.68%)</title><rect x="164.9" y="1091.0" width="90.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="167.9" y="1102.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$45/1556995360.extract (38 samples, 7.68%)</title><rect x="164.9" y="1075.0" width="90.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="167.9" y="1086.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (38 samples, 7.68%)</title><rect x="164.9" y="1059.0" width="90.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="167.9" y="1070.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (38 samples, 7.68%)</title><rect x="164.9" y="1043.0" width="90.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="167.9" y="1054.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (38 samples, 7.68%)</title><rect x="164.9" y="1027.0" width="90.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="167.9" y="1038.0">com/lineco..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (38 samples, 7.68%)</title><rect x="164.9" y="1011.0" width="90.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="167.9" y="1022.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (16 samples, 3.23%)</title><rect x="164.9" y="995.0" width="38.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="167.9" y="1006.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 0.81%)</title><rect x="164.9" y="979.0" width="9.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="167.9" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (3 samples, 0.61%)</title><rect x="164.9" y="963.0" width="7.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="167.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.40%)</title><rect x="167.3" y="947.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="170.3" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.40%)</title><rect x="167.3" y="931.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="170.3" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.40%)</title><rect x="167.3" y="915.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="170.3" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.40%)</title><rect x="167.3" y="899.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="170.3" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.40%)</title><rect x="167.3" y="883.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="170.3" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.&lt;init&gt; (1 samples, 0.20%)</title><rect x="172.1" y="963.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="175.1" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.20%)</title><rect x="172.1" y="947.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="175.1" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (12 samples, 2.42%)</title><rect x="174.5" y="979.0" width="28.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="177.5" y="990.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (12 samples, 2.42%)</title><rect x="174.5" y="963.0" width="28.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="177.5" y="974.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (2 samples, 0.40%)</title><rect x="174.5" y="947.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="177.5" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (5 samples, 1.01%)</title><rect x="179.3" y="947.0" width="11.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="182.3" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (5 samples, 1.01%)</title><rect x="179.3" y="931.0" width="11.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="182.3" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (1 samples, 0.20%)</title><rect x="179.3" y="915.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="182.3" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.20%)</title><rect x="179.3" y="899.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="182.3" y="910.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.20%)</title><rect x="179.3" y="883.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="182.3" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (4 samples, 0.81%)</title><rect x="181.6" y="915.0" width="9.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="184.6" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (5 samples, 1.01%)</title><rect x="191.2" y="947.0" width="11.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="194.2" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (19 samples, 3.84%)</title><rect x="203.1" y="995.0" width="45.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="206.1" y="1006.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (3 samples, 0.61%)</title><rect x="203.1" y="979.0" width="7.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="206.1" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.61%)</title><rect x="203.1" y="963.0" width="7.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="206.1" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 0.61%)</title><rect x="203.1" y="947.0" width="7.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="206.1" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (3 samples, 0.61%)</title><rect x="203.1" y="931.0" width="7.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="206.1" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (3 samples, 0.61%)</title><rect x="203.1" y="915.0" width="7.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="206.1" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.40%)</title><rect x="210.2" y="979.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="213.2" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.40%)</title><rect x="210.2" y="963.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="213.2" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.20%)</title><rect x="210.2" y="947.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="213.2" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.20%)</title><rect x="210.2" y="931.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="213.2" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.20%)</title><rect x="210.2" y="915.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="213.2" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.20%)</title><rect x="212.6" y="947.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="215.6" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.20%)</title><rect x="212.6" y="931.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="215.6" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.20%)</title><rect x="212.6" y="915.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="215.6" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (14 samples, 2.83%)</title><rect x="215.0" y="979.0" width="33.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="218.0" y="990.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (14 samples, 2.83%)</title><rect x="215.0" y="963.0" width="33.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="218.0" y="974.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.isExpectedStartObjectToken (1 samples, 0.20%)</title><rect x="217.4" y="947.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="220.4" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 0.81%)</title><rect x="219.8" y="947.0" width="9.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="222.8" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.20%)</title><rect x="219.8" y="931.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="222.8" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.20%)</title><rect x="219.8" y="915.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="222.8" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.20%)</title><rect x="219.8" y="899.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="222.8" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.20%)</title><rect x="219.8" y="883.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="222.8" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 0.61%)</title><rect x="222.2" y="931.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="225.2" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.20%)</title><rect x="222.2" y="915.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="225.2" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (2 samples, 0.40%)</title><rect x="224.5" y="915.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="227.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (2 samples, 0.40%)</title><rect x="224.5" y="899.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="227.5" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (2 samples, 0.40%)</title><rect x="224.5" y="883.0" width="4.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="227.5" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (2 samples, 0.40%)</title><rect x="224.5" y="867.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="227.5" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (8 samples, 1.62%)</title><rect x="229.3" y="947.0" width="19.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="232.3" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.20%)</title><rect x="229.3" y="931.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="232.3" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (7 samples, 1.41%)</title><rect x="231.7" y="931.0" width="16.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="234.7" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (7 samples, 1.41%)</title><rect x="231.7" y="915.0" width="16.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="234.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.40%)</title><rect x="231.7" y="899.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="234.7" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (2 samples, 0.40%)</title><rect x="231.7" y="883.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="234.7" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.20%)</title><rect x="236.5" y="899.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="239.5" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (4 samples, 0.81%)</title><rect x="238.8" y="899.0" width="9.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="241.8" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (4 samples, 0.81%)</title><rect x="238.8" y="883.0" width="9.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="241.8" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (4 samples, 0.81%)</title><rect x="238.8" y="867.0" width="9.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="241.8" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (4 samples, 0.81%)</title><rect x="238.8" y="851.0" width="9.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="241.8" y="862.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (4 samples, 0.81%)</title><rect x="238.8" y="835.0" width="9.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="241.8" y="846.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (2 samples, 0.40%)</title><rect x="243.6" y="819.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="246.6" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (3 samples, 0.61%)</title><rect x="248.4" y="995.0" width="7.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="251.4" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (3 samples, 0.61%)</title><rect x="248.4" y="979.0" width="7.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="251.4" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (3 samples, 0.61%)</title><rect x="248.4" y="963.0" width="7.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="251.4" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._findWellKnownSimple (2 samples, 0.40%)</title><rect x="248.4" y="947.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="251.4" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.20%)</title><rect x="253.2" y="947.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="256.2" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.20%)</title><rect x="253.2" y="931.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="256.2" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (177 samples, 35.76%)</title><rect x="255.5" y="1091.0" width="422.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="258.5" y="1102.0">com/linecorp/decaton/processor/runtime/internal/ProcessPip..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (21 samples, 4.24%)</title><rect x="277.0" y="1075.0" width="50.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="280.0" y="1086.0">com/l..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (21 samples, 4.24%)</title><rect x="277.0" y="1059.0" width="50.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="280.0" y="1070.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (20 samples, 4.04%)</title><rect x="279.4" y="1043.0" width="47.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="282.4" y="1054.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 0.61%)</title><rect x="279.4" y="1027.0" width="7.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="282.4" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.61%)</title><rect x="279.4" y="1011.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="282.4" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.61%)</title><rect x="279.4" y="995.0" width="7.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="282.4" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.61%)</title><rect x="279.4" y="979.0" width="7.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="282.4" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.61%)</title><rect x="279.4" y="963.0" width="7.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="282.4" y="974.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.wasLastOpReadOrNull (1 samples, 0.20%)</title><rect x="286.5" y="1027.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="289.5" y="1038.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.20%)</title><rect x="286.5" y="1011.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="289.5" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (16 samples, 3.23%)</title><rect x="288.9" y="1027.0" width="38.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="291.9" y="1038.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (11 samples, 2.22%)</title><rect x="298.4" y="1011.0" width="26.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="301.4" y="1022.0">j..</text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.20%)</title><rect x="298.4" y="995.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="301.4" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.20%)</title><rect x="298.4" y="979.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="301.4" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (10 samples, 2.02%)</title><rect x="300.8" y="995.0" width="23.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="303.8" y="1006.0">j..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.20%)</title><rect x="324.7" y="1011.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="327.7" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.61%)</title><rect x="327.1" y="1075.0" width="7.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="330.1" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.40%)</title><rect x="329.4" y="1059.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="332.4" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (32 samples, 6.46%)</title><rect x="334.2" y="1075.0" width="76.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="337.2" y="1086.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (32 samples, 6.46%)</title><rect x="334.2" y="1059.0" width="76.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="337.2" y="1070.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (13 samples, 2.63%)</title><rect x="343.7" y="1043.0" width="31.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="346.7" y="1054.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (10 samples, 2.02%)</title><rect x="348.5" y="1027.0" width="23.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="351.5" y="1038.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (9 samples, 1.82%)</title><rect x="350.9" y="1011.0" width="21.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="353.9" y="1022.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.40%)</title><rect x="362.8" y="995.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="365.8" y="1006.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.40%)</title><rect x="362.8" y="979.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="365.8" y="990.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.40%)</title><rect x="362.8" y="963.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="365.8" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.40%)</title><rect x="362.8" y="947.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="365.8" y="958.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.20%)</title><rect x="365.2" y="931.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="368.2" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.20%)</title><rect x="365.2" y="915.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="368.2" y="926.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.20%)</title><rect x="365.2" y="899.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="368.2" y="910.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.20%)</title><rect x="367.6" y="995.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="370.6" y="1006.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.20%)</title><rect x="370.0" y="995.0" width="2.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="373.0" y="1006.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.20%)</title><rect x="372.3" y="1027.0" width="2.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="375.3" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (3 samples, 0.61%)</title><rect x="374.7" y="1043.0" width="7.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="377.7" y="1054.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.20%)</title><rect x="374.7" y="1027.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="377.7" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.20%)</title><rect x="374.7" y="1011.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="377.7" y="1022.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.20%)</title><rect x="374.7" y="995.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="377.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/Long.toString (2 samples, 0.40%)</title><rect x="377.1" y="1027.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="380.1" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.20%)</title><rect x="377.1" y="1011.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="380.1" y="1022.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.20%)</title><rect x="377.1" y="995.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="380.1" y="1006.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.20%)</title><rect x="379.5" y="1011.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="382.5" y="1022.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.61%)</title><rect x="381.9" y="1043.0" width="7.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="384.9" y="1054.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (9 samples, 1.82%)</title><rect x="389.0" y="1043.0" width="21.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="392.0" y="1054.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (9 samples, 1.82%)</title><rect x="389.0" y="1027.0" width="21.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="392.0" y="1038.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.20%)</title><rect x="389.0" y="1011.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="392.0" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.20%)</title><rect x="389.0" y="995.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="392.0" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.20%)</title><rect x="389.0" y="979.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="392.0" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.20%)</title><rect x="389.0" y="963.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="392.0" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.20%)</title><rect x="389.0" y="947.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="392.0" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.20%)</title><rect x="391.4" y="1011.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="394.4" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.20%)</title><rect x="391.4" y="995.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="394.4" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.20%)</title><rect x="391.4" y="979.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="394.4" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.20%)</title><rect x="391.4" y="963.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="394.4" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.20%)</title><rect x="391.4" y="947.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="394.4" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (7 samples, 1.41%)</title><rect x="393.8" y="1011.0" width="16.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="396.8" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.put (6 samples, 1.21%)</title><rect x="396.2" y="995.0" width="14.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="399.2" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.20%)</title><rect x="396.2" y="979.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="399.2" y="990.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.20%)</title><rect x="396.2" y="963.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="399.2" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 1.01%)</title><rect x="398.6" y="979.0" width="11.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="401.6" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.20%)</title><rect x="400.9" y="963.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="403.9" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.20%)</title><rect x="403.3" y="963.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="406.3" y="974.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.40%)</title><rect x="405.7" y="963.0" width="4.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="408.7" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (100 samples, 20.20%)</title><rect x="410.5" y="1075.0" width="238.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="413.5" y="1086.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (100 samples, 20.20%)</title><rect x="410.5" y="1059.0" width="238.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="413.5" y="1070.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$209/1975447400.process (83 samples, 16.77%)</title><rect x="410.5" y="1043.0" width="197.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="413.5" y="1054.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (83 samples, 16.77%)</title><rect x="410.5" y="1027.0" width="197.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="413.5" y="1038.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (83 samples, 16.77%)</title><rect x="410.5" y="1011.0" width="197.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="413.5" y="1022.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (79 samples, 15.96%)</title><rect x="420.0" y="995.0" width="188.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="423.0" y="1006.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>java/lang/Thread.sleep (78 samples, 15.76%)</title><rect x="422.4" y="979.0" width="185.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="425.4" y="990.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (69 samples, 13.94%)</title><rect x="439.1" y="963.0" width="164.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="442.1" y="974.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (6 samples, 1.21%)</title><rect x="455.8" y="947.0" width="14.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="458.8" y="958.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.20%)</title><rect x="470.1" y="947.0" width="2.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="473.1" y="958.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.20%)</title><rect x="470.1" y="931.0" width="2.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="473.1" y="942.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.40%)</title><rect x="472.5" y="947.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="475.5" y="958.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (53 samples, 10.71%)</title><rect x="477.2" y="947.0" width="126.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="480.2" y="958.0">os::sleep(Thread..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.20%)</title><rect x="503.5" y="931.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="506.5" y="942.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.61%)</title><rect x="505.8" y="931.0" width="7.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="508.8" y="942.0"></text>
</g>
<g>
<title>__pthread_cond_init (1 samples, 0.20%)</title><rect x="513.0" y="931.0" width="2.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="516.0" y="942.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (24 samples, 4.85%)</title><rect x="515.4" y="931.0" width="57.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="518.4" y="942.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.20%)</title><rect x="572.6" y="931.0" width="2.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="575.6" y="942.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.20%)</title><rect x="575.0" y="931.0" width="2.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="578.0" y="942.0"></text>
</g>
<g>
<title>_init (5 samples, 1.01%)</title><rect x="577.4" y="931.0" width="11.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="580.4" y="942.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.40%)</title><rect x="589.3" y="931.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="592.3" y="942.0"></text>
</g>
<g>
<title>pthread_cond_destroy@@GLIBC_2.3.2 (2 samples, 0.40%)</title><rect x="594.0" y="931.0" width="4.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="597.0" y="942.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.20%)</title><rect x="598.8" y="931.0" width="2.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="601.8" y="942.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.20%)</title><rect x="601.2" y="931.0" width="2.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="604.2" y="942.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.20%)</title><rect x="603.6" y="963.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="606.6" y="974.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.20%)</title><rect x="606.0" y="963.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="609.0" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (5 samples, 1.01%)</title><rect x="608.3" y="1043.0" width="12.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="611.3" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (4 samples, 0.81%)</title><rect x="610.7" y="1027.0" width="9.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="613.7" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (3 samples, 0.61%)</title><rect x="620.3" y="1043.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="623.3" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (3 samples, 0.61%)</title><rect x="620.3" y="1027.0" width="7.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="623.3" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.20%)</title><rect x="625.0" y="1011.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="628.0" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.20%)</title><rect x="625.0" y="995.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="628.0" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.20%)</title><rect x="625.0" y="979.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="628.0" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.20%)</title><rect x="625.0" y="963.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="628.0" y="974.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.20%)</title><rect x="625.0" y="947.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="628.0" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.20%)</title><rect x="627.4" y="1043.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="630.4" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.20%)</title><rect x="627.4" y="1027.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="630.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 1.62%)</title><rect x="629.8" y="1043.0" width="19.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="632.8" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 1.41%)</title><rect x="632.2" y="1027.0" width="16.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="635.2" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (7 samples, 1.41%)</title><rect x="632.2" y="1011.0" width="16.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="635.2" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (7 samples, 1.41%)</title><rect x="632.2" y="995.0" width="16.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="635.2" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 1.41%)</title><rect x="632.2" y="979.0" width="16.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="635.2" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$294/292323983.accept (2 samples, 0.40%)</title><rect x="636.9" y="963.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="639.9" y="974.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.61%)</title><rect x="641.7" y="963.0" width="7.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="644.7" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (3 samples, 0.61%)</title><rect x="648.9" y="1075.0" width="7.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="651.9" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 1.62%)</title><rect x="656.0" y="1075.0" width="19.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="659.0" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 1.62%)</title><rect x="656.0" y="1059.0" width="19.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="659.0" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (8 samples, 1.62%)</title><rect x="656.0" y="1043.0" width="19.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="659.0" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.20%)</title><rect x="656.0" y="1027.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="659.0" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.20%)</title><rect x="656.0" y="1011.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="659.0" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.20%)</title><rect x="656.0" y="995.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="659.0" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.20%)</title><rect x="656.0" y="979.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="659.0" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.61%)</title><rect x="658.4" y="1027.0" width="7.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="661.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.61%)</title><rect x="658.4" y="1011.0" width="7.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="661.4" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$297/575135816.accept (1 samples, 0.20%)</title><rect x="660.8" y="995.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="663.8" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (1 samples, 0.20%)</title><rect x="663.2" y="995.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="666.2" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 0.81%)</title><rect x="665.6" y="1027.0" width="9.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="668.6" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$297/575135816.accept (4 samples, 0.81%)</title><rect x="665.6" y="1011.0" width="9.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="668.6" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$57 (4 samples, 0.81%)</title><rect x="665.6" y="995.0" width="9.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="668.6" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (4 samples, 0.81%)</title><rect x="665.6" y="979.0" width="9.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="668.6" y="990.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (4 samples, 0.81%)</title><rect x="665.6" y="963.0" width="9.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="668.6" y="974.0"></text>
</g>
<g>
<title>java/time/Duration.create (4 samples, 0.81%)</title><rect x="665.6" y="947.0" width="9.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="668.6" y="958.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.20%)</title><rect x="675.1" y="1075.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="678.1" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.40%)</title><rect x="677.5" y="1155.0" width="4.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="680.5" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.40%)</title><rect x="677.5" y="1139.0" width="4.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="680.5" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.40%)</title><rect x="677.5" y="1123.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="680.5" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.40%)</title><rect x="677.5" y="1107.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="680.5" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (2 samples, 0.40%)</title><rect x="677.5" y="1091.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="680.5" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (10 samples, 2.02%)</title><rect x="682.2" y="1155.0" width="23.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="685.2" y="1166.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (9 samples, 1.82%)</title><rect x="682.2" y="1139.0" width="21.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="685.2" y="1150.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 1.41%)</title><rect x="687.0" y="1123.0" width="16.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="690.0" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 1.41%)</title><rect x="687.0" y="1107.0" width="16.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="690.0" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 1.41%)</title><rect x="687.0" y="1091.0" width="16.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="690.0" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 1.41%)</title><rect x="687.0" y="1075.0" width="16.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="690.0" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateOf (1 samples, 0.20%)</title><rect x="703.7" y="1139.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="706.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (3 samples, 0.61%)</title><rect x="706.1" y="1203.0" width="7.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="709.1" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (3 samples, 0.61%)</title><rect x="706.1" y="1187.0" width="7.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="709.1" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 0.61%)</title><rect x="706.1" y="1171.0" width="7.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="709.1" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.20%)</title><rect x="708.5" y="1155.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="711.5" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.20%)</title><rect x="708.5" y="1139.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="711.5" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.20%)</title><rect x="708.5" y="1123.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="711.5" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.20%)</title><rect x="708.5" y="1107.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="711.5" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.shouldParkAfterFailedAcquire (1 samples, 0.20%)</title><rect x="708.5" y="1091.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="711.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.failExpiredRequests (1 samples, 0.20%)</title><rect x="710.8" y="1155.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="713.8" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.access$300 (1 samples, 0.20%)</title><rect x="710.8" y="1139.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="713.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.removeExpiredRequests (1 samples, 0.20%)</title><rect x="710.8" y="1123.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="713.8" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$ValuesView.iterator (1 samples, 0.20%)</title><rect x="710.8" y="1107.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="713.8" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$ValueIterator.&lt;init&gt; (1 samples, 0.20%)</title><rect x="710.8" y="1091.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="713.8" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$BaseIterator.&lt;init&gt; (1 samples, 0.20%)</title><rect x="710.8" y="1075.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="713.8" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$Traverser.advance (1 samples, 0.20%)</title><rect x="710.8" y="1059.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="713.8" y="1070.0"></text>
</g>
<g>
<title>start_thread (200 samples, 40.40%)</title><rect x="713.2" y="1203.0" width="476.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="716.2" y="1214.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (200 samples, 40.40%)</title><rect x="713.2" y="1187.0" width="476.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="716.2" y="1198.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (15 samples, 3.03%)</title><rect x="713.2" y="1171.0" width="35.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="716.2" y="1182.0">Gan..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (15 samples, 3.03%)</title><rect x="713.2" y="1155.0" width="35.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="716.2" y="1166.0">G1P..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (15 samples, 3.03%)</title><rect x="713.2" y="1139.0" width="35.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="716.2" y="1150.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.20%)</title><rect x="713.2" y="1123.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="716.2" y="1134.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (12 samples, 2.42%)</title><rect x="715.6" y="1123.0" width="28.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="718.6" y="1134.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (9 samples, 1.82%)</title><rect x="722.8" y="1107.0" width="21.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="725.8" y="1118.0">G..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (2 samples, 0.40%)</title><rect x="739.5" y="1091.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="742.5" y="1102.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.20%)</title><rect x="744.2" y="1123.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="747.2" y="1134.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.20%)</title><rect x="746.6" y="1123.0" width="2.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="749.6" y="1134.0"></text>
</g>
<g>
<title>JavaThread::run() (185 samples, 37.37%)</title><rect x="749.0" y="1171.0" width="441.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="752.0" y="1182.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (185 samples, 37.37%)</title><rect x="749.0" y="1155.0" width="441.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="752.0" y="1166.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (184 samples, 37.17%)</title><rect x="749.0" y="1139.0" width="438.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="752.0" y="1150.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (184 samples, 37.17%)</title><rect x="749.0" y="1123.0" width="438.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="752.0" y="1134.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (178 samples, 35.96%)</title><rect x="749.0" y="1107.0" width="424.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="752.0" y="1118.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (178 samples, 35.96%)</title><rect x="749.0" y="1091.0" width="424.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="752.0" y="1102.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool..</text>
</g>
<g>
<title>Compile::Code_Gen() (85 samples, 17.17%)</title><rect x="749.0" y="1075.0" width="202.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="752.0" y="1086.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.61%)</title><rect x="749.0" y="1059.0" width="7.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="752.0" y="1070.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.20%)</title><rect x="749.0" y="1043.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="752.0" y="1054.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.20%)</title><rect x="749.0" y="1027.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="752.0" y="1038.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.40%)</title><rect x="751.4" y="1043.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="754.4" y="1054.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.40%)</title><rect x="751.4" y="1027.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="754.4" y="1038.0"></text>
</g>
<g>
<title>rFlagsRegOper::clone(Compile*) const (1 samples, 0.20%)</title><rect x="753.8" y="1011.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="756.8" y="1022.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.61%)</title><rect x="756.1" y="1059.0" width="7.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="759.1" y="1070.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.20%)</title><rect x="756.1" y="1043.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="759.1" y="1054.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.20%)</title><rect x="756.1" y="1027.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="759.1" y="1038.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.40%)</title><rect x="758.5" y="1043.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="761.5" y="1054.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.40%)</title><rect x="758.5" y="1027.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="761.5" y="1038.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 1.01%)</title><rect x="763.3" y="1059.0" width="11.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="766.3" y="1070.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 1.01%)</title><rect x="763.3" y="1043.0" width="11.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="766.3" y="1054.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (4 samples, 0.81%)</title><rect x="763.3" y="1027.0" width="9.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="766.3" y="1038.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.20%)</title><rect x="772.8" y="1027.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="775.8" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 0.81%)</title><rect x="775.2" y="1059.0" width="9.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="778.2" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 0.81%)</title><rect x="775.2" y="1043.0" width="9.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="778.2" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (2 samples, 0.40%)</title><rect x="775.2" y="1027.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="778.2" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.20%)</title><rect x="780.0" y="1027.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="783.0" y="1038.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.20%)</title><rect x="780.0" y="1011.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="783.0" y="1022.0"></text>
</g>
<g>
<title>loadUSNode::ideal_Opcode() const (1 samples, 0.20%)</title><rect x="782.4" y="1027.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="785.4" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (70 samples, 14.14%)</title><rect x="784.7" y="1059.0" width="166.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="787.7" y="1070.0">PhaseChaitin::Registe..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.40%)</title><rect x="784.7" y="1043.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="787.7" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.61%)</title><rect x="789.5" y="1043.0" width="7.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="792.5" y="1054.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.20%)</title><rect x="794.3" y="1027.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="797.3" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.20%)</title><rect x="794.3" y="1011.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="797.3" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (4 samples, 0.81%)</title><rect x="796.7" y="1043.0" width="9.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="799.7" y="1054.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (4 samples, 0.81%)</title><rect x="796.7" y="1027.0" width="9.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="799.7" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.40%)</title><rect x="801.4" y="1011.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="804.4" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (8 samples, 1.62%)</title><rect x="806.2" y="1043.0" width="19.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="809.2" y="1054.0"></text>
</g>
<g>
<title>JVMState::is_monitor_use(unsigned int) const (1 samples, 0.20%)</title><rect x="818.1" y="1027.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="821.1" y="1038.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.20%)</title><rect x="820.5" y="1027.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="823.5" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.20%)</title><rect x="822.9" y="1027.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="825.9" y="1038.0"></text>
</g>
<g>
<title>TypeNode::ideal_reg() const (1 samples, 0.20%)</title><rect x="822.9" y="1011.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="825.9" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (9 samples, 1.82%)</title><rect x="825.3" y="1043.0" width="21.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="828.3" y="1054.0">P..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 0.81%)</title><rect x="832.4" y="1027.0" width="9.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="835.4" y="1038.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.40%)</title><rect x="837.2" y="1011.0" width="4.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="840.2" y="1022.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (2 samples, 0.40%)</title><rect x="842.0" y="1027.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="845.0" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.40%)</title><rect x="846.7" y="1043.0" width="4.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="849.7" y="1054.0"></text>
</g>
<g>
<title>MachNode::in_RegMask(unsigned int) const (1 samples, 0.20%)</title><rect x="846.7" y="1027.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="849.7" y="1038.0"></text>
</g>
<g>
<title>MachProjNode::out_RegMask() const (1 samples, 0.20%)</title><rect x="849.1" y="1027.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="852.1" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (6 samples, 1.21%)</title><rect x="851.5" y="1043.0" width="14.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="854.5" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 0.61%)</title><rect x="858.6" y="1027.0" width="7.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="861.6" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.20%)</title><rect x="865.8" y="1043.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="868.8" y="1054.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (17 samples, 3.43%)</title><rect x="868.2" y="1043.0" width="40.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="871.2" y="1054.0">Pha..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (17 samples, 3.43%)</title><rect x="868.2" y="1027.0" width="40.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="871.2" y="1038.0">Pha..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (17 samples, 3.43%)</title><rect x="868.2" y="1011.0" width="40.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="871.2" y="1022.0">Pha..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 0.40%)</title><rect x="868.2" y="995.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="871.2" y="1006.0"></text>
</g>
<g>
<title>LiveRangeMap::find(Node const*) (1 samples, 0.20%)</title><rect x="872.9" y="995.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="875.9" y="1006.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (12 samples, 2.42%)</title><rect x="875.3" y="995.0" width="28.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="878.3" y="1006.0">Ph..</text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (2 samples, 0.40%)</title><rect x="903.9" y="995.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="906.9" y="1006.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (3 samples, 0.61%)</title><rect x="908.7" y="1043.0" width="7.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="911.7" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.40%)</title><rect x="911.1" y="1027.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="914.1" y="1038.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (5 samples, 1.01%)</title><rect x="915.9" y="1043.0" width="11.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="918.9" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.40%)</title><rect x="923.0" y="1027.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="926.0" y="1038.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.40%)</title><rect x="927.8" y="1043.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="930.8" y="1054.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 0.40%)</title><rect x="927.8" y="1027.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="930.8" y="1038.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (8 samples, 1.62%)</title><rect x="932.5" y="1043.0" width="19.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="935.5" y="1054.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (4 samples, 0.81%)</title><rect x="939.7" y="1027.0" width="9.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="942.7" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.20%)</title><rect x="944.5" y="1011.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="947.5" y="1022.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.20%)</title><rect x="946.8" y="1011.0" width="2.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="949.8" y="1022.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.20%)</title><rect x="949.2" y="1027.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="952.2" y="1038.0"></text>
</g>
<g>
<title>Compile::Optimize() (83 samples, 16.77%)</title><rect x="951.6" y="1075.0" width="197.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="954.6" y="1086.0">Compile::Optimize()</text>
</g>
<g>
<title>CmpPNode::sub(Type const*, Type const*) const (1 samples, 0.20%)</title><rect x="951.6" y="1059.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="954.6" y="1070.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping() (2 samples, 0.40%)</title><rect x="954.0" y="1059.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="957.0" y="1070.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (2 samples, 0.40%)</title><rect x="954.0" y="1043.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="957.0" y="1054.0"></text>
</g>
<g>
<title>CallNode::has_non_debug_use(Node*) (1 samples, 0.20%)</title><rect x="956.4" y="1027.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="959.4" y="1038.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (2 samples, 0.40%)</title><rect x="958.8" y="1059.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="961.8" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (3 samples, 0.61%)</title><rect x="963.5" y="1059.0" width="7.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="966.5" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (3 samples, 0.61%)</title><rect x="963.5" y="1043.0" width="7.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="966.5" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="963.5" y="1027.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="966.5" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.20%)</title><rect x="963.5" y="1011.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="966.5" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field_uses_to_worklist(FieldNode*) (1 samples, 0.20%)</title><rect x="963.5" y="995.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="966.5" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::add_fields_to_worklist(FieldNode*, PointsToNode*) (1 samples, 0.20%)</title><rect x="963.5" y="979.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="966.5" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (2 samples, 0.40%)</title><rect x="965.9" y="1027.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="968.9" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.40%)</title><rect x="965.9" y="1011.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="968.9" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.40%)</title><rect x="965.9" y="995.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="968.9" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.20%)</title><rect x="965.9" y="979.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="968.9" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="979.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="971.3" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="963.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="971.3" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="947.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="971.3" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="931.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="971.3" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="915.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="971.3" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="899.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="971.3" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="883.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="971.3" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="867.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="971.3" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="851.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="971.3" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="835.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="971.3" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="819.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="971.3" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="803.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="971.3" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="787.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="971.3" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="771.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="971.3" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="755.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="971.3" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="739.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="971.3" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="723.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="971.3" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="707.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="971.3" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="691.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="971.3" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="675.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="971.3" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="659.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="971.3" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="643.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="971.3" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="627.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="971.3" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="611.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="971.3" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="595.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="971.3" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="579.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="971.3" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="563.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="971.3" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="547.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="971.3" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="531.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="971.3" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="515.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="971.3" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="499.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="971.3" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="483.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="971.3" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="467.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="971.3" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="451.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="971.3" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="435.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="971.3" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="419.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="971.3" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="403.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="971.3" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="387.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="971.3" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="371.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="971.3" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="355.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="971.3" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="339.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="971.3" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="323.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="971.3" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="307.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="971.3" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="291.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="971.3" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="275.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="971.3" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="259.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="971.3" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="243.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="971.3" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="227.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="971.3" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="211.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="971.3" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="195.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="971.3" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.20%)</title><rect x="968.3" y="179.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="971.3" y="190.0"></text>
</g>
<g>
<title>PhiNode::make(Node*, Node*, Type const*, TypePtr const*) (1 samples, 0.20%)</title><rect x="968.3" y="163.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="971.3" y="174.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.20%)</title><rect x="968.3" y="147.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="971.3" y="158.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.20%)</title><rect x="970.7" y="1059.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="973.7" y="1070.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.20%)</title><rect x="970.7" y="1043.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="973.7" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (62 samples, 12.53%)</title><rect x="973.1" y="1059.0" width="147.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="976.1" y="1070.0">PhaseIdealLoop::bui..</text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.20%)</title><rect x="973.1" y="1043.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="976.1" y="1054.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.20%)</title><rect x="973.1" y="1027.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="976.1" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_counted_loop(Node*, IdealLoopTree*) (1 samples, 0.20%)</title><rect x="973.1" y="1011.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="976.1" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_idom(Node*, Node*, unsigned int) (1 samples, 0.20%)</title><rect x="973.1" y="995.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="976.1" y="1006.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.20%)</title><rect x="973.1" y="979.0" width="2.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="976.1" y="990.0"></text>
</g>
<g>
<title>Node::pinned() const (2 samples, 0.40%)</title><rect x="975.5" y="1043.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="978.5" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.20%)</title><rect x="980.2" y="1043.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="983.2" y="1054.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.20%)</title><rect x="980.2" y="1027.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="983.2" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.61%)</title><rect x="982.6" y="1043.0" width="7.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="985.6" y="1054.0"></text>
</g>
<g>
<title>PhiNode::pinned() const (1 samples, 0.20%)</title><rect x="987.4" y="1027.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="990.4" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (47 samples, 9.49%)</title><rect x="989.8" y="1043.0" width="112.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="992.8" y="1054.0">PhaseIdealLoop..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (46 samples, 9.29%)</title><rect x="992.1" y="1027.0" width="109.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="995.1" y="1038.0">PhaseIdealLoo..</text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.20%)</title><rect x="992.1" y="1011.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="995.1" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 0.61%)</title><rect x="994.5" y="1011.0" width="7.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="997.5" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (42 samples, 8.48%)</title><rect x="1001.7" y="1011.0" width="100.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1004.7" y="1022.0">PhaseIdealLo..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.20%)</title><rect x="1080.3" y="995.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1083.3" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.20%)</title><rect x="1080.3" y="979.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1083.3" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (8 samples, 1.62%)</title><rect x="1082.7" y="995.0" width="19.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1085.7" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.40%)</title><rect x="1101.8" y="1043.0" width="4.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1104.8" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (2 samples, 0.40%)</title><rect x="1101.8" y="1027.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1104.8" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.61%)</title><rect x="1106.6" y="1043.0" width="7.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1109.6" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (3 samples, 0.61%)</title><rect x="1106.6" y="1027.0" width="7.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1109.6" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.20%)</title><rect x="1108.9" y="1011.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1111.9" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.20%)</title><rect x="1108.9" y="995.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1111.9" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.20%)</title><rect x="1111.3" y="1011.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1114.3" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.20%)</title><rect x="1111.3" y="995.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1114.3" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.61%)</title><rect x="1113.7" y="1043.0" width="7.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1116.7" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.61%)</title><rect x="1113.7" y="1027.0" width="7.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1116.7" y="1038.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.20%)</title><rect x="1113.7" y="1011.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1116.7" y="1022.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.20%)</title><rect x="1113.7" y="995.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1116.7" y="1006.0"></text>
</g>
<g>
<title>LShiftINode::Ideal(PhaseGVN*, bool) (1 samples, 0.20%)</title><rect x="1116.1" y="1011.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1119.1" y="1022.0"></text>
</g>
<g>
<title>PhaseTransform::type(Node const*) const (1 samples, 0.20%)</title><rect x="1116.1" y="995.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1119.1" y="1006.0"></text>
</g>
<g>
<title>Type_Array::fast_lookup(unsigned int) const (1 samples, 0.20%)</title><rect x="1116.1" y="979.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1119.1" y="990.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.20%)</title><rect x="1118.5" y="1011.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1121.5" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.20%)</title><rect x="1118.5" y="995.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1121.5" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.20%)</title><rect x="1118.5" y="979.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1121.5" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.20%)</title><rect x="1118.5" y="963.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1121.5" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.20%)</title><rect x="1118.5" y="947.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1121.5" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.20%)</title><rect x="1118.5" y="931.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1121.5" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.20%)</title><rect x="1118.5" y="915.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1121.5" y="926.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.20%)</title><rect x="1118.5" y="899.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1121.5" y="910.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.20%)</title><rect x="1118.5" y="883.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1121.5" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.20%)</title><rect x="1120.9" y="1059.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1123.9" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.20%)</title><rect x="1120.9" y="1043.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1123.9" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (11 samples, 2.22%)</title><rect x="1123.3" y="1059.0" width="26.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1126.3" y="1070.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (11 samples, 2.22%)</title><rect x="1123.3" y="1043.0" width="26.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1126.3" y="1054.0">P..</text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.20%)</title><rect x="1123.3" y="1027.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1126.3" y="1038.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.20%)</title><rect x="1123.3" y="1011.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1126.3" y="1022.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.20%)</title><rect x="1123.3" y="995.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1126.3" y="1006.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.20%)</title><rect x="1123.3" y="979.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1126.3" y="990.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (2 samples, 0.40%)</title><rect x="1125.6" y="1027.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1128.6" y="1038.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.40%)</title><rect x="1130.4" y="1027.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1133.4" y="1038.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.20%)</title><rect x="1132.8" y="1011.0" width="2.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1135.8" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (3 samples, 0.61%)</title><rect x="1135.2" y="1027.0" width="7.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1138.2" y="1038.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.20%)</title><rect x="1142.3" y="1027.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1145.3" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::is_IterGVN() (1 samples, 0.20%)</title><rect x="1142.3" y="1011.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1145.3" y="1022.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.40%)</title><rect x="1144.7" y="1027.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1147.7" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.40%)</title><rect x="1144.7" y="1011.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1147.7" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.40%)</title><rect x="1144.7" y="995.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1147.7" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.40%)</title><rect x="1144.7" y="979.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.7" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.40%)</title><rect x="1144.7" y="963.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1147.7" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.40%)</title><rect x="1144.7" y="947.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1147.7" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.40%)</title><rect x="1144.7" y="931.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1147.7" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.20%)</title><rect x="1144.7" y="915.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1147.7" y="926.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.20%)</title><rect x="1144.7" y="899.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1147.7" y="910.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.20%)</title><rect x="1144.7" y="883.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1147.7" y="894.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.20%)</title><rect x="1147.1" y="915.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.1" y="926.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.20%)</title><rect x="1147.1" y="899.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.1" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 1.82%)</title><rect x="1149.5" y="1075.0" width="21.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.5" y="1086.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 1.82%)</title><rect x="1149.5" y="1059.0" width="21.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.5" y="1070.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 1.82%)</title><rect x="1149.5" y="1043.0" width="21.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.5" y="1054.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 1.82%)</title><rect x="1149.5" y="1027.0" width="21.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.5" y="1038.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 1.82%)</title><rect x="1149.5" y="1011.0" width="21.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1152.5" y="1022.0">P..</text>
</g>
<g>
<title>Parse::do_call() (8 samples, 1.62%)</title><rect x="1149.5" y="995.0" width="19.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1152.5" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 1.62%)</title><rect x="1149.5" y="979.0" width="19.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.5" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 1.62%)</title><rect x="1149.5" y="963.0" width="19.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1152.5" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 1.62%)</title><rect x="1149.5" y="947.0" width="19.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.5" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 1.62%)</title><rect x="1149.5" y="931.0" width="19.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1152.5" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 1.62%)</title><rect x="1149.5" y="915.0" width="19.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.5" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 1.62%)</title><rect x="1149.5" y="899.0" width="19.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.5" y="910.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.20%)</title><rect x="1149.5" y="883.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.5" y="894.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.20%)</title><rect x="1149.5" y="867.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.5" y="878.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.20%)</title><rect x="1149.5" y="851.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.5" y="862.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.20%)</title><rect x="1149.5" y="835.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.5" y="846.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::BasicBlock(MethodLiveness*, int, int) (1 samples, 0.20%)</title><rect x="1149.5" y="819.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1152.5" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1151.9" y="883.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.9" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.20%)</title><rect x="1151.9" y="867.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1154.9" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.20%)</title><rect x="1151.9" y="851.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.9" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.20%)</title><rect x="1151.9" y="835.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.9" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.20%)</title><rect x="1151.9" y="819.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1154.9" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.20%)</title><rect x="1151.9" y="803.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1154.9" y="814.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1151.9" y="787.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.9" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1151.9" y="771.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.9" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.20%)</title><rect x="1151.9" y="755.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.20%)</title><rect x="1151.9" y="739.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1154.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.20%)</title><rect x="1151.9" y="723.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.20%)</title><rect x="1151.9" y="707.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1154.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.20%)</title><rect x="1151.9" y="691.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.9" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1151.9" y="675.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1154.9" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.20%)</title><rect x="1151.9" y="659.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1154.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.20%)</title><rect x="1151.9" y="643.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.20%)</title><rect x="1151.9" y="627.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1154.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.20%)</title><rect x="1151.9" y="611.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.9" y="622.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.20%)</title><rect x="1151.9" y="595.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.9" y="606.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.20%)</title><rect x="1151.9" y="579.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1154.9" y="590.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.20%)</title><rect x="1151.9" y="563.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.9" y="574.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.20%)</title><rect x="1151.9" y="547.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1154.9" y="558.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.20%)</title><rect x="1151.9" y="531.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.9" y="542.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.20%)</title><rect x="1151.9" y="515.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.9" y="526.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (6 samples, 1.21%)</title><rect x="1154.2" y="883.0" width="14.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1157.2" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 1.21%)</title><rect x="1154.2" y="867.0" width="14.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1157.2" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 1.21%)</title><rect x="1154.2" y="851.0" width="14.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1157.2" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 1.21%)</title><rect x="1154.2" y="835.0" width="14.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1157.2" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 1.21%)</title><rect x="1154.2" y="819.0" width="14.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1157.2" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 1.21%)</title><rect x="1154.2" y="803.0" width="14.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1157.2" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 1.21%)</title><rect x="1154.2" y="787.0" width="14.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1157.2" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 1.21%)</title><rect x="1154.2" y="771.0" width="14.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.2" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 1.21%)</title><rect x="1154.2" y="755.0" width="14.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1157.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 1.21%)</title><rect x="1154.2" y="739.0" width="14.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1157.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 1.21%)</title><rect x="1154.2" y="723.0" width="14.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1157.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 1.21%)</title><rect x="1154.2" y="707.0" width="14.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1157.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 1.21%)</title><rect x="1154.2" y="691.0" width="14.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1157.2" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 1.21%)</title><rect x="1154.2" y="675.0" width="14.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1157.2" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 1.21%)</title><rect x="1154.2" y="659.0" width="14.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1157.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 1.21%)</title><rect x="1154.2" y="643.0" width="14.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1157.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 1.21%)</title><rect x="1154.2" y="627.0" width="14.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1157.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 1.21%)</title><rect x="1154.2" y="611.0" width="14.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1157.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.01%)</title><rect x="1154.2" y="595.0" width="12.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1157.2" y="606.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.20%)</title><rect x="1154.2" y="579.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1157.2" y="590.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.20%)</title><rect x="1154.2" y="563.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1157.2" y="574.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.20%)</title><rect x="1154.2" y="547.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1157.2" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.20%)</title><rect x="1154.2" y="531.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.2" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.20%)</title><rect x="1154.2" y="515.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1157.2" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.20%)</title><rect x="1154.2" y="499.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1157.2" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.20%)</title><rect x="1154.2" y="483.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1157.2" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.20%)</title><rect x="1154.2" y="467.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1157.2" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.20%)</title><rect x="1154.2" y="451.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1157.2" y="462.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.20%)</title><rect x="1154.2" y="435.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1157.2" y="446.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.20%)</title><rect x="1154.2" y="419.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.2" y="430.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.20%)</title><rect x="1154.2" y="403.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1157.2" y="414.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.20%)</title><rect x="1154.2" y="387.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1157.2" y="398.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.20%)</title><rect x="1154.2" y="371.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.2" y="382.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.20%)</title><rect x="1154.2" y="355.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.2" y="366.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.20%)</title><rect x="1154.2" y="339.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1157.2" y="350.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.20%)</title><rect x="1154.2" y="323.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1157.2" y="334.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.20%)</title><rect x="1154.2" y="307.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1157.2" y="318.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.20%)</title><rect x="1154.2" y="291.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.2" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.81%)</title><rect x="1156.6" y="579.0" width="9.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.6" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.81%)</title><rect x="1156.6" y="563.0" width="9.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.81%)</title><rect x="1156.6" y="547.0" width="9.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.81%)</title><rect x="1156.6" y="531.0" width="9.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.81%)</title><rect x="1156.6" y="515.0" width="9.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.81%)</title><rect x="1156.6" y="499.0" width="9.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1159.6" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.81%)</title><rect x="1156.6" y="483.0" width="9.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.6" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.81%)</title><rect x="1156.6" y="467.0" width="9.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.81%)</title><rect x="1156.6" y="451.0" width="9.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.6" y="462.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.20%)</title><rect x="1156.6" y="435.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1159.6" y="446.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.20%)</title><rect x="1156.6" y="419.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.6" y="430.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.20%)</title><rect x="1156.6" y="403.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.6" y="414.0"></text>
</g>
<g>
<title>TypeFunc::hash() const (1 samples, 0.20%)</title><rect x="1156.6" y="387.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.61%)</title><rect x="1159.0" y="435.0" width="7.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.61%)</title><rect x="1159.0" y="419.0" width="7.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.61%)</title><rect x="1159.0" y="403.0" width="7.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1162.0" y="414.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1159.0" y="387.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.0" y="398.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_reference_get() (1 samples, 0.20%)</title><rect x="1159.0" y="371.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.0" y="382.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.20%)</title><rect x="1159.0" y="355.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1162.0" y="366.0"></text>
</g>
<g>
<title>BuildCutout::BuildCutout(GraphKit*, Node*, float, float) (1 samples, 0.20%)</title><rect x="1159.0" y="339.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.0" y="350.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.20%)</title><rect x="1159.0" y="323.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.0" y="334.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.20%)</title><rect x="1159.0" y="307.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.0" y="318.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.40%)</title><rect x="1161.4" y="387.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.4" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.40%)</title><rect x="1161.4" y="371.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.4" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.40%)</title><rect x="1161.4" y="355.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.40%)</title><rect x="1161.4" y="339.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.4" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.40%)</title><rect x="1161.4" y="323.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.4" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.40%)</title><rect x="1161.4" y="307.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.40%)</title><rect x="1161.4" y="291.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.4" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.40%)</title><rect x="1161.4" y="275.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.4" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.40%)</title><rect x="1161.4" y="259.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.4" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.40%)</title><rect x="1161.4" y="243.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.4" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.40%)</title><rect x="1161.4" y="227.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.4" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.40%)</title><rect x="1161.4" y="211.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.4" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.40%)</title><rect x="1161.4" y="195.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.4" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.40%)</title><rect x="1161.4" y="179.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.4" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.40%)</title><rect x="1161.4" y="163.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.4" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.40%)</title><rect x="1161.4" y="147.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.4" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.40%)</title><rect x="1161.4" y="131.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.4" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.40%)</title><rect x="1161.4" y="115.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.4" y="126.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.20%)</title><rect x="1161.4" y="99.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1164.4" y="110.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.20%)</title><rect x="1161.4" y="83.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.4" y="94.0"></text>
</g>
<g>
<title>IdealKit::store(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.20%)</title><rect x="1161.4" y="67.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.4" y="78.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.20%)</title><rect x="1161.4" y="51.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.4" y="62.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.20%)</title><rect x="1161.4" y="35.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.4" y="46.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.20%)</title><rect x="1163.8" y="99.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.8" y="110.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.20%)</title><rect x="1163.8" y="83.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.8" y="94.0"></text>
</g>
<g>
<title>GraphKit::stopped() (1 samples, 0.20%)</title><rect x="1163.8" y="67.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.8" y="78.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.20%)</title><rect x="1166.2" y="595.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.20%)</title><rect x="1166.2" y="579.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.2" y="590.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.20%)</title><rect x="1166.2" y="563.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.2" y="574.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.20%)</title><rect x="1166.2" y="547.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.2" y="558.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.20%)</title><rect x="1166.2" y="531.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.2" y="542.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.20%)</title><rect x="1166.2" y="515.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.2" y="526.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.20%)</title><rect x="1166.2" y="499.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.2" y="510.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.20%)</title><rect x="1166.2" y="483.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.2" y="494.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.20%)</title><rect x="1166.2" y="467.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.2" y="478.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_canonical_holder(int) (1 samples, 0.20%)</title><rect x="1166.2" y="451.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.20%)</title><rect x="1168.5" y="995.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.5" y="1006.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.20%)</title><rect x="1168.5" y="979.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.5" y="990.0"></text>
</g>
<g>
<title>GraphKit::maybe_cast_profiled_receiver(Node*, ciKlass*, ciKlass*, bool) (1 samples, 0.20%)</title><rect x="1168.5" y="963.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.5" y="974.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.20%)</title><rect x="1168.5" y="947.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.5" y="958.0"></text>
</g>
<g>
<title>Node::disconnect_inputs(Node*, Compile*) (1 samples, 0.20%)</title><rect x="1168.5" y="931.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.5" y="942.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.20%)</title><rect x="1170.9" y="1075.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.9" y="1086.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.20%)</title><rect x="1170.9" y="1059.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.9" y="1070.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (4 samples, 0.81%)</title><rect x="1173.3" y="1107.0" width="9.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.3" y="1118.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (4 samples, 0.81%)</title><rect x="1173.3" y="1091.0" width="9.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.3" y="1102.0"></text>
</g>
<g>
<title>Compilation::compile_method() (4 samples, 0.81%)</title><rect x="1173.3" y="1075.0" width="9.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.3" y="1086.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (4 samples, 0.81%)</title><rect x="1173.3" y="1059.0" width="9.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.3" y="1070.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.20%)</title><rect x="1173.3" y="1043.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.3" y="1054.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.20%)</title><rect x="1173.3" y="1027.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.3" y="1038.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.20%)</title><rect x="1173.3" y="1011.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.3" y="1022.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.20%)</title><rect x="1173.3" y="995.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.3" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.20%)</title><rect x="1173.3" y="979.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.3" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.20%)</title><rect x="1173.3" y="963.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.3" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.20%)</title><rect x="1173.3" y="947.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.3" y="958.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.20%)</title><rect x="1173.3" y="931.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.3" y="942.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.20%)</title><rect x="1173.3" y="915.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.3" y="926.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.20%)</title><rect x="1173.3" y="899.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.3" y="910.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.20%)</title><rect x="1173.3" y="883.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.3" y="894.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.20%)</title><rect x="1173.3" y="867.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.3" y="878.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.20%)</title><rect x="1173.3" y="851.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.3" y="862.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.20%)</title><rect x="1173.3" y="835.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.3" y="846.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.20%)</title><rect x="1173.3" y="819.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.3" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.20%)</title><rect x="1173.3" y="803.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.3" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.20%)</title><rect x="1173.3" y="787.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.3" y="798.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.20%)</title><rect x="1175.7" y="1043.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.7" y="1054.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.20%)</title><rect x="1175.7" y="1027.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.7" y="1038.0"></text>
</g>
<g>
<title>LIR_Assembler::process_debug_info(LIR_Op*) (1 samples, 0.20%)</title><rect x="1175.7" y="1011.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.7" y="1022.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.40%)</title><rect x="1178.1" y="1043.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.1" y="1054.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 0.40%)</title><rect x="1178.1" y="1027.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.1" y="1038.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.20%)</title><rect x="1178.1" y="1011.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.1" y="1022.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(LIR_OpList*, IntervalWalker*) (1 samples, 0.20%)</title><rect x="1178.1" y="995.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.1" y="1006.0"></text>
</g>
<g>
<title>LinearScan::compute_local_live_sets() (1 samples, 0.20%)</title><rect x="1180.5" y="1011.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.5" y="1022.0"></text>
</g>
<g>
<title>BitMap::resize(unsigned long, bool) (1 samples, 0.20%)</title><rect x="1180.5" y="995.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.5" y="1006.0"></text>
</g>
<g>
<title>ciEnv::ciEnv(CompileTask*, int) (1 samples, 0.20%)</title><rect x="1182.8" y="1107.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.8" y="1118.0"></text>
</g>
<g>
<title>ciObjectFactory::ciObjectFactory(Arena*, int) (1 samples, 0.20%)</title><rect x="1182.8" y="1091.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.8" y="1102.0"></text>
</g>
<g>
<title>ciEnv::~ciEnv() (1 samples, 0.20%)</title><rect x="1185.2" y="1107.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.2" y="1118.0"></text>
</g>
<g>
<title>ciObjectFactory::remove_symbols() (1 samples, 0.20%)</title><rect x="1185.2" y="1091.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.2" y="1102.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.20%)</title><rect x="1187.6" y="1139.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.6" y="1150.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.20%)</title><rect x="1187.6" y="1123.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.6" y="1134.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.20%)</title><rect x="1187.6" y="1107.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.6" y="1118.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (1 samples, 0.20%)</title><rect x="1187.6" y="1091.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.6" y="1102.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.20%)</title><rect x="1187.6" y="1075.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.6" y="1086.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.20%)</title><rect x="1187.6" y="1059.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.6" y="1070.0"></text>
</g>
<g>
<title>CompressedReadStream::read_int_mb(int) (1 samples, 0.20%)</title><rect x="1187.6" y="1043.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.6" y="1054.0"></text>
</g>
</g>
</svg>
