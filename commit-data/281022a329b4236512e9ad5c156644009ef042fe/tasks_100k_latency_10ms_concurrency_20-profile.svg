<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="790" onload="init(evt)" viewBox="0 0 1200 790" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="773"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="773"> </text>
<g id="frames">
<g>
<title>all (344 samples, 100.00%)</title><rect x="10.0" y="739.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="750.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.29%)</title><rect x="10.0" y="723.0" width="3.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.29%)</title><rect x="10.0" y="707.0" width="3.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (27 samples, 7.85%)</title><rect x="13.4" y="723.0" width="92.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.4" y="734.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.29%)</title><rect x="16.9" y="707.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.9" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (1 samples, 0.29%)</title><rect x="16.9" y="691.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="19.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.29%)</title><rect x="16.9" y="675.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.9" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.29%)</title><rect x="16.9" y="659.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.9" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.29%)</title><rect x="16.9" y="643.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.9" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.29%)</title><rect x="16.9" y="627.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="19.9" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.29%)</title><rect x="16.9" y="611.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="19.9" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.29%)</title><rect x="16.9" y="595.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.9" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.29%)</title><rect x="16.9" y="579.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.9" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.29%)</title><rect x="16.9" y="563.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.9" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.29%)</title><rect x="16.9" y="547.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.9" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.29%)</title><rect x="16.9" y="531.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.9" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.29%)</title><rect x="16.9" y="515.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.9" y="526.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.29%)</title><rect x="16.9" y="499.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.9" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.29%)</title><rect x="16.9" y="483.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.9" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.29%)</title><rect x="16.9" y="467.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.9" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.writev (1 samples, 0.29%)</title><rect x="16.9" y="451.0" width="3.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.9" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.writev0 (1 samples, 0.29%)</title><rect x="16.9" y="435.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="19.9" y="446.0"></text>
</g>
<g>
<title>__writev (1 samples, 0.29%)</title><rect x="16.9" y="419.0" width="3.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="19.9" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (25 samples, 7.27%)</title><rect x="20.3" y="707.0" width="85.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="23.3" y="718.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (2 samples, 0.58%)</title><rect x="20.3" y="691.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.3" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (1 samples, 0.29%)</title><rect x="20.3" y="675.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="23.3" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.29%)</title><rect x="20.3" y="659.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.3" y="670.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.29%)</title><rect x="20.3" y="643.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.3" y="654.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.29%)</title><rect x="20.3" y="627.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.3" y="638.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.29%)</title><rect x="20.3" y="611.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="23.3" y="622.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.29%)</title><rect x="20.3" y="595.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.3" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.29%)</title><rect x="20.3" y="579.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="23.3" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pause (1 samples, 0.29%)</title><rect x="23.7" y="675.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="26.7" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (2 samples, 0.58%)</title><rect x="27.2" y="691.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="30.2" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (2 samples, 0.58%)</title><rect x="27.2" y="675.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="30.2" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.58%)</title><rect x="27.2" y="659.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="30.2" y="670.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.58%)</title><rect x="27.2" y="643.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="30.2" y="654.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.58%)</title><rect x="27.2" y="627.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="30.2" y="638.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.58%)</title><rect x="27.2" y="611.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="30.2" y="622.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.58%)</title><rect x="27.2" y="595.0" width="6.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="30.2" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (2 samples, 0.58%)</title><rect x="27.2" y="579.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="30.2" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.58%)</title><rect x="27.2" y="563.0" width="6.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="30.2" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.29%)</title><rect x="30.6" y="547.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="33.6" y="558.0"></text>
</g>
<g>
<title>Interpreter (1 samples, 0.29%)</title><rect x="30.6" y="531.0" width="3.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="33.6" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (2 samples, 0.58%)</title><rect x="34.0" y="691.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="37.0" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (2 samples, 0.58%)</title><rect x="34.0" y="675.0" width="6.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="37.0" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 0.58%)</title><rect x="34.0" y="659.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="37.0" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$273/212071042.accept (2 samples, 0.58%)</title><rect x="34.0" y="643.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="37.0" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (2 samples, 0.58%)</title><rect x="34.0" y="627.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="37.0" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.58%)</title><rect x="34.0" y="611.0" width="6.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="37.0" y="622.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.29%)</title><rect x="34.0" y="595.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="37.0" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OffsetStateReaper.maybeReapOffset (1 samples, 0.29%)</title><rect x="37.4" y="595.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="40.4" y="606.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (6 samples, 1.74%)</title><rect x="40.9" y="691.0" width="20.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="43.9" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$272/1931245430.accept (6 samples, 1.74%)</title><rect x="40.9" y="675.0" width="20.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="43.9" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (6 samples, 1.74%)</title><rect x="40.9" y="659.0" width="20.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="43.9" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/BlacklistedKeysFilter.shouldTake (2 samples, 0.58%)</title><rect x="40.9" y="643.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="43.9" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (1 samples, 0.29%)</title><rect x="47.7" y="643.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="50.7" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (1 samples, 0.29%)</title><rect x="47.7" y="627.0" width="3.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="50.7" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (1 samples, 0.29%)</title><rect x="47.7" y="611.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="50.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (1 samples, 0.29%)</title><rect x="47.7" y="595.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="50.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.29%)</title><rect x="47.7" y="579.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="50.7" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.29%)</title><rect x="47.7" y="563.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="50.7" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.29%)</title><rect x="47.7" y="547.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="50.7" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (2 samples, 0.58%)</title><rect x="51.2" y="643.0" width="6.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="54.2" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 0.58%)</title><rect x="51.2" y="627.0" width="6.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="54.2" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.58%)</title><rect x="51.2" y="611.0" width="6.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="54.2" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.58%)</title><rect x="51.2" y="595.0" width="6.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="54.2" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.29%)</title><rect x="54.6" y="579.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="57.6" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.29%)</title><rect x="54.6" y="563.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="57.6" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.29%)</title><rect x="54.6" y="547.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="57.6" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.29%)</title><rect x="58.0" y="643.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="61.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.29%)</title><rect x="58.0" y="627.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="61.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (13 samples, 3.78%)</title><rect x="61.5" y="691.0" width="44.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="64.5" y="702.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (13 samples, 3.78%)</title><rect x="61.5" y="675.0" width="44.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="64.5" y="686.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (7 samples, 2.03%)</title><rect x="61.5" y="659.0" width="24.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="64.5" y="670.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.58%)</title><rect x="61.5" y="643.0" width="6.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="64.5" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.58%)</title><rect x="61.5" y="627.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="64.5" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.58%)</title><rect x="61.5" y="611.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="64.5" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.58%)</title><rect x="61.5" y="595.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="64.5" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.29%)</title><rect x="61.5" y="579.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="64.5" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.29%)</title><rect x="61.5" y="563.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="64.5" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.29%)</title><rect x="61.5" y="547.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="64.5" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.29%)</title><rect x="64.9" y="579.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="67.9" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.29%)</title><rect x="64.9" y="563.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="67.9" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.29%)</title><rect x="64.9" y="547.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="67.9" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.29%)</title><rect x="64.9" y="531.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="67.9" y="542.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.29%)</title><rect x="64.9" y="515.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="67.9" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (5 samples, 1.45%)</title><rect x="68.3" y="643.0" width="17.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="71.3" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 1.16%)</title><rect x="71.7" y="627.0" width="13.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="74.7" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (2 samples, 0.58%)</title><rect x="71.7" y="611.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="74.7" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 0.58%)</title><rect x="71.7" y="595.0" width="6.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="74.7" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (2 samples, 0.58%)</title><rect x="71.7" y="579.0" width="6.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="74.7" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 0.58%)</title><rect x="71.7" y="563.0" width="6.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="74.7" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (2 samples, 0.58%)</title><rect x="71.7" y="547.0" width="6.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="74.7" y="558.0"></text>
</g>
<g>
<title>java/util/Optional.of (2 samples, 0.58%)</title><rect x="71.7" y="531.0" width="6.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="74.7" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.29%)</title><rect x="78.6" y="611.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="81.6" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.29%)</title><rect x="82.0" y="611.0" width="3.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="85.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.29%)</title><rect x="82.0" y="595.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="85.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.29%)</title><rect x="82.0" y="579.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="85.0" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.29%)</title><rect x="82.0" y="563.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="85.0" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.29%)</title><rect x="82.0" y="547.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="85.0" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.29%)</title><rect x="82.0" y="531.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="85.0" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.29%)</title><rect x="85.5" y="659.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="88.5" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.29%)</title><rect x="85.5" y="643.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="88.5" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.29%)</title><rect x="85.5" y="627.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="88.5" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.29%)</title><rect x="85.5" y="611.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="88.5" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (5 samples, 1.45%)</title><rect x="88.9" y="659.0" width="17.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="91.9" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.87%)</title><rect x="88.9" y="643.0" width="10.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="91.9" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.29%)</title><rect x="88.9" y="627.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="91.9" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.29%)</title><rect x="88.9" y="611.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="91.9" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.29%)</title><rect x="88.9" y="595.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="91.9" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.29%)</title><rect x="88.9" y="579.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="91.9" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.29%)</title><rect x="88.9" y="563.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="91.9" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.29%)</title><rect x="88.9" y="547.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="91.9" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.29%)</title><rect x="88.9" y="531.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="91.9" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.29%)</title><rect x="88.9" y="515.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="91.9" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.29%)</title><rect x="88.9" y="499.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="91.9" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.29%)</title><rect x="88.9" y="483.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="91.9" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.29%)</title><rect x="88.9" y="467.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="91.9" y="478.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.29%)</title><rect x="88.9" y="451.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="91.9" y="462.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (1 samples, 0.29%)</title><rect x="88.9" y="435.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="91.9" y="446.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newDecoder (1 samples, 0.29%)</title><rect x="88.9" y="419.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="91.9" y="430.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (1 samples, 0.29%)</title><rect x="88.9" y="403.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="91.9" y="414.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (1 samples, 0.29%)</title><rect x="88.9" y="387.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="91.9" y="398.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (1 samples, 0.29%)</title><rect x="88.9" y="371.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="91.9" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.58%)</title><rect x="92.3" y="627.0" width="6.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="95.3" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.29%)</title><rect x="92.3" y="611.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="95.3" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.29%)</title><rect x="92.3" y="595.0" width="3.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="95.3" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.29%)</title><rect x="92.3" y="579.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="95.3" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.29%)</title><rect x="92.3" y="563.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="95.3" y="574.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.29%)</title><rect x="92.3" y="547.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="95.3" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.29%)</title><rect x="95.8" y="611.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="98.8" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.29%)</title><rect x="95.8" y="595.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="98.8" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.29%)</title><rect x="95.8" y="579.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="98.8" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.29%)</title><rect x="95.8" y="563.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="98.8" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.29%)</title><rect x="95.8" y="547.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="98.8" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.29%)</title><rect x="95.8" y="531.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="98.8" y="542.0"></text>
</g>
<g>
<title>__GI_epoll_wait (1 samples, 0.29%)</title><rect x="95.8" y="515.0" width="3.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="98.8" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.29%)</title><rect x="99.2" y="643.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="102.2" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.29%)</title><rect x="99.2" y="627.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="102.2" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.29%)</title><rect x="99.2" y="611.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="102.2" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.29%)</title><rect x="99.2" y="595.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="102.2" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.29%)</title><rect x="99.2" y="579.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="102.2" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.29%)</title><rect x="99.2" y="563.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="102.2" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.29%)</title><rect x="99.2" y="547.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="102.2" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.instance (1 samples, 0.29%)</title><rect x="99.2" y="531.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="102.2" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.instance (1 samples, 0.29%)</title><rect x="99.2" y="515.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="102.2" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type.isArray (1 samples, 0.29%)</title><rect x="99.2" y="499.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="102.2" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.arrayElementType (1 samples, 0.29%)</title><rect x="99.2" y="483.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="102.2" y="494.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.29%)</title><rect x="99.2" y="467.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="102.2" y="478.0"></text>
</g>
<g>
<title>java/util/Optional.&lt;init&gt; (1 samples, 0.29%)</title><rect x="99.2" y="451.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="102.2" y="462.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.29%)</title><rect x="99.2" y="435.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="102.2" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.29%)</title><rect x="102.6" y="643.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="105.6" y="654.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.29%)</title><rect x="102.6" y="627.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="105.6" y="638.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.29%)</title><rect x="102.6" y="611.0" width="3.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="105.6" y="622.0"></text>
</g>
<g>
<title>java/lang/Thread.run (228 samples, 66.28%)</title><rect x="106.0" y="723.0" width="782.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="109.0" y="734.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (228 samples, 66.28%)</title><rect x="106.0" y="707.0" width="782.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="109.0" y="718.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (228 samples, 66.28%)</title><rect x="106.0" y="691.0" width="782.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="109.0" y="702.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$288/381366418.run (223 samples, 64.83%)</title><rect x="106.0" y="675.0" width="765.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="109.0" y="686.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$288/381366418.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62 (223 samples, 64.83%)</title><rect x="106.0" y="659.0" width="765.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="109.0" y="670.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (223 samples, 64.83%)</title><rect x="106.0" y="643.0" width="765.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="109.0" y="654.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (223 samples, 64.83%)</title><rect x="106.0" y="627.0" width="765.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="109.0" y="638.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (7 samples, 2.03%)</title><rect x="119.8" y="611.0" width="24.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="122.8" y="622.0">c..</text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (7 samples, 2.03%)</title><rect x="119.8" y="595.0" width="24.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="122.8" y="606.0">j..</text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 2.03%)</title><rect x="119.8" y="579.0" width="24.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="122.8" y="590.0">j..</text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.87%)</title><rect x="119.8" y="563.0" width="10.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="122.8" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 1.16%)</title><rect x="130.1" y="563.0" width="13.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="133.1" y="574.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.29%)</title><rect x="140.3" y="547.0" width="3.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="143.3" y="558.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.29%)</title><rect x="140.3" y="531.0" width="3.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="143.3" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (23 samples, 6.69%)</title><rect x="143.8" y="611.0" width="78.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="146.8" y="622.0">com/linec..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (23 samples, 6.69%)</title><rect x="143.8" y="595.0" width="78.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="146.8" y="606.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (23 samples, 6.69%)</title><rect x="143.8" y="579.0" width="78.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="146.8" y="590.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (8 samples, 2.33%)</title><rect x="195.2" y="563.0" width="27.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="198.2" y="574.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 2.33%)</title><rect x="195.2" y="547.0" width="27.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="198.2" y="558.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$295/137854085.accept (8 samples, 2.33%)</title><rect x="195.2" y="531.0" width="27.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="198.2" y="542.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (8 samples, 2.33%)</title><rect x="195.2" y="515.0" width="27.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="198.2" y="526.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (8 samples, 2.33%)</title><rect x="195.2" y="499.0" width="27.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="198.2" y="510.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (8 samples, 2.33%)</title><rect x="195.2" y="483.0" width="27.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="198.2" y="494.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (8 samples, 2.33%)</title><rect x="195.2" y="467.0" width="27.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="198.2" y="478.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (5 samples, 1.45%)</title><rect x="195.2" y="451.0" width="17.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="198.2" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (5 samples, 1.45%)</title><rect x="195.2" y="435.0" width="17.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="198.2" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$286/1359295900.accept (1 samples, 0.29%)</title><rect x="195.2" y="419.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="198.2" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$285/1929256215.accept (1 samples, 0.29%)</title><rect x="198.7" y="419.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="201.7" y="430.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.87%)</title><rect x="202.1" y="419.0" width="10.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="205.1" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.87%)</title><rect x="212.4" y="451.0" width="10.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="215.4" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (36 samples, 10.47%)</title><rect x="222.7" y="611.0" width="123.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="225.7" y="622.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$45/1556995360.extract (36 samples, 10.47%)</title><rect x="222.7" y="595.0" width="123.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="225.7" y="606.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (36 samples, 10.47%)</title><rect x="222.7" y="579.0" width="123.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="225.7" y="590.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (36 samples, 10.47%)</title><rect x="222.7" y="563.0" width="123.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="225.7" y="574.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (36 samples, 10.47%)</title><rect x="222.7" y="547.0" width="123.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="225.7" y="558.0">com/linecorp/de..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (36 samples, 10.47%)</title><rect x="222.7" y="531.0" width="123.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="225.7" y="542.0">com/fasterxml/j..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (12 samples, 3.49%)</title><rect x="222.7" y="515.0" width="41.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="225.7" y="526.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (7 samples, 2.03%)</title><rect x="222.7" y="499.0" width="24.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="225.7" y="510.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (6 samples, 1.74%)</title><rect x="222.7" y="483.0" width="20.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="225.7" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.58%)</title><rect x="236.4" y="467.0" width="6.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="239.4" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.58%)</title><rect x="236.4" y="451.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="239.4" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.58%)</title><rect x="236.4" y="435.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="239.4" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.58%)</title><rect x="236.4" y="419.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="239.4" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.58%)</title><rect x="236.4" y="403.0" width="6.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="239.4" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.&lt;init&gt; (1 samples, 0.29%)</title><rect x="243.3" y="483.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="246.3" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.29%)</title><rect x="243.3" y="467.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="246.3" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (5 samples, 1.45%)</title><rect x="246.7" y="499.0" width="17.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="249.7" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (5 samples, 1.45%)</title><rect x="246.7" y="483.0" width="17.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="249.7" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.29%)</title><rect x="246.7" y="467.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="249.7" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.29%)</title><rect x="250.1" y="467.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="253.1" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.29%)</title><rect x="250.1" y="451.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="253.1" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (1 samples, 0.29%)</title><rect x="250.1" y="435.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="253.1" y="446.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.29%)</title><rect x="250.1" y="419.0" width="3.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="253.1" y="430.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.29%)</title><rect x="250.1" y="403.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="253.1" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (3 samples, 0.87%)</title><rect x="253.5" y="467.0" width="10.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="256.5" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.29%)</title><rect x="260.4" y="451.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="263.4" y="462.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.29%)</title><rect x="260.4" y="435.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="263.4" y="446.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.29%)</title><rect x="260.4" y="419.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="263.4" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.29%)</title><rect x="260.4" y="403.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="263.4" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.29%)</title><rect x="260.4" y="387.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="263.4" y="398.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.29%)</title><rect x="260.4" y="371.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="263.4" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (24 samples, 6.98%)</title><rect x="263.8" y="515.0" width="82.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="266.8" y="526.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.29%)</title><rect x="263.8" y="499.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="266.8" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.29%)</title><rect x="263.8" y="483.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="266.8" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (1 samples, 0.29%)</title><rect x="263.8" y="467.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="266.8" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.58%)</title><rect x="267.3" y="499.0" width="6.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="270.3" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.58%)</title><rect x="267.3" y="483.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="270.3" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.29%)</title><rect x="270.7" y="467.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="273.7" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.29%)</title><rect x="270.7" y="451.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="273.7" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (5 samples, 1.45%)</title><rect x="274.1" y="499.0" width="17.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="277.1" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (4 samples, 1.16%)</title><rect x="277.6" y="483.0" width="13.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="280.6" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (4 samples, 1.16%)</title><rect x="277.6" y="467.0" width="13.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="280.6" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (4 samples, 1.16%)</title><rect x="277.6" y="451.0" width="13.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="280.6" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (2 samples, 0.58%)</title><rect x="284.4" y="435.0" width="6.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="287.4" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (16 samples, 4.65%)</title><rect x="291.3" y="499.0" width="54.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="294.3" y="510.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (16 samples, 4.65%)</title><rect x="291.3" y="483.0" width="54.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="294.3" y="494.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (8 samples, 2.33%)</title><rect x="294.7" y="467.0" width="27.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="297.7" y="478.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.29%)</title><rect x="308.4" y="451.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="311.4" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.29%)</title><rect x="308.4" y="435.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="311.4" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.29%)</title><rect x="308.4" y="419.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="311.4" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.29%)</title><rect x="311.9" y="451.0" width="3.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="314.9" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.29%)</title><rect x="311.9" y="435.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="314.9" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (2 samples, 0.58%)</title><rect x="315.3" y="451.0" width="6.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="318.3" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (7 samples, 2.03%)</title><rect x="322.2" y="467.0" width="24.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="325.2" y="478.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (7 samples, 2.03%)</title><rect x="322.2" y="451.0" width="24.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="325.2" y="462.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (7 samples, 2.03%)</title><rect x="322.2" y="435.0" width="24.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="325.2" y="446.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.29%)</title><rect x="325.6" y="419.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="328.6" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.29%)</title><rect x="325.6" y="403.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="328.6" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.29%)</title><rect x="325.6" y="387.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="328.6" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.29%)</title><rect x="325.6" y="371.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="328.6" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.29%)</title><rect x="325.6" y="355.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="328.6" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.29%)</title><rect x="325.6" y="339.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="328.6" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (2 samples, 0.58%)</title><rect x="329.0" y="419.0" width="6.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="332.0" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.58%)</title><rect x="329.0" y="403.0" width="6.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="332.0" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.58%)</title><rect x="329.0" y="387.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="332.0" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.58%)</title><rect x="329.0" y="371.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="332.0" y="382.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.58%)</title><rect x="329.0" y="355.0" width="6.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="332.0" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 0.58%)</title><rect x="335.9" y="419.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="338.9" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 0.58%)</title><rect x="335.9" y="403.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="338.9" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 0.58%)</title><rect x="335.9" y="387.0" width="6.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="338.9" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (2 samples, 0.58%)</title><rect x="335.9" y="371.0" width="6.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="338.9" y="382.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 0.58%)</title><rect x="335.9" y="355.0" width="6.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="338.9" y="366.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (2 samples, 0.58%)</title><rect x="335.9" y="339.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="338.9" y="350.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor2.newInstance (2 samples, 0.58%)</title><rect x="335.9" y="323.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="338.9" y="334.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.29%)</title><rect x="339.3" y="307.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="342.3" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.29%)</title><rect x="342.7" y="419.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="345.7" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.29%)</title><rect x="342.7" y="403.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="345.7" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.29%)</title><rect x="342.7" y="387.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="345.7" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (153 samples, 44.48%)</title><rect x="346.2" y="611.0" width="524.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="349.2" y="622.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (16 samples, 4.65%)</title><rect x="349.6" y="595.0" width="54.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="352.6" y="606.0">com/l..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (14 samples, 4.07%)</title><rect x="356.5" y="579.0" width="48.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="359.5" y="590.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (12 samples, 3.49%)</title><rect x="363.3" y="563.0" width="41.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="366.3" y="574.0">ch/..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (12 samples, 3.49%)</title><rect x="363.3" y="547.0" width="41.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="366.3" y="558.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (10 samples, 2.91%)</title><rect x="370.2" y="531.0" width="34.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="373.2" y="542.0">ja..</text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.29%)</title><rect x="373.6" y="515.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="376.6" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.87%)</title><rect x="377.0" y="515.0" width="10.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="380.0" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (3 samples, 0.87%)</title><rect x="377.0" y="499.0" width="10.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="380.0" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (5 samples, 1.45%)</title><rect x="387.3" y="515.0" width="17.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="390.3" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.87%)</title><rect x="404.5" y="595.0" width="10.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="407.5" y="606.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.87%)</title><rect x="404.5" y="579.0" width="10.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="407.5" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.29%)</title><rect x="411.3" y="563.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="414.3" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.29%)</title><rect x="411.3" y="547.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="414.3" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.29%)</title><rect x="411.3" y="531.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="414.3" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.29%)</title><rect x="411.3" y="515.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="414.3" y="526.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.29%)</title><rect x="411.3" y="499.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="414.3" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.29%)</title><rect x="411.3" y="483.0" width="3.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="414.3" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (32 samples, 9.30%)</title><rect x="414.8" y="595.0" width="109.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="417.8" y="606.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (30 samples, 8.72%)</title><rect x="414.8" y="579.0" width="102.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="417.8" y="590.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (17 samples, 4.94%)</title><rect x="418.2" y="563.0" width="58.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="421.2" y="574.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (7 samples, 2.03%)</title><rect x="445.6" y="547.0" width="24.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="448.6" y="558.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (6 samples, 1.74%)</title><rect x="449.1" y="531.0" width="20.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="452.1" y="542.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.58%)</title><rect x="459.4" y="515.0" width="6.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="462.4" y="526.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.58%)</title><rect x="459.4" y="499.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="462.4" y="510.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.58%)</title><rect x="459.4" y="483.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="462.4" y="494.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.58%)</title><rect x="459.4" y="467.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="462.4" y="478.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.29%)</title><rect x="459.4" y="451.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="462.4" y="462.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.29%)</title><rect x="459.4" y="435.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="462.4" y="446.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.29%)</title><rect x="462.8" y="451.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="465.8" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.29%)</title><rect x="462.8" y="435.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="465.8" y="446.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.29%)</title><rect x="462.8" y="419.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="465.8" y="430.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.29%)</title><rect x="466.2" y="515.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="469.2" y="526.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.29%)</title><rect x="469.7" y="547.0" width="3.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="472.7" y="558.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.29%)</title><rect x="473.1" y="547.0" width="3.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="476.1" y="558.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (12 samples, 3.49%)</title><rect x="476.5" y="563.0" width="41.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="479.5" y="574.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (12 samples, 3.49%)</title><rect x="476.5" y="547.0" width="41.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="479.5" y="558.0">ch/..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.29%)</title><rect x="476.5" y="531.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="479.5" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.29%)</title><rect x="476.5" y="515.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="479.5" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.29%)</title><rect x="476.5" y="499.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="479.5" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.29%)</title><rect x="476.5" y="483.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="479.5" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.29%)</title><rect x="476.5" y="467.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="479.5" y="478.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (11 samples, 3.20%)</title><rect x="479.9" y="531.0" width="37.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="482.9" y="542.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.put (11 samples, 3.20%)</title><rect x="479.9" y="515.0" width="37.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="482.9" y="526.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.putVal (6 samples, 1.74%)</title><rect x="497.1" y="499.0" width="20.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="500.1" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (5 samples, 1.45%)</title><rect x="500.5" y="483.0" width="17.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="503.5" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (2 samples, 0.58%)</title><rect x="517.7" y="579.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="520.7" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (2 samples, 0.58%)</title><rect x="517.7" y="563.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="520.7" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.58%)</title><rect x="517.7" y="547.0" width="6.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="520.7" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.58%)</title><rect x="517.7" y="531.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="520.7" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.29%)</title><rect x="521.1" y="515.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="524.1" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (88 samples, 25.58%)</title><rect x="524.5" y="595.0" width="301.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="527.5" y="606.0">com/linecorp/decaton/processor/runtime/in..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (88 samples, 25.58%)</title><rect x="524.5" y="579.0" width="301.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="527.5" y="590.0">com/linecorp/decaton/processor/runtime/in..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$209/440133426.process (65 samples, 18.90%)</title><rect x="524.5" y="563.0" width="223.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="527.5" y="574.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (64 samples, 18.60%)</title><rect x="528.0" y="547.0" width="219.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="531.0" y="558.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (62 samples, 18.02%)</title><rect x="531.4" y="531.0" width="212.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="534.4" y="542.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (58 samples, 16.86%)</title><rect x="538.3" y="515.0" width="198.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="541.3" y="526.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>java/lang/Thread.sleep (57 samples, 16.57%)</title><rect x="538.3" y="499.0" width="195.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="541.3" y="510.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (54 samples, 15.70%)</title><rect x="541.7" y="483.0" width="185.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="544.7" y="494.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (5 samples, 1.45%)</title><rect x="565.7" y="467.0" width="17.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="568.7" y="478.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.58%)</title><rect x="582.8" y="467.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="585.8" y="478.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.58%)</title><rect x="589.7" y="467.0" width="6.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="592.7" y="478.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.29%)</title><rect x="593.1" y="451.0" width="3.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="596.1" y="462.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (38 samples, 11.05%)</title><rect x="596.6" y="467.0" width="130.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="599.6" y="478.0">os::sleep(Thread..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.87%)</title><rect x="624.0" y="451.0" width="10.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="627.0" y="462.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (3 samples, 0.87%)</title><rect x="624.0" y="435.0" width="10.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="627.0" y="446.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.29%)</title><rect x="634.3" y="451.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="637.3" y="462.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 1.16%)</title><rect x="637.7" y="451.0" width="13.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="640.7" y="462.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (11 samples, 3.20%)</title><rect x="651.5" y="451.0" width="37.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="654.5" y="462.0">__p..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.58%)</title><rect x="689.2" y="451.0" width="6.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="692.2" y="462.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.29%)</title><rect x="696.0" y="451.0" width="3.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="699.0" y="462.0"></text>
</g>
<g>
<title>_init (1 samples, 0.29%)</title><rect x="699.5" y="451.0" width="3.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="702.5" y="462.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (7 samples, 2.03%)</title><rect x="702.9" y="451.0" width="24.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="705.9" y="462.0">o..</text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (2 samples, 0.58%)</title><rect x="726.9" y="483.0" width="6.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="729.9" y="494.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.29%)</title><rect x="733.8" y="499.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="736.8" y="510.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.29%)</title><rect x="733.8" y="483.0" width="3.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="736.8" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.58%)</title><rect x="737.2" y="515.0" width="6.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="740.2" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.58%)</title><rect x="737.2" y="499.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="740.2" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.58%)</title><rect x="737.2" y="483.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="740.2" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.58%)</title><rect x="737.2" y="467.0" width="6.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="740.2" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.29%)</title><rect x="744.1" y="531.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="747.1" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (4 samples, 1.16%)</title><rect x="747.5" y="563.0" width="13.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="750.5" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (1 samples, 0.29%)</title><rect x="761.2" y="563.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="764.2" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (1 samples, 0.29%)</title><rect x="761.2" y="547.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="764.2" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.87%)</title><rect x="764.7" y="563.0" width="10.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="767.7" y="574.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.29%)</title><rect x="768.1" y="547.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="771.1" y="558.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.29%)</title><rect x="768.1" y="531.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="771.1" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.29%)</title><rect x="768.1" y="515.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="771.1" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.29%)</title><rect x="768.1" y="499.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="771.1" y="510.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.29%)</title><rect x="771.5" y="547.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="774.5" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.29%)</title><rect x="771.5" y="531.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="774.5" y="542.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.58%)</title><rect x="774.9" y="563.0" width="6.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="777.9" y="574.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.58%)</title><rect x="774.9" y="547.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="777.9" y="558.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.29%)</title><rect x="774.9" y="531.0" width="3.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="777.9" y="542.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.29%)</title><rect x="778.4" y="531.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="781.4" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.58%)</title><rect x="781.8" y="563.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="784.8" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 1.74%)</title><rect x="788.7" y="563.0" width="20.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="791.7" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 1.74%)</title><rect x="788.7" y="547.0" width="20.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="791.7" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 1.74%)</title><rect x="788.7" y="531.0" width="20.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="791.7" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.29%)</title><rect x="788.7" y="515.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="791.7" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (4 samples, 1.16%)</title><rect x="792.1" y="515.0" width="13.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="795.1" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (3 samples, 0.87%)</title><rect x="792.1" y="499.0" width="10.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="795.1" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (3 samples, 0.87%)</title><rect x="792.1" y="483.0" width="10.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="795.1" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$292/1796637096.accept (2 samples, 0.58%)</title><rect x="792.1" y="467.0" width="6.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="795.1" y="478.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.29%)</title><rect x="799.0" y="467.0" width="3.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="802.0" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.29%)</title><rect x="802.4" y="499.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="805.4" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.29%)</title><rect x="805.8" y="515.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="808.8" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReference.get (5 samples, 1.45%)</title><rect x="809.2" y="563.0" width="17.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="812.2" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 3.78%)</title><rect x="826.4" y="595.0" width="44.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="829.4" y="606.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 3.78%)</title><rect x="826.4" y="579.0" width="44.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="829.4" y="590.0">java..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.29%)</title><rect x="857.3" y="563.0" width="3.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="860.3" y="574.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.29%)</title><rect x="857.3" y="547.0" width="3.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="860.3" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.58%)</title><rect x="860.7" y="563.0" width="6.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="863.7" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.29%)</title><rect x="860.7" y="547.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="863.7" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.29%)</title><rect x="860.7" y="531.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="863.7" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.29%)</title><rect x="860.7" y="515.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="863.7" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.29%)</title><rect x="864.1" y="547.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="867.1" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$293/1472844038.accept (1 samples, 0.29%)</title><rect x="864.1" y="531.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="867.1" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$57 (1 samples, 0.29%)</title><rect x="864.1" y="515.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="867.1" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.29%)</title><rect x="864.1" y="499.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="867.1" y="510.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.29%)</title><rect x="864.1" y="483.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="867.1" y="494.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.29%)</title><rect x="864.1" y="467.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="867.1" y="478.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.29%)</title><rect x="867.6" y="563.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="870.6" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (5 samples, 1.45%)</title><rect x="871.0" y="675.0" width="17.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="874.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (3 samples, 0.87%)</title><rect x="874.4" y="659.0" width="10.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="877.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.87%)</title><rect x="874.4" y="643.0" width="10.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="877.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.87%)</title><rect x="874.4" y="627.0" width="10.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="877.4" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.87%)</title><rect x="874.4" y="611.0" width="10.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="877.4" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.87%)</title><rect x="874.4" y="595.0" width="10.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="877.4" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateOf (1 samples, 0.29%)</title><rect x="884.7" y="659.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="887.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.58%)</title><rect x="888.1" y="723.0" width="6.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="891.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (2 samples, 0.58%)</title><rect x="888.1" y="707.0" width="6.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="891.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.58%)</title><rect x="888.1" y="691.0" width="6.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="891.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.29%)</title><rect x="888.1" y="675.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="891.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.29%)</title><rect x="888.1" y="659.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="891.1" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.clear (1 samples, 0.29%)</title><rect x="888.1" y="643.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="891.1" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.entrySet (1 samples, 0.29%)</title><rect x="888.1" y="627.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="891.1" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.handlePendingDisconnects (1 samples, 0.29%)</title><rect x="891.6" y="675.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="894.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.29%)</title><rect x="891.6" y="659.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="894.6" y="670.0"></text>
</g>
<g>
<title>start_thread (86 samples, 25.00%)</title><rect x="895.0" y="723.0" width="295.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="898.0" y="734.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (86 samples, 25.00%)</title><rect x="895.0" y="707.0" width="295.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="898.0" y="718.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (14 samples, 4.07%)</title><rect x="895.0" y="691.0" width="48.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="898.0" y="702.0">Gang..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (14 samples, 4.07%)</title><rect x="895.0" y="675.0" width="48.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="898.0" y="686.0">G1Pa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (14 samples, 4.07%)</title><rect x="895.0" y="659.0" width="48.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="898.0" y="670.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (14 samples, 4.07%)</title><rect x="895.0" y="643.0" width="48.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="898.0" y="654.0">G1Pa..</text>
</g>
<g>
<title>G1DefaultParGCAllocator::alloc_buffer(InCSetState, unsigned char) (1 samples, 0.29%)</title><rect x="908.7" y="627.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="911.7" y="638.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (9 samples, 2.62%)</title><rect x="912.2" y="627.0" width="30.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="915.2" y="638.0">G1..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (3 samples, 0.87%)</title><rect x="932.7" y="611.0" width="10.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="935.7" y="622.0"></text>
</g>
<g>
<title>JavaThread::run() (72 samples, 20.93%)</title><rect x="943.0" y="691.0" width="247.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="946.0" y="702.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (72 samples, 20.93%)</title><rect x="943.0" y="675.0" width="247.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="946.0" y="686.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (72 samples, 20.93%)</title><rect x="943.0" y="659.0" width="247.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="946.0" y="670.0">CompileBroker::compiler_thread_lo..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (71 samples, 20.64%)</title><rect x="943.0" y="643.0" width="243.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="946.0" y="654.0">CompileBroker::invoke_compiler_o..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (68 samples, 19.77%)</title><rect x="943.0" y="627.0" width="233.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="946.0" y="638.0">C2Compiler::compile_method(ciEn..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (68 samples, 19.77%)</title><rect x="943.0" y="611.0" width="233.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="946.0" y="622.0">Compile::Compile(ciEnv*, C2Comp..</text>
</g>
<g>
<title>Compile::Code_Gen() (29 samples, 8.43%)</title><rect x="943.0" y="595.0" width="99.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="946.0" y="606.0">Compile::Cod..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.29%)</title><rect x="943.0" y="579.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="946.0" y="590.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.29%)</title><rect x="943.0" y="563.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="946.0" y="574.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.29%)</title><rect x="943.0" y="547.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="946.0" y="558.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.29%)</title><rect x="946.5" y="579.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="949.5" y="590.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.29%)</title><rect x="946.5" y="563.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="949.5" y="574.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.29%)</title><rect x="946.5" y="547.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="949.5" y="558.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.29%)</title><rect x="946.5" y="531.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="949.5" y="542.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.58%)</title><rect x="949.9" y="579.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="952.9" y="590.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.58%)</title><rect x="949.9" y="563.0" width="6.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="952.9" y="574.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.29%)</title><rect x="949.9" y="547.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="952.9" y="558.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.29%)</title><rect x="953.3" y="547.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="956.3" y="558.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.29%)</title><rect x="956.7" y="579.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="959.7" y="590.0"></text>
</g>
<g>
<title>PhaseBlockLayout::merge_traces(bool) (1 samples, 0.29%)</title><rect x="956.7" y="563.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="959.7" y="574.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 1.16%)</title><rect x="960.2" y="579.0" width="13.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="963.2" y="590.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 1.16%)</title><rect x="960.2" y="563.0" width="13.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="963.2" y="574.0"></text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.29%)</title><rect x="960.2" y="547.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="963.2" y="558.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.29%)</title><rect x="960.2" y="531.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="963.2" y="542.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.29%)</title><rect x="963.6" y="547.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="966.6" y="558.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.29%)</title><rect x="967.0" y="547.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="970.0" y="558.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.29%)</title><rect x="967.0" y="531.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="970.0" y="542.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.29%)</title><rect x="970.5" y="547.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="973.5" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (20 samples, 5.81%)</title><rect x="973.9" y="579.0" width="68.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="976.9" y="590.0">PhaseCh..</text>
</g>
<g>
<title>MachTypeNode::bottom_type() const (1 samples, 0.29%)</title><rect x="973.9" y="563.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="976.9" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.87%)</title><rect x="977.3" y="563.0" width="10.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="980.3" y="574.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.58%)</title><rect x="980.8" y="547.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="983.8" y="558.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.58%)</title><rect x="980.8" y="531.0" width="6.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="983.8" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 0.87%)</title><rect x="987.6" y="563.0" width="10.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="990.6" y="574.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (3 samples, 0.87%)</title><rect x="987.6" y="547.0" width="10.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="990.6" y="558.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.58%)</title><rect x="991.0" y="531.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="994.0" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 0.87%)</title><rect x="997.9" y="563.0" width="10.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1000.9" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (2 samples, 0.58%)</title><rect x="1008.2" y="563.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1011.2" y="574.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.29%)</title><rect x="1011.6" y="547.0" width="3.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1014.6" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.29%)</title><rect x="1015.1" y="563.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1018.1" y="574.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.29%)</title><rect x="1015.1" y="547.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1018.1" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.87%)</title><rect x="1018.5" y="563.0" width="10.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1021.5" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.29%)</title><rect x="1025.3" y="547.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1028.3" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.29%)</title><rect x="1025.3" y="531.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1028.3" y="542.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.29%)</title><rect x="1025.3" y="515.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1028.3" y="526.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.29%)</title><rect x="1028.8" y="563.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1031.8" y="574.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.29%)</title><rect x="1028.8" y="547.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1031.8" y="558.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.29%)</title><rect x="1028.8" y="531.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1031.8" y="542.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.29%)</title><rect x="1028.8" y="515.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1031.8" y="526.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.29%)</title><rect x="1032.2" y="563.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1035.2" y="574.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.29%)</title><rect x="1032.2" y="547.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1035.2" y="558.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.58%)</title><rect x="1035.6" y="563.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1038.6" y="574.0"></text>
</g>
<g>
<title>Compile::Optimize() (31 samples, 9.01%)</title><rect x="1042.5" y="595.0" width="106.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1045.5" y="606.0">Compile::Opti..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.29%)</title><rect x="1042.5" y="579.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1045.5" y="590.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.29%)</title><rect x="1042.5" y="563.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1045.5" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.29%)</title><rect x="1045.9" y="579.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1048.9" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.29%)</title><rect x="1045.9" y="563.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1048.9" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="1045.9" y="547.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1048.9" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_non_escaped_objects(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="1045.9" y="531.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1048.9" y="542.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.29%)</title><rect x="1049.4" y="579.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1052.4" y="590.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.29%)</title><rect x="1049.4" y="563.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1052.4" y="574.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.29%)</title><rect x="1049.4" y="547.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1052.4" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (24 samples, 6.98%)</title><rect x="1052.8" y="579.0" width="82.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1055.8" y="590.0">PhaseIdea..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.29%)</title><rect x="1052.8" y="563.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1055.8" y="574.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.29%)</title><rect x="1052.8" y="547.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1055.8" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (18 samples, 5.23%)</title><rect x="1056.2" y="563.0" width="61.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1059.2" y="574.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (18 samples, 5.23%)</title><rect x="1056.2" y="547.0" width="61.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1059.2" y="558.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.29%)</title><rect x="1056.2" y="531.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1059.2" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (17 samples, 4.94%)</title><rect x="1059.7" y="531.0" width="58.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1062.7" y="542.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 0.87%)</title><rect x="1107.7" y="515.0" width="10.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1110.7" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.29%)</title><rect x="1118.0" y="563.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1121.0" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.29%)</title><rect x="1118.0" y="547.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1121.0" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.29%)</title><rect x="1121.4" y="563.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1124.4" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.29%)</title><rect x="1121.4" y="547.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1124.4" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::spinup(Node*, Node*, Node*, Node*, Node*, small_cache*) (1 samples, 0.29%)</title><rect x="1121.4" y="531.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1124.4" y="542.0"></text>
</g>
<g>
<title>Dict::operator[](void const*) const (1 samples, 0.29%)</title><rect x="1121.4" y="515.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1124.4" y="526.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.58%)</title><rect x="1124.8" y="563.0" width="6.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1127.8" y="574.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.58%)</title><rect x="1124.8" y="547.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1127.8" y="558.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.29%)</title><rect x="1124.8" y="531.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1127.8" y="542.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.29%)</title><rect x="1124.8" y="515.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1127.8" y="526.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.29%)</title><rect x="1124.8" y="499.0" width="3.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1127.8" y="510.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.29%)</title><rect x="1128.3" y="531.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1131.3" y="542.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.29%)</title><rect x="1128.3" y="515.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1131.3" y="526.0"></text>
</g>
<g>
<title>PhiNode::pinned() const (1 samples, 0.29%)</title><rect x="1131.7" y="563.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1134.7" y="574.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.87%)</title><rect x="1135.1" y="579.0" width="10.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1138.1" y="590.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.87%)</title><rect x="1135.1" y="563.0" width="10.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1138.1" y="574.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.29%)</title><rect x="1135.1" y="547.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.1" y="558.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.29%)</title><rect x="1135.1" y="531.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1138.1" y="542.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.29%)</title><rect x="1135.1" y="515.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1138.1" y="526.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.29%)</title><rect x="1135.1" y="499.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1138.1" y="510.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.29%)</title><rect x="1135.1" y="483.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1138.1" y="494.0"></text>
</g>
<g>
<title>TypeAryPtr::xmeet_helper(Type const*) const (1 samples, 0.29%)</title><rect x="1135.1" y="467.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1138.1" y="478.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.29%)</title><rect x="1135.1" y="451.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.1" y="462.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.29%)</title><rect x="1135.1" y="435.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1138.1" y="446.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.29%)</title><rect x="1138.5" y="547.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1141.5" y="558.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.29%)</title><rect x="1142.0" y="547.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1145.0" y="558.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.29%)</title><rect x="1142.0" y="531.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1145.0" y="542.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1142.0" y="515.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1145.0" y="526.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1142.0" y="499.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1145.0" y="510.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1142.0" y="483.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1145.0" y="494.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1142.0" y="467.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1145.0" y="478.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1142.0" y="451.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1145.0" y="462.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1142.0" y="435.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1145.0" y="446.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1142.0" y="419.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1145.0" y="430.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1142.0" y="403.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1145.0" y="414.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.29%)</title><rect x="1142.0" y="387.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1145.0" y="398.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.29%)</title><rect x="1142.0" y="371.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1145.0" y="382.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.29%)</title><rect x="1145.4" y="579.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.4" y="590.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.29%)</title><rect x="1145.4" y="563.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1148.4" y="574.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.29%)</title><rect x="1145.4" y="547.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.4" y="558.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.29%)</title><rect x="1145.4" y="531.0" width="3.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1148.4" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 2.03%)</title><rect x="1148.8" y="595.0" width="24.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1151.8" y="606.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 2.03%)</title><rect x="1148.8" y="579.0" width="24.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1151.8" y="590.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 2.03%)</title><rect x="1148.8" y="563.0" width="24.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1151.8" y="574.0">P..</text>
</g>
<g>
<title>GraphKit::add_predicate(int) (1 samples, 0.29%)</title><rect x="1148.8" y="547.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.8" y="558.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*) (1 samples, 0.29%)</title><rect x="1148.8" y="531.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 1.74%)</title><rect x="1152.3" y="547.0" width="20.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.3" y="558.0"></text>
</g>
<g>
<title>JVMState::clone_shallow(Compile*) const (1 samples, 0.29%)</title><rect x="1152.3" y="531.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.29%)</title><rect x="1155.7" y="531.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.7" y="542.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.29%)</title><rect x="1155.7" y="515.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.7" y="526.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.29%)</title><rect x="1155.7" y="499.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.7" y="510.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.29%)</title><rect x="1155.7" y="483.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.7" y="494.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.29%)</title><rect x="1155.7" y="467.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.16%)</title><rect x="1159.1" y="531.0" width="13.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.16%)</title><rect x="1159.1" y="515.0" width="13.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1162.1" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.16%)</title><rect x="1159.1" y="499.0" width="13.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.1" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.16%)</title><rect x="1159.1" y="483.0" width="13.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.87%)</title><rect x="1159.1" y="467.0" width="10.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.87%)</title><rect x="1159.1" y="451.0" width="10.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.87%)</title><rect x="1159.1" y="435.0" width="10.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.87%)</title><rect x="1159.1" y="419.0" width="10.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.1" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1159.1" y="403.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.1" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1159.1" y="387.0" width="3.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1159.1" y="371.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1159.1" y="355.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.29%)</title><rect x="1159.1" y="339.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1162.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1159.1" y="323.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.1" y="334.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1159.1" y="307.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.1" y="318.0"></text>
</g>
<g>
<title>UncommonTrapCallGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1159.1" y="291.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.1" y="302.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.29%)</title><rect x="1159.1" y="275.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.1" y="286.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.29%)</title><rect x="1159.1" y="259.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.1" y="270.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_output_for_runtime_call(Node*, Node*, TypePtr const*) (1 samples, 0.29%)</title><rect x="1159.1" y="243.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.1" y="254.0"></text>
</g>
<g>
<title>Node::operator new(unsigned long, Compile*) (1 samples, 0.29%)</title><rect x="1159.1" y="227.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1162.1" y="238.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.58%)</title><rect x="1162.6" y="403.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.6" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.58%)</title><rect x="1162.6" y="387.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1165.6" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.58%)</title><rect x="1162.6" y="371.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.58%)</title><rect x="1162.6" y="355.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.58%)</title><rect x="1162.6" y="339.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.58%)</title><rect x="1162.6" y="323.0" width="6.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1165.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.58%)</title><rect x="1162.6" y="307.0" width="6.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.6" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.58%)</title><rect x="1162.6" y="291.0" width="6.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1165.6" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.58%)</title><rect x="1162.6" y="275.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.58%)</title><rect x="1162.6" y="259.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.58%)</title><rect x="1162.6" y="243.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.6" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.58%)</title><rect x="1162.6" y="227.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.6" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.58%)</title><rect x="1162.6" y="211.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.6" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.58%)</title><rect x="1162.6" y="195.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.6" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.58%)</title><rect x="1162.6" y="179.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.6" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1162.6" y="163.0" width="3.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1165.6" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1162.6" y="147.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1165.6" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.29%)</title><rect x="1162.6" y="131.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1165.6" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1162.6" y="115.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.6" y="126.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.29%)</title><rect x="1162.6" y="99.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.6" y="110.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.29%)</title><rect x="1162.6" y="83.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.6" y="94.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.29%)</title><rect x="1162.6" y="67.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.6" y="78.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::get_liveness_at(ciMethod*, int) (1 samples, 0.29%)</title><rect x="1162.6" y="51.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.6" y="62.0"></text>
</g>
<g>
<title>BitMap::at_put(unsigned long, bool) (1 samples, 0.29%)</title><rect x="1162.6" y="35.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.6" y="46.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.29%)</title><rect x="1166.0" y="163.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.0" y="174.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.29%)</title><rect x="1166.0" y="147.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.0" y="158.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.29%)</title><rect x="1169.4" y="467.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.4" y="478.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.29%)</title><rect x="1169.4" y="451.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1172.4" y="462.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.29%)</title><rect x="1172.8" y="595.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.8" y="606.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.29%)</title><rect x="1172.8" y="579.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.8" y="590.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 0.87%)</title><rect x="1176.3" y="627.0" width="10.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.3" y="638.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 0.87%)</title><rect x="1176.3" y="611.0" width="10.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.3" y="622.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.87%)</title><rect x="1176.3" y="595.0" width="10.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.3" y="606.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.58%)</title><rect x="1176.3" y="579.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.3" y="590.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.29%)</title><rect x="1176.3" y="563.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.3" y="574.0"></text>
</g>
<g>
<title>GlobalValueNumbering::GlobalValueNumbering(IR*) (1 samples, 0.29%)</title><rect x="1176.3" y="547.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.3" y="558.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(BlockClosure*) (1 samples, 0.29%)</title><rect x="1176.3" y="531.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.3" y="542.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(boolArray&amp;, BlockClosure*) (1 samples, 0.29%)</title><rect x="1176.3" y="515.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.3" y="526.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(boolArray&amp;, BlockClosure*) (1 samples, 0.29%)</title><rect x="1176.3" y="499.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.3" y="510.0"></text>
</g>
<g>
<title>SubstitutionResolver::block_do(BlockBegin*) (1 samples, 0.29%)</title><rect x="1176.3" y="483.0" width="3.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.3" y="494.0"></text>
</g>
<g>
<title>Invoke::state_values_do(ValueVisitor*) (1 samples, 0.29%)</title><rect x="1176.3" y="467.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.3" y="478.0"></text>
</g>
<g>
<title>ValueStack::values_do(ValueVisitor*) (1 samples, 0.29%)</title><rect x="1176.3" y="451.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.3" y="462.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.29%)</title><rect x="1179.7" y="563.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.7" y="574.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.29%)</title><rect x="1179.7" y="547.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.7" y="558.0"></text>
</g>
<g>
<title>LIR_Assembler::process_debug_info(LIR_Op*) (1 samples, 0.29%)</title><rect x="1179.7" y="531.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.7" y="542.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.29%)</title><rect x="1179.7" y="515.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.7" y="526.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.29%)</title><rect x="1183.1" y="579.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.1" y="590.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.29%)</title><rect x="1183.1" y="563.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.1" y="574.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.29%)</title><rect x="1183.1" y="547.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.1" y="558.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.29%)</title><rect x="1183.1" y="531.0" width="3.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.1" y="542.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.29%)</title><rect x="1183.1" y="515.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.1" y="526.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.29%)</title><rect x="1186.6" y="643.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.6" y="654.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.29%)</title><rect x="1186.6" y="627.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.6" y="638.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.29%)</title><rect x="1186.6" y="611.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.6" y="622.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.29%)</title><rect x="1186.6" y="595.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.6" y="606.0"></text>
</g>
</g>
</svg>
