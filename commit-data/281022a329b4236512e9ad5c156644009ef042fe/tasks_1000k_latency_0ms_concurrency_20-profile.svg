<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1126" onload="init(evt)" viewBox="0 0 1200 1126" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1109"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1109"> </text>
<g id="frames">
<g>
<title>all (1,191 samples, 100.00%)</title><rect x="10.0" y="1075.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1086.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (279 samples, 23.43%)</title><rect x="10.0" y="1059.0" width="276.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1070.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (279 samples, 23.43%)</title><rect x="10.0" y="1043.0" width="276.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1054.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (3 samples, 0.25%)</title><rect x="10.0" y="1027.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (3 samples, 0.25%)</title><rect x="10.0" y="1011.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.25%)</title><rect x="10.0" y="995.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.25%)</title><rect x="10.0" y="979.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (2 samples, 0.17%)</title><rect x="10.0" y="963.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.08%)</title><rect x="11.0" y="947.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.0" y="958.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.08%)</title><rect x="11.0" y="931.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.0" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.08%)</title><rect x="11.0" y="915.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="14.0" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="11.0" y="899.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="14.0" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="12.0" y="963.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.0" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="12.0" y="947.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.0" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="12.0" y="931.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.0" y="942.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="12.0" y="915.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.0" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.08%)</title><rect x="13.0" y="1027.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.08%)</title><rect x="13.0" y="1011.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.0" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (4 samples, 0.34%)</title><rect x="14.0" y="1027.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (4 samples, 0.34%)</title><rect x="14.0" y="1011.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.0" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (4 samples, 0.34%)</title><rect x="14.0" y="995.0" width="3.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="17.0" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$269/1517074717.accept (4 samples, 0.34%)</title><rect x="14.0" y="979.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.0" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (4 samples, 0.34%)</title><rect x="14.0" y="963.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.0" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (4 samples, 0.34%)</title><rect x="14.0" y="947.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="17.0" y="958.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (4 samples, 0.34%)</title><rect x="14.0" y="931.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.0" y="942.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (198 samples, 16.62%)</title><rect x="17.9" y="1027.0" width="196.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.9" y="1038.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$268/1066121591.accept (194 samples, 16.29%)</title><rect x="18.9" y="1011.0" width="192.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.9" y="1022.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (193 samples, 16.20%)</title><rect x="19.9" y="995.0" width="191.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.9" y="1006.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (179 samples, 15.03%)</title><rect x="19.9" y="979.0" width="177.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.9" y="990.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (179 samples, 15.03%)</title><rect x="19.9" y="963.0" width="177.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="22.9" y="974.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (179 samples, 15.03%)</title><rect x="19.9" y="947.0" width="177.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.9" y="958.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (179 samples, 15.03%)</title><rect x="19.9" y="931.0" width="177.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="22.9" y="942.0">java/util/concurrent/Ex..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (179 samples, 15.03%)</title><rect x="19.9" y="915.0" width="177.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.9" y="926.0">java/util/concurrent/Th..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (154 samples, 12.93%)</title><rect x="44.7" y="899.0" width="152.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="47.7" y="910.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (127 samples, 10.66%)</title><rect x="46.7" y="883.0" width="125.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="49.7" y="894.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (127 samples, 10.66%)</title><rect x="46.7" y="867.0" width="125.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="49.7" y="878.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (127 samples, 10.66%)</title><rect x="46.7" y="851.0" width="125.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="49.7" y="862.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (127 samples, 10.66%)</title><rect x="46.7" y="835.0" width="125.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="49.7" y="846.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (127 samples, 10.66%)</title><rect x="46.7" y="819.0" width="125.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="49.7" y="830.0">java/util/concu..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (80 samples, 6.72%)</title><rect x="93.2" y="803.0" width="79.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="96.2" y="814.0">sun/misc/..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="94.2" y="787.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="97.2" y="798.0"></text>
</g>
<g>
<title>Unsafe_Unpark (71 samples, 5.96%)</title><rect x="95.2" y="787.0" width="70.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="98.2" y="798.0">Unsafe_U..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.17%)</title><rect x="97.2" y="771.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="100.2" y="782.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.17%)</title><rect x="99.2" y="771.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="102.2" y="782.0"></text>
</g>
<g>
<title>__pthread_cond_signal (44 samples, 3.69%)</title><rect x="101.2" y="771.0" width="43.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="104.2" y="782.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (6 samples, 0.50%)</title><rect x="144.7" y="771.0" width="6.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="147.7" y="782.0"></text>
</g>
<g>
<title>pthread_mutex_lock (15 samples, 1.26%)</title><rect x="150.7" y="771.0" width="14.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="153.7" y="782.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 0.42%)</title><rect x="165.5" y="787.0" width="5.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="168.5" y="798.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.17%)</title><rect x="170.5" y="787.0" width="2.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="173.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.08%)</title><rect x="172.5" y="883.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="175.5" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.08%)</title><rect x="172.5" y="867.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="175.5" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.08%)</title><rect x="172.5" y="851.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="175.5" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (24 samples, 2.02%)</title><rect x="173.5" y="883.0" width="23.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="176.5" y="894.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (24 samples, 2.02%)</title><rect x="173.5" y="867.0" width="23.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="176.5" y="878.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (24 samples, 2.02%)</title><rect x="173.5" y="851.0" width="23.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="176.5" y="862.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (24 samples, 2.02%)</title><rect x="173.5" y="835.0" width="23.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="176.5" y="846.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (9 samples, 0.76%)</title><rect x="197.3" y="979.0" width="8.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="200.3" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (9 samples, 0.76%)</title><rect x="197.3" y="963.0" width="8.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="200.3" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.17%)</title><rect x="204.2" y="947.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="207.2" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.17%)</title><rect x="204.2" y="931.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="207.2" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.17%)</title><rect x="204.2" y="915.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="207.2" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.17%)</title><rect x="204.2" y="899.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="207.2" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.17%)</title><rect x="204.2" y="883.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="207.2" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (2 samples, 0.17%)</title><rect x="206.2" y="979.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="209.2" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.17%)</title><rect x="206.2" y="963.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="209.2" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.17%)</title><rect x="206.2" y="947.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="209.2" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.25%)</title><rect x="208.2" y="979.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="211.2" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.25%)</title><rect x="208.2" y="963.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="211.2" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.25%)</title><rect x="208.2" y="947.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="211.2" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.25%)</title><rect x="208.2" y="931.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="211.2" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.25%)</title><rect x="208.2" y="915.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="211.2" y="926.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="211.1" y="1011.0" width="1.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="214.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.17%)</title><rect x="212.1" y="1011.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="215.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (2 samples, 0.17%)</title><rect x="212.1" y="995.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="215.1" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.17%)</title><rect x="212.1" y="979.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="215.1" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.17%)</title><rect x="212.1" y="963.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="215.1" y="974.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.08%)</title><rect x="213.1" y="947.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="216.1" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (73 samples, 6.13%)</title><rect x="214.1" y="1027.0" width="72.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="217.1" y="1038.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (72 samples, 6.05%)</title><rect x="214.1" y="1011.0" width="71.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="217.1" y="1022.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (37 samples, 3.11%)</title><rect x="214.1" y="995.0" width="36.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="217.1" y="1006.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (37 samples, 3.11%)</title><rect x="214.1" y="979.0" width="36.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="217.1" y="990.0">org..</text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.08%)</title><rect x="214.1" y="963.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="217.1" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="214.1" y="947.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="217.1" y="958.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.08%)</title><rect x="214.1" y="931.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="217.1" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (35 samples, 2.94%)</title><rect x="215.1" y="963.0" width="34.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="218.1" y="974.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (28 samples, 2.35%)</title><rect x="216.1" y="947.0" width="27.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="219.1" y="958.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (28 samples, 2.35%)</title><rect x="216.1" y="931.0" width="27.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="219.1" y="942.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (12 samples, 1.01%)</title><rect x="216.1" y="915.0" width="11.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="219.1" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.08%)</title><rect x="223.0" y="899.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="226.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.record (1 samples, 0.08%)</title><rect x="223.0" y="883.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="226.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$4100 (1 samples, 0.08%)</title><rect x="223.0" y="867.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="226.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordTopicFetchMetrics (1 samples, 0.08%)</title><rect x="223.0" y="851.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="226.0" y="862.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.08%)</title><rect x="223.0" y="835.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="226.0" y="846.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.08%)</title><rect x="223.0" y="819.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="226.0" y="830.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.08%)</title><rect x="223.0" y="803.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="226.0" y="814.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.08%)</title><rect x="223.0" y="787.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="226.0" y="798.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.08%)</title><rect x="223.0" y="771.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="226.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (3 samples, 0.25%)</title><rect x="224.0" y="899.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="227.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (3 samples, 0.25%)</title><rect x="224.0" y="883.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="227.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (3 samples, 0.25%)</title><rect x="224.0" y="867.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="227.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (3 samples, 0.25%)</title><rect x="224.0" y="851.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="227.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (3 samples, 0.25%)</title><rect x="224.0" y="835.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="227.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (3 samples, 0.25%)</title><rect x="224.0" y="819.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="227.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (3 samples, 0.25%)</title><rect x="224.0" y="803.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="227.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.streamingIterator (1 samples, 0.08%)</title><rect x="227.0" y="899.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="230.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (15 samples, 1.26%)</title><rect x="228.0" y="915.0" width="14.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="231.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (15 samples, 1.26%)</title><rect x="228.0" y="899.0" width="14.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="231.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (10 samples, 0.84%)</title><rect x="228.0" y="883.0" width="9.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="231.0" y="894.0"></text>
</g>
<g>
<title>java/util/Optional.of (10 samples, 0.84%)</title><rect x="228.0" y="867.0" width="9.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="231.0" y="878.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.25%)</title><rect x="234.9" y="851.0" width="3.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="237.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (5 samples, 0.42%)</title><rect x="237.9" y="883.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="240.9" y="894.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (5 samples, 0.42%)</title><rect x="237.9" y="867.0" width="4.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="240.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.08%)</title><rect x="242.8" y="915.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="245.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (4 samples, 0.34%)</title><rect x="243.8" y="947.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="246.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (4 samples, 0.34%)</title><rect x="243.8" y="931.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="246.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (2 samples, 0.17%)</title><rect x="243.8" y="915.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="246.8" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.17%)</title><rect x="243.8" y="899.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="246.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="245.8" y="915.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="248.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="245.8" y="899.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="248.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="245.8" y="883.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="248.8" y="894.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.08%)</title><rect x="246.8" y="883.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="249.8" y="894.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="246.8" y="867.0" width="1.0" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="249.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.08%)</title><rect x="247.8" y="947.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="250.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.08%)</title><rect x="247.8" y="931.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="250.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="247.8" y="915.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="250.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="247.8" y="899.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="250.8" y="910.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.08%)</title><rect x="247.8" y="883.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="250.8" y="894.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="247.8" y="867.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="250.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionLag (1 samples, 0.08%)</title><rect x="248.8" y="947.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="251.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.initializeCompletedFetch (1 samples, 0.08%)</title><rect x="249.8" y="963.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="252.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/MemoryRecords$$Lambda$282/1424945877.iterator (1 samples, 0.08%)</title><rect x="249.8" y="947.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="252.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (17 samples, 1.43%)</title><rect x="250.8" y="995.0" width="16.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="253.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (15 samples, 1.26%)</title><rect x="250.8" y="979.0" width="14.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="253.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (12 samples, 1.01%)</title><rect x="250.8" y="963.0" width="11.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="253.8" y="974.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (4 samples, 0.34%)</title><rect x="251.7" y="947.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="254.7" y="958.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.08%)</title><rect x="251.7" y="931.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="254.7" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.08%)</title><rect x="251.7" y="915.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="254.7" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="251.7" y="899.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="254.7" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="251.7" y="883.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="254.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$236/1271389189.accept (3 samples, 0.25%)</title><rect x="252.7" y="931.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="255.7" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (3 samples, 0.25%)</title><rect x="252.7" y="915.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="255.7" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.08%)</title><rect x="252.7" y="899.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="255.7" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (2 samples, 0.17%)</title><rect x="253.7" y="899.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="256.7" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.08%)</title><rect x="254.7" y="883.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="257.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.08%)</title><rect x="254.7" y="867.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="257.7" y="878.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.08%)</title><rect x="254.7" y="851.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="257.7" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="254.7" y="835.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="257.7" y="846.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.08%)</title><rect x="255.7" y="947.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="258.7" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.17%)</title><rect x="256.7" y="947.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="259.7" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.17%)</title><rect x="256.7" y="931.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="259.7" y="942.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.17%)</title><rect x="256.7" y="915.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="259.7" y="926.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.17%)</title><rect x="256.7" y="899.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="259.7" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.17%)</title><rect x="256.7" y="883.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="259.7" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.forEachRemaining (1 samples, 0.08%)</title><rect x="256.7" y="867.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="259.7" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="257.7" y="867.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="260.7" y="878.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$82/508223132.get (1 samples, 0.08%)</title><rect x="257.7" y="851.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="260.7" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.08%)</title><rect x="258.7" y="947.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="261.7" y="958.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.08%)</title><rect x="258.7" y="931.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="261.7" y="942.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.08%)</title><rect x="258.7" y="915.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="261.7" y="926.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.08%)</title><rect x="258.7" y="899.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="261.7" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.08%)</title><rect x="258.7" y="883.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="261.7" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="258.7" y="867.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="261.7" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.08%)</title><rect x="258.7" y="851.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="261.7" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (3 samples, 0.25%)</title><rect x="259.7" y="947.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="262.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (3 samples, 0.25%)</title><rect x="259.7" y="931.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="262.7" y="942.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.17%)</title><rect x="260.7" y="915.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="263.7" y="926.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.17%)</title><rect x="260.7" y="899.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="263.7" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.08%)</title><rect x="260.7" y="883.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="263.7" y="894.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.08%)</title><rect x="260.7" y="867.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="263.7" y="878.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.08%)</title><rect x="260.7" y="851.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="263.7" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.08%)</title><rect x="260.7" y="835.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="263.7" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="260.7" y="819.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="263.7" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="261.7" y="883.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="264.7" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="261.7" y="867.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="264.7" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="261.7" y="851.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="264.7" y="862.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.08%)</title><rect x="261.7" y="835.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="264.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (3 samples, 0.25%)</title><rect x="262.6" y="963.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="265.6" y="974.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (3 samples, 0.25%)</title><rect x="262.6" y="947.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="265.6" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.25%)</title><rect x="262.6" y="931.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="265.6" y="942.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (3 samples, 0.25%)</title><rect x="262.6" y="915.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="265.6" y="926.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (3 samples, 0.25%)</title><rect x="262.6" y="899.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="265.6" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.17%)</title><rect x="263.6" y="883.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="266.6" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.17%)</title><rect x="263.6" y="867.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="266.6" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (2 samples, 0.17%)</title><rect x="263.6" y="851.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="266.6" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (2 samples, 0.17%)</title><rect x="263.6" y="835.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="266.6" y="846.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (1 samples, 0.08%)</title><rect x="264.6" y="819.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="267.6" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.08%)</title><rect x="264.6" y="803.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="267.6" y="814.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.08%)</title><rect x="264.6" y="787.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="267.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$250/1248272928.test (1 samples, 0.08%)</title><rect x="264.6" y="771.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="267.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$hasAllFetchPositions$4 (1 samples, 0.08%)</title><rect x="264.6" y="755.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="267.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (2 samples, 0.17%)</title><rect x="265.6" y="979.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="268.6" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (2 samples, 0.17%)</title><rect x="265.6" y="963.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="268.6" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (2 samples, 0.17%)</title><rect x="265.6" y="947.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="268.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (2 samples, 0.17%)</title><rect x="265.6" y="931.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="268.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (2 samples, 0.17%)</title><rect x="265.6" y="915.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="268.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (2 samples, 0.17%)</title><rect x="265.6" y="899.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="268.6" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.17%)</title><rect x="265.6" y="883.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="268.6" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.17%)</title><rect x="265.6" y="867.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="268.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (7 samples, 0.59%)</title><rect x="267.6" y="995.0" width="6.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="270.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (5 samples, 0.42%)</title><rect x="267.6" y="979.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="270.6" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.completeResponses (1 samples, 0.08%)</title><rect x="267.6" y="963.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="270.6" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClientResponse.onComplete (1 samples, 0.08%)</title><rect x="267.6" y="947.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="270.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.onComplete (1 samples, 0.08%)</title><rect x="267.6" y="931.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="270.6" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.add (1 samples, 0.08%)</title><rect x="267.6" y="915.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="270.6" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.offer (1 samples, 0.08%)</title><rect x="267.6" y="899.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="270.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (4 samples, 0.34%)</title><rect x="268.6" y="963.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="271.6" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="268.6" y="947.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="271.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="268.6" y="931.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="271.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (3 samples, 0.25%)</title><rect x="269.6" y="947.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="272.6" y="958.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1967410333.linkToTargetMethod (1 samples, 0.08%)</title><rect x="269.6" y="931.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="272.6" y="942.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/2079866967.invokeStatic_JJ_L (1 samples, 0.08%)</title><rect x="269.6" y="915.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="272.6" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.08%)</title><rect x="270.6" y="931.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="273.6" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.08%)</title><rect x="270.6" y="915.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="273.6" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="270.6" y="899.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="273.6" y="910.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="270.6" y="883.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="273.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.maybeRegisterConnectionMetrics (1 samples, 0.08%)</title><rect x="271.6" y="931.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="274.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.08%)</title><rect x="271.6" y="915.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="274.6" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.08%)</title><rect x="271.6" y="899.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="274.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.17%)</title><rect x="272.6" y="979.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="275.6" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (2 samples, 0.17%)</title><rect x="272.6" y="963.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="275.6" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.17%)</title><rect x="272.6" y="947.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="275.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.17%)</title><rect x="272.6" y="931.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="275.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (2 samples, 0.17%)</title><rect x="272.6" y="915.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="275.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (2 samples, 0.17%)</title><rect x="272.6" y="899.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="275.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (2 samples, 0.17%)</title><rect x="272.6" y="883.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="275.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (2 samples, 0.17%)</title><rect x="272.6" y="867.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="275.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (2 samples, 0.17%)</title><rect x="272.6" y="851.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="275.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.write (1 samples, 0.08%)</title><rect x="272.6" y="835.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="275.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.08%)</title><rect x="272.6" y="819.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="275.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.write (1 samples, 0.08%)</title><rect x="272.6" y="803.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="275.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.08%)</title><rect x="272.6" y="787.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="275.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$6.write (1 samples, 0.08%)</title><rect x="272.6" y="771.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="275.6" y="782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.putLong (1 samples, 0.08%)</title><rect x="272.6" y="755.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="275.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$4.write (1 samples, 0.08%)</title><rect x="273.5" y="835.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="276.5" y="846.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.putInt (1 samples, 0.08%)</title><rect x="273.5" y="819.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="276.5" y="830.0"></text>
</g>
<g>
<title>java/nio/Bits.putInt (1 samples, 0.08%)</title><rect x="273.5" y="803.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="276.5" y="814.0"></text>
</g>
<g>
<title>java/nio/Bits.putIntB (1 samples, 0.08%)</title><rect x="273.5" y="787.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="276.5" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer._put (1 samples, 0.08%)</title><rect x="273.5" y="771.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="276.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (7 samples, 0.59%)</title><rect x="274.5" y="995.0" width="7.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="277.5" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (7 samples, 0.59%)</title><rect x="274.5" y="979.0" width="7.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="277.5" y="990.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.08%)</title><rect x="274.5" y="963.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="277.5" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$260/1507470912.accept (1 samples, 0.08%)</title><rect x="274.5" y="947.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="277.5" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.08%)</title><rect x="274.5" y="931.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="277.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.08%)</title><rect x="274.5" y="915.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="277.5" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.08%)</title><rect x="274.5" y="899.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="277.5" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.08%)</title><rect x="274.5" y="883.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="277.5" y="894.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.08%)</title><rect x="274.5" y="867.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="277.5" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="274.5" y="851.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="277.5" y="862.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.08%)</title><rect x="275.5" y="963.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="278.5" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.08%)</title><rect x="275.5" y="947.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="278.5" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="275.5" y="931.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="278.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (2 samples, 0.17%)</title><rect x="276.5" y="963.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="279.5" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (2 samples, 0.17%)</title><rect x="276.5" y="947.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="279.5" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (2 samples, 0.17%)</title><rect x="276.5" y="931.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="279.5" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.17%)</title><rect x="276.5" y="915.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="279.5" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.17%)</title><rect x="276.5" y="899.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="279.5" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 0.17%)</title><rect x="278.5" y="963.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="281.5" y="974.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.17%)</title><rect x="278.5" y="947.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="281.5" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.08%)</title><rect x="279.5" y="931.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="282.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.08%)</title><rect x="280.5" y="963.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="283.5" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (4 samples, 0.34%)</title><rect x="281.5" y="995.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="284.5" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (4 samples, 0.34%)</title><rect x="281.5" y="979.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="284.5" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (4 samples, 0.34%)</title><rect x="281.5" y="963.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="284.5" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.25%)</title><rect x="282.5" y="947.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="285.5" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.08%)</title><rect x="282.5" y="931.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="285.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/MetricConfig.quota (1 samples, 0.08%)</title><rect x="282.5" y="915.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="285.5" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (2 samples, 0.17%)</title><rect x="283.5" y="931.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="286.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.08%)</title><rect x="284.4" y="915.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="287.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Max.update (1 samples, 0.08%)</title><rect x="284.4" y="899.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="287.4" y="910.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.08%)</title><rect x="285.4" y="1011.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="288.4" y="1022.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="285.4" y="995.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="288.4" y="1006.0"></text>
</g>
<g>
<title>java/lang/Thread.run (845 samples, 70.95%)</title><rect x="286.4" y="1059.0" width="837.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="289.4" y="1070.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (845 samples, 70.95%)</title><rect x="286.4" y="1043.0" width="837.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="289.4" y="1054.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (845 samples, 70.95%)</title><rect x="286.4" y="1027.0" width="837.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="289.4" y="1038.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$288/1691975449.run (585 samples, 49.12%)</title><rect x="287.4" y="1011.0" width="579.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="290.4" y="1022.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$288/169197..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62 (585 samples, 49.12%)</title><rect x="287.4" y="995.0" width="579.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="290.4" y="1006.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (585 samples, 49.12%)</title><rect x="287.4" y="979.0" width="579.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="290.4" y="990.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>[vdso] (2 samples, 0.17%)</title><rect x="291.4" y="963.0" width="2.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="294.4" y="974.0"></text>
</g>
<g>
<title>__clock_gettime (12 samples, 1.01%)</title><rect x="293.4" y="963.0" width="11.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="296.4" y="974.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.76%)</title><rect x="296.3" y="947.0" width="8.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="299.3" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (565 samples, 47.44%)</title><rect x="305.2" y="963.0" width="559.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="308.2" y="974.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenP..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.maybeDirty (2 samples, 0.17%)</title><rect x="312.2" y="947.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="315.2" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (4 samples, 0.34%)</title><rect x="314.2" y="947.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="317.2" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (4 samples, 0.34%)</title><rect x="314.2" y="931.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="317.2" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.34%)</title><rect x="314.2" y="915.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="317.2" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="314.2" y="899.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="317.2" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.25%)</title><rect x="315.2" y="899.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="318.2" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (43 samples, 3.61%)</title><rect x="318.1" y="947.0" width="42.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="321.1" y="958.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (2 samples, 0.17%)</title><rect x="329.0" y="931.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="332.0" y="942.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/260840925.linkToTargetMethod (1 samples, 0.08%)</title><rect x="331.0" y="931.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="334.0" y="942.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/205962452.invokeStatic_L_L (1 samples, 0.08%)</title><rect x="331.0" y="915.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="334.0" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$300/2017016862.get$Lambda (1 samples, 0.08%)</title><rect x="331.0" y="899.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="334.0" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="331.0" y="883.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="334.0" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="331.0" y="867.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="334.0" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="331.0" y="851.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="334.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (29 samples, 2.43%)</title><rect x="332.0" y="931.0" width="28.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="335.0" y="942.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (29 samples, 2.43%)</title><rect x="332.0" y="915.0" width="28.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="335.0" y="926.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (29 samples, 2.43%)</title><rect x="332.0" y="899.0" width="28.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="335.0" y="910.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.17%)</title><rect x="332.0" y="883.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="335.0" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.17%)</title><rect x="332.0" y="867.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="335.0" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 0.17%)</title><rect x="332.0" y="851.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="335.0" y="862.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="333.0" y="835.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="336.0" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (27 samples, 2.27%)</title><rect x="334.0" y="883.0" width="26.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="337.0" y="894.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$300/2017016862.accept (27 samples, 2.27%)</title><rect x="334.0" y="867.0" width="26.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="337.0" y="878.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (27 samples, 2.27%)</title><rect x="334.0" y="851.0" width="26.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="337.0" y="862.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (27 samples, 2.27%)</title><rect x="334.0" y="835.0" width="26.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="337.0" y="846.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (27 samples, 2.27%)</title><rect x="334.0" y="819.0" width="26.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="337.0" y="830.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (27 samples, 2.27%)</title><rect x="334.0" y="803.0" width="26.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="337.0" y="814.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (12 samples, 1.01%)</title><rect x="334.0" y="787.0" width="11.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="337.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (12 samples, 1.01%)</title><rect x="334.0" y="771.0" width="11.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="337.0" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$286/1072393613.accept (3 samples, 0.25%)</title><rect x="339.9" y="755.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="342.9" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$285/1759298694.accept (3 samples, 0.25%)</title><rect x="342.9" y="755.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="345.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (15 samples, 1.26%)</title><rect x="345.9" y="787.0" width="14.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="348.9" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$285/1759298694.accept (1 samples, 0.08%)</title><rect x="359.7" y="771.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="362.7" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ExecutionScheduler.schedule (1 samples, 0.08%)</title><rect x="360.7" y="947.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="363.7" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ExecutionScheduler.waitOnScheduledTime (1 samples, 0.08%)</title><rect x="360.7" y="931.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="363.7" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ExecutionScheduler$$Lambda$203/1021100561.get (1 samples, 0.08%)</title><rect x="360.7" y="915.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="363.7" y="926.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.08%)</title><rect x="360.7" y="899.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="363.7" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="360.7" y="883.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="363.7" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (175 samples, 14.69%)</title><rect x="361.7" y="947.0" width="173.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="364.7" y="958.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$45/1556995360.extract (175 samples, 14.69%)</title><rect x="361.7" y="931.0" width="173.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="364.7" y="942.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (175 samples, 14.69%)</title><rect x="361.7" y="915.0" width="173.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="364.7" y="926.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.17%)</title><rect x="361.7" y="899.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="364.7" y="910.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.17%)</title><rect x="361.7" y="883.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="364.7" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.17%)</title><rect x="361.7" y="867.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="364.7" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (2 samples, 0.17%)</title><rect x="361.7" y="851.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="364.7" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (173 samples, 14.53%)</title><rect x="363.7" y="899.0" width="171.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="366.7" y="910.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (173 samples, 14.53%)</title><rect x="363.7" y="883.0" width="171.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="366.7" y="894.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (173 samples, 14.53%)</title><rect x="363.7" y="867.0" width="171.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="366.7" y="878.0">com/fasterxml/jackson/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (51 samples, 4.28%)</title><rect x="363.7" y="851.0" width="50.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="366.7" y="862.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (17 samples, 1.43%)</title><rect x="363.7" y="835.0" width="16.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="366.7" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (17 samples, 1.43%)</title><rect x="363.7" y="819.0" width="16.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="366.7" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (11 samples, 0.92%)</title><rect x="363.7" y="803.0" width="10.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="366.7" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.getMask (2 samples, 0.17%)</title><rect x="372.6" y="787.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="375.6" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.getMask (1 samples, 0.08%)</title><rect x="374.6" y="803.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="377.6" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (5 samples, 0.42%)</title><rect x="375.6" y="803.0" width="4.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="378.6" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.42%)</title><rect x="375.6" y="787.0" width="4.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="378.6" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (5 samples, 0.42%)</title><rect x="375.6" y="771.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="378.6" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 0.42%)</title><rect x="375.6" y="755.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="378.6" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (5 samples, 0.42%)</title><rect x="375.6" y="739.0" width="4.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="378.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (34 samples, 2.85%)</title><rect x="380.5" y="835.0" width="33.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="383.5" y="846.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (34 samples, 2.85%)</title><rect x="380.5" y="819.0" width="33.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="383.5" y="830.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (3 samples, 0.25%)</title><rect x="380.5" y="803.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="383.5" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.getMask (1 samples, 0.08%)</title><rect x="381.5" y="787.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="384.5" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.setEncoding (1 samples, 0.08%)</title><rect x="382.5" y="787.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="385.5" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (13 samples, 1.09%)</title><rect x="383.5" y="803.0" width="12.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="386.5" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.setEncoding (3 samples, 0.25%)</title><rect x="389.5" y="787.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="392.5" y="798.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (2 samples, 0.17%)</title><rect x="390.5" y="771.0" width="1.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="393.5" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.checkUTF16 (1 samples, 0.08%)</title><rect x="392.4" y="787.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="395.4" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.checkUTF32 (1 samples, 0.08%)</title><rect x="393.4" y="787.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="396.4" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.08%)</title><rect x="394.4" y="787.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="397.4" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.08%)</title><rect x="395.4" y="787.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="398.4" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (11 samples, 0.92%)</title><rect x="396.4" y="803.0" width="10.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="399.4" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (7 samples, 0.59%)</title><rect x="400.4" y="787.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="403.4" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (7 samples, 0.59%)</title><rect x="400.4" y="771.0" width="6.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="403.4" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (7 samples, 0.59%)</title><rect x="407.3" y="803.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="410.3" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (1 samples, 0.08%)</title><rect x="413.2" y="787.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="416.2" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (109 samples, 9.15%)</title><rect x="414.2" y="851.0" width="108.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="417.2" y="862.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (3 samples, 0.25%)</title><rect x="414.2" y="835.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="417.2" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (3 samples, 0.25%)</title><rect x="414.2" y="819.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="417.2" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (3 samples, 0.25%)</title><rect x="414.2" y="803.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="417.2" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (2 samples, 0.17%)</title><rect x="414.2" y="787.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="417.2" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (1 samples, 0.08%)</title><rect x="416.2" y="787.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="419.2" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (8 samples, 0.67%)</title><rect x="417.2" y="835.0" width="7.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="420.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (8 samples, 0.67%)</title><rect x="417.2" y="819.0" width="7.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="420.2" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.17%)</title><rect x="423.1" y="803.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="426.1" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (10 samples, 0.84%)</title><rect x="425.1" y="835.0" width="9.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="428.1" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (8 samples, 0.67%)</title><rect x="427.1" y="819.0" width="7.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="430.1" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (2 samples, 0.17%)</title><rect x="427.1" y="803.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="430.1" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (3 samples, 0.25%)</title><rect x="429.1" y="803.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="432.1" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.08%)</title><rect x="431.1" y="787.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="434.1" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 0.25%)</title><rect x="432.1" y="803.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="435.1" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (3 samples, 0.25%)</title><rect x="432.1" y="787.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="435.1" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.17%)</title><rect x="433.1" y="771.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="436.1" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (6 samples, 0.50%)</title><rect x="435.0" y="835.0" width="6.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="438.0" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (4 samples, 0.34%)</title><rect x="437.0" y="819.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="440.0" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (82 samples, 6.88%)</title><rect x="441.0" y="835.0" width="81.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="444.0" y="846.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (82 samples, 6.88%)</title><rect x="441.0" y="819.0" width="81.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="444.0" y="830.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (23 samples, 1.93%)</title><rect x="441.0" y="803.0" width="22.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="444.0" y="814.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.08%)</title><rect x="444.9" y="787.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="447.9" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (8 samples, 0.67%)</title><rect x="445.9" y="787.0" width="8.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="448.9" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (8 samples, 0.67%)</title><rect x="445.9" y="771.0" width="8.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="448.9" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (8 samples, 0.67%)</title><rect x="445.9" y="755.0" width="8.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="448.9" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (8 samples, 0.67%)</title><rect x="445.9" y="739.0" width="8.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="448.9" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.17%)</title><rect x="451.9" y="723.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="454.9" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (10 samples, 0.84%)</title><rect x="453.9" y="787.0" width="9.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="456.9" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (5 samples, 0.42%)</title><rect x="453.9" y="771.0" width="4.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="456.9" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (5 samples, 0.42%)</title><rect x="458.8" y="771.0" width="5.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="461.8" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (5 samples, 0.42%)</title><rect x="458.8" y="755.0" width="5.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="461.8" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (3 samples, 0.25%)</title><rect x="460.8" y="739.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="463.8" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (3 samples, 0.25%)</title><rect x="460.8" y="723.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="463.8" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (59 samples, 4.95%)</title><rect x="463.8" y="803.0" width="58.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="466.8" y="814.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (59 samples, 4.95%)</title><rect x="463.8" y="787.0" width="58.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="466.8" y="798.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (59 samples, 4.95%)</title><rect x="463.8" y="771.0" width="58.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="466.8" y="782.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (27 samples, 2.27%)</title><rect x="466.7" y="755.0" width="26.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="469.7" y="766.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (2 samples, 0.17%)</title><rect x="468.7" y="739.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="471.7" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.17%)</title><rect x="470.7" y="739.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="473.7" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (10 samples, 0.84%)</title><rect x="472.7" y="739.0" width="9.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="475.7" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (10 samples, 0.84%)</title><rect x="472.7" y="723.0" width="9.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="475.7" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (10 samples, 0.84%)</title><rect x="472.7" y="707.0" width="9.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="475.7" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.08%)</title><rect x="473.7" y="691.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="476.7" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (8 samples, 0.67%)</title><rect x="474.7" y="691.0" width="7.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="477.7" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (6 samples, 0.50%)</title><rect x="474.7" y="675.0" width="5.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="477.7" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (3 samples, 0.25%)</title><rect x="477.6" y="659.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="480.6" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (3 samples, 0.25%)</title><rect x="477.6" y="643.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="480.6" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.17%)</title><rect x="480.6" y="675.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="483.6" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (4 samples, 0.34%)</title><rect x="482.6" y="739.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="485.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (3 samples, 0.25%)</title><rect x="482.6" y="723.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="485.6" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.08%)</title><rect x="485.6" y="723.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="488.6" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.08%)</title><rect x="485.6" y="707.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="488.6" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.17%)</title><rect x="486.6" y="739.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="489.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.17%)</title><rect x="486.6" y="723.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="489.6" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (5 samples, 0.42%)</title><rect x="488.5" y="739.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="491.5" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (7 samples, 0.59%)</title><rect x="493.5" y="755.0" width="6.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="496.5" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (7 samples, 0.59%)</title><rect x="493.5" y="739.0" width="6.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="496.5" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (7 samples, 0.59%)</title><rect x="493.5" y="723.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="496.5" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (7 samples, 0.59%)</title><rect x="493.5" y="707.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="496.5" y="718.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (7 samples, 0.59%)</title><rect x="493.5" y="691.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="496.5" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (13 samples, 1.09%)</title><rect x="500.4" y="755.0" width="12.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="503.4" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (13 samples, 1.09%)</title><rect x="500.4" y="739.0" width="12.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="503.4" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (13 samples, 1.09%)</title><rect x="500.4" y="723.0" width="12.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="503.4" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (13 samples, 1.09%)</title><rect x="500.4" y="707.0" width="12.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="503.4" y="718.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (13 samples, 1.09%)</title><rect x="500.4" y="691.0" width="12.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="503.4" y="702.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (10 samples, 0.84%)</title><rect x="502.4" y="675.0" width="9.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="505.4" y="686.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (3 samples, 0.25%)</title><rect x="509.3" y="659.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="512.3" y="670.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (1 samples, 0.08%)</title><rect x="512.3" y="675.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="515.3" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.08%)</title><rect x="513.3" y="755.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="516.3" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="513.3" y="739.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="516.3" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="513.3" y="723.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="516.3" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (8 samples, 0.67%)</title><rect x="514.3" y="755.0" width="7.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="517.3" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.08%)</title><rect x="521.2" y="739.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="524.2" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="521.2" y="723.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="524.2" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="521.2" y="707.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="524.2" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="521.2" y="691.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="524.2" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (13 samples, 1.09%)</title><rect x="522.2" y="851.0" width="12.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="525.2" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (13 samples, 1.09%)</title><rect x="522.2" y="835.0" width="12.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="525.2" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (13 samples, 1.09%)</title><rect x="522.2" y="819.0" width="12.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="525.2" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (13 samples, 1.09%)</title><rect x="522.2" y="803.0" width="12.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="525.2" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (4 samples, 0.34%)</title><rect x="527.2" y="787.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="530.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.34%)</title><rect x="531.1" y="787.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="534.1" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (322 samples, 27.04%)</title><rect x="535.1" y="947.0" width="319.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="538.1" y="958.0">com/linecorp/decaton/processor/runtime/inte..</text>
</g>
<g>
<title>__clock_gettime (9 samples, 0.76%)</title><rect x="547.0" y="931.0" width="8.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="550.0" y="942.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.67%)</title><rect x="548.0" y="915.0" width="7.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="551.0" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (52 samples, 4.37%)</title><rect x="555.9" y="931.0" width="51.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="558.9" y="942.0">com/l..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (52 samples, 4.37%)</title><rect x="555.9" y="915.0" width="51.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="558.9" y="926.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (47 samples, 3.95%)</title><rect x="560.9" y="899.0" width="46.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="563.9" y="910.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 0.42%)</title><rect x="562.8" y="883.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="565.8" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.42%)</title><rect x="562.8" y="867.0" width="5.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="565.8" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 0.42%)</title><rect x="562.8" y="851.0" width="5.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="565.8" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.42%)</title><rect x="562.8" y="835.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="565.8" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.34%)</title><rect x="567.8" y="883.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="570.8" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 0.34%)</title><rect x="567.8" y="867.0" width="4.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="570.8" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.34%)</title><rect x="567.8" y="851.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="570.8" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (4 samples, 0.34%)</title><rect x="567.8" y="835.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="570.8" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (3 samples, 0.25%)</title><rect x="568.8" y="819.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="571.8" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (36 samples, 3.02%)</title><rect x="571.8" y="883.0" width="35.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="574.8" y="894.0">jav..</text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.08%)</title><rect x="594.6" y="867.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="597.6" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (12 samples, 1.01%)</title><rect x="595.5" y="867.0" width="11.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="598.5" y="878.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.17%)</title><rect x="596.5" y="851.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="599.5" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.17%)</title><rect x="598.5" y="851.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="601.5" y="862.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.08%)</title><rect x="598.5" y="835.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="601.5" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.08%)</title><rect x="599.5" y="835.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="602.5" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (7 samples, 0.59%)</title><rect x="600.5" y="851.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="603.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (7 samples, 0.59%)</title><rect x="600.5" y="835.0" width="6.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="603.5" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (8 samples, 0.67%)</title><rect x="607.4" y="931.0" width="8.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="610.4" y="942.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (8 samples, 0.67%)</title><rect x="607.4" y="915.0" width="8.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="610.4" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (158 samples, 13.27%)</title><rect x="615.4" y="931.0" width="156.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="618.4" y="942.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (155 samples, 13.01%)</title><rect x="615.4" y="915.0" width="153.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="618.4" y="926.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (50 samples, 4.20%)</title><rect x="627.2" y="899.0" width="49.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="630.2" y="910.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (22 samples, 1.85%)</title><rect x="638.1" y="883.0" width="21.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="641.1" y="894.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (20 samples, 1.68%)</title><rect x="640.1" y="867.0" width="19.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="643.1" y="878.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (8 samples, 0.67%)</title><rect x="649.0" y="851.0" width="8.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="652.0" y="862.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (8 samples, 0.67%)</title><rect x="649.0" y="835.0" width="8.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="652.0" y="846.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (8 samples, 0.67%)</title><rect x="649.0" y="819.0" width="8.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="652.0" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (7 samples, 0.59%)</title><rect x="649.0" y="803.0" width="7.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="652.0" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.25%)</title><rect x="649.0" y="787.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="652.0" y="798.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.25%)</title><rect x="649.0" y="771.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="652.0" y="782.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.17%)</title><rect x="650.0" y="755.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="653.0" y="766.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="651.0" y="739.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="654.0" y="750.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="651.0" y="723.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="654.0" y="734.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.34%)</title><rect x="652.0" y="787.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="655.0" y="798.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.08%)</title><rect x="653.0" y="771.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="656.0" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.17%)</title><rect x="654.0" y="771.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="657.0" y="782.0"></text>
</g>
<g>
<title>_new_array_nozero_Java (1 samples, 0.08%)</title><rect x="656.0" y="803.0" width="1.0" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="659.0" y="814.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.08%)</title><rect x="657.0" y="851.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="660.0" y="862.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.17%)</title><rect x="658.0" y="851.0" width="1.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="661.0" y="862.0"></text>
</g>
<g>
<title>jshort_arraycopy (3 samples, 0.25%)</title><rect x="659.9" y="883.0" width="3.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="662.9" y="894.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (14 samples, 1.18%)</title><rect x="662.9" y="883.0" width="13.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="665.9" y="894.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (7 samples, 0.59%)</title><rect x="676.8" y="899.0" width="6.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="679.8" y="910.0"></text>
</g>
<g>
<title>java/lang/Long.toString (7 samples, 0.59%)</title><rect x="676.8" y="883.0" width="6.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="679.8" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="676.8" y="867.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="679.8" y="878.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="676.8" y="851.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="679.8" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.08%)</title><rect x="676.8" y="835.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="679.8" y="846.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (6 samples, 0.50%)</title><rect x="677.8" y="867.0" width="5.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="680.8" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="682.7" y="851.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="685.7" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="682.7" y="835.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="685.7" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="682.7" y="819.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="685.7" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="682.7" y="803.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="685.7" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="682.7" y="787.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="685.7" y="798.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (86 samples, 7.22%)</title><rect x="683.7" y="899.0" width="85.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="686.7" y="910.0">org/slf4j/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (84 samples, 7.05%)</title><rect x="685.7" y="883.0" width="83.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="688.7" y="894.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 0.25%)</title><rect x="685.7" y="867.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="688.7" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 0.25%)</title><rect x="685.7" y="851.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="688.7" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 0.25%)</title><rect x="685.7" y="835.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="688.7" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 0.25%)</title><rect x="685.7" y="819.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="688.7" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="688.7" y="867.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="691.7" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="688.7" y="851.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="691.7" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="688.7" y="835.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="691.7" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.08%)</title><rect x="688.7" y="819.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="691.7" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="688.7" y="803.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="691.7" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (80 samples, 6.72%)</title><rect x="689.7" y="867.0" width="79.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="692.7" y="878.0">java/util..</text>
</g>
<g>
<title>java/util/HashMap.put (73 samples, 6.13%)</title><rect x="696.6" y="851.0" width="72.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="699.6" y="862.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.putVal (37 samples, 3.11%)</title><rect x="732.3" y="835.0" width="36.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="735.3" y="846.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.08%)</title><rect x="748.1" y="819.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="751.1" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (19 samples, 1.60%)</title><rect x="749.1" y="819.0" width="18.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="752.1" y="830.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.08%)</title><rect x="767.9" y="819.0" width="1.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="770.9" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (3 samples, 0.25%)</title><rect x="768.9" y="915.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="771.9" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (3 samples, 0.25%)</title><rect x="768.9" y="899.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="771.9" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.25%)</title><rect x="768.9" y="883.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="771.9" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.25%)</title><rect x="768.9" y="867.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="771.9" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (63 samples, 5.29%)</title><rect x="771.9" y="931.0" width="62.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="774.9" y="942.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (63 samples, 5.29%)</title><rect x="771.9" y="915.0" width="62.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="774.9" y="926.0">com/li..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="772.9" y="899.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="775.9" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="772.9" y="883.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="775.9" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="772.9" y="867.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="775.9" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="772.9" y="851.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="775.9" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="772.9" y="835.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="775.9" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="772.9" y="819.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="775.9" y="830.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.08%)</title><rect x="772.9" y="803.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="775.9" y="814.0"></text>
</g>
<g>
<title>SurvRateGroup::next_age_index() (1 samples, 0.08%)</title><rect x="772.9" y="787.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="775.9" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$209/787971479.process (34 samples, 2.85%)</title><rect x="773.9" y="899.0" width="33.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="776.9" y="910.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (34 samples, 2.85%)</title><rect x="773.9" y="883.0" width="33.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="776.9" y="894.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (28 samples, 2.35%)</title><rect x="775.9" y="867.0" width="27.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="778.9" y="878.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (4 samples, 0.34%)</title><rect x="788.7" y="851.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="791.7" y="862.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (4 samples, 0.34%)</title><rect x="788.7" y="835.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="791.7" y="846.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (4 samples, 0.34%)</title><rect x="788.7" y="819.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="791.7" y="830.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (4 samples, 0.34%)</title><rect x="788.7" y="803.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="791.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (4 samples, 0.34%)</title><rect x="788.7" y="787.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="791.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.08%)</title><rect x="791.7" y="771.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="794.7" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (8 samples, 0.67%)</title><rect x="792.7" y="851.0" width="7.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="795.7" y="862.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="794.7" y="835.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="797.7" y="846.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.08%)</title><rect x="794.7" y="819.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="797.7" y="830.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.42%)</title><rect x="795.7" y="835.0" width="4.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="798.7" y="846.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.42%)</title><rect x="795.7" y="819.0" width="4.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="798.7" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.08%)</title><rect x="800.6" y="851.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="803.6" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.17%)</title><rect x="801.6" y="851.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="804.6" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.17%)</title><rect x="801.6" y="835.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="804.6" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.17%)</title><rect x="801.6" y="819.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="804.6" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (4 samples, 0.34%)</title><rect x="803.6" y="867.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="806.6" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.34%)</title><rect x="803.6" y="851.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="806.6" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 0.34%)</title><rect x="803.6" y="835.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="806.6" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.34%)</title><rect x="803.6" y="819.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="806.6" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (4 samples, 0.34%)</title><rect x="803.6" y="803.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="806.6" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (6 samples, 0.50%)</title><rect x="807.6" y="899.0" width="5.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="810.6" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (6 samples, 0.50%)</title><rect x="807.6" y="883.0" width="5.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="810.6" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (6 samples, 0.50%)</title><rect x="807.6" y="867.0" width="5.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="810.6" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (6 samples, 0.50%)</title><rect x="807.6" y="851.0" width="5.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="810.6" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (6 samples, 0.50%)</title><rect x="807.6" y="835.0" width="5.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="810.6" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 0.50%)</title><rect x="807.6" y="819.0" width="5.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="810.6" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$209/787971479.process (2 samples, 0.17%)</title><rect x="811.5" y="803.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="814.5" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.42%)</title><rect x="813.5" y="899.0" width="5.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="816.5" y="910.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.34%)</title><rect x="814.5" y="883.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="817.5" y="894.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.08%)</title><rect x="818.5" y="899.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="821.5" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.08%)</title><rect x="818.5" y="883.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="821.5" y="894.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.42%)</title><rect x="819.5" y="899.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="822.5" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 0.25%)</title><rect x="821.4" y="883.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="824.4" y="894.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.25%)</title><rect x="821.4" y="867.0" width="3.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="824.4" y="878.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.17%)</title><rect x="824.4" y="899.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="827.4" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.17%)</title><rect x="824.4" y="883.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="827.4" y="894.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (5 samples, 0.42%)</title><rect x="826.4" y="899.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="829.4" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="828.4" y="883.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="831.4" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="828.4" y="867.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="831.4" y="878.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.17%)</title><rect x="829.4" y="883.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="832.4" y="894.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.08%)</title><rect x="830.4" y="867.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="833.4" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="830.4" y="851.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="833.4" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="830.4" y="835.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="833.4" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="830.4" y="819.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="833.4" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="830.4" y="803.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="833.4" y="814.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="830.4" y="787.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="833.4" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.08%)</title><rect x="830.4" y="771.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="833.4" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.25%)</title><rect x="831.3" y="899.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="834.3" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.25%)</title><rect x="831.3" y="883.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="834.3" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.25%)</title><rect x="831.3" y="867.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="834.3" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.25%)</title><rect x="831.3" y="851.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="834.3" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (3 samples, 0.25%)</title><rect x="831.3" y="835.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="834.3" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (3 samples, 0.25%)</title><rect x="831.3" y="819.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="834.3" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$295/1496041834.accept (2 samples, 0.17%)</title><rect x="832.3" y="803.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="835.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (20 samples, 1.68%)</title><rect x="834.3" y="931.0" width="19.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="837.3" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (20 samples, 1.68%)</title><rect x="834.3" y="915.0" width="19.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="837.3" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (20 samples, 1.68%)</title><rect x="834.3" y="899.0" width="19.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="837.3" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (6 samples, 0.50%)</title><rect x="834.3" y="883.0" width="6.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="837.3" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (6 samples, 0.50%)</title><rect x="834.3" y="867.0" width="6.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="837.3" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (6 samples, 0.50%)</title><rect x="834.3" y="851.0" width="6.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="837.3" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$297/692370070.accept (3 samples, 0.25%)</title><rect x="836.3" y="835.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="839.3" y="846.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="839.3" y="835.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="842.3" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (14 samples, 1.18%)</title><rect x="840.3" y="883.0" width="13.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="843.3" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$297/692370070.accept (14 samples, 1.18%)</title><rect x="840.3" y="867.0" width="13.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="843.3" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="840.3" y="851.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="843.3" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="840.3" y="835.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="843.3" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$57 (13 samples, 1.09%)</title><rect x="841.3" y="851.0" width="12.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="844.3" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (13 samples, 1.09%)</title><rect x="841.3" y="835.0" width="12.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="844.3" y="846.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (13 samples, 1.09%)</title><rect x="841.3" y="819.0" width="12.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="844.3" y="830.0"></text>
</g>
<g>
<title>java/time/Duration.create (13 samples, 1.09%)</title><rect x="841.3" y="803.0" width="12.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="844.3" y="814.0"></text>
</g>
<g>
<title>__clock_gettime (9 samples, 0.76%)</title><rect x="845.2" y="787.0" width="8.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="848.2" y="798.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.50%)</title><rect x="848.2" y="771.0" width="5.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="851.2" y="782.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (11 samples, 0.92%)</title><rect x="854.1" y="947.0" width="10.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="857.1" y="958.0"></text>
</g>
<g>
<title>[vdso] (10 samples, 0.84%)</title><rect x="855.1" y="931.0" width="9.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="858.1" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.08%)</title><rect x="865.0" y="963.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="868.0" y="974.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.08%)</title><rect x="865.0" y="947.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="868.0" y="958.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.08%)</title><rect x="865.0" y="931.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="868.0" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (1 samples, 0.08%)</title><rect x="866.0" y="963.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="869.0" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (18 samples, 1.51%)</title><rect x="867.0" y="1011.0" width="17.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="870.0" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (18 samples, 1.51%)</title><rect x="867.0" y="995.0" width="17.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="870.0" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (18 samples, 1.51%)</title><rect x="867.0" y="979.0" width="17.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="870.0" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (18 samples, 1.51%)</title><rect x="867.0" y="963.0" width="17.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="870.0" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="879.9" y="947.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="882.9" y="958.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="879.9" y="931.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="882.9" y="942.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.17%)</title><rect x="880.9" y="947.0" width="2.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="883.9" y="958.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.17%)</title><rect x="880.9" y="931.0" width="2.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="883.9" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (2 samples, 0.17%)</title><rect x="882.9" y="947.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="885.9" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (241 samples, 20.24%)</title><rect x="884.8" y="1011.0" width="238.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="887.8" y="1022.0">java/util/concurrent/ThreadPoolE..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (237 samples, 19.90%)</title><rect x="888.8" y="995.0" width="234.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="891.8" y="1006.0">java/util/concurrent/LinkedBloc..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.dequeue (3 samples, 0.25%)</title><rect x="893.8" y="979.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="896.8" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (219 samples, 18.39%)</title><rect x="896.7" y="979.0" width="217.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="899.7" y="990.0">java/util/concurrent/locks/A..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (21 samples, 1.76%)</title><rect x="907.6" y="963.0" width="20.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="910.6" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (10 samples, 0.84%)</title><rect x="928.4" y="963.0" width="9.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="931.4" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 0.84%)</title><rect x="928.4" y="947.0" width="9.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="931.4" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 0.84%)</title><rect x="928.4" y="931.0" width="9.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="931.4" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 0.84%)</title><rect x="928.4" y="915.0" width="9.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="931.4" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (177 samples, 14.86%)</title><rect x="938.3" y="963.0" width="175.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="941.3" y="974.0">java/util/concurrent/lo..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (176 samples, 14.78%)</title><rect x="939.3" y="947.0" width="174.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="942.3" y="958.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.08%)</title><rect x="946.3" y="931.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="949.3" y="942.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.17%)</title><rect x="947.3" y="931.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="950.3" y="942.0"></text>
</g>
<g>
<title>Unsafe_Park (161 samples, 13.52%)</title><rect x="949.2" y="931.0" width="159.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="952.2" y="942.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="954.2" y="915.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="957.2" y="926.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (22 samples, 1.85%)</title><rect x="955.2" y="915.0" width="21.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="958.2" y="926.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (3 samples, 0.25%)</title><rect x="967.1" y="899.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="970.1" y="910.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.08%)</title><rect x="968.1" y="883.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="971.1" y="894.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.08%)</title><rect x="969.1" y="883.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="972.1" y="894.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.08%)</title><rect x="970.1" y="899.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="973.1" y="910.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (6 samples, 0.50%)</title><rect x="971.0" y="899.0" width="6.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="974.0" y="910.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="977.0" y="915.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="980.0" y="926.0"></text>
</g>
<g>
<title>_L_cond_lock_847 (1 samples, 0.08%)</title><rect x="978.0" y="915.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="981.0" y="926.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.08%)</title><rect x="979.0" y="915.0" width="1.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="982.0" y="926.0"></text>
</g>
<g>
<title>__lll_lock_wait (8 samples, 0.67%)</title><rect x="980.0" y="915.0" width="7.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="983.0" y="926.0"></text>
</g>
<g>
<title>__lll_unlock_wake (36 samples, 3.02%)</title><rect x="987.9" y="915.0" width="35.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="990.9" y="926.0">__l..</text>
</g>
<g>
<title>__pthread_cond_wait (67 samples, 5.63%)</title><rect x="1023.6" y="915.0" width="66.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1026.6" y="926.0">__pthre..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.08%)</title><rect x="1089.9" y="915.0" width="1.0" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1092.9" y="926.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.08%)</title><rect x="1090.9" y="915.0" width="1.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1093.9" y="926.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 0.25%)</title><rect x="1091.9" y="915.0" width="3.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1094.9" y="926.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.17%)</title><rect x="1094.9" y="915.0" width="2.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1097.9" y="926.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.42%)</title><rect x="1096.9" y="915.0" width="4.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1099.9" y="926.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.08%)</title><rect x="1101.8" y="915.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1104.8" y="926.0"></text>
</g>
<g>
<title>_init (2 samples, 0.17%)</title><rect x="1102.8" y="915.0" width="2.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1105.8" y="926.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.17%)</title><rect x="1104.8" y="915.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1107.8" y="926.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.17%)</title><rect x="1106.8" y="915.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1109.8" y="926.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.17%)</title><rect x="1108.8" y="931.0" width="1.9" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1111.8" y="942.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.25%)</title><rect x="1110.7" y="931.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1113.7" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.08%)</title><rect x="1113.7" y="979.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1116.7" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (2 samples, 0.17%)</title><rect x="1114.7" y="979.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1117.7" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (2 samples, 0.17%)</title><rect x="1114.7" y="963.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1117.7" y="974.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.17%)</title><rect x="1114.7" y="947.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1117.7" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 0.59%)</title><rect x="1116.7" y="979.0" width="6.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1119.7" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.59%)</title><rect x="1116.7" y="963.0" width="6.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1119.7" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.59%)</title><rect x="1116.7" y="947.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1119.7" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.59%)</title><rect x="1116.7" y="931.0" width="6.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1119.7" y="942.0"></text>
</g>
<g>
<title>msort_with_tmp.part.0 (1 samples, 0.08%)</title><rect x="1123.6" y="1059.0" width="1.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1126.6" y="1070.0"></text>
</g>
<g>
<title>edge_order(CFGEdge**, CFGEdge**) (1 samples, 0.08%)</title><rect x="1123.6" y="1043.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1126.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.17%)</title><rect x="1124.6" y="1059.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1127.6" y="1070.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.08%)</title><rect x="1125.6" y="1043.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1128.6" y="1054.0"></text>
</g>
<g>
<title>JVM_MonitorWait (1 samples, 0.08%)</title><rect x="1125.6" y="1027.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1128.6" y="1038.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.08%)</title><rect x="1125.6" y="1011.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1128.6" y="1022.0"></text>
</g>
<g>
<title>start_thread (64 samples, 5.37%)</title><rect x="1126.6" y="1059.0" width="63.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1129.6" y="1070.0">start_t..</text>
</g>
<g>
<title>java_start(Thread*) (64 samples, 5.37%)</title><rect x="1126.6" y="1043.0" width="63.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1129.6" y="1054.0">java_st..</text>
</g>
<g>
<title>GangWorker::loop() (21 samples, 1.76%)</title><rect x="1126.6" y="1027.0" width="20.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1129.6" y="1038.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (2 samples, 0.17%)</title><rect x="1126.6" y="1011.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1129.6" y="1022.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.17%)</title><rect x="1126.6" y="995.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1129.6" y="1006.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.08%)</title><rect x="1126.6" y="979.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1129.6" y="990.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.08%)</title><rect x="1127.6" y="979.0" width="1.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1130.6" y="990.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (18 samples, 1.51%)</title><rect x="1128.6" y="1011.0" width="17.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1131.6" y="1022.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.42%)</title><rect x="1128.6" y="995.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1131.6" y="1006.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.08%)</title><rect x="1128.6" y="979.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1131.6" y="990.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.08%)</title><rect x="1128.6" y="963.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1131.6" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.08%)</title><rect x="1128.6" y="947.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1131.6" y="958.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.08%)</title><rect x="1129.6" y="979.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1132.6" y="990.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.08%)</title><rect x="1130.6" y="979.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1133.6" y="990.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.17%)</title><rect x="1131.5" y="979.0" width="2.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1134.5" y="990.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (6 samples, 0.50%)</title><rect x="1133.5" y="995.0" width="6.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1136.5" y="1006.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (5 samples, 0.42%)</title><rect x="1133.5" y="979.0" width="5.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1136.5" y="990.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (3 samples, 0.25%)</title><rect x="1133.5" y="963.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.5" y="974.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (3 samples, 0.25%)</title><rect x="1133.5" y="947.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.5" y="958.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (3 samples, 0.25%)</title><rect x="1133.5" y="931.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1136.5" y="942.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.17%)</title><rect x="1136.5" y="963.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1139.5" y="974.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="1137.5" y="947.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.5" y="958.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.08%)</title><rect x="1138.5" y="979.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1141.5" y="990.0"></text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.08%)</title><rect x="1138.5" y="963.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1141.5" y="974.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.08%)</title><rect x="1138.5" y="947.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1141.5" y="958.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (7 samples, 0.59%)</title><rect x="1139.5" y="995.0" width="6.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1142.5" y="1006.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (7 samples, 0.59%)</title><rect x="1139.5" y="979.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1142.5" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (5 samples, 0.42%)</title><rect x="1139.5" y="963.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1142.5" y="974.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (5 samples, 0.42%)</title><rect x="1139.5" y="947.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1142.5" y="958.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (5 samples, 0.42%)</title><rect x="1139.5" y="931.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1142.5" y="942.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (5 samples, 0.42%)</title><rect x="1139.5" y="915.0" width="4.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1142.5" y="926.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (4 samples, 0.34%)</title><rect x="1140.5" y="899.0" width="3.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1143.5" y="910.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (2 samples, 0.17%)</title><rect x="1142.4" y="883.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1145.4" y="894.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (1 samples, 0.08%)</title><rect x="1143.4" y="867.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1146.4" y="878.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.17%)</title><rect x="1144.4" y="963.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1147.4" y="974.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.08%)</title><rect x="1144.4" y="947.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1147.4" y="958.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.08%)</title><rect x="1144.4" y="931.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1147.4" y="942.0"></text>
</g>
<g>
<title>HeapRegionRemSetIterator::has_next(unsigned long&amp;) (1 samples, 0.08%)</title><rect x="1144.4" y="915.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1147.4" y="926.0"></text>
</g>
<g>
<title>RSHashTableIter::has_next(unsigned long&amp;) (1 samples, 0.08%)</title><rect x="1144.4" y="899.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1147.4" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::start_cset_region_for_worker(unsigned int) (1 samples, 0.08%)</title><rect x="1145.4" y="947.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1148.4" y="958.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.08%)</title><rect x="1146.4" y="1011.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.4" y="1022.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.08%)</title><rect x="1146.4" y="995.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1149.4" y="1006.0"></text>
</g>
<g>
<title>JavaThread::run() (40 samples, 3.36%)</title><rect x="1147.4" y="1027.0" width="39.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1150.4" y="1038.0">Jav..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (40 samples, 3.36%)</title><rect x="1147.4" y="1011.0" width="39.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1150.4" y="1022.0">Jav..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (40 samples, 3.36%)</title><rect x="1147.4" y="995.0" width="39.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1150.4" y="1006.0">Com..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (40 samples, 3.36%)</title><rect x="1147.4" y="979.0" width="39.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.4" y="990.0">Com..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (38 samples, 3.19%)</title><rect x="1147.4" y="963.0" width="37.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1150.4" y="974.0">C2C..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (38 samples, 3.19%)</title><rect x="1147.4" y="947.0" width="37.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1150.4" y="958.0">Com..</text>
</g>
<g>
<title>Compile::Code_Gen() (18 samples, 1.51%)</title><rect x="1147.4" y="931.0" width="17.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.4" y="942.0"></text>
</g>
<g>
<title>Matcher::match() (1 samples, 0.08%)</title><rect x="1147.4" y="915.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.4" y="926.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.08%)</title><rect x="1147.4" y="899.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.4" y="910.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.08%)</title><rect x="1147.4" y="883.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1150.4" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 0.34%)</title><rect x="1148.4" y="915.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.4" y="926.0"></text>
</g>
<g>
<title>PhaseCFG::estimate_block_frequency() (1 samples, 0.08%)</title><rect x="1148.4" y="899.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1151.4" y="910.0"></text>
</g>
<g>
<title>CFGLoop::compute_freq() (1 samples, 0.08%)</title><rect x="1148.4" y="883.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1151.4" y="894.0"></text>
</g>
<g>
<title>Block::succ_prob(unsigned int) (1 samples, 0.08%)</title><rect x="1148.4" y="867.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.4" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.25%)</title><rect x="1149.4" y="899.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1152.4" y="910.0"></text>
</g>
<g>
<title>PhaseCFG::call_catch_cleanup(Block*) (1 samples, 0.08%)</title><rect x="1149.4" y="883.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.4" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1150.4" y="883.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.4" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1151.4" y="883.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.4" y="894.0"></text>
</g>
<g>
<title>MachNode::Opcode() const (1 samples, 0.08%)</title><rect x="1151.4" y="867.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1154.4" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (13 samples, 1.09%)</title><rect x="1152.4" y="915.0" width="12.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.4" y="926.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.08%)</title><rect x="1152.4" y="899.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.4" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.08%)</title><rect x="1153.3" y="899.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1156.3" y="910.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.08%)</title><rect x="1153.3" y="883.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1156.3" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.08%)</title><rect x="1154.3" y="899.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1157.3" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 0.34%)</title><rect x="1155.3" y="899.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1158.3" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.17%)</title><rect x="1157.3" y="883.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.3" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.08%)</title><rect x="1159.3" y="899.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.3" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.08%)</title><rect x="1159.3" y="883.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.3" y="894.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.17%)</title><rect x="1160.3" y="899.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.3" y="910.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.17%)</title><rect x="1160.3" y="883.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1163.3" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.08%)</title><rect x="1160.3" y="867.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.3" y="878.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.08%)</title><rect x="1161.3" y="867.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.3" y="878.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.08%)</title><rect x="1161.3" y="851.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.3" y="862.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.08%)</title><rect x="1162.3" y="899.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.3" y="910.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.17%)</title><rect x="1163.2" y="899.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.2" y="910.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.08%)</title><rect x="1164.2" y="883.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1167.2" y="894.0"></text>
</g>
<g>
<title>Compile::Optimize() (13 samples, 1.09%)</title><rect x="1165.2" y="931.0" width="12.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.2" y="942.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.08%)</title><rect x="1165.2" y="915.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.2" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (9 samples, 0.76%)</title><rect x="1166.2" y="915.0" width="8.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.2" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.08%)</title><rect x="1166.2" y="899.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.2" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.25%)</title><rect x="1167.2" y="899.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.2" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (4 samples, 0.34%)</title><rect x="1170.2" y="899.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.2" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.08%)</title><rect x="1173.2" y="883.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.2" y="894.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.08%)</title><rect x="1174.1" y="899.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.1" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.17%)</title><rect x="1175.1" y="915.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.1" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.17%)</title><rect x="1175.1" y="899.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.1" y="910.0"></text>
</g>
<g>
<title>LoadRangeNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1175.1" y="883.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.1" y="894.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1175.1" y="867.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.1" y="878.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.08%)</title><rect x="1175.1" y="851.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.1" y="862.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1175.1" y="835.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.1" y="846.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.08%)</title><rect x="1175.1" y="819.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.1" y="830.0"></text>
</g>
<g>
<title>TypeAryPtr::xmeet_helper(Type const*) const (1 samples, 0.08%)</title><rect x="1175.1" y="803.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.1" y="814.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="1175.1" y="787.0" width="1.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1178.1" y="798.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1176.1" y="883.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.1" y="894.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.08%)</title><rect x="1176.1" y="867.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.1" y="878.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1177.1" y="915.0" width="1.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1180.1" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.59%)</title><rect x="1178.1" y="931.0" width="6.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.1" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.59%)</title><rect x="1178.1" y="915.0" width="6.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.1" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.59%)</title><rect x="1178.1" y="899.0" width="6.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.1" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.59%)</title><rect x="1178.1" y="883.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.1" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.59%)</title><rect x="1178.1" y="867.0" width="6.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.1" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.59%)</title><rect x="1178.1" y="851.0" width="6.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.1" y="862.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1178.1" y="835.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.1" y="846.0"></text>
</g>
<g>
<title>ciMethod::call_profile_at_bci(int) (1 samples, 0.08%)</title><rect x="1178.1" y="819.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.1" y="830.0"></text>
</g>
<g>
<title>ciMethodData::bci_to_data(int, ciMethod*) (1 samples, 0.08%)</title><rect x="1178.1" y="803.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.1" y="814.0"></text>
</g>
<g>
<title>ciMethodData::data_at(int) (1 samples, 0.08%)</title><rect x="1178.1" y="787.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.1" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.50%)</title><rect x="1179.1" y="835.0" width="5.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.1" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.50%)</title><rect x="1179.1" y="819.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.1" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.50%)</title><rect x="1179.1" y="803.0" width="5.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.1" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.50%)</title><rect x="1179.1" y="787.0" width="5.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.1" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.50%)</title><rect x="1179.1" y="771.0" width="5.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.1" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.50%)</title><rect x="1179.1" y="755.0" width="5.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.1" y="766.0"></text>
</g>
<g>
<title>GraphKit::record_profile_for_speculation(Node*, ciKlass*) (1 samples, 0.08%)</title><rect x="1179.1" y="739.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.1" y="750.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1179.1" y="723.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.1" y="734.0"></text>
</g>
<g>
<title>DecodeNNode::Opcode() const (1 samples, 0.08%)</title><rect x="1179.1" y="707.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.1" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.42%)</title><rect x="1180.1" y="739.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.1" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.42%)</title><rect x="1180.1" y="723.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.42%)</title><rect x="1180.1" y="707.0" width="4.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.42%)</title><rect x="1180.1" y="691.0" width="4.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.08%)</title><rect x="1180.1" y="675.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.1" y="686.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.08%)</title><rect x="1180.1" y="659.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.1" y="670.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1180.1" y="643.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.1" y="654.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1180.1" y="627.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.34%)</title><rect x="1181.1" y="675.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.1" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.34%)</title><rect x="1181.1" y="659.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.1" y="670.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1181.1" y="643.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.1" y="654.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1181.1" y="627.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.1" y="638.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1181.1" y="611.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.1" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1181.1" y="595.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.1" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1181.1" y="579.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.1" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1181.1" y="563.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.1" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1181.1" y="547.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.1" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1181.1" y="531.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.1" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1181.1" y="515.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.1" y="526.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.08%)</title><rect x="1181.1" y="499.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.1" y="510.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1181.1" y="483.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.1" y="494.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1181.1" y="467.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.1" y="478.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1181.1" y="451.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.1" y="462.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1181.1" y="435.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.1" y="446.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1181.1" y="419.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.1" y="430.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.08%)</title><rect x="1181.1" y="403.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.1" y="414.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.08%)</title><rect x="1181.1" y="387.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.1" y="398.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.08%)</title><rect x="1181.1" y="371.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.1" y="382.0"></text>
</g>
<g>
<title>SystemDictionary::find_instance_or_array_klass(Symbol*, Handle, Handle, Thread*) (1 samples, 0.08%)</title><rect x="1181.1" y="355.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.1" y="366.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.08%)</title><rect x="1181.1" y="339.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.1" y="350.0"></text>
</g>
<g>
<title>Dictionary::find(int, unsigned int, Symbol*, ClassLoaderData*, Handle, Thread*) (1 samples, 0.08%)</title><rect x="1181.1" y="323.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.1" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1182.1" y="643.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.1" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1182.1" y="627.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.1" y="611.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.1" y="595.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.1" y="579.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.1" y="563.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.1" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.1" y="547.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.1" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.1" y="531.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.1" y="515.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.1" y="499.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.1" y="483.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.1" y="467.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.1" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.1" y="451.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.1" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.1" y="435.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.1" y="419.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.1" y="403.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.1" y="387.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.08%)</title><rect x="1182.1" y="371.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.1" y="382.0"></text>
</g>
<g>
<title>PreserveJVMState::PreserveJVMState(GraphKit*, bool) (1 samples, 0.08%)</title><rect x="1182.1" y="355.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.1" y="366.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.08%)</title><rect x="1182.1" y="339.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.1" y="350.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.08%)</title><rect x="1182.1" y="323.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.1" y="334.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.08%)</title><rect x="1182.1" y="307.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.1" y="318.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.08%)</title><rect x="1183.1" y="611.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.1" y="622.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.08%)</title><rect x="1183.1" y="595.0" width="1.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1186.1" y="606.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.1" y="643.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.1" y="654.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.1" y="627.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.1" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.1" y="611.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.1" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1184.1" y="595.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1184.1" y="579.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1184.1" y="563.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1184.1" y="547.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1184.1" y="531.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.1" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.1" y="515.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.1" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1184.1" y="499.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1184.1" y="483.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1184.1" y="467.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1184.1" y="451.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1184.1" y="435.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.1" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.1" y="419.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.1" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1184.1" y="403.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1184.1" y="387.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1184.1" y="371.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1184.1" y="355.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1184.1" y="339.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.1" y="350.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1184.1" y="323.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.1" y="334.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1184.1" y="307.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.1" y="318.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1184.1" y="291.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.1" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1184.1" y="275.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.1" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1184.1" y="259.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.1" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1184.1" y="243.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.1" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1184.1" y="227.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.1" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1184.1" y="211.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.1" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.08%)</title><rect x="1184.1" y="195.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.1" y="206.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1184.1" y="179.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.1" y="190.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1184.1" y="163.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.1" y="174.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1184.1" y="147.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.1" y="158.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.08%)</title><rect x="1184.1" y="131.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.1" y="142.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.08%)</title><rect x="1184.1" y="115.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.1" y="126.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.08%)</title><rect x="1184.1" y="99.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.1" y="110.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="1184.1" y="83.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.1" y="94.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="1184.1" y="67.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.1" y="78.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.08%)</title><rect x="1184.1" y="51.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.1" y="62.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.08%)</title><rect x="1184.1" y="35.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.1" y="46.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.17%)</title><rect x="1185.0" y="963.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.0" y="974.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.17%)</title><rect x="1185.0" y="947.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.0" y="958.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.17%)</title><rect x="1185.0" y="931.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.0" y="942.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.17%)</title><rect x="1185.0" y="915.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.0" y="926.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.17%)</title><rect x="1185.0" y="899.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.0" y="910.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 0.17%)</title><rect x="1185.0" y="883.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.0" y="894.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.08%)</title><rect x="1185.0" y="867.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.0" y="878.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.08%)</title><rect x="1185.0" y="851.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.0" y="862.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.08%)</title><rect x="1185.0" y="835.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.0" y="846.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (1 samples, 0.08%)</title><rect x="1185.0" y="819.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.0" y="830.0"></text>
</g>
<g>
<title>LinearScanWalker::set_use_pos(Interval*, int, bool) (1 samples, 0.08%)</title><rect x="1185.0" y="803.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.0" y="814.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.08%)</title><rect x="1186.0" y="867.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.0" y="878.0"></text>
</g>
<g>
<title>LinearScan::add_temp(int, int, IntervalUseKind, BasicType) (1 samples, 0.08%)</title><rect x="1186.0" y="851.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.0" y="862.0"></text>
</g>
<g>
<title>LinearScan::create_interval(int) (1 samples, 0.08%)</title><rect x="1186.0" y="835.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.0" y="846.0"></text>
</g>
<g>
<title>Interval::Interval(int) (1 samples, 0.08%)</title><rect x="1186.0" y="819.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.0" y="830.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.08%)</title><rect x="1186.0" y="803.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.0" y="814.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.25%)</title><rect x="1187.0" y="1027.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.0" y="1038.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.25%)</title><rect x="1187.0" y="1011.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.0" y="1022.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.08%)</title><rect x="1187.0" y="995.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.0" y="1006.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.17%)</title><rect x="1188.0" y="995.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.0" y="1006.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.08%)</title><rect x="1189.0" y="979.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1192.0" y="990.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.08%)</title><rect x="1189.0" y="963.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1192.0" y="974.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.08%)</title><rect x="1189.0" y="947.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1192.0" y="958.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.08%)</title><rect x="1189.0" y="931.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.0" y="942.0"></text>
</g>
<g>
<title>nmethod::oops_do_marking_epilogue() (1 samples, 0.08%)</title><rect x="1189.0" y="915.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1192.0" y="926.0"></text>
</g>
</g>
</svg>
