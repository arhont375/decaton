<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="998" onload="init(evt)" viewBox="0 0 1200 998" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="981"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="981"> </text>
<g id="frames">
<g>
<title>all (298 samples, 100.00%)</title><rect x="10.0" y="947.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="958.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (24 samples, 8.05%)</title><rect x="10.0" y="931.0" width="95.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="942.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (24 samples, 8.05%)</title><rect x="10.0" y="915.0" width="95.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="926.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.34%)</title><rect x="10.0" y="899.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (1 samples, 0.34%)</title><rect x="10.0" y="883.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.34%)</title><rect x="10.0" y="867.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.34%)</title><rect x="10.0" y="851.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.34%)</title><rect x="10.0" y="835.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.34%)</title><rect x="10.0" y="819.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.34%)</title><rect x="10.0" y="803.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.34%)</title><rect x="10.0" y="787.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.34%)</title><rect x="10.0" y="771.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.34%)</title><rect x="10.0" y="755.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$271/1938814012.test (1 samples, 0.34%)</title><rect x="10.0" y="739.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.lambda$partitionsNeedsPause$70 (1 samples, 0.34%)</title><rect x="10.0" y="723.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.pendingTasksCount (1 samples, 0.34%)</title><rect x="10.0" y="707.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (6 samples, 2.01%)</title><rect x="14.0" y="899.0" width="23.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.0" y="910.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$268/1313247918.accept (5 samples, 1.68%)</title><rect x="14.0" y="883.0" width="19.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.0" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (5 samples, 1.68%)</title><rect x="14.0" y="867.0" width="19.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.0" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (2 samples, 0.67%)</title><rect x="14.0" y="851.0" width="7.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.0" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (2 samples, 0.67%)</title><rect x="14.0" y="835.0" width="7.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="17.0" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (2 samples, 0.67%)</title><rect x="14.0" y="819.0" width="7.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (2 samples, 0.67%)</title><rect x="14.0" y="803.0" width="7.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.67%)</title><rect x="14.0" y="787.0" width="7.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="17.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (2 samples, 0.67%)</title><rect x="14.0" y="771.0" width="7.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.0" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (3 samples, 1.01%)</title><rect x="21.9" y="851.0" width="11.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="24.9" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (3 samples, 1.01%)</title><rect x="21.9" y="835.0" width="11.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="24.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.67%)</title><rect x="25.8" y="819.0" width="8.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="28.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.67%)</title><rect x="25.8" y="803.0" width="8.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="28.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.34%)</title><rect x="29.8" y="787.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="32.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.34%)</title><rect x="29.8" y="771.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="32.8" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.34%)</title><rect x="29.8" y="755.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="32.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.34%)</title><rect x="33.8" y="883.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="36.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (17 samples, 5.70%)</title><rect x="37.7" y="899.0" width="67.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="40.7" y="910.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (17 samples, 5.70%)</title><rect x="37.7" y="883.0" width="67.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="40.7" y="894.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (11 samples, 3.69%)</title><rect x="37.7" y="867.0" width="43.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="40.7" y="878.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (6 samples, 2.01%)</title><rect x="37.7" y="851.0" width="23.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="40.7" y="862.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (6 samples, 2.01%)</title><rect x="37.7" y="835.0" width="23.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="40.7" y="846.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (5 samples, 1.68%)</title><rect x="37.7" y="819.0" width="19.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="40.7" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.34%)</title><rect x="37.7" y="803.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="40.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.34%)</title><rect x="37.7" y="787.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="40.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.34%)</title><rect x="37.7" y="771.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="40.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.34%)</title><rect x="37.7" y="755.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="40.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/CompactArrayOf.read (1 samples, 0.34%)</title><rect x="37.7" y="739.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="40.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.34%)</title><rect x="37.7" y="723.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="40.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.34%)</title><rect x="37.7" y="707.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="40.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$9.read (1 samples, 0.34%)</title><rect x="37.7" y="691.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="40.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$9.read (1 samples, 0.34%)</title><rect x="37.7" y="675.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="40.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.34%)</title><rect x="37.7" y="659.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="40.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.34%)</title><rect x="37.7" y="643.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="40.7" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (4 samples, 1.34%)</title><rect x="41.7" y="803.0" width="15.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="44.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.34%)</title><rect x="41.7" y="787.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="44.7" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.34%)</title><rect x="41.7" y="771.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="44.7" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.34%)</title><rect x="41.7" y="755.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="44.7" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.34%)</title><rect x="41.7" y="739.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="44.7" y="750.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.34%)</title><rect x="41.7" y="723.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="44.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (3 samples, 1.01%)</title><rect x="45.6" y="787.0" width="11.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="48.6" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (3 samples, 1.01%)</title><rect x="45.6" y="771.0" width="11.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="48.6" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (3 samples, 1.01%)</title><rect x="45.6" y="755.0" width="11.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="48.6" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (3 samples, 1.01%)</title><rect x="45.6" y="739.0" width="11.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="48.6" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (2 samples, 0.67%)</title><rect x="45.6" y="723.0" width="8.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="48.6" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (2 samples, 0.67%)</title><rect x="45.6" y="707.0" width="8.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="48.6" y="718.0"></text>
</g>
<g>
<title>__GI_epoll_wait (1 samples, 0.34%)</title><rect x="45.6" y="691.0" width="4.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="48.6" y="702.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (1 samples, 0.34%)</title><rect x="49.6" y="691.0" width="4.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="52.6" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.drain (1 samples, 0.34%)</title><rect x="53.6" y="723.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="56.6" y="734.0"></text>
</g>
<g>
<title>__read (1 samples, 0.34%)</title><rect x="53.6" y="707.0" width="3.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="56.6" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.maybeThrowInterruptException (1 samples, 0.34%)</title><rect x="57.5" y="819.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="60.5" y="830.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.34%)</title><rect x="57.5" y="803.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="60.5" y="814.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.34%)</title><rect x="57.5" y="787.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="60.5" y="798.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.34%)</title><rect x="57.5" y="771.0" width="4.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="60.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (5 samples, 1.68%)</title><rect x="61.5" y="851.0" width="19.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="64.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (5 samples, 1.68%)</title><rect x="61.5" y="835.0" width="19.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="64.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 1.01%)</title><rect x="61.5" y="819.0" width="11.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="64.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 1.01%)</title><rect x="61.5" y="803.0" width="11.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="64.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.67%)</title><rect x="61.5" y="787.0" width="7.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="64.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (2 samples, 0.67%)</title><rect x="61.5" y="771.0" width="7.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="64.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (2 samples, 0.67%)</title><rect x="61.5" y="755.0" width="7.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="64.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (2 samples, 0.67%)</title><rect x="61.5" y="739.0" width="7.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="64.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (2 samples, 0.67%)</title><rect x="61.5" y="723.0" width="7.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="64.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (2 samples, 0.67%)</title><rect x="61.5" y="707.0" width="7.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="64.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (2 samples, 0.67%)</title><rect x="61.5" y="691.0" width="7.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="64.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (2 samples, 0.67%)</title><rect x="61.5" y="675.0" width="7.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="64.5" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.34%)</title><rect x="69.4" y="787.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="72.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.34%)</title><rect x="69.4" y="771.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="72.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.34%)</title><rect x="69.4" y="755.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="72.4" y="766.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.34%)</title><rect x="69.4" y="739.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="72.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.67%)</title><rect x="73.4" y="819.0" width="7.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="76.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.67%)</title><rect x="73.4" y="803.0" width="7.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="76.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.34%)</title><rect x="73.4" y="787.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="76.4" y="798.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.34%)</title><rect x="73.4" y="771.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="76.4" y="782.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.34%)</title><rect x="73.4" y="755.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="76.4" y="766.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.34%)</title><rect x="73.4" y="739.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="76.4" y="750.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.34%)</title><rect x="73.4" y="723.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="76.4" y="734.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.34%)</title><rect x="73.4" y="707.0" width="3.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="76.4" y="718.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.34%)</title><rect x="73.4" y="691.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="76.4" y="702.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.34%)</title><rect x="73.4" y="675.0" width="3.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="76.4" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.34%)</title><rect x="77.3" y="787.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="80.3" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.34%)</title><rect x="77.3" y="771.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="80.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.34%)</title><rect x="77.3" y="755.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="80.3" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.34%)</title><rect x="77.3" y="739.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="80.3" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/MetricConfig.quota (1 samples, 0.34%)</title><rect x="77.3" y="723.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="80.3" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.67%)</title><rect x="81.3" y="867.0" width="7.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="84.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.67%)</title><rect x="81.3" y="851.0" width="7.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="84.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.67%)</title><rect x="81.3" y="835.0" width="7.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="84.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.67%)</title><rect x="81.3" y="819.0" width="7.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="84.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.67%)</title><rect x="81.3" y="803.0" width="7.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="84.3" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.67%)</title><rect x="81.3" y="787.0" width="7.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="84.3" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.67%)</title><rect x="81.3" y="771.0" width="7.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="84.3" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.67%)</title><rect x="81.3" y="755.0" width="7.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="84.3" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.67%)</title><rect x="81.3" y="739.0" width="7.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="84.3" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.67%)</title><rect x="81.3" y="723.0" width="7.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="84.3" y="734.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (2 samples, 0.67%)</title><rect x="81.3" y="707.0" width="7.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="84.3" y="718.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (2 samples, 0.67%)</title><rect x="81.3" y="691.0" width="7.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="84.3" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (2 samples, 0.67%)</title><rect x="81.3" y="675.0" width="7.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="84.3" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.34%)</title><rect x="81.3" y="659.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="84.3" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.34%)</title><rect x="81.3" y="643.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="84.3" y="654.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.34%)</title><rect x="81.3" y="627.0" width="3.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="84.3" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates$$Lambda$240/2111196712.apply (1 samples, 0.34%)</title><rect x="85.2" y="659.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="88.2" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.lambda$stream$0 (1 samples, 0.34%)</title><rect x="85.2" y="643.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="88.2" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 1.01%)</title><rect x="89.2" y="867.0" width="11.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="92.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 1.01%)</title><rect x="89.2" y="851.0" width="11.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="92.2" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.34%)</title><rect x="89.2" y="835.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="92.2" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.34%)</title><rect x="89.2" y="819.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="92.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestHeader.apiKey (1 samples, 0.34%)</title><rect x="89.2" y="803.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="92.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.67%)</title><rect x="93.2" y="835.0" width="7.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="96.2" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.34%)</title><rect x="93.2" y="819.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="96.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.34%)</title><rect x="93.2" y="803.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="96.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.34%)</title><rect x="93.2" y="787.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="96.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.34%)</title><rect x="93.2" y="771.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="96.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.34%)</title><rect x="93.2" y="755.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="96.2" y="766.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.34%)</title><rect x="93.2" y="739.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="96.2" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.setSend (1 samples, 0.34%)</title><rect x="93.2" y="723.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="96.2" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.addInterestOps (1 samples, 0.34%)</title><rect x="93.2" y="707.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="96.2" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.write (1 samples, 0.34%)</title><rect x="93.2" y="691.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="96.2" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.34%)</title><rect x="93.2" y="675.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="96.2" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.34%)</title><rect x="93.2" y="659.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="96.2" y="670.0"></text>
</g>
<g>
<title>slow_subtype_check Runtime1 stub (1 samples, 0.34%)</title><rect x="93.2" y="643.0" width="3.9" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="96.2" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.34%)</title><rect x="97.1" y="819.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="100.1" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.34%)</title><rect x="97.1" y="803.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="100.1" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.34%)</title><rect x="97.1" y="787.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="100.1" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.34%)</title><rect x="97.1" y="771.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="100.1" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.34%)</title><rect x="97.1" y="755.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="100.1" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.34%)</title><rect x="97.1" y="739.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="100.1" y="750.0"></text>
</g>
<g>
<title>__GI_epoll_wait (1 samples, 0.34%)</title><rect x="97.1" y="723.0" width="4.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="100.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.34%)</title><rect x="101.1" y="867.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="104.1" y="878.0"></text>
</g>
<g>
<title>java/lang/Thread.run (223 samples, 74.83%)</title><rect x="105.0" y="931.0" width="883.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="108.0" y="942.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (223 samples, 74.83%)</title><rect x="105.0" y="915.0" width="883.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="108.0" y="926.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (223 samples, 74.83%)</title><rect x="105.0" y="899.0" width="883.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="108.0" y="910.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$288/2122444284.run (210 samples, 70.47%)</title><rect x="105.0" y="883.0" width="831.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="108.0" y="894.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$288/2122444284.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62 (210 samples, 70.47%)</title><rect x="105.0" y="867.0" width="831.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="108.0" y="878.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (210 samples, 70.47%)</title><rect x="105.0" y="851.0" width="831.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="108.0" y="862.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (210 samples, 70.47%)</title><rect x="105.0" y="835.0" width="831.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="108.0" y="846.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (8 samples, 2.68%)</title><rect x="113.0" y="819.0" width="31.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="116.0" y="830.0">co..</text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (8 samples, 2.68%)</title><rect x="113.0" y="803.0" width="31.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="116.0" y="814.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.get (8 samples, 2.68%)</title><rect x="113.0" y="787.0" width="31.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="116.0" y="798.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.34%)</title><rect x="113.0" y="771.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="116.0" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (7 samples, 2.35%)</title><rect x="116.9" y="771.0" width="27.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="119.9" y="782.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (25 samples, 8.39%)</title><rect x="144.6" y="819.0" width="99.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="147.6" y="830.0">com/linecorp..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (25 samples, 8.39%)</title><rect x="144.6" y="803.0" width="99.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="147.6" y="814.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (25 samples, 8.39%)</title><rect x="144.6" y="787.0" width="99.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="147.6" y="798.0">java/util/co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (1 samples, 0.34%)</title><rect x="200.1" y="771.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="203.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (10 samples, 3.36%)</title><rect x="204.0" y="771.0" width="39.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="207.0" y="782.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (10 samples, 3.36%)</title><rect x="204.0" y="755.0" width="39.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="207.0" y="766.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$305/2142419314.accept (10 samples, 3.36%)</title><rect x="204.0" y="739.0" width="39.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="207.0" y="750.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (10 samples, 3.36%)</title><rect x="204.0" y="723.0" width="39.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="207.0" y="734.0">com..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (10 samples, 3.36%)</title><rect x="204.0" y="707.0" width="39.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="207.0" y="718.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (10 samples, 3.36%)</title><rect x="204.0" y="691.0" width="39.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="207.0" y="702.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (10 samples, 3.36%)</title><rect x="204.0" y="675.0" width="39.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="207.0" y="686.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (4 samples, 1.34%)</title><rect x="204.0" y="659.0" width="15.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="207.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (4 samples, 1.34%)</title><rect x="204.0" y="643.0" width="15.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="207.0" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$286/31110265.accept (1 samples, 0.34%)</title><rect x="208.0" y="627.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="211.0" y="638.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.67%)</title><rect x="211.9" y="627.0" width="8.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="214.9" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 2.01%)</title><rect x="219.9" y="659.0" width="23.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="222.9" y="670.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (29 samples, 9.73%)</title><rect x="243.6" y="819.0" width="114.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="246.6" y="830.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$45/1556995360.extract (29 samples, 9.73%)</title><rect x="243.6" y="803.0" width="114.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="246.6" y="814.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (29 samples, 9.73%)</title><rect x="243.6" y="787.0" width="114.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="246.6" y="798.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (29 samples, 9.73%)</title><rect x="243.6" y="771.0" width="114.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="246.6" y="782.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (29 samples, 9.73%)</title><rect x="243.6" y="755.0" width="114.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="246.6" y="766.0">com/linecorp/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (29 samples, 9.73%)</title><rect x="243.6" y="739.0" width="114.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="246.6" y="750.0">com/fasterxml/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (11 samples, 3.69%)</title><rect x="243.6" y="723.0" width="43.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="246.6" y="734.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (3 samples, 1.01%)</title><rect x="243.6" y="707.0" width="11.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="246.6" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (3 samples, 1.01%)</title><rect x="243.6" y="691.0" width="11.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="246.6" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (3 samples, 1.01%)</title><rect x="243.6" y="675.0" width="11.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="246.6" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 1.01%)</title><rect x="243.6" y="659.0" width="11.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="246.6" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 1.01%)</title><rect x="243.6" y="643.0" width="11.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="246.6" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 1.01%)</title><rect x="243.6" y="627.0" width="11.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="246.6" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 1.01%)</title><rect x="243.6" y="611.0" width="11.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="246.6" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (8 samples, 2.68%)</title><rect x="255.5" y="707.0" width="31.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="258.5" y="718.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (7 samples, 2.35%)</title><rect x="255.5" y="691.0" width="27.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="258.5" y="702.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.67%)</title><rect x="259.5" y="675.0" width="7.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="262.5" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.34%)</title><rect x="259.5" y="659.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="262.5" y="670.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.34%)</title><rect x="259.5" y="643.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="262.5" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.34%)</title><rect x="259.5" y="627.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="262.5" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.34%)</title><rect x="259.5" y="611.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="262.5" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.34%)</title><rect x="263.4" y="659.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="266.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (4 samples, 1.34%)</title><rect x="267.4" y="675.0" width="15.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="270.4" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (4 samples, 1.34%)</title><rect x="267.4" y="659.0" width="15.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="270.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (1 samples, 0.34%)</title><rect x="267.4" y="643.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="270.4" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.34%)</title><rect x="267.4" y="627.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="270.4" y="638.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.34%)</title><rect x="267.4" y="611.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="270.4" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.34%)</title><rect x="267.4" y="595.0" width="3.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="270.4" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 0.67%)</title><rect x="271.3" y="643.0" width="8.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="274.3" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.34%)</title><rect x="279.3" y="643.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="282.3" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.34%)</title><rect x="279.3" y="627.0" width="3.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="282.3" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.34%)</title><rect x="279.3" y="611.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="282.3" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.34%)</title><rect x="279.3" y="595.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="282.3" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.34%)</title><rect x="279.3" y="579.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="282.3" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.34%)</title><rect x="283.2" y="691.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="286.2" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (16 samples, 5.37%)</title><rect x="287.2" y="723.0" width="63.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="290.2" y="734.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.34%)</title><rect x="287.2" y="707.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="290.2" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.34%)</title><rect x="291.1" y="707.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="294.1" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.34%)</title><rect x="295.1" y="707.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="298.1" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (3 samples, 1.01%)</title><rect x="299.1" y="707.0" width="11.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="302.1" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.34%)</title><rect x="307.0" y="691.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="310.0" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.34%)</title><rect x="307.0" y="675.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="310.0" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.34%)</title><rect x="307.0" y="659.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="310.0" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.34%)</title><rect x="307.0" y="643.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="310.0" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.34%)</title><rect x="307.0" y="627.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="310.0" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.34%)</title><rect x="307.0" y="611.0" width="3.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="310.0" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.34%)</title><rect x="307.0" y="595.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="310.0" y="606.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.34%)</title><rect x="307.0" y="579.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="310.0" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.34%)</title><rect x="307.0" y="563.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="310.0" y="574.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire_region(HeapRegion*, unsigned long) (1 samples, 0.34%)</title><rect x="307.0" y="547.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="310.0" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.67%)</title><rect x="310.9" y="707.0" width="8.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="313.9" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.34%)</title><rect x="314.9" y="691.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="317.9" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.34%)</title><rect x="314.9" y="675.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="317.9" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.34%)</title><rect x="314.9" y="659.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="317.9" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.34%)</title><rect x="314.9" y="643.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="317.9" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.34%)</title><rect x="314.9" y="627.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="317.9" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.34%)</title><rect x="314.9" y="611.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="317.9" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.34%)</title><rect x="314.9" y="595.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="317.9" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.34%)</title><rect x="314.9" y="579.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="317.9" y="590.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.34%)</title><rect x="314.9" y="563.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="317.9" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (8 samples, 2.68%)</title><rect x="318.9" y="707.0" width="31.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="321.9" y="718.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (8 samples, 2.68%)</title><rect x="318.9" y="691.0" width="31.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="321.9" y="702.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.34%)</title><rect x="318.9" y="675.0" width="3.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="321.9" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.34%)</title><rect x="318.9" y="659.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="321.9" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.34%)</title><rect x="318.9" y="643.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="321.9" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.34%)</title><rect x="318.9" y="627.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="321.9" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.34%)</title><rect x="318.9" y="611.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="321.9" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.34%)</title><rect x="318.9" y="595.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="321.9" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (7 samples, 2.35%)</title><rect x="322.8" y="675.0" width="27.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="325.8" y="686.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (7 samples, 2.35%)</title><rect x="322.8" y="659.0" width="27.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="325.8" y="670.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (6 samples, 2.01%)</title><rect x="326.8" y="643.0" width="23.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="329.8" y="654.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.34%)</title><rect x="326.8" y="627.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="329.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.34%)</title><rect x="326.8" y="611.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="329.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.34%)</title><rect x="330.7" y="627.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="333.7" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.34%)</title><rect x="330.7" y="611.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="333.7" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.34%)</title><rect x="330.7" y="595.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="333.7" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.34%)</title><rect x="330.7" y="579.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="333.7" y="590.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.34%)</title><rect x="330.7" y="563.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="333.7" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.34%)</title><rect x="334.7" y="627.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="337.7" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.34%)</title><rect x="338.7" y="627.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="341.7" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.34%)</title><rect x="338.7" y="611.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="341.7" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.34%)</title><rect x="338.7" y="595.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="341.7" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.34%)</title><rect x="338.7" y="579.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="341.7" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.67%)</title><rect x="342.6" y="627.0" width="7.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="345.6" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.67%)</title><rect x="342.6" y="611.0" width="7.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="345.6" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.67%)</title><rect x="342.6" y="595.0" width="7.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="345.6" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.34%)</title><rect x="346.6" y="579.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="349.6" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.67%)</title><rect x="350.5" y="723.0" width="8.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="353.5" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.67%)</title><rect x="350.5" y="707.0" width="8.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="353.5" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.67%)</title><rect x="350.5" y="691.0" width="8.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="353.5" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.67%)</title><rect x="350.5" y="675.0" width="8.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="353.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.67%)</title><rect x="350.5" y="659.0" width="8.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="353.5" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (145 samples, 48.66%)</title><rect x="358.5" y="819.0" width="574.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="361.5" y="830.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (26 samples, 8.72%)</title><rect x="358.5" y="803.0" width="102.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="361.5" y="814.0">com/linecorp..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (24 samples, 8.05%)</title><rect x="366.4" y="787.0" width="95.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="369.4" y="798.0">org/slf4j/M..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (22 samples, 7.38%)</title><rect x="374.3" y="771.0" width="87.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="377.3" y="782.0">ch/qos/log..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (9 samples, 3.02%)</title><rect x="386.2" y="755.0" width="35.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="389.2" y="766.0">ch/..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.67%)</title><rect x="413.9" y="739.0" width="7.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="416.9" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.67%)</title><rect x="413.9" y="723.0" width="7.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="416.9" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.67%)</title><rect x="413.9" y="707.0" width="7.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="416.9" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (10 samples, 3.36%)</title><rect x="421.8" y="755.0" width="39.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="424.8" y="766.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (8 samples, 2.68%)</title><rect x="429.7" y="739.0" width="31.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="432.7" y="750.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (8 samples, 2.68%)</title><rect x="429.7" y="723.0" width="31.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="432.7" y="734.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 1.01%)</title><rect x="461.4" y="803.0" width="11.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="464.4" y="814.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 1.01%)</title><rect x="461.4" y="787.0" width="11.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="464.4" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (21 samples, 7.05%)</title><rect x="473.3" y="803.0" width="83.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="476.3" y="814.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (21 samples, 7.05%)</title><rect x="473.3" y="787.0" width="83.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="476.3" y="798.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (12 samples, 4.03%)</title><rect x="477.2" y="771.0" width="47.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="480.2" y="782.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (10 samples, 3.36%)</title><rect x="485.2" y="755.0" width="39.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="488.2" y="766.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (6 samples, 2.01%)</title><rect x="497.0" y="739.0" width="23.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="500.0" y="750.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 1.34%)</title><rect x="501.0" y="723.0" width="15.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="504.0" y="734.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (4 samples, 1.34%)</title><rect x="501.0" y="707.0" width="15.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="504.0" y="718.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 1.34%)</title><rect x="501.0" y="691.0" width="15.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="504.0" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (4 samples, 1.34%)</title><rect x="501.0" y="675.0" width="15.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="504.0" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 1.01%)</title><rect x="501.0" y="659.0" width="11.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="504.0" y="670.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 1.01%)</title><rect x="501.0" y="643.0" width="11.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="504.0" y="654.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.67%)</title><rect x="501.0" y="627.0" width="7.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="504.0" y="638.0"></text>
</g>
<g>
<title>CodeBlob::oop_map_for_return_address(unsigned char*) (1 samples, 0.34%)</title><rect x="501.0" y="611.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="504.0" y="622.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.34%)</title><rect x="505.0" y="611.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="508.0" y="622.0"></text>
</g>
<g>
<title>nmethod::is_nmethod() const (1 samples, 0.34%)</title><rect x="508.9" y="627.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="511.9" y="638.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.34%)</title><rect x="512.9" y="659.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="515.9" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.34%)</title><rect x="512.9" y="643.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="515.9" y="654.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.34%)</title><rect x="512.9" y="627.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="515.9" y="638.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.34%)</title><rect x="516.8" y="723.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="519.8" y="734.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.34%)</title><rect x="520.8" y="739.0" width="4.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="523.8" y="750.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (2 samples, 0.67%)</title><rect x="524.8" y="771.0" width="7.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="527.8" y="782.0"></text>
</g>
<g>
<title>java/lang/Long.toString (2 samples, 0.67%)</title><rect x="524.8" y="755.0" width="7.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="527.8" y="766.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.67%)</title><rect x="524.8" y="739.0" width="7.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="527.8" y="750.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (6 samples, 2.01%)</title><rect x="532.7" y="771.0" width="23.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="535.7" y="782.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (5 samples, 1.68%)</title><rect x="536.6" y="755.0" width="19.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="539.6" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.34%)</title><rect x="536.6" y="739.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="539.6" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.34%)</title><rect x="536.6" y="723.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="539.6" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.34%)</title><rect x="536.6" y="707.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="539.6" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.34%)</title><rect x="536.6" y="691.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="539.6" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.34%)</title><rect x="540.6" y="739.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="543.6" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.34%)</title><rect x="540.6" y="723.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="543.6" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.34%)</title><rect x="540.6" y="707.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="543.6" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.34%)</title><rect x="540.6" y="691.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="543.6" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.34%)</title><rect x="540.6" y="675.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="543.6" y="686.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (3 samples, 1.01%)</title><rect x="544.6" y="739.0" width="11.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="547.6" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.67%)</title><rect x="548.5" y="723.0" width="7.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="551.5" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.67%)</title><rect x="548.5" y="707.0" width="7.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="551.5" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.34%)</title><rect x="548.5" y="691.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="551.5" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.34%)</title><rect x="552.5" y="691.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="555.5" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (82 samples, 27.52%)</title><rect x="556.4" y="803.0" width="324.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="559.4" y="814.0">com/linecorp/decaton/processor/runtime/inter..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (82 samples, 27.52%)</title><rect x="556.4" y="787.0" width="324.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="559.4" y="798.0">com/linecorp/decaton/processor/runtime/inter..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$209/1522548880.process (61 samples, 20.47%)</title><rect x="556.4" y="771.0" width="241.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="559.4" y="782.0">com/linecorp/decaton/benchmark/D..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (61 samples, 20.47%)</title><rect x="556.4" y="755.0" width="241.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="559.4" y="766.0">com/linecorp/decaton/benchmark/D..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (61 samples, 20.47%)</title><rect x="556.4" y="739.0" width="241.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="559.4" y="750.0">com/linecorp/decaton/benchmark/R..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.34%)</title><rect x="568.3" y="723.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="571.3" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.34%)</title><rect x="568.3" y="707.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="571.3" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.34%)</title><rect x="568.3" y="691.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="571.3" y="702.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.34%)</title><rect x="568.3" y="675.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="571.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.34%)</title><rect x="568.3" y="659.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="571.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.34%)</title><rect x="568.3" y="643.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="571.3" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (56 samples, 18.79%)</title><rect x="572.3" y="723.0" width="221.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="575.3" y="734.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>java/lang/Thread.sleep (54 samples, 18.12%)</title><rect x="572.3" y="707.0" width="213.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="575.3" y="718.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (48 samples, 16.11%)</title><rect x="592.1" y="691.0" width="190.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="595.1" y="702.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (5 samples, 1.68%)</title><rect x="607.9" y="675.0" width="19.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="610.9" y="686.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.67%)</title><rect x="627.7" y="675.0" width="7.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="630.7" y="686.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 1.34%)</title><rect x="635.6" y="675.0" width="15.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="638.6" y="686.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 1.01%)</title><rect x="639.6" y="659.0" width="11.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="642.6" y="670.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.34%)</title><rect x="651.5" y="675.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="654.5" y="686.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (32 samples, 10.74%)</title><rect x="655.4" y="675.0" width="126.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="658.4" y="686.0">os::sleep(Thread..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.67%)</title><rect x="671.3" y="659.0" width="7.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="674.3" y="670.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.67%)</title><rect x="671.3" y="643.0" width="7.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="674.3" y="654.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.67%)</title><rect x="679.2" y="659.0" width="7.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="682.2" y="670.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (14 samples, 4.70%)</title><rect x="687.1" y="659.0" width="55.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="690.1" y="670.0">__pth..</text>
</g>
<g>
<title>_init (1 samples, 0.34%)</title><rect x="742.6" y="659.0" width="3.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="745.6" y="670.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (5 samples, 1.68%)</title><rect x="746.5" y="659.0" width="19.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="749.5" y="670.0"></text>
</g>
<g>
<title>pthread_cond_destroy@@GLIBC_2.3.2 (1 samples, 0.34%)</title><rect x="766.3" y="659.0" width="4.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="769.3" y="670.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.67%)</title><rect x="770.3" y="659.0" width="7.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="773.3" y="670.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.34%)</title><rect x="778.2" y="659.0" width="3.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="781.2" y="670.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.34%)</title><rect x="782.1" y="691.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="785.1" y="702.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.67%)</title><rect x="786.1" y="707.0" width="7.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="789.1" y="718.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.67%)</title><rect x="786.1" y="691.0" width="7.9" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="789.1" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.34%)</title><rect x="794.0" y="723.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="797.0" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (3 samples, 1.01%)</title><rect x="798.0" y="771.0" width="11.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="801.0" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (5 samples, 1.68%)</title><rect x="809.9" y="771.0" width="19.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="812.9" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (3 samples, 1.01%)</title><rect x="817.8" y="755.0" width="11.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="820.8" y="766.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.34%)</title><rect x="829.7" y="771.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="832.7" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.34%)</title><rect x="829.7" y="755.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="832.7" y="766.0"></text>
</g>
<g>
<title>java/util/ArrayList.isEmpty (1 samples, 0.34%)</title><rect x="829.7" y="739.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="832.7" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.34%)</title><rect x="833.6" y="771.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="836.6" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.34%)</title><rect x="833.6" y="755.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="836.6" y="766.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.34%)</title><rect x="837.6" y="771.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="840.6" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.34%)</title><rect x="837.6" y="755.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="840.6" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.34%)</title><rect x="837.6" y="739.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="840.6" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.34%)</title><rect x="837.6" y="723.0" width="3.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="840.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.67%)</title><rect x="841.5" y="771.0" width="8.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="844.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 1.68%)</title><rect x="849.5" y="771.0" width="19.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="852.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 1.68%)</title><rect x="849.5" y="755.0" width="19.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="852.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 1.68%)</title><rect x="849.5" y="739.0" width="19.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="852.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (5 samples, 1.68%)</title><rect x="849.5" y="723.0" width="19.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="852.5" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (5 samples, 1.68%)</title><rect x="849.5" y="707.0" width="19.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="852.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (5 samples, 1.68%)</title><rect x="849.5" y="691.0" width="19.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="852.5" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$295/1870380631.accept (5 samples, 1.68%)</title><rect x="849.5" y="675.0" width="19.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="852.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReference.get (3 samples, 1.01%)</title><rect x="869.3" y="771.0" width="11.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="872.3" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 4.36%)</title><rect x="881.1" y="803.0" width="51.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="884.1" y="814.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 4.36%)</title><rect x="881.1" y="787.0" width="51.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="884.1" y="798.0">java/..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.34%)</title><rect x="908.9" y="771.0" width="3.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="911.9" y="782.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.34%)</title><rect x="908.9" y="755.0" width="3.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="911.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 1.68%)</title><rect x="912.8" y="771.0" width="19.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="915.8" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.67%)</title><rect x="912.8" y="755.0" width="7.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="915.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.67%)</title><rect x="912.8" y="739.0" width="7.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="915.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 0.67%)</title><rect x="912.8" y="723.0" width="7.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="915.8" y="734.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.67%)</title><rect x="912.8" y="707.0" width="7.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="915.8" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 1.01%)</title><rect x="920.7" y="755.0" width="11.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="923.7" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$300/648829906.accept (3 samples, 1.01%)</title><rect x="920.7" y="739.0" width="11.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="923.7" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$57 (3 samples, 1.01%)</title><rect x="920.7" y="723.0" width="11.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="923.7" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (3 samples, 1.01%)</title><rect x="920.7" y="707.0" width="11.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="923.7" y="718.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (3 samples, 1.01%)</title><rect x="920.7" y="691.0" width="11.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="923.7" y="702.0"></text>
</g>
<g>
<title>java/time/Duration.create (3 samples, 1.01%)</title><rect x="920.7" y="675.0" width="11.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="923.7" y="686.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.34%)</title><rect x="928.7" y="659.0" width="3.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="931.7" y="670.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.34%)</title><rect x="928.7" y="643.0" width="3.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="931.7" y="654.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.34%)</title><rect x="932.6" y="819.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="935.6" y="830.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.34%)</title><rect x="932.6" y="803.0" width="4.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="935.6" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (3 samples, 1.01%)</title><rect x="936.6" y="883.0" width="11.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="939.6" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.01%)</title><rect x="936.6" y="867.0" width="11.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="939.6" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 1.01%)</title><rect x="936.6" y="851.0" width="11.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="939.6" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 1.01%)</title><rect x="936.6" y="835.0" width="11.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="939.6" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (10 samples, 3.36%)</title><rect x="948.5" y="883.0" width="39.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="951.5" y="894.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (9 samples, 3.02%)</title><rect x="952.4" y="867.0" width="35.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="955.4" y="878.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (4 samples, 1.34%)</title><rect x="964.3" y="851.0" width="15.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="967.3" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (4 samples, 1.34%)</title><rect x="964.3" y="835.0" width="15.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="967.3" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 1.34%)</title><rect x="964.3" y="819.0" width="15.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="967.3" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 1.34%)</title><rect x="964.3" y="803.0" width="15.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="967.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 1.34%)</title><rect x="964.3" y="787.0" width="15.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="967.3" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.67%)</title><rect x="980.1" y="851.0" width="8.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="983.1" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.67%)</title><rect x="980.1" y="835.0" width="8.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="983.1" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.67%)</title><rect x="980.1" y="819.0" width="8.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="983.1" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.67%)</title><rect x="980.1" y="803.0" width="8.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="983.1" y="814.0"></text>
</g>
<g>
<title>start_thread (51 samples, 17.11%)</title><rect x="988.1" y="931.0" width="201.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="991.1" y="942.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (51 samples, 17.11%)</title><rect x="988.1" y="915.0" width="201.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="991.1" y="926.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (19 samples, 6.38%)</title><rect x="988.1" y="899.0" width="75.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="991.1" y="910.0">GangWork..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (19 samples, 6.38%)</title><rect x="988.1" y="883.0" width="75.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="991.1" y="894.0">G1ParTas..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 1.34%)</title><rect x="988.1" y="867.0" width="15.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="991.1" y="878.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (3 samples, 1.01%)</title><rect x="992.0" y="851.0" width="11.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="995.0" y="862.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.67%)</title><rect x="996.0" y="835.0" width="7.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="999.0" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.34%)</title><rect x="999.9" y="819.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1002.9" y="830.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.34%)</title><rect x="999.9" y="803.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1002.9" y="814.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (13 samples, 4.36%)</title><rect x="1003.9" y="867.0" width="51.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1006.9" y="878.0">G1Roo..</text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.34%)</title><rect x="1003.9" y="851.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1006.9" y="862.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.34%)</title><rect x="1003.9" y="835.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1006.9" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.34%)</title><rect x="1003.9" y="819.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1006.9" y="830.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.34%)</title><rect x="1003.9" y="803.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1006.9" y="814.0"></text>
</g>
<g>
<title>PtrQueueSet::allocate_buffer() (1 samples, 0.34%)</title><rect x="1003.9" y="787.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1006.9" y="798.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.34%)</title><rect x="1003.9" y="771.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1006.9" y="782.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.34%)</title><rect x="1003.9" y="755.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1006.9" y="766.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (4 samples, 1.34%)</title><rect x="1007.9" y="851.0" width="15.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1010.9" y="862.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.34%)</title><rect x="1007.9" y="835.0" width="3.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1010.9" y="846.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.34%)</title><rect x="1007.9" y="819.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1010.9" y="830.0"></text>
</g>
<g>
<title>JNIHandleBlock::oops_do(OopClosure*) (1 samples, 0.34%)</title><rect x="1007.9" y="803.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1010.9" y="814.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (3 samples, 1.01%)</title><rect x="1011.8" y="835.0" width="11.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1014.8" y="846.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (3 samples, 1.01%)</title><rect x="1011.8" y="819.0" width="11.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1014.8" y="830.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CLDClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.34%)</title><rect x="1011.8" y="803.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1014.8" y="814.0"></text>
</g>
<g>
<title>nmethod::preserve_callee_argument_oops(frame, RegisterMap const*, OopClosure*) (1 samples, 0.34%)</title><rect x="1011.8" y="787.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1014.8" y="798.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (2 samples, 0.67%)</title><rect x="1015.8" y="803.0" width="7.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1018.8" y="814.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (8 samples, 2.68%)</title><rect x="1023.7" y="851.0" width="31.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1026.7" y="862.0">G1..</text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (7 samples, 2.35%)</title><rect x="1023.7" y="835.0" width="27.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1026.7" y="846.0">S..</text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.34%)</title><rect x="1051.4" y="835.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1054.4" y="846.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.34%)</title><rect x="1051.4" y="819.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1054.4" y="830.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (2 samples, 0.67%)</title><rect x="1055.4" y="867.0" width="7.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1058.4" y="878.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.67%)</title><rect x="1055.4" y="851.0" width="7.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1058.4" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (1 samples, 0.34%)</title><rect x="1055.4" y="835.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1058.4" y="846.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (1 samples, 0.34%)</title><rect x="1055.4" y="819.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1058.4" y="830.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.34%)</title><rect x="1055.4" y="803.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1058.4" y="814.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (1 samples, 0.34%)</title><rect x="1055.4" y="787.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1058.4" y="798.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.34%)</title><rect x="1055.4" y="771.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1058.4" y="782.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.34%)</title><rect x="1055.4" y="755.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1058.4" y="766.0"></text>
</g>
<g>
<title>G1HotCardCache::drain(unsigned int, G1RemSet*, DirtyCardQueue*) (1 samples, 0.34%)</title><rect x="1059.3" y="835.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1062.3" y="846.0"></text>
</g>
<g>
<title>JavaThread::run() (32 samples, 10.74%)</title><rect x="1063.3" y="899.0" width="126.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1066.3" y="910.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (32 samples, 10.74%)</title><rect x="1063.3" y="883.0" width="126.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1066.3" y="894.0">JavaThread::thre..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (32 samples, 10.74%)</title><rect x="1063.3" y="867.0" width="126.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1066.3" y="878.0">CompileBroker::c..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (31 samples, 10.40%)</title><rect x="1063.3" y="851.0" width="122.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1066.3" y="862.0">CompileBroker::..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (28 samples, 9.40%)</title><rect x="1063.3" y="835.0" width="110.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1066.3" y="846.0">C2Compiler::c..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (28 samples, 9.40%)</title><rect x="1063.3" y="819.0" width="110.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1066.3" y="830.0">Compile::Comp..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.34%)</title><rect x="1063.3" y="803.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1066.3" y="814.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.34%)</title><rect x="1063.3" y="787.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1066.3" y="798.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.34%)</title><rect x="1063.3" y="771.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1066.3" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.34%)</title><rect x="1063.3" y="755.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1066.3" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.34%)</title><rect x="1063.3" y="739.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1066.3" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.34%)</title><rect x="1063.3" y="723.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1066.3" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.34%)</title><rect x="1063.3" y="707.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1066.3" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.34%)</title><rect x="1063.3" y="691.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1066.3" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.34%)</title><rect x="1063.3" y="675.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1066.3" y="686.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.34%)</title><rect x="1063.3" y="659.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1066.3" y="670.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.34%)</title><rect x="1063.3" y="643.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1066.3" y="654.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.34%)</title><rect x="1063.3" y="627.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1066.3" y="638.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.34%)</title><rect x="1063.3" y="611.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1066.3" y="622.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.34%)</title><rect x="1063.3" y="595.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1066.3" y="606.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_if_loaded(constantPoolHandle, int) (1 samples, 0.34%)</title><rect x="1063.3" y="579.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1066.3" y="590.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (17 samples, 5.70%)</title><rect x="1067.2" y="803.0" width="67.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1070.2" y="814.0">Compile..</text>
</g>
<g>
<title>Compile::Output() (3 samples, 1.01%)</title><rect x="1067.2" y="787.0" width="11.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1070.2" y="798.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.34%)</title><rect x="1067.2" y="771.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1070.2" y="782.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.34%)</title><rect x="1067.2" y="755.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1070.2" y="766.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.34%)</title><rect x="1067.2" y="739.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1070.2" y="750.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.34%)</title><rect x="1071.2" y="771.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1074.2" y="782.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.34%)</title><rect x="1071.2" y="755.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1074.2" y="766.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.34%)</title><rect x="1071.2" y="739.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1074.2" y="750.0"></text>
</g>
<g>
<title>ShouldNotReachHereNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.34%)</title><rect x="1071.2" y="723.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1074.2" y="734.0"></text>
</g>
<g>
<title>MacroAssembler::int3() (1 samples, 0.34%)</title><rect x="1071.2" y="707.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1074.2" y="718.0"></text>
</g>
<g>
<title>MacroAssembler::call(AddressLiteral) (1 samples, 0.34%)</title><rect x="1071.2" y="691.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1074.2" y="702.0"></text>
</g>
<g>
<title>Assembler::reachable(AddressLiteral) (1 samples, 0.34%)</title><rect x="1071.2" y="675.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1074.2" y="686.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.34%)</title><rect x="1075.2" y="771.0" width="3.9" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1078.2" y="782.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.67%)</title><rect x="1079.1" y="787.0" width="7.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1082.1" y="798.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.67%)</title><rect x="1079.1" y="771.0" width="7.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1082.1" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.34%)</title><rect x="1087.0" y="787.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1090.0" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.34%)</title><rect x="1087.0" y="771.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1090.0" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (11 samples, 3.69%)</title><rect x="1091.0" y="787.0" width="43.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1094.0" y="798.0">Phas..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.34%)</title><rect x="1091.0" y="771.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1094.0" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.34%)</title><rect x="1095.0" y="771.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1098.0" y="782.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.34%)</title><rect x="1095.0" y="755.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1098.0" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.34%)</title><rect x="1098.9" y="771.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1101.9" y="782.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.34%)</title><rect x="1098.9" y="755.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1101.9" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 0.67%)</title><rect x="1102.9" y="771.0" width="7.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1105.9" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (1 samples, 0.34%)</title><rect x="1110.8" y="771.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1113.8" y="782.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.34%)</title><rect x="1110.8" y="755.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1113.8" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.34%)</title><rect x="1114.8" y="771.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1117.8" y="782.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.34%)</title><rect x="1118.7" y="771.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1121.7" y="782.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.34%)</title><rect x="1118.7" y="755.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1121.7" y="766.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 1.01%)</title><rect x="1122.7" y="771.0" width="11.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1125.7" y="782.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.67%)</title><rect x="1126.6" y="755.0" width="8.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1129.6" y="766.0"></text>
</g>
<g>
<title>Compile::Optimize() (7 samples, 2.35%)</title><rect x="1134.6" y="803.0" width="27.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1137.6" y="814.0">C..</text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.34%)</title><rect x="1134.6" y="787.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1137.6" y="798.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.34%)</title><rect x="1134.6" y="771.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1137.6" y="782.0"></text>
</g>
<g>
<title>GrowableArray&lt;Node*&gt;::push(Node* const&amp;) (1 samples, 0.34%)</title><rect x="1134.6" y="755.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1137.6" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (4 samples, 1.34%)</title><rect x="1138.5" y="787.0" width="15.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1141.5" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.01%)</title><rect x="1138.5" y="771.0" width="11.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1141.5" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 0.67%)</title><rect x="1142.5" y="755.0" width="7.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1145.5" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.34%)</title><rect x="1146.4" y="739.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1149.4" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.34%)</title><rect x="1146.4" y="723.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1149.4" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.34%)</title><rect x="1150.4" y="771.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1153.4" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.67%)</title><rect x="1154.4" y="787.0" width="7.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.4" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.67%)</title><rect x="1154.4" y="771.0" width="7.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1157.4" y="782.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.34%)</title><rect x="1154.4" y="755.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1157.4" y="766.0"></text>
</g>
<g>
<title>PhiNode::Identity(PhaseTransform*) (1 samples, 0.34%)</title><rect x="1158.3" y="755.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.3" y="766.0"></text>
</g>
<g>
<title>PhiNode::is_diamond_phi(bool) const (1 samples, 0.34%)</title><rect x="1158.3" y="739.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1161.3" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.01%)</title><rect x="1162.3" y="803.0" width="11.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.3" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.01%)</title><rect x="1162.3" y="787.0" width="11.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.3" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.01%)</title><rect x="1162.3" y="771.0" width="11.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.01%)</title><rect x="1162.3" y="755.0" width="11.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.01%)</title><rect x="1162.3" y="739.0" width="11.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.01%)</title><rect x="1162.3" y="723.0" width="11.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.3" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.67%)</title><rect x="1162.3" y="707.0" width="7.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.3" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.67%)</title><rect x="1162.3" y="691.0" width="7.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.67%)</title><rect x="1162.3" y="675.0" width="7.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.67%)</title><rect x="1162.3" y="659.0" width="7.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.67%)</title><rect x="1162.3" y="643.0" width="7.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1165.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.67%)</title><rect x="1162.3" y="627.0" width="7.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.3" y="638.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.34%)</title><rect x="1162.3" y="611.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.3" y="622.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.34%)</title><rect x="1162.3" y="595.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.3" y="606.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.34%)</title><rect x="1162.3" y="579.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.3" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.34%)</title><rect x="1162.3" y="563.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.3" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.34%)</title><rect x="1162.3" y="547.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.3" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.34%)</title><rect x="1162.3" y="531.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.3" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.34%)</title><rect x="1162.3" y="515.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.3" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.34%)</title><rect x="1162.3" y="499.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.3" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.34%)</title><rect x="1162.3" y="483.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.3" y="494.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.34%)</title><rect x="1162.3" y="467.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.3" y="478.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.34%)</title><rect x="1162.3" y="451.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.3" y="462.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.34%)</title><rect x="1162.3" y="435.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.3" y="446.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.34%)</title><rect x="1162.3" y="419.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.3" y="430.0"></text>
</g>
<g>
<title>ciField::initialize_from(fieldDescriptor*) (1 samples, 0.34%)</title><rect x="1162.3" y="403.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.3" y="414.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.34%)</title><rect x="1162.3" y="387.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.3" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1166.2" y="611.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.2" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1166.2" y="595.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1166.2" y="579.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1166.2" y="563.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1166.2" y="547.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1166.2" y="531.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.2" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1166.2" y="515.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.2" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1166.2" y="499.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1166.2" y="483.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1166.2" y="467.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1166.2" y="451.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1166.2" y="435.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.2" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1166.2" y="419.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.2" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1166.2" y="403.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1166.2" y="387.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1166.2" y="371.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1166.2" y="355.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.2" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1166.2" y="339.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1169.2" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1166.2" y="323.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.2" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1166.2" y="307.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1166.2" y="291.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.2" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1166.2" y="275.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.2" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1166.2" y="259.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.2" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1166.2" y="243.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.2" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1166.2" y="227.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.2" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1166.2" y="211.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.2" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1166.2" y="195.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.2" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1166.2" y="179.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.2" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1166.2" y="163.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.2" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1166.2" y="147.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.2" y="158.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1166.2" y="131.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.2" y="142.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1166.2" y="115.0" width="4.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1169.2" y="126.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1166.2" y="99.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.2" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1166.2" y="83.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.2" y="94.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1166.2" y="67.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.2" y="78.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.34%)</title><rect x="1166.2" y="51.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.2" y="62.0"></text>
</g>
<g>
<title>GraphKit::stopped() (1 samples, 0.34%)</title><rect x="1166.2" y="35.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.2" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1170.2" y="707.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.2" y="718.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1170.2" y="691.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1173.2" y="702.0"></text>
</g>
<g>
<title>GraphKit::set_edges_for_java_call(CallJavaNode*, bool, bool) (1 samples, 0.34%)</title><rect x="1170.2" y="675.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.2" y="686.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.34%)</title><rect x="1170.2" y="659.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.2" y="670.0"></text>
</g>
<g>
<title>ProjNode::Value(PhaseTransform*) const (1 samples, 0.34%)</title><rect x="1170.2" y="643.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.2" y="654.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.01%)</title><rect x="1174.2" y="835.0" width="11.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.2" y="846.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.01%)</title><rect x="1174.2" y="819.0" width="11.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.2" y="830.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.01%)</title><rect x="1174.2" y="803.0" width="11.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.2" y="814.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.01%)</title><rect x="1174.2" y="787.0" width="11.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.2" y="798.0"></text>
</g>
<g>
<title>Compilation::build_hir() (2 samples, 0.67%)</title><rect x="1174.2" y="771.0" width="7.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.2" y="782.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (2 samples, 0.67%)</title><rect x="1174.2" y="755.0" width="7.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.2" y="766.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (2 samples, 0.67%)</title><rect x="1174.2" y="739.0" width="7.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.2" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (2 samples, 0.67%)</title><rect x="1174.2" y="723.0" width="7.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.2" y="734.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.34%)</title><rect x="1174.2" y="707.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.2" y="718.0"></text>
</g>
<g>
<title>BlockListBuilder::set_leaders() (1 samples, 0.34%)</title><rect x="1174.2" y="691.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.2" y="702.0"></text>
</g>
<g>
<title>ciMethod::bci_block_start() (1 samples, 0.34%)</title><rect x="1174.2" y="675.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.2" y="686.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.34%)</title><rect x="1174.2" y="659.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.2" y="670.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.34%)</title><rect x="1174.2" y="643.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.2" y="654.0"></text>
</g>
<g>
<title>ciMethod::get_method_blocks() (1 samples, 0.34%)</title><rect x="1174.2" y="627.0" width="3.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.2" y="638.0"></text>
</g>
<g>
<title>ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*) (1 samples, 0.34%)</title><rect x="1174.2" y="611.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.2" y="622.0"></text>
</g>
<g>
<title>ciMethodBlocks::do_analysis() (1 samples, 0.34%)</title><rect x="1174.2" y="595.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.2" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.34%)</title><rect x="1178.1" y="707.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.1" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.34%)</title><rect x="1178.1" y="691.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.1" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.34%)</title><rect x="1178.1" y="675.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.1" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.34%)</title><rect x="1178.1" y="659.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.1" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.34%)</title><rect x="1178.1" y="643.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.1" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::round_fp(Instruction*) (1 samples, 0.34%)</title><rect x="1178.1" y="627.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.1" y="638.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.34%)</title><rect x="1182.1" y="771.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.1" y="782.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.34%)</title><rect x="1182.1" y="755.0" width="3.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.1" y="766.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.34%)</title><rect x="1182.1" y="739.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.1" y="750.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.34%)</title><rect x="1182.1" y="723.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.1" y="734.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.34%)</title><rect x="1182.1" y="707.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.1" y="718.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (1 samples, 0.34%)</title><rect x="1182.1" y="691.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.1" y="702.0"></text>
</g>
<g>
<title>LinearScanWalker::set_use_pos(Interval*, int, bool) (1 samples, 0.34%)</title><rect x="1182.1" y="675.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.1" y="686.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.34%)</title><rect x="1186.0" y="851.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.0" y="862.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::select_task(CompileQueue*) (1 samples, 0.34%)</title><rect x="1186.0" y="835.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.0" y="846.0"></text>
</g>
</g>
</svg>
