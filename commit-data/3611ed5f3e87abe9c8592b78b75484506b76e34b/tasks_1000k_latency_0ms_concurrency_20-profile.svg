<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="998" onload="init(evt)" viewBox="0 0 1200 998" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="981"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="981"> </text>
<g id="frames">
<g>
<title>all (1,192 samples, 100.00%)</title><rect x="10.0" y="947.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="958.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (282 samples, 23.66%)</title><rect x="10.0" y="931.0" width="279.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="942.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (282 samples, 23.66%)</title><rect x="10.0" y="915.0" width="279.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="926.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.08%)</title><rect x="10.0" y="899.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="10.0" y="883.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (3 samples, 0.25%)</title><rect x="11.0" y="899.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="14.0" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (3 samples, 0.25%)</title><rect x="11.0" y="883.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.0" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.25%)</title><rect x="11.0" y="867.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.0" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.25%)</title><rect x="11.0" y="851.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.0" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.17%)</title><rect x="12.0" y="835.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.0" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="13.0" y="819.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.0" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="13.0" y="803.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.0" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.08%)</title><rect x="13.0" y="787.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.0" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.08%)</title><rect x="14.0" y="899.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.0" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.08%)</title><rect x="14.0" y="883.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.0" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="14.0" y="867.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.0" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="14.0" y="851.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.0" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="14.0" y="835.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.0" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="14.0" y="819.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="17.0" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="14.0" y="803.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="17.0" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.08%)</title><rect x="14.0" y="787.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="17.0" y="798.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::write_region_work(MemRegion) (1 samples, 0.08%)</title><rect x="14.0" y="771.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="17.0" y="782.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::invalidate(MemRegion, bool) (1 samples, 0.08%)</title><rect x="14.0" y="755.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="17.0" y="766.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.08%)</title><rect x="14.0" y="739.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="17.0" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (5 samples, 0.42%)</title><rect x="14.9" y="899.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.9" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (5 samples, 0.42%)</title><rect x="14.9" y="883.0" width="5.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="17.9" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (5 samples, 0.42%)</title><rect x="14.9" y="867.0" width="5.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="17.9" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$273/64251199.accept (5 samples, 0.42%)</title><rect x="14.9" y="851.0" width="5.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="17.9" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (5 samples, 0.42%)</title><rect x="14.9" y="835.0" width="5.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="17.9" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (5 samples, 0.42%)</title><rect x="14.9" y="819.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="17.9" y="830.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (3 samples, 0.25%)</title><rect x="16.9" y="803.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.9" y="814.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (211 samples, 17.70%)</title><rect x="19.9" y="899.0" width="208.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="22.9" y="910.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$272/944455893.accept (199 samples, 16.69%)</title><rect x="20.9" y="883.0" width="197.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="23.9" y="894.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (199 samples, 16.69%)</title><rect x="20.9" y="867.0" width="197.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.9" y="878.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (177 samples, 14.85%)</title><rect x="20.9" y="851.0" width="175.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="23.9" y="862.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (177 samples, 14.85%)</title><rect x="20.9" y="835.0" width="175.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.9" y="846.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (177 samples, 14.85%)</title><rect x="20.9" y="819.0" width="175.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="23.9" y="830.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (177 samples, 14.85%)</title><rect x="20.9" y="803.0" width="175.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.9" y="814.0">java/util/concurrent/Ex..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (177 samples, 14.85%)</title><rect x="20.9" y="787.0" width="175.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.9" y="798.0">java/util/concurrent/Th..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (145 samples, 12.16%)</title><rect x="52.6" y="771.0" width="143.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="55.6" y="782.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (117 samples, 9.82%)</title><rect x="78.3" y="755.0" width="115.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="81.3" y="766.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (26 samples, 2.18%)</title><rect x="88.2" y="739.0" width="25.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="91.2" y="750.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (26 samples, 2.18%)</title><rect x="88.2" y="723.0" width="25.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="91.2" y="734.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (26 samples, 2.18%)</title><rect x="88.2" y="707.0" width="25.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="91.2" y="718.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (81 samples, 6.80%)</title><rect x="113.9" y="739.0" width="80.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="116.9" y="750.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (81 samples, 6.80%)</title><rect x="113.9" y="723.0" width="80.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="116.9" y="734.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (81 samples, 6.80%)</title><rect x="113.9" y="707.0" width="80.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="116.9" y="718.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (81 samples, 6.80%)</title><rect x="113.9" y="691.0" width="80.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="116.9" y="702.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (78 samples, 6.54%)</title><rect x="116.9" y="675.0" width="77.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="119.9" y="686.0">sun/misc/..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="117.9" y="659.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="120.9" y="670.0"></text>
</g>
<g>
<title>Unsafe_Unpark (64 samples, 5.37%)</title><rect x="118.9" y="659.0" width="63.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="121.9" y="670.0">Unsafe_..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="124.8" y="643.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="127.8" y="654.0"></text>
</g>
<g>
<title>__pthread_cond_signal (39 samples, 3.27%)</title><rect x="125.8" y="643.0" width="38.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="128.8" y="654.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.17%)</title><rect x="164.4" y="643.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="167.4" y="654.0"></text>
</g>
<g>
<title>pthread_mutex_lock (16 samples, 1.34%)</title><rect x="166.4" y="643.0" width="15.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="169.4" y="654.0"></text>
</g>
<g>
<title>__lll_unlock_wake (6 samples, 0.50%)</title><rect x="182.2" y="659.0" width="6.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="185.2" y="670.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.42%)</title><rect x="188.2" y="659.0" width="4.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="191.2" y="670.0"></text>
</g>
<g>
<title>_init (1 samples, 0.08%)</title><rect x="193.1" y="659.0" width="1.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="196.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.17%)</title><rect x="194.1" y="755.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="197.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.17%)</title><rect x="194.1" y="739.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="197.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.17%)</title><rect x="194.1" y="723.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="197.1" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.17%)</title><rect x="194.1" y="707.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="197.1" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (18 samples, 1.51%)</title><rect x="196.1" y="851.0" width="17.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="199.1" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (18 samples, 1.51%)</title><rect x="196.1" y="835.0" width="17.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="199.1" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (18 samples, 1.51%)</title><rect x="196.1" y="819.0" width="17.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="199.1" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (18 samples, 1.51%)</title><rect x="196.1" y="803.0" width="17.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="199.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 0.50%)</title><rect x="208.0" y="787.0" width="5.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="211.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (6 samples, 0.50%)</title><rect x="208.0" y="771.0" width="5.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="211.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 0.50%)</title><rect x="208.0" y="755.0" width="5.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="211.0" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (3 samples, 0.25%)</title><rect x="213.9" y="851.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="216.9" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.25%)</title><rect x="213.9" y="835.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="216.9" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.25%)</title><rect x="213.9" y="819.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="216.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.08%)</title><rect x="216.9" y="851.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="219.9" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.08%)</title><rect x="216.9" y="835.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="219.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.08%)</title><rect x="216.9" y="819.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="219.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.08%)</title><rect x="216.9" y="803.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="219.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.08%)</title><rect x="216.9" y="787.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="219.9" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.08%)</title><rect x="217.9" y="883.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="220.9" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.08%)</title><rect x="217.9" y="867.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="220.9" y="878.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (2 samples, 0.17%)</title><rect x="218.9" y="883.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="221.9" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (2 samples, 0.17%)</title><rect x="218.9" y="867.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="221.9" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (2 samples, 0.17%)</title><rect x="218.9" y="851.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="221.9" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (2 samples, 0.17%)</title><rect x="218.9" y="835.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="221.9" y="846.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.17%)</title><rect x="218.9" y="819.0" width="2.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="221.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (7 samples, 0.59%)</title><rect x="220.9" y="883.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="223.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (7 samples, 0.59%)</title><rect x="220.9" y="867.0" width="6.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="223.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.59%)</title><rect x="220.9" y="851.0" width="6.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="223.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.59%)</title><rect x="220.9" y="835.0" width="6.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="223.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.08%)</title><rect x="227.8" y="883.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="230.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.08%)</title><rect x="227.8" y="867.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="230.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (61 samples, 5.12%)</title><rect x="228.8" y="899.0" width="60.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="231.8" y="910.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (61 samples, 5.12%)</title><rect x="228.8" y="883.0" width="60.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="231.8" y="894.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquireAndEnsureOpen (1 samples, 0.08%)</title><rect x="228.8" y="867.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="231.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquire (1 samples, 0.08%)</title><rect x="228.8" y="851.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="231.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (33 samples, 2.77%)</title><rect x="229.8" y="867.0" width="32.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="232.8" y="878.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (33 samples, 2.77%)</title><rect x="229.8" y="851.0" width="32.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="232.8" y="862.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (33 samples, 2.77%)</title><rect x="229.8" y="835.0" width="32.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="232.8" y="846.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (28 samples, 2.35%)</title><rect x="229.8" y="819.0" width="27.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="232.8" y="830.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (28 samples, 2.35%)</title><rect x="229.8" y="803.0" width="27.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="232.8" y="814.0">o..</text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="231.7" y="787.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="234.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (10 samples, 0.84%)</title><rect x="232.7" y="787.0" width="9.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="235.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (6 samples, 0.50%)</title><rect x="236.7" y="771.0" width="5.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="239.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (6 samples, 0.50%)</title><rect x="236.7" y="755.0" width="5.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="239.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (6 samples, 0.50%)</title><rect x="236.7" y="739.0" width="5.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="239.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (6 samples, 0.50%)</title><rect x="236.7" y="723.0" width="5.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="239.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (6 samples, 0.50%)</title><rect x="236.7" y="707.0" width="5.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="239.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (6 samples, 0.50%)</title><rect x="236.7" y="691.0" width="5.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="239.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (6 samples, 0.50%)</title><rect x="236.7" y="675.0" width="5.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="239.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (15 samples, 1.26%)</title><rect x="242.6" y="787.0" width="14.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="245.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (15 samples, 1.26%)</title><rect x="242.6" y="771.0" width="14.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="245.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (14 samples, 1.17%)</title><rect x="242.6" y="755.0" width="13.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="245.6" y="766.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (14 samples, 1.17%)</title><rect x="242.6" y="739.0" width="13.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="245.6" y="750.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (9 samples, 0.76%)</title><rect x="247.6" y="723.0" width="8.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="250.6" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (9 samples, 0.76%)</title><rect x="247.6" y="707.0" width="8.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="250.6" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (9 samples, 0.76%)</title><rect x="247.6" y="691.0" width="8.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="250.6" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (9 samples, 0.76%)</title><rect x="247.6" y="675.0" width="8.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="250.6" y="686.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.17%)</title><rect x="254.5" y="659.0" width="2.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="257.5" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.toArray (1 samples, 0.08%)</title><rect x="256.5" y="755.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="259.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.toArray (1 samples, 0.08%)</title><rect x="256.5" y="739.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="259.5" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="256.5" y="723.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="259.5" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="256.5" y="707.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="259.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (4 samples, 0.34%)</title><rect x="257.5" y="819.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="260.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (4 samples, 0.34%)</title><rect x="257.5" y="803.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="260.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.08%)</title><rect x="257.5" y="787.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="260.5" y="798.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.08%)</title><rect x="257.5" y="771.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="260.5" y="782.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.08%)</title><rect x="257.5" y="755.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="260.5" y="766.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="257.5" y="739.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="260.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (2 samples, 0.17%)</title><rect x="258.5" y="787.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="261.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.17%)</title><rect x="258.5" y="771.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="261.5" y="782.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="259.5" y="755.0" width="1.0" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="262.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="260.5" y="787.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="263.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="260.5" y="771.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="263.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="260.5" y="755.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="263.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.08%)</title><rect x="261.4" y="819.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="264.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (13 samples, 1.09%)</title><rect x="262.4" y="867.0" width="12.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="265.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (11 samples, 0.92%)</title><rect x="262.4" y="851.0" width="10.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="265.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (9 samples, 0.76%)</title><rect x="262.4" y="835.0" width="8.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="265.4" y="846.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (4 samples, 0.34%)</title><rect x="262.4" y="819.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="265.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$236/198537310.accept (4 samples, 0.34%)</title><rect x="262.4" y="803.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="265.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (3 samples, 0.25%)</title><rect x="263.4" y="787.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="266.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (2 samples, 0.17%)</title><rect x="264.4" y="771.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="267.4" y="782.0"></text>
</g>
<g>
<title>java/util/Optional.map (1 samples, 0.08%)</title><rect x="264.4" y="755.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="267.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$$Lambda$238/461791712.apply (1 samples, 0.08%)</title><rect x="264.4" y="739.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="267.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lambda$leaderAndEpoch$6 (1 samples, 0.08%)</title><rect x="264.4" y="723.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="267.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.08%)</title><rect x="265.4" y="755.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="268.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.08%)</title><rect x="265.4" y="739.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="268.4" y="750.0"></text>
</g>
<g>
<title>java/util/Optional.ofNullable (1 samples, 0.08%)</title><rect x="265.4" y="723.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="268.4" y="734.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.08%)</title><rect x="265.4" y="707.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="268.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (2 samples, 0.17%)</title><rect x="266.4" y="819.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="269.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (2 samples, 0.17%)</title><rect x="266.4" y="803.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="269.4" y="814.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.groupingBy (1 samples, 0.08%)</title><rect x="266.4" y="787.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="269.4" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="267.4" y="787.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="270.4" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="267.4" y="771.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="270.4" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="267.4" y="755.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="270.4" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="267.4" y="739.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="270.4" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="267.4" y="723.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="270.4" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="267.4" y="707.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="270.4" y="718.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$247/2130311384.get (1 samples, 0.08%)</title><rect x="267.4" y="691.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="270.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.08%)</title><rect x="268.4" y="819.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="271.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.17%)</title><rect x="269.4" y="819.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="272.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.17%)</title><rect x="269.4" y="803.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="272.4" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.17%)</title><rect x="269.4" y="787.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="272.4" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.17%)</title><rect x="269.4" y="771.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="272.4" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.17%)</title><rect x="269.4" y="755.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="272.4" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.17%)</title><rect x="269.4" y="739.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="272.4" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.17%)</title><rect x="269.4" y="723.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="272.4" y="734.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="269.4" y="707.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="272.4" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="269.4" y="691.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="272.4" y="702.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="269.4" y="675.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="272.4" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="269.4" y="659.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="272.4" y="670.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="269.4" y="643.0" width="1.0" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="272.4" y="654.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.08%)</title><rect x="270.4" y="707.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="273.4" y="718.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.08%)</title><rect x="270.4" y="691.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="273.4" y="702.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.08%)</title><rect x="270.4" y="675.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="273.4" y="686.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="270.4" y="659.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="273.4" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.17%)</title><rect x="271.3" y="835.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="274.3" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 0.17%)</title><rect x="271.3" y="819.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="274.3" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.17%)</title><rect x="271.3" y="803.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="274.3" y="814.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.17%)</title><rect x="271.3" y="787.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="274.3" y="798.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.17%)</title><rect x="271.3" y="771.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="274.3" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.17%)</title><rect x="271.3" y="755.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="274.3" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.17%)</title><rect x="271.3" y="739.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="274.3" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (2 samples, 0.17%)</title><rect x="271.3" y="723.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="274.3" y="734.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (2 samples, 0.17%)</title><rect x="271.3" y="707.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="274.3" y="718.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="271.3" y="691.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="274.3" y="702.0"></text>
</g>
<g>
<title>java/util/stream/Sink.begin (1 samples, 0.08%)</title><rect x="272.3" y="691.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="275.3" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.08%)</title><rect x="273.3" y="851.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="276.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.08%)</title><rect x="273.3" y="835.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="276.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.08%)</title><rect x="273.3" y="819.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="276.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.08%)</title><rect x="274.3" y="851.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="277.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.08%)</title><rect x="275.3" y="867.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="278.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (2 samples, 0.17%)</title><rect x="276.3" y="867.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="279.3" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.08%)</title><rect x="276.3" y="851.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="279.3" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.08%)</title><rect x="277.3" y="851.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="280.3" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.08%)</title><rect x="277.3" y="835.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="280.3" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.08%)</title><rect x="277.3" y="819.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="280.3" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.08%)</title><rect x="277.3" y="803.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="280.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (8 samples, 0.67%)</title><rect x="278.3" y="867.0" width="7.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="281.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (8 samples, 0.67%)</title><rect x="278.3" y="851.0" width="7.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="281.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.08%)</title><rect x="278.3" y="835.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="281.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.08%)</title><rect x="278.3" y="819.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="281.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.08%)</title><rect x="278.3" y="803.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="281.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.08%)</title><rect x="278.3" y="787.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="281.3" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.08%)</title><rect x="278.3" y="771.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="281.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.08%)</title><rect x="278.3" y="755.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="281.3" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.08%)</title><rect x="278.3" y="739.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="281.3" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.08%)</title><rect x="278.3" y="723.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="281.3" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.08%)</title><rect x="278.3" y="707.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="281.3" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.08%)</title><rect x="278.3" y="691.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="281.3" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.08%)</title><rect x="278.3" y="675.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="281.3" y="686.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.08%)</title><rect x="278.3" y="659.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="281.3" y="670.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (1 samples, 0.08%)</title><rect x="278.3" y="643.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="281.3" y="654.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newDecoder (1 samples, 0.08%)</title><rect x="278.3" y="627.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="281.3" y="638.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (1 samples, 0.08%)</title><rect x="278.3" y="611.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="281.3" y="622.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (1 samples, 0.08%)</title><rect x="278.3" y="595.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="281.3" y="606.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (1 samples, 0.08%)</title><rect x="278.3" y="579.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="281.3" y="590.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (1 samples, 0.08%)</title><rect x="278.3" y="563.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="281.3" y="574.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.replaceWith (1 samples, 0.08%)</title><rect x="278.3" y="547.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="281.3" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (7 samples, 0.59%)</title><rect x="279.3" y="835.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="282.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (7 samples, 0.59%)</title><rect x="279.3" y="819.0" width="6.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="282.3" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (3 samples, 0.25%)</title><rect x="279.3" y="803.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="282.3" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (3 samples, 0.25%)</title><rect x="279.3" y="787.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="282.3" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.17%)</title><rect x="279.3" y="771.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="282.3" y="782.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.17%)</title><rect x="279.3" y="755.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="282.3" y="766.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.08%)</title><rect x="281.2" y="771.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="284.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (4 samples, 0.34%)</title><rect x="282.2" y="803.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="285.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (4 samples, 0.34%)</title><rect x="282.2" y="787.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="285.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (4 samples, 0.34%)</title><rect x="282.2" y="771.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="285.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (4 samples, 0.34%)</title><rect x="282.2" y="755.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="285.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (4 samples, 0.34%)</title><rect x="282.2" y="739.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="285.2" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (4 samples, 0.34%)</title><rect x="282.2" y="723.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="285.2" y="734.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.34%)</title><rect x="282.2" y="707.0" width="4.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="285.2" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.17%)</title><rect x="286.2" y="867.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="289.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.08%)</title><rect x="287.2" y="851.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="290.2" y="862.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.08%)</title><rect x="287.2" y="835.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="290.2" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$260/1877381740.accept (1 samples, 0.08%)</title><rect x="287.2" y="819.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="290.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.08%)</title><rect x="287.2" y="803.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="290.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.08%)</title><rect x="287.2" y="787.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="290.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.08%)</title><rect x="288.2" y="867.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="291.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="288.2" y="851.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="291.2" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="288.2" y="835.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="291.2" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="288.2" y="819.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="291.2" y="830.0"></text>
</g>
<g>
<title>java/lang/Thread.run (848 samples, 71.14%)</title><rect x="289.2" y="931.0" width="839.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="292.2" y="942.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (848 samples, 71.14%)</title><rect x="289.2" y="915.0" width="839.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="292.2" y="926.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (848 samples, 71.14%)</title><rect x="289.2" y="899.0" width="839.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="292.2" y="910.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$288/639910004.run (601 samples, 50.42%)</title><rect x="289.2" y="883.0" width="594.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="292.2" y="894.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$288/63991000..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62 (601 samples, 50.42%)</title><rect x="289.2" y="867.0" width="594.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="292.2" y="878.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (601 samples, 50.42%)</title><rect x="289.2" y="851.0" width="594.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="292.2" y="862.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="291.1" y="835.0" width="1.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="294.1" y="846.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.50%)</title><rect x="292.1" y="835.0" width="6.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="295.1" y="846.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.50%)</title><rect x="292.1" y="819.0" width="6.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="295.1" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (589 samples, 49.41%)</title><rect x="298.1" y="835.0" width="583.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="301.1" y="846.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.08%)</title><rect x="307.0" y="819.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="310.0" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.08%)</title><rect x="307.0" y="803.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="310.0" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.08%)</title><rect x="307.0" y="787.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="310.0" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (1 samples, 0.08%)</title><rect x="307.0" y="771.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="310.0" y="782.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.08%)</title><rect x="307.0" y="755.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="310.0" y="766.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.08%)</title><rect x="307.0" y="739.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="310.0" y="750.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.08%)</title><rect x="307.0" y="723.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="310.0" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.maybeDirty (1 samples, 0.08%)</title><rect x="308.0" y="819.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="311.0" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (44 samples, 3.69%)</title><rect x="309.0" y="819.0" width="43.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="312.0" y="830.0">com/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (44 samples, 3.69%)</title><rect x="309.0" y="803.0" width="43.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="312.0" y="814.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (44 samples, 3.69%)</title><rect x="309.0" y="787.0" width="43.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="312.0" y="798.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (36 samples, 3.02%)</title><rect x="316.9" y="771.0" width="35.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="319.9" y="782.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.25%)</title><rect x="316.9" y="755.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="319.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (3 samples, 0.25%)</title><rect x="316.9" y="739.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="319.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (3 samples, 0.25%)</title><rect x="316.9" y="723.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="319.9" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$295/247124648.accept (2 samples, 0.17%)</title><rect x="317.9" y="707.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="320.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (33 samples, 2.77%)</title><rect x="319.8" y="755.0" width="32.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="322.8" y="766.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$295/247124648.accept (33 samples, 2.77%)</title><rect x="319.8" y="739.0" width="32.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="322.8" y="750.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (33 samples, 2.77%)</title><rect x="319.8" y="723.0" width="32.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="322.8" y="734.0">co..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (33 samples, 2.77%)</title><rect x="319.8" y="707.0" width="32.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="322.8" y="718.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (31 samples, 2.60%)</title><rect x="321.8" y="691.0" width="30.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="324.8" y="702.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$286/394112977.accept (1 samples, 0.08%)</title><rect x="323.8" y="675.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="326.8" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$285/809957199.accept (3 samples, 0.25%)</title><rect x="324.8" y="675.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="327.8" y="686.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="327.8" y="675.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="330.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (24 samples, 2.01%)</title><rect x="328.8" y="675.0" width="23.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="331.8" y="686.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.17%)</title><rect x="328.8" y="659.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="331.8" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 0.17%)</title><rect x="328.8" y="643.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="331.8" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (22 samples, 1.85%)</title><rect x="330.7" y="659.0" width="21.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="333.7" y="670.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (187 samples, 15.69%)</title><rect x="352.5" y="819.0" width="185.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="355.5" y="830.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$45/1556995360.extract (187 samples, 15.69%)</title><rect x="352.5" y="803.0" width="185.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="355.5" y="814.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (187 samples, 15.69%)</title><rect x="352.5" y="787.0" width="185.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="355.5" y="798.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="352.5" y="771.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="355.5" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="352.5" y="755.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="355.5" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="352.5" y="739.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="355.5" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="352.5" y="723.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="355.5" y="734.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.08%)</title><rect x="352.5" y="707.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="355.5" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (186 samples, 15.60%)</title><rect x="353.5" y="771.0" width="184.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="356.5" y="782.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (186 samples, 15.60%)</title><rect x="353.5" y="755.0" width="184.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="356.5" y="766.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (186 samples, 15.60%)</title><rect x="353.5" y="739.0" width="184.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="356.5" y="750.0">com/fasterxml/jackson/da..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (66 samples, 5.54%)</title><rect x="353.5" y="723.0" width="65.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="356.5" y="734.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (31 samples, 2.60%)</title><rect x="353.5" y="707.0" width="30.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="356.5" y="718.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (31 samples, 2.60%)</title><rect x="353.5" y="691.0" width="30.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="356.5" y="702.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (18 samples, 1.51%)</title><rect x="353.5" y="675.0" width="17.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="356.5" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.getMask (1 samples, 0.08%)</title><rect x="370.3" y="659.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="373.3" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (13 samples, 1.09%)</title><rect x="371.3" y="675.0" width="12.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="374.3" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.getMask (2 samples, 0.17%)</title><rect x="376.3" y="659.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="379.3" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.34%)</title><rect x="378.3" y="659.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="381.3" y="670.0"></text>
</g>
<g>
<title>java/lang/ref/SoftReference.get (2 samples, 0.17%)</title><rect x="382.2" y="659.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="385.2" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (35 samples, 2.94%)</title><rect x="384.2" y="707.0" width="34.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="387.2" y="718.0">co..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="384.2" y="691.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="387.2" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="384.2" y="675.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="387.2" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="384.2" y="659.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="387.2" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="384.2" y="643.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="387.2" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="384.2" y="627.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="387.2" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="384.2" y="611.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="387.2" y="622.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="384.2" y="595.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="387.2" y="606.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.08%)</title><rect x="384.2" y="579.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="387.2" y="590.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.08%)</title><rect x="384.2" y="563.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="387.2" y="574.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.08%)</title><rect x="384.2" y="547.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="387.2" y="558.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_bytes_to_copy(HeapRegion*) (1 samples, 0.08%)</title><rect x="384.2" y="531.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="387.2" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (34 samples, 2.85%)</title><rect x="385.2" y="691.0" width="33.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="388.2" y="702.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (2 samples, 0.17%)</title><rect x="385.2" y="675.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="388.2" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.getMask (1 samples, 0.08%)</title><rect x="385.2" y="659.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="388.2" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.setEncoding (1 samples, 0.08%)</title><rect x="386.2" y="659.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="389.2" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (15 samples, 1.26%)</title><rect x="387.2" y="675.0" width="14.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="390.2" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.setEncoding (3 samples, 0.25%)</title><rect x="392.1" y="659.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="395.1" y="670.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (3 samples, 0.25%)</title><rect x="392.1" y="643.0" width="3.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="395.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.ensureLoaded (2 samples, 0.17%)</title><rect x="395.1" y="659.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="398.1" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (4 samples, 0.34%)</title><rect x="397.1" y="659.0" width="3.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="400.1" y="670.0"></text>
</g>
<g>
<title>java/lang/ref/SoftReference.get (1 samples, 0.08%)</title><rect x="401.0" y="659.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="404.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (10 samples, 0.84%)</title><rect x="402.0" y="675.0" width="9.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="405.0" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.17%)</title><rect x="408.0" y="659.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="411.0" y="670.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.17%)</title><rect x="408.0" y="643.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="411.0" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.17%)</title><rect x="408.0" y="627.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="411.0" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="408.9" y="611.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="411.9" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="408.9" y="595.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="411.9" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 0.17%)</title><rect x="409.9" y="659.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="412.9" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 0.17%)</title><rect x="409.9" y="643.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="412.9" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (7 samples, 0.59%)</title><rect x="411.9" y="675.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="414.9" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (3 samples, 0.25%)</title><rect x="414.9" y="659.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="417.9" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (1 samples, 0.08%)</title><rect x="417.9" y="659.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="420.9" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (107 samples, 8.98%)</title><rect x="418.8" y="723.0" width="106.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="421.8" y="734.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.17%)</title><rect x="418.8" y="707.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="421.8" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.17%)</title><rect x="418.8" y="691.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="421.8" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.08%)</title><rect x="419.8" y="675.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="422.8" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (13 samples, 1.09%)</title><rect x="420.8" y="707.0" width="12.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="423.8" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (13 samples, 1.09%)</title><rect x="420.8" y="691.0" width="12.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="423.8" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (10 samples, 0.84%)</title><rect x="423.8" y="675.0" width="9.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="426.8" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (9 samples, 0.76%)</title><rect x="424.8" y="659.0" width="8.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="427.8" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.17%)</title><rect x="428.7" y="643.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="431.7" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.17%)</title><rect x="428.7" y="627.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="431.7" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.17%)</title><rect x="428.7" y="611.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="431.7" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="429.7" y="595.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="432.7" y="606.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="429.7" y="579.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="432.7" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (3 samples, 0.25%)</title><rect x="430.7" y="643.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="433.7" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (3 samples, 0.25%)</title><rect x="433.7" y="707.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="436.7" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 0.25%)</title><rect x="433.7" y="691.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="436.7" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (3 samples, 0.25%)</title><rect x="433.7" y="675.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="436.7" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (89 samples, 7.47%)</title><rect x="436.7" y="707.0" width="88.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="439.7" y="718.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (89 samples, 7.47%)</title><rect x="436.7" y="691.0" width="88.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="439.7" y="702.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (21 samples, 1.76%)</title><rect x="437.7" y="675.0" width="20.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="440.7" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.34%)</title><rect x="446.6" y="659.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="449.6" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.34%)</title><rect x="446.6" y="643.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="449.6" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.34%)</title><rect x="446.6" y="627.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="449.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.25%)</title><rect x="450.5" y="659.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="453.5" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.25%)</title><rect x="450.5" y="643.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="453.5" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (5 samples, 0.42%)</title><rect x="453.5" y="659.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="456.5" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (67 samples, 5.62%)</title><rect x="458.4" y="675.0" width="66.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="461.4" y="686.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (64 samples, 5.37%)</title><rect x="461.4" y="659.0" width="63.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="464.4" y="670.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (64 samples, 5.37%)</title><rect x="461.4" y="643.0" width="63.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="464.4" y="654.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (23 samples, 1.93%)</title><rect x="474.3" y="627.0" width="22.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="477.3" y="638.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (10 samples, 0.84%)</title><rect x="482.2" y="611.0" width="9.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="485.2" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (10 samples, 0.84%)</title><rect x="482.2" y="595.0" width="9.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="485.2" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (10 samples, 0.84%)</title><rect x="482.2" y="579.0" width="9.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="485.2" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (7 samples, 0.59%)</title><rect x="485.2" y="563.0" width="6.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="488.2" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (6 samples, 0.50%)</title><rect x="485.2" y="547.0" width="5.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="488.2" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (5 samples, 0.42%)</title><rect x="486.2" y="531.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="489.2" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (3 samples, 0.25%)</title><rect x="488.1" y="515.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="491.1" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.08%)</title><rect x="491.1" y="547.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="494.1" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (4 samples, 0.34%)</title><rect x="492.1" y="611.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="495.1" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (4 samples, 0.34%)</title><rect x="492.1" y="595.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="495.1" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.08%)</title><rect x="496.1" y="611.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="499.1" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (9 samples, 0.76%)</title><rect x="497.0" y="627.0" width="9.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="500.0" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (9 samples, 0.76%)</title><rect x="497.0" y="611.0" width="9.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="500.0" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (9 samples, 0.76%)</title><rect x="497.0" y="595.0" width="9.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="500.0" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (9 samples, 0.76%)</title><rect x="497.0" y="579.0" width="9.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="500.0" y="590.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (9 samples, 0.76%)</title><rect x="497.0" y="563.0" width="9.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="500.0" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.17%)</title><rect x="506.0" y="627.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="509.0" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (7 samples, 0.59%)</title><rect x="507.9" y="627.0" width="7.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="510.9" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (7 samples, 0.59%)</title><rect x="507.9" y="611.0" width="7.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="510.9" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (7 samples, 0.59%)</title><rect x="507.9" y="595.0" width="7.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="510.9" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (7 samples, 0.59%)</title><rect x="507.9" y="579.0" width="7.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="510.9" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.08%)</title><rect x="508.9" y="563.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="511.9" y="574.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (5 samples, 0.42%)</title><rect x="509.9" y="563.0" width="5.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="512.9" y="574.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (5 samples, 0.42%)</title><rect x="509.9" y="547.0" width="5.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="512.9" y="558.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (5 samples, 0.42%)</title><rect x="509.9" y="531.0" width="5.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="512.9" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (8 samples, 0.67%)</title><rect x="514.9" y="627.0" width="7.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="517.9" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.get (8 samples, 0.67%)</title><rect x="514.9" y="611.0" width="7.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="517.9" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (8 samples, 0.67%)</title><rect x="514.9" y="595.0" width="7.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="517.9" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="520.8" y="579.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="523.8" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.08%)</title><rect x="520.8" y="563.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="523.8" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="520.8" y="547.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="523.8" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="520.8" y="531.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="523.8" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="520.8" y="515.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="523.8" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.08%)</title><rect x="521.8" y="579.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="524.8" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (2 samples, 0.17%)</title><rect x="522.8" y="627.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="525.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (2 samples, 0.17%)</title><rect x="522.8" y="611.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="525.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (13 samples, 1.09%)</title><rect x="524.8" y="723.0" width="12.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="527.8" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (13 samples, 1.09%)</title><rect x="524.8" y="707.0" width="12.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="527.8" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (13 samples, 1.09%)</title><rect x="524.8" y="691.0" width="12.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="527.8" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (13 samples, 1.09%)</title><rect x="524.8" y="675.0" width="12.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="527.8" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.08%)</title><rect x="527.7" y="659.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="530.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (9 samples, 0.76%)</title><rect x="528.7" y="659.0" width="8.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="531.7" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (343 samples, 28.78%)</title><rect x="537.6" y="819.0" width="339.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="540.6" y="830.0">com/linecorp/decaton/processor/runtime/interna..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (71 samples, 5.96%)</title><rect x="540.6" y="803.0" width="70.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="543.6" y="814.0">com/line..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (71 samples, 5.96%)</title><rect x="540.6" y="787.0" width="70.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="543.6" y="798.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (67 samples, 5.62%)</title><rect x="544.6" y="771.0" width="66.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="547.6" y="782.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (9 samples, 0.76%)</title><rect x="545.6" y="755.0" width="8.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="548.6" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (9 samples, 0.76%)</title><rect x="545.6" y="739.0" width="8.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="548.6" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (9 samples, 0.76%)</title><rect x="545.6" y="723.0" width="8.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="548.6" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (9 samples, 0.76%)</title><rect x="545.6" y="707.0" width="8.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="548.6" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.25%)</title><rect x="554.5" y="755.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="557.5" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.25%)</title><rect x="554.5" y="739.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="557.5" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.25%)</title><rect x="554.5" y="723.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="557.5" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.25%)</title><rect x="554.5" y="707.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="557.5" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 0.17%)</title><rect x="555.5" y="691.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="558.5" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (54 samples, 4.53%)</title><rect x="557.4" y="755.0" width="53.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="560.4" y="766.0">java/..</text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.08%)</title><rect x="592.1" y="739.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="595.1" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (18 samples, 1.51%)</title><rect x="593.1" y="739.0" width="17.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="596.1" y="750.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.17%)</title><rect x="594.1" y="723.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="597.1" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.25%)</title><rect x="596.0" y="723.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="599.0" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (3 samples, 0.25%)</title><rect x="596.0" y="707.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="599.0" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (10 samples, 0.84%)</title><rect x="599.0" y="723.0" width="9.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="602.0" y="734.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.17%)</title><rect x="608.9" y="723.0" width="2.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="611.9" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.59%)</title><rect x="610.9" y="803.0" width="6.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="613.9" y="814.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (7 samples, 0.59%)</title><rect x="610.9" y="787.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="613.9" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="616.8" y="771.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="619.8" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="616.8" y="755.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="619.8" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="616.8" y="739.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="619.8" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="616.8" y="723.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="619.8" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (157 samples, 13.17%)</title><rect x="617.8" y="803.0" width="155.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="620.8" y="814.0">com/linecorp/decaton..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="619.8" y="787.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="622.8" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="619.8" y="771.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="622.8" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="619.8" y="755.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="622.8" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="619.8" y="739.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="622.8" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (145 samples, 12.16%)</title><rect x="620.8" y="787.0" width="143.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="623.8" y="798.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (41 samples, 3.44%)</title><rect x="630.7" y="771.0" width="40.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="633.7" y="782.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (16 samples, 1.34%)</title><rect x="644.5" y="755.0" width="15.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="647.5" y="766.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (13 samples, 1.09%)</title><rect x="647.5" y="739.0" width="12.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="650.5" y="750.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (9 samples, 0.76%)</title><rect x="647.5" y="723.0" width="8.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="650.5" y="734.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (9 samples, 0.76%)</title><rect x="647.5" y="707.0" width="8.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="650.5" y="718.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (9 samples, 0.76%)</title><rect x="647.5" y="691.0" width="8.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="650.5" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="647.5" y="675.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="650.5" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (7 samples, 0.59%)</title><rect x="648.5" y="675.0" width="6.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="651.5" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.08%)</title><rect x="648.5" y="659.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="651.5" y="670.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="648.5" y="643.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="651.5" y="654.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.08%)</title><rect x="648.5" y="627.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="651.5" y="638.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.08%)</title><rect x="648.5" y="611.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="651.5" y="622.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.08%)</title><rect x="649.5" y="659.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="652.5" y="670.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.42%)</title><rect x="650.5" y="659.0" width="4.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="653.5" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (4 samples, 0.34%)</title><rect x="651.5" y="643.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="654.5" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="652.5" y="627.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="655.5" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="652.5" y="611.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="655.5" y="622.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="652.5" y="595.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="655.5" y="606.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.08%)</title><rect x="652.5" y="579.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="655.5" y="590.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.08%)</title><rect x="652.5" y="563.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="655.5" y="574.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.08%)</title><rect x="652.5" y="547.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="655.5" y="558.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.08%)</title><rect x="652.5" y="531.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="655.5" y="542.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.08%)</title><rect x="652.5" y="515.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="655.5" y="526.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (2 samples, 0.17%)</title><rect x="653.5" y="627.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="656.5" y="638.0"></text>
</g>
<g>
<title>_new_array_nozero_Java (1 samples, 0.08%)</title><rect x="655.4" y="675.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="658.4" y="686.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.34%)</title><rect x="656.4" y="723.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="659.4" y="734.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (11 samples, 0.92%)</title><rect x="660.4" y="755.0" width="10.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="663.4" y="766.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (16 samples, 1.34%)</title><rect x="671.3" y="771.0" width="15.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="674.3" y="782.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (9 samples, 0.76%)</title><rect x="671.3" y="755.0" width="8.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="674.3" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="671.3" y="739.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="674.3" y="750.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="671.3" y="723.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="674.3" y="734.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (8 samples, 0.67%)</title><rect x="672.3" y="739.0" width="7.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="675.3" y="750.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.08%)</title><rect x="679.2" y="723.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="682.2" y="734.0"></text>
</g>
<g>
<title>java/lang/Long.toString (7 samples, 0.59%)</title><rect x="680.2" y="755.0" width="6.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="683.2" y="766.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (7 samples, 0.59%)</title><rect x="680.2" y="739.0" width="6.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="683.2" y="750.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.08%)</title><rect x="687.1" y="771.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="690.1" y="782.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (77 samples, 6.46%)</title><rect x="688.1" y="771.0" width="76.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="691.1" y="782.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (76 samples, 6.38%)</title><rect x="689.1" y="755.0" width="75.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="692.1" y="766.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (7 samples, 0.59%)</title><rect x="689.1" y="739.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="692.1" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (7 samples, 0.59%)</title><rect x="689.1" y="723.0" width="6.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="692.1" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (7 samples, 0.59%)</title><rect x="689.1" y="707.0" width="6.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="692.1" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (7 samples, 0.59%)</title><rect x="689.1" y="691.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="692.1" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="696.0" y="739.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="699.0" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="696.0" y="723.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="699.0" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="696.0" y="707.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="699.0" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.08%)</title><rect x="696.0" y="691.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="699.0" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="696.0" y="675.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="699.0" y="686.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (68 samples, 5.70%)</title><rect x="697.0" y="739.0" width="67.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="700.0" y="750.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.put (63 samples, 5.29%)</title><rect x="702.0" y="723.0" width="62.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="705.0" y="734.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.putVal (25 samples, 2.10%)</title><rect x="739.6" y="707.0" width="24.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="742.6" y="718.0">j..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (5 samples, 0.42%)</title><rect x="753.4" y="691.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="756.4" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (5 samples, 0.42%)</title><rect x="758.4" y="691.0" width="4.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="761.4" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="762.3" y="675.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="765.3" y="686.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.08%)</title><rect x="763.3" y="691.0" width="1.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="766.3" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (9 samples, 0.76%)</title><rect x="764.3" y="787.0" width="8.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="767.3" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (9 samples, 0.76%)</title><rect x="764.3" y="771.0" width="8.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="767.3" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.get (9 samples, 0.76%)</title><rect x="764.3" y="755.0" width="8.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="767.3" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (9 samples, 0.76%)</title><rect x="764.3" y="739.0" width="8.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="767.3" y="750.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="767.3" y="723.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="770.3" y="734.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.17%)</title><rect x="768.3" y="723.0" width="2.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="771.3" y="734.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.17%)</title><rect x="768.3" y="707.0" width="2.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="771.3" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.17%)</title><rect x="770.3" y="723.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="773.3" y="734.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="772.2" y="723.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="775.2" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (82 samples, 6.88%)</title><rect x="773.2" y="803.0" width="81.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="776.2" y="814.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (82 samples, 6.88%)</title><rect x="773.2" y="787.0" width="81.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="776.2" y="798.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$209/1629241562.process (41 samples, 3.44%)</title><rect x="774.2" y="771.0" width="40.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="777.2" y="782.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (41 samples, 3.44%)</title><rect x="774.2" y="755.0" width="40.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="777.2" y="766.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (33 samples, 2.77%)</title><rect x="779.2" y="739.0" width="32.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="782.2" y="750.0">co..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (6 samples, 0.50%)</title><rect x="792.0" y="723.0" width="6.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="795.0" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (6 samples, 0.50%)</title><rect x="792.0" y="707.0" width="6.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="795.0" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (6 samples, 0.50%)</title><rect x="792.0" y="691.0" width="6.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="795.0" y="702.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (6 samples, 0.50%)</title><rect x="792.0" y="675.0" width="6.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="795.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (5 samples, 0.42%)</title><rect x="793.0" y="659.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="796.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.08%)</title><rect x="797.0" y="643.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="800.0" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (12 samples, 1.01%)</title><rect x="798.0" y="723.0" width="11.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="801.0" y="734.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (9 samples, 0.76%)</title><rect x="801.0" y="707.0" width="8.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="804.0" y="718.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.76%)</title><rect x="801.0" y="691.0" width="8.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="804.0" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="809.9" y="723.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="812.9" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="809.9" y="707.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="812.9" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="809.9" y="691.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="812.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.incrementAndGet (1 samples, 0.08%)</title><rect x="810.9" y="723.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="813.9" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.25%)</title><rect x="811.8" y="739.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="814.8" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.25%)</title><rect x="811.8" y="723.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="814.8" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.25%)</title><rect x="811.8" y="707.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="814.8" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.25%)</title><rect x="811.8" y="691.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="814.8" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.25%)</title><rect x="811.8" y="675.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="814.8" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (10 samples, 0.84%)</title><rect x="814.8" y="771.0" width="9.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="817.8" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (10 samples, 0.84%)</title><rect x="814.8" y="755.0" width="9.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="817.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (10 samples, 0.84%)</title><rect x="814.8" y="739.0" width="9.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="817.8" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (1 samples, 0.08%)</title><rect x="823.7" y="723.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="826.7" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.42%)</title><rect x="824.7" y="771.0" width="5.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="827.7" y="782.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.42%)</title><rect x="824.7" y="755.0" width="5.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="827.7" y="766.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.17%)</title><rect x="829.7" y="771.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="832.7" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.17%)</title><rect x="829.7" y="755.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="832.7" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (1 samples, 0.08%)</title><rect x="830.7" y="739.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="833.7" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (10 samples, 0.84%)</title><rect x="831.6" y="771.0" width="9.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="834.6" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.50%)</title><rect x="835.6" y="755.0" width="5.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="838.6" y="766.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.34%)</title><rect x="836.6" y="739.0" width="4.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="839.6" y="750.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.08%)</title><rect x="840.6" y="739.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="843.6" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (8 samples, 0.67%)</title><rect x="841.5" y="771.0" width="8.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="844.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 0.42%)</title><rect x="849.5" y="771.0" width="4.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="852.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 0.42%)</title><rect x="849.5" y="755.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="852.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 0.42%)</title><rect x="849.5" y="739.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="852.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (5 samples, 0.42%)</title><rect x="849.5" y="723.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="852.5" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (5 samples, 0.42%)</title><rect x="849.5" y="707.0" width="4.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="852.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (5 samples, 0.42%)</title><rect x="849.5" y="691.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="852.5" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$293/1232942506.accept (4 samples, 0.34%)</title><rect x="850.5" y="675.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="853.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (23 samples, 1.93%)</title><rect x="854.4" y="803.0" width="22.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="857.4" y="814.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (23 samples, 1.93%)</title><rect x="854.4" y="787.0" width="22.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="857.4" y="798.0">j..</text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.59%)</title><rect x="860.4" y="771.0" width="6.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="863.4" y="782.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.59%)</title><rect x="860.4" y="755.0" width="6.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="863.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (10 samples, 0.84%)</title><rect x="867.3" y="771.0" width="9.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="870.3" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (5 samples, 0.42%)</title><rect x="867.3" y="755.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="870.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (4 samples, 0.34%)</title><rect x="867.3" y="739.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="870.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (4 samples, 0.34%)</title><rect x="867.3" y="723.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="870.3" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$294/238186200.accept (2 samples, 0.17%)</title><rect x="869.3" y="707.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="872.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.08%)</title><rect x="871.2" y="739.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="874.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 0.42%)</title><rect x="872.2" y="755.0" width="5.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="875.2" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$294/238186200.accept (5 samples, 0.42%)</title><rect x="872.2" y="739.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="875.2" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$57 (5 samples, 0.42%)</title><rect x="872.2" y="723.0" width="5.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="875.2" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (5 samples, 0.42%)</title><rect x="872.2" y="707.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="875.2" y="718.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (5 samples, 0.42%)</title><rect x="872.2" y="691.0" width="5.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="875.2" y="702.0"></text>
</g>
<g>
<title>java/time/Duration.create (5 samples, 0.42%)</title><rect x="872.2" y="675.0" width="5.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="875.2" y="686.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.34%)</title><rect x="872.2" y="659.0" width="4.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="875.2" y="670.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.34%)</title><rect x="872.2" y="643.0" width="4.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="875.2" y="654.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="876.2" y="659.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="879.2" y="670.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.34%)</title><rect x="877.2" y="819.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="880.2" y="830.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.34%)</title><rect x="877.2" y="803.0" width="3.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="880.2" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.08%)</title><rect x="881.1" y="835.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="884.1" y="846.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.08%)</title><rect x="881.1" y="819.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="884.1" y="830.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.08%)</title><rect x="881.1" y="803.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="884.1" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="881.1" y="787.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="884.1" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="881.1" y="771.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="884.1" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="881.1" y="755.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="884.1" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="881.1" y="739.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="884.1" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="881.1" y="723.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="884.1" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="881.1" y="707.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="884.1" y="718.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_eden_size() (1 samples, 0.08%)</title><rect x="881.1" y="691.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="884.1" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (1 samples, 0.08%)</title><rect x="882.1" y="835.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="885.1" y="846.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="883.1" y="835.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="886.1" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (7 samples, 0.59%)</title><rect x="884.1" y="883.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="887.1" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.59%)</title><rect x="884.1" y="867.0" width="6.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="887.1" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.59%)</title><rect x="884.1" y="851.0" width="6.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="887.1" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.59%)</title><rect x="884.1" y="835.0" width="6.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="887.1" y="846.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.25%)</title><rect x="888.1" y="819.0" width="2.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="891.1" y="830.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.25%)</title><rect x="888.1" y="803.0" width="2.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="891.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (240 samples, 20.13%)</title><rect x="891.0" y="883.0" width="237.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="894.0" y="894.0">java/util/concurrent/ThreadPool..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (238 samples, 19.97%)</title><rect x="893.0" y="867.0" width="235.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="896.0" y="878.0">java/util/concurrent/LinkedBloc..</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.08%)</title><rect x="911.8" y="851.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="914.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.dequeue (4 samples, 0.34%)</title><rect x="912.8" y="851.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="915.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (195 samples, 16.36%)</title><rect x="916.8" y="851.0" width="193.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="919.8" y="862.0">java/util/concurrent/lock..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (7 samples, 0.59%)</title><rect x="927.7" y="835.0" width="6.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="930.7" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (6 samples, 0.50%)</title><rect x="934.6" y="835.0" width="5.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="937.6" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.50%)</title><rect x="934.6" y="819.0" width="5.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="937.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.42%)</title><rect x="935.6" y="803.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="938.6" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.42%)</title><rect x="935.6" y="787.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="938.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (1 samples, 0.08%)</title><rect x="940.5" y="835.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="943.5" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (1 samples, 0.08%)</title><rect x="940.5" y="819.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="943.5" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (170 samples, 14.26%)</title><rect x="941.5" y="835.0" width="168.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="944.5" y="846.0">java/util/concurrent/l..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (170 samples, 14.26%)</title><rect x="941.5" y="819.0" width="168.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="944.5" y="830.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.08%)</title><rect x="943.5" y="803.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="946.5" y="814.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (2 samples, 0.17%)</title><rect x="944.5" y="803.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="947.5" y="814.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="946.5" y="803.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="949.5" y="814.0"></text>
</g>
<g>
<title>Unsafe_Park (160 samples, 13.42%)</title><rect x="947.5" y="803.0" width="158.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="950.5" y="814.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="954.4" y="787.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="957.4" y="798.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.08%)</title><rect x="955.4" y="787.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="958.4" y="798.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (29 samples, 2.43%)</title><rect x="956.4" y="787.0" width="28.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="959.4" y="798.0">Pa..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (9 samples, 0.76%)</title><rect x="965.3" y="771.0" width="8.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="968.3" y="782.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.25%)</title><rect x="967.3" y="755.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="970.3" y="766.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.17%)</title><rect x="968.3" y="739.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="971.3" y="750.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.08%)</title><rect x="970.2" y="755.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="973.2" y="766.0"></text>
</g>
<g>
<title>pthread_getspecific (3 samples, 0.25%)</title><rect x="971.2" y="755.0" width="3.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="974.2" y="766.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.17%)</title><rect x="974.2" y="771.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="977.2" y="782.0"></text>
</g>
<g>
<title>Monitor::unlock() (4 samples, 0.34%)</title><rect x="976.2" y="771.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="979.2" y="782.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (5 samples, 0.42%)</title><rect x="980.1" y="771.0" width="5.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="983.1" y="782.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (2 samples, 0.17%)</title><rect x="985.1" y="787.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="988.1" y="798.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.08%)</title><rect x="987.1" y="787.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="990.1" y="798.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.17%)</title><rect x="988.1" y="787.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="991.1" y="798.0"></text>
</g>
<g>
<title>_L_cond_lock_847 (1 samples, 0.08%)</title><rect x="990.0" y="787.0" width="1.0" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="993.0" y="798.0"></text>
</g>
<g>
<title>__lll_lock_wait (11 samples, 0.92%)</title><rect x="991.0" y="787.0" width="10.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="994.0" y="798.0"></text>
</g>
<g>
<title>__lll_unlock_wake (28 samples, 2.35%)</title><rect x="1001.9" y="787.0" width="27.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1004.9" y="798.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (55 samples, 4.61%)</title><rect x="1029.6" y="787.0" width="54.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1032.6" y="798.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (7 samples, 0.59%)</title><rect x="1084.1" y="787.0" width="6.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1087.1" y="798.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.08%)</title><rect x="1091.0" y="787.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1094.0" y="798.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 0.25%)</title><rect x="1092.0" y="787.0" width="3.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1095.0" y="798.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.17%)</title><rect x="1095.0" y="787.0" width="1.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1098.0" y="798.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.17%)</title><rect x="1096.9" y="787.0" width="2.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1099.9" y="798.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.08%)</title><rect x="1098.9" y="787.0" width="1.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1101.9" y="798.0"></text>
</g>
<g>
<title>_init (1 samples, 0.08%)</title><rect x="1099.9" y="787.0" width="1.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1102.9" y="798.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.17%)</title><rect x="1100.9" y="787.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1103.9" y="798.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="1102.9" y="787.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1105.9" y="798.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.17%)</title><rect x="1103.9" y="787.0" width="2.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1106.9" y="798.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.25%)</title><rect x="1105.9" y="803.0" width="2.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1108.9" y="814.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.08%)</title><rect x="1108.8" y="803.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1111.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (11 samples, 0.92%)</title><rect x="1109.8" y="851.0" width="10.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1112.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (11 samples, 0.92%)</title><rect x="1109.8" y="835.0" width="10.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1112.8" y="846.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (11 samples, 0.92%)</title><rect x="1109.8" y="819.0" width="10.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1112.8" y="830.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.08%)</title><rect x="1117.7" y="803.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1120.7" y="814.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="1117.7" y="787.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1120.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.17%)</title><rect x="1118.7" y="803.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1121.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (8 samples, 0.67%)</title><rect x="1120.7" y="851.0" width="7.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1123.7" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 0.67%)</title><rect x="1120.7" y="835.0" width="7.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1123.7" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.59%)</title><rect x="1120.7" y="819.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1123.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.59%)</title><rect x="1120.7" y="803.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1123.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.08%)</title><rect x="1127.6" y="819.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1130.6" y="830.0"></text>
</g>
<g>
<title>start_thread (62 samples, 5.20%)</title><rect x="1128.6" y="931.0" width="61.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1131.6" y="942.0">start_..</text>
</g>
<g>
<title>java_start(Thread*) (62 samples, 5.20%)</title><rect x="1128.6" y="915.0" width="61.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1131.6" y="926.0">java_s..</text>
</g>
<g>
<title>GangWorker::loop() (23 samples, 1.93%)</title><rect x="1128.6" y="899.0" width="22.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1131.6" y="910.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (5 samples, 0.42%)</title><rect x="1128.6" y="883.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1131.6" y="894.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.42%)</title><rect x="1128.6" y="867.0" width="5.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1131.6" y="878.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 0.25%)</title><rect x="1128.6" y="851.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1131.6" y="862.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.17%)</title><rect x="1131.6" y="851.0" width="2.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1134.6" y="862.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (18 samples, 1.51%)</title><rect x="1133.6" y="883.0" width="17.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1136.6" y="894.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.42%)</title><rect x="1133.6" y="867.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1136.6" y="878.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.08%)</title><rect x="1133.6" y="851.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1136.6" y="862.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.08%)</title><rect x="1134.6" y="851.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1137.6" y="862.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.25%)</title><rect x="1135.6" y="851.0" width="2.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1138.6" y="862.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (8 samples, 0.67%)</title><rect x="1138.5" y="867.0" width="7.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1141.5" y="878.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.25%)</title><rect x="1138.5" y="851.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1141.5" y="862.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.08%)</title><rect x="1138.5" y="835.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1141.5" y="846.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.08%)</title><rect x="1138.5" y="819.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1141.5" y="830.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.08%)</title><rect x="1138.5" y="803.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1141.5" y="814.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.17%)</title><rect x="1139.5" y="835.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1142.5" y="846.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.17%)</title><rect x="1139.5" y="819.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1142.5" y="830.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, CLDClosure*, RegisterMap const*, bool) (1 samples, 0.08%)</title><rect x="1139.5" y="803.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1142.5" y="814.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="1140.5" y="803.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1143.5" y="814.0"></text>
</g>
<g>
<title>nmethod::is_nmethod() const (1 samples, 0.08%)</title><rect x="1140.5" y="787.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1143.5" y="798.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (5 samples, 0.42%)</title><rect x="1141.5" y="851.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1144.5" y="862.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (4 samples, 0.34%)</title><rect x="1141.5" y="835.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1144.5" y="846.0"></text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.08%)</title><rect x="1145.5" y="835.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.5" y="846.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.08%)</title><rect x="1145.5" y="819.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.5" y="830.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (5 samples, 0.42%)</title><rect x="1146.4" y="867.0" width="5.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1149.4" y="878.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (5 samples, 0.42%)</title><rect x="1146.4" y="851.0" width="5.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.4" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (5 samples, 0.42%)</title><rect x="1146.4" y="835.0" width="5.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1149.4" y="846.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (5 samples, 0.42%)</title><rect x="1146.4" y="819.0" width="5.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1149.4" y="830.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (5 samples, 0.42%)</title><rect x="1146.4" y="803.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1149.4" y="814.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (5 samples, 0.42%)</title><rect x="1146.4" y="787.0" width="5.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1149.4" y="798.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (3 samples, 0.25%)</title><rect x="1148.4" y="771.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1151.4" y="782.0"></text>
</g>
<g>
<title>G1BlockOffsetArray::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.08%)</title><rect x="1149.4" y="755.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.4" y="766.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.08%)</title><rect x="1150.4" y="755.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.4" y="766.0"></text>
</g>
<g>
<title>JavaThread::run() (38 samples, 3.19%)</title><rect x="1151.4" y="899.0" width="37.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1154.4" y="910.0">Jav..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (38 samples, 3.19%)</title><rect x="1151.4" y="883.0" width="37.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.4" y="894.0">Jav..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (38 samples, 3.19%)</title><rect x="1151.4" y="867.0" width="37.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1154.4" y="878.0">Com..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (38 samples, 3.19%)</title><rect x="1151.4" y="851.0" width="37.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.4" y="862.0">Com..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (36 samples, 3.02%)</title><rect x="1151.4" y="835.0" width="35.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.4" y="846.0">C2C..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (36 samples, 3.02%)</title><rect x="1151.4" y="819.0" width="35.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1154.4" y="830.0">Com..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (2 samples, 0.17%)</title><rect x="1151.4" y="803.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.4" y="814.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (2 samples, 0.17%)</title><rect x="1151.4" y="787.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1154.4" y="798.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 0.17%)</title><rect x="1151.4" y="771.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1154.4" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (2 samples, 0.17%)</title><rect x="1151.4" y="755.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.4" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (2 samples, 0.17%)</title><rect x="1151.4" y="739.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1154.4" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.17%)</title><rect x="1151.4" y="723.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.4" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.17%)</title><rect x="1151.4" y="707.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.4" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (2 samples, 0.17%)</title><rect x="1151.4" y="691.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.4" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1151.4" y="675.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.4" y="686.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.08%)</title><rect x="1151.4" y="659.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.4" y="670.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1151.4" y="643.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.4" y="654.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1151.4" y="627.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1154.4" y="638.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1151.4" y="611.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1154.4" y="622.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1151.4" y="595.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.4" y="606.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1151.4" y="579.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.4" y="590.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.08%)</title><rect x="1151.4" y="563.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.4" y="574.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.08%)</title><rect x="1151.4" y="547.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.4" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.08%)</title><rect x="1152.4" y="675.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.4" y="686.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1152.4" y="659.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.4" y="670.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1152.4" y="643.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1155.4" y="654.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1152.4" y="627.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.4" y="638.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.08%)</title><rect x="1152.4" y="611.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.4" y="622.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.08%)</title><rect x="1152.4" y="595.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.4" y="606.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call(CallInfo&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.08%)</title><rect x="1152.4" y="579.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1155.4" y="590.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_special_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.08%)</title><rect x="1152.4" y="563.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1155.4" y="574.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="1152.4" y="547.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1155.4" y="558.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="1152.4" y="531.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.4" y="542.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.08%)</title><rect x="1152.4" y="515.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1155.4" y="526.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.08%)</title><rect x="1152.4" y="499.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.4" y="510.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (16 samples, 1.34%)</title><rect x="1153.4" y="803.0" width="15.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1156.4" y="814.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.08%)</title><rect x="1153.4" y="787.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.4" y="798.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.17%)</title><rect x="1154.4" y="787.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1157.4" y="798.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.08%)</title><rect x="1154.4" y="771.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1157.4" y="782.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.08%)</title><rect x="1155.4" y="771.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.4" y="782.0"></text>
</g>
<g>
<title>Matcher::collect_null_checks(Node*, Node*) (1 samples, 0.08%)</title><rect x="1155.4" y="755.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.4" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.25%)</title><rect x="1156.3" y="787.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.3" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.25%)</title><rect x="1156.3" y="771.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.3" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1156.3" y="755.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.3" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1157.3" y="755.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.3" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.08%)</title><rect x="1157.3" y="739.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1160.3" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.08%)</title><rect x="1158.3" y="755.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.3" y="766.0"></text>
</g>
<g>
<title>Node::is_iteratively_computed() (1 samples, 0.08%)</title><rect x="1158.3" y="739.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.3" y="750.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.08%)</title><rect x="1158.3" y="723.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.3" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (9 samples, 0.76%)</title><rect x="1159.3" y="787.0" width="8.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.3" y="798.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.08%)</title><rect x="1159.3" y="771.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1162.3" y="782.0"></text>
</g>
<g>
<title>MachProjNode::out_RegMask() const (1 samples, 0.08%)</title><rect x="1160.3" y="771.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.3" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.08%)</title><rect x="1161.3" y="771.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.3" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1161.3" y="755.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.3" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.08%)</title><rect x="1162.3" y="771.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.3" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 0.25%)</title><rect x="1163.3" y="771.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.3" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.08%)</title><rect x="1166.2" y="771.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.2" y="782.0"></text>
</g>
<g>
<title>MachProjNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1166.2" y="755.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.2" y="766.0"></text>
</g>
<g>
<title>loadConI0Node::bottom_type() const (1 samples, 0.08%)</title><rect x="1166.2" y="739.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.2" y="750.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1166.2" y="723.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.2" y="734.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1166.2" y="707.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.2" y="718.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.08%)</title><rect x="1166.2" y="691.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.2" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.08%)</title><rect x="1167.2" y="771.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.2" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.08%)</title><rect x="1167.2" y="755.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.2" y="766.0"></text>
</g>
<g>
<title>testI_regNode::ideal_Opcode() const (1 samples, 0.08%)</title><rect x="1168.2" y="787.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.2" y="798.0"></text>
</g>
<g>
<title>Compile::Optimize() (13 samples, 1.09%)</title><rect x="1169.2" y="803.0" width="12.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.2" y="814.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (2 samples, 0.17%)</title><rect x="1169.2" y="787.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1172.2" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (7 samples, 0.59%)</title><rect x="1171.2" y="787.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.2" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.17%)</title><rect x="1171.2" y="771.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.2" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.08%)</title><rect x="1172.2" y="755.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.2" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.34%)</title><rect x="1173.2" y="771.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.2" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (4 samples, 0.34%)</title><rect x="1173.2" y="755.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.2" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (4 samples, 0.34%)</title><rect x="1173.2" y="739.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.2" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.08%)</title><rect x="1177.1" y="771.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.1" y="782.0"></text>
</g>
<g>
<title>TypeOopPtr::singleton() const (1 samples, 0.08%)</title><rect x="1177.1" y="755.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.1" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.08%)</title><rect x="1178.1" y="787.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.1" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.08%)</title><rect x="1178.1" y="771.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.1" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.17%)</title><rect x="1179.1" y="787.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.1" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.17%)</title><rect x="1179.1" y="771.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.1" y="782.0"></text>
</g>
<g>
<title>Node::hash() const (1 samples, 0.08%)</title><rect x="1179.1" y="755.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.1" y="766.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1180.1" y="755.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.1" y="766.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.08%)</title><rect x="1180.1" y="739.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.1" y="750.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.08%)</title><rect x="1181.1" y="787.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.1" y="798.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.08%)</title><rect x="1181.1" y="771.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.1" y="782.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1181.1" y="755.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.1" y="766.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1181.1" y="739.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.1" y="750.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.08%)</title><rect x="1181.1" y="723.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.1" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.25%)</title><rect x="1182.1" y="803.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.1" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.25%)</title><rect x="1182.1" y="787.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.1" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.25%)</title><rect x="1182.1" y="771.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.1" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.25%)</title><rect x="1182.1" y="755.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.1" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.25%)</title><rect x="1182.1" y="739.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.1" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.25%)</title><rect x="1182.1" y="723.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.1" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.25%)</title><rect x="1182.1" y="707.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.1" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.25%)</title><rect x="1182.1" y="691.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.1" y="702.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.08%)</title><rect x="1182.1" y="675.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.1" y="686.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.08%)</title><rect x="1182.1" y="659.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.1" y="670.0"></text>
</g>
<g>
<title>BuildCutout::BuildCutout(GraphKit*, Node*, float, float) (1 samples, 0.08%)</title><rect x="1182.1" y="643.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1183.1" y="675.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.1" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1183.1" y="659.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.1" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1183.1" y="643.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1183.1" y="627.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.1" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.1" y="611.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.1" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1183.1" y="595.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1183.1" y="579.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1183.1" y="563.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1183.1" y="547.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1183.1" y="531.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.1" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.1" y="515.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.1" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1183.1" y="499.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1183.1" y="483.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1183.1" y="467.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1183.1" y="451.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1183.1" y="435.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.1" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.1" y="419.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.1" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1183.1" y="403.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1183.1" y="387.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1183.1" y="371.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1183.1" y="355.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1183.1" y="339.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.1" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.1" y="323.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.1" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1183.1" y="307.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1183.1" y="291.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1183.1" y="275.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1183.1" y="259.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.1" y="270.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.08%)</title><rect x="1183.1" y="243.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.1" y="254.0"></text>
</g>
<g>
<title>Parse::call_register_finalizer() (1 samples, 0.08%)</title><rect x="1183.1" y="227.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.1" y="238.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.08%)</title><rect x="1183.1" y="211.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.1" y="222.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1183.1" y="195.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.1" y="206.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1183.1" y="179.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.1" y="190.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1183.1" y="163.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.1" y="174.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.08%)</title><rect x="1183.1" y="147.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.1" y="158.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1183.1" y="131.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.1" y="142.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.08%)</title><rect x="1183.1" y="115.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.1" y="126.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.08%)</title><rect x="1183.1" y="99.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.1" y="110.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1183.1" y="83.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.1" y="94.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1183.1" y="67.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.1" y="78.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.08%)</title><rect x="1183.1" y="51.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.1" y="62.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.08%)</title><rect x="1183.1" y="35.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.1" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.1" y="611.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.1" y="622.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.1" y="595.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.1" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.1" y="579.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.1" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1184.1" y="563.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1184.1" y="547.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1184.1" y="531.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1184.1" y="515.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1184.1" y="499.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.1" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.1" y="483.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.1" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1184.1" y="467.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.1" y="478.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.08%)</title><rect x="1184.1" y="451.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.1" y="462.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.08%)</title><rect x="1184.1" y="435.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.1" y="446.0"></text>
</g>
<g>
<title>DataLayout::data_in() (1 samples, 0.08%)</title><rect x="1184.1" y="419.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.1" y="430.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="1184.1" y="403.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1187.1" y="414.0"></text>
</g>
<g>
<title>Type::Initialize(Compile*) (1 samples, 0.08%)</title><rect x="1185.1" y="803.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.1" y="814.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1185.1" y="787.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.1" y="798.0"></text>
</g>
<g>
<title>TypeAryPtr::hash() const (1 samples, 0.08%)</title><rect x="1185.1" y="771.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.1" y="782.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.08%)</title><rect x="1186.0" y="803.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.0" y="814.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.08%)</title><rect x="1186.0" y="787.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.0" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::add_dependent_nmethod(nmethod*) (1 samples, 0.08%)</title><rect x="1186.0" y="771.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.0" y="782.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.17%)</title><rect x="1187.0" y="835.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.0" y="846.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.17%)</title><rect x="1187.0" y="819.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.0" y="830.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.17%)</title><rect x="1187.0" y="803.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.0" y="814.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.17%)</title><rect x="1187.0" y="787.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.0" y="798.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.17%)</title><rect x="1187.0" y="771.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.0" y="782.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 0.17%)</title><rect x="1187.0" y="755.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.0" y="766.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (2 samples, 0.17%)</title><rect x="1187.0" y="739.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.0" y="750.0"></text>
</g>
<g>
<title>LIR_OpVisitState::visit(LIR_Op*) (1 samples, 0.08%)</title><rect x="1187.0" y="723.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.0" y="734.0"></text>
</g>
<g>
<title>LIR_OprPtr::as_address() (1 samples, 0.08%)</title><rect x="1187.0" y="707.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.0" y="718.0"></text>
</g>
<g>
<title>LinearScan::add_use(int, int, int, IntervalUseKind, BasicType) (1 samples, 0.08%)</title><rect x="1188.0" y="723.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.0" y="734.0"></text>
</g>
<g>
<title>_init (1 samples, 0.08%)</title><rect x="1188.0" y="707.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1191.0" y="718.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.08%)</title><rect x="1189.0" y="899.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1192.0" y="910.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.08%)</title><rect x="1189.0" y="883.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.0" y="894.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.08%)</title><rect x="1189.0" y="867.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1192.0" y="878.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.08%)</title><rect x="1189.0" y="851.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1192.0" y="862.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.08%)</title><rect x="1189.0" y="835.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1192.0" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.08%)</title><rect x="1189.0" y="819.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.0" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.08%)</title><rect x="1189.0" y="803.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1192.0" y="814.0"></text>
</g>
<g>
<title>OtherRegionsTable::occupied() const (1 samples, 0.08%)</title><rect x="1189.0" y="787.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.0" y="798.0"></text>
</g>
</g>
</svg>
