<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1350" onload="init(evt)" viewBox="0 0 1200 1350" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1333"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1333"> </text>
<g id="frames">
<g>
<title>all (1,333 samples, 100.00%)</title><rect x="10.0" y="1299.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1310.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (275 samples, 20.63%)</title><rect x="10.0" y="1283.0" width="243.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1294.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (275 samples, 20.63%)</title><rect x="10.0" y="1267.0" width="243.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1278.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (275 samples, 20.63%)</title><rect x="10.0" y="1251.0" width="243.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1262.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (5 samples, 0.38%)</title><rect x="10.9" y="1235.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.9" y="1246.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.08%)</title><rect x="10.9" y="1219.0" width="0.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="13.9" y="1230.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="10.9" y="1203.0" width="0.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="13.9" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (4 samples, 0.30%)</title><rect x="11.8" y="1219.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.8" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.23%)</title><rect x="12.7" y="1203.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.7" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.23%)</title><rect x="12.7" y="1187.0" width="2.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.7" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.23%)</title><rect x="12.7" y="1171.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.7" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.23%)</title><rect x="12.7" y="1155.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.7" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.23%)</title><rect x="12.7" y="1139.0" width="2.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.7" y="1150.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.08%)</title><rect x="12.7" y="1123.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.7" y="1134.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="12.7" y="1107.0" width="0.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="15.7" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.08%)</title><rect x="13.5" y="1123.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.5" y="1134.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="13.5" y="1107.0" width="0.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="16.5" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="14.4" y="1123.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.4" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (2 samples, 0.15%)</title><rect x="15.3" y="1235.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.3" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (2 samples, 0.15%)</title><rect x="15.3" y="1219.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.3" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="16.2" y="1203.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.2" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="16.2" y="1187.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="19.2" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="16.2" y="1171.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.2" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="16.2" y="1155.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="19.2" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="16.2" y="1139.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.2" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.08%)</title><rect x="16.2" y="1123.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="19.2" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (9 samples, 0.68%)</title><rect x="17.1" y="1235.0" width="7.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.1" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (9 samples, 0.68%)</title><rect x="17.1" y="1219.0" width="7.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.1" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (9 samples, 0.68%)</title><rect x="17.1" y="1203.0" width="7.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.1" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$270/1616744399.accept (9 samples, 0.68%)</title><rect x="17.1" y="1187.0" width="7.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="20.1" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (9 samples, 0.68%)</title><rect x="17.1" y="1171.0" width="7.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.1" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (9 samples, 0.68%)</title><rect x="17.1" y="1155.0" width="7.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="20.1" y="1166.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (8 samples, 0.60%)</title><rect x="18.0" y="1139.0" width="7.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.0" y="1150.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (200 samples, 15.00%)</title><rect x="25.0" y="1235.0" width="177.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="28.0" y="1246.0">java/lang/Iterable.forE..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$269/2084875528.accept (195 samples, 14.63%)</title><rect x="25.0" y="1219.0" width="172.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="28.0" y="1230.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (195 samples, 14.63%)</title><rect x="25.0" y="1203.0" width="172.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.0" y="1214.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (174 samples, 13.05%)</title><rect x="25.9" y="1187.0" width="154.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="28.9" y="1198.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (174 samples, 13.05%)</title><rect x="25.9" y="1171.0" width="154.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="28.9" y="1182.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (174 samples, 13.05%)</title><rect x="25.9" y="1155.0" width="154.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="28.9" y="1166.0">com/linecorp/decaton..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (174 samples, 13.05%)</title><rect x="25.9" y="1139.0" width="154.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="28.9" y="1150.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (174 samples, 13.05%)</title><rect x="25.9" y="1123.0" width="154.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.9" y="1134.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (147 samples, 11.03%)</title><rect x="49.8" y="1107.0" width="130.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="52.8" y="1118.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (124 samples, 9.30%)</title><rect x="67.5" y="1091.0" width="109.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="70.5" y="1102.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (36 samples, 2.70%)</title><rect x="75.5" y="1075.0" width="31.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="78.5" y="1086.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (36 samples, 2.70%)</title><rect x="75.5" y="1059.0" width="31.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="78.5" y="1070.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (36 samples, 2.70%)</title><rect x="75.5" y="1043.0" width="31.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="78.5" y="1054.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (79 samples, 5.93%)</title><rect x="107.4" y="1075.0" width="69.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="110.4" y="1086.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (79 samples, 5.93%)</title><rect x="107.4" y="1059.0" width="69.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="110.4" y="1070.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (79 samples, 5.93%)</title><rect x="107.4" y="1043.0" width="69.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="110.4" y="1054.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (79 samples, 5.93%)</title><rect x="107.4" y="1027.0" width="69.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="110.4" y="1038.0">java/ut..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (77 samples, 5.78%)</title><rect x="109.1" y="1011.0" width="68.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="112.1" y="1022.0">sun/mis..</text>
</g>
<g>
<title>Unsafe_Unpark (70 samples, 5.25%)</title><rect x="110.9" y="995.0" width="62.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="113.9" y="1006.0">Unsafe..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.23%)</title><rect x="113.6" y="979.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="116.6" y="990.0"></text>
</g>
<g>
<title>Parker::unpark() (3 samples, 0.23%)</title><rect x="116.2" y="979.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="119.2" y="990.0"></text>
</g>
<g>
<title>__pthread_cond_signal (42 samples, 3.15%)</title><rect x="118.9" y="979.0" width="37.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="121.9" y="990.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (7 samples, 0.53%)</title><rect x="156.1" y="979.0" width="6.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="159.1" y="990.0"></text>
</g>
<g>
<title>pthread_mutex_lock (12 samples, 0.90%)</title><rect x="162.3" y="979.0" width="10.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="165.3" y="990.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.08%)</title><rect x="172.9" y="995.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="175.9" y="1006.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.23%)</title><rect x="173.8" y="995.0" width="2.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="176.8" y="1006.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.08%)</title><rect x="176.4" y="995.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="179.4" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.08%)</title><rect x="177.3" y="1091.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="180.3" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.08%)</title><rect x="177.3" y="1075.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="180.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.08%)</title><rect x="177.3" y="1059.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="180.3" y="1070.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (1 samples, 0.08%)</title><rect x="177.3" y="1043.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="180.3" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.15%)</title><rect x="178.2" y="1091.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="181.2" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.15%)</title><rect x="178.2" y="1075.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="181.2" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.15%)</title><rect x="178.2" y="1059.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="181.2" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.15%)</title><rect x="178.2" y="1043.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="181.2" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.08%)</title><rect x="179.1" y="1027.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="182.1" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (11 samples, 0.83%)</title><rect x="180.0" y="1187.0" width="9.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="183.0" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (11 samples, 0.83%)</title><rect x="180.0" y="1171.0" width="9.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="183.0" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.08%)</title><rect x="188.8" y="1155.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="191.8" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.08%)</title><rect x="188.8" y="1139.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="191.8" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.08%)</title><rect x="188.8" y="1123.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="191.8" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.08%)</title><rect x="188.8" y="1107.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="191.8" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.08%)</title><rect x="188.8" y="1091.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="191.8" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (8 samples, 0.60%)</title><rect x="189.7" y="1187.0" width="7.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="192.7" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.get (8 samples, 0.60%)</title><rect x="189.7" y="1171.0" width="7.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="192.7" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (8 samples, 0.60%)</title><rect x="189.7" y="1155.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="192.7" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.08%)</title><rect x="196.8" y="1187.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="199.8" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.08%)</title><rect x="196.8" y="1171.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="199.8" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.08%)</title><rect x="196.8" y="1155.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="199.8" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.08%)</title><rect x="196.8" y="1139.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="199.8" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.08%)</title><rect x="196.8" y="1123.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="199.8" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (1 samples, 0.08%)</title><rect x="196.8" y="1107.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="199.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (5 samples, 0.38%)</title><rect x="197.7" y="1219.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="200.7" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (5 samples, 0.38%)</title><rect x="197.7" y="1203.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="200.7" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.38%)</title><rect x="197.7" y="1187.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="200.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.38%)</title><rect x="197.7" y="1171.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="200.7" y="1182.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (3 samples, 0.23%)</title><rect x="199.4" y="1155.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="202.4" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (58 samples, 4.35%)</title><rect x="202.1" y="1235.0" width="51.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="205.1" y="1246.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (58 samples, 4.35%)</title><rect x="202.1" y="1219.0" width="51.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="205.1" y="1230.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (27 samples, 2.03%)</title><rect x="202.1" y="1203.0" width="23.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="205.1" y="1214.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (27 samples, 2.03%)</title><rect x="202.1" y="1187.0" width="23.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="205.1" y="1198.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (26 samples, 1.95%)</title><rect x="202.1" y="1171.0" width="23.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="205.1" y="1182.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (24 samples, 1.80%)</title><rect x="202.1" y="1155.0" width="21.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="205.1" y="1166.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (24 samples, 1.80%)</title><rect x="202.1" y="1139.0" width="21.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="205.1" y="1150.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (7 samples, 0.53%)</title><rect x="205.6" y="1123.0" width="6.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="208.6" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (3 samples, 0.23%)</title><rect x="205.6" y="1107.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="208.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (3 samples, 0.23%)</title><rect x="205.6" y="1091.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="208.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (3 samples, 0.23%)</title><rect x="205.6" y="1075.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="208.6" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (3 samples, 0.23%)</title><rect x="205.6" y="1059.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="208.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (3 samples, 0.23%)</title><rect x="205.6" y="1043.0" width="2.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="208.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (3 samples, 0.23%)</title><rect x="205.6" y="1027.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="208.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (3 samples, 0.23%)</title><rect x="205.6" y="1011.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="208.6" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (4 samples, 0.30%)</title><rect x="208.3" y="1107.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="211.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (4 samples, 0.30%)</title><rect x="208.3" y="1091.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="211.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.ensureNoneRemaining (4 samples, 0.30%)</title><rect x="208.3" y="1075.0" width="3.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="211.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (13 samples, 0.98%)</title><rect x="211.8" y="1123.0" width="11.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="214.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.08%)</title><rect x="211.8" y="1107.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="214.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (12 samples, 0.90%)</title><rect x="212.7" y="1107.0" width="10.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="215.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (12 samples, 0.90%)</title><rect x="212.7" y="1091.0" width="10.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="215.7" y="1102.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (12 samples, 0.90%)</title><rect x="212.7" y="1075.0" width="10.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="215.7" y="1086.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (8 samples, 0.60%)</title><rect x="215.4" y="1059.0" width="7.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="218.4" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (8 samples, 0.60%)</title><rect x="215.4" y="1043.0" width="7.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="218.4" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (8 samples, 0.60%)</title><rect x="215.4" y="1027.0" width="7.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="218.4" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (8 samples, 0.60%)</title><rect x="215.4" y="1011.0" width="7.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="218.4" y="1022.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="221.6" y="995.0" width="0.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="224.6" y="1006.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="222.5" y="1059.0" width="0.8" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="225.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.08%)</title><rect x="223.3" y="1155.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="226.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.08%)</title><rect x="223.3" y="1139.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="226.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.08%)</title><rect x="223.3" y="1123.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="226.3" y="1134.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.08%)</title><rect x="223.3" y="1107.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="226.3" y="1118.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.08%)</title><rect x="223.3" y="1091.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="226.3" y="1102.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="223.3" y="1075.0" width="0.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="226.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.08%)</title><rect x="224.2" y="1155.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="227.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.08%)</title><rect x="224.2" y="1139.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="227.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.08%)</title><rect x="224.2" y="1123.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="227.2" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.08%)</title><rect x="224.2" y="1107.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="227.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.08%)</title><rect x="225.1" y="1171.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="228.1" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.08%)</title><rect x="225.1" y="1155.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="228.1" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.08%)</title><rect x="225.1" y="1139.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="228.1" y="1150.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.08%)</title><rect x="225.1" y="1123.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="228.1" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="225.1" y="1107.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="228.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (15 samples, 1.13%)</title><rect x="226.0" y="1203.0" width="13.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="229.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (12 samples, 0.90%)</title><rect x="226.0" y="1187.0" width="10.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="229.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (11 samples, 0.83%)</title><rect x="226.0" y="1171.0" width="9.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="229.0" y="1182.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 0.23%)</title><rect x="226.0" y="1155.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="229.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$237/346018644.accept (3 samples, 0.23%)</title><rect x="226.0" y="1139.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="229.0" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (3 samples, 0.23%)</title><rect x="226.0" y="1123.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="229.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (2 samples, 0.15%)</title><rect x="226.0" y="1107.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="229.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.08%)</title><rect x="226.0" y="1091.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="229.0" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="226.0" y="1075.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="229.0" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="226.0" y="1059.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="229.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.08%)</title><rect x="226.9" y="1091.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="229.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.08%)</title><rect x="226.9" y="1075.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="229.9" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="226.9" y="1059.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="229.9" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="226.9" y="1043.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="229.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.08%)</title><rect x="227.8" y="1107.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="230.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.08%)</title><rect x="227.8" y="1091.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="230.8" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.15%)</title><rect x="228.6" y="1155.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="231.6" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.15%)</title><rect x="228.6" y="1139.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="231.6" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="229.5" y="1123.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="232.5" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="229.5" y="1107.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="232.5" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="229.5" y="1091.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="232.5" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="229.5" y="1075.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="232.5" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$83/104507004.get (1 samples, 0.08%)</title><rect x="229.5" y="1059.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="232.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 0.15%)</title><rect x="230.4" y="1155.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="233.4" y="1166.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (2 samples, 0.15%)</title><rect x="230.4" y="1139.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="233.4" y="1150.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (2 samples, 0.15%)</title><rect x="230.4" y="1123.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="233.4" y="1134.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.15%)</title><rect x="230.4" y="1107.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="233.4" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.15%)</title><rect x="230.4" y="1091.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="233.4" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="231.3" y="1075.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="234.3" y="1086.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.08%)</title><rect x="231.3" y="1059.0" width="0.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="234.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (4 samples, 0.30%)</title><rect x="232.2" y="1155.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="235.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (3 samples, 0.23%)</title><rect x="233.1" y="1139.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="236.1" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.15%)</title><rect x="234.0" y="1123.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="237.0" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.15%)</title><rect x="234.0" y="1107.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="237.0" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.15%)</title><rect x="234.0" y="1091.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="237.0" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.15%)</title><rect x="234.0" y="1075.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="237.0" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.15%)</title><rect x="234.0" y="1059.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="237.0" y="1070.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="234.8" y="1043.0" width="0.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="237.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.08%)</title><rect x="235.7" y="1171.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="238.7" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.08%)</title><rect x="235.7" y="1155.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="238.7" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="235.7" y="1139.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="238.7" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.getOpFlags (1 samples, 0.08%)</title><rect x="235.7" y="1123.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="238.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (3 samples, 0.23%)</title><rect x="236.6" y="1187.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="239.6" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.08%)</title><rect x="236.6" y="1171.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="239.6" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.08%)</title><rect x="236.6" y="1155.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="239.6" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.08%)</title><rect x="236.6" y="1139.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="239.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (1 samples, 0.08%)</title><rect x="236.6" y="1123.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="239.6" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (1 samples, 0.08%)</title><rect x="236.6" y="1107.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="239.6" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="236.6" y="1091.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="239.6" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="236.6" y="1075.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="239.6" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.invokeCompletedOffsetCommitCallbacks (1 samples, 0.08%)</title><rect x="237.5" y="1171.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="240.5" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (1 samples, 0.08%)</title><rect x="237.5" y="1155.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="240.5" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.08%)</title><rect x="238.4" y="1171.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="241.4" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.rejoinNeededOrPending (1 samples, 0.08%)</title><rect x="238.4" y="1155.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="241.4" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (7 samples, 0.53%)</title><rect x="239.3" y="1203.0" width="6.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="242.3" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (7 samples, 0.53%)</title><rect x="239.3" y="1187.0" width="6.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="242.3" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.08%)</title><rect x="239.3" y="1171.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="242.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.08%)</title><rect x="239.3" y="1155.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="242.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.08%)</title><rect x="239.3" y="1139.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="242.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.08%)</title><rect x="239.3" y="1123.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="242.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.08%)</title><rect x="239.3" y="1107.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="242.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.08%)</title><rect x="239.3" y="1091.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="242.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.08%)</title><rect x="239.3" y="1075.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="242.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.08%)</title><rect x="239.3" y="1059.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="242.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.08%)</title><rect x="239.3" y="1043.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="242.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.08%)</title><rect x="239.3" y="1027.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="242.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.08%)</title><rect x="239.3" y="1011.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="242.3" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.08%)</title><rect x="239.3" y="995.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="242.3" y="1006.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (1 samples, 0.08%)</title><rect x="239.3" y="979.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="242.3" y="990.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newDecoder (1 samples, 0.08%)</title><rect x="239.3" y="963.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="242.3" y="974.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (1 samples, 0.08%)</title><rect x="239.3" y="947.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="242.3" y="958.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (1 samples, 0.08%)</title><rect x="239.3" y="931.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="242.3" y="942.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (1 samples, 0.08%)</title><rect x="239.3" y="915.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="242.3" y="926.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (1 samples, 0.08%)</title><rect x="239.3" y="899.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="242.3" y="910.0"></text>
</g>
<g>
<title>java/nio/charset/Charset.atBugLevel (1 samples, 0.08%)</title><rect x="239.3" y="883.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="242.3" y="894.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.08%)</title><rect x="239.3" y="867.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="242.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (6 samples, 0.45%)</title><rect x="240.2" y="1171.0" width="5.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="243.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (4 samples, 0.30%)</title><rect x="240.2" y="1155.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="243.2" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (2 samples, 0.15%)</title><rect x="240.2" y="1139.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="243.2" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (2 samples, 0.15%)</title><rect x="240.2" y="1123.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="243.2" y="1134.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.15%)</title><rect x="240.2" y="1107.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="243.2" y="1118.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.15%)</title><rect x="240.2" y="1091.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="243.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.15%)</title><rect x="241.9" y="1139.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="244.9" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.08%)</title><rect x="241.9" y="1123.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="244.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.08%)</title><rect x="241.9" y="1107.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="244.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.08%)</title><rect x="241.9" y="1091.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="244.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.08%)</title><rect x="241.9" y="1075.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="244.9" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.08%)</title><rect x="241.9" y="1059.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="244.9" y="1070.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="241.9" y="1043.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="244.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToStagedReceives (1 samples, 0.08%)</title><rect x="242.8" y="1123.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="245.8" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.08%)</title><rect x="242.8" y="1107.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="245.8" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.08%)</title><rect x="242.8" y="1091.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="245.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.hashCode (1 samples, 0.08%)</title><rect x="242.8" y="1075.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="245.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (2 samples, 0.15%)</title><rect x="243.7" y="1155.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="246.7" y="1166.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.08%)</title><rect x="244.6" y="1139.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="247.6" y="1150.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.08%)</title><rect x="244.6" y="1123.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="247.6" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.08%)</title><rect x="244.6" y="1107.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="247.6" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.08%)</title><rect x="244.6" y="1091.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="247.6" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.08%)</title><rect x="244.6" y="1075.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="247.6" y="1086.0"></text>
</g>
<g>
<title>__GI_epoll_wait (1 samples, 0.08%)</title><rect x="244.6" y="1059.0" width="0.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="247.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (8 samples, 0.60%)</title><rect x="245.5" y="1203.0" width="7.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="248.5" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.08%)</title><rect x="245.5" y="1187.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="248.5" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.08%)</title><rect x="245.5" y="1171.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="248.5" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.wakeup (1 samples, 0.08%)</title><rect x="245.5" y="1155.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="248.5" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.wakeup (1 samples, 0.08%)</title><rect x="245.5" y="1139.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="248.5" y="1150.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.wakeup (1 samples, 0.08%)</title><rect x="245.5" y="1123.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="248.5" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.interrupt (1 samples, 0.08%)</title><rect x="245.5" y="1107.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="248.5" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.interrupt (1 samples, 0.08%)</title><rect x="245.5" y="1091.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="248.5" y="1102.0"></text>
</g>
<g>
<title>__write (1 samples, 0.08%)</title><rect x="245.5" y="1075.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="248.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (7 samples, 0.53%)</title><rect x="246.4" y="1187.0" width="6.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="249.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (3 samples, 0.23%)</title><rect x="248.1" y="1171.0" width="2.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="251.1" y="1182.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.08%)</title><rect x="248.1" y="1155.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="251.1" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.iterator (1 samples, 0.08%)</title><rect x="249.0" y="1155.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="252.0" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.&lt;init&gt; (1 samples, 0.08%)</title><rect x="249.0" y="1139.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="252.0" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.08%)</title><rect x="249.9" y="1155.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="252.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 0.15%)</title><rect x="250.8" y="1171.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="253.8" y="1182.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.08%)</title><rect x="251.7" y="1155.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="254.7" y="1166.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.08%)</title><rect x="251.7" y="1139.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="254.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.08%)</title><rect x="252.6" y="1203.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="255.6" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="252.6" y="1187.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="255.6" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="252.6" y="1171.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="255.6" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="252.6" y="1155.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="255.6" y="1166.0"></text>
</g>
<g>
<title>java/lang/Thread.run (872 samples, 65.42%)</title><rect x="253.4" y="1283.0" width="771.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="256.4" y="1294.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (872 samples, 65.42%)</title><rect x="253.4" y="1267.0" width="771.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="256.4" y="1278.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (872 samples, 65.42%)</title><rect x="253.4" y="1251.0" width="771.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="256.4" y="1262.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$289/770006613.run (637 samples, 47.79%)</title><rect x="253.4" y="1235.0" width="563.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="256.4" y="1246.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$289/7700..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62 (637 samples, 47.79%)</title><rect x="253.4" y="1219.0" width="563.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="256.4" y="1230.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (637 samples, 47.79%)</title><rect x="253.4" y="1203.0" width="563.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="256.4" y="1214.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>__clock_gettime (9 samples, 0.68%)</title><rect x="256.1" y="1187.0" width="8.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="259.1" y="1198.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.53%)</title><rect x="257.9" y="1171.0" width="6.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="260.9" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (624 samples, 46.81%)</title><rect x="264.1" y="1187.0" width="552.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="267.1" y="1198.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThen..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="272.0" y="1171.0" width="0.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="275.0" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (1 samples, 0.08%)</title><rect x="272.9" y="1171.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="275.9" y="1182.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.08%)</title><rect x="272.9" y="1155.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="275.9" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="272.9" y="1139.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="275.9" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="272.9" y="1123.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="275.9" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (69 samples, 5.18%)</title><rect x="273.8" y="1171.0" width="61.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="276.8" y="1182.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (1 samples, 0.08%)</title><rect x="286.2" y="1155.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="289.2" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (54 samples, 4.05%)</title><rect x="287.1" y="1155.0" width="47.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="290.1" y="1166.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (54 samples, 4.05%)</title><rect x="287.1" y="1139.0" width="47.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="290.1" y="1150.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (54 samples, 4.05%)</title><rect x="287.1" y="1123.0" width="47.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="290.1" y="1134.0">java..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="287.1" y="1107.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="290.1" y="1118.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="287.1" y="1091.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="290.1" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="287.1" y="1075.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="290.1" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (6 samples, 0.45%)</title><rect x="288.0" y="1107.0" width="5.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="291.0" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 0.45%)</title><rect x="288.0" y="1091.0" width="5.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="291.0" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$294/947478333.accept (2 samples, 0.15%)</title><rect x="288.8" y="1075.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="291.8" y="1086.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.15%)</title><rect x="290.6" y="1075.0" width="1.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="293.6" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (1 samples, 0.08%)</title><rect x="292.4" y="1075.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="295.4" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (47 samples, 3.53%)</title><rect x="293.3" y="1107.0" width="41.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="296.3" y="1118.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$294/947478333.accept (47 samples, 3.53%)</title><rect x="293.3" y="1091.0" width="41.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="296.3" y="1102.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (47 samples, 3.53%)</title><rect x="293.3" y="1075.0" width="41.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="296.3" y="1086.0">com..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (47 samples, 3.53%)</title><rect x="293.3" y="1059.0" width="41.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="296.3" y="1070.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (44 samples, 3.30%)</title><rect x="295.9" y="1043.0" width="39.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="298.9" y="1054.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (43 samples, 3.23%)</title><rect x="296.8" y="1027.0" width="38.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="299.8" y="1038.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (17 samples, 1.28%)</title><rect x="296.8" y="1011.0" width="15.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="299.8" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (17 samples, 1.28%)</title><rect x="296.8" y="995.0" width="15.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="299.8" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$287/1864098117.accept (1 samples, 0.08%)</title><rect x="304.8" y="979.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="307.8" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$286/579895002.accept (1 samples, 0.08%)</title><rect x="305.7" y="979.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="308.7" y="990.0"></text>
</g>
<g>
<title>itable stub (6 samples, 0.45%)</title><rect x="306.5" y="979.0" width="5.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="309.5" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (26 samples, 1.95%)</title><rect x="311.9" y="1011.0" width="23.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="314.9" y="1022.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$287/1864098117.accept (1 samples, 0.08%)</title><rect x="311.9" y="995.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="314.9" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$receive$83 (1 samples, 0.08%)</title><rect x="311.9" y="979.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="314.9" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$286/579895002.accept (1 samples, 0.08%)</title><rect x="312.7" y="995.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="315.7" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (24 samples, 1.80%)</title><rect x="313.6" y="995.0" width="21.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="316.6" y="1006.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.compareAndSetForkJoinTaskTag (3 samples, 0.23%)</title><rect x="332.2" y="979.0" width="2.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="335.2" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (164 samples, 12.30%)</title><rect x="334.9" y="1171.0" width="145.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="337.9" y="1182.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$45/1556995360.extract (164 samples, 12.30%)</title><rect x="334.9" y="1155.0" width="145.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="337.9" y="1166.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (164 samples, 12.30%)</title><rect x="334.9" y="1139.0" width="145.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="337.9" y="1150.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (164 samples, 12.30%)</title><rect x="334.9" y="1123.0" width="145.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="337.9" y="1134.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (164 samples, 12.30%)</title><rect x="334.9" y="1107.0" width="145.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="337.9" y="1118.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (164 samples, 12.30%)</title><rect x="334.9" y="1091.0" width="145.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="337.9" y="1102.0">com/fasterxml/jack..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (60 samples, 4.50%)</title><rect x="334.9" y="1075.0" width="53.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="337.9" y="1086.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (27 samples, 2.03%)</title><rect x="334.9" y="1059.0" width="23.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="337.9" y="1070.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (27 samples, 2.03%)</title><rect x="334.9" y="1043.0" width="23.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="337.9" y="1054.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (18 samples, 1.35%)</title><rect x="334.9" y="1027.0" width="15.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="337.9" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.getMask (2 samples, 0.15%)</title><rect x="349.0" y="1011.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="352.0" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (9 samples, 0.68%)</title><rect x="350.8" y="1027.0" width="8.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="353.8" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.23%)</title><rect x="354.4" y="1011.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="357.4" y="1022.0"></text>
</g>
<g>
<title>java/lang/ref/SoftReference.get (2 samples, 0.15%)</title><rect x="357.0" y="1011.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="360.0" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (33 samples, 2.48%)</title><rect x="358.8" y="1059.0" width="29.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="361.8" y="1070.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (33 samples, 2.48%)</title><rect x="358.8" y="1043.0" width="29.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="361.8" y="1054.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.08%)</title><rect x="358.8" y="1027.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="361.8" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.getMask (1 samples, 0.08%)</title><rect x="358.8" y="1011.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="361.8" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (16 samples, 1.20%)</title><rect x="359.7" y="1027.0" width="14.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="362.7" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.setEncoding (2 samples, 0.15%)</title><rect x="364.1" y="1011.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="367.1" y="1022.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (2 samples, 0.15%)</title><rect x="364.1" y="995.0" width="1.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="367.1" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.checkUTF16 (2 samples, 0.15%)</title><rect x="365.9" y="1011.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="368.9" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.checkUTF32 (2 samples, 0.15%)</title><rect x="367.6" y="1011.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="370.6" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (5 samples, 0.38%)</title><rect x="369.4" y="1011.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="372.4" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (10 samples, 0.75%)</title><rect x="373.8" y="1027.0" width="8.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="376.8" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="375.6" y="1011.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="378.6" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="375.6" y="995.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="378.6" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="375.6" y="979.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="378.6" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="375.6" y="963.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="378.6" y="974.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="375.6" y="947.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="378.6" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.08%)</title><rect x="375.6" y="931.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="378.6" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (5 samples, 0.38%)</title><rect x="376.5" y="1011.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="379.5" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (4 samples, 0.30%)</title><rect x="376.5" y="995.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="379.5" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.08%)</title><rect x="380.0" y="995.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="383.0" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="380.0" y="979.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="383.0" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="380.0" y="963.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="383.0" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="380.0" y="947.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="383.0" y="958.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.08%)</title><rect x="380.0" y="931.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="383.0" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (2 samples, 0.15%)</title><rect x="380.9" y="1011.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="383.9" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (6 samples, 0.45%)</title><rect x="382.7" y="1027.0" width="5.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="385.7" y="1038.0"></text>
</g>
<g>
<title>_new_instance_Java (1 samples, 0.08%)</title><rect x="385.3" y="1011.0" width="0.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="388.3" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (2 samples, 0.15%)</title><rect x="386.2" y="1011.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="389.2" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (92 samples, 6.90%)</title><rect x="388.0" y="1075.0" width="81.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="391.0" y="1086.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (4 samples, 0.30%)</title><rect x="388.0" y="1059.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="391.0" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (4 samples, 0.30%)</title><rect x="388.0" y="1043.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="391.0" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (3 samples, 0.23%)</title><rect x="388.0" y="1027.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="391.0" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (2 samples, 0.15%)</title><rect x="388.0" y="1011.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="391.0" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (1 samples, 0.08%)</title><rect x="389.8" y="1011.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="392.8" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.release (1 samples, 0.08%)</title><rect x="390.6" y="1027.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="393.6" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.08%)</title><rect x="390.6" y="1011.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="393.6" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (3 samples, 0.23%)</title><rect x="391.5" y="1059.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="394.5" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.23%)</title><rect x="391.5" y="1043.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="394.5" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.08%)</title><rect x="393.3" y="1027.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="396.3" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (7 samples, 0.53%)</title><rect x="394.2" y="1059.0" width="6.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="397.2" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 0.38%)</title><rect x="395.1" y="1043.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="398.1" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.15%)</title><rect x="397.7" y="1027.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="400.7" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.15%)</title><rect x="397.7" y="1011.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="400.7" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.08%)</title><rect x="399.5" y="1043.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="402.5" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (6 samples, 0.45%)</title><rect x="400.4" y="1059.0" width="5.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="403.4" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (5 samples, 0.38%)</title><rect x="400.4" y="1043.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="403.4" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.08%)</title><rect x="403.9" y="1027.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="406.9" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.08%)</title><rect x="403.9" y="1011.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="406.9" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.08%)</title><rect x="403.9" y="995.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="406.9" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="403.9" y="979.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="406.9" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.08%)</title><rect x="404.8" y="1043.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="407.8" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (72 samples, 5.40%)</title><rect x="405.7" y="1059.0" width="63.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="408.7" y="1070.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (72 samples, 5.40%)</title><rect x="405.7" y="1043.0" width="63.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="408.7" y="1054.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (19 samples, 1.43%)</title><rect x="406.6" y="1027.0" width="16.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="409.6" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (9 samples, 0.68%)</title><rect x="406.6" y="1011.0" width="7.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="409.6" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (9 samples, 0.68%)</title><rect x="406.6" y="995.0" width="7.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="409.6" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (9 samples, 0.68%)</title><rect x="406.6" y="979.0" width="7.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="409.6" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (10 samples, 0.75%)</title><rect x="414.5" y="1011.0" width="8.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="417.5" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (52 samples, 3.90%)</title><rect x="423.4" y="1027.0" width="46.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="426.4" y="1038.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (50 samples, 3.75%)</title><rect x="425.2" y="1011.0" width="44.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="428.2" y="1022.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (50 samples, 3.75%)</title><rect x="425.2" y="995.0" width="44.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="428.2" y="1006.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (13 samples, 0.98%)</title><rect x="431.4" y="979.0" width="11.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="434.4" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.30%)</title><rect x="434.9" y="963.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="437.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.30%)</title><rect x="434.9" y="947.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="437.9" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.30%)</title><rect x="434.9" y="931.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="437.9" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.15%)</title><rect x="436.7" y="915.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="439.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 0.23%)</title><rect x="438.4" y="963.0" width="2.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="441.4" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.15%)</title><rect x="441.1" y="963.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="444.1" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (7 samples, 0.53%)</title><rect x="442.9" y="979.0" width="6.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="445.9" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (6 samples, 0.45%)</title><rect x="443.8" y="963.0" width="5.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="446.8" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="444.6" y="947.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="447.6" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="444.6" y="931.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="447.6" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="444.6" y="915.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="447.6" y="926.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.08%)</title><rect x="444.6" y="899.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="447.6" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 0.30%)</title><rect x="445.5" y="947.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="448.5" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 0.30%)</title><rect x="445.5" y="931.0" width="3.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="448.5" y="942.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (4 samples, 0.30%)</title><rect x="445.5" y="915.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="448.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 0.23%)</title><rect x="449.1" y="979.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="452.1" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (10 samples, 0.75%)</title><rect x="451.7" y="979.0" width="8.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="454.7" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (10 samples, 0.75%)</title><rect x="451.7" y="963.0" width="8.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="454.7" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (10 samples, 0.75%)</title><rect x="451.7" y="947.0" width="8.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="454.7" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (10 samples, 0.75%)</title><rect x="451.7" y="931.0" width="8.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="454.7" y="942.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (10 samples, 0.75%)</title><rect x="451.7" y="915.0" width="8.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="454.7" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="451.7" y="899.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="454.7" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.08%)</title><rect x="451.7" y="883.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="454.7" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="451.7" y="867.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="454.7" y="878.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (9 samples, 0.68%)</title><rect x="452.6" y="899.0" width="8.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="455.6" y="910.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor15.newInstance (2 samples, 0.15%)</title><rect x="458.8" y="883.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="461.8" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (10 samples, 0.75%)</title><rect x="460.6" y="979.0" width="8.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="463.6" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.get (10 samples, 0.75%)</title><rect x="460.6" y="963.0" width="8.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="463.6" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (10 samples, 0.75%)</title><rect x="460.6" y="947.0" width="8.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="463.6" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.15%)</title><rect x="467.7" y="931.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="470.7" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (12 samples, 0.90%)</title><rect x="469.4" y="1075.0" width="10.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="472.4" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (12 samples, 0.90%)</title><rect x="469.4" y="1059.0" width="10.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="472.4" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (12 samples, 0.90%)</title><rect x="469.4" y="1043.0" width="10.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="472.4" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (12 samples, 0.90%)</title><rect x="469.4" y="1027.0" width="10.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="472.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.15%)</title><rect x="478.3" y="1011.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="481.3" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (372 samples, 27.91%)</title><rect x="480.1" y="1171.0" width="329.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="483.1" y="1182.0">com/linecorp/decaton/processor/runtime/intern..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.08%)</title><rect x="519.9" y="1155.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="522.9" y="1166.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.wasLastOpReadOrNull (1 samples, 0.08%)</title><rect x="520.8" y="1155.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="523.8" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.08%)</title><rect x="521.7" y="1155.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="524.7" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (45 samples, 3.38%)</title><rect x="522.5" y="1155.0" width="39.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="525.5" y="1166.0">com..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (45 samples, 3.38%)</title><rect x="522.5" y="1139.0" width="39.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="525.5" y="1150.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (44 samples, 3.30%)</title><rect x="523.4" y="1123.0" width="39.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="526.4" y="1134.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 0.23%)</title><rect x="526.1" y="1107.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="529.1" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="526.1" y="1091.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="529.1" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="526.1" y="1075.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="529.1" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="526.1" y="1059.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="529.1" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.15%)</title><rect x="527.0" y="1091.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="530.0" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.08%)</title><rect x="527.9" y="1075.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="530.9" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.08%)</title><rect x="527.9" y="1059.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="530.9" y="1070.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.wasLastOpReadOrNull (3 samples, 0.23%)</title><rect x="528.7" y="1107.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="531.7" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (8 samples, 0.60%)</title><rect x="531.4" y="1107.0" width="7.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="534.4" y="1118.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (27 samples, 2.03%)</title><rect x="538.5" y="1107.0" width="23.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="541.5" y="1118.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (11 samples, 0.83%)</title><rect x="550.9" y="1091.0" width="9.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="553.9" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.08%)</title><rect x="552.6" y="1075.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="555.6" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (8 samples, 0.60%)</title><rect x="553.5" y="1075.0" width="7.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="556.5" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.15%)</title><rect x="560.6" y="1091.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="563.6" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.asFuture (1 samples, 0.08%)</title><rect x="562.4" y="1155.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="565.4" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.15%)</title><rect x="563.3" y="1155.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="566.3" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.15%)</title><rect x="563.3" y="1139.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="566.3" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (172 samples, 12.90%)</title><rect x="565.0" y="1155.0" width="152.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="568.0" y="1166.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (157 samples, 11.78%)</title><rect x="570.3" y="1139.0" width="139.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="573.3" y="1150.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (36 samples, 2.70%)</title><rect x="588.9" y="1123.0" width="31.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="591.9" y="1134.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (16 samples, 1.20%)</title><rect x="596.0" y="1107.0" width="14.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="599.0" y="1118.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (13 samples, 0.98%)</title><rect x="598.7" y="1091.0" width="11.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="601.7" y="1102.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (9 samples, 0.68%)</title><rect x="598.7" y="1075.0" width="7.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="601.7" y="1086.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (9 samples, 0.68%)</title><rect x="598.7" y="1059.0" width="7.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="601.7" y="1070.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (9 samples, 0.68%)</title><rect x="598.7" y="1043.0" width="7.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="601.7" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="598.7" y="1027.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="601.7" y="1038.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.08%)</title><rect x="599.6" y="1027.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="602.6" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.08%)</title><rect x="600.4" y="1027.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="603.4" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (5 samples, 0.38%)</title><rect x="601.3" y="1027.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="604.3" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.08%)</title><rect x="601.3" y="1011.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="604.3" y="1022.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="601.3" y="995.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="604.3" y="1006.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.08%)</title><rect x="601.3" y="979.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="604.3" y="990.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.08%)</title><rect x="601.3" y="963.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="604.3" y="974.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.30%)</title><rect x="602.2" y="1011.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="605.2" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.23%)</title><rect x="602.2" y="995.0" width="2.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="605.2" y="1006.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="602.2" y="979.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="605.2" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="602.2" y="963.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="605.2" y="974.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.08%)</title><rect x="602.2" y="947.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="605.2" y="958.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.08%)</title><rect x="602.2" y="931.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="605.2" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.08%)</title><rect x="602.2" y="915.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="605.2" y="926.0"></text>
</g>
<g>
<title>Monitor::owned_by_self() const (1 samples, 0.08%)</title><rect x="602.2" y="899.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="605.2" y="910.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.08%)</title><rect x="603.1" y="979.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="606.1" y="990.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="604.0" y="979.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="607.0" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.08%)</title><rect x="604.0" y="963.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="607.0" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.08%)</title><rect x="604.9" y="995.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="607.9" y="1006.0"></text>
</g>
<g>
<title>_new_array_nozero_Java (1 samples, 0.08%)</title><rect x="605.8" y="1027.0" width="0.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="608.8" y="1038.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.30%)</title><rect x="606.6" y="1075.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="609.6" y="1086.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.08%)</title><rect x="610.2" y="1107.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="613.2" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.08%)</title><rect x="610.2" y="1091.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="613.2" y="1102.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.08%)</title><rect x="610.2" y="1075.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="613.2" y="1086.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.08%)</title><rect x="611.1" y="1107.0" width="0.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="614.1" y="1118.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (10 samples, 0.75%)</title><rect x="612.0" y="1107.0" width="8.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="615.0" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (15 samples, 1.13%)</title><rect x="620.8" y="1123.0" width="13.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="623.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (7 samples, 0.53%)</title><rect x="620.8" y="1107.0" width="6.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="623.8" y="1118.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (7 samples, 0.53%)</title><rect x="620.8" y="1091.0" width="6.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="623.8" y="1102.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.08%)</title><rect x="626.1" y="1075.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="629.1" y="1086.0"></text>
</g>
<g>
<title>java/lang/Long.toString (8 samples, 0.60%)</title><rect x="627.0" y="1107.0" width="7.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="630.0" y="1118.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="627.0" y="1091.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="630.0" y="1102.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="627.0" y="1075.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="630.0" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="627.0" y="1059.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="630.0" y="1070.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (7 samples, 0.53%)</title><rect x="627.9" y="1091.0" width="6.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="630.9" y="1102.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="634.1" y="1123.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="637.1" y="1134.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (84 samples, 6.30%)</title><rect x="635.0" y="1123.0" width="74.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="638.0" y="1134.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (80 samples, 6.00%)</title><rect x="638.5" y="1107.0" width="70.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="641.5" y="1118.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 0.38%)</title><rect x="638.5" y="1091.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="641.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.38%)</title><rect x="638.5" y="1075.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="641.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 0.38%)</title><rect x="638.5" y="1059.0" width="4.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="641.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.38%)</title><rect x="638.5" y="1043.0" width="4.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="641.5" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.23%)</title><rect x="642.9" y="1091.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="645.9" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.23%)</title><rect x="642.9" y="1075.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="645.9" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.23%)</title><rect x="642.9" y="1059.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="645.9" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.23%)</title><rect x="642.9" y="1043.0" width="2.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="645.9" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.23%)</title><rect x="642.9" y="1027.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="645.9" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (72 samples, 5.40%)</title><rect x="645.6" y="1091.0" width="63.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="648.6" y="1102.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.put (66 samples, 4.95%)</title><rect x="650.9" y="1075.0" width="58.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="653.9" y="1086.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.putVal (42 samples, 3.15%)</title><rect x="672.1" y="1059.0" width="37.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="675.1" y="1070.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (4 samples, 0.30%)</title><rect x="689.8" y="1043.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="692.8" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (13 samples, 0.98%)</title><rect x="693.4" y="1043.0" width="11.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="696.4" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="704.0" y="1027.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="707.0" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="704.0" y="1011.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="707.0" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="704.0" y="995.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="707.0" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="704.0" y="979.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="707.0" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="704.0" y="963.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="707.0" y="974.0"></text>
</g>
<g>
<title>vtable stub (5 samples, 0.38%)</title><rect x="704.9" y="1043.0" width="4.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="707.9" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (3 samples, 0.23%)</title><rect x="709.3" y="1139.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="712.3" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (3 samples, 0.23%)</title><rect x="709.3" y="1123.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="712.3" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.23%)</title><rect x="709.3" y="1107.0" width="2.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="712.3" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.23%)</title><rect x="709.3" y="1091.0" width="2.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="712.3" y="1102.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.45%)</title><rect x="712.0" y="1139.0" width="5.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="715.0" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (46 samples, 3.45%)</title><rect x="717.3" y="1155.0" width="40.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="720.3" y="1166.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (44 samples, 3.30%)</title><rect x="719.1" y="1139.0" width="38.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="722.1" y="1150.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$210/34722430.process (12 samples, 0.90%)</title><rect x="719.9" y="1123.0" width="10.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="722.9" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (12 samples, 0.90%)</title><rect x="719.9" y="1107.0" width="10.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="722.9" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (9 samples, 0.68%)</title><rect x="719.9" y="1091.0" width="8.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="722.9" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (2 samples, 0.15%)</title><rect x="725.3" y="1075.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="728.3" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="727.0" y="1075.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="730.0" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="727.0" y="1059.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="730.0" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="727.0" y="1043.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="730.0" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.23%)</title><rect x="727.9" y="1091.0" width="2.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="730.9" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.23%)</title><rect x="727.9" y="1075.0" width="2.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="730.9" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.23%)</title><rect x="727.9" y="1059.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="730.9" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.23%)</title><rect x="727.9" y="1043.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="730.9" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.23%)</title><rect x="727.9" y="1027.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="730.9" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (5 samples, 0.38%)</title><rect x="730.6" y="1123.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="733.6" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.15%)</title><rect x="733.2" y="1107.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="736.2" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (2 samples, 0.15%)</title><rect x="735.0" y="1123.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="738.0" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (2 samples, 0.15%)</title><rect x="735.0" y="1107.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="738.0" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (2 samples, 0.15%)</title><rect x="735.0" y="1091.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="738.0" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeValue (1 samples, 0.08%)</title><rect x="735.9" y="1075.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="738.9" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.23%)</title><rect x="736.8" y="1123.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="739.8" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.23%)</title><rect x="736.8" y="1107.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="739.8" y="1118.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="738.5" y="1091.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="741.5" y="1102.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="738.5" y="1075.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="741.5" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="738.5" y="1059.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="741.5" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="738.5" y="1043.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="741.5" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="738.5" y="1027.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="741.5" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (12 samples, 0.90%)</title><rect x="739.4" y="1123.0" width="10.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="742.4" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (12 samples, 0.90%)</title><rect x="739.4" y="1107.0" width="10.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="742.4" y="1118.0"></text>
</g>
<g>
<title>itable stub (6 samples, 0.45%)</title><rect x="739.4" y="1091.0" width="5.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="742.4" y="1102.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (6 samples, 0.45%)</title><rect x="744.7" y="1091.0" width="5.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="747.7" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (5 samples, 0.38%)</title><rect x="750.0" y="1123.0" width="4.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="753.0" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (4 samples, 0.30%)</title><rect x="750.9" y="1107.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="753.9" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 0.30%)</title><rect x="754.5" y="1123.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="757.5" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 0.30%)</title><rect x="754.5" y="1107.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="757.5" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 0.30%)</title><rect x="754.5" y="1091.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="757.5" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.23%)</title><rect x="754.5" y="1075.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="757.5" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.23%)</title><rect x="754.5" y="1059.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="757.5" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$292/1829651358.accept (2 samples, 0.15%)</title><rect x="754.5" y="1043.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="757.5" y="1054.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="756.2" y="1043.0" width="0.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="759.2" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.08%)</title><rect x="757.1" y="1075.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="760.1" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (6 samples, 0.45%)</title><rect x="758.0" y="1155.0" width="5.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="761.0" y="1166.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.08%)</title><rect x="758.0" y="1139.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="761.0" y="1150.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="758.0" y="1123.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="761.0" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.elapsedNanos (1 samples, 0.08%)</title><rect x="758.9" y="1139.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="761.9" y="1150.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (4 samples, 0.30%)</title><rect x="759.8" y="1139.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="762.8" y="1150.0"></text>
</g>
<g>
<title>java/time/Duration.create (4 samples, 0.30%)</title><rect x="759.8" y="1123.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="762.8" y="1134.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.23%)</title><rect x="759.8" y="1107.0" width="2.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="762.8" y="1118.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="761.6" y="1091.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="764.6" y="1102.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="762.4" y="1107.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="765.4" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (6 samples, 0.45%)</title><rect x="763.3" y="1155.0" width="5.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="766.3" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.&lt;init&gt; (6 samples, 0.45%)</title><rect x="763.3" y="1139.0" width="5.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="766.3" y="1150.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.38%)</title><rect x="763.3" y="1123.0" width="4.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="766.3" y="1134.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.38%)</title><rect x="763.3" y="1107.0" width="4.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="766.3" y="1118.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="767.7" y="1123.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="770.7" y="1134.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/Counter.increment (2 samples, 0.15%)</title><rect x="768.6" y="1155.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="771.6" y="1166.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (3 samples, 0.23%)</title><rect x="770.4" y="1155.0" width="2.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="773.4" y="1166.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (3 samples, 0.23%)</title><rect x="770.4" y="1139.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="773.4" y="1150.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/461796820.linkToTargetMethod (1 samples, 0.08%)</title><rect x="773.1" y="1155.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="776.1" y="1166.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/263025902.invokeStatic_L3_L (1 samples, 0.08%)</title><rect x="773.1" y="1139.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="776.1" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$293/565969805.get$Lambda (1 samples, 0.08%)</title><rect x="773.1" y="1123.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="776.1" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (2 samples, 0.15%)</title><rect x="773.9" y="1155.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="776.9" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.23%)</title><rect x="775.7" y="1155.0" width="2.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="778.7" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.08%)</title><rect x="778.4" y="1155.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="781.4" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.08%)</title><rect x="779.3" y="1155.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="782.3" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (22 samples, 1.65%)</title><rect x="780.1" y="1155.0" width="19.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="783.1" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (21 samples, 1.58%)</title><rect x="781.0" y="1139.0" width="18.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="784.0" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (19 samples, 1.43%)</title><rect x="782.8" y="1123.0" width="16.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="785.8" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (7 samples, 0.53%)</title><rect x="782.8" y="1107.0" width="6.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="785.8" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 0.53%)</title><rect x="782.8" y="1091.0" width="6.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="785.8" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$293/565969805.accept (3 samples, 0.23%)</title><rect x="783.7" y="1075.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="786.7" y="1086.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="786.3" y="1075.0" width="0.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="789.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (2 samples, 0.15%)</title><rect x="787.2" y="1075.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="790.2" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (12 samples, 0.90%)</title><rect x="789.0" y="1107.0" width="10.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="792.0" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$293/565969805.accept (11 samples, 0.83%)</title><rect x="789.9" y="1091.0" width="9.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="792.9" y="1102.0"></text>
</g>
<g>
<title>_new_instance_Java (1 samples, 0.08%)</title><rect x="789.9" y="1075.0" width="0.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="792.9" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$57 (10 samples, 0.75%)</title><rect x="790.8" y="1075.0" width="8.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="793.8" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (10 samples, 0.75%)</title><rect x="790.8" y="1059.0" width="8.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="793.8" y="1070.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (10 samples, 0.75%)</title><rect x="790.8" y="1043.0" width="8.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="793.8" y="1054.0"></text>
</g>
<g>
<title>java/time/Duration.create (10 samples, 0.75%)</title><rect x="790.8" y="1027.0" width="8.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="793.8" y="1038.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.45%)</title><rect x="794.3" y="1011.0" width="5.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="797.3" y="1022.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.30%)</title><rect x="796.1" y="995.0" width="3.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="799.1" y="1006.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (4 samples, 0.30%)</title><rect x="799.6" y="1155.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="802.6" y="1166.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.53%)</title><rect x="803.2" y="1155.0" width="6.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="806.2" y="1166.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.53%)</title><rect x="803.2" y="1139.0" width="6.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="806.2" y="1150.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.60%)</title><rect x="809.4" y="1171.0" width="7.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="812.4" y="1182.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.60%)</title><rect x="809.4" y="1155.0" width="7.0" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="812.4" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (1 samples, 0.08%)</title><rect x="816.4" y="1187.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="819.4" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (20 samples, 1.50%)</title><rect x="817.3" y="1235.0" width="17.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="820.3" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (20 samples, 1.50%)</title><rect x="817.3" y="1219.0" width="17.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="820.3" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (20 samples, 1.50%)</title><rect x="817.3" y="1203.0" width="17.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="820.3" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (20 samples, 1.50%)</title><rect x="817.3" y="1187.0" width="17.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="820.3" y="1198.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.38%)</title><rect x="827.1" y="1171.0" width="4.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="830.1" y="1182.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.38%)</title><rect x="827.1" y="1155.0" width="4.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="830.1" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (4 samples, 0.30%)</title><rect x="831.5" y="1171.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="834.5" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (215 samples, 16.13%)</title><rect x="835.0" y="1235.0" width="190.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="838.0" y="1246.0">java/util/concurrent/Thre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (214 samples, 16.05%)</title><rect x="835.9" y="1219.0" width="189.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="838.9" y="1230.0">java/util/concurrent/Link..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.dequeue (6 samples, 0.45%)</title><rect x="844.8" y="1203.0" width="5.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="847.8" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (189 samples, 14.18%)</title><rect x="850.1" y="1203.0" width="167.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="853.1" y="1214.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (31 samples, 2.33%)</title><rect x="858.0" y="1187.0" width="27.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="861.0" y="1198.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (3 samples, 0.23%)</title><rect x="885.5" y="1187.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="888.5" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.23%)</title><rect x="885.5" y="1171.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="888.5" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.23%)</title><rect x="885.5" y="1155.0" width="2.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="888.5" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.23%)</title><rect x="885.5" y="1139.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="888.5" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (145 samples, 10.88%)</title><rect x="888.1" y="1187.0" width="128.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="891.1" y="1198.0">java/util/concur..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (145 samples, 10.88%)</title><rect x="888.1" y="1171.0" width="128.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="891.1" y="1182.0">sun/misc/Unsafe...</text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.08%)</title><rect x="900.5" y="1155.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="903.5" y="1166.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.08%)</title><rect x="901.4" y="1155.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="904.4" y="1166.0"></text>
</g>
<g>
<title>Unsafe_Park (121 samples, 9.08%)</title><rect x="902.3" y="1155.0" width="107.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="905.3" y="1166.0">Unsafe_Park</text>
</g>
<g>
<title>Parker::park(bool, long) (20 samples, 1.50%)</title><rect x="902.3" y="1139.0" width="17.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="905.3" y="1150.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (4 samples, 0.30%)</title><rect x="910.3" y="1123.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="913.3" y="1134.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.08%)</title><rect x="911.2" y="1107.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="914.2" y="1118.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.08%)</title><rect x="911.2" y="1091.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="914.2" y="1102.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.15%)</title><rect x="912.0" y="1107.0" width="1.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="915.0" y="1118.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.08%)</title><rect x="913.8" y="1123.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="916.8" y="1134.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (6 samples, 0.45%)</title><rect x="914.7" y="1123.0" width="5.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="917.7" y="1134.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="920.0" y="1139.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="923.0" y="1150.0"></text>
</g>
<g>
<title>__lll_lock_wait (7 samples, 0.53%)</title><rect x="920.9" y="1139.0" width="6.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="923.9" y="1150.0"></text>
</g>
<g>
<title>__lll_unlock_wake (34 samples, 2.55%)</title><rect x="927.1" y="1139.0" width="30.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="930.1" y="1150.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (45 samples, 3.38%)</title><rect x="957.2" y="1139.0" width="39.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="960.2" y="1150.0">__p..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.15%)</title><rect x="997.0" y="1139.0" width="1.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1000.0" y="1150.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.08%)</title><rect x="998.8" y="1139.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1001.8" y="1150.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.23%)</title><rect x="999.7" y="1139.0" width="2.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1002.7" y="1150.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.08%)</title><rect x="1002.3" y="1139.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1005.3" y="1150.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.23%)</title><rect x="1003.2" y="1139.0" width="2.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1006.2" y="1150.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (3 samples, 0.23%)</title><rect x="1005.9" y="1139.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1008.9" y="1150.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="1008.5" y="1139.0" width="0.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1011.5" y="1150.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (5 samples, 0.38%)</title><rect x="1009.4" y="1155.0" width="4.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1012.4" y="1166.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.08%)</title><rect x="1013.8" y="1155.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1016.8" y="1166.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.15%)</title><rect x="1014.7" y="1155.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1017.7" y="1166.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.08%)</title><rect x="1016.5" y="1187.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1019.5" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (9 samples, 0.68%)</title><rect x="1017.4" y="1203.0" width="7.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1020.4" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (9 samples, 0.68%)</title><rect x="1017.4" y="1187.0" width="7.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1020.4" y="1198.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (8 samples, 0.60%)</title><rect x="1017.4" y="1171.0" width="7.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1020.4" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.08%)</title><rect x="1024.5" y="1171.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1027.5" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.08%)</title><rect x="1024.5" y="1155.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1027.5" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.08%)</title><rect x="1024.5" y="1139.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1027.5" y="1150.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.08%)</title><rect x="1025.3" y="1283.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1028.3" y="1294.0"></text>
</g>
<g>
<title>start_thread (185 samples, 13.88%)</title><rect x="1026.2" y="1283.0" width="163.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1029.2" y="1294.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (185 samples, 13.88%)</title><rect x="1026.2" y="1267.0" width="163.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1029.2" y="1278.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (23 samples, 1.73%)</title><rect x="1026.2" y="1251.0" width="20.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1029.2" y="1262.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (11 samples, 0.83%)</title><rect x="1026.2" y="1235.0" width="9.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1029.2" y="1246.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (11 samples, 0.83%)</title><rect x="1026.2" y="1219.0" width="9.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1029.2" y="1230.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (6 samples, 0.45%)</title><rect x="1026.2" y="1203.0" width="5.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1029.2" y="1214.0"></text>
</g>
<g>
<title>SpinPause (5 samples, 0.38%)</title><rect x="1031.5" y="1203.0" width="4.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1034.5" y="1214.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (12 samples, 0.90%)</title><rect x="1036.0" y="1235.0" width="10.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1039.0" y="1246.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.08%)</title><rect x="1036.0" y="1219.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1039.0" y="1230.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.08%)</title><rect x="1036.0" y="1203.0" width="0.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1039.0" y="1214.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (4 samples, 0.30%)</title><rect x="1036.9" y="1219.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1039.9" y="1230.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.08%)</title><rect x="1036.9" y="1203.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1039.9" y="1214.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.08%)</title><rect x="1036.9" y="1187.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1039.9" y="1198.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.08%)</title><rect x="1036.9" y="1171.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1039.9" y="1182.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.23%)</title><rect x="1037.7" y="1203.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1040.7" y="1214.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (3 samples, 0.23%)</title><rect x="1037.7" y="1187.0" width="2.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1040.7" y="1198.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (7 samples, 0.53%)</title><rect x="1040.4" y="1219.0" width="6.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1043.4" y="1230.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (7 samples, 0.53%)</title><rect x="1040.4" y="1203.0" width="6.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1043.4" y="1214.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (6 samples, 0.45%)</title><rect x="1040.4" y="1187.0" width="5.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1043.4" y="1198.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (6 samples, 0.45%)</title><rect x="1040.4" y="1171.0" width="5.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1043.4" y="1182.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (6 samples, 0.45%)</title><rect x="1040.4" y="1155.0" width="5.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1043.4" y="1166.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (5 samples, 0.38%)</title><rect x="1041.3" y="1139.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1044.3" y="1150.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (3 samples, 0.23%)</title><rect x="1043.1" y="1123.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1046.1" y="1134.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (2 samples, 0.15%)</title><rect x="1043.1" y="1107.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1046.1" y="1118.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.08%)</title><rect x="1044.8" y="1107.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1047.8" y="1118.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.08%)</title><rect x="1045.7" y="1187.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1048.7" y="1198.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.08%)</title><rect x="1045.7" y="1171.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1048.7" y="1182.0"></text>
</g>
<g>
<title>JavaThread::run() (160 samples, 12.00%)</title><rect x="1046.6" y="1251.0" width="141.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1049.6" y="1262.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (160 samples, 12.00%)</title><rect x="1046.6" y="1235.0" width="141.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1049.6" y="1246.0">JavaThread::thread..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (159 samples, 11.93%)</title><rect x="1046.6" y="1219.0" width="140.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1049.6" y="1230.0">CompileBroker::com..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (158 samples, 11.85%)</title><rect x="1046.6" y="1203.0" width="139.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1049.6" y="1214.0">CompileBroker::in..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (157 samples, 11.78%)</title><rect x="1046.6" y="1187.0" width="139.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1049.6" y="1198.0">C2Compiler::compi..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (157 samples, 11.78%)</title><rect x="1046.6" y="1171.0" width="139.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1049.6" y="1182.0">Compile::Compile(..</text>
</g>
<g>
<title>Compile::Code_Gen() (92 samples, 6.90%)</title><rect x="1046.6" y="1155.0" width="81.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1049.6" y="1166.0">Compile::..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.15%)</title><rect x="1046.6" y="1139.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1049.6" y="1150.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.08%)</title><rect x="1046.6" y="1123.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1049.6" y="1134.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.08%)</title><rect x="1047.5" y="1123.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1050.5" y="1134.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.08%)</title><rect x="1047.5" y="1107.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1050.5" y="1118.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (4 samples, 0.30%)</title><rect x="1048.4" y="1139.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1051.4" y="1150.0"></text>
</g>
<g>
<title>Block::compute_first_inst_size(unsigned int&amp;, unsigned int, PhaseRegAlloc*) (1 samples, 0.08%)</title><rect x="1048.4" y="1123.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1051.4" y="1134.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.08%)</title><rect x="1048.4" y="1107.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1051.4" y="1118.0"></text>
</g>
<g>
<title>compU_rRegNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.08%)</title><rect x="1048.4" y="1091.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1051.4" y="1102.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (3 samples, 0.23%)</title><rect x="1049.2" y="1123.0" width="2.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1052.2" y="1134.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.15%)</title><rect x="1050.1" y="1107.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1053.1" y="1118.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 0.45%)</title><rect x="1051.9" y="1139.0" width="5.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1054.9" y="1150.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.08%)</title><rect x="1051.9" y="1123.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1054.9" y="1134.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.08%)</title><rect x="1051.9" y="1107.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1054.9" y="1118.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 0.30%)</title><rect x="1052.8" y="1123.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1055.8" y="1134.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.08%)</title><rect x="1052.8" y="1107.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1055.8" y="1118.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.08%)</title><rect x="1053.7" y="1107.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1056.7" y="1118.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.08%)</title><rect x="1053.7" y="1091.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1056.7" y="1102.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.08%)</title><rect x="1053.7" y="1075.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1056.7" y="1086.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.08%)</title><rect x="1054.6" y="1107.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1057.6" y="1118.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.08%)</title><rect x="1054.6" y="1091.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1057.6" y="1102.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int, Compile*) (1 samples, 0.08%)</title><rect x="1054.6" y="1075.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1057.6" y="1086.0"></text>
</g>
<g>
<title>MemBarNode::match(ProjNode const*, Matcher const*) (1 samples, 0.08%)</title><rect x="1055.4" y="1107.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1058.4" y="1118.0"></text>
</g>
<g>
<title>Node::Node(Node*) (1 samples, 0.08%)</title><rect x="1055.4" y="1091.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1058.4" y="1102.0"></text>
</g>
<g>
<title>StoreNNode::Opcode() const (1 samples, 0.08%)</title><rect x="1056.3" y="1123.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1059.3" y="1134.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.08%)</title><rect x="1057.2" y="1139.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1060.2" y="1150.0"></text>
</g>
<g>
<title>PhaseBlockLayout::reorder_traces(int) (1 samples, 0.08%)</title><rect x="1057.2" y="1123.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1060.2" y="1134.0"></text>
</g>
<g>
<title>Trace::fixup_blocks(PhaseCFG&amp;) (1 samples, 0.08%)</title><rect x="1057.2" y="1107.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1060.2" y="1118.0"></text>
</g>
<g>
<title>Block::num_fall_throughs() (1 samples, 0.08%)</title><rect x="1057.2" y="1091.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1060.2" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (2 samples, 0.15%)</title><rect x="1058.1" y="1139.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1061.1" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (2 samples, 0.15%)</title><rect x="1058.1" y="1123.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1061.1" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.15%)</title><rect x="1059.9" y="1139.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1062.9" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.15%)</title><rect x="1059.9" y="1123.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1062.9" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1059.9" y="1107.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1062.9" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.08%)</title><rect x="1059.9" y="1091.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1062.9" y="1102.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="1059.9" y="1075.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1062.9" y="1086.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.08%)</title><rect x="1059.9" y="1059.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1062.9" y="1070.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1059.9" y="1043.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1062.9" y="1054.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1059.9" y="1027.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1062.9" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.08%)</title><rect x="1060.8" y="1107.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1063.8" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (2 samples, 0.15%)</title><rect x="1061.6" y="1139.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1064.6" y="1150.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.08%)</title><rect x="1062.5" y="1123.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1065.5" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (73 samples, 5.48%)</title><rect x="1063.4" y="1139.0" width="64.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1066.4" y="1150.0">PhaseCh..</text>
</g>
<g>
<title>BoxLockNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1063.4" y="1123.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1066.4" y="1134.0"></text>
</g>
<g>
<title>JVMState::debug_end() const (1 samples, 0.08%)</title><rect x="1064.3" y="1123.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1067.3" y="1134.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.08%)</title><rect x="1065.2" y="1123.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1068.2" y="1134.0"></text>
</g>
<g>
<title>MachNode::two_adr() const (1 samples, 0.08%)</title><rect x="1066.1" y="1123.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1069.1" y="1134.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.08%)</title><rect x="1067.0" y="1123.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1070.0" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.23%)</title><rect x="1067.8" y="1123.0" width="2.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1070.8" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1067.8" y="1107.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1070.8" y="1118.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.15%)</title><rect x="1068.7" y="1107.0" width="1.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1071.7" y="1118.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.08%)</title><rect x="1069.6" y="1091.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1072.6" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (4 samples, 0.30%)</title><rect x="1070.5" y="1123.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1073.5" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.08%)</title><rect x="1070.5" y="1107.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1073.5" y="1118.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1071.4" y="1107.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1074.4" y="1118.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.15%)</title><rect x="1072.3" y="1107.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1075.3" y="1118.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1073.2" y="1091.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1076.2" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (11 samples, 0.83%)</title><rect x="1074.0" y="1123.0" width="9.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1077.0" y="1134.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.08%)</title><rect x="1079.3" y="1107.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1082.3" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::split_DEF(Node*, Block*, int, unsigned int, Node**, Node**, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.08%)</title><rect x="1080.2" y="1107.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1083.2" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (1 samples, 0.08%)</title><rect x="1081.1" y="1107.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1084.1" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::clone_projs(Block*, unsigned int, Node*, Node*, unsigned int&amp;) (1 samples, 0.08%)</title><rect x="1081.1" y="1091.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1084.1" y="1102.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1082.0" y="1107.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1085.0" y="1118.0"></text>
</g>
<g>
<title>loadNNode::rule() const (1 samples, 0.08%)</title><rect x="1082.9" y="1107.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1085.9" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (16 samples, 1.20%)</title><rect x="1083.8" y="1123.0" width="14.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1086.8" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1087.3" y="1107.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1090.3" y="1118.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.08%)</title><rect x="1088.2" y="1107.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1091.2" y="1118.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.08%)</title><rect x="1089.1" y="1107.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1092.1" y="1118.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.08%)</title><rect x="1089.1" y="1091.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1092.1" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (7 samples, 0.53%)</title><rect x="1090.0" y="1107.0" width="6.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1093.0" y="1118.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1095.3" y="1091.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1098.3" y="1102.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (2 samples, 0.15%)</title><rect x="1096.2" y="1107.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1099.2" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.08%)</title><rect x="1097.9" y="1123.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1100.9" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.08%)</title><rect x="1097.9" y="1107.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1100.9" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.08%)</title><rect x="1098.8" y="1123.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1101.8" y="1134.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.08%)</title><rect x="1098.8" y="1107.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1101.8" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (6 samples, 0.45%)</title><rect x="1099.7" y="1123.0" width="5.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1102.7" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 0.23%)</title><rect x="1102.4" y="1107.0" width="2.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1105.4" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (3 samples, 0.23%)</title><rect x="1105.0" y="1123.0" width="2.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1108.0" y="1134.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.08%)</title><rect x="1105.9" y="1107.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1108.9" y="1118.0"></text>
</g>
<g>
<title>loadConINode::bottom_type() const (1 samples, 0.08%)</title><rect x="1106.8" y="1107.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1109.8" y="1118.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1106.8" y="1091.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1109.8" y="1102.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.08%)</title><rect x="1106.8" y="1075.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1109.8" y="1086.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (4 samples, 0.30%)</title><rect x="1107.7" y="1123.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1110.7" y="1134.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (4 samples, 0.30%)</title><rect x="1107.7" y="1107.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1110.7" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.08%)</title><rect x="1108.6" y="1091.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1111.6" y="1102.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 0.15%)</title><rect x="1109.4" y="1091.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1112.4" y="1102.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.08%)</title><rect x="1109.4" y="1075.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1112.4" y="1086.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.08%)</title><rect x="1109.4" y="1059.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1112.4" y="1070.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.08%)</title><rect x="1110.3" y="1075.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1113.3" y="1086.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (3 samples, 0.23%)</title><rect x="1111.2" y="1123.0" width="2.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1114.2" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.23%)</title><rect x="1111.2" y="1107.0" width="2.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1114.2" y="1118.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.15%)</title><rect x="1113.9" y="1123.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1116.9" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.08%)</title><rect x="1114.8" y="1107.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1117.8" y="1118.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.08%)</title><rect x="1115.6" y="1123.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1118.6" y="1134.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.08%)</title><rect x="1115.6" y="1107.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1118.6" y="1118.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (9 samples, 0.68%)</title><rect x="1116.5" y="1123.0" width="8.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1119.5" y="1134.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (5 samples, 0.38%)</title><rect x="1120.1" y="1107.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1123.1" y="1118.0"></text>
</g>
<g>
<title>IndexSet::populate_free_list() (1 samples, 0.08%)</title><rect x="1122.7" y="1091.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1125.7" y="1102.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1123.6" y="1091.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1126.6" y="1102.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.08%)</title><rect x="1124.5" y="1123.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1127.5" y="1134.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1125.4" y="1123.0" width="0.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1128.4" y="1134.0"></text>
</g>
<g>
<title>jmpDirNode::oper_input_base() const (1 samples, 0.08%)</title><rect x="1126.3" y="1123.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.3" y="1134.0"></text>
</g>
<g>
<title>tlsLoadPNode::ideal_Opcode() const (1 samples, 0.08%)</title><rect x="1127.1" y="1123.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1130.1" y="1134.0"></text>
</g>
<g>
<title>Compile::Optimize() (52 samples, 3.90%)</title><rect x="1128.0" y="1155.0" width="46.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1131.0" y="1166.0">Comp..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.15%)</title><rect x="1128.0" y="1139.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1131.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.15%)</title><rect x="1128.0" y="1123.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1131.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::add_final_edges(Node*) (1 samples, 0.08%)</title><rect x="1128.9" y="1107.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1131.9" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.08%)</title><rect x="1128.9" y="1091.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1131.9" y="1102.0"></text>
</g>
<g>
<title>IfNode::Opcode() const (1 samples, 0.08%)</title><rect x="1129.8" y="1139.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1132.8" y="1150.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.15%)</title><rect x="1130.7" y="1139.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1133.7" y="1150.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1130.7" y="1123.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1133.7" y="1134.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1130.7" y="1107.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1133.7" y="1118.0"></text>
</g>
<g>
<title>TypeLong::filter_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1131.6" y="1123.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1134.6" y="1134.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1131.6" y="1107.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1134.6" y="1118.0"></text>
</g>
<g>
<title>TypeLong::xmeet(Type const*) const (1 samples, 0.08%)</title><rect x="1131.6" y="1091.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1134.6" y="1102.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1131.6" y="1075.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1134.6" y="1086.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1131.6" y="1059.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1134.6" y="1070.0"></text>
</g>
<g>
<title>TypeLong::eq(Type const*) const (1 samples, 0.08%)</title><rect x="1131.6" y="1043.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1134.6" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (35 samples, 2.63%)</title><rect x="1132.5" y="1139.0" width="30.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1135.5" y="1150.0">Ph..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1132.5" y="1123.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1135.5" y="1134.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1132.5" y="1107.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1135.5" y="1118.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1132.5" y="1091.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1135.5" y="1102.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1132.5" y="1075.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1135.5" y="1086.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1132.5" y="1059.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1135.5" y="1070.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1132.5" y="1043.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1135.5" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.08%)</title><rect x="1132.5" y="1027.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1135.5" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.08%)</title><rect x="1132.5" y="1011.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1135.5" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_idom(Node*, Node*, unsigned int) (1 samples, 0.08%)</title><rect x="1132.5" y="995.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1135.5" y="1006.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.08%)</title><rect x="1132.5" y="979.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1135.5" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.23%)</title><rect x="1133.3" y="1123.0" width="2.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1136.3" y="1134.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.08%)</title><rect x="1135.1" y="1107.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1138.1" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 0.38%)</title><rect x="1136.0" y="1123.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1139.0" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (3 samples, 0.23%)</title><rect x="1137.8" y="1107.0" width="2.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1140.8" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.08%)</title><rect x="1139.5" y="1091.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1142.5" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (18 samples, 1.35%)</title><rect x="1140.4" y="1123.0" width="16.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1143.4" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (14 samples, 1.05%)</title><rect x="1144.0" y="1107.0" width="12.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1147.0" y="1118.0"></text>
</g>
<g>
<title>Node::unique_ctrl_out() (1 samples, 0.08%)</title><rect x="1144.0" y="1091.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1147.0" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.08%)</title><rect x="1144.9" y="1091.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1147.9" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (12 samples, 0.90%)</title><rect x="1145.7" y="1091.0" width="10.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1148.7" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.08%)</title><rect x="1153.7" y="1075.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.7" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1153.7" y="1059.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.7" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.15%)</title><rect x="1154.6" y="1075.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.6" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.08%)</title><rect x="1156.4" y="1123.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.4" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::eliminate_useless_predicates() (1 samples, 0.08%)</title><rect x="1157.2" y="1123.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.2" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (4 samples, 0.30%)</title><rect x="1158.1" y="1123.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1161.1" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.08%)</title><rect x="1159.0" y="1107.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1162.0" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1159.0" y="1091.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.0" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.08%)</title><rect x="1159.0" y="1075.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.0" y="1086.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.08%)</title><rect x="1159.0" y="1059.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.0" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.15%)</title><rect x="1159.9" y="1107.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.9" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.08%)</title><rect x="1159.9" y="1091.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.9" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.08%)</title><rect x="1160.8" y="1091.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.8" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.08%)</title><rect x="1160.8" y="1075.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.8" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.15%)</title><rect x="1161.7" y="1123.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.7" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.15%)</title><rect x="1161.7" y="1107.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.7" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1161.7" y="1091.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.7" y="1102.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.08%)</title><rect x="1161.7" y="1075.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.7" y="1086.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_interface() (1 samples, 0.08%)</title><rect x="1162.6" y="1091.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.6" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (8 samples, 0.60%)</title><rect x="1163.4" y="1139.0" width="7.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.4" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (8 samples, 0.60%)</title><rect x="1163.4" y="1123.0" width="7.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.4" y="1134.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.15%)</title><rect x="1163.4" y="1107.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.4" y="1118.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (1 samples, 0.08%)</title><rect x="1163.4" y="1091.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.4" y="1102.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1163.4" y="1075.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.4" y="1086.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1163.4" y="1059.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.4" y="1070.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1164.3" y="1091.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.3" y="1102.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1164.3" y="1075.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.3" y="1086.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1164.3" y="1059.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.3" y="1070.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="1164.3" y="1043.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1167.3" y="1054.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1165.2" y="1107.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.2" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.15%)</title><rect x="1166.1" y="1107.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.1" y="1118.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.08%)</title><rect x="1167.0" y="1091.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.0" y="1102.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (3 samples, 0.23%)</title><rect x="1167.9" y="1107.0" width="2.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.9" y="1118.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (3 samples, 0.23%)</title><rect x="1167.9" y="1091.0" width="2.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.9" y="1102.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (3 samples, 0.23%)</title><rect x="1170.5" y="1139.0" width="2.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.5" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.23%)</title><rect x="1170.5" y="1123.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.5" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.23%)</title><rect x="1170.5" y="1107.0" width="2.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.5" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.08%)</title><rect x="1170.5" y="1091.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.5" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1171.4" y="1091.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.4" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.08%)</title><rect x="1171.4" y="1075.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.4" y="1086.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.08%)</title><rect x="1171.4" y="1059.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.4" y="1070.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.08%)</title><rect x="1172.3" y="1091.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.3" y="1102.0"></text>
</g>
<g>
<title>ConNode::make(Compile*, Type const*) (1 samples, 0.08%)</title><rect x="1172.3" y="1075.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.3" y="1086.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1173.2" y="1139.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1176.2" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (12 samples, 0.90%)</title><rect x="1174.1" y="1155.0" width="10.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.1" y="1166.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (12 samples, 0.90%)</title><rect x="1174.1" y="1139.0" width="10.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.1" y="1150.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (12 samples, 0.90%)</title><rect x="1174.1" y="1123.0" width="10.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.1" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 0.83%)</title><rect x="1174.1" y="1107.0" width="9.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.1" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (11 samples, 0.83%)</title><rect x="1174.1" y="1091.0" width="9.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.1" y="1102.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.75%)</title><rect x="1174.1" y="1075.0" width="8.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.1" y="1086.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.08%)</title><rect x="1174.1" y="1059.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.1" y="1070.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.08%)</title><rect x="1174.1" y="1043.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.1" y="1054.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1174.1" y="1027.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.1" y="1038.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1174.1" y="1011.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.1" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.60%)</title><rect x="1175.0" y="1059.0" width="7.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.0" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.60%)</title><rect x="1175.0" y="1043.0" width="7.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.0" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.60%)</title><rect x="1175.0" y="1027.0" width="7.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.0" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.60%)</title><rect x="1175.0" y="1011.0" width="7.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.0" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.60%)</title><rect x="1175.0" y="995.0" width="7.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.0" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.60%)</title><rect x="1175.0" y="979.0" width="7.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.0" y="990.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1175.0" y="963.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.0" y="974.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1175.0" y="947.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.0" y="958.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1175.0" y="931.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.0" y="942.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1175.0" y="915.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.0" y="926.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1175.0" y="899.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.0" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1175.0" y="883.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.0" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1175.0" y="867.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.0" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1175.0" y="851.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.0" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.08%)</title><rect x="1175.0" y="835.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.0" y="846.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1175.0" y="819.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.0" y="830.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1175.0" y="803.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.0" y="814.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1175.0" y="787.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.0" y="798.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.08%)</title><rect x="1175.0" y="771.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.0" y="782.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.08%)</title><rect x="1175.0" y="755.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.0" y="766.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.08%)</title><rect x="1175.0" y="739.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.0" y="750.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="1175.0" y="723.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.0" y="734.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="1175.0" y="707.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.0" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.08%)</title><rect x="1175.0" y="691.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.0" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.08%)</title><rect x="1175.0" y="675.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.0" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.53%)</title><rect x="1175.8" y="963.0" width="6.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.8" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.53%)</title><rect x="1175.8" y="947.0" width="6.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.8" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.53%)</title><rect x="1175.8" y="931.0" width="6.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.8" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.53%)</title><rect x="1175.8" y="915.0" width="6.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.8" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.53%)</title><rect x="1175.8" y="899.0" width="6.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.8" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.53%)</title><rect x="1175.8" y="883.0" width="6.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.8" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.45%)</title><rect x="1175.8" y="867.0" width="5.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.8" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.45%)</title><rect x="1175.8" y="851.0" width="5.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.8" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.45%)</title><rect x="1175.8" y="835.0" width="5.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.45%)</title><rect x="1175.8" y="819.0" width="5.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.8" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.45%)</title><rect x="1175.8" y="803.0" width="5.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.8" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.38%)</title><rect x="1175.8" y="787.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.8" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.38%)</title><rect x="1175.8" y="771.0" width="4.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.8" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.38%)</title><rect x="1175.8" y="755.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.38%)</title><rect x="1175.8" y="739.0" width="4.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.38%)</title><rect x="1175.8" y="723.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.08%)</title><rect x="1175.8" y="707.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.8" y="718.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.08%)</title><rect x="1175.8" y="691.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.8" y="702.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.08%)</title><rect x="1175.8" y="675.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.8" y="686.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.08%)</title><rect x="1175.8" y="659.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.8" y="670.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.08%)</title><rect x="1175.8" y="643.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.8" y="654.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.08%)</title><rect x="1175.8" y="627.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.30%)</title><rect x="1176.7" y="707.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.30%)</title><rect x="1176.7" y="691.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.7" y="702.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1176.7" y="675.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.7" y="686.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1176.7" y="659.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.7" y="670.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1176.7" y="643.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.7" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1176.7" y="627.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.7" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1176.7" y="611.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.7" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1176.7" y="595.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.7" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1176.7" y="579.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.7" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1176.7" y="563.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.7" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1176.7" y="547.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.7" y="558.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.08%)</title><rect x="1176.7" y="531.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.7" y="542.0"></text>
</g>
<g>
<title>ciField::will_link(ciInstanceKlass*, Bytecodes::Code) (1 samples, 0.08%)</title><rect x="1176.7" y="515.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.7" y="526.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, Bytecodes::Code, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="1176.7" y="499.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.7" y="510.0"></text>
</g>
<g>
<title>LinkResolver::check_field_accessability(KlassHandle, KlassHandle, KlassHandle, fieldDescriptor&amp;, Thread*) (1 samples, 0.08%)</title><rect x="1176.7" y="483.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.7" y="494.0"></text>
</g>
<g>
<title>Reflection::verify_field_access(Klass*, Klass*, Klass*, AccessFlags, bool, bool) (1 samples, 0.08%)</title><rect x="1176.7" y="467.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.7" y="478.0"></text>
</g>
<g>
<title>InstanceKlass::is_same_class_package(oopDesc*, Symbol*, oopDesc*, Symbol*) (1 samples, 0.08%)</title><rect x="1176.7" y="451.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.7" y="462.0"></text>
</g>
<g>
<title>ResourceMark::~ResourceMark() (1 samples, 0.08%)</title><rect x="1176.7" y="435.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.7" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.23%)</title><rect x="1177.6" y="675.0" width="2.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.6" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.23%)</title><rect x="1177.6" y="659.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.6" y="670.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.08%)</title><rect x="1177.6" y="643.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.6" y="654.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.08%)</title><rect x="1177.6" y="627.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.6" y="638.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.08%)</title><rect x="1177.6" y="611.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.6" y="622.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.08%)</title><rect x="1177.6" y="595.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1178.5" y="643.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.5" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1178.5" y="627.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.5" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1178.5" y="611.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1178.5" y="595.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.5" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1178.5" y="579.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.5" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1178.5" y="563.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1178.5" y="547.0" width="1.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1178.5" y="531.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1178.5" y="515.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1178.5" y="499.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.5" y="510.0"></text>
</g>
<g>
<title>GraphKit::record_profiled_receiver_for_speculation(Node*) (1 samples, 0.08%)</title><rect x="1178.5" y="483.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.5" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.4" y="483.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.4" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1179.4" y="467.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1179.4" y="451.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1179.4" y="435.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1179.4" y="419.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1179.4" y="403.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.4" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.4" y="387.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.4" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1179.4" y="371.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1179.4" y="355.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1179.4" y="339.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.4" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1179.4" y="323.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.4" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1179.4" y="307.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.4" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.4" y="291.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.4" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1179.4" y="275.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.4" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1179.4" y="259.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.4" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1179.4" y="243.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.4" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1179.4" y="227.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.4" y="238.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1179.4" y="211.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.4" y="222.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1179.4" y="195.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.4" y="206.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.08%)</title><rect x="1179.4" y="179.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.4" y="190.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.08%)</title><rect x="1179.4" y="163.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.4" y="174.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1179.4" y="147.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.4" y="158.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1179.4" y="131.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.4" y="142.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1179.4" y="115.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.4" y="126.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1179.4" y="99.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.4" y="110.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1179.4" y="83.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.4" y="94.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1179.4" y="67.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.4" y="78.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1179.4" y="51.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.4" y="62.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1179.4" y="35.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.4" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1180.3" y="787.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.3" y="798.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1180.3" y="771.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.3" y="782.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.08%)</title><rect x="1180.3" y="755.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.3" y="766.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.08%)</title><rect x="1180.3" y="739.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.3" y="750.0"></text>
</g>
<g>
<title>StoreNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd) (1 samples, 0.08%)</title><rect x="1180.3" y="723.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.3" y="734.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1180.3" y="707.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.3" y="718.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1180.3" y="691.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.3" y="702.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1180.3" y="675.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.3" y="686.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.08%)</title><rect x="1180.3" y="659.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.3" y="670.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.1" y="867.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.1" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.1" y="851.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.1" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.1" y="835.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.1" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.1" y="819.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.1" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.1" y="803.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.1" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.1" y="787.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.1" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1181.1" y="771.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.1" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.1" y="755.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.1" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.1" y="739.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.1" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.1" y="723.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.1" y="707.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.1" y="691.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1181.1" y="675.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.1" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.1" y="659.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.1" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.1" y="643.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.1" y="627.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.1" y="611.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.1" y="595.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1181.1" y="579.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.1" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.1" y="563.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.1" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.1" y="547.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.1" y="531.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.1" y="515.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.1" y="499.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.1" y="510.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1181.1" y="483.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.1" y="494.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1181.1" y="467.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.1" y="478.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1181.1" y="451.0" width="0.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1184.1" y="462.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.0" y="1059.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.0" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.0" y="1043.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.0" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.0" y="1027.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.0" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.0" y="1011.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.0" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.0" y="995.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.0" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.0" y="979.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.0" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.0" y="963.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.0" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.0" y="947.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.0" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.0" y="931.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.0" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.0" y="915.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.0" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.0" y="899.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.0" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.0" y="883.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.0" y="894.0"></text>
</g>
<g>
<title>Parse::do_monitor_enter() (1 samples, 0.08%)</title><rect x="1182.0" y="867.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.0" y="878.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.08%)</title><rect x="1182.0" y="851.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.0" y="862.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.08%)</title><rect x="1182.0" y="835.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.0" y="846.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1182.0" y="819.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.0" y="830.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_output_for_runtime_call(Node*, Node*, TypePtr const*) (1 samples, 0.08%)</title><rect x="1182.0" y="803.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.0" y="814.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.08%)</title><rect x="1182.0" y="787.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.0" y="798.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1182.9" y="1075.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.9" y="1086.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1182.9" y="1059.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.9" y="1070.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.08%)</title><rect x="1182.9" y="1043.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.9" y="1054.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.08%)</title><rect x="1182.9" y="1027.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.9" y="1038.0"></text>
</g>
<g>
<title>GraphKit::g1_mark_card(IdealKit&amp;, Node*, Node*, unsigned int, Node*, Node*, Node*, TypeFunc const*) (1 samples, 0.08%)</title><rect x="1182.9" y="1011.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.9" y="1022.0"></text>
</g>
<g>
<title>IdealKit::store(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.08%)</title><rect x="1182.9" y="995.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.9" y="1006.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1182.9" y="979.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.9" y="990.0"></text>
</g>
<g>
<title>Parse::ensure_phis_everywhere() (1 samples, 0.08%)</title><rect x="1183.8" y="1107.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.8" y="1118.0"></text>
</g>
<g>
<title>Parse::ensure_phi(int, bool) (1 samples, 0.08%)</title><rect x="1183.8" y="1091.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.8" y="1102.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="1183.8" y="1075.0" width="0.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1186.8" y="1086.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.08%)</title><rect x="1184.7" y="1155.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.7" y="1166.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.08%)</title><rect x="1184.7" y="1139.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.7" y="1150.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.08%)</title><rect x="1185.6" y="1187.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.6" y="1198.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.08%)</title><rect x="1185.6" y="1171.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.6" y="1182.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.08%)</title><rect x="1185.6" y="1155.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.6" y="1166.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.08%)</title><rect x="1185.6" y="1139.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.6" y="1150.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.08%)</title><rect x="1185.6" y="1123.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.6" y="1134.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.08%)</title><rect x="1185.6" y="1107.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.6" y="1118.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.08%)</title><rect x="1185.6" y="1091.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.6" y="1102.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.08%)</title><rect x="1185.6" y="1075.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.6" y="1086.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.08%)</title><rect x="1185.6" y="1059.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.6" y="1070.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (1 samples, 0.08%)</title><rect x="1185.6" y="1043.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.6" y="1054.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.08%)</title><rect x="1186.5" y="1203.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.5" y="1214.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.08%)</title><rect x="1186.5" y="1187.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.5" y="1198.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.08%)</title><rect x="1186.5" y="1171.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.5" y="1182.0"></text>
</g>
<g>
<title>CodeCache::next_nmethod(CodeBlob*) (1 samples, 0.08%)</title><rect x="1186.5" y="1155.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.5" y="1166.0"></text>
</g>
<g>
<title>CodeHeap::next_free(HeapBlock*) const (1 samples, 0.08%)</title><rect x="1186.5" y="1139.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.5" y="1150.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.08%)</title><rect x="1187.3" y="1219.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.3" y="1230.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.08%)</title><rect x="1187.3" y="1203.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.3" y="1214.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.08%)</title><rect x="1187.3" y="1187.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.3" y="1198.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.08%)</title><rect x="1187.3" y="1171.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.3" y="1182.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.15%)</title><rect x="1188.2" y="1251.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.2" y="1262.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.15%)</title><rect x="1188.2" y="1235.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.2" y="1246.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.15%)</title><rect x="1188.2" y="1219.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.2" y="1230.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.15%)</title><rect x="1188.2" y="1203.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.2" y="1214.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.15%)</title><rect x="1188.2" y="1187.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.2" y="1198.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.15%)</title><rect x="1188.2" y="1171.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.2" y="1182.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (2 samples, 0.15%)</title><rect x="1188.2" y="1155.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.2" y="1166.0"></text>
</g>
<g>
<title>G1CollectedHeap::process_discovered_references(unsigned int) (1 samples, 0.08%)</title><rect x="1188.2" y="1139.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.2" y="1150.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int) (1 samples, 0.08%)</title><rect x="1188.2" y="1123.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.2" y="1134.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.08%)</title><rect x="1188.2" y="1107.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.2" y="1118.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.08%)</title><rect x="1188.2" y="1091.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.2" y="1102.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.08%)</title><rect x="1188.2" y="1075.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1191.2" y="1086.0"></text>
</g>
<g>
<title>GCTracer::report_gc_reference_stats(ReferenceProcessorStats const&amp;) const (1 samples, 0.08%)</title><rect x="1189.1" y="1139.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1192.1" y="1150.0"></text>
</g>
</g>
</svg>
