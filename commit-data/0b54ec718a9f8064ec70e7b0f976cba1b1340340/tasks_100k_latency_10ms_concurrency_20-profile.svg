<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="726" onload="init(evt)" viewBox="0 0 1200 726" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="709"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="709"> </text>
<g id="frames">
<g>
<title>all (319 samples, 100.00%)</title><rect x="10.0" y="675.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="686.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (23 samples, 7.21%)</title><rect x="10.0" y="659.0" width="85.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="670.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (23 samples, 7.21%)</title><rect x="10.0" y="643.0" width="85.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="654.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (23 samples, 7.21%)</title><rect x="10.0" y="627.0" width="85.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="638.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (3 samples, 0.94%)</title><rect x="10.0" y="611.0" width="11.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (3 samples, 0.94%)</title><rect x="10.0" y="595.0" width="11.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (3 samples, 0.94%)</title><rect x="10.0" y="579.0" width="11.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$270/989845867.accept (3 samples, 0.94%)</title><rect x="10.0" y="563.0" width="11.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (3 samples, 0.94%)</title><rect x="10.0" y="547.0" width="11.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (3 samples, 0.94%)</title><rect x="10.0" y="531.0" width="11.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (3 samples, 0.94%)</title><rect x="10.0" y="515.0" width="11.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (4 samples, 1.25%)</title><rect x="21.1" y="611.0" width="14.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="24.1" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$269/1464761203.accept (4 samples, 1.25%)</title><rect x="21.1" y="595.0" width="14.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="24.1" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (4 samples, 1.25%)</title><rect x="21.1" y="579.0" width="14.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.1" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (2 samples, 0.63%)</title><rect x="21.1" y="563.0" width="7.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="24.1" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (2 samples, 0.63%)</title><rect x="21.1" y="547.0" width="7.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="24.1" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (2 samples, 0.63%)</title><rect x="21.1" y="531.0" width="7.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="24.1" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (1 samples, 0.31%)</title><rect x="24.8" y="515.0" width="3.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="27.8" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.31%)</title><rect x="24.8" y="499.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="27.8" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.31%)</title><rect x="24.8" y="483.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="27.8" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (2 samples, 0.63%)</title><rect x="28.5" y="563.0" width="7.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="31.5" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 0.63%)</title><rect x="28.5" y="547.0" width="7.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="31.5" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.63%)</title><rect x="28.5" y="531.0" width="7.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.5" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.63%)</title><rect x="28.5" y="515.0" width="7.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="31.5" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (16 samples, 5.02%)</title><rect x="35.9" y="611.0" width="59.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="38.9" y="622.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (16 samples, 5.02%)</title><rect x="35.9" y="595.0" width="59.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="38.9" y="606.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (11 samples, 3.45%)</title><rect x="35.9" y="579.0" width="40.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="38.9" y="590.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 1.57%)</title><rect x="35.9" y="563.0" width="18.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="38.9" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 1.57%)</title><rect x="35.9" y="547.0" width="18.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="38.9" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.94%)</title><rect x="35.9" y="531.0" width="11.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="38.9" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (2 samples, 0.63%)</title><rect x="35.9" y="515.0" width="7.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="38.9" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (2 samples, 0.63%)</title><rect x="35.9" y="499.0" width="7.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="38.9" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (2 samples, 0.63%)</title><rect x="35.9" y="483.0" width="7.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="38.9" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (2 samples, 0.63%)</title><rect x="35.9" y="467.0" width="7.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="38.9" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.31%)</title><rect x="35.9" y="451.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="38.9" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.31%)</title><rect x="35.9" y="435.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="38.9" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.31%)</title><rect x="35.9" y="419.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="38.9" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.31%)</title><rect x="35.9" y="403.0" width="3.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="38.9" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.31%)</title><rect x="35.9" y="387.0" width="3.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="38.9" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.31%)</title><rect x="35.9" y="371.0" width="3.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="38.9" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$16.read (1 samples, 0.31%)</title><rect x="35.9" y="355.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="38.9" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/CompactArrayOf.read (1 samples, 0.31%)</title><rect x="39.6" y="451.0" width="3.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="42.6" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.31%)</title><rect x="39.6" y="435.0" width="3.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="42.6" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.31%)</title><rect x="39.6" y="419.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="42.6" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/CompactArrayOf.read (1 samples, 0.31%)</title><rect x="39.6" y="403.0" width="3.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="42.6" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.31%)</title><rect x="39.6" y="387.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="42.6" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.31%)</title><rect x="39.6" y="371.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="42.6" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$3.read (1 samples, 0.31%)</title><rect x="39.6" y="355.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="42.6" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.getShort (1 samples, 0.31%)</title><rect x="39.6" y="339.0" width="3.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="42.6" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.31%)</title><rect x="43.3" y="515.0" width="3.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="46.3" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.31%)</title><rect x="43.3" y="499.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="46.3" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.31%)</title><rect x="47.0" y="531.0" width="3.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="50.0" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.31%)</title><rect x="47.0" y="515.0" width="3.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="50.0" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.31%)</title><rect x="47.0" y="499.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="50.0" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.31%)</title><rect x="47.0" y="483.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="50.0" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.31%)</title><rect x="47.0" y="467.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="50.0" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.31%)</title><rect x="47.0" y="451.0" width="3.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="50.0" y="462.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.31%)</title><rect x="47.0" y="435.0" width="3.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="50.0" y="446.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.31%)</title><rect x="47.0" y="419.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="50.0" y="430.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.31%)</title><rect x="47.0" y="403.0" width="3.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="50.0" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.31%)</title><rect x="47.0" y="387.0" width="3.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="50.0" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.31%)</title><rect x="47.0" y="371.0" width="3.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="50.0" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.31%)</title><rect x="47.0" y="355.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="50.0" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Timer.update (1 samples, 0.31%)</title><rect x="50.7" y="531.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="53.7" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (6 samples, 1.88%)</title><rect x="54.4" y="563.0" width="22.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="57.4" y="574.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (6 samples, 1.88%)</title><rect x="54.4" y="547.0" width="22.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="57.4" y="558.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (6 samples, 1.88%)</title><rect x="54.4" y="531.0" width="22.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="57.4" y="542.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (6 samples, 1.88%)</title><rect x="54.4" y="515.0" width="22.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="57.4" y="526.0">o..</text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.31%)</title><rect x="54.4" y="499.0" width="3.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="57.4" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (3 samples, 0.94%)</title><rect x="58.1" y="499.0" width="11.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="61.1" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (2 samples, 0.63%)</title><rect x="69.2" y="499.0" width="7.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="72.2" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 0.63%)</title><rect x="69.2" y="483.0" width="7.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="72.2" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (2 samples, 0.63%)</title><rect x="69.2" y="467.0" width="7.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="72.2" y="478.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (2 samples, 0.63%)</title><rect x="69.2" y="451.0" width="7.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="72.2" y="462.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (2 samples, 0.63%)</title><rect x="69.2" y="435.0" width="7.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="72.2" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (2 samples, 0.63%)</title><rect x="69.2" y="419.0" width="7.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="72.2" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (2 samples, 0.63%)</title><rect x="69.2" y="403.0" width="7.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="72.2" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (2 samples, 0.63%)</title><rect x="69.2" y="387.0" width="7.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="72.2" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (3 samples, 0.94%)</title><rect x="76.6" y="579.0" width="11.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="79.6" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.63%)</title><rect x="76.6" y="563.0" width="7.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="79.6" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.63%)</title><rect x="76.6" y="547.0" width="7.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="79.6" y="558.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.31%)</title><rect x="80.3" y="531.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="83.3" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$237/129780753.accept (1 samples, 0.31%)</title><rect x="80.3" y="515.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="83.3" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.31%)</title><rect x="80.3" y="499.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="83.3" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.31%)</title><rect x="80.3" y="483.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="83.3" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.31%)</title><rect x="84.0" y="563.0" width="3.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="87.0" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.31%)</title><rect x="84.0" y="547.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="87.0" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.31%)</title><rect x="84.0" y="531.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="87.0" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 0.63%)</title><rect x="87.7" y="579.0" width="7.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="90.7" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.63%)</title><rect x="87.7" y="563.0" width="7.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="90.7" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.63%)</title><rect x="87.7" y="547.0" width="7.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="90.7" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.63%)</title><rect x="87.7" y="531.0" width="7.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="90.7" y="542.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/202204364.linkToTargetMethod (1 samples, 0.31%)</title><rect x="87.7" y="515.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="90.7" y="526.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/541980262.invokeStatic_JJ_L (1 samples, 0.31%)</title><rect x="87.7" y="499.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="90.7" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.31%)</title><rect x="91.4" y="515.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="94.4" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.31%)</title><rect x="91.4" y="499.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="94.4" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.31%)</title><rect x="91.4" y="483.0" width="3.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="94.4" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.31%)</title><rect x="91.4" y="467.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="94.4" y="478.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.31%)</title><rect x="91.4" y="451.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="94.4" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.31%)</title><rect x="91.4" y="435.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="94.4" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.31%)</title><rect x="91.4" y="419.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="94.4" y="430.0"></text>
</g>
<g>
<title>java/lang/Thread.run (255 samples, 79.94%)</title><rect x="95.1" y="659.0" width="943.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="98.1" y="670.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (255 samples, 79.94%)</title><rect x="95.1" y="643.0" width="943.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="98.1" y="654.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (255 samples, 79.94%)</title><rect x="95.1" y="627.0" width="943.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="98.1" y="638.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$289/1596934666.run (244 samples, 76.49%)</title><rect x="106.2" y="611.0" width="902.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="109.2" y="622.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$289/1596934666.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62 (244 samples, 76.49%)</title><rect x="106.2" y="595.0" width="902.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="109.2" y="606.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (244 samples, 76.49%)</title><rect x="106.2" y="579.0" width="902.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="109.2" y="590.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (244 samples, 76.49%)</title><rect x="106.2" y="563.0" width="902.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="109.2" y="574.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>[vdso] (1 samples, 0.31%)</title><rect x="113.6" y="547.0" width="3.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="116.6" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (8 samples, 2.51%)</title><rect x="117.3" y="547.0" width="29.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="120.3" y="558.0">co..</text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (8 samples, 2.51%)</title><rect x="117.3" y="531.0" width="29.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="120.3" y="542.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.get (8 samples, 2.51%)</title><rect x="117.3" y="515.0" width="29.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="120.3" y="526.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.31%)</title><rect x="117.3" y="499.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="120.3" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (7 samples, 2.19%)</title><rect x="121.0" y="499.0" width="25.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="124.0" y="510.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (22 samples, 6.90%)</title><rect x="146.9" y="547.0" width="81.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="149.9" y="558.0">com/linec..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (22 samples, 6.90%)</title><rect x="146.9" y="531.0" width="81.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="149.9" y="542.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (22 samples, 6.90%)</title><rect x="146.9" y="515.0" width="81.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="149.9" y="526.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (10 samples, 3.13%)</title><rect x="191.3" y="499.0" width="36.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="194.3" y="510.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.31%)</title><rect x="191.3" y="483.0" width="3.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="194.3" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.31%)</title><rect x="191.3" y="467.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="194.3" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.31%)</title><rect x="191.3" y="451.0" width="3.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="194.3" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$301/421197227.accept (1 samples, 0.31%)</title><rect x="191.3" y="435.0" width="3.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="194.3" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (9 samples, 2.82%)</title><rect x="195.0" y="483.0" width="33.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="198.0" y="494.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$301/421197227.accept (9 samples, 2.82%)</title><rect x="195.0" y="467.0" width="33.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="198.0" y="478.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (9 samples, 2.82%)</title><rect x="195.0" y="451.0" width="33.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="198.0" y="462.0">co..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (9 samples, 2.82%)</title><rect x="195.0" y="435.0" width="33.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="198.0" y="446.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (6 samples, 1.88%)</title><rect x="206.1" y="419.0" width="22.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="209.1" y="430.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$287/399290885.accept (2 samples, 0.63%)</title><rect x="206.1" y="403.0" width="7.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="209.1" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$286/671088447.accept (1 samples, 0.31%)</title><rect x="213.4" y="403.0" width="3.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="216.4" y="414.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.31%)</title><rect x="217.1" y="403.0" width="3.7" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="220.1" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.63%)</title><rect x="220.8" y="403.0" width="7.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="223.8" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.63%)</title><rect x="220.8" y="387.0" width="7.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="223.8" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (36 samples, 11.29%)</title><rect x="228.2" y="547.0" width="133.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="231.2" y="558.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$45/1556995360.extract (36 samples, 11.29%)</title><rect x="228.2" y="531.0" width="133.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="231.2" y="542.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (36 samples, 11.29%)</title><rect x="228.2" y="515.0" width="133.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="231.2" y="526.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (36 samples, 11.29%)</title><rect x="228.2" y="499.0" width="133.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="231.2" y="510.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (36 samples, 11.29%)</title><rect x="228.2" y="483.0" width="133.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="231.2" y="494.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (36 samples, 11.29%)</title><rect x="228.2" y="467.0" width="133.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="231.2" y="478.0">com/fasterxml/jac..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (19 samples, 5.96%)</title><rect x="228.2" y="451.0" width="70.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="231.2" y="462.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (14 samples, 4.39%)</title><rect x="228.2" y="435.0" width="51.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="231.2" y="446.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (14 samples, 4.39%)</title><rect x="228.2" y="419.0" width="51.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="231.2" y="430.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (7 samples, 2.19%)</title><rect x="254.1" y="403.0" width="25.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="257.1" y="414.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 2.19%)</title><rect x="254.1" y="387.0" width="25.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="257.1" y="398.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (7 samples, 2.19%)</title><rect x="254.1" y="371.0" width="25.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="257.1" y="382.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (7 samples, 2.19%)</title><rect x="254.1" y="355.0" width="25.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="257.1" y="366.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (7 samples, 2.19%)</title><rect x="254.1" y="339.0" width="25.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="257.1" y="350.0">j..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (5 samples, 1.57%)</title><rect x="280.0" y="435.0" width="18.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="283.0" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (5 samples, 1.57%)</title><rect x="280.0" y="419.0" width="18.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="283.0" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.31%)</title><rect x="283.7" y="403.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="286.7" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.31%)</title><rect x="287.4" y="403.0" width="3.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="290.4" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.31%)</title><rect x="287.4" y="387.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="290.4" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.31%)</title><rect x="287.4" y="371.0" width="3.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="290.4" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (2 samples, 0.63%)</title><rect x="291.1" y="403.0" width="7.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="294.1" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (2 samples, 0.63%)</title><rect x="291.1" y="387.0" width="7.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="294.1" y="398.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.63%)</title><rect x="291.1" y="371.0" width="7.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="294.1" y="382.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.31%)</title><rect x="291.1" y="355.0" width="3.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="294.1" y="366.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.31%)</title><rect x="291.1" y="339.0" width="3.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="294.1" y="350.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.31%)</title><rect x="294.8" y="355.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="297.8" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.31%)</title><rect x="294.8" y="339.0" width="3.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="297.8" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.31%)</title><rect x="294.8" y="323.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="297.8" y="334.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.31%)</title><rect x="294.8" y="307.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="297.8" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (14 samples, 4.39%)</title><rect x="298.5" y="451.0" width="51.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="301.5" y="462.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.31%)</title><rect x="298.5" y="435.0" width="3.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="301.5" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (1 samples, 0.31%)</title><rect x="298.5" y="419.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="301.5" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (1 samples, 0.31%)</title><rect x="298.5" y="403.0" width="3.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="301.5" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.31%)</title><rect x="298.5" y="387.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="301.5" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.31%)</title><rect x="302.2" y="435.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="305.2" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.31%)</title><rect x="302.2" y="419.0" width="3.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="305.2" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.31%)</title><rect x="302.2" y="403.0" width="3.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="305.2" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (4 samples, 1.25%)</title><rect x="305.9" y="435.0" width="14.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="308.9" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.94%)</title><rect x="305.9" y="419.0" width="11.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="308.9" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (3 samples, 0.94%)</title><rect x="305.9" y="403.0" width="11.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="308.9" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.63%)</title><rect x="309.6" y="387.0" width="7.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="312.6" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.31%)</title><rect x="313.3" y="371.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="316.3" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.31%)</title><rect x="317.0" y="419.0" width="3.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="320.0" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (8 samples, 2.51%)</title><rect x="320.7" y="435.0" width="29.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="323.7" y="446.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (8 samples, 2.51%)</title><rect x="320.7" y="419.0" width="29.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="323.7" y="430.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 1.57%)</title><rect x="320.7" y="403.0" width="18.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="323.7" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.31%)</title><rect x="324.4" y="387.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="327.4" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.31%)</title><rect x="324.4" y="371.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="327.4" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.31%)</title><rect x="324.4" y="355.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="327.4" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.31%)</title><rect x="324.4" y="339.0" width="3.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="327.4" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 0.94%)</title><rect x="328.1" y="387.0" width="11.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="331.1" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.31%)</title><rect x="328.1" y="371.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="331.1" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.31%)</title><rect x="328.1" y="355.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="331.1" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (2 samples, 0.63%)</title><rect x="331.8" y="371.0" width="7.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="334.8" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (2 samples, 0.63%)</title><rect x="331.8" y="355.0" width="7.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="334.8" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (2 samples, 0.63%)</title><rect x="331.8" y="339.0" width="7.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="334.8" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (2 samples, 0.63%)</title><rect x="331.8" y="323.0" width="7.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="334.8" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (3 samples, 0.94%)</title><rect x="339.2" y="403.0" width="11.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="342.2" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (3 samples, 0.94%)</title><rect x="339.2" y="387.0" width="11.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="342.2" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (3 samples, 0.94%)</title><rect x="339.2" y="371.0" width="11.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="342.2" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.31%)</title><rect x="339.2" y="355.0" width="3.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="342.2" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.31%)</title><rect x="339.2" y="339.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="342.2" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.31%)</title><rect x="339.2" y="323.0" width="3.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="342.2" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.31%)</title><rect x="339.2" y="307.0" width="3.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="342.2" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.31%)</title><rect x="342.9" y="355.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="345.9" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.31%)</title><rect x="346.6" y="355.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="349.6" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.31%)</title><rect x="346.6" y="339.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="349.6" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.31%)</title><rect x="346.6" y="323.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="349.6" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.31%)</title><rect x="346.6" y="307.0" width="3.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="349.6" y="318.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.31%)</title><rect x="346.6" y="291.0" width="3.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="349.6" y="302.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.31%)</title><rect x="346.6" y="275.0" width="3.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="349.6" y="286.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.31%)</title><rect x="346.6" y="259.0" width="3.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="349.6" y="270.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.31%)</title><rect x="346.6" y="243.0" width="3.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="349.6" y="254.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.31%)</title><rect x="346.6" y="227.0" width="3.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="349.6" y="238.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.31%)</title><rect x="346.6" y="211.0" width="3.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="349.6" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (3 samples, 0.94%)</title><rect x="350.3" y="451.0" width="11.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="353.3" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (3 samples, 0.94%)</title><rect x="350.3" y="435.0" width="11.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="353.3" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (3 samples, 0.94%)</title><rect x="350.3" y="419.0" width="11.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="353.3" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBindings.isEmpty (1 samples, 0.31%)</title><rect x="350.3" y="403.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="353.3" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._findWellKnownSimple (1 samples, 0.31%)</title><rect x="354.0" y="403.0" width="3.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="357.0" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.31%)</title><rect x="357.7" y="403.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="360.7" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.31%)</title><rect x="357.7" y="387.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="360.7" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (175 samples, 54.86%)</title><rect x="361.4" y="547.0" width="647.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="364.4" y="558.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (21 samples, 6.58%)</title><rect x="365.1" y="531.0" width="77.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="368.1" y="542.0">com/linec..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (16 samples, 5.02%)</title><rect x="383.6" y="515.0" width="59.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="386.6" y="526.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (15 samples, 4.70%)</title><rect x="387.3" y="499.0" width="55.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="390.3" y="510.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.31%)</title><rect x="387.3" y="483.0" width="3.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="390.3" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.31%)</title><rect x="387.3" y="467.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="390.3" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.31%)</title><rect x="387.3" y="451.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="390.3" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.31%)</title><rect x="387.3" y="435.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="390.3" y="446.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (14 samples, 4.39%)</title><rect x="391.0" y="483.0" width="51.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="394.0" y="494.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.remove (14 samples, 4.39%)</title><rect x="391.0" y="467.0" width="51.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="394.0" y="478.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (10 samples, 3.13%)</title><rect x="405.8" y="451.0" width="37.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="408.8" y="462.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (37 samples, 11.60%)</title><rect x="442.8" y="531.0" width="136.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="445.8" y="542.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (35 samples, 10.97%)</title><rect x="442.8" y="515.0" width="129.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="445.8" y="526.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (17 samples, 5.33%)</title><rect x="442.8" y="499.0" width="62.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="445.8" y="510.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 1.25%)</title><rect x="457.6" y="483.0" width="14.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="460.6" y="494.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 1.25%)</title><rect x="457.6" y="467.0" width="14.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="460.6" y="478.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 0.94%)</title><rect x="457.6" y="451.0" width="11.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="460.6" y="462.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (3 samples, 0.94%)</title><rect x="457.6" y="435.0" width="11.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="460.6" y="446.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.94%)</title><rect x="457.6" y="419.0" width="11.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="460.6" y="430.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.94%)</title><rect x="457.6" y="403.0" width="11.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="460.6" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.63%)</title><rect x="457.6" y="387.0" width="7.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="460.6" y="398.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.31%)</title><rect x="457.6" y="371.0" width="3.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="460.6" y="382.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.31%)</title><rect x="457.6" y="355.0" width="3.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="460.6" y="366.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.31%)</title><rect x="461.3" y="371.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="464.3" y="382.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.31%)</title><rect x="465.0" y="387.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="468.0" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.31%)</title><rect x="465.0" y="371.0" width="3.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="468.0" y="382.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.31%)</title><rect x="468.7" y="451.0" width="3.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="471.7" y="462.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (9 samples, 2.82%)</title><rect x="472.4" y="483.0" width="33.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="475.4" y="494.0">js..</text>
</g>
<g>
<title>java/lang/String.valueOf (2 samples, 0.63%)</title><rect x="505.7" y="499.0" width="7.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="508.7" y="510.0"></text>
</g>
<g>
<title>java/lang/Long.toString (2 samples, 0.63%)</title><rect x="505.7" y="483.0" width="7.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="508.7" y="494.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.63%)</title><rect x="505.7" y="467.0" width="7.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="508.7" y="478.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (16 samples, 5.02%)</title><rect x="513.1" y="499.0" width="59.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="516.1" y="510.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (15 samples, 4.70%)</title><rect x="516.8" y="483.0" width="55.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="519.8" y="494.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.63%)</title><rect x="516.8" y="467.0" width="7.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="519.8" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.63%)</title><rect x="516.8" y="451.0" width="7.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="519.8" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.63%)</title><rect x="516.8" y="435.0" width="7.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="519.8" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.63%)</title><rect x="516.8" y="419.0" width="7.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="519.8" y="430.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (13 samples, 4.08%)</title><rect x="524.2" y="467.0" width="48.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="527.2" y="478.0">java..</text>
</g>
<g>
<title>java/util/HashMap.put (13 samples, 4.08%)</title><rect x="524.2" y="451.0" width="48.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="527.2" y="462.0">java..</text>
</g>
<g>
<title>java/util/HashMap.putVal (11 samples, 3.45%)</title><rect x="531.6" y="435.0" width="40.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="534.6" y="446.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.63%)</title><rect x="542.7" y="419.0" width="7.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="545.7" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (6 samples, 1.88%)</title><rect x="550.1" y="419.0" width="22.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="553.1" y="430.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.63%)</title><rect x="564.9" y="403.0" width="7.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="567.9" y="414.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.31%)</title><rect x="568.6" y="387.0" width="3.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="571.6" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.31%)</title><rect x="568.6" y="371.0" width="3.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="571.6" y="382.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.31%)</title><rect x="568.6" y="355.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="571.6" y="366.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (2 samples, 0.63%)</title><rect x="572.3" y="515.0" width="7.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="575.3" y="526.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (2 samples, 0.63%)</title><rect x="572.3" y="499.0" width="7.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="575.3" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.63%)</title><rect x="572.3" y="483.0" width="7.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="575.3" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.63%)</title><rect x="572.3" y="467.0" width="7.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="575.3" y="478.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.31%)</title><rect x="576.0" y="451.0" width="3.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="579.0" y="462.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.31%)</title><rect x="576.0" y="435.0" width="3.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="579.0" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (101 samples, 31.66%)</title><rect x="579.7" y="531.0" width="373.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="582.7" y="542.0">com/linecorp/decaton/processor/runtime/internal/Pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (101 samples, 31.66%)</title><rect x="579.7" y="515.0" width="373.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="582.7" y="526.0">com/linecorp/decaton/processor/runtime/internal/Pro..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$210/511622240.process (61 samples, 19.12%)</title><rect x="587.1" y="499.0" width="225.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="590.1" y="510.0">com/linecorp/decaton/benchmark..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (61 samples, 19.12%)</title><rect x="587.1" y="483.0" width="225.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="590.1" y="494.0">com/linecorp/decaton/benchmark..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (60 samples, 18.81%)</title><rect x="590.8" y="467.0" width="221.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="593.8" y="478.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.63%)</title><rect x="598.2" y="451.0" width="7.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="601.2" y="462.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.63%)</title><rect x="598.2" y="435.0" width="7.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="601.2" y="446.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.63%)</title><rect x="598.2" y="419.0" width="7.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="601.2" y="430.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.63%)</title><rect x="598.2" y="403.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="601.2" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.63%)</title><rect x="598.2" y="387.0" width="7.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="601.2" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (2 samples, 0.63%)</title><rect x="598.2" y="371.0" width="7.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="601.2" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (54 samples, 16.93%)</title><rect x="605.5" y="451.0" width="199.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="608.5" y="462.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>java/lang/Thread.sleep (54 samples, 16.93%)</title><rect x="605.5" y="435.0" width="199.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="608.5" y="446.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (49 samples, 15.36%)</title><rect x="616.6" y="419.0" width="181.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="619.6" y="430.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.31%)</title><rect x="646.2" y="403.0" width="3.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="649.2" y="414.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.94%)</title><rect x="649.9" y="403.0" width="11.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="652.9" y="414.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.63%)</title><rect x="653.6" y="387.0" width="7.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="656.6" y="398.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.31%)</title><rect x="661.0" y="403.0" width="3.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="664.0" y="414.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.94%)</title><rect x="664.7" y="403.0" width="11.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="667.7" y="414.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (33 samples, 10.34%)</title><rect x="675.8" y="403.0" width="122.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="678.8" y="414.0">os::sleep(Threa..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.94%)</title><rect x="705.4" y="387.0" width="11.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="708.4" y="398.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.63%)</title><rect x="716.5" y="387.0" width="7.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="719.5" y="398.0"></text>
</g>
<g>
<title>__pthread_cond_init (1 samples, 0.31%)</title><rect x="723.9" y="387.0" width="3.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="726.9" y="398.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (11 samples, 3.45%)</title><rect x="727.6" y="387.0" width="40.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="730.6" y="398.0">__p..</text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.31%)</title><rect x="768.3" y="387.0" width="3.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="771.3" y="398.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.31%)</title><rect x="772.0" y="387.0" width="3.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="775.0" y="398.0"></text>
</g>
<g>
<title>_init (3 samples, 0.94%)</title><rect x="775.7" y="387.0" width="11.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="778.7" y="398.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.63%)</title><rect x="786.8" y="387.0" width="7.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="789.8" y="398.0"></text>
</g>
<g>
<title>pthread_cond_destroy@@GLIBC_2.3.2 (1 samples, 0.31%)</title><rect x="794.2" y="387.0" width="3.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="797.2" y="398.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.31%)</title><rect x="797.9" y="419.0" width="3.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="800.9" y="430.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.31%)</title><rect x="801.6" y="419.0" width="3.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="804.6" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.31%)</title><rect x="805.3" y="451.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="808.3" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.31%)</title><rect x="809.0" y="451.0" width="3.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="812.0" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.31%)</title><rect x="809.0" y="435.0" width="3.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="812.0" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.31%)</title><rect x="809.0" y="419.0" width="3.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="812.0" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (11 samples, 3.45%)</title><rect x="812.7" y="499.0" width="40.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="815.7" y="510.0">com..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (7 samples, 2.19%)</title><rect x="827.5" y="483.0" width="25.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="830.5" y="494.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.63%)</title><rect x="853.4" y="499.0" width="7.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="856.4" y="510.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.63%)</title><rect x="853.4" y="483.0" width="7.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="856.4" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/260840925.linkToTargetMethod (1 samples, 0.31%)</title><rect x="860.8" y="499.0" width="3.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="863.8" y="510.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/205962452.invokeStatic_L_L (1 samples, 0.31%)</title><rect x="860.8" y="483.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="863.8" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$297/1491612082.get$Lambda (1 samples, 0.31%)</title><rect x="860.8" y="467.0" width="3.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="863.8" y="478.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.63%)</title><rect x="864.5" y="499.0" width="7.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="867.5" y="510.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.63%)</title><rect x="864.5" y="483.0" width="7.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="867.5" y="494.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.31%)</title><rect x="864.5" y="467.0" width="3.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="867.5" y="478.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.31%)</title><rect x="868.2" y="467.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="871.2" y="478.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (15 samples, 4.70%)</title><rect x="871.9" y="499.0" width="55.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="874.9" y="510.0">java/..</text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (7 samples, 2.19%)</title><rect x="901.5" y="483.0" width="25.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="904.5" y="494.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 1.88%)</title><rect x="927.4" y="499.0" width="22.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="930.4" y="510.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 1.88%)</title><rect x="927.4" y="483.0" width="22.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="930.4" y="494.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 1.88%)</title><rect x="927.4" y="467.0" width="22.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="930.4" y="478.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (5 samples, 1.57%)</title><rect x="927.4" y="451.0" width="18.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="930.4" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (5 samples, 1.57%)</title><rect x="927.4" y="435.0" width="18.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="930.4" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (5 samples, 1.57%)</title><rect x="927.4" y="419.0" width="18.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="930.4" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$297/1491612082.accept (2 samples, 0.63%)</title><rect x="934.8" y="403.0" width="7.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="937.8" y="414.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.31%)</title><rect x="942.2" y="403.0" width="3.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="945.2" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.31%)</title><rect x="945.9" y="451.0" width="3.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="948.9" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$297/1491612082.accept (1 samples, 0.31%)</title><rect x="945.9" y="435.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="948.9" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$76 (1 samples, 0.31%)</title><rect x="945.9" y="419.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="948.9" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReference.get (1 samples, 0.31%)</title><rect x="949.6" y="499.0" width="3.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="952.6" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (1 samples, 0.31%)</title><rect x="953.3" y="531.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="956.3" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.31%)</title><rect x="953.3" y="515.0" width="3.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="956.3" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.31%)</title><rect x="953.3" y="499.0" width="3.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="956.3" y="510.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.31%)</title><rect x="953.3" y="483.0" width="3.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="956.3" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (14 samples, 4.39%)</title><rect x="957.0" y="531.0" width="51.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="960.0" y="542.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (14 samples, 4.39%)</title><rect x="957.0" y="515.0" width="51.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="960.0" y="526.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 1.88%)</title><rect x="986.6" y="499.0" width="22.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="989.6" y="510.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (5 samples, 1.57%)</title><rect x="986.6" y="483.0" width="18.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="989.6" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (5 samples, 1.57%)</title><rect x="986.6" y="467.0" width="18.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="989.6" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (5 samples, 1.57%)</title><rect x="986.6" y="451.0" width="18.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="989.6" y="462.0"></text>
</g>
<g>
<title>itable stub (5 samples, 1.57%)</title><rect x="986.6" y="435.0" width="18.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="989.6" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.31%)</title><rect x="1005.0" y="483.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1008.0" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$299/333618907.accept (1 samples, 0.31%)</title><rect x="1005.0" y="467.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1008.0" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$57 (1 samples, 0.31%)</title><rect x="1005.0" y="451.0" width="3.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1008.0" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.31%)</title><rect x="1005.0" y="435.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1008.0" y="446.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.31%)</title><rect x="1005.0" y="419.0" width="3.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1008.0" y="430.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.31%)</title><rect x="1005.0" y="403.0" width="3.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1008.0" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (8 samples, 2.51%)</title><rect x="1008.7" y="611.0" width="29.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1011.7" y="622.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (8 samples, 2.51%)</title><rect x="1008.7" y="595.0" width="29.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1011.7" y="606.0">ja..</text>
</g>
<g>
<title>msort_with_tmp.part.0 (1 samples, 0.31%)</title><rect x="1038.3" y="659.0" width="3.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1041.3" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.63%)</title><rect x="1042.0" y="659.0" width="7.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1045.0" y="670.0"></text>
</g>
<g>
<title>start_thread (38 samples, 11.91%)</title><rect x="1049.4" y="659.0" width="140.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1052.4" y="670.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (38 samples, 11.91%)</title><rect x="1049.4" y="643.0" width="140.6" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1052.4" y="654.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (15 samples, 4.70%)</title><rect x="1049.4" y="627.0" width="55.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1052.4" y="638.0">GangW..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (15 samples, 4.70%)</title><rect x="1049.4" y="611.0" width="55.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1052.4" y="622.0">G1Par..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (15 samples, 4.70%)</title><rect x="1049.4" y="595.0" width="55.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1052.4" y="606.0">G1Par..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (15 samples, 4.70%)</title><rect x="1049.4" y="579.0" width="55.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1052.4" y="590.0">G1Par..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (10 samples, 3.13%)</title><rect x="1060.5" y="563.0" width="37.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1063.5" y="574.0">G1P..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (6 samples, 1.88%)</title><rect x="1075.3" y="547.0" width="22.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1078.3" y="558.0">I..</text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.31%)</title><rect x="1093.8" y="531.0" width="3.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1096.8" y="542.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.31%)</title><rect x="1097.5" y="563.0" width="3.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1100.5" y="574.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.31%)</title><rect x="1101.2" y="563.0" width="3.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1104.2" y="574.0"></text>
</g>
<g>
<title>JavaThread::run() (21 samples, 6.58%)</title><rect x="1104.9" y="627.0" width="77.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1107.9" y="638.0">JavaThrea..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (21 samples, 6.58%)</title><rect x="1104.9" y="611.0" width="77.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1107.9" y="622.0">JavaThrea..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (21 samples, 6.58%)</title><rect x="1104.9" y="595.0" width="77.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1107.9" y="606.0">CompileBr..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (21 samples, 6.58%)</title><rect x="1104.9" y="579.0" width="77.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1107.9" y="590.0">CompileBr..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (19 samples, 5.96%)</title><rect x="1104.9" y="563.0" width="70.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1107.9" y="574.0">C2Compil..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (19 samples, 5.96%)</title><rect x="1104.9" y="547.0" width="70.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1107.9" y="558.0">Compile:..</text>
</g>
<g>
<title>Compile::Code_Gen() (9 samples, 2.82%)</title><rect x="1104.9" y="531.0" width="33.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1107.9" y="542.0">Co..</text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (9 samples, 2.82%)</title><rect x="1104.9" y="515.0" width="33.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1107.9" y="526.0">Ph..</text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.31%)</title><rect x="1104.9" y="499.0" width="3.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1107.9" y="510.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.63%)</title><rect x="1108.6" y="499.0" width="7.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1111.6" y="510.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.31%)</title><rect x="1108.6" y="483.0" width="3.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1111.6" y="494.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.31%)</title><rect x="1112.3" y="483.0" width="3.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1115.3" y="494.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.31%)</title><rect x="1116.0" y="499.0" width="3.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1119.0" y="510.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.31%)</title><rect x="1116.0" y="483.0" width="3.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1119.0" y="494.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (1 samples, 0.31%)</title><rect x="1119.7" y="499.0" width="3.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1122.7" y="510.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.31%)</title><rect x="1119.7" y="483.0" width="3.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1122.7" y="494.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.63%)</title><rect x="1123.4" y="499.0" width="7.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1126.4" y="510.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.63%)</title><rect x="1130.8" y="499.0" width="7.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1133.8" y="510.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.31%)</title><rect x="1134.5" y="483.0" width="3.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1137.5" y="494.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.31%)</title><rect x="1134.5" y="467.0" width="3.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1137.5" y="478.0"></text>
</g>
<g>
<title>Compile::Optimize() (7 samples, 2.19%)</title><rect x="1138.2" y="531.0" width="25.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1141.2" y="542.0">C..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (5 samples, 1.57%)</title><rect x="1138.2" y="515.0" width="18.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1141.2" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.31%)</title><rect x="1138.2" y="499.0" width="3.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1141.2" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.31%)</title><rect x="1141.9" y="499.0" width="3.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1144.9" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (3 samples, 0.94%)</title><rect x="1145.6" y="499.0" width="11.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1148.6" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (2 samples, 0.63%)</title><rect x="1149.3" y="483.0" width="7.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1152.3" y="494.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.63%)</title><rect x="1156.7" y="515.0" width="7.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.7" y="526.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.63%)</title><rect x="1156.7" y="499.0" width="7.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.7" y="510.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.31%)</title><rect x="1156.7" y="483.0" width="3.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.7" y="494.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.31%)</title><rect x="1156.7" y="467.0" width="3.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1159.7" y="478.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.31%)</title><rect x="1160.4" y="483.0" width="3.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1163.4" y="494.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.31%)</title><rect x="1160.4" y="467.0" width="3.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1163.4" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.94%)</title><rect x="1164.1" y="531.0" width="11.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.1" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.94%)</title><rect x="1164.1" y="515.0" width="11.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.94%)</title><rect x="1164.1" y="499.0" width="11.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.94%)</title><rect x="1164.1" y="483.0" width="11.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.94%)</title><rect x="1164.1" y="467.0" width="11.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.94%)</title><rect x="1164.1" y="451.0" width="11.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.1" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.94%)</title><rect x="1164.1" y="435.0" width="11.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.1" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.94%)</title><rect x="1164.1" y="419.0" width="11.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.94%)</title><rect x="1164.1" y="403.0" width="11.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1167.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.94%)</title><rect x="1164.1" y="387.0" width="11.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.94%)</title><rect x="1164.1" y="371.0" width="11.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.94%)</title><rect x="1164.1" y="355.0" width="11.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.1" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.94%)</title><rect x="1164.1" y="339.0" width="11.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.1" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.94%)</title><rect x="1164.1" y="323.0" width="11.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.94%)</title><rect x="1164.1" y="307.0" width="11.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.94%)</title><rect x="1164.1" y="291.0" width="11.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.94%)</title><rect x="1164.1" y="275.0" width="11.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.63%)</title><rect x="1164.1" y="259.0" width="7.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.1" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.63%)</title><rect x="1164.1" y="243.0" width="7.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.1" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.63%)</title><rect x="1164.1" y="227.0" width="7.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.63%)</title><rect x="1164.1" y="211.0" width="7.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.1" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.63%)</title><rect x="1164.1" y="195.0" width="7.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.1" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.63%)</title><rect x="1164.1" y="179.0" width="7.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.1" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.63%)</title><rect x="1164.1" y="163.0" width="7.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.1" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.63%)</title><rect x="1164.1" y="147.0" width="7.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.1" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.63%)</title><rect x="1164.1" y="131.0" width="7.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.1" y="142.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.31%)</title><rect x="1164.1" y="115.0" width="3.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1167.1" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.31%)</title><rect x="1164.1" y="99.0" width="3.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1167.1" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.31%)</title><rect x="1164.1" y="83.0" width="3.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.1" y="94.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.31%)</title><rect x="1164.1" y="67.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.1" y="78.0"></text>
</g>
<g>
<title>Compile::too_many_traps(ciMethod*, int, Deoptimization::DeoptReason) (1 samples, 0.31%)</title><rect x="1164.1" y="51.0" width="3.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.1" y="62.0"></text>
</g>
<g>
<title>ciMethodData::bci_to_data(int, ciMethod*) (1 samples, 0.31%)</title><rect x="1164.1" y="35.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.1" y="46.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.31%)</title><rect x="1167.8" y="115.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.8" y="126.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.31%)</title><rect x="1167.8" y="99.0" width="3.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.8" y="110.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.31%)</title><rect x="1171.5" y="259.0" width="3.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.5" y="270.0"></text>
</g>
<g>
<title>AddINode::add_id() const (1 samples, 0.31%)</title><rect x="1171.5" y="243.0" width="3.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.5" y="254.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.63%)</title><rect x="1175.2" y="563.0" width="7.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.2" y="574.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.63%)</title><rect x="1175.2" y="547.0" width="7.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.2" y="558.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.63%)</title><rect x="1175.2" y="531.0" width="7.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.2" y="542.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.63%)</title><rect x="1175.2" y="515.0" width="7.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.2" y="526.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.31%)</title><rect x="1175.2" y="499.0" width="3.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.2" y="510.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.31%)</title><rect x="1175.2" y="483.0" width="3.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.2" y="494.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.31%)</title><rect x="1175.2" y="467.0" width="3.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.2" y="478.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.31%)</title><rect x="1175.2" y="451.0" width="3.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.2" y="462.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.31%)</title><rect x="1175.2" y="435.0" width="3.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.2" y="446.0"></text>
</g>
<g>
<title>BlockListBuilder::set_leaders() (1 samples, 0.31%)</title><rect x="1175.2" y="419.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.2" y="430.0"></text>
</g>
<g>
<title>ciMethod::bci_block_start() (1 samples, 0.31%)</title><rect x="1175.2" y="403.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.2" y="414.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.31%)</title><rect x="1175.2" y="387.0" width="3.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.2" y="398.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.31%)</title><rect x="1175.2" y="371.0" width="3.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.2" y="382.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.31%)</title><rect x="1178.9" y="499.0" width="3.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.9" y="510.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.31%)</title><rect x="1178.9" y="483.0" width="3.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.9" y="494.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_op1(LIR_Op1*) (1 samples, 0.31%)</title><rect x="1178.9" y="467.0" width="3.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.9" y="478.0"></text>
</g>
<g>
<title>MacroAssembler::decode_heap_oop(RegisterImpl*) (1 samples, 0.31%)</title><rect x="1178.9" y="451.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.9" y="462.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.31%)</title><rect x="1182.6" y="627.0" width="3.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.6" y="638.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.31%)</title><rect x="1182.6" y="611.0" width="3.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.6" y="622.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.31%)</title><rect x="1182.6" y="595.0" width="3.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.6" y="606.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.31%)</title><rect x="1182.6" y="579.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.6" y="590.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.31%)</title><rect x="1182.6" y="563.0" width="3.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1185.6" y="574.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.31%)</title><rect x="1182.6" y="547.0" width="3.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1185.6" y="558.0"></text>
</g>
<g>
<title>is_error_reported() (1 samples, 0.31%)</title><rect x="1186.3" y="627.0" width="3.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1189.3" y="638.0"></text>
</g>
</g>
</svg>
