<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1030" onload="init(evt)" viewBox="0 0 1200 1030" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1013"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1013"> </text>
<g id="frames">
<g>
<title>all (312 samples, 100.00%)</title><rect x="10.0" y="979.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="990.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (24 samples, 7.69%)</title><rect x="10.0" y="963.0" width="90.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="974.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.32%)</title><rect x="10.0" y="947.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (1 samples, 0.32%)</title><rect x="10.0" y="931.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (23 samples, 7.37%)</title><rect x="13.8" y="947.0" width="87.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.8" y="958.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (2 samples, 0.64%)</title><rect x="13.8" y="931.0" width="7.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="16.8" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (1 samples, 0.32%)</title><rect x="13.8" y="915.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.8" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsPaused (1 samples, 0.32%)</title><rect x="17.6" y="915.0" width="3.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="20.6" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.pause (1 samples, 0.32%)</title><rect x="17.6" y="899.0" width="3.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.6" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.32%)</title><rect x="21.3" y="931.0" width="3.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="24.3" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsResumed (1 samples, 0.32%)</title><rect x="21.3" y="915.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="24.3" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (3 samples, 0.96%)</title><rect x="25.1" y="931.0" width="11.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.1" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (3 samples, 0.96%)</title><rect x="25.1" y="915.0" width="11.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="28.1" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 0.64%)</title><rect x="28.9" y="899.0" width="7.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="31.9" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$260/1352268011.accept (2 samples, 0.64%)</title><rect x="28.9" y="883.0" width="7.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="31.9" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (2 samples, 0.64%)</title><rect x="28.9" y="867.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="31.9" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.64%)</title><rect x="28.9" y="851.0" width="7.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="31.9" y="862.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.32%)</title><rect x="32.7" y="835.0" width="3.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="35.7" y="846.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.32%)</title><rect x="32.7" y="819.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="35.7" y="830.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (5 samples, 1.60%)</title><rect x="36.5" y="931.0" width="18.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="39.5" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$259/431741987.accept (4 samples, 1.28%)</title><rect x="36.5" y="915.0" width="15.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="39.5" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (4 samples, 1.28%)</title><rect x="36.5" y="899.0" width="15.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="39.5" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (1 samples, 0.32%)</title><rect x="40.3" y="883.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="43.3" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (1 samples, 0.32%)</title><rect x="40.3" y="867.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="43.3" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (1 samples, 0.32%)</title><rect x="40.3" y="851.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="43.3" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (1 samples, 0.32%)</title><rect x="40.3" y="835.0" width="3.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="43.3" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.32%)</title><rect x="40.3" y="819.0" width="3.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="43.3" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.32%)</title><rect x="40.3" y="803.0" width="3.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="43.3" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/TaskRequest.&lt;init&gt; (2 samples, 0.64%)</title><rect x="44.0" y="883.0" width="7.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="47.0" y="894.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.64%)</title><rect x="44.0" y="867.0" width="7.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="47.0" y="878.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.32%)</title><rect x="47.8" y="851.0" width="3.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="50.8" y="862.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.32%)</title><rect x="51.6" y="915.0" width="3.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="54.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 3.85%)</title><rect x="55.4" y="931.0" width="45.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="58.4" y="942.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 3.85%)</title><rect x="55.4" y="915.0" width="45.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="58.4" y="926.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (11 samples, 3.53%)</title><rect x="55.4" y="899.0" width="41.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="58.4" y="910.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.28%)</title><rect x="55.4" y="883.0" width="15.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="58.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.28%)</title><rect x="55.4" y="867.0" width="15.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="58.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.64%)</title><rect x="55.4" y="851.0" width="7.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="58.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.64%)</title><rect x="55.4" y="835.0" width="7.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="58.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.32%)</title><rect x="59.2" y="819.0" width="3.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="62.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$IdleExpiryManager.update (1 samples, 0.32%)</title><rect x="59.2" y="803.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="62.2" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.32%)</title><rect x="59.2" y="787.0" width="3.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="62.2" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.32%)</title><rect x="59.2" y="771.0" width="3.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="62.2" y="782.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.afterNodeAccess (1 samples, 0.32%)</title><rect x="59.2" y="755.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="62.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.failExpiredRequests (1 samples, 0.32%)</title><rect x="62.9" y="851.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="65.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.access$300 (1 samples, 0.32%)</title><rect x="62.9" y="835.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="65.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.removeExpiredRequests (1 samples, 0.32%)</title><rect x="62.9" y="819.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="65.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.iterator (1 samples, 0.32%)</title><rect x="62.9" y="803.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="65.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.&lt;init&gt; (1 samples, 0.32%)</title><rect x="62.9" y="787.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="65.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.maybeTriggerWakeup (1 samples, 0.32%)</title><rect x="66.7" y="851.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="69.7" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (7 samples, 2.24%)</title><rect x="70.5" y="883.0" width="26.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="73.5" y="894.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (7 samples, 2.24%)</title><rect x="70.5" y="867.0" width="26.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="73.5" y="878.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (4 samples, 1.28%)</title><rect x="70.5" y="851.0" width="15.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="73.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 1.28%)</title><rect x="70.5" y="835.0" width="15.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="73.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (3 samples, 0.96%)</title><rect x="70.5" y="819.0" width="11.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="73.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (3 samples, 0.96%)</title><rect x="70.5" y="803.0" width="11.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="73.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (3 samples, 0.96%)</title><rect x="70.5" y="787.0" width="11.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="73.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (3 samples, 0.96%)</title><rect x="70.5" y="771.0" width="11.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="73.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (3 samples, 0.96%)</title><rect x="70.5" y="755.0" width="11.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="73.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (3 samples, 0.96%)</title><rect x="70.5" y="739.0" width="11.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="73.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (3 samples, 0.96%)</title><rect x="70.5" y="723.0" width="11.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="73.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (3 samples, 0.96%)</title><rect x="70.5" y="707.0" width="11.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="73.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.32%)</title><rect x="81.9" y="819.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="84.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.32%)</title><rect x="81.9" y="803.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="84.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.32%)</title><rect x="81.9" y="787.0" width="3.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="84.9" y="798.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.32%)</title><rect x="81.9" y="771.0" width="3.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="84.9" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.64%)</title><rect x="85.6" y="851.0" width="7.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="88.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.64%)</title><rect x="85.6" y="835.0" width="7.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="88.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.32%)</title><rect x="85.6" y="819.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="88.6" y="830.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.32%)</title><rect x="85.6" y="803.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="88.6" y="814.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.32%)</title><rect x="85.6" y="787.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="88.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.toString (1 samples, 0.32%)</title><rect x="85.6" y="771.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="88.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.32%)</title><rect x="89.4" y="819.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="92.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.32%)</title><rect x="89.4" y="803.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="92.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.32%)</title><rect x="89.4" y="787.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="92.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.32%)</title><rect x="89.4" y="771.0" width="3.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="92.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.32%)</title><rect x="93.2" y="851.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="96.2" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.32%)</title><rect x="93.2" y="835.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="96.2" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.32%)</title><rect x="93.2" y="819.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="96.2" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.32%)</title><rect x="93.2" y="803.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="96.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.32%)</title><rect x="97.0" y="899.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="100.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.32%)</title><rect x="97.0" y="883.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="100.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.32%)</title><rect x="97.0" y="867.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="100.0" y="878.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.32%)</title><rect x="97.0" y="851.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="100.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$227/1450260626.accept (1 samples, 0.32%)</title><rect x="97.0" y="835.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="100.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.32%)</title><rect x="97.0" y="819.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="100.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.32%)</title><rect x="97.0" y="803.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="100.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.32%)</title><rect x="97.0" y="787.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="100.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.32%)</title><rect x="97.0" y="771.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="100.0" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.32%)</title><rect x="97.0" y="755.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="100.0" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.32%)</title><rect x="97.0" y="739.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="100.0" y="750.0"></text>
</g>
<g>
<title>java/lang/Thread.run (212 samples, 67.95%)</title><rect x="100.8" y="963.0" width="801.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="103.8" y="974.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (212 samples, 67.95%)</title><rect x="100.8" y="947.0" width="801.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="103.8" y="958.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (212 samples, 67.95%)</title><rect x="100.8" y="931.0" width="801.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="103.8" y="942.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$279/1687201657.run (203 samples, 65.06%)</title><rect x="104.6" y="915.0" width="767.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="107.6" y="926.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$279/1687201657.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$66 (203 samples, 65.06%)</title><rect x="104.6" y="899.0" width="767.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="107.6" y="910.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$66</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (203 samples, 65.06%)</title><rect x="104.6" y="883.0" width="767.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="107.6" y="894.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (198 samples, 63.46%)</title><rect x="104.6" y="867.0" width="748.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="107.6" y="878.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (50 samples, 16.03%)</title><rect x="115.9" y="851.0" width="189.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="118.9" y="862.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (50 samples, 16.03%)</title><rect x="115.9" y="835.0" width="189.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="118.9" y="846.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (50 samples, 16.03%)</title><rect x="115.9" y="819.0" width="189.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="118.9" y="830.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (50 samples, 16.03%)</title><rect x="115.9" y="803.0" width="189.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="118.9" y="814.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (50 samples, 16.03%)</title><rect x="115.9" y="787.0" width="189.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="118.9" y="798.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (50 samples, 16.03%)</title><rect x="115.9" y="771.0" width="189.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="118.9" y="782.0">com/fasterxml/jackson/dat..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (19 samples, 6.09%)</title><rect x="115.9" y="755.0" width="71.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="118.9" y="766.0">com/fast..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.32%)</title><rect x="138.6" y="739.0" width="3.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="141.6" y="750.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.32%)</title><rect x="138.6" y="723.0" width="3.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="141.6" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.32%)</title><rect x="142.4" y="739.0" width="3.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="145.4" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.32%)</title><rect x="142.4" y="723.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="145.4" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.32%)</title><rect x="142.4" y="707.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="145.4" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.32%)</title><rect x="142.4" y="691.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="145.4" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.32%)</title><rect x="142.4" y="675.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="145.4" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.32%)</title><rect x="142.4" y="659.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="145.4" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.32%)</title><rect x="142.4" y="643.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="145.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (11 samples, 3.53%)</title><rect x="146.2" y="739.0" width="41.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="149.2" y="750.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (3 samples, 0.96%)</title><rect x="176.4" y="723.0" width="11.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="179.4" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.32%)</title><rect x="176.4" y="707.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="179.4" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.32%)</title><rect x="176.4" y="691.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="179.4" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.32%)</title><rect x="176.4" y="675.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="179.4" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.32%)</title><rect x="176.4" y="659.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="179.4" y="670.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.32%)</title><rect x="176.4" y="643.0" width="3.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="179.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.64%)</title><rect x="180.2" y="707.0" width="7.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="183.2" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.32%)</title><rect x="180.2" y="691.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="183.2" y="702.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray(BasicType, int, Thread*) (1 samples, 0.32%)</title><rect x="180.2" y="675.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="183.2" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.32%)</title><rect x="184.0" y="691.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="187.0" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (31 samples, 9.94%)</title><rect x="187.8" y="755.0" width="117.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="190.8" y="766.0">com/fasterxml/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (1 samples, 0.32%)</title><rect x="187.8" y="739.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="190.8" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.64%)</title><rect x="191.5" y="739.0" width="7.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="194.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.32%)</title><rect x="195.3" y="723.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="198.3" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (3 samples, 0.96%)</title><rect x="199.1" y="739.0" width="11.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="202.1" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.64%)</title><rect x="202.9" y="723.0" width="7.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="205.9" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.64%)</title><rect x="202.9" y="707.0" width="7.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="205.9" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.64%)</title><rect x="202.9" y="691.0" width="7.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="205.9" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.32%)</title><rect x="210.4" y="739.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="213.4" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.32%)</title><rect x="210.4" y="723.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="213.4" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (23 samples, 7.37%)</title><rect x="214.2" y="739.0" width="87.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="217.2" y="750.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.64%)</title><rect x="214.2" y="723.0" width="7.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="217.2" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.32%)</title><rect x="214.2" y="707.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="217.2" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.32%)</title><rect x="214.2" y="691.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="217.2" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.32%)</title><rect x="214.2" y="675.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="217.2" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.32%)</title><rect x="214.2" y="659.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="217.2" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.32%)</title><rect x="218.0" y="707.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="221.0" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.32%)</title><rect x="218.0" y="691.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="221.0" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.32%)</title><rect x="221.8" y="723.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="224.8" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (20 samples, 6.41%)</title><rect x="225.6" y="723.0" width="75.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="228.6" y="734.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (20 samples, 6.41%)</title><rect x="225.6" y="707.0" width="75.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="228.6" y="718.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (20 samples, 6.41%)</title><rect x="225.6" y="691.0" width="75.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="228.6" y="702.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 1.92%)</title><rect x="225.6" y="675.0" width="22.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="228.6" y="686.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.32%)</title><rect x="225.6" y="659.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="228.6" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 1.28%)</title><rect x="229.4" y="659.0" width="15.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="232.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 1.28%)</title><rect x="229.4" y="643.0" width="15.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="232.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 1.28%)</title><rect x="229.4" y="627.0" width="15.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="232.4" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.32%)</title><rect x="229.4" y="611.0" width="3.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="232.4" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (3 samples, 0.96%)</title><rect x="233.1" y="611.0" width="11.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="236.1" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (3 samples, 0.96%)</title><rect x="233.1" y="595.0" width="11.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="236.1" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.32%)</title><rect x="240.7" y="579.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="243.7" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (1 samples, 0.32%)</title><rect x="240.7" y="563.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="243.7" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.32%)</title><rect x="244.5" y="659.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="247.5" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.32%)</title><rect x="244.5" y="643.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="247.5" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.32%)</title><rect x="244.5" y="627.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="247.5" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (3 samples, 0.96%)</title><rect x="248.3" y="675.0" width="11.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="251.3" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 0.96%)</title><rect x="248.3" y="659.0" width="11.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="251.3" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.96%)</title><rect x="248.3" y="643.0" width="11.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="251.3" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.96%)</title><rect x="248.3" y="627.0" width="11.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="251.3" y="638.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 0.96%)</title><rect x="248.3" y="611.0" width="11.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="251.3" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.32%)</title><rect x="259.6" y="675.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="262.6" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (5 samples, 1.60%)</title><rect x="263.4" y="675.0" width="18.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="266.4" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (5 samples, 1.60%)</title><rect x="263.4" y="659.0" width="18.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="266.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (5 samples, 1.60%)</title><rect x="263.4" y="643.0" width="18.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="266.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (5 samples, 1.60%)</title><rect x="263.4" y="627.0" width="18.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="266.4" y="638.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (5 samples, 1.60%)</title><rect x="263.4" y="611.0" width="18.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="266.4" y="622.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.32%)</title><rect x="278.5" y="595.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="281.5" y="606.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (1 samples, 0.32%)</title><rect x="278.5" y="579.0" width="3.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="281.5" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.64%)</title><rect x="282.3" y="675.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="285.3" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.64%)</title><rect x="282.3" y="659.0" width="7.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="285.3" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.64%)</title><rect x="282.3" y="643.0" width="7.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="285.3" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (3 samples, 0.96%)</title><rect x="289.9" y="675.0" width="11.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="292.9" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.32%)</title><rect x="301.2" y="739.0" width="3.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="304.2" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (140 samples, 44.87%)</title><rect x="305.0" y="851.0" width="529.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="308.0" y="862.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (29 samples, 9.29%)</title><rect x="305.0" y="835.0" width="109.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="308.0" y="846.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (2 samples, 0.64%)</title><rect x="312.6" y="819.0" width="7.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="315.6" y="830.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (25 samples, 8.01%)</title><rect x="320.1" y="819.0" width="94.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="323.1" y="830.0">org/slf4j/M..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (22 samples, 7.05%)</title><rect x="331.5" y="803.0" width="83.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="334.5" y="814.0">ch/qos/lo..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (21 samples, 6.73%)</title><rect x="335.3" y="787.0" width="79.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="338.3" y="798.0">java/util..</text>
</g>
<g>
<title>java/util/HashMap.remove (11 samples, 3.53%)</title><rect x="373.1" y="771.0" width="41.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="376.1" y="782.0">jav..</text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.32%)</title><rect x="373.1" y="755.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="376.1" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.96%)</title><rect x="376.9" y="755.0" width="11.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="379.9" y="766.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.32%)</title><rect x="376.9" y="739.0" width="3.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="379.9" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.64%)</title><rect x="380.6" y="739.0" width="7.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="383.6" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (7 samples, 2.24%)</title><rect x="388.2" y="755.0" width="26.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="391.2" y="766.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.64%)</title><rect x="414.7" y="835.0" width="7.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="417.7" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.32%)</title><rect x="418.5" y="819.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="421.5" y="830.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.32%)</title><rect x="418.5" y="803.0" width="3.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="421.5" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (18 samples, 5.77%)</title><rect x="422.2" y="835.0" width="68.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="425.2" y="846.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (18 samples, 5.77%)</title><rect x="422.2" y="819.0" width="68.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="425.2" y="830.0">com/lin..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.64%)</title><rect x="422.2" y="803.0" width="7.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="425.2" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.64%)</title><rect x="422.2" y="787.0" width="7.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="425.2" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.64%)</title><rect x="422.2" y="771.0" width="7.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="425.2" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.32%)</title><rect x="426.0" y="755.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="429.0" y="766.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.32%)</title><rect x="429.8" y="803.0" width="3.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="432.8" y="814.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.32%)</title><rect x="429.8" y="787.0" width="3.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="432.8" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (8 samples, 2.56%)</title><rect x="433.6" y="803.0" width="30.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="436.6" y="814.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 0.96%)</title><rect x="452.5" y="787.0" width="11.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="455.5" y="798.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.64%)</title><rect x="452.5" y="771.0" width="7.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="455.5" y="782.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.32%)</title><rect x="452.5" y="755.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="455.5" y="766.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.32%)</title><rect x="452.5" y="739.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="455.5" y="750.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.32%)</title><rect x="452.5" y="723.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="455.5" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.32%)</title><rect x="452.5" y="707.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="455.5" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.32%)</title><rect x="452.5" y="691.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="455.5" y="702.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.32%)</title><rect x="452.5" y="675.0" width="3.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="455.5" y="686.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.32%)</title><rect x="452.5" y="659.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="455.5" y="670.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.32%)</title><rect x="456.3" y="755.0" width="3.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="459.3" y="766.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.32%)</title><rect x="460.1" y="771.0" width="3.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="463.1" y="782.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.32%)</title><rect x="463.8" y="803.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="466.8" y="814.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.32%)</title><rect x="463.8" y="787.0" width="3.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="466.8" y="798.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.32%)</title><rect x="463.8" y="771.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="466.8" y="782.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (6 samples, 1.92%)</title><rect x="467.6" y="803.0" width="22.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="470.6" y="814.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (5 samples, 1.60%)</title><rect x="471.4" y="787.0" width="18.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="474.4" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.32%)</title><rect x="471.4" y="771.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="474.4" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.32%)</title><rect x="471.4" y="755.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="474.4" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.32%)</title><rect x="471.4" y="739.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="474.4" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.32%)</title><rect x="471.4" y="723.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="474.4" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.32%)</title><rect x="471.4" y="707.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="474.4" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (4 samples, 1.28%)</title><rect x="475.2" y="771.0" width="15.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="478.2" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 1.28%)</title><rect x="475.2" y="755.0" width="15.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="478.2" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 1.28%)</title><rect x="475.2" y="739.0" width="15.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="478.2" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.32%)</title><rect x="486.5" y="723.0" width="3.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="489.5" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (82 samples, 26.28%)</title><rect x="490.3" y="835.0" width="310.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="493.3" y="846.0">com/linecorp/decaton/processor/runtime/int..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (80 samples, 25.64%)</title><rect x="497.9" y="819.0" width="302.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="500.9" y="830.0">com/linecorp/decaton/processor/runtime/in..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$206/306540865.process (63 samples, 20.19%)</title><rect x="516.8" y="803.0" width="238.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="519.8" y="814.0">com/linecorp/decaton/benchmark/D..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (63 samples, 20.19%)</title><rect x="516.8" y="787.0" width="238.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="519.8" y="798.0">com/linecorp/decaton/benchmark/D..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (63 samples, 20.19%)</title><rect x="516.8" y="771.0" width="238.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="519.8" y="782.0">com/linecorp/decaton/benchmark/R..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.64%)</title><rect x="520.6" y="755.0" width="7.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="523.6" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.64%)</title><rect x="520.6" y="739.0" width="7.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="523.6" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.64%)</title><rect x="520.6" y="723.0" width="7.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="523.6" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.32%)</title><rect x="524.4" y="707.0" width="3.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="527.4" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (60 samples, 19.23%)</title><rect x="528.1" y="755.0" width="227.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="531.1" y="766.0">com/linecorp/decaton/benchmark..</text>
</g>
<g>
<title>java/lang/Thread.sleep (58 samples, 18.59%)</title><rect x="528.1" y="739.0" width="219.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="531.1" y="750.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (47 samples, 15.06%)</title><rect x="550.8" y="723.0" width="177.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="553.8" y="734.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.96%)</title><rect x="562.2" y="707.0" width="11.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="565.2" y="718.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.32%)</title><rect x="573.5" y="707.0" width="3.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="576.5" y="718.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.96%)</title><rect x="577.3" y="707.0" width="11.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="580.3" y="718.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.32%)</title><rect x="584.9" y="691.0" width="3.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="587.9" y="702.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.32%)</title><rect x="588.7" y="707.0" width="3.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="591.7" y="718.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (36 samples, 11.54%)</title><rect x="592.4" y="707.0" width="136.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="595.4" y="718.0">os::sleep(Thread*..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.96%)</title><rect x="634.0" y="691.0" width="11.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="637.0" y="702.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.64%)</title><rect x="637.8" y="675.0" width="7.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="640.8" y="686.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (15 samples, 4.81%)</title><rect x="645.4" y="691.0" width="56.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="648.4" y="702.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.32%)</title><rect x="702.1" y="691.0" width="3.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="705.1" y="702.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (5 samples, 1.60%)</title><rect x="705.9" y="691.0" width="18.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="708.9" y="702.0"></text>
</g>
<g>
<title>pthread_cond_destroy@@GLIBC_2.3.2 (1 samples, 0.32%)</title><rect x="724.8" y="691.0" width="3.8" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="727.8" y="702.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.32%)</title><rect x="728.6" y="723.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="731.6" y="734.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.32%)</title><rect x="732.4" y="723.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="735.4" y="734.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.64%)</title><rect x="736.2" y="723.0" width="7.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="739.2" y="734.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (1 samples, 0.32%)</title><rect x="743.7" y="723.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="746.7" y="734.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.64%)</title><rect x="747.5" y="739.0" width="7.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="750.5" y="750.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.64%)</title><rect x="747.5" y="723.0" width="7.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="750.5" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (6 samples, 1.92%)</title><rect x="755.1" y="803.0" width="22.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="758.1" y="814.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.64%)</title><rect x="777.8" y="803.0" width="7.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="780.8" y="814.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.64%)</title><rect x="777.8" y="787.0" width="7.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="780.8" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.32%)</title><rect x="785.3" y="803.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="788.3" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.32%)</title><rect x="785.3" y="787.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="788.3" y="798.0"></text>
</g>
<g>
<title>java/util/ArrayList.isEmpty (1 samples, 0.32%)</title><rect x="785.3" y="771.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="788.3" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.32%)</title><rect x="789.1" y="803.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="792.1" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.32%)</title><rect x="789.1" y="787.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="792.1" y="798.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.32%)</title><rect x="789.1" y="771.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="792.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (2 samples, 0.64%)</title><rect x="792.9" y="803.0" width="7.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="795.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (9 samples, 2.88%)</title><rect x="800.4" y="835.0" width="34.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="803.4" y="846.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (9 samples, 2.88%)</title><rect x="800.4" y="819.0" width="34.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="803.4" y="830.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.96%)</title><rect x="823.1" y="803.0" width="11.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="826.1" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$289/1087942083.accept (3 samples, 0.96%)</title><rect x="823.1" y="787.0" width="11.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="826.1" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$61 (3 samples, 0.96%)</title><rect x="823.1" y="771.0" width="11.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="826.1" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.32%)</title><rect x="823.1" y="755.0" width="3.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="826.1" y="766.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.32%)</title><rect x="823.1" y="739.0" width="3.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="826.1" y="750.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.32%)</title><rect x="823.1" y="723.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="826.1" y="734.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (2 samples, 0.64%)</title><rect x="826.9" y="755.0" width="7.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="829.9" y="766.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (2 samples, 0.64%)</title><rect x="826.9" y="739.0" width="7.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="829.9" y="750.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.32%)</title><rect x="830.7" y="723.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="833.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 1.60%)</title><rect x="834.5" y="851.0" width="18.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="837.5" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 1.60%)</title><rect x="834.5" y="835.0" width="18.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="837.5" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 1.28%)</title><rect x="838.3" y="819.0" width="15.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="841.3" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$290/2055698687.accept (4 samples, 1.28%)</title><rect x="838.3" y="803.0" width="15.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="841.3" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$60 (4 samples, 1.28%)</title><rect x="838.3" y="787.0" width="15.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="841.3" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$277/1608477091.complete (4 samples, 1.28%)</title><rect x="838.3" y="771.0" width="15.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="841.3" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$37 (4 samples, 1.28%)</title><rect x="838.3" y="755.0" width="15.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="841.3" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$276/639405179.complete (4 samples, 1.28%)</title><rect x="838.3" y="739.0" width="15.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="841.3" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$65 (4 samples, 1.28%)</title><rect x="838.3" y="723.0" width="15.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="841.3" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (4 samples, 1.28%)</title><rect x="838.3" y="707.0" width="15.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="841.3" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (4 samples, 1.28%)</title><rect x="838.3" y="691.0" width="15.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="841.3" y="702.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (4 samples, 1.28%)</title><rect x="838.3" y="675.0" width="15.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="841.3" y="686.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (4 samples, 1.28%)</title><rect x="838.3" y="659.0" width="15.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="841.3" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (5 samples, 1.60%)</title><rect x="853.4" y="867.0" width="18.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="856.4" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.64%)</title><rect x="872.3" y="915.0" width="7.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="875.3" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.64%)</title><rect x="872.3" y="899.0" width="7.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="875.3" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.64%)</title><rect x="872.3" y="883.0" width="7.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="875.3" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.64%)</title><rect x="872.3" y="867.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="875.3" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (6 samples, 1.92%)</title><rect x="879.9" y="915.0" width="22.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="882.9" y="926.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (4 samples, 1.28%)</title><rect x="887.4" y="899.0" width="15.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="890.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.32%)</title><rect x="898.8" y="883.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="901.8" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.32%)</title><rect x="898.8" y="867.0" width="3.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="901.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.32%)</title><rect x="898.8" y="851.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="901.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.64%)</title><rect x="902.6" y="963.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="905.6" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.32%)</title><rect x="906.3" y="947.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="909.3" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.32%)</title><rect x="906.3" y="931.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="909.3" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.32%)</title><rect x="906.3" y="915.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="909.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleTimedOutRequests (1 samples, 0.32%)</title><rect x="906.3" y="899.0" width="3.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="909.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.nodesWithTimedOutRequests (1 samples, 0.32%)</title><rect x="906.3" y="883.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="909.3" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySet.iterator (1 samples, 0.32%)</title><rect x="906.3" y="867.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="909.3" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap$EntryIterator.&lt;init&gt; (1 samples, 0.32%)</title><rect x="906.3" y="851.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="909.3" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.32%)</title><rect x="906.3" y="835.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="909.3" y="846.0"></text>
</g>
<g>
<title>start_thread (74 samples, 23.72%)</title><rect x="910.1" y="963.0" width="279.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="913.1" y="974.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (74 samples, 23.72%)</title><rect x="910.1" y="947.0" width="279.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="913.1" y="958.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (22 samples, 7.05%)</title><rect x="910.1" y="931.0" width="83.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="913.1" y="942.0">GangWorke..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (5 samples, 1.60%)</title><rect x="910.1" y="915.0" width="18.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="913.1" y="926.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 1.60%)</title><rect x="910.1" y="899.0" width="18.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="913.1" y="910.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.32%)</title><rect x="910.1" y="883.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="913.1" y="894.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 1.28%)</title><rect x="913.9" y="883.0" width="15.1" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="916.9" y="894.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (17 samples, 5.45%)</title><rect x="929.0" y="915.0" width="64.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="932.0" y="926.0">G1ParTa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (16 samples, 5.13%)</title><rect x="929.0" y="899.0" width="60.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="932.0" y="910.0">G1ParE..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (15 samples, 4.81%)</title><rect x="929.0" y="883.0" width="56.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="932.0" y="894.0">G1ParS..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (6 samples, 1.92%)</title><rect x="951.7" y="867.0" width="22.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="954.7" y="878.0">G..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (2 samples, 0.64%)</title><rect x="966.9" y="851.0" width="7.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="969.9" y="862.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.32%)</title><rect x="970.6" y="835.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="973.6" y="846.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (3 samples, 0.96%)</title><rect x="974.4" y="867.0" width="11.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="977.4" y="878.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.32%)</title><rect x="985.8" y="883.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="988.8" y="894.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.32%)</title><rect x="989.6" y="899.0" width="3.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="992.6" y="910.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.32%)</title><rect x="989.6" y="883.0" width="3.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="992.6" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (1 samples, 0.32%)</title><rect x="989.6" y="867.0" width="3.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="992.6" y="878.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (1 samples, 0.32%)</title><rect x="989.6" y="851.0" width="3.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="992.6" y="862.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.32%)</title><rect x="989.6" y="835.0" width="3.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="992.6" y="846.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (1 samples, 0.32%)</title><rect x="989.6" y="819.0" width="3.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="992.6" y="830.0"></text>
</g>
<g>
<title>JavaThread::run() (51 samples, 16.35%)</title><rect x="993.3" y="931.0" width="192.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="996.3" y="942.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (51 samples, 16.35%)</title><rect x="993.3" y="915.0" width="192.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="996.3" y="926.0">JavaThread::thread_main_i..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (51 samples, 16.35%)</title><rect x="993.3" y="899.0" width="192.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="996.3" y="910.0">CompileBroker::compiler_t..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (50 samples, 16.03%)</title><rect x="993.3" y="883.0" width="189.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="996.3" y="894.0">CompileBroker::invoke_com..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (49 samples, 15.71%)</title><rect x="993.3" y="867.0" width="185.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="996.3" y="878.0">C2Compiler::compile_meth..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (49 samples, 15.71%)</title><rect x="993.3" y="851.0" width="185.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="996.3" y="862.0">Compile::Compile(ciEnv*,..</text>
</g>
<g>
<title>Compile::Code_Gen() (21 samples, 6.73%)</title><rect x="993.3" y="835.0" width="79.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="996.3" y="846.0">Compile::..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.32%)</title><rect x="993.3" y="819.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="996.3" y="830.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.32%)</title><rect x="993.3" y="803.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="996.3" y="814.0"></text>
</g>
<g>
<title>Dict::operator[](void const*) const (1 samples, 0.32%)</title><rect x="993.3" y="787.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="996.3" y="798.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 1.28%)</title><rect x="997.1" y="819.0" width="15.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1000.1" y="830.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 1.28%)</title><rect x="997.1" y="803.0" width="15.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1000.1" y="814.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.32%)</title><rect x="1008.5" y="787.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1011.5" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.32%)</title><rect x="1012.2" y="819.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1015.2" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.32%)</title><rect x="1012.2" y="803.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1015.2" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.32%)</title><rect x="1012.2" y="787.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1015.2" y="798.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.32%)</title><rect x="1012.2" y="771.0" width="3.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1015.2" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (15 samples, 4.81%)</title><rect x="1016.0" y="819.0" width="56.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1019.0" y="830.0">PhaseC..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.32%)</title><rect x="1016.0" y="803.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1019.0" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.32%)</title><rect x="1019.8" y="803.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1022.8" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.32%)</title><rect x="1023.6" y="803.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1026.6" y="814.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.32%)</title><rect x="1023.6" y="787.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1026.6" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 0.64%)</title><rect x="1027.4" y="803.0" width="7.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1030.4" y="814.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.32%)</title><rect x="1027.4" y="787.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1030.4" y="798.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.32%)</title><rect x="1027.4" y="771.0" width="3.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1030.4" y="782.0"></text>
</g>
<g>
<title>decodeHeapOop_not_nullNode::rule() const (1 samples, 0.32%)</title><rect x="1031.2" y="787.0" width="3.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1034.2" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 0.96%)</title><rect x="1034.9" y="803.0" width="11.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1037.9" y="814.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.32%)</title><rect x="1042.5" y="787.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1045.5" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.32%)</title><rect x="1046.3" y="803.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1049.3" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.32%)</title><rect x="1046.3" y="787.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1049.3" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.32%)</title><rect x="1050.1" y="803.0" width="3.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1053.1" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.64%)</title><rect x="1053.8" y="803.0" width="7.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1056.8" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.32%)</title><rect x="1057.6" y="787.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1060.6" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.32%)</title><rect x="1057.6" y="771.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1060.6" y="782.0"></text>
</g>
<g>
<title>Node_Array::remove(unsigned int) (1 samples, 0.32%)</title><rect x="1057.6" y="755.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1060.6" y="766.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.32%)</title><rect x="1061.4" y="803.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1064.4" y="814.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.32%)</title><rect x="1061.4" y="787.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1064.4" y="798.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.64%)</title><rect x="1065.2" y="803.0" width="7.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1068.2" y="814.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.32%)</title><rect x="1065.2" y="787.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1068.2" y="798.0"></text>
</g>
<g>
<title>PhaseLive::getfreeset() (1 samples, 0.32%)</title><rect x="1065.2" y="771.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1068.2" y="782.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int, Arena*) (1 samples, 0.32%)</title><rect x="1065.2" y="755.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1068.2" y="766.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.32%)</title><rect x="1065.2" y="739.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1068.2" y="750.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.32%)</title><rect x="1065.2" y="723.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1068.2" y="734.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.32%)</title><rect x="1065.2" y="707.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1068.2" y="718.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.32%)</title><rect x="1065.2" y="691.0" width="3.8" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1068.2" y="702.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.32%)</title><rect x="1069.0" y="787.0" width="3.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1072.0" y="798.0"></text>
</g>
<g>
<title>Compile::Optimize() (22 samples, 7.05%)</title><rect x="1072.8" y="835.0" width="83.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1075.8" y="846.0">Compile::..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.32%)</title><rect x="1072.8" y="819.0" width="3.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1075.8" y="830.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.32%)</title><rect x="1072.8" y="803.0" width="3.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1075.8" y="814.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.32%)</title><rect x="1072.8" y="787.0" width="3.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1075.8" y="798.0"></text>
</g>
<g>
<title>ConNode::make(Compile*, Type const*) (1 samples, 0.32%)</title><rect x="1072.8" y="771.0" width="3.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1075.8" y="782.0"></text>
</g>
<g>
<title>ConNode::ConNode(Type const*) (1 samples, 0.32%)</title><rect x="1072.8" y="755.0" width="3.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1075.8" y="766.0"></text>
</g>
<g>
<title>TypeNarrowOop::remove_speculative() const (1 samples, 0.32%)</title><rect x="1072.8" y="739.0" width="3.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1075.8" y="750.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.32%)</title><rect x="1072.8" y="723.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1075.8" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (16 samples, 5.13%)</title><rect x="1076.5" y="819.0" width="60.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1079.5" y="830.0">PhaseI..</text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.32%)</title><rect x="1076.5" y="803.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1079.5" y="814.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.32%)</title><rect x="1080.3" y="803.0" width="3.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1083.3" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.32%)</title><rect x="1084.1" y="803.0" width="3.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1087.1" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (10 samples, 3.21%)</title><rect x="1087.9" y="803.0" width="37.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1090.9" y="814.0">Pha..</text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.32%)</title><rect x="1087.9" y="787.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1090.9" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (9 samples, 2.88%)</title><rect x="1091.7" y="787.0" width="34.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1094.7" y="798.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.32%)</title><rect x="1091.7" y="771.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1094.7" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (8 samples, 2.56%)</title><rect x="1095.4" y="771.0" width="30.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1098.4" y="782.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 0.96%)</title><rect x="1114.4" y="755.0" width="11.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1117.4" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.32%)</title><rect x="1125.7" y="803.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1128.7" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.32%)</title><rect x="1129.5" y="803.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1132.5" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.32%)</title><rect x="1129.5" y="787.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1132.5" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.32%)</title><rect x="1129.5" y="771.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1132.5" y="782.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.32%)</title><rect x="1129.5" y="755.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1132.5" y="766.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.32%)</title><rect x="1129.5" y="739.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1132.5" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.32%)</title><rect x="1133.3" y="803.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1136.3" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.32%)</title><rect x="1133.3" y="787.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1136.3" y="798.0"></text>
</g>
<g>
<title>ProjNode::Value(PhaseTransform*) const (1 samples, 0.32%)</title><rect x="1133.3" y="771.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1136.3" y="782.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.32%)</title><rect x="1133.3" y="755.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1136.3" y="766.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.32%)</title><rect x="1133.3" y="739.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1136.3" y="750.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.32%)</title><rect x="1133.3" y="723.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1136.3" y="734.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.32%)</title><rect x="1133.3" y="707.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1136.3" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 1.60%)</title><rect x="1137.1" y="819.0" width="18.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1140.1" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 1.60%)</title><rect x="1137.1" y="803.0" width="18.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1140.1" y="814.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.32%)</title><rect x="1137.1" y="787.0" width="3.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1140.1" y="798.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.32%)</title><rect x="1137.1" y="771.0" width="3.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1140.1" y="782.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.32%)</title><rect x="1137.1" y="755.0" width="3.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1140.1" y="766.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.32%)</title><rect x="1137.1" y="739.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1140.1" y="750.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.32%)</title><rect x="1137.1" y="723.0" width="3.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1140.1" y="734.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.32%)</title><rect x="1137.1" y="707.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1140.1" y="718.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.32%)</title><rect x="1137.1" y="691.0" width="3.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1140.1" y="702.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.32%)</title><rect x="1137.1" y="675.0" width="3.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1140.1" y="686.0"></text>
</g>
<g>
<title>TypeOopPtr::speculative() const (1 samples, 0.32%)</title><rect x="1137.1" y="659.0" width="3.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1140.1" y="670.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.32%)</title><rect x="1140.8" y="787.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.8" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (3 samples, 0.96%)</title><rect x="1144.6" y="787.0" width="11.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1147.6" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.60%)</title><rect x="1156.0" y="835.0" width="18.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.0" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.60%)</title><rect x="1156.0" y="819.0" width="18.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.0" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.60%)</title><rect x="1156.0" y="803.0" width="18.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1159.0" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.60%)</title><rect x="1156.0" y="787.0" width="18.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1159.0" y="798.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.32%)</title><rect x="1156.0" y="771.0" width="3.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.0" y="782.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.32%)</title><rect x="1156.0" y="755.0" width="3.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1159.0" y="766.0"></text>
</g>
<g>
<title>GraphKit::gen_subtype_check(Node*, Node*) (1 samples, 0.32%)</title><rect x="1156.0" y="739.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.0" y="750.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.32%)</title><rect x="1156.0" y="723.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.0" y="734.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.32%)</title><rect x="1156.0" y="707.0" width="3.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1159.0" y="718.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.32%)</title><rect x="1156.0" y="691.0" width="3.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.0" y="702.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.32%)</title><rect x="1156.0" y="675.0" width="3.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.0" y="686.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.32%)</title><rect x="1156.0" y="659.0" width="3.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.28%)</title><rect x="1159.7" y="771.0" width="15.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1162.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.28%)</title><rect x="1159.7" y="755.0" width="15.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.7" y="766.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.32%)</title><rect x="1159.7" y="739.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.7" y="750.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.32%)</title><rect x="1159.7" y="723.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.7" y="734.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.32%)</title><rect x="1159.7" y="707.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.7" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.32%)</title><rect x="1159.7" y="691.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.7" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.32%)</title><rect x="1159.7" y="675.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.7" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.32%)</title><rect x="1159.7" y="659.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.7" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.32%)</title><rect x="1159.7" y="643.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1162.7" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.32%)</title><rect x="1159.7" y="627.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.7" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.32%)</title><rect x="1159.7" y="611.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.7" y="622.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.32%)</title><rect x="1159.7" y="595.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.7" y="606.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.32%)</title><rect x="1159.7" y="579.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.7" y="590.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.32%)</title><rect x="1159.7" y="563.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.7" y="574.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.32%)</title><rect x="1159.7" y="547.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.7" y="558.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.32%)</title><rect x="1159.7" y="531.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.7" y="542.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.32%)</title><rect x="1159.7" y="515.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.7" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.96%)</title><rect x="1163.5" y="739.0" width="11.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.5" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.96%)</title><rect x="1163.5" y="723.0" width="11.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.5" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.96%)</title><rect x="1163.5" y="707.0" width="11.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.5" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.96%)</title><rect x="1163.5" y="691.0" width="11.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.96%)</title><rect x="1163.5" y="675.0" width="11.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.5" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.96%)</title><rect x="1163.5" y="659.0" width="11.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.5" y="670.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.96%)</title><rect x="1163.5" y="643.0" width="11.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.5" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.64%)</title><rect x="1163.5" y="627.0" width="7.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.5" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.64%)</title><rect x="1163.5" y="611.0" width="7.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.64%)</title><rect x="1163.5" y="595.0" width="7.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.64%)</title><rect x="1163.5" y="579.0" width="7.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.64%)</title><rect x="1163.5" y="563.0" width="7.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.64%)</title><rect x="1163.5" y="547.0" width="7.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.5" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.64%)</title><rect x="1163.5" y="531.0" width="7.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.5" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.64%)</title><rect x="1163.5" y="515.0" width="7.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.64%)</title><rect x="1163.5" y="499.0" width="7.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.64%)</title><rect x="1163.5" y="483.0" width="7.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.64%)</title><rect x="1163.5" y="467.0" width="7.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.64%)</title><rect x="1163.5" y="451.0" width="7.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.5" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.64%)</title><rect x="1163.5" y="435.0" width="7.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.5" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.64%)</title><rect x="1163.5" y="419.0" width="7.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.64%)</title><rect x="1163.5" y="403.0" width="7.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1166.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.64%)</title><rect x="1163.5" y="387.0" width="7.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.64%)</title><rect x="1163.5" y="371.0" width="7.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.64%)</title><rect x="1163.5" y="355.0" width="7.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.5" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.64%)</title><rect x="1163.5" y="339.0" width="7.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.5" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.64%)</title><rect x="1163.5" y="323.0" width="7.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.64%)</title><rect x="1163.5" y="307.0" width="7.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.5" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.64%)</title><rect x="1163.5" y="291.0" width="7.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.5" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.64%)</title><rect x="1163.5" y="275.0" width="7.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.64%)</title><rect x="1163.5" y="259.0" width="7.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.5" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.64%)</title><rect x="1163.5" y="243.0" width="7.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.5" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.64%)</title><rect x="1163.5" y="227.0" width="7.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.5" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.64%)</title><rect x="1163.5" y="211.0" width="7.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.5" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.64%)</title><rect x="1163.5" y="195.0" width="7.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.5" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.64%)</title><rect x="1163.5" y="179.0" width="7.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.5" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.64%)</title><rect x="1163.5" y="163.0" width="7.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.5" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.64%)</title><rect x="1163.5" y="147.0" width="7.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.5" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.64%)</title><rect x="1163.5" y="131.0" width="7.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.5" y="142.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.32%)</title><rect x="1163.5" y="115.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.5" y="126.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.32%)</title><rect x="1163.5" y="99.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.5" y="110.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.32%)</title><rect x="1163.5" y="83.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.5" y="94.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.32%)</title><rect x="1163.5" y="67.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.5" y="78.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.32%)</title><rect x="1167.3" y="115.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.3" y="126.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.32%)</title><rect x="1167.3" y="99.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.3" y="110.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.32%)</title><rect x="1167.3" y="83.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.3" y="94.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.32%)</title><rect x="1167.3" y="67.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.3" y="78.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.32%)</title><rect x="1167.3" y="51.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.3" y="62.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.32%)</title><rect x="1167.3" y="35.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.3" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1171.1" y="627.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.1" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1171.1" y="611.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.1" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1171.1" y="595.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.1" y="606.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.32%)</title><rect x="1171.1" y="579.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.1" y="590.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.32%)</title><rect x="1171.1" y="563.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.1" y="574.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.32%)</title><rect x="1171.1" y="547.0" width="3.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1174.1" y="558.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.32%)</title><rect x="1174.9" y="835.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.9" y="846.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.32%)</title><rect x="1178.7" y="867.0" width="3.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.7" y="878.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.32%)</title><rect x="1178.7" y="851.0" width="3.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.7" y="862.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.32%)</title><rect x="1178.7" y="835.0" width="3.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.7" y="846.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.32%)</title><rect x="1178.7" y="819.0" width="3.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.7" y="830.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.32%)</title><rect x="1178.7" y="803.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.7" y="814.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.32%)</title><rect x="1178.7" y="787.0" width="3.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.7" y="798.0"></text>
</g>
<g>
<title>LIR_Assembler::append_code_stub(CodeStub*) (1 samples, 0.32%)</title><rect x="1178.7" y="771.0" width="3.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.7" y="782.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.32%)</title><rect x="1182.4" y="883.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.4" y="894.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.32%)</title><rect x="1182.4" y="867.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.4" y="878.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.32%)</title><rect x="1182.4" y="851.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.4" y="862.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.32%)</title><rect x="1186.2" y="931.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.2" y="942.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.32%)</title><rect x="1186.2" y="915.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.2" y="926.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.32%)</title><rect x="1186.2" y="899.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.2" y="910.0"></text>
</g>
</g>
</svg>
