<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1366" onload="init(evt)" viewBox="0 0 1200 1366" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1349"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1349"> </text>
<g id="frames">
<g>
<title>all (1,284 samples, 100.00%)</title><rect x="10.0" y="1315.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1326.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (281 samples, 21.88%)</title><rect x="10.0" y="1299.0" width="258.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1310.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (280 samples, 21.81%)</title><rect x="10.9" y="1283.0" width="257.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.9" y="1294.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (3 samples, 0.23%)</title><rect x="11.8" y="1267.0" width="2.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.8" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (3 samples, 0.23%)</title><rect x="11.8" y="1251.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.8" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.16%)</title><rect x="12.8" y="1235.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.8" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.16%)</title><rect x="12.8" y="1219.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.8" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.16%)</title><rect x="12.8" y="1203.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.8" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.16%)</title><rect x="12.8" y="1187.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.8" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.16%)</title><rect x="12.8" y="1171.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.8" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="12.8" y="1155.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.8" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.08%)</title><rect x="13.7" y="1155.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.7" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.08%)</title><rect x="13.7" y="1139.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.7" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.08%)</title><rect x="13.7" y="1123.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.7" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/Sink.end (1 samples, 0.08%)</title><rect x="13.7" y="1107.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.7" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.08%)</title><rect x="14.6" y="1267.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.6" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.08%)</title><rect x="14.6" y="1251.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.6" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (9 samples, 0.70%)</title><rect x="15.5" y="1267.0" width="8.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="18.5" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (9 samples, 0.70%)</title><rect x="15.5" y="1251.0" width="8.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.5" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (9 samples, 0.70%)</title><rect x="15.5" y="1235.0" width="8.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.5" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$260/1035076264.accept (9 samples, 0.70%)</title><rect x="15.5" y="1219.0" width="8.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="18.5" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (9 samples, 0.70%)</title><rect x="15.5" y="1203.0" width="8.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.5" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (8 samples, 0.62%)</title><rect x="16.4" y="1187.0" width="7.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.4" y="1198.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (7 samples, 0.55%)</title><rect x="17.4" y="1171.0" width="6.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="20.4" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (1 samples, 0.08%)</title><rect x="23.8" y="1267.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.8" y="1278.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.08%)</title><rect x="23.8" y="1251.0" width="0.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="26.8" y="1262.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="23.8" y="1235.0" width="0.9" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="26.8" y="1246.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (204 samples, 15.89%)</title><rect x="24.7" y="1267.0" width="187.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="27.7" y="1278.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$259/1919132017.accept (198 samples, 15.42%)</title><rect x="25.6" y="1251.0" width="182.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="28.6" y="1262.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (198 samples, 15.42%)</title><rect x="25.6" y="1235.0" width="182.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="28.6" y="1246.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (170 samples, 13.24%)</title><rect x="25.6" y="1219.0" width="156.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.6" y="1230.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (170 samples, 13.24%)</title><rect x="25.6" y="1203.0" width="156.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="28.6" y="1214.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (170 samples, 13.24%)</title><rect x="25.6" y="1187.0" width="156.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.6" y="1198.0">com/linecorp/decaton..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (170 samples, 13.24%)</title><rect x="25.6" y="1171.0" width="156.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="28.6" y="1182.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (170 samples, 13.24%)</title><rect x="25.6" y="1155.0" width="156.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="28.6" y="1166.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (170 samples, 13.24%)</title><rect x="25.6" y="1139.0" width="156.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.6" y="1150.0">java/util/concurrent..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.08%)</title><rect x="58.7" y="1123.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="61.7" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (114 samples, 8.88%)</title><rect x="59.6" y="1123.0" width="104.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="62.6" y="1134.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (28 samples, 2.18%)</title><rect x="59.6" y="1107.0" width="25.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="62.6" y="1118.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (28 samples, 2.18%)</title><rect x="59.6" y="1091.0" width="25.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="62.6" y="1102.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (28 samples, 2.18%)</title><rect x="59.6" y="1075.0" width="25.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="62.6" y="1086.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.47%)</title><rect x="85.4" y="1107.0" width="5.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="88.4" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (6 samples, 0.47%)</title><rect x="85.4" y="1091.0" width="5.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="88.4" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.16%)</title><rect x="86.3" y="1075.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="89.3" y="1086.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (2 samples, 0.16%)</title><rect x="86.3" y="1059.0" width="1.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="89.3" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.23%)</title><rect x="88.1" y="1075.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="91.1" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (80 samples, 6.23%)</title><rect x="90.9" y="1107.0" width="73.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="93.9" y="1118.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (80 samples, 6.23%)</title><rect x="90.9" y="1091.0" width="73.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="93.9" y="1102.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.08%)</title><rect x="90.9" y="1075.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="93.9" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (77 samples, 6.00%)</title><rect x="91.8" y="1075.0" width="70.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="94.8" y="1086.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (77 samples, 6.00%)</title><rect x="91.8" y="1059.0" width="70.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="94.8" y="1070.0">java/uti..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (77 samples, 6.00%)</title><rect x="91.8" y="1043.0" width="70.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="94.8" y="1054.0">sun/misc..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.08%)</title><rect x="92.7" y="1027.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="95.7" y="1038.0"></text>
</g>
<g>
<title>Unsafe_Unpark (65 samples, 5.06%)</title><rect x="93.6" y="1027.0" width="59.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="96.6" y="1038.0">Unsafe..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.16%)</title><rect x="94.5" y="1011.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="97.5" y="1022.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.16%)</title><rect x="96.4" y="1011.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="99.4" y="1022.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="98.2" y="1011.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="101.2" y="1022.0"></text>
</g>
<g>
<title>__pthread_cond_signal (43 samples, 3.35%)</title><rect x="99.1" y="1011.0" width="39.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="102.1" y="1022.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (5 samples, 0.39%)</title><rect x="138.7" y="1011.0" width="4.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="141.7" y="1022.0"></text>
</g>
<g>
<title>pthread_mutex_lock (11 samples, 0.86%)</title><rect x="143.3" y="1011.0" width="10.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="146.3" y="1022.0"></text>
</g>
<g>
<title>__lll_unlock_wake (8 samples, 0.62%)</title><rect x="153.4" y="1027.0" width="7.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="156.4" y="1038.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.08%)</title><rect x="160.7" y="1027.0" width="0.9" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="163.7" y="1038.0"></text>
</g>
<g>
<title>_init (1 samples, 0.08%)</title><rect x="161.6" y="1027.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="164.6" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.16%)</title><rect x="162.6" y="1075.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="165.6" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (13 samples, 1.01%)</title><rect x="164.4" y="1123.0" width="11.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="167.4" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (13 samples, 1.01%)</title><rect x="164.4" y="1107.0" width="11.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="167.4" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (13 samples, 1.01%)</title><rect x="164.4" y="1091.0" width="11.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="167.4" y="1102.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="175.4" y="1075.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="178.4" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.08%)</title><rect x="175.4" y="1059.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="178.4" y="1070.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="175.4" y="1043.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="178.4" y="1054.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.08%)</title><rect x="175.4" y="1027.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="178.4" y="1038.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.08%)</title><rect x="175.4" y="1011.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="178.4" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.31%)</title><rect x="176.3" y="1123.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="179.3" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.31%)</title><rect x="176.3" y="1107.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="179.3" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.08%)</title><rect x="176.3" y="1091.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="179.3" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.08%)</title><rect x="176.3" y="1075.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="179.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (3 samples, 0.23%)</title><rect x="177.3" y="1091.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="180.3" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (2 samples, 0.16%)</title><rect x="178.2" y="1075.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="181.2" y="1086.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.16%)</title><rect x="180.0" y="1123.0" width="1.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="183.0" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (3 samples, 0.23%)</title><rect x="181.9" y="1219.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="184.9" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (3 samples, 0.23%)</title><rect x="181.9" y="1203.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="184.9" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (1 samples, 0.08%)</title><rect x="184.6" y="1219.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="187.6" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="184.6" y="1203.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="187.6" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="184.6" y="1187.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="187.6" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/TaskRequest.&lt;init&gt; (24 samples, 1.87%)</title><rect x="185.5" y="1219.0" width="22.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="188.5" y="1230.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (24 samples, 1.87%)</title><rect x="185.5" y="1203.0" width="22.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="188.5" y="1214.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 0.31%)</title><rect x="201.2" y="1187.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="204.2" y="1198.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.08%)</title><rect x="201.2" y="1171.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="204.2" y="1182.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.23%)</title><rect x="202.1" y="1171.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="205.1" y="1182.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.23%)</title><rect x="204.8" y="1187.0" width="2.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="207.8" y="1198.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="207.6" y="1251.0" width="0.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="210.6" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.08%)</title><rect x="208.5" y="1251.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="211.5" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.08%)</title><rect x="208.5" y="1235.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="211.5" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (3 samples, 0.23%)</title><rect x="209.4" y="1251.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="212.4" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (3 samples, 0.23%)</title><rect x="209.4" y="1235.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="212.4" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.23%)</title><rect x="209.4" y="1219.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="212.4" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.23%)</title><rect x="209.4" y="1203.0" width="2.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="212.4" y="1214.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (2 samples, 0.16%)</title><rect x="210.3" y="1187.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="213.3" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (61 samples, 4.75%)</title><rect x="212.2" y="1267.0" width="56.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="215.2" y="1278.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (60 samples, 4.67%)</title><rect x="212.2" y="1251.0" width="55.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="215.2" y="1262.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquireAndEnsureOpen (1 samples, 0.08%)</title><rect x="212.2" y="1235.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="215.2" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (34 samples, 2.65%)</title><rect x="213.1" y="1235.0" width="31.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="216.1" y="1246.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (34 samples, 2.65%)</title><rect x="213.1" y="1219.0" width="31.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="216.1" y="1230.0">or..</text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.08%)</title><rect x="213.1" y="1203.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="216.1" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="213.1" y="1187.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="216.1" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (33 samples, 2.57%)</title><rect x="214.0" y="1203.0" width="30.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="217.0" y="1214.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (31 samples, 2.41%)</title><rect x="214.0" y="1187.0" width="28.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="217.0" y="1198.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (31 samples, 2.41%)</title><rect x="214.0" y="1171.0" width="28.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="217.0" y="1182.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (20 samples, 1.56%)</title><rect x="214.0" y="1155.0" width="18.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="217.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (8 samples, 0.62%)</title><rect x="224.1" y="1139.0" width="7.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="227.1" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (8 samples, 0.62%)</title><rect x="224.1" y="1123.0" width="7.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="227.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (8 samples, 0.62%)</title><rect x="224.1" y="1107.0" width="7.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="227.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (8 samples, 0.62%)</title><rect x="224.1" y="1091.0" width="7.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="227.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (8 samples, 0.62%)</title><rect x="224.1" y="1075.0" width="7.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="227.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (7 samples, 0.55%)</title><rect x="224.1" y="1059.0" width="6.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="227.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (7 samples, 0.55%)</title><rect x="224.1" y="1043.0" width="6.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="227.1" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.create (1 samples, 0.08%)</title><rect x="230.6" y="1059.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="233.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C$PureJavaChecksumFactory.create (1 samples, 0.08%)</title><rect x="230.6" y="1043.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="233.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.08%)</title><rect x="230.6" y="1027.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="233.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.08%)</title><rect x="231.5" y="1139.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="234.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.08%)</title><rect x="231.5" y="1123.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="234.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.ensureNoneRemaining (1 samples, 0.08%)</title><rect x="231.5" y="1107.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="234.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (11 samples, 0.86%)</title><rect x="232.4" y="1155.0" width="10.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="235.4" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (8 samples, 0.62%)</title><rect x="235.2" y="1139.0" width="7.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="238.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (6 samples, 0.47%)</title><rect x="235.2" y="1123.0" width="5.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="238.2" y="1134.0"></text>
</g>
<g>
<title>java/util/Optional.of (6 samples, 0.47%)</title><rect x="235.2" y="1107.0" width="5.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="238.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (2 samples, 0.16%)</title><rect x="240.7" y="1123.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="243.7" y="1134.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (2 samples, 0.16%)</title><rect x="240.7" y="1107.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="243.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.08%)</title><rect x="242.5" y="1187.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="245.5" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.08%)</title><rect x="242.5" y="1171.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="245.5" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="242.5" y="1155.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="245.5" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="242.5" y="1139.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="245.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="242.5" y="1123.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="245.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.08%)</title><rect x="242.5" y="1107.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="245.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Value.record (1 samples, 0.08%)</title><rect x="242.5" y="1091.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="245.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.08%)</title><rect x="243.4" y="1187.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="246.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.08%)</title><rect x="243.4" y="1171.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="246.4" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="243.4" y="1155.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="246.4" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="243.4" y="1139.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="246.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="243.4" y="1123.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="246.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.08%)</title><rect x="243.4" y="1107.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="246.4" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (12 samples, 0.93%)</title><rect x="244.3" y="1235.0" width="11.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="247.3" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (10 samples, 0.78%)</title><rect x="244.3" y="1219.0" width="9.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="247.3" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (8 samples, 0.62%)</title><rect x="244.3" y="1203.0" width="7.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="247.3" y="1214.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 0.23%)</title><rect x="245.3" y="1187.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="248.3" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$227/1995810799.accept (3 samples, 0.23%)</title><rect x="245.3" y="1171.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="248.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (3 samples, 0.23%)</title><rect x="245.3" y="1155.0" width="2.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="248.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (2 samples, 0.16%)</title><rect x="245.3" y="1139.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="248.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.08%)</title><rect x="245.3" y="1123.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="248.3" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="245.3" y="1107.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="248.3" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="245.3" y="1091.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="248.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.08%)</title><rect x="246.2" y="1123.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="249.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.08%)</title><rect x="246.2" y="1107.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="249.2" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="246.2" y="1091.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="249.2" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="246.2" y="1075.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="249.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.08%)</title><rect x="247.1" y="1139.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="250.1" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.08%)</title><rect x="247.1" y="1123.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="250.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.08%)</title><rect x="248.0" y="1187.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="251.0" y="1198.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.08%)</title><rect x="248.0" y="1171.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="251.0" y="1182.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.08%)</title><rect x="248.0" y="1155.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="251.0" y="1166.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.08%)</title><rect x="248.0" y="1139.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="251.0" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.08%)</title><rect x="248.0" y="1123.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="251.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (3 samples, 0.23%)</title><rect x="248.9" y="1187.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="251.9" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (3 samples, 0.23%)</title><rect x="248.9" y="1171.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="251.9" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.23%)</title><rect x="248.9" y="1155.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="251.9" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.23%)</title><rect x="248.9" y="1139.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="251.9" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.23%)</title><rect x="248.9" y="1123.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="251.9" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.23%)</title><rect x="248.9" y="1107.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="251.9" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.23%)</title><rect x="248.9" y="1091.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="251.9" y="1102.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (2 samples, 0.16%)</title><rect x="248.9" y="1075.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="251.9" y="1086.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.08%)</title><rect x="249.9" y="1059.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="252.9" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.08%)</title><rect x="249.9" y="1043.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="252.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates$$Lambda$231/557271254.apply (1 samples, 0.08%)</title><rect x="249.9" y="1027.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="252.9" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="250.8" y="1075.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="253.8" y="1086.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="250.8" y="1059.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="253.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.16%)</title><rect x="251.7" y="1203.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="254.7" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.08%)</title><rect x="251.7" y="1187.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="254.7" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="251.7" y="1171.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="254.7" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.08%)</title><rect x="251.7" y="1155.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="254.7" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.08%)</title><rect x="251.7" y="1139.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="254.7" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="251.7" y="1123.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="254.7" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="251.7" y="1107.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="254.7" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.08%)</title><rect x="251.7" y="1091.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="254.7" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="251.7" y="1075.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="254.7" y="1086.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="251.7" y="1059.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="254.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.08%)</title><rect x="252.6" y="1187.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="255.6" y="1198.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.08%)</title><rect x="252.6" y="1171.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="255.6" y="1182.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.spliterator (1 samples, 0.08%)</title><rect x="252.6" y="1155.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="255.6" y="1166.0"></text>
</g>
<g>
<title>java/util/Spliterators.spliterator (1 samples, 0.08%)</title><rect x="252.6" y="1139.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="255.6" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.08%)</title><rect x="252.6" y="1123.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="255.6" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (2 samples, 0.16%)</title><rect x="253.5" y="1219.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="256.5" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.pollHeartbeat (1 samples, 0.08%)</title><rect x="253.5" y="1203.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="256.5" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.invokeCompletedOffsetCommitCallbacks (1 samples, 0.08%)</title><rect x="254.5" y="1203.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="257.5" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator$OffsetCommitCompletion.invoke (1 samples, 0.08%)</title><rect x="254.5" y="1187.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="257.5" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager$$Lambda$290/1580800644.onComplete (1 samples, 0.08%)</title><rect x="254.5" y="1171.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="257.5" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.lambda$commitAsync$50 (1 samples, 0.08%)</title><rect x="254.5" y="1155.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="257.5" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.storeCommittedOffsets (1 samples, 0.08%)</title><rect x="254.5" y="1139.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="257.5" y="1150.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.08%)</title><rect x="254.5" y="1123.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="257.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (7 samples, 0.55%)</title><rect x="255.4" y="1235.0" width="6.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="258.4" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (6 samples, 0.47%)</title><rect x="255.4" y="1219.0" width="5.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="258.4" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.08%)</title><rect x="255.4" y="1203.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="258.4" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.08%)</title><rect x="255.4" y="1187.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="258.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.08%)</title><rect x="255.4" y="1171.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="258.4" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.responseSchema (1 samples, 0.08%)</title><rect x="255.4" y="1155.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="258.4" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (5 samples, 0.39%)</title><rect x="256.3" y="1203.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="259.3" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.16%)</title><rect x="258.1" y="1187.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="261.1" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.16%)</title><rect x="258.1" y="1171.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="261.1" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.16%)</title><rect x="258.1" y="1155.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="261.1" y="1166.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="258.1" y="1139.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="261.1" y="1150.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="258.1" y="1123.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="261.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.08%)</title><rect x="259.0" y="1139.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="262.0" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.08%)</title><rect x="259.0" y="1123.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="262.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.08%)</title><rect x="259.0" y="1107.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="262.0" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.08%)</title><rect x="259.0" y="1091.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="262.0" y="1102.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="259.0" y="1075.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="262.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.08%)</title><rect x="260.0" y="1187.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="263.0" y="1198.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.08%)</title><rect x="260.0" y="1171.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="263.0" y="1182.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.08%)</title><rect x="260.0" y="1155.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="263.0" y="1166.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.08%)</title><rect x="260.0" y="1139.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="263.0" y="1150.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.08%)</title><rect x="260.0" y="1123.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="263.0" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.08%)</title><rect x="260.0" y="1107.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="263.0" y="1118.0"></text>
</g>
<g>
<title>__GI_epoll_wait (1 samples, 0.08%)</title><rect x="260.0" y="1091.0" width="0.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="263.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.08%)</title><rect x="260.9" y="1219.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="263.9" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.08%)</title><rect x="260.9" y="1203.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="263.9" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.08%)</title><rect x="260.9" y="1187.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="263.9" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.08%)</title><rect x="260.9" y="1171.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="263.9" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.08%)</title><rect x="260.9" y="1155.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="263.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.08%)</title><rect x="260.9" y="1139.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="263.9" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.08%)</title><rect x="260.9" y="1123.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="263.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.08%)</title><rect x="260.9" y="1107.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="263.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.08%)</title><rect x="260.9" y="1091.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="263.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.write (1 samples, 0.08%)</title><rect x="260.9" y="1075.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="263.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.08%)</title><rect x="260.9" y="1059.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="263.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.write (1 samples, 0.08%)</title><rect x="260.9" y="1043.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="263.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.08%)</title><rect x="260.9" y="1027.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="263.9" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.08%)</title><rect x="260.9" y="1011.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="263.9" y="1022.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.08%)</title><rect x="260.9" y="995.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="263.9" y="1006.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encode (1 samples, 0.08%)</title><rect x="260.9" y="979.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="263.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (6 samples, 0.47%)</title><rect x="261.8" y="1235.0" width="5.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="264.8" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (6 samples, 0.47%)</title><rect x="261.8" y="1219.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="264.8" y="1230.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.08%)</title><rect x="262.7" y="1203.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="265.7" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$251/859327121.accept (1 samples, 0.08%)</title><rect x="262.7" y="1187.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="265.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.08%)</title><rect x="262.7" y="1171.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="265.7" y="1182.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.08%)</title><rect x="263.6" y="1203.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="266.6" y="1214.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.hasNext (1 samples, 0.08%)</title><rect x="264.6" y="1203.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="267.6" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.08%)</title><rect x="265.5" y="1203.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="268.5" y="1214.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.08%)</title><rect x="265.5" y="1187.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="268.5" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.08%)</title><rect x="266.4" y="1203.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="269.4" y="1214.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.08%)</title><rect x="266.4" y="1187.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="269.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (1 samples, 0.08%)</title><rect x="266.4" y="1171.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="269.4" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.08%)</title><rect x="267.3" y="1251.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="270.3" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Timer.&lt;init&gt; (1 samples, 0.08%)</title><rect x="267.3" y="1235.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="270.3" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Timer.reset (1 samples, 0.08%)</title><rect x="267.3" y="1219.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="270.3" y="1230.0"></text>
</g>
<g>
<title>java/lang/Thread.run (715 samples, 55.69%)</title><rect x="268.2" y="1299.0" width="657.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="271.2" y="1310.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (715 samples, 55.69%)</title><rect x="268.2" y="1283.0" width="657.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="271.2" y="1294.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (715 samples, 55.69%)</title><rect x="268.2" y="1267.0" width="657.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="271.2" y="1278.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$279/1798824109.run (493 samples, 38.40%)</title><rect x="270.1" y="1251.0" width="453.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="273.1" y="1262.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$66 (493 samples, 38.40%)</title><rect x="270.1" y="1235.0" width="453.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="273.1" y="1246.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit...</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (493 samples, 38.40%)</title><rect x="270.1" y="1219.0" width="453.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="273.1" y="1230.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit...</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (490 samples, 38.16%)</title><rect x="270.1" y="1203.0" width="450.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="273.1" y="1214.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipelin..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="281.1" y="1187.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="284.1" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.08%)</title><rect x="282.0" y="1187.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="285.0" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (145 samples, 11.29%)</title><rect x="282.9" y="1187.0" width="133.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="285.9" y="1198.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (145 samples, 11.29%)</title><rect x="282.9" y="1171.0" width="133.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="285.9" y="1182.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (145 samples, 11.29%)</title><rect x="282.9" y="1155.0" width="133.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="285.9" y="1166.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (144 samples, 11.21%)</title><rect x="282.9" y="1139.0" width="132.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="285.9" y="1150.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (144 samples, 11.21%)</title><rect x="282.9" y="1123.0" width="132.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="285.9" y="1134.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (144 samples, 11.21%)</title><rect x="282.9" y="1107.0" width="132.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="285.9" y="1118.0">com/fasterxml/ja..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (52 samples, 4.05%)</title><rect x="282.9" y="1091.0" width="47.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="285.9" y="1102.0">com/..</text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.47%)</title><rect x="293.1" y="1075.0" width="5.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="296.1" y="1086.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.39%)</title><rect x="294.0" y="1059.0" width="4.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="297.0" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (6 samples, 0.47%)</title><rect x="298.6" y="1075.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="301.6" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (6 samples, 0.47%)</title><rect x="298.6" y="1059.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="301.6" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (6 samples, 0.47%)</title><rect x="298.6" y="1043.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="301.6" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="298.6" y="1027.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="301.6" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="298.6" y="1011.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="301.6" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="298.6" y="995.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="301.6" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.39%)</title><rect x="299.5" y="1027.0" width="4.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="302.5" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (5 samples, 0.39%)</title><rect x="299.5" y="1011.0" width="4.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="302.5" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 0.39%)</title><rect x="299.5" y="995.0" width="4.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="302.5" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (5 samples, 0.39%)</title><rect x="299.5" y="979.0" width="4.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="302.5" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (28 samples, 2.18%)</title><rect x="304.1" y="1075.0" width="25.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="307.1" y="1086.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (25 samples, 1.95%)</title><rect x="304.1" y="1059.0" width="23.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="307.1" y="1070.0">c..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.16%)</title><rect x="316.0" y="1043.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="319.0" y="1054.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.16%)</title><rect x="316.0" y="1027.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="319.0" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.16%)</title><rect x="316.0" y="1011.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="319.0" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="316.9" y="995.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="319.9" y="1006.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="316.9" y="979.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="319.9" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (4 samples, 0.31%)</title><rect x="317.9" y="1043.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="320.9" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.23%)</title><rect x="317.9" y="1027.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="320.9" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.16%)</title><rect x="318.8" y="1011.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="321.8" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.16%)</title><rect x="318.8" y="995.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="321.8" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.16%)</title><rect x="318.8" y="979.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="321.8" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="318.8" y="963.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="321.8" y="974.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="318.8" y="947.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="321.8" y="958.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.08%)</title><rect x="318.8" y="931.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="321.8" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="319.7" y="963.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="322.7" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.08%)</title><rect x="320.6" y="1027.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="323.6" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (6 samples, 0.47%)</title><rect x="321.5" y="1043.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="324.5" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="321.5" y="1027.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="324.5" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="321.5" y="1011.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="324.5" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="321.5" y="995.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="324.5" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="321.5" y="979.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="324.5" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="321.5" y="963.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="324.5" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (5 samples, 0.39%)</title><rect x="322.5" y="1027.0" width="4.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="325.5" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (3 samples, 0.23%)</title><rect x="322.5" y="1011.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="325.5" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (2 samples, 0.16%)</title><rect x="325.2" y="1011.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="328.2" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.16%)</title><rect x="325.2" y="995.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="328.2" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.16%)</title><rect x="325.2" y="979.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="328.2" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.16%)</title><rect x="325.2" y="963.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="328.2" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="326.1" y="947.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="329.1" y="958.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.08%)</title><rect x="326.1" y="931.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="329.1" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (3 samples, 0.23%)</title><rect x="327.1" y="1059.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="330.1" y="1070.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="329.8" y="1075.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="332.8" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (83 samples, 6.46%)</title><rect x="330.7" y="1091.0" width="76.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="333.7" y="1102.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.08%)</title><rect x="333.5" y="1075.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="336.5" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (2 samples, 0.16%)</title><rect x="334.4" y="1075.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="337.4" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (3 samples, 0.23%)</title><rect x="336.2" y="1075.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="339.2" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.23%)</title><rect x="336.2" y="1059.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="339.2" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (12 samples, 0.93%)</title><rect x="339.0" y="1075.0" width="11.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="342.0" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (10 samples, 0.78%)</title><rect x="340.8" y="1059.0" width="9.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="343.8" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (5 samples, 0.39%)</title><rect x="344.5" y="1043.0" width="4.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="347.5" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (5 samples, 0.39%)</title><rect x="344.5" y="1027.0" width="4.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="347.5" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="345.4" y="1011.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="348.4" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="345.4" y="995.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="348.4" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="345.4" y="979.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="348.4" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="345.4" y="963.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="348.4" y="974.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="345.4" y="947.0" width="1.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="348.4" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (3 samples, 0.23%)</title><rect x="346.4" y="1011.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="349.4" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.08%)</title><rect x="349.1" y="1043.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="352.1" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (11 samples, 0.86%)</title><rect x="350.0" y="1075.0" width="10.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="353.0" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.16%)</title><rect x="351.9" y="1059.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="354.9" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="352.8" y="1043.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="355.8" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="352.8" y="1027.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="355.8" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (7 samples, 0.55%)</title><rect x="353.7" y="1059.0" width="6.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="356.7" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (50 samples, 3.89%)</title><rect x="360.1" y="1075.0" width="46.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="363.1" y="1086.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (14 samples, 1.09%)</title><rect x="360.1" y="1059.0" width="12.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="363.1" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.23%)</title><rect x="363.8" y="1043.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="366.8" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.23%)</title><rect x="363.8" y="1027.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="366.8" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.23%)</title><rect x="363.8" y="1011.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="366.8" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (4 samples, 0.31%)</title><rect x="366.6" y="1043.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="369.6" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (4 samples, 0.31%)</title><rect x="366.6" y="1027.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="369.6" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (3 samples, 0.23%)</title><rect x="370.2" y="1043.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="373.2" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 0.16%)</title><rect x="373.0" y="1059.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="376.0" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (34 samples, 2.65%)</title><rect x="374.8" y="1059.0" width="31.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="377.8" y="1070.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (34 samples, 2.65%)</title><rect x="374.8" y="1043.0" width="31.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="377.8" y="1054.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (34 samples, 2.65%)</title><rect x="374.8" y="1027.0" width="31.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="377.8" y="1038.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (11 samples, 0.86%)</title><rect x="377.6" y="1011.0" width="10.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="380.6" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.39%)</title><rect x="380.4" y="995.0" width="4.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="383.4" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.39%)</title><rect x="380.4" y="979.0" width="4.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="383.4" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.39%)</title><rect x="380.4" y="963.0" width="4.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="383.4" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.16%)</title><rect x="383.1" y="947.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="386.1" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.16%)</title><rect x="383.1" y="931.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="386.1" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.16%)</title><rect x="385.0" y="995.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="388.0" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.16%)</title><rect x="385.0" y="979.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="388.0" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.08%)</title><rect x="385.9" y="963.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="388.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.08%)</title><rect x="386.8" y="995.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="389.8" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (9 samples, 0.70%)</title><rect x="387.7" y="1011.0" width="8.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="390.7" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (8 samples, 0.62%)</title><rect x="388.6" y="995.0" width="7.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="391.6" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (8 samples, 0.62%)</title><rect x="388.6" y="979.0" width="7.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="391.6" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (8 samples, 0.62%)</title><rect x="388.6" y="963.0" width="7.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="391.6" y="974.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (8 samples, 0.62%)</title><rect x="388.6" y="947.0" width="7.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="391.6" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (6 samples, 0.47%)</title><rect x="396.0" y="1011.0" width="5.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="399.0" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (6 samples, 0.47%)</title><rect x="396.0" y="995.0" width="5.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="399.0" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (6 samples, 0.47%)</title><rect x="396.0" y="979.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="399.0" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (6 samples, 0.47%)</title><rect x="396.0" y="963.0" width="5.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="399.0" y="974.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (6 samples, 0.47%)</title><rect x="396.0" y="947.0" width="5.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="399.0" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.16%)</title><rect x="401.5" y="1011.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="404.5" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.16%)</title><rect x="401.5" y="995.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="404.5" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.16%)</title><rect x="401.5" y="979.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="404.5" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.08%)</title><rect x="402.4" y="963.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="405.4" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (3 samples, 0.23%)</title><rect x="403.3" y="1011.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="406.3" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.08%)</title><rect x="406.1" y="1075.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="409.1" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (9 samples, 0.70%)</title><rect x="407.0" y="1091.0" width="8.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="410.0" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.08%)</title><rect x="407.0" y="1075.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="410.0" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (8 samples, 0.62%)</title><rect x="407.9" y="1075.0" width="7.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="410.9" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (8 samples, 0.62%)</title><rect x="407.9" y="1059.0" width="7.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="410.9" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (8 samples, 0.62%)</title><rect x="407.9" y="1043.0" width="7.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="410.9" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (8 samples, 0.62%)</title><rect x="407.9" y="1027.0" width="7.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="410.9" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata$TaskMetadataBuilder.build (1 samples, 0.08%)</title><rect x="415.3" y="1139.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="418.3" y="1150.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="415.3" y="1123.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="418.3" y="1134.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="415.3" y="1107.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="418.3" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="415.3" y="1091.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="418.3" y="1102.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="415.3" y="1075.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="418.3" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (300 samples, 23.36%)</title><rect x="416.2" y="1187.0" width="275.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="419.2" y="1198.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (48 samples, 3.74%)</title><rect x="417.1" y="1171.0" width="44.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="420.1" y="1182.0">com/..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (48 samples, 3.74%)</title><rect x="417.1" y="1155.0" width="44.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="420.1" y="1166.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (44 samples, 3.43%)</title><rect x="420.8" y="1139.0" width="40.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="423.8" y="1150.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (9 samples, 0.70%)</title><rect x="420.8" y="1123.0" width="8.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="423.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (9 samples, 0.70%)</title><rect x="420.8" y="1107.0" width="8.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="423.8" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (9 samples, 0.70%)</title><rect x="420.8" y="1091.0" width="8.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="423.8" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (9 samples, 0.70%)</title><rect x="420.8" y="1075.0" width="8.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="423.8" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (35 samples, 2.73%)</title><rect x="429.1" y="1123.0" width="32.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="432.1" y="1134.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (31 samples, 2.41%)</title><rect x="432.7" y="1107.0" width="28.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="435.7" y="1118.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (8 samples, 0.62%)</title><rect x="453.9" y="1091.0" width="7.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="456.9" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (9 samples, 0.70%)</title><rect x="461.2" y="1171.0" width="8.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="464.2" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (8 samples, 0.62%)</title><rect x="462.1" y="1155.0" width="7.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="465.1" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (8 samples, 0.62%)</title><rect x="462.1" y="1139.0" width="7.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="465.1" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (163 samples, 12.69%)</title><rect x="469.5" y="1171.0" width="149.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="472.5" y="1182.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (163 samples, 12.69%)</title><rect x="469.5" y="1155.0" width="149.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="472.5" y="1166.0">com/linecorp/decato..</text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.39%)</title><rect x="477.8" y="1139.0" width="4.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="480.8" y="1150.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.39%)</title><rect x="477.8" y="1123.0" width="4.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="480.8" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (53 samples, 4.13%)</title><rect x="482.4" y="1139.0" width="48.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="485.4" y="1150.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (51 samples, 3.97%)</title><rect x="483.3" y="1123.0" width="46.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="486.3" y="1134.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (40 samples, 3.12%)</title><rect x="488.8" y="1107.0" width="36.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="491.8" y="1118.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (24 samples, 1.87%)</title><rect x="496.2" y="1091.0" width="22.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="499.2" y="1102.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (24 samples, 1.87%)</title><rect x="496.2" y="1075.0" width="22.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="499.2" y="1086.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (24 samples, 1.87%)</title><rect x="496.2" y="1059.0" width="22.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="499.2" y="1070.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (12 samples, 0.93%)</title><rect x="501.7" y="1043.0" width="11.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="504.7" y="1054.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="501.7" y="1027.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="504.7" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (5 samples, 0.39%)</title><rect x="502.6" y="1027.0" width="4.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="505.6" y="1038.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.08%)</title><rect x="502.6" y="1011.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="505.6" y="1022.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="503.5" y="1011.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="506.5" y="1022.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="503.5" y="995.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="506.5" y="1006.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.23%)</title><rect x="504.4" y="1011.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="507.4" y="1022.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.08%)</title><rect x="506.3" y="995.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="509.3" y="1006.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.08%)</title><rect x="506.3" y="979.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="509.3" y="990.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.39%)</title><rect x="507.2" y="1027.0" width="4.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="510.2" y="1038.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.08%)</title><rect x="509.0" y="1011.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="512.0" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.16%)</title><rect x="509.9" y="1011.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="512.9" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="509.9" y="995.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="512.9" y="1006.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="510.9" y="995.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="513.9" y="1006.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="511.8" y="1027.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="514.8" y="1038.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.47%)</title><rect x="512.7" y="1043.0" width="5.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="515.7" y="1054.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.31%)</title><rect x="518.2" y="1091.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="521.2" y="1102.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.31%)</title><rect x="521.9" y="1091.0" width="3.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="524.9" y="1102.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.16%)</title><rect x="525.6" y="1107.0" width="1.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="528.6" y="1118.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.23%)</title><rect x="527.4" y="1107.0" width="2.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="530.4" y="1118.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.08%)</title><rect x="530.2" y="1123.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="533.2" y="1134.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="530.2" y="1107.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="533.2" y="1118.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="530.2" y="1091.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="533.2" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="530.2" y="1075.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="533.2" y="1086.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.08%)</title><rect x="530.2" y="1059.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="533.2" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.08%)</title><rect x="531.1" y="1139.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="534.1" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (6 samples, 0.47%)</title><rect x="532.0" y="1139.0" width="5.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="535.0" y="1150.0"></text>
</g>
<g>
<title>java/lang/Long.toString (6 samples, 0.47%)</title><rect x="532.0" y="1123.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="535.0" y="1134.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (6 samples, 0.47%)</title><rect x="532.0" y="1107.0" width="5.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="535.0" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.08%)</title><rect x="536.6" y="1091.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="539.6" y="1102.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (88 samples, 6.85%)</title><rect x="537.5" y="1139.0" width="80.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="540.5" y="1150.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (88 samples, 6.85%)</title><rect x="537.5" y="1123.0" width="80.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="540.5" y="1134.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (8 samples, 0.62%)</title><rect x="537.5" y="1107.0" width="7.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="540.5" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (8 samples, 0.62%)</title><rect x="537.5" y="1091.0" width="7.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="540.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (8 samples, 0.62%)</title><rect x="537.5" y="1075.0" width="7.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="540.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (8 samples, 0.62%)</title><rect x="537.5" y="1059.0" width="7.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="540.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="544.9" y="1107.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="547.9" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="544.9" y="1091.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="547.9" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="544.9" y="1075.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="547.9" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.08%)</title><rect x="544.9" y="1059.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="547.9" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="544.9" y="1043.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="547.9" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (79 samples, 6.15%)</title><rect x="545.8" y="1107.0" width="72.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="548.8" y="1118.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.put (67 samples, 5.22%)</title><rect x="556.8" y="1091.0" width="61.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="559.8" y="1102.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.putVal (38 samples, 2.96%)</title><rect x="583.5" y="1075.0" width="34.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="586.5" y="1086.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.16%)</title><rect x="599.1" y="1059.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="602.1" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (10 samples, 0.78%)</title><rect x="600.9" y="1059.0" width="9.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="603.9" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.16%)</title><rect x="608.3" y="1043.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="611.3" y="1054.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.16%)</title><rect x="608.3" y="1027.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="611.3" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.16%)</title><rect x="608.3" y="1011.0" width="1.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="611.3" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="609.2" y="995.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="612.2" y="1006.0"></text>
</g>
<g>
<title>vtable stub (9 samples, 0.70%)</title><rect x="610.1" y="1059.0" width="8.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="613.1" y="1070.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="618.4" y="1139.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="621.4" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (63 samples, 4.91%)</title><rect x="619.3" y="1171.0" width="57.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="622.3" y="1182.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (62 samples, 4.83%)</title><rect x="619.3" y="1155.0" width="57.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="622.3" y="1166.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$206/1863560181.process (32 samples, 2.49%)</title><rect x="621.1" y="1139.0" width="29.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="624.1" y="1150.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (32 samples, 2.49%)</title><rect x="621.1" y="1123.0" width="29.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="624.1" y="1134.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (25 samples, 1.95%)</title><rect x="621.1" y="1107.0" width="23.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="624.1" y="1118.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (10 samples, 0.78%)</title><rect x="624.8" y="1091.0" width="9.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="627.8" y="1102.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.16%)</title><rect x="625.7" y="1075.0" width="1.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="628.7" y="1086.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.16%)</title><rect x="625.7" y="1059.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="628.7" y="1070.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.55%)</title><rect x="627.6" y="1075.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="630.6" y="1086.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.55%)</title><rect x="627.6" y="1059.0" width="6.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="630.6" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (11 samples, 0.86%)</title><rect x="634.0" y="1091.0" width="10.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="637.0" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (7 samples, 0.55%)</title><rect x="644.1" y="1107.0" width="6.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="647.1" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.47%)</title><rect x="645.0" y="1091.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="648.0" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (6 samples, 0.47%)</title><rect x="645.0" y="1075.0" width="5.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="648.0" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (6 samples, 0.47%)</title><rect x="645.0" y="1059.0" width="5.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="648.0" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (6 samples, 0.47%)</title><rect x="645.0" y="1043.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="648.0" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (1 samples, 0.08%)</title><rect x="650.5" y="1139.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="653.5" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.47%)</title><rect x="651.5" y="1139.0" width="5.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="654.5" y="1150.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="651.5" y="1123.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="654.5" y="1134.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="651.5" y="1107.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="654.5" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="651.5" y="1091.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="654.5" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="651.5" y="1075.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="654.5" y="1086.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="651.5" y="1059.0" width="0.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="654.5" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.39%)</title><rect x="652.4" y="1123.0" width="4.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="655.4" y="1134.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1016925085.linkToTargetMethod (1 samples, 0.08%)</title><rect x="657.0" y="1139.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="660.0" y="1150.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (1 samples, 0.08%)</title><rect x="657.0" y="1123.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="660.0" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$285/347311684.get$Lambda (1 samples, 0.08%)</title><rect x="657.0" y="1107.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="660.0" y="1118.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="657.0" y="1091.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="660.0" y="1102.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="657.0" y="1075.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="660.0" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.08%)</title><rect x="657.9" y="1139.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="660.9" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.08%)</title><rect x="657.9" y="1123.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="660.9" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (9 samples, 0.70%)</title><rect x="658.8" y="1139.0" width="8.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="661.8" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.47%)</title><rect x="661.6" y="1123.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="664.6" y="1134.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.23%)</title><rect x="661.6" y="1107.0" width="2.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="664.6" y="1118.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (3 samples, 0.23%)</title><rect x="664.3" y="1107.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="667.3" y="1118.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.16%)</title><rect x="667.1" y="1139.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="670.1" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.16%)</title><rect x="667.1" y="1123.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="670.1" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (8 samples, 0.62%)</title><rect x="668.9" y="1139.0" width="7.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="671.9" y="1150.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="672.6" y="1123.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="675.6" y="1134.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="672.6" y="1107.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="675.6" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="672.6" y="1091.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="675.6" y="1102.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.08%)</title><rect x="673.5" y="1123.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="676.5" y="1134.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="673.5" y="1107.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="676.5" y="1118.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.16%)</title><rect x="674.4" y="1123.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="677.4" y="1134.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.08%)</title><rect x="676.3" y="1155.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="679.3" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (16 samples, 1.25%)</title><rect x="677.2" y="1171.0" width="14.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="680.2" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (16 samples, 1.25%)</title><rect x="677.2" y="1155.0" width="14.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="680.2" y="1166.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.16%)</title><rect x="680.0" y="1139.0" width="1.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="683.0" y="1150.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="680.9" y="1123.0" width="0.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="683.9" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (10 samples, 0.78%)</title><rect x="681.8" y="1139.0" width="9.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="684.8" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$288/1680603993.accept (10 samples, 0.78%)</title><rect x="681.8" y="1123.0" width="9.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="684.8" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$61 (10 samples, 0.78%)</title><rect x="681.8" y="1107.0" width="9.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="684.8" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (2 samples, 0.16%)</title><rect x="681.8" y="1091.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="684.8" y="1102.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.16%)</title><rect x="681.8" y="1075.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="684.8" y="1086.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.16%)</title><rect x="681.8" y="1059.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="684.8" y="1070.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (8 samples, 0.62%)</title><rect x="683.6" y="1091.0" width="7.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="686.6" y="1102.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (8 samples, 0.62%)</title><rect x="683.6" y="1075.0" width="7.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="686.6" y="1086.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.31%)</title><rect x="687.3" y="1059.0" width="3.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="690.3" y="1070.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.31%)</title><rect x="687.3" y="1043.0" width="3.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="690.3" y="1054.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="691.0" y="1139.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="694.0" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (22 samples, 1.71%)</title><rect x="691.9" y="1187.0" width="20.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="694.9" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (22 samples, 1.71%)</title><rect x="691.9" y="1171.0" width="20.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="694.9" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (21 samples, 1.64%)</title><rect x="692.8" y="1155.0" width="19.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="695.8" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$288/1680603993.accept (2 samples, 0.16%)</title><rect x="692.8" y="1139.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="695.8" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$61 (2 samples, 0.16%)</title><rect x="692.8" y="1123.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="695.8" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (2 samples, 0.16%)</title><rect x="692.8" y="1107.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="695.8" y="1118.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.16%)</title><rect x="692.8" y="1091.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="695.8" y="1102.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.16%)</title><rect x="692.8" y="1075.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="695.8" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$289/1495214956.accept (19 samples, 1.48%)</title><rect x="694.7" y="1139.0" width="17.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="697.7" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$60 (19 samples, 1.48%)</title><rect x="694.7" y="1123.0" width="17.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="697.7" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$277/1774157784.complete (19 samples, 1.48%)</title><rect x="694.7" y="1107.0" width="17.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="697.7" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$37 (19 samples, 1.48%)</title><rect x="694.7" y="1091.0" width="17.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="697.7" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$276/1610842262.complete (19 samples, 1.48%)</title><rect x="694.7" y="1075.0" width="17.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="697.7" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$65 (19 samples, 1.48%)</title><rect x="694.7" y="1059.0" width="17.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="697.7" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (19 samples, 1.48%)</title><rect x="694.7" y="1043.0" width="17.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="697.7" y="1054.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (19 samples, 1.48%)</title><rect x="694.7" y="1027.0" width="17.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="697.7" y="1038.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (19 samples, 1.48%)</title><rect x="694.7" y="1011.0" width="17.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="697.7" y="1022.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (19 samples, 1.48%)</title><rect x="694.7" y="995.0" width="17.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="697.7" y="1006.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (9 samples, 0.70%)</title><rect x="712.1" y="1187.0" width="8.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="715.1" y="1198.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.70%)</title><rect x="712.1" y="1171.0" width="8.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="715.1" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (3 samples, 0.23%)</title><rect x="720.4" y="1203.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="723.4" y="1214.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.16%)</title><rect x="720.4" y="1187.0" width="1.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="723.4" y="1198.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="721.3" y="1171.0" width="0.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="724.3" y="1182.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="722.2" y="1187.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="725.2" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (9 samples, 0.70%)</title><rect x="723.1" y="1251.0" width="8.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="726.1" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.70%)</title><rect x="723.1" y="1235.0" width="8.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="726.1" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.70%)</title><rect x="723.1" y="1219.0" width="8.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="726.1" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.70%)</title><rect x="723.1" y="1203.0" width="8.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="726.1" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$279/1798824109.run (3 samples, 0.23%)</title><rect x="728.7" y="1187.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="731.7" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (211 samples, 16.43%)</title><rect x="731.4" y="1251.0" width="193.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="734.4" y="1262.0">java/util/concurrent/Thre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (210 samples, 16.36%)</title><rect x="732.3" y="1235.0" width="193.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="735.3" y="1246.0">java/util/concurrent/Link..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (163 samples, 12.69%)</title><rect x="752.6" y="1219.0" width="149.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="755.6" y="1230.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (5 samples, 0.39%)</title><rect x="761.7" y="1203.0" width="4.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="764.7" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.39%)</title><rect x="761.7" y="1187.0" width="4.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="764.7" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.39%)</title><rect x="761.7" y="1171.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="764.7" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (147 samples, 11.45%)</title><rect x="766.3" y="1203.0" width="135.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="769.3" y="1214.0">java/util/concurr..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (146 samples, 11.37%)</title><rect x="767.3" y="1187.0" width="134.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="770.3" y="1198.0">sun/misc/Unsafe.p..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.08%)</title><rect x="771.9" y="1171.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="774.9" y="1182.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.16%)</title><rect x="772.8" y="1171.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="775.8" y="1182.0"></text>
</g>
<g>
<title>Unsafe_Park (134 samples, 10.44%)</title><rect x="774.6" y="1171.0" width="123.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="777.6" y="1182.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (4 samples, 0.31%)</title><rect x="775.5" y="1155.0" width="3.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="778.5" y="1166.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (19 samples, 1.48%)</title><rect x="779.2" y="1155.0" width="17.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="782.2" y="1166.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (7 samples, 0.55%)</title><rect x="782.0" y="1139.0" width="6.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="785.0" y="1150.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.23%)</title><rect x="782.9" y="1123.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="785.9" y="1134.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.16%)</title><rect x="783.8" y="1107.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="786.8" y="1118.0"></text>
</g>
<g>
<title>pthread_getspecific (3 samples, 0.23%)</title><rect x="785.6" y="1123.0" width="2.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="788.6" y="1134.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.08%)</title><rect x="788.4" y="1139.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="791.4" y="1150.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (8 samples, 0.62%)</title><rect x="789.3" y="1139.0" width="7.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="792.3" y="1150.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (2 samples, 0.16%)</title><rect x="796.7" y="1155.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="799.7" y="1166.0"></text>
</g>
<g>
<title>_L_cond_lock_847 (1 samples, 0.08%)</title><rect x="798.5" y="1155.0" width="0.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="801.5" y="1166.0"></text>
</g>
<g>
<title>__lll_lock_wait (19 samples, 1.48%)</title><rect x="799.4" y="1155.0" width="17.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="802.4" y="1166.0"></text>
</g>
<g>
<title>__lll_unlock_wake (19 samples, 1.48%)</title><rect x="816.9" y="1155.0" width="17.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="819.9" y="1166.0"></text>
</g>
<g>
<title>__pthread_cond_wait (52 samples, 4.05%)</title><rect x="834.3" y="1155.0" width="47.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="837.3" y="1166.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.39%)</title><rect x="882.1" y="1155.0" width="4.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="885.1" y="1166.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.08%)</title><rect x="886.7" y="1155.0" width="0.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="889.7" y="1166.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.16%)</title><rect x="887.6" y="1155.0" width="1.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="890.6" y="1166.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.08%)</title><rect x="889.5" y="1155.0" width="0.9" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="892.5" y="1166.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.16%)</title><rect x="890.4" y="1155.0" width="1.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="893.4" y="1166.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.08%)</title><rect x="892.2" y="1155.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="895.2" y="1166.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (4 samples, 0.31%)</title><rect x="893.2" y="1155.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="896.2" y="1166.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="896.8" y="1155.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="899.8" y="1166.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.16%)</title><rect x="897.8" y="1171.0" width="1.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="900.8" y="1182.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.08%)</title><rect x="899.6" y="1171.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="902.6" y="1182.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.08%)</title><rect x="900.5" y="1171.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="903.5" y="1182.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.08%)</title><rect x="901.4" y="1203.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="904.4" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (25 samples, 1.95%)</title><rect x="902.4" y="1219.0" width="22.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="905.4" y="1230.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (25 samples, 1.95%)</title><rect x="902.4" y="1203.0" width="22.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="905.4" y="1214.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (25 samples, 1.95%)</title><rect x="902.4" y="1187.0" width="22.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="905.4" y="1198.0">j..</text>
</g>
<g>
<title>start_thread (288 samples, 22.43%)</title><rect x="925.3" y="1299.0" width="264.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="928.3" y="1310.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (288 samples, 22.43%)</title><rect x="925.3" y="1283.0" width="264.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="928.3" y="1294.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (20 samples, 1.56%)</title><rect x="925.3" y="1267.0" width="18.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="928.3" y="1278.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (6 samples, 0.47%)</title><rect x="925.3" y="1251.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="928.3" y="1262.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 0.47%)</title><rect x="925.3" y="1235.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="928.3" y="1246.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.16%)</title><rect x="925.3" y="1219.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="928.3" y="1230.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.31%)</title><rect x="927.2" y="1219.0" width="3.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="930.2" y="1230.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (14 samples, 1.09%)</title><rect x="930.8" y="1251.0" width="12.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="933.8" y="1262.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.08%)</title><rect x="930.8" y="1235.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="933.8" y="1246.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.08%)</title><rect x="930.8" y="1219.0" width="1.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="933.8" y="1230.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (4 samples, 0.31%)</title><rect x="931.8" y="1235.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="934.8" y="1246.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.23%)</title><rect x="931.8" y="1219.0" width="2.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="934.8" y="1230.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.08%)</title><rect x="931.8" y="1203.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="934.8" y="1214.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.08%)</title><rect x="931.8" y="1187.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="934.8" y="1198.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.08%)</title><rect x="931.8" y="1171.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="934.8" y="1182.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.16%)</title><rect x="932.7" y="1203.0" width="1.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="935.7" y="1214.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.16%)</title><rect x="932.7" y="1187.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="935.7" y="1198.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, CLDClosure*, RegisterMap const*, bool) (1 samples, 0.08%)</title><rect x="932.7" y="1171.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="935.7" y="1182.0"></text>
</g>
<g>
<title>Method::mask_for(int, InterpreterOopMap*) (1 samples, 0.08%)</title><rect x="932.7" y="1155.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="935.7" y="1166.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="933.6" y="1171.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="936.6" y="1182.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.08%)</title><rect x="933.6" y="1155.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="936.6" y="1166.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.08%)</title><rect x="934.5" y="1219.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="937.5" y="1230.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.08%)</title><rect x="934.5" y="1203.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="937.5" y="1214.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (9 samples, 0.70%)</title><rect x="935.4" y="1235.0" width="8.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="938.4" y="1246.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (9 samples, 0.70%)</title><rect x="935.4" y="1219.0" width="8.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="938.4" y="1230.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (7 samples, 0.55%)</title><rect x="935.4" y="1203.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="938.4" y="1214.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (7 samples, 0.55%)</title><rect x="935.4" y="1187.0" width="6.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="938.4" y="1198.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (7 samples, 0.55%)</title><rect x="935.4" y="1171.0" width="6.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="938.4" y="1182.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (7 samples, 0.55%)</title><rect x="935.4" y="1155.0" width="6.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="938.4" y="1166.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (6 samples, 0.47%)</title><rect x="936.4" y="1139.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="939.4" y="1150.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (2 samples, 0.16%)</title><rect x="938.2" y="1123.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="941.2" y="1134.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (2 samples, 0.16%)</title><rect x="940.0" y="1123.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="943.0" y="1134.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.08%)</title><rect x="941.0" y="1107.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="944.0" y="1118.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.16%)</title><rect x="941.9" y="1203.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="944.9" y="1214.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (2 samples, 0.16%)</title><rect x="941.9" y="1187.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="944.9" y="1198.0"></text>
</g>
<g>
<title>HeapRegionRemSet::iter_is_complete() (1 samples, 0.08%)</title><rect x="942.8" y="1171.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="945.8" y="1182.0"></text>
</g>
<g>
<title>JavaThread::run() (264 samples, 20.56%)</title><rect x="943.7" y="1267.0" width="242.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="946.7" y="1278.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (264 samples, 20.56%)</title><rect x="943.7" y="1251.0" width="242.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="946.7" y="1262.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (263 samples, 20.48%)</title><rect x="943.7" y="1235.0" width="241.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="946.7" y="1246.0">CompileBroker::compiler_thread_l..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (263 samples, 20.48%)</title><rect x="943.7" y="1219.0" width="241.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="946.7" y="1230.0">CompileBroker::invoke_compiler_o..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (262 samples, 20.40%)</title><rect x="943.7" y="1203.0" width="240.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="946.7" y="1214.0">C2Compiler::compile_method(ciEnv..</text>
</g>
<g>
<title>Arena::~Arena() (1 samples, 0.08%)</title><rect x="943.7" y="1187.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="946.7" y="1198.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (261 samples, 20.33%)</title><rect x="944.6" y="1187.0" width="239.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="947.6" y="1198.0">Compile::Compile(ciEnv*, C2Compi..</text>
</g>
<g>
<title>Compile::Code_Gen() (115 samples, 8.96%)</title><rect x="944.6" y="1171.0" width="105.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="947.6" y="1182.0">Compile::Code..</text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.23%)</title><rect x="944.6" y="1155.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="947.6" y="1166.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.08%)</title><rect x="944.6" y="1139.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="947.6" y="1150.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.08%)</title><rect x="944.6" y="1123.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="947.6" y="1134.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.16%)</title><rect x="945.5" y="1139.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="948.5" y="1150.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.16%)</title><rect x="945.5" y="1123.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="948.5" y="1134.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.08%)</title><rect x="946.5" y="1107.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="949.5" y="1118.0"></text>
</g>
<g>
<title>CodeBuffer::initialize_section_size(CodeSection*, int) (1 samples, 0.08%)</title><rect x="946.5" y="1091.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="949.5" y="1102.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (7 samples, 0.55%)</title><rect x="947.4" y="1155.0" width="6.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="950.4" y="1166.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (4 samples, 0.31%)</title><rect x="947.4" y="1139.0" width="3.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="950.4" y="1150.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (2 samples, 0.16%)</title><rect x="947.4" y="1123.0" width="1.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="950.4" y="1134.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.08%)</title><rect x="948.3" y="1107.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="951.3" y="1118.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.08%)</title><rect x="949.2" y="1123.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="952.2" y="1134.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.08%)</title><rect x="949.2" y="1107.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="952.2" y="1118.0"></text>
</g>
<g>
<title>DebugInformationRecorder::dump_object_pool(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.08%)</title><rect x="950.1" y="1123.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="953.1" y="1134.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.08%)</title><rect x="950.1" y="1107.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="953.1" y="1118.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (3 samples, 0.23%)</title><rect x="951.1" y="1139.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="954.1" y="1150.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (3 samples, 0.23%)</title><rect x="951.1" y="1123.0" width="2.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="954.1" y="1134.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.08%)</title><rect x="953.8" y="1155.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="956.8" y="1166.0"></text>
</g>
<g>
<title>Matcher::match() (10 samples, 0.78%)</title><rect x="954.7" y="1155.0" width="9.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="957.7" y="1166.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.08%)</title><rect x="954.7" y="1139.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="957.7" y="1150.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (9 samples, 0.70%)</title><rect x="955.7" y="1139.0" width="8.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="958.7" y="1150.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (6 samples, 0.47%)</title><rect x="956.6" y="1123.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="959.6" y="1134.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (2 samples, 0.16%)</title><rect x="962.1" y="1123.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="965.1" y="1134.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.16%)</title><rect x="962.1" y="1107.0" width="1.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="965.1" y="1118.0"></text>
</g>
<g>
<title>CallNode::match_edge(unsigned int) const (1 samples, 0.08%)</title><rect x="962.1" y="1091.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="965.1" y="1102.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.08%)</title><rect x="963.0" y="1091.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="966.0" y="1102.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int, Compile*) (1 samples, 0.08%)</title><rect x="963.0" y="1075.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="966.0" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.08%)</title><rect x="963.9" y="1155.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="966.9" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.08%)</title><rect x="963.9" y="1139.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="966.9" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (5 samples, 0.39%)</title><rect x="964.8" y="1155.0" width="4.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="967.8" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (5 samples, 0.39%)</title><rect x="964.8" y="1139.0" width="4.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="967.8" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (4 samples, 0.31%)</title><rect x="964.8" y="1123.0" width="3.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="967.8" y="1134.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.08%)</title><rect x="964.8" y="1107.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="967.8" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (2 samples, 0.16%)</title><rect x="965.8" y="1107.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="968.8" y="1118.0"></text>
</g>
<g>
<title>Compile::can_alias(TypePtr const*, int) (1 samples, 0.08%)</title><rect x="965.8" y="1091.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="968.8" y="1102.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="965.8" y="1075.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="968.8" y="1086.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.08%)</title><rect x="965.8" y="1059.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="968.8" y="1070.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="965.8" y="1043.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="968.8" y="1054.0"></text>
</g>
<g>
<title>MachTypeNode::bottom_type() const (1 samples, 0.08%)</title><rect x="966.7" y="1091.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="969.7" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.08%)</title><rect x="967.6" y="1107.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="970.6" y="1118.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.08%)</title><rect x="967.6" y="1091.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="970.6" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.08%)</title><rect x="968.5" y="1123.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="971.5" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.08%)</title><rect x="969.4" y="1155.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="972.4" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (87 samples, 6.78%)</title><rect x="970.4" y="1155.0" width="79.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="973.4" y="1166.0">PhaseChai..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="971.3" y="1139.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="974.3" y="1150.0"></text>
</g>
<g>
<title>MachNode::bottom_type() const (1 samples, 0.08%)</title><rect x="972.2" y="1139.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="975.2" y="1150.0"></text>
</g>
<g>
<title>Node::rematerialize() const (3 samples, 0.23%)</title><rect x="973.1" y="1139.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="976.1" y="1150.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.08%)</title><rect x="975.9" y="1139.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="978.9" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (5 samples, 0.39%)</title><rect x="976.8" y="1139.0" width="4.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="979.8" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="980.5" y="1123.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="983.5" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (6 samples, 0.47%)</title><rect x="981.4" y="1139.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="984.4" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="981.4" y="1123.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="984.4" y="1134.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (5 samples, 0.39%)</title><rect x="982.3" y="1123.0" width="4.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="985.3" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.16%)</title><rect x="985.1" y="1107.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="988.1" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (11 samples, 0.86%)</title><rect x="986.9" y="1139.0" width="10.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="989.9" y="1150.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.08%)</title><rect x="993.3" y="1123.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="996.3" y="1134.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.08%)</title><rect x="994.3" y="1123.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="997.3" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (1 samples, 0.08%)</title><rect x="995.2" y="1123.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="998.2" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::insert_proj(Block*, unsigned int, Node*, unsigned int) (1 samples, 0.08%)</title><rect x="995.2" y="1107.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="998.2" y="1118.0"></text>
</g>
<g>
<title>loadRangeNode::rule() const (1 samples, 0.08%)</title><rect x="996.1" y="1123.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="999.1" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (16 samples, 1.25%)</title><rect x="997.0" y="1139.0" width="14.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1000.0" y="1150.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (3 samples, 0.23%)</title><rect x="998.8" y="1123.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1001.8" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1001.6" y="1123.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1004.6" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (8 samples, 0.62%)</title><rect x="1002.5" y="1123.0" width="7.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1005.5" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.31%)</title><rect x="1006.2" y="1107.0" width="3.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1009.2" y="1118.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.08%)</title><rect x="1009.9" y="1123.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1012.9" y="1134.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.08%)</title><rect x="1010.8" y="1123.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1013.8" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.16%)</title><rect x="1011.7" y="1139.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1014.7" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.08%)</title><rect x="1012.6" y="1123.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1015.6" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1012.6" y="1107.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1015.6" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (5 samples, 0.39%)</title><rect x="1013.6" y="1139.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1016.6" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.08%)</title><rect x="1018.1" y="1139.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1021.1" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 0.31%)</title><rect x="1019.1" y="1139.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1022.1" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 0.23%)</title><rect x="1020.0" y="1123.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1023.0" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.08%)</title><rect x="1022.7" y="1139.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1025.7" y="1150.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (6 samples, 0.47%)</title><rect x="1023.7" y="1139.0" width="5.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1026.7" y="1150.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (6 samples, 0.47%)</title><rect x="1023.7" y="1123.0" width="5.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1026.7" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (2 samples, 0.16%)</title><rect x="1023.7" y="1107.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1026.7" y="1118.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (4 samples, 0.31%)</title><rect x="1025.5" y="1107.0" width="3.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1028.5" y="1118.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (3 samples, 0.23%)</title><rect x="1025.5" y="1091.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1028.5" y="1102.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.08%)</title><rect x="1028.3" y="1091.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1031.3" y="1102.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1028.3" y="1075.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1031.3" y="1086.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (5 samples, 0.39%)</title><rect x="1029.2" y="1139.0" width="4.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1032.2" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.31%)</title><rect x="1030.1" y="1123.0" width="3.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1033.1" y="1134.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.16%)</title><rect x="1033.8" y="1139.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1036.8" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.08%)</title><rect x="1034.7" y="1123.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1037.7" y="1134.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (3 samples, 0.23%)</title><rect x="1035.6" y="1139.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1038.6" y="1150.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (3 samples, 0.23%)</title><rect x="1035.6" y="1123.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1038.6" y="1134.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (10 samples, 0.78%)</title><rect x="1038.4" y="1139.0" width="9.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1041.4" y="1150.0"></text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (1 samples, 0.08%)</title><rect x="1042.0" y="1123.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1045.0" y="1134.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (5 samples, 0.39%)</title><rect x="1043.0" y="1123.0" width="4.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1046.0" y="1134.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.08%)</title><rect x="1047.6" y="1139.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1050.6" y="1150.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.08%)</title><rect x="1048.5" y="1139.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1051.5" y="1150.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.08%)</title><rect x="1049.4" y="1139.0" width="0.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1052.4" y="1150.0"></text>
</g>
<g>
<title>Compile::Optimize() (128 samples, 9.97%)</title><rect x="1050.3" y="1171.0" width="117.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1053.3" y="1182.0">Compile::Optim..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (2 samples, 0.16%)</title><rect x="1050.3" y="1155.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1053.3" y="1166.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (2 samples, 0.16%)</title><rect x="1050.3" y="1139.0" width="1.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1053.3" y="1150.0"></text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.08%)</title><rect x="1052.1" y="1155.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1055.1" y="1166.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (1 samples, 0.08%)</title><rect x="1052.1" y="1139.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1055.1" y="1150.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.08%)</title><rect x="1052.1" y="1123.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1055.1" y="1134.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.08%)</title><rect x="1052.1" y="1107.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1055.1" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (4 samples, 0.31%)</title><rect x="1053.1" y="1155.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1056.1" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (4 samples, 0.31%)</title><rect x="1053.1" y="1139.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1056.1" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1054.0" y="1123.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1057.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.08%)</title><rect x="1054.0" y="1107.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1057.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (2 samples, 0.16%)</title><rect x="1054.9" y="1123.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1057.9" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1055.8" y="1107.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1058.8" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1055.8" y="1091.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1058.8" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="1055.8" y="1075.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1058.8" y="1086.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="1055.8" y="1059.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1058.8" y="1070.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (3 samples, 0.23%)</title><rect x="1056.7" y="1155.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1059.7" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (94 samples, 7.32%)</title><rect x="1059.5" y="1155.0" width="86.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1062.5" y="1166.0">PhaseIdeal..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (5 samples, 0.39%)</title><rect x="1059.5" y="1139.0" width="4.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1062.5" y="1150.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.16%)</title><rect x="1062.3" y="1123.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1065.3" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 0.47%)</title><rect x="1064.1" y="1139.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1067.1" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.08%)</title><rect x="1068.7" y="1123.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1071.7" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.08%)</title><rect x="1068.7" y="1107.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1071.7" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (67 samples, 5.22%)</title><rect x="1069.6" y="1139.0" width="61.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1072.6" y="1150.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (57 samples, 4.44%)</title><rect x="1078.8" y="1123.0" width="52.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1081.8" y="1134.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 0.23%)</title><rect x="1079.7" y="1107.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1082.7" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (52 samples, 4.05%)</title><rect x="1082.5" y="1107.0" width="47.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1085.5" y="1118.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (5 samples, 0.39%)</title><rect x="1124.8" y="1091.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1127.8" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1129.3" y="1091.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1132.3" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.08%)</title><rect x="1129.3" y="1075.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1132.3" y="1086.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.08%)</title><rect x="1130.3" y="1107.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1133.3" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (5 samples, 0.39%)</title><rect x="1131.2" y="1139.0" width="4.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1134.2" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (2 samples, 0.16%)</title><rect x="1133.9" y="1123.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1136.9" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (7 samples, 0.55%)</title><rect x="1135.8" y="1139.0" width="6.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1138.8" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.08%)</title><rect x="1139.5" y="1123.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1142.5" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::spinup(Node*, Node*, Node*, Node*, Node*, small_cache*) (1 samples, 0.08%)</title><rect x="1139.5" y="1107.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1142.5" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.08%)</title><rect x="1140.4" y="1123.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1143.4" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.08%)</title><rect x="1141.3" y="1123.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1144.3" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.23%)</title><rect x="1142.2" y="1139.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1145.2" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.23%)</title><rect x="1142.2" y="1123.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1145.2" y="1134.0"></text>
</g>
<g>
<title>IfTrueNode::Opcode() const (1 samples, 0.08%)</title><rect x="1143.1" y="1107.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1146.1" y="1118.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1144.0" y="1107.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1147.0" y="1118.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1144.0" y="1091.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1147.0" y="1102.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1144.0" y="1075.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1147.0" y="1086.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1144.0" y="1059.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1147.0" y="1070.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.08%)</title><rect x="1145.0" y="1139.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1148.0" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (23 samples, 1.79%)</title><rect x="1145.9" y="1155.0" width="21.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1148.9" y="1166.0">P..</text>
</g>
<g>
<title>Node::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1145.9" y="1139.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.9" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (22 samples, 1.71%)</title><rect x="1146.8" y="1139.0" width="20.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1149.8" y="1150.0"></text>
</g>
<g>
<title>CmpPNode::sub(Type const*, Type const*) const (1 samples, 0.08%)</title><rect x="1147.7" y="1123.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1150.7" y="1134.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (2 samples, 0.16%)</title><rect x="1148.6" y="1123.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.6" y="1134.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1149.6" y="1107.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1152.6" y="1118.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (3 samples, 0.23%)</title><rect x="1150.5" y="1123.0" width="2.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1153.5" y="1134.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (3 samples, 0.23%)</title><rect x="1150.5" y="1107.0" width="2.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1153.5" y="1118.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (3 samples, 0.23%)</title><rect x="1150.5" y="1091.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.5" y="1102.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.16%)</title><rect x="1151.4" y="1075.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.4" y="1086.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1153.2" y="1123.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.2" y="1134.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1153.2" y="1107.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1156.2" y="1118.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1153.2" y="1091.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1156.2" y="1102.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1153.2" y="1075.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1156.2" y="1086.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_boxed_value_offset(int) const (1 samples, 0.08%)</title><rect x="1153.2" y="1059.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1156.2" y="1070.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1154.2" y="1123.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1157.2" y="1134.0"></text>
</g>
<g>
<title>MergeMemNode::hash() const (1 samples, 0.08%)</title><rect x="1155.1" y="1123.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1158.1" y="1134.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.16%)</title><rect x="1156.0" y="1123.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.0" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (3 samples, 0.23%)</title><rect x="1157.8" y="1123.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.8" y="1134.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1158.8" y="1107.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.8" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.08%)</title><rect x="1159.7" y="1107.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.7" y="1118.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1160.6" y="1123.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.6" y="1134.0"></text>
</g>
<g>
<title>PhiNode::Identity(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1161.5" y="1123.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.5" y="1134.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1162.4" y="1123.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.4" y="1134.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.08%)</title><rect x="1163.3" y="1123.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.3" y="1134.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.08%)</title><rect x="1163.3" y="1107.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.3" y="1118.0"></text>
</g>
<g>
<title>ProjNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1164.3" y="1123.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.3" y="1134.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1165.2" y="1123.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.2" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1165.2" y="1107.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1168.2" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.08%)</title><rect x="1165.2" y="1091.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.2" y="1102.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.08%)</title><rect x="1165.2" y="1075.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.2" y="1086.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1166.1" y="1123.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.1" y="1134.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.08%)</title><rect x="1166.1" y="1107.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.1" y="1118.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1166.1" y="1091.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.1" y="1102.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1166.1" y="1075.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.1" y="1086.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1166.1" y="1059.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.1" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1166.1" y="1043.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.1" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1166.1" y="1027.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.1" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1166.1" y="1011.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.1" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1166.1" y="995.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.1" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1166.1" y="979.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.1" y="990.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1166.1" y="963.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.1" y="974.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1166.1" y="947.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1169.1" y="958.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.08%)</title><rect x="1167.0" y="1155.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.0" y="1166.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.08%)</title><rect x="1167.0" y="1139.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.0" y="1150.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.08%)</title><rect x="1167.0" y="1123.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.0" y="1134.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.08%)</title><rect x="1167.0" y="1107.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.0" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1167.0" y="1091.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.0" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (17 samples, 1.32%)</title><rect x="1167.9" y="1171.0" width="15.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.9" y="1182.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (17 samples, 1.32%)</title><rect x="1167.9" y="1155.0" width="15.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.9" y="1166.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (17 samples, 1.32%)</title><rect x="1167.9" y="1139.0" width="15.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.9" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_block() (17 samples, 1.32%)</title><rect x="1167.9" y="1123.0" width="15.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.9" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (17 samples, 1.32%)</title><rect x="1167.9" y="1107.0" width="15.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.9" y="1118.0"></text>
</g>
<g>
<title>Parse::do_call() (17 samples, 1.32%)</title><rect x="1167.9" y="1091.0" width="15.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.9" y="1102.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1167.9" y="1075.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.9" y="1086.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1167.9" y="1059.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.9" y="1070.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1167.9" y="1043.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.9" y="1054.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1167.9" y="1027.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.9" y="1038.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1167.9" y="1011.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.9" y="1022.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1167.9" y="995.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.9" y="1006.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1167.9" y="979.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.9" y="990.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_exceptions(GrowableArray&lt;ciTypeFlow::Block*&gt;*, GrowableArray&lt;ciInstanceKlass*&gt;*, ciTypeFlow::StateVector*) (1 samples, 0.08%)</title><rect x="1167.9" y="963.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.9" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (14 samples, 1.09%)</title><rect x="1168.9" y="1075.0" width="12.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.9" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (14 samples, 1.09%)</title><rect x="1168.9" y="1059.0" width="12.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.9" y="1070.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.08%)</title><rect x="1168.9" y="1043.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.9" y="1054.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.08%)</title><rect x="1168.9" y="1027.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.9" y="1038.0"></text>
</g>
<g>
<title>GraphKit::replace_in_map(Node*, Node*) (1 samples, 0.08%)</title><rect x="1168.9" y="1011.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.9" y="1022.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.08%)</title><rect x="1168.9" y="995.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.9" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (13 samples, 1.01%)</title><rect x="1169.8" y="1043.0" width="11.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1172.8" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (13 samples, 1.01%)</title><rect x="1169.8" y="1027.0" width="11.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.8" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (13 samples, 1.01%)</title><rect x="1169.8" y="1011.0" width="11.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.8" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (13 samples, 1.01%)</title><rect x="1169.8" y="995.0" width="11.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.8" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.62%)</title><rect x="1169.8" y="979.0" width="7.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.8" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.62%)</title><rect x="1169.8" y="963.0" width="7.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.8" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.62%)</title><rect x="1169.8" y="947.0" width="7.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.8" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.62%)</title><rect x="1169.8" y="931.0" width="7.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.8" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.62%)</title><rect x="1169.8" y="915.0" width="7.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.8" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.62%)</title><rect x="1169.8" y="899.0" width="7.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.8" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.62%)</title><rect x="1169.8" y="883.0" width="7.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.8" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.62%)</title><rect x="1169.8" y="867.0" width="7.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.8" y="878.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.08%)</title><rect x="1169.8" y="851.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.8" y="862.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.08%)</title><rect x="1169.8" y="835.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.55%)</title><rect x="1170.7" y="851.0" width="6.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.55%)</title><rect x="1170.7" y="835.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.7" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.55%)</title><rect x="1170.7" y="819.0" width="6.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.7" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.47%)</title><rect x="1170.7" y="803.0" width="5.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.7" y="814.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1170.7" y="787.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.7" y="798.0"></text>
</g>
<g>
<title>ciMethod::call_profile_at_bci(int) (1 samples, 0.08%)</title><rect x="1170.7" y="771.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.7" y="782.0"></text>
</g>
<g>
<title>ciMethodData::bci_to_data(int, ciMethod*) (1 samples, 0.08%)</title><rect x="1170.7" y="755.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.7" y="766.0"></text>
</g>
<g>
<title>ciMethodData::data_at(int) (1 samples, 0.08%)</title><rect x="1170.7" y="739.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1173.7" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.23%)</title><rect x="1171.6" y="787.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.6" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.23%)</title><rect x="1171.6" y="771.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.23%)</title><rect x="1171.6" y="755.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.23%)</title><rect x="1171.6" y="739.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.23%)</title><rect x="1171.6" y="723.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1171.6" y="707.0" width="1.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.6" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1171.6" y="691.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.6" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1171.6" y="675.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1171.6" y="659.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1171.6" y="643.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1171.6" y="627.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1171.6" y="611.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.6" y="622.0"></text>
</g>
<g>
<title>Compile::optimize_inlining(ciMethod*, int, ciInstanceKlass*, ciMethod*, TypeOopPtr const*, bool) (1 samples, 0.08%)</title><rect x="1171.6" y="595.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.6" y="606.0"></text>
</g>
<g>
<title>Dependencies::assert_common_2(Dependencies::DepType, ciBaseObject*, ciBaseObject*) (1 samples, 0.08%)</title><rect x="1171.6" y="579.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.6" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1172.5" y="595.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.5" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1172.5" y="579.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1172.5" y="563.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1172.5" y="547.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1172.5" y="531.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1172.5" y="515.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.5" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1172.5" y="499.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.5" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1172.5" y="483.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1172.5" y="467.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1172.5" y="451.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1172.5" y="435.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1172.5" y="419.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.5" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1172.5" y="403.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.5" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1172.5" y="387.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1172.5" y="371.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1172.5" y="355.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1172.5" y="339.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.5" y="350.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1172.5" y="323.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1172.5" y="307.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.5" y="318.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.08%)</title><rect x="1172.5" y="291.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.5" y="302.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.08%)</title><rect x="1172.5" y="275.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.5" y="286.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.08%)</title><rect x="1172.5" y="259.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.5" y="270.0"></text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 0.08%)</title><rect x="1172.5" y="243.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.5" y="254.0"></text>
</g>
<g>
<title>IdealKit::do_memory_merge(Node*, Node*) (1 samples, 0.08%)</title><rect x="1172.5" y="227.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.5" y="238.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.08%)</title><rect x="1173.5" y="707.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.5" y="718.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.08%)</title><rect x="1173.5" y="691.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.5" y="702.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.08%)</title><rect x="1173.5" y="675.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.5" y="686.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.08%)</title><rect x="1173.5" y="659.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.5" y="670.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.08%)</title><rect x="1173.5" y="643.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.5" y="654.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.08%)</title><rect x="1173.5" y="627.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.5" y="638.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.08%)</title><rect x="1173.5" y="611.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.5" y="622.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.08%)</title><rect x="1173.5" y="595.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.5" y="606.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.08%)</title><rect x="1173.5" y="579.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.5" y="590.0"></text>
</g>
<g>
<title>pthread_self (1 samples, 0.08%)</title><rect x="1173.5" y="563.0" width="0.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1176.5" y="574.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1174.4" y="787.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.4" y="798.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.08%)</title><rect x="1174.4" y="771.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.4" y="782.0"></text>
</g>
<g>
<title>IfNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1174.4" y="755.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.4" y="766.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1175.3" y="787.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.3" y="798.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1175.3" y="771.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.3" y="782.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1175.3" y="755.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.3" y="766.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.08%)</title><rect x="1175.3" y="739.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.3" y="750.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.08%)</title><rect x="1175.3" y="723.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1176.2" y="803.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.2" y="814.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1176.2" y="787.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.2" y="798.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.08%)</title><rect x="1176.2" y="771.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.2" y="782.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.08%)</title><rect x="1176.2" y="755.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.2" y="766.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1176.2" y="739.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.2" y="750.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1176.2" y="723.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.2" y="734.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1176.2" y="707.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.2" y="718.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (5 samples, 0.39%)</title><rect x="1177.1" y="979.0" width="4.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.1" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.39%)</title><rect x="1177.1" y="963.0" width="4.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.1" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.39%)</title><rect x="1177.1" y="947.0" width="4.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.1" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.39%)</title><rect x="1177.1" y="931.0" width="4.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.1" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.39%)</title><rect x="1177.1" y="915.0" width="4.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.1" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.39%)</title><rect x="1177.1" y="899.0" width="4.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.1" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.39%)</title><rect x="1177.1" y="883.0" width="4.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.1" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.39%)</title><rect x="1177.1" y="867.0" width="4.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.1" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.39%)</title><rect x="1177.1" y="851.0" width="4.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.1" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.39%)</title><rect x="1177.1" y="835.0" width="4.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.1" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.39%)</title><rect x="1177.1" y="819.0" width="4.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.1" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.39%)</title><rect x="1177.1" y="803.0" width="4.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.1" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.39%)</title><rect x="1177.1" y="787.0" width="4.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.1" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.39%)</title><rect x="1177.1" y="771.0" width="4.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.1" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.39%)</title><rect x="1177.1" y="755.0" width="4.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.1" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.39%)</title><rect x="1177.1" y="739.0" width="4.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.1" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.39%)</title><rect x="1177.1" y="723.0" width="4.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.39%)</title><rect x="1177.1" y="707.0" width="4.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.39%)</title><rect x="1177.1" y="691.0" width="4.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.1" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.31%)</title><rect x="1177.1" y="675.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.1" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.31%)</title><rect x="1177.1" y="659.0" width="3.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.1" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.31%)</title><rect x="1177.1" y="643.0" width="3.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.31%)</title><rect x="1177.1" y="627.0" width="3.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.31%)</title><rect x="1177.1" y="611.0" width="3.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.31%)</title><rect x="1177.1" y="595.0" width="3.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.1" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.23%)</title><rect x="1177.1" y="579.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.1" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.23%)</title><rect x="1177.1" y="563.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.23%)</title><rect x="1177.1" y="547.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.23%)</title><rect x="1177.1" y="531.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.23%)</title><rect x="1177.1" y="515.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.23%)</title><rect x="1177.1" y="499.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.1" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1177.1" y="483.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.1" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1177.1" y="467.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1177.1" y="451.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1177.1" y="435.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1177.1" y="419.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1177.1" y="403.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.1" y="414.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1177.1" y="387.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.1" y="398.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1177.1" y="371.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.1" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1178.1" y="387.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.1" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1178.1" y="371.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1178.1" y="355.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1178.1" y="339.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1178.1" y="323.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1178.1" y="307.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.1" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1178.1" y="291.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.1" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1178.1" y="275.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1178.1" y="259.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1178.1" y="243.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1178.1" y="227.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1178.1" y="211.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.1" y="222.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1178.1" y="195.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.1" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1178.1" y="179.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.1" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1178.1" y="163.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.1" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1178.1" y="147.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.1" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1178.1" y="131.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.1" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1178.1" y="115.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.1" y="126.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1178.1" y="99.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.1" y="110.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1178.1" y="83.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.1" y="94.0"></text>
</g>
<g>
<title>GraphKit::set_results_for_java_call(CallJavaNode*, bool) (1 samples, 0.08%)</title><rect x="1178.1" y="67.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.1" y="78.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1178.1" y="51.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.1" y="62.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.08%)</title><rect x="1178.1" y="35.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.1" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.0" y="483.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.0" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.0" y="467.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.0" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1179.0" y="451.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1179.0" y="435.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1179.0" y="419.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1179.0" y="403.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1179.0" y="387.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.0" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.0" y="371.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.0" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1179.0" y="355.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1179.0" y="339.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.0" y="350.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.08%)</title><rect x="1179.0" y="323.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.0" y="334.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1179.0" y="307.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.0" y="318.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1179.0" y="291.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.0" y="302.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.08%)</title><rect x="1179.0" y="275.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.0" y="286.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.9" y="579.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.9" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.9" y="563.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.9" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1179.9" y="547.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1179.9" y="531.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1179.9" y="515.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1179.9" y="499.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1179.9" y="483.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.9" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.9" y="467.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.9" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1179.9" y="451.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1179.9" y="435.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1179.9" y="419.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1179.9" y="403.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1179.9" y="387.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.9" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.9" y="371.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.9" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1179.9" y="355.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1179.9" y="339.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1179.9" y="323.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1179.9" y="307.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.08%)</title><rect x="1179.9" y="291.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.9" y="302.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.08%)</title><rect x="1179.9" y="275.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.9" y="286.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.08%)</title><rect x="1179.9" y="259.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.9" y="270.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.08%)</title><rect x="1179.9" y="243.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.9" y="254.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1179.9" y="227.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.9" y="238.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1179.9" y="211.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.9" y="222.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.08%)</title><rect x="1179.9" y="195.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.9" y="206.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.8" y="675.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.8" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.8" y="659.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.8" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1180.8" y="643.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1180.8" y="627.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1180.8" y="611.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1180.8" y="595.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1180.8" y="579.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.8" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.8" y="563.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.8" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1180.8" y="547.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1180.8" y="531.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1180.8" y="515.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1180.8" y="499.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1180.8" y="483.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.8" y="494.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.08%)</title><rect x="1180.8" y="467.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.8" y="478.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.08%)</title><rect x="1180.8" y="451.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.8" y="462.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.08%)</title><rect x="1180.8" y="435.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.8" y="446.0"></text>
</g>
<g>
<title>ciBytecodeStream::reset_to_bci(int) (1 samples, 0.08%)</title><rect x="1180.8" y="419.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.8" y="430.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.7" y="1075.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.7" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.7" y="1059.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.7" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.7" y="1043.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.7" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.7" y="1027.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.7" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.7" y="1011.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.7" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.7" y="995.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.7" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1181.7" y="979.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.7" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.7" y="963.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.7" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.7" y="947.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.7" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.7" y="931.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.7" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.7" y="915.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.7" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.7" y="899.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.7" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1181.7" y="883.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.7" y="894.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.7" y="867.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.7" y="878.0"></text>
</g>
<g>
<title>GraphKit::add_exception_states_from(JVMState*) (1 samples, 0.08%)</title><rect x="1181.7" y="851.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.7" y="862.0"></text>
</g>
<g>
<title>SafePointNode::next_exception() const (1 samples, 0.08%)</title><rect x="1181.7" y="835.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.7" y="846.0"></text>
</g>
<g>
<title>ciMethod::return_profiled_type(int) (1 samples, 0.08%)</title><rect x="1182.6" y="1075.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.6" y="1086.0"></text>
</g>
<g>
<title>MethodData::profile_return() (1 samples, 0.08%)</title><rect x="1182.6" y="1059.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.6" y="1070.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.08%)</title><rect x="1183.6" y="1171.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.6" y="1182.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.08%)</title><rect x="1183.6" y="1155.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.6" y="1166.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.08%)</title><rect x="1184.5" y="1203.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.5" y="1214.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.08%)</title><rect x="1184.5" y="1187.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.5" y="1198.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.08%)</title><rect x="1184.5" y="1171.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.5" y="1182.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.08%)</title><rect x="1184.5" y="1155.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.5" y="1166.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.08%)</title><rect x="1184.5" y="1139.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.5" y="1150.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.08%)</title><rect x="1184.5" y="1123.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.5" y="1134.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (1 samples, 0.08%)</title><rect x="1184.5" y="1107.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.5" y="1118.0"></text>
</g>
<g>
<title>LIRGenerator::do_ProfileInvoke(ProfileInvoke*) (1 samples, 0.08%)</title><rect x="1184.5" y="1091.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.5" y="1102.0"></text>
</g>
<g>
<title>ciMethod::is_accessor() const (1 samples, 0.08%)</title><rect x="1184.5" y="1075.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.5" y="1086.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.08%)</title><rect x="1185.4" y="1235.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.4" y="1246.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.08%)</title><rect x="1185.4" y="1219.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.4" y="1230.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.08%)</title><rect x="1185.4" y="1203.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.4" y="1214.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.08%)</title><rect x="1185.4" y="1187.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1188.4" y="1198.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.08%)</title><rect x="1185.4" y="1171.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.4" y="1182.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.08%)</title><rect x="1185.4" y="1155.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.4" y="1166.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.23%)</title><rect x="1186.3" y="1267.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.3" y="1278.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.23%)</title><rect x="1186.3" y="1251.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.3" y="1262.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.08%)</title><rect x="1187.2" y="1235.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.2" y="1246.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.08%)</title><rect x="1188.2" y="1235.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.2" y="1246.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.08%)</title><rect x="1188.2" y="1219.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.2" y="1230.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.08%)</title><rect x="1188.2" y="1203.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.2" y="1214.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.08%)</title><rect x="1188.2" y="1187.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.2" y="1198.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.08%)</title><rect x="1188.2" y="1171.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.2" y="1182.0"></text>
</g>
<g>
<title>ReferenceProcessor::enqueue_discovered_references(AbstractRefProcTaskExecutor*) (1 samples, 0.08%)</title><rect x="1188.2" y="1155.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.2" y="1166.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.08%)</title><rect x="1189.1" y="1267.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1192.1" y="1278.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (1 samples, 0.08%)</title><rect x="1189.1" y="1251.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1192.1" y="1262.0"></text>
</g>
<g>
<title>StatSamplerTask::task() (1 samples, 0.08%)</title><rect x="1189.1" y="1235.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1192.1" y="1246.0"></text>
</g>
<g>
<title>HighResTimeSampler::take_sample() (1 samples, 0.08%)</title><rect x="1189.1" y="1219.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1192.1" y="1230.0"></text>
</g>
</g>
</svg>
