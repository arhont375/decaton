<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="838" onload="init(evt)" viewBox="0 0 1200 838" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="821"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="821"> </text>
<g id="frames">
<g>
<title>all (337 samples, 100.00%)</title><rect x="10.0" y="787.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="798.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (23 samples, 6.82%)</title><rect x="10.0" y="771.0" width="80.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="782.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (2 samples, 0.59%)</title><rect x="10.0" y="755.0" width="7.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (2 samples, 0.59%)</title><rect x="10.0" y="739.0" width="7.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (2 samples, 0.59%)</title><rect x="10.0" y="723.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (2 samples, 0.59%)</title><rect x="10.0" y="707.0" width="7.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.doCommitOffsetsAsync (1 samples, 0.30%)</title><rect x="10.0" y="691.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.sendOffsetCommitRequest (1 samples, 0.30%)</title><rect x="10.0" y="675.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.30%)</title><rect x="10.0" y="659.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.30%)</title><rect x="10.0" y="643.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.wakeup (1 samples, 0.30%)</title><rect x="10.0" y="627.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.wakeup (1 samples, 0.30%)</title><rect x="10.0" y="611.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.wakeup (1 samples, 0.30%)</title><rect x="10.0" y="595.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.interrupt (1 samples, 0.30%)</title><rect x="10.0" y="579.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.interrupt (1 samples, 0.30%)</title><rect x="10.0" y="563.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>__write (1 samples, 0.30%)</title><rect x="10.0" y="547.0" width="3.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.30%)</title><rect x="13.5" y="691.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.30%)</title><rect x="13.5" y="675.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.5" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.30%)</title><rect x="13.5" y="659.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.5" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.30%)</title><rect x="13.5" y="643.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.5" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.30%)</title><rect x="13.5" y="627.0" width="3.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="16.5" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.30%)</title><rect x="13.5" y="611.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="16.5" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.30%)</title><rect x="13.5" y="595.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.5" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.30%)</title><rect x="13.5" y="579.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="16.5" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.30%)</title><rect x="13.5" y="563.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.5" y="574.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.30%)</title><rect x="13.5" y="547.0" width="3.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="16.5" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.30%)</title><rect x="13.5" y="531.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="16.5" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.30%)</title><rect x="13.5" y="515.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="16.5" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.writev (1 samples, 0.30%)</title><rect x="13.5" y="499.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="16.5" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.writev0 (1 samples, 0.30%)</title><rect x="13.5" y="483.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="16.5" y="494.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_writev0 (1 samples, 0.30%)</title><rect x="13.5" y="467.0" width="3.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="16.5" y="478.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.30%)</title><rect x="13.5" y="451.0" width="3.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="16.5" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (21 samples, 6.23%)</title><rect x="17.0" y="755.0" width="73.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.0" y="766.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (2 samples, 0.59%)</title><rect x="17.0" y="739.0" width="7.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.0" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (2 samples, 0.59%)</title><rect x="17.0" y="723.0" width="7.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.0" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.59%)</title><rect x="17.0" y="707.0" width="7.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.0" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.59%)</title><rect x="17.0" y="691.0" width="7.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="20.0" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.59%)</title><rect x="17.0" y="675.0" width="7.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.0" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.59%)</title><rect x="17.0" y="659.0" width="7.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.0" y="670.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.59%)</title><rect x="17.0" y="643.0" width="7.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="20.0" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (2 samples, 0.59%)</title><rect x="17.0" y="627.0" width="7.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.0" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.59%)</title><rect x="17.0" y="611.0" width="7.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="20.0" y="622.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.59%)</title><rect x="17.0" y="595.0" width="7.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.0" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$271/885561174.test (1 samples, 0.30%)</title><rect x="17.0" y="579.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="20.0" y="590.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.30%)</title><rect x="20.5" y="579.0" width="3.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="23.5" y="590.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 0.89%)</title><rect x="24.0" y="739.0" width="10.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="27.0" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$268/481347596.accept (2 samples, 0.59%)</title><rect x="24.0" y="723.0" width="7.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="27.0" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (2 samples, 0.59%)</title><rect x="24.0" y="707.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="27.0" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (1 samples, 0.30%)</title><rect x="24.0" y="691.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="27.0" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (1 samples, 0.30%)</title><rect x="24.0" y="675.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="27.0" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (1 samples, 0.30%)</title><rect x="24.0" y="659.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (1 samples, 0.30%)</title><rect x="24.0" y="643.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="27.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.30%)</title><rect x="24.0" y="627.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="27.0" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.30%)</title><rect x="24.0" y="611.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="27.0" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (1 samples, 0.30%)</title><rect x="27.5" y="691.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="30.5" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.30%)</title><rect x="27.5" y="675.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="30.5" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.30%)</title><rect x="31.0" y="723.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="34.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.30%)</title><rect x="31.0" y="707.0" width="3.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="34.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.30%)</title><rect x="31.0" y="691.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="34.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.30%)</title><rect x="31.0" y="675.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="34.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (16 samples, 4.75%)</title><rect x="34.5" y="739.0" width="56.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="37.5" y="750.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (15 samples, 4.45%)</title><rect x="34.5" y="723.0" width="52.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="37.5" y="734.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (12 samples, 3.56%)</title><rect x="34.5" y="707.0" width="42.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="37.5" y="718.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (7 samples, 2.08%)</title><rect x="34.5" y="691.0" width="24.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="37.5" y="702.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (6 samples, 1.78%)</title><rect x="38.0" y="675.0" width="21.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="41.0" y="686.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 1.19%)</title><rect x="38.0" y="659.0" width="14.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="41.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (4 samples, 1.19%)</title><rect x="38.0" y="643.0" width="14.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="41.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.30%)</title><rect x="38.0" y="627.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="41.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.30%)</title><rect x="38.0" y="611.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="41.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.30%)</title><rect x="38.0" y="595.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="41.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.30%)</title><rect x="38.0" y="579.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="41.0" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.30%)</title><rect x="38.0" y="563.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="41.0" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.30%)</title><rect x="38.0" y="547.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="41.0" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/WindowedSum.update (1 samples, 0.30%)</title><rect x="38.0" y="531.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="41.0" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.30%)</title><rect x="41.5" y="627.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="44.5" y="638.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.30%)</title><rect x="41.5" y="611.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="44.5" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.30%)</title><rect x="41.5" y="595.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="44.5" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.30%)</title><rect x="41.5" y="579.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="44.5" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.hashCode (1 samples, 0.30%)</title><rect x="41.5" y="563.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="44.5" y="574.0"></text>
</g>
<g>
<title>java/util/Objects.hash (1 samples, 0.30%)</title><rect x="41.5" y="547.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="44.5" y="558.0"></text>
</g>
<g>
<title>java/util/Arrays.hashCode (1 samples, 0.30%)</title><rect x="41.5" y="531.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="44.5" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.30%)</title><rect x="45.0" y="627.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="48.0" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.30%)</title><rect x="45.0" y="611.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="48.0" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.30%)</title><rect x="45.0" y="595.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="48.0" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.30%)</title><rect x="45.0" y="579.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="48.0" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.30%)</title><rect x="45.0" y="563.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="48.0" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.30%)</title><rect x="45.0" y="547.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="48.0" y="558.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::write_region_work(MemRegion) (1 samples, 0.30%)</title><rect x="45.0" y="531.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="48.0" y="542.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::invalidate(MemRegion, bool) (1 samples, 0.30%)</title><rect x="45.0" y="515.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="48.0" y="526.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.30%)</title><rect x="45.0" y="499.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="48.0" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.30%)</title><rect x="48.5" y="627.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="51.5" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.30%)</title><rect x="48.5" y="611.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="51.5" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.30%)</title><rect x="48.5" y="595.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="51.5" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.30%)</title><rect x="48.5" y="579.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="51.5" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.30%)</title><rect x="48.5" y="563.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="51.5" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.30%)</title><rect x="48.5" y="547.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="51.5" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.30%)</title><rect x="52.0" y="659.0" width="3.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="55.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.30%)</title><rect x="52.0" y="643.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="55.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.30%)</title><rect x="52.0" y="627.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="55.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.30%)</title><rect x="52.0" y="611.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="55.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture$1.onSuccess (1 samples, 0.30%)</title><rect x="52.0" y="595.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="55.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$CoordinatorResponseHandler.onSuccess (1 samples, 0.30%)</title><rect x="52.0" y="579.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="55.0" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$CoordinatorResponseHandler.onSuccess (1 samples, 0.30%)</title><rect x="52.0" y="563.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="55.0" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatResponseHandler.handle (1 samples, 0.30%)</title><rect x="52.0" y="547.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="55.0" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatResponseHandler.handle (1 samples, 0.30%)</title><rect x="52.0" y="531.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="55.0" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.30%)</title><rect x="52.0" y="515.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="55.0" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.30%)</title><rect x="52.0" y="499.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="55.0" y="510.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.30%)</title><rect x="52.0" y="483.0" width="3.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="55.0" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.maybeThrowInterruptException (1 samples, 0.30%)</title><rect x="55.5" y="659.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="58.5" y="670.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.30%)</title><rect x="55.5" y="643.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="58.5" y="654.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.30%)</title><rect x="55.5" y="627.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="58.5" y="638.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.30%)</title><rect x="55.5" y="611.0" width="3.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="58.5" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (5 samples, 1.48%)</title><rect x="59.0" y="691.0" width="17.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="62.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 0.89%)</title><rect x="62.5" y="675.0" width="10.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="65.5" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 0.89%)</title><rect x="62.5" y="659.0" width="10.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="65.5" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 0.89%)</title><rect x="62.5" y="643.0" width="10.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="65.5" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.30%)</title><rect x="66.0" y="627.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="69.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.30%)</title><rect x="66.0" y="611.0" width="3.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="69.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.30%)</title><rect x="66.0" y="595.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="69.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.30%)</title><rect x="66.0" y="579.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="69.0" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.30%)</title><rect x="66.0" y="563.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="69.0" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.30%)</title><rect x="66.0" y="547.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="69.0" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.30%)</title><rect x="66.0" y="531.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="69.0" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.30%)</title><rect x="66.0" y="515.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="69.0" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.30%)</title><rect x="69.5" y="627.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="72.5" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.30%)</title><rect x="69.5" y="611.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="72.5" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.30%)</title><rect x="69.5" y="595.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="72.5" y="606.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.30%)</title><rect x="69.5" y="579.0" width="3.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="72.5" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.30%)</title><rect x="73.0" y="675.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="76.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.59%)</title><rect x="76.5" y="707.0" width="7.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="79.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.59%)</title><rect x="76.5" y="691.0" width="7.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="79.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.59%)</title><rect x="76.5" y="675.0" width="7.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="79.5" y="686.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.30%)</title><rect x="76.5" y="659.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="79.5" y="670.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.30%)</title><rect x="76.5" y="643.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="79.5" y="654.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.30%)</title><rect x="76.5" y="627.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="79.5" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.30%)</title><rect x="80.0" y="659.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="83.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.30%)</title><rect x="80.0" y="643.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="83.0" y="654.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.30%)</title><rect x="80.0" y="627.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="83.0" y="638.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.30%)</title><rect x="80.0" y="611.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="83.0" y="622.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.30%)</title><rect x="80.0" y="595.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="83.0" y="606.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.30%)</title><rect x="80.0" y="579.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="83.0" y="590.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.30%)</title><rect x="80.0" y="563.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="83.0" y="574.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.30%)</title><rect x="80.0" y="547.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="83.0" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.30%)</title><rect x="83.5" y="707.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="86.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.30%)</title><rect x="87.0" y="723.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="90.0" y="734.0"></text>
</g>
<g>
<title>java/lang/Thread.run (246 samples, 73.00%)</title><rect x="90.5" y="771.0" width="861.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="93.5" y="782.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (246 samples, 73.00%)</title><rect x="90.5" y="755.0" width="861.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="93.5" y="766.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (246 samples, 73.00%)</title><rect x="90.5" y="739.0" width="861.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="93.5" y="750.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$288/1041676022.run (232 samples, 68.84%)</title><rect x="97.5" y="723.0" width="812.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="100.5" y="734.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$288/1041676022.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62 (232 samples, 68.84%)</title><rect x="97.5" y="707.0" width="812.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="100.5" y="718.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (232 samples, 68.84%)</title><rect x="97.5" y="691.0" width="812.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="100.5" y="702.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (232 samples, 68.84%)</title><rect x="97.5" y="675.0" width="812.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="100.5" y="686.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (7 samples, 2.08%)</title><rect x="108.0" y="659.0" width="24.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="111.0" y="670.0">c..</text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (7 samples, 2.08%)</title><rect x="108.0" y="643.0" width="24.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="111.0" y="654.0">j..</text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 2.08%)</title><rect x="108.0" y="627.0" width="24.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="111.0" y="638.0">j..</text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.59%)</title><rect x="108.0" y="611.0" width="7.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="111.0" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 1.48%)</title><rect x="115.0" y="611.0" width="17.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="118.0" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (28 samples, 8.31%)</title><rect x="132.6" y="659.0" width="98.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="135.6" y="670.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (1 samples, 0.30%)</title><rect x="185.1" y="643.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="188.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 3.56%)</title><rect x="188.6" y="643.0" width="42.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="191.6" y="654.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 3.56%)</title><rect x="188.6" y="627.0" width="42.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="191.6" y="638.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (12 samples, 3.56%)</title><rect x="188.6" y="611.0" width="42.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="191.6" y="622.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.59%)</title><rect x="188.6" y="595.0" width="7.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="191.6" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.59%)</title><rect x="188.6" y="579.0" width="7.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="191.6" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 0.59%)</title><rect x="188.6" y="563.0" width="7.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="191.6" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$299/1713666771.accept (1 samples, 0.30%)</title><rect x="192.1" y="547.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="195.1" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (10 samples, 2.97%)</title><rect x="195.6" y="595.0" width="35.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="198.6" y="606.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$299/1713666771.accept (10 samples, 2.97%)</title><rect x="195.6" y="579.0" width="35.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="198.6" y="590.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (10 samples, 2.97%)</title><rect x="195.6" y="563.0" width="35.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="198.6" y="574.0">com..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (10 samples, 2.97%)</title><rect x="195.6" y="547.0" width="35.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="198.6" y="558.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (10 samples, 2.97%)</title><rect x="195.6" y="531.0" width="35.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="198.6" y="542.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (10 samples, 2.97%)</title><rect x="195.6" y="515.0" width="35.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="198.6" y="526.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (3 samples, 0.89%)</title><rect x="195.6" y="499.0" width="10.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="198.6" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (3 samples, 0.89%)</title><rect x="195.6" y="483.0" width="10.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="198.6" y="494.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.59%)</title><rect x="199.1" y="467.0" width="7.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="202.1" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 2.08%)</title><rect x="206.1" y="499.0" width="24.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="209.1" y="510.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (32 samples, 9.50%)</title><rect x="230.6" y="659.0" width="112.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="233.6" y="670.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$45/1556995360.extract (32 samples, 9.50%)</title><rect x="230.6" y="643.0" width="112.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="233.6" y="654.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (32 samples, 9.50%)</title><rect x="230.6" y="627.0" width="112.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="233.6" y="638.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (32 samples, 9.50%)</title><rect x="230.6" y="611.0" width="112.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="233.6" y="622.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (32 samples, 9.50%)</title><rect x="230.6" y="595.0" width="112.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="233.6" y="606.0">com/linecorp/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (32 samples, 9.50%)</title><rect x="230.6" y="579.0" width="112.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="233.6" y="590.0">com/fasterxml/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (11 samples, 3.26%)</title><rect x="230.6" y="563.0" width="38.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="233.6" y="574.0">com..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.30%)</title><rect x="241.1" y="547.0" width="3.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="244.1" y="558.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.30%)</title><rect x="241.1" y="531.0" width="3.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="244.1" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (3 samples, 0.89%)</title><rect x="244.6" y="547.0" width="10.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="247.6" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (3 samples, 0.89%)</title><rect x="244.6" y="531.0" width="10.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="247.6" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.59%)</title><rect x="248.1" y="515.0" width="7.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="251.1" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.59%)</title><rect x="248.1" y="499.0" width="7.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="251.1" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.59%)</title><rect x="248.1" y="483.0" width="7.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="251.1" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.59%)</title><rect x="248.1" y="467.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="251.1" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.59%)</title><rect x="248.1" y="451.0" width="7.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="251.1" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (4 samples, 1.19%)</title><rect x="255.1" y="547.0" width="14.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="258.1" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.30%)</title><rect x="265.6" y="531.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="268.6" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.30%)</title><rect x="265.6" y="515.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="268.6" y="526.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.30%)</title><rect x="265.6" y="499.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="268.6" y="510.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.30%)</title><rect x="265.6" y="483.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="268.6" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.30%)</title><rect x="265.6" y="467.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="268.6" y="478.0"></text>
</g>
<g>
<title>G1CollectedHeap::max_tlab_size() const (1 samples, 0.30%)</title><rect x="265.6" y="451.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="268.6" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (19 samples, 5.64%)</title><rect x="269.1" y="563.0" width="66.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="272.1" y="574.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.30%)</title><rect x="269.1" y="547.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="272.1" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.30%)</title><rect x="272.6" y="547.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="275.6" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.30%)</title><rect x="276.1" y="547.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="279.1" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.30%)</title><rect x="276.1" y="531.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="279.1" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.59%)</title><rect x="279.6" y="547.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="282.6" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.59%)</title><rect x="279.6" y="531.0" width="7.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="282.6" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.30%)</title><rect x="283.1" y="515.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="286.1" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.30%)</title><rect x="283.1" y="499.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="286.1" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.30%)</title><rect x="283.1" y="483.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="286.1" y="494.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.30%)</title><rect x="283.1" y="467.0" width="3.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="286.1" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (14 samples, 4.15%)</title><rect x="286.6" y="547.0" width="49.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="289.6" y="558.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (14 samples, 4.15%)</title><rect x="286.6" y="531.0" width="49.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="289.6" y="542.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.19%)</title><rect x="286.6" y="515.0" width="14.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="289.6" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.59%)</title><rect x="286.6" y="499.0" width="7.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="289.6" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.59%)</title><rect x="286.6" y="483.0" width="7.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="289.6" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.59%)</title><rect x="286.6" y="467.0" width="7.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="289.6" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.59%)</title><rect x="293.6" y="499.0" width="7.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="296.6" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (10 samples, 2.97%)</title><rect x="300.6" y="515.0" width="35.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="303.6" y="526.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (10 samples, 2.97%)</title><rect x="300.6" y="499.0" width="35.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="303.6" y="510.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.30%)</title><rect x="300.6" y="483.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="303.6" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (9 samples, 2.67%)</title><rect x="304.1" y="483.0" width="31.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="307.1" y="494.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.59%)</title><rect x="307.6" y="467.0" width="7.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="310.6" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.30%)</title><rect x="307.6" y="451.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="310.6" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.30%)</title><rect x="307.6" y="435.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="310.6" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.30%)</title><rect x="307.6" y="419.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="310.6" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.30%)</title><rect x="311.1" y="451.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="314.1" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (2 samples, 0.59%)</title><rect x="314.6" y="467.0" width="7.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="317.6" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.59%)</title><rect x="314.6" y="451.0" width="7.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="317.6" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.59%)</title><rect x="314.6" y="435.0" width="7.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="317.6" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.59%)</title><rect x="314.6" y="419.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="317.6" y="430.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.59%)</title><rect x="314.6" y="403.0" width="7.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="317.6" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 0.59%)</title><rect x="321.6" y="467.0" width="7.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="324.6" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 0.59%)</title><rect x="321.6" y="451.0" width="7.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="324.6" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 0.59%)</title><rect x="321.6" y="435.0" width="7.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="324.6" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (2 samples, 0.59%)</title><rect x="321.6" y="419.0" width="7.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="324.6" y="430.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 0.59%)</title><rect x="321.6" y="403.0" width="7.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="324.6" y="414.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.30%)</title><rect x="321.6" y="387.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="324.6" y="398.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.30%)</title><rect x="325.1" y="387.0" width="3.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="328.1" y="398.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.30%)</title><rect x="325.1" y="371.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="328.1" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.59%)</title><rect x="328.6" y="467.0" width="7.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="331.6" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.59%)</title><rect x="328.6" y="451.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="331.6" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.59%)</title><rect x="328.6" y="435.0" width="7.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="331.6" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.59%)</title><rect x="335.6" y="563.0" width="7.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="338.6" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.30%)</title><rect x="335.6" y="547.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="338.6" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.30%)</title><rect x="339.1" y="547.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="342.1" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.30%)</title><rect x="339.1" y="531.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="342.1" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.30%)</title><rect x="339.1" y="515.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="342.1" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.30%)</title><rect x="339.1" y="499.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="342.1" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (161 samples, 47.77%)</title><rect x="342.6" y="659.0" width="563.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="345.6" y="670.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.30%)</title><rect x="381.2" y="643.0" width="3.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="384.2" y="654.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.30%)</title><rect x="381.2" y="627.0" width="3.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="384.2" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (19 samples, 5.64%)</title><rect x="384.7" y="643.0" width="66.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="387.7" y="654.0">com/lin..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (18 samples, 5.34%)</title><rect x="388.2" y="627.0" width="63.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="391.2" y="638.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (18 samples, 5.34%)</title><rect x="388.2" y="611.0" width="63.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="391.2" y="622.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.30%)</title><rect x="388.2" y="595.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="391.2" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.30%)</title><rect x="388.2" y="579.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="391.2" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.30%)</title><rect x="388.2" y="563.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="391.2" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.30%)</title><rect x="388.2" y="547.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="391.2" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 1.19%)</title><rect x="391.7" y="595.0" width="14.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="394.7" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 1.19%)</title><rect x="391.7" y="579.0" width="14.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="394.7" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 1.19%)</title><rect x="391.7" y="563.0" width="14.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="394.7" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (4 samples, 1.19%)</title><rect x="391.7" y="547.0" width="14.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="394.7" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 1.19%)</title><rect x="391.7" y="531.0" width="14.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="394.7" y="542.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (13 samples, 3.86%)</title><rect x="405.7" y="595.0" width="45.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="408.7" y="606.0">java..</text>
</g>
<g>
<title>java/util/HashMap.remove (12 samples, 3.56%)</title><rect x="409.2" y="579.0" width="42.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="412.2" y="590.0">java..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 1.19%)</title><rect x="437.2" y="563.0" width="14.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="440.2" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.59%)</title><rect x="451.2" y="643.0" width="7.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="454.2" y="654.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.59%)</title><rect x="451.2" y="627.0" width="7.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="454.2" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (22 samples, 6.53%)</title><rect x="458.2" y="643.0" width="77.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="461.2" y="654.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (22 samples, 6.53%)</title><rect x="458.2" y="627.0" width="77.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="461.2" y="638.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (6 samples, 1.78%)</title><rect x="465.2" y="611.0" width="21.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="468.2" y="622.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (6 samples, 1.78%)</title><rect x="465.2" y="595.0" width="21.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="468.2" y="606.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 1.48%)</title><rect x="468.7" y="579.0" width="17.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="471.7" y="590.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.59%)</title><rect x="479.2" y="563.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="482.2" y="574.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.59%)</title><rect x="479.2" y="547.0" width="7.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="482.2" y="558.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.59%)</title><rect x="479.2" y="531.0" width="7.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="482.2" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.59%)</title><rect x="479.2" y="515.0" width="7.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="482.2" y="526.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.59%)</title><rect x="479.2" y="499.0" width="7.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="482.2" y="510.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.59%)</title><rect x="479.2" y="483.0" width="7.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="482.2" y="494.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.30%)</title><rect x="479.2" y="467.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="482.2" y="478.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.30%)</title><rect x="479.2" y="451.0" width="3.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="482.2" y="462.0"></text>
</g>
<g>
<title>nmethod::get_deopt_original_pc(frame const*) (1 samples, 0.30%)</title><rect x="482.7" y="467.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="485.7" y="478.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (2 samples, 0.59%)</title><rect x="486.2" y="611.0" width="7.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="489.2" y="622.0"></text>
</g>
<g>
<title>java/lang/Long.toString (2 samples, 0.59%)</title><rect x="486.2" y="595.0" width="7.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="489.2" y="606.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.59%)</title><rect x="486.2" y="579.0" width="7.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="489.2" y="590.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (12 samples, 3.56%)</title><rect x="493.2" y="611.0" width="42.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="496.2" y="622.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (12 samples, 3.56%)</title><rect x="493.2" y="595.0" width="42.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="496.2" y="606.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.30%)</title><rect x="493.2" y="579.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="496.2" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.30%)</title><rect x="493.2" y="563.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="496.2" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.30%)</title><rect x="493.2" y="547.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="496.2" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.30%)</title><rect x="493.2" y="531.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="496.2" y="542.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (11 samples, 3.26%)</title><rect x="496.7" y="579.0" width="38.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="499.7" y="590.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.put (11 samples, 3.26%)</title><rect x="496.7" y="563.0" width="38.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="499.7" y="574.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.putVal (8 samples, 2.37%)</title><rect x="507.2" y="547.0" width="28.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="510.2" y="558.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.30%)</title><rect x="521.2" y="531.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="524.2" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.30%)</title><rect x="524.7" y="531.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="527.7" y="542.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.59%)</title><rect x="528.2" y="531.0" width="7.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="531.2" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (103 samples, 30.56%)</title><rect x="535.2" y="643.0" width="360.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="538.2" y="654.0">com/linecorp/decaton/processor/runtime/internal/P..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (103 samples, 30.56%)</title><rect x="535.2" y="627.0" width="360.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="538.2" y="638.0">com/linecorp/decaton/processor/runtime/internal/P..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$209/1552624934.process (77 samples, 22.85%)</title><rect x="538.7" y="611.0" width="269.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="541.7" y="622.0">com/linecorp/decaton/benchmark/Decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (77 samples, 22.85%)</title><rect x="538.7" y="595.0" width="269.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="541.7" y="606.0">com/linecorp/decaton/benchmark/Decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (76 samples, 22.55%)</title><rect x="538.7" y="579.0" width="266.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="541.7" y="590.0">com/linecorp/decaton/benchmark/Recor..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (4 samples, 1.19%)</title><rect x="538.7" y="563.0" width="14.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="541.7" y="574.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.59%)</title><rect x="545.7" y="547.0" width="7.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="548.7" y="558.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.59%)</title><rect x="545.7" y="531.0" width="7.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="548.7" y="542.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.59%)</title><rect x="545.7" y="515.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="548.7" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (68 samples, 20.18%)</title><rect x="552.7" y="563.0" width="238.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="555.7" y="574.0">com/linecorp/decaton/benchmark/R..</text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.30%)</title><rect x="559.7" y="547.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="562.7" y="558.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.30%)</title><rect x="559.7" y="531.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="562.7" y="542.0"></text>
</g>
<g>
<title>CompilationPolicy::is_compilation_enabled() (1 samples, 0.30%)</title><rect x="559.7" y="515.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="562.7" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task.getProducedTime (1 samples, 0.30%)</title><rect x="563.2" y="547.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="566.2" y="558.0"></text>
</g>
<g>
<title>java/lang/Thread.sleep (64 samples, 18.99%)</title><rect x="566.7" y="547.0" width="224.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="569.7" y="558.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (47 samples, 13.95%)</title><rect x="605.3" y="531.0" width="164.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="608.3" y="542.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (4 samples, 1.19%)</title><rect x="622.8" y="515.0" width="14.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="625.8" y="526.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.30%)</title><rect x="636.8" y="515.0" width="3.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="639.8" y="526.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.30%)</title><rect x="636.8" y="499.0" width="3.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="639.8" y="510.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.30%)</title><rect x="640.3" y="515.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="643.3" y="526.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (36 samples, 10.68%)</title><rect x="643.8" y="515.0" width="126.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="646.8" y="526.0">os::sleep(Thread..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.59%)</title><rect x="661.3" y="499.0" width="7.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="664.3" y="510.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.59%)</title><rect x="661.3" y="483.0" width="7.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="664.3" y="494.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.30%)</title><rect x="668.3" y="499.0" width="3.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="671.3" y="510.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.30%)</title><rect x="671.8" y="499.0" width="3.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="674.8" y="510.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.30%)</title><rect x="671.8" y="483.0" width="3.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="674.8" y="494.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.89%)</title><rect x="675.3" y="499.0" width="10.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="678.3" y="510.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (16 samples, 4.75%)</title><rect x="685.8" y="499.0" width="56.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="688.8" y="510.0">__pthr..</text>
</g>
<g>
<title>_init (1 samples, 0.30%)</title><rect x="741.8" y="499.0" width="3.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="744.8" y="510.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (5 samples, 1.48%)</title><rect x="745.3" y="499.0" width="17.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="748.3" y="510.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.30%)</title><rect x="762.8" y="499.0" width="3.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="765.8" y="510.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.30%)</title><rect x="766.3" y="499.0" width="3.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="769.3" y="510.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.30%)</title><rect x="769.8" y="531.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="772.8" y="542.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.30%)</title><rect x="773.3" y="531.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="776.3" y="542.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (2 samples, 0.59%)</title><rect x="776.8" y="531.0" width="7.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="779.8" y="542.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.30%)</title><rect x="783.8" y="531.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="786.8" y="542.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.30%)</title><rect x="787.3" y="531.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="790.3" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 1.19%)</title><rect x="790.8" y="563.0" width="14.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="793.8" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.30%)</title><rect x="804.8" y="579.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="807.8" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.30%)</title><rect x="804.8" y="563.0" width="3.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="807.8" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (2 samples, 0.59%)</title><rect x="808.3" y="611.0" width="7.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="811.3" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.asFuture (2 samples, 0.59%)</title><rect x="815.3" y="611.0" width="7.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="818.3" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (1 samples, 0.30%)</title><rect x="822.3" y="611.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="825.3" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (1 samples, 0.30%)</title><rect x="822.3" y="595.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="825.3" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.30%)</title><rect x="822.3" y="579.0" width="3.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="825.3" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.30%)</title><rect x="822.3" y="563.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="825.3" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.30%)</title><rect x="822.3" y="547.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="825.3" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.30%)</title><rect x="825.8" y="611.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="828.8" y="622.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.30%)</title><rect x="825.8" y="595.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="828.8" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/260840925.linkToTargetMethod (1 samples, 0.30%)</title><rect x="829.3" y="611.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="832.3" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/205962452.invokeStatic_L_L (1 samples, 0.30%)</title><rect x="829.3" y="595.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="832.3" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$297/1431671496.get$Lambda (1 samples, 0.30%)</title><rect x="829.3" y="579.0" width="3.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="832.3" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.30%)</title><rect x="832.8" y="611.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="835.8" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.30%)</title><rect x="832.8" y="595.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="835.8" y="606.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.30%)</title><rect x="832.8" y="579.0" width="3.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="835.8" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.59%)</title><rect x="836.4" y="611.0" width="7.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="839.4" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.30%)</title><rect x="839.9" y="595.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="842.9" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 3.86%)</title><rect x="843.4" y="611.0" width="45.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="846.4" y="622.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 1.78%)</title><rect x="867.9" y="595.0" width="21.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="870.9" y="606.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 1.78%)</title><rect x="867.9" y="579.0" width="21.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="870.9" y="590.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (6 samples, 1.78%)</title><rect x="867.9" y="563.0" width="21.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="870.9" y="574.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (6 samples, 1.78%)</title><rect x="867.9" y="547.0" width="21.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="870.9" y="558.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (6 samples, 1.78%)</title><rect x="867.9" y="531.0" width="21.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="870.9" y="542.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$297/1431671496.accept (1 samples, 0.30%)</title><rect x="881.9" y="515.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="884.9" y="526.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.30%)</title><rect x="885.4" y="515.0" width="3.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="888.4" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReference.get (2 samples, 0.59%)</title><rect x="888.9" y="611.0" width="7.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="891.9" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.89%)</title><rect x="895.9" y="643.0" width="10.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="898.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.89%)</title><rect x="895.9" y="627.0" width="10.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="898.9" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.89%)</title><rect x="895.9" y="611.0" width="10.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="898.9" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.89%)</title><rect x="895.9" y="595.0" width="10.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="898.9" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.59%)</title><rect x="895.9" y="579.0" width="7.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="898.9" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 0.59%)</title><rect x="895.9" y="563.0" width="7.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="898.9" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.30%)</title><rect x="902.9" y="579.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="905.9" y="590.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.30%)</title><rect x="906.4" y="659.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="909.4" y="670.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.30%)</title><rect x="906.4" y="643.0" width="3.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="909.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.30%)</title><rect x="909.9" y="723.0" width="3.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="912.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.30%)</title><rect x="909.9" y="707.0" width="3.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="912.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.30%)</title><rect x="909.9" y="691.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="912.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.30%)</title><rect x="909.9" y="675.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="912.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.30%)</title><rect x="909.9" y="659.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="912.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (11 samples, 3.26%)</title><rect x="913.4" y="723.0" width="38.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="916.4" y="734.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (11 samples, 3.26%)</title><rect x="913.4" y="707.0" width="38.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="916.4" y="718.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (3 samples, 0.89%)</title><rect x="913.4" y="691.0" width="10.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="916.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (3 samples, 0.89%)</title><rect x="913.4" y="675.0" width="10.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="916.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.89%)</title><rect x="913.4" y="659.0" width="10.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="916.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.89%)</title><rect x="913.4" y="643.0" width="10.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="916.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.89%)</title><rect x="913.4" y="627.0" width="10.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="916.4" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (8 samples, 2.37%)</title><rect x="923.9" y="691.0" width="28.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="926.9" y="702.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 2.37%)</title><rect x="923.9" y="675.0" width="28.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="926.9" y="686.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 2.37%)</title><rect x="923.9" y="659.0" width="28.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="926.9" y="670.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 2.37%)</title><rect x="923.9" y="643.0" width="28.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="926.9" y="654.0">ja..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.59%)</title><rect x="951.9" y="771.0" width="7.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="954.9" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (2 samples, 0.59%)</title><rect x="951.9" y="755.0" width="7.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="954.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.59%)</title><rect x="951.9" y="739.0" width="7.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="954.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.maybeThrowAnyException (1 samples, 0.30%)</title><rect x="951.9" y="723.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="954.9" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.clearErrorsAndMaybeThrowException (1 samples, 0.30%)</title><rect x="951.9" y="707.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="954.9" y="718.0"></text>
</g>
<g>
<title>java/util/Optional.orElseGet (1 samples, 0.30%)</title><rect x="951.9" y="691.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="954.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$$Lambda$88/1578508623.get (1 samples, 0.30%)</title><rect x="951.9" y="675.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="954.9" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.30%)</title><rect x="955.4" y="723.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="958.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.30%)</title><rect x="955.4" y="707.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="958.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.30%)</title><rect x="955.4" y="691.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="958.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.30%)</title><rect x="955.4" y="675.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="958.4" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.30%)</title><rect x="955.4" y="659.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="958.4" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.30%)</title><rect x="955.4" y="643.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="958.4" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.30%)</title><rect x="955.4" y="627.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="958.4" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.30%)</title><rect x="955.4" y="611.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="958.4" y="622.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.30%)</title><rect x="955.4" y="595.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="958.4" y="606.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.30%)</title><rect x="955.4" y="579.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="958.4" y="590.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.30%)</title><rect x="955.4" y="563.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="958.4" y="574.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.30%)</title><rect x="955.4" y="547.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="958.4" y="558.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invoke(CallInfo&amp;, Handle, constantPoolHandle, int, Bytecodes::Code, Thread*) (1 samples, 0.30%)</title><rect x="955.4" y="531.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="958.4" y="542.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokevirtual(CallInfo&amp;, Handle, constantPoolHandle, int, Thread*) (1 samples, 0.30%)</title><rect x="955.4" y="515.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="958.4" y="526.0"></text>
</g>
<g>
<title>LinkResolver::resolve_pool(KlassHandle&amp;, Symbol*&amp;, Symbol*&amp;, KlassHandle&amp;, constantPoolHandle, int, Thread*) (1 samples, 0.30%)</title><rect x="955.4" y="499.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="958.4" y="510.0"></text>
</g>
<g>
<title>start_thread (66 samples, 19.58%)</title><rect x="958.9" y="771.0" width="231.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="961.9" y="782.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (66 samples, 19.58%)</title><rect x="958.9" y="755.0" width="231.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="961.9" y="766.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (16 samples, 4.75%)</title><rect x="958.9" y="739.0" width="56.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="961.9" y="750.0">GangWo..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (16 samples, 4.75%)</title><rect x="958.9" y="723.0" width="56.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="961.9" y="734.0">G1ParT..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (14 samples, 4.15%)</title><rect x="958.9" y="707.0" width="49.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="961.9" y="718.0">G1Par..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (13 samples, 3.86%)</title><rect x="958.9" y="691.0" width="45.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="961.9" y="702.0">G1Pa..</text>
</g>
<g>
<title>G1DefaultParGCAllocator::alloc_buffer(InCSetState, unsigned char) (1 samples, 0.30%)</title><rect x="969.4" y="675.0" width="3.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="972.4" y="686.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (6 samples, 1.78%)</title><rect x="972.9" y="675.0" width="21.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="975.9" y="686.0">G..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (2 samples, 0.59%)</title><rect x="983.4" y="659.0" width="7.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="986.4" y="670.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.30%)</title><rect x="986.9" y="643.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="989.9" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::vtable_length() const (1 samples, 0.30%)</title><rect x="990.4" y="659.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="993.4" y="670.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (3 samples, 0.89%)</title><rect x="993.9" y="675.0" width="10.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="996.9" y="686.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.30%)</title><rect x="1004.4" y="691.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1007.4" y="702.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.30%)</title><rect x="1007.9" y="707.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1010.9" y="718.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.30%)</title><rect x="1007.9" y="691.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1010.9" y="702.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.30%)</title><rect x="1007.9" y="675.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1010.9" y="686.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.30%)</title><rect x="1007.9" y="659.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1010.9" y="670.0"></text>
</g>
<g>
<title>StackFrameStream::StackFrameStream(JavaThread*, bool) (1 samples, 0.30%)</title><rect x="1007.9" y="643.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1010.9" y="654.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.30%)</title><rect x="1007.9" y="627.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1010.9" y="638.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.30%)</title><rect x="1007.9" y="611.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1010.9" y="622.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.30%)</title><rect x="1011.4" y="707.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1014.4" y="718.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.30%)</title><rect x="1011.4" y="691.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1014.4" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (1 samples, 0.30%)</title><rect x="1011.4" y="675.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1014.4" y="686.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (1 samples, 0.30%)</title><rect x="1011.4" y="659.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1014.4" y="670.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.30%)</title><rect x="1011.4" y="643.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1014.4" y="654.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (1 samples, 0.30%)</title><rect x="1011.4" y="627.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1014.4" y="638.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.30%)</title><rect x="1011.4" y="611.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1014.4" y="622.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.30%)</title><rect x="1011.4" y="595.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1014.4" y="606.0"></text>
</g>
<g>
<title>JavaThread::run() (48 samples, 14.24%)</title><rect x="1014.9" y="739.0" width="168.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1017.9" y="750.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (48 samples, 14.24%)</title><rect x="1014.9" y="723.0" width="168.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1017.9" y="734.0">JavaThread::thread_mai..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (48 samples, 14.24%)</title><rect x="1014.9" y="707.0" width="168.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1017.9" y="718.0">CompileBroker::compile..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (48 samples, 14.24%)</title><rect x="1014.9" y="691.0" width="168.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1017.9" y="702.0">CompileBroker::invoke_..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (45 samples, 13.35%)</title><rect x="1014.9" y="675.0" width="157.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1017.9" y="686.0">C2Compiler::compile_..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (45 samples, 13.35%)</title><rect x="1014.9" y="659.0" width="157.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1017.9" y="670.0">Compile::Compile(ciE..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.30%)</title><rect x="1014.9" y="643.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1017.9" y="654.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.30%)</title><rect x="1014.9" y="627.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1017.9" y="638.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.30%)</title><rect x="1014.9" y="611.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1017.9" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.30%)</title><rect x="1014.9" y="595.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1017.9" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.30%)</title><rect x="1014.9" y="579.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1017.9" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.30%)</title><rect x="1014.9" y="563.0" width="3.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1017.9" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.30%)</title><rect x="1014.9" y="547.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1017.9" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.30%)</title><rect x="1014.9" y="531.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1017.9" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.30%)</title><rect x="1014.9" y="515.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1017.9" y="526.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.30%)</title><rect x="1014.9" y="499.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1017.9" y="510.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.30%)</title><rect x="1014.9" y="483.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1017.9" y="494.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.30%)</title><rect x="1014.9" y="467.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1017.9" y="478.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.30%)</title><rect x="1014.9" y="451.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1017.9" y="462.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.30%)</title><rect x="1014.9" y="435.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1017.9" y="446.0"></text>
</g>
<g>
<title>Method::invocation_count() (1 samples, 0.30%)</title><rect x="1014.9" y="419.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1017.9" y="430.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (24 samples, 7.12%)</title><rect x="1018.4" y="643.0" width="84.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1021.4" y="654.0">Compile::C..</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.30%)</title><rect x="1018.4" y="627.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1021.4" y="638.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.30%)</title><rect x="1018.4" y="611.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1021.4" y="622.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.30%)</title><rect x="1018.4" y="595.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1021.4" y="606.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 0.89%)</title><rect x="1021.9" y="627.0" width="10.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1024.9" y="638.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.59%)</title><rect x="1021.9" y="611.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1024.9" y="622.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.30%)</title><rect x="1028.9" y="611.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1031.9" y="622.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.30%)</title><rect x="1028.9" y="595.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1031.9" y="606.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.30%)</title><rect x="1028.9" y="579.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1031.9" y="590.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.30%)</title><rect x="1028.9" y="563.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1031.9" y="574.0"></text>
</g>
<g>
<title>MachNode::Expand(State*, Node_List&amp;, Node*) (1 samples, 0.30%)</title><rect x="1028.9" y="547.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1031.9" y="558.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.59%)</title><rect x="1032.4" y="627.0" width="7.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1035.4" y="638.0"></text>
</g>
<g>
<title>PhaseCFG::build_dominator_tree() (1 samples, 0.30%)</title><rect x="1032.4" y="611.0" width="3.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1035.4" y="622.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.30%)</title><rect x="1035.9" y="611.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1038.9" y="622.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.30%)</title><rect x="1035.9" y="595.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1038.9" y="606.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.30%)</title><rect x="1035.9" y="579.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1038.9" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (18 samples, 5.34%)</title><rect x="1039.4" y="627.0" width="63.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1042.4" y="638.0">PhaseCh..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.30%)</title><rect x="1039.4" y="611.0" width="3.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1042.4" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.59%)</title><rect x="1042.9" y="611.0" width="7.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1045.9" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.30%)</title><rect x="1042.9" y="595.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1045.9" y="606.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.30%)</title><rect x="1046.4" y="595.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1049.4" y="606.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.30%)</title><rect x="1046.4" y="579.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1049.4" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 1.48%)</title><rect x="1049.9" y="611.0" width="17.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1052.9" y="622.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.30%)</title><rect x="1060.4" y="595.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1063.4" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.30%)</title><rect x="1063.9" y="595.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1066.9" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.30%)</title><rect x="1067.4" y="611.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1070.4" y="622.0"></text>
</g>
<g>
<title>MachNode::in_RegMask(unsigned int) const (1 samples, 0.30%)</title><rect x="1067.4" y="595.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1070.4" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.30%)</title><rect x="1070.9" y="611.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1073.9" y="622.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.30%)</title><rect x="1074.5" y="611.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1077.5" y="622.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (3 samples, 0.89%)</title><rect x="1078.0" y="611.0" width="10.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1081.0" y="622.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.59%)</title><rect x="1081.5" y="595.0" width="7.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1084.5" y="606.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.30%)</title><rect x="1088.5" y="611.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1091.5" y="622.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.30%)</title><rect x="1088.5" y="595.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1091.5" y="606.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.89%)</title><rect x="1092.0" y="611.0" width="10.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1095.0" y="622.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.89%)</title><rect x="1092.0" y="595.0" width="10.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1095.0" y="606.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.30%)</title><rect x="1099.0" y="579.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1102.0" y="590.0"></text>
</g>
<g>
<title>Compile::Optimize() (14 samples, 4.15%)</title><rect x="1102.5" y="643.0" width="49.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1105.5" y="654.0">Compi..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.30%)</title><rect x="1102.5" y="627.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1105.5" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.30%)</title><rect x="1102.5" y="611.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1105.5" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1102.5" y="595.0" width="3.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1105.5" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1102.5" y="579.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1105.5" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1102.5" y="563.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1105.5" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1102.5" y="547.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1105.5" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1102.5" y="531.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1105.5" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.30%)</title><rect x="1102.5" y="515.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1105.5" y="526.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.30%)</title><rect x="1102.5" y="499.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1105.5" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (7 samples, 2.08%)</title><rect x="1106.0" y="627.0" width="24.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1109.0" y="638.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.59%)</title><rect x="1106.0" y="611.0" width="7.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1109.0" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.30%)</title><rect x="1113.0" y="611.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1116.0" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.30%)</title><rect x="1116.5" y="611.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1119.5" y="622.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.30%)</title><rect x="1116.5" y="595.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1119.5" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.30%)</title><rect x="1120.0" y="611.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1123.0" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.59%)</title><rect x="1123.5" y="611.0" width="7.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1126.5" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.30%)</title><rect x="1127.0" y="595.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1130.0" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.30%)</title><rect x="1127.0" y="579.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1130.0" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.30%)</title><rect x="1127.0" y="563.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1130.0" y="574.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 1.48%)</title><rect x="1130.5" y="627.0" width="17.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1133.5" y="638.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 1.48%)</title><rect x="1130.5" y="611.0" width="17.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1133.5" y="622.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.30%)</title><rect x="1130.5" y="595.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1133.5" y="606.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.30%)</title><rect x="1130.5" y="579.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1133.5" y="590.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.30%)</title><rect x="1130.5" y="563.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1133.5" y="574.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.30%)</title><rect x="1130.5" y="547.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1133.5" y="558.0"></text>
</g>
<g>
<title>LoadNode::hash() const (1 samples, 0.30%)</title><rect x="1134.0" y="595.0" width="3.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1137.0" y="606.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.30%)</title><rect x="1137.5" y="595.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1140.5" y="606.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.30%)</title><rect x="1137.5" y="579.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1140.5" y="590.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.30%)</title><rect x="1137.5" y="563.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1140.5" y="574.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.59%)</title><rect x="1141.0" y="595.0" width="7.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1144.0" y="606.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.30%)</title><rect x="1148.0" y="627.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.0" y="638.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.30%)</title><rect x="1148.0" y="611.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1151.0" y="622.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1148.0" y="595.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.0" y="606.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.30%)</title><rect x="1148.0" y="579.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.0" y="590.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.30%)</title><rect x="1148.0" y="563.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1151.0" y="574.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.30%)</title><rect x="1148.0" y="547.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.0" y="558.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.30%)</title><rect x="1148.0" y="531.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1151.0" y="542.0"></text>
</g>
<g>
<title>TypeNarrowOop::remove_speculative() const (1 samples, 0.30%)</title><rect x="1148.0" y="515.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.0" y="526.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.30%)</title><rect x="1148.0" y="499.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.0" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 1.78%)</title><rect x="1151.5" y="643.0" width="21.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1154.5" y="654.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 1.78%)</title><rect x="1151.5" y="627.0" width="21.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.5" y="638.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 1.78%)</title><rect x="1151.5" y="611.0" width="21.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.5" y="622.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 1.78%)</title><rect x="1151.5" y="595.0" width="21.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.5" y="606.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 1.78%)</title><rect x="1151.5" y="579.0" width="21.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.5" y="590.0">P..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 1.78%)</title><rect x="1151.5" y="563.0" width="21.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.5" y="574.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.30%)</title><rect x="1151.5" y="547.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.5" y="558.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.30%)</title><rect x="1151.5" y="531.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1154.5" y="542.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.30%)</title><rect x="1151.5" y="515.0" width="3.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1154.5" y="526.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.30%)</title><rect x="1151.5" y="499.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.5" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.30%)</title><rect x="1151.5" y="483.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1154.5" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.30%)</title><rect x="1151.5" y="467.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1154.5" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.30%)</title><rect x="1151.5" y="451.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.5" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.30%)</title><rect x="1151.5" y="435.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.5" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.30%)</title><rect x="1151.5" y="419.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.5" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.30%)</title><rect x="1151.5" y="403.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1154.5" y="414.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.30%)</title><rect x="1151.5" y="387.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.5" y="398.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.30%)</title><rect x="1151.5" y="371.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.5" y="382.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.30%)</title><rect x="1151.5" y="355.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1154.5" y="366.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.30%)</title><rect x="1151.5" y="339.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.5" y="350.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.30%)</title><rect x="1151.5" y="323.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.5" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.89%)</title><rect x="1155.0" y="547.0" width="10.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.0" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.89%)</title><rect x="1155.0" y="531.0" width="10.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.89%)</title><rect x="1155.0" y="515.0" width="10.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1158.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.89%)</title><rect x="1155.0" y="499.0" width="10.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1158.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.89%)</title><rect x="1155.0" y="483.0" width="10.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.89%)</title><rect x="1155.0" y="467.0" width="10.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1158.0" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.89%)</title><rect x="1155.0" y="451.0" width="10.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.0" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.89%)</title><rect x="1155.0" y="435.0" width="10.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1158.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.89%)</title><rect x="1155.0" y="419.0" width="10.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.89%)</title><rect x="1155.0" y="403.0" width="10.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.89%)</title><rect x="1155.0" y="387.0" width="10.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.59%)</title><rect x="1155.0" y="371.0" width="7.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.0" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.59%)</title><rect x="1155.0" y="355.0" width="7.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.0" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.59%)</title><rect x="1155.0" y="339.0" width="7.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1158.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.59%)</title><rect x="1155.0" y="323.0" width="7.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.59%)</title><rect x="1155.0" y="307.0" width="7.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1158.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.59%)</title><rect x="1155.0" y="291.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.59%)</title><rect x="1155.0" y="275.0" width="7.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.0" y="286.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.30%)</title><rect x="1155.0" y="259.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.0" y="270.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.30%)</title><rect x="1155.0" y="243.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.0" y="254.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.30%)</title><rect x="1155.0" y="227.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.0" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.30%)</title><rect x="1155.0" y="211.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.0" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.30%)</title><rect x="1155.0" y="195.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1158.0" y="206.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.30%)</title><rect x="1155.0" y="179.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.0" y="190.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.30%)</title><rect x="1155.0" y="163.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.0" y="174.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.30%)</title><rect x="1155.0" y="147.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.0" y="158.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.30%)</title><rect x="1155.0" y="131.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1158.0" y="142.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.30%)</title><rect x="1155.0" y="115.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1158.0" y="126.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.30%)</title><rect x="1155.0" y="99.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1158.0" y="110.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.30%)</title><rect x="1155.0" y="83.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.0" y="94.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.30%)</title><rect x="1155.0" y="67.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.0" y="78.0"></text>
</g>
<g>
<title>ciField::initialize_from(fieldDescriptor*) (1 samples, 0.30%)</title><rect x="1155.0" y="51.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1158.0" y="62.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1158.5" y="259.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1161.5" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.30%)</title><rect x="1158.5" y="243.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.5" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.30%)</title><rect x="1158.5" y="227.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.5" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.30%)</title><rect x="1158.5" y="211.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.5" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.30%)</title><rect x="1158.5" y="195.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.5" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.30%)</title><rect x="1158.5" y="179.0" width="3.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1161.5" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1158.5" y="163.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.5" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.30%)</title><rect x="1158.5" y="147.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.5" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.30%)</title><rect x="1158.5" y="131.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.5" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.30%)</title><rect x="1158.5" y="115.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.5" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.30%)</title><rect x="1158.5" y="99.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.5" y="110.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.30%)</title><rect x="1158.5" y="83.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.5" y="94.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.30%)</title><rect x="1158.5" y="67.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.5" y="78.0"></text>
</g>
<g>
<title>GraphKit::basic_plus_adr(Node*, Node*, Node*) (1 samples, 0.30%)</title><rect x="1158.5" y="51.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.5" y="62.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*, Node*) (1 samples, 0.30%)</title><rect x="1158.5" y="35.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.5" y="46.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.30%)</title><rect x="1162.0" y="371.0" width="3.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1165.0" y="382.0"></text>
</g>
<g>
<title>Parse::sharpen_type_after_if(BoolTest::mask, Node*, Type const*, Node*, Type const*) (1 samples, 0.30%)</title><rect x="1162.0" y="355.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.0" y="366.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.59%)</title><rect x="1165.5" y="547.0" width="7.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.5" y="558.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.30%)</title><rect x="1165.5" y="531.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.5" y="542.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.30%)</title><rect x="1165.5" y="515.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.5" y="526.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.30%)</title><rect x="1165.5" y="499.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.5" y="510.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_input_for_runtime_call(SafePointNode*) (1 samples, 0.30%)</title><rect x="1165.5" y="483.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.5" y="494.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.30%)</title><rect x="1165.5" y="467.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.5" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1169.0" y="531.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.0" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.30%)</title><rect x="1169.0" y="515.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.30%)</title><rect x="1169.0" y="499.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.30%)</title><rect x="1169.0" y="483.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1172.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.30%)</title><rect x="1169.0" y="467.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.30%)</title><rect x="1169.0" y="451.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1172.0" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1169.0" y="435.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.0" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.30%)</title><rect x="1169.0" y="419.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.30%)</title><rect x="1169.0" y="403.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.30%)</title><rect x="1169.0" y="387.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.30%)</title><rect x="1169.0" y="371.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.30%)</title><rect x="1169.0" y="355.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.30%)</title><rect x="1169.0" y="339.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.0" y="350.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.30%)</title><rect x="1169.0" y="323.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.0" y="334.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.30%)</title><rect x="1169.0" y="307.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.0" y="318.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.30%)</title><rect x="1169.0" y="291.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.0" y="302.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 0.89%)</title><rect x="1172.5" y="675.0" width="10.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.5" y="686.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 0.89%)</title><rect x="1172.5" y="659.0" width="10.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.5" y="670.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.89%)</title><rect x="1172.5" y="643.0" width="10.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.5" y="654.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.59%)</title><rect x="1172.5" y="627.0" width="7.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.5" y="638.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.30%)</title><rect x="1172.5" y="611.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.5" y="622.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.30%)</title><rect x="1172.5" y="595.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.5" y="606.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_op1(LIR_Op1*) (1 samples, 0.30%)</title><rect x="1172.5" y="579.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.5" y="590.0"></text>
</g>
<g>
<title>LIR_Assembler::mem2reg(LIR_OprDesc*, LIR_OprDesc*, BasicType, LIR_PatchCode, CodeEmitInfo*, bool, bool) (1 samples, 0.30%)</title><rect x="1172.5" y="563.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.5" y="574.0"></text>
</g>
<g>
<title>IR::optimize_blocks() (1 samples, 0.30%)</title><rect x="1176.0" y="611.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.0" y="622.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.30%)</title><rect x="1179.5" y="627.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.5" y="638.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.30%)</title><rect x="1179.5" y="611.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.5" y="622.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.30%)</title><rect x="1179.5" y="595.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.5" y="606.0"></text>
</g>
<g>
<title>CodeBuffer::finalize_oop_references(methodHandle) (1 samples, 0.30%)</title><rect x="1179.5" y="579.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.5" y="590.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.30%)</title><rect x="1183.0" y="739.0" width="3.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.0" y="750.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.30%)</title><rect x="1183.0" y="723.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.0" y="734.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.30%)</title><rect x="1183.0" y="707.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.0" y="718.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.30%)</title><rect x="1183.0" y="691.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.0" y="702.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.30%)</title><rect x="1183.0" y="675.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.0" y="686.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.30%)</title><rect x="1183.0" y="659.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.0" y="670.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.30%)</title><rect x="1183.0" y="643.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.0" y="654.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.30%)</title><rect x="1183.0" y="627.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.0" y="638.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.30%)</title><rect x="1183.0" y="611.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.0" y="622.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.30%)</title><rect x="1186.5" y="739.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.5" y="750.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (1 samples, 0.30%)</title><rect x="1186.5" y="723.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.5" y="734.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.30%)</title><rect x="1186.5" y="707.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.5" y="718.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.30%)</title><rect x="1186.5" y="691.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.5" y="702.0"></text>
</g>
<g>
<title>__pthread_cond_init (1 samples, 0.30%)</title><rect x="1186.5" y="675.0" width="3.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1189.5" y="686.0"></text>
</g>
</g>
</svg>
