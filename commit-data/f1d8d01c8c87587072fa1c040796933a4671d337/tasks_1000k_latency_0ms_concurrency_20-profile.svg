<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1062" onload="init(evt)" viewBox="0 0 1200 1062" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1045"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1045"> </text>
<g id="frames">
<g>
<title>all (1,207 samples, 100.00%)</title><rect x="10.0" y="1011.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1022.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (270 samples, 22.37%)</title><rect x="10.0" y="995.0" width="264.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1006.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (269 samples, 22.29%)</title><rect x="11.0" y="979.0" width="263.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.0" y="990.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (6 samples, 0.50%)</title><rect x="11.0" y="963.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.0" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (6 samples, 0.50%)</title><rect x="11.0" y="947.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.0" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (6 samples, 0.50%)</title><rect x="11.0" y="931.0" width="5.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="14.0" y="942.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (6 samples, 0.50%)</title><rect x="11.0" y="915.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.0" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (5 samples, 0.41%)</title><rect x="12.0" y="899.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.0" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (4 samples, 0.33%)</title><rect x="12.0" y="883.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.0" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (4 samples, 0.33%)</title><rect x="12.0" y="867.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.0" y="878.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="12.0" y="851.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="15.0" y="862.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.08%)</title><rect x="12.9" y="851.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.9" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (2 samples, 0.17%)</title><rect x="13.9" y="851.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.9" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="13.9" y="835.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.9" y="846.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="13.9" y="819.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.9" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="13.9" y="803.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.9" y="814.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="13.9" y="787.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="16.9" y="798.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="14.9" y="835.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.9" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="14.9" y="819.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.9" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.08%)</title><rect x="15.9" y="883.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.9" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.08%)</title><rect x="15.9" y="867.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="18.9" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="15.9" y="851.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.9" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.08%)</title><rect x="16.8" y="963.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.8" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.08%)</title><rect x="16.8" y="947.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="19.8" y="958.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.08%)</title><rect x="16.8" y="931.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.8" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.spliterator (1 samples, 0.08%)</title><rect x="16.8" y="915.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="19.8" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="16.8" y="899.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.8" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (3 samples, 0.25%)</title><rect x="17.8" y="963.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.8" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (3 samples, 0.25%)</title><rect x="17.8" y="947.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.8" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (3 samples, 0.25%)</title><rect x="17.8" y="931.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="20.8" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$269/1517074717.accept (3 samples, 0.25%)</title><rect x="17.8" y="915.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.8" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (3 samples, 0.25%)</title><rect x="17.8" y="899.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="20.8" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (3 samples, 0.25%)</title><rect x="17.8" y="883.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.8" y="894.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (3 samples, 0.25%)</title><rect x="17.8" y="867.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.8" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (1 samples, 0.08%)</title><rect x="20.8" y="963.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="23.8" y="974.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.08%)</title><rect x="20.8" y="947.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="23.8" y="958.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="20.8" y="931.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="23.8" y="942.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (197 samples, 16.32%)</title><rect x="21.7" y="963.0" width="192.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="24.7" y="974.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$268/1066121591.accept (186 samples, 15.41%)</title><rect x="21.7" y="947.0" width="181.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="24.7" y="958.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (185 samples, 15.33%)</title><rect x="22.7" y="931.0" width="180.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="25.7" y="942.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/BlacklistedKeysFilter.shouldTake (3 samples, 0.25%)</title><rect x="23.7" y="915.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.7" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (161 samples, 13.34%)</title><rect x="26.6" y="915.0" width="157.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="29.6" y="926.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (161 samples, 13.34%)</title><rect x="26.6" y="899.0" width="157.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="29.6" y="910.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (161 samples, 13.34%)</title><rect x="26.6" y="883.0" width="157.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="29.6" y="894.0">com/linecorp/decaton..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (161 samples, 13.34%)</title><rect x="26.6" y="867.0" width="157.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="29.6" y="878.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (161 samples, 13.34%)</title><rect x="26.6" y="851.0" width="157.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="29.6" y="862.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (160 samples, 13.26%)</title><rect x="27.6" y="835.0" width="156.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="30.6" y="846.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (119 samples, 9.86%)</title><rect x="61.8" y="819.0" width="116.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="64.8" y="830.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (26 samples, 2.15%)</title><rect x="61.8" y="803.0" width="25.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="64.8" y="814.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (26 samples, 2.15%)</title><rect x="61.8" y="787.0" width="25.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="64.8" y="798.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (26 samples, 2.15%)</title><rect x="61.8" y="771.0" width="25.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="64.8" y="782.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.50%)</title><rect x="87.2" y="803.0" width="5.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="90.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (6 samples, 0.50%)</title><rect x="87.2" y="787.0" width="5.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="90.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.08%)</title><rect x="89.2" y="771.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="92.2" y="782.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.08%)</title><rect x="89.2" y="755.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="92.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.08%)</title><rect x="90.2" y="771.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="93.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.selfInterrupt (1 samples, 0.08%)</title><rect x="90.2" y="755.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="93.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.08%)</title><rect x="90.2" y="739.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="93.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.17%)</title><rect x="91.1" y="771.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="94.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (87 samples, 7.21%)</title><rect x="93.1" y="803.0" width="85.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="96.1" y="814.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (87 samples, 7.21%)</title><rect x="93.1" y="787.0" width="85.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="96.1" y="798.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (87 samples, 7.21%)</title><rect x="93.1" y="771.0" width="85.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="96.1" y="782.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (86 samples, 7.13%)</title><rect x="93.1" y="755.0" width="84.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="96.1" y="766.0">java/util/..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (86 samples, 7.13%)</title><rect x="93.1" y="739.0" width="84.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="96.1" y="750.0">sun/misc/U..</text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="93.1" y="723.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="96.1" y="734.0"></text>
</g>
<g>
<title>Unsafe_Unpark (76 samples, 6.30%)</title><rect x="94.1" y="723.0" width="74.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="97.1" y="734.0">Unsafe_U..</text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.17%)</title><rect x="97.0" y="707.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="100.0" y="718.0"></text>
</g>
<g>
<title>__pthread_cond_signal (45 samples, 3.73%)</title><rect x="99.0" y="707.0" width="44.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="102.0" y="718.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (5 samples, 0.41%)</title><rect x="143.0" y="707.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="146.0" y="718.0"></text>
</g>
<g>
<title>pthread_mutex_lock (21 samples, 1.74%)</title><rect x="147.8" y="707.0" width="20.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="150.8" y="718.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.08%)</title><rect x="168.4" y="723.0" width="1.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="171.4" y="734.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 0.41%)</title><rect x="169.4" y="723.0" width="4.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="172.4" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.17%)</title><rect x="174.2" y="723.0" width="2.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="177.2" y="734.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.08%)</title><rect x="176.2" y="723.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="179.2" y="734.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (1 samples, 0.08%)</title><rect x="177.2" y="755.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="180.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.33%)</title><rect x="178.2" y="819.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="181.2" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (4 samples, 0.33%)</title><rect x="178.2" y="803.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="181.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.33%)</title><rect x="178.2" y="787.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="181.2" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="179.1" y="771.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="182.1" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="179.1" y="755.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="182.1" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="179.1" y="739.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="182.1" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="179.1" y="723.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="182.1" y="734.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="179.1" y="707.0" width="1.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="182.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.17%)</title><rect x="180.1" y="771.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="183.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.17%)</title><rect x="182.1" y="819.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="185.1" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.17%)</title><rect x="182.1" y="803.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="185.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.17%)</title><rect x="182.1" y="787.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="185.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.08%)</title><rect x="182.1" y="771.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="185.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.08%)</title><rect x="183.0" y="771.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="186.0" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (14 samples, 1.16%)</title><rect x="184.0" y="915.0" width="13.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="187.0" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (14 samples, 1.16%)</title><rect x="184.0" y="899.0" width="13.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="187.0" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.25%)</title><rect x="194.8" y="883.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="197.8" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.25%)</title><rect x="194.8" y="867.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="197.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.25%)</title><rect x="194.8" y="851.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="197.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.25%)</title><rect x="194.8" y="835.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="197.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.08%)</title><rect x="194.8" y="819.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="197.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.08%)</title><rect x="194.8" y="803.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="197.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.17%)</title><rect x="195.7" y="819.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="198.7" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (3 samples, 0.25%)</title><rect x="197.7" y="915.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="200.7" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.25%)</title><rect x="197.7" y="899.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="200.7" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.25%)</title><rect x="197.7" y="883.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="200.7" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.25%)</title><rect x="200.6" y="915.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="203.6" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.25%)</title><rect x="200.6" y="899.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="203.6" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.25%)</title><rect x="200.6" y="883.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="203.6" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.25%)</title><rect x="200.6" y="867.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="203.6" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.25%)</title><rect x="200.6" y="851.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="203.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (11 samples, 0.91%)</title><rect x="203.6" y="947.0" width="10.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="206.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (10 samples, 0.83%)</title><rect x="204.5" y="931.0" width="9.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="207.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (8 samples, 0.66%)</title><rect x="206.5" y="915.0" width="7.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="209.5" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (8 samples, 0.66%)</title><rect x="206.5" y="899.0" width="7.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="209.5" y="910.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (6 samples, 0.50%)</title><rect x="208.5" y="883.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="211.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (61 samples, 5.05%)</title><rect x="214.3" y="963.0" width="59.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="217.3" y="974.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (61 samples, 5.05%)</title><rect x="214.3" y="947.0" width="59.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="217.3" y="958.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (38 samples, 3.15%)</title><rect x="215.3" y="931.0" width="37.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="218.3" y="942.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.08%)</title><rect x="215.3" y="915.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="218.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.08%)</title><rect x="215.3" y="899.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="218.3" y="910.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.08%)</title><rect x="215.3" y="883.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="218.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (37 samples, 3.07%)</title><rect x="216.3" y="915.0" width="36.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="219.3" y="926.0">org..</text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.08%)</title><rect x="217.3" y="899.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="220.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (35 samples, 2.90%)</title><rect x="218.2" y="899.0" width="34.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="221.2" y="910.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (32 samples, 2.65%)</title><rect x="218.2" y="883.0" width="31.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="221.2" y="894.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (32 samples, 2.65%)</title><rect x="218.2" y="867.0" width="31.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="221.2" y="878.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (22 samples, 1.82%)</title><rect x="219.2" y="851.0" width="21.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="222.2" y="862.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (12 samples, 0.99%)</title><rect x="219.2" y="835.0" width="11.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="222.2" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (11 samples, 0.91%)</title><rect x="220.2" y="819.0" width="10.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="223.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (11 samples, 0.91%)</title><rect x="220.2" y="803.0" width="10.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="223.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (11 samples, 0.91%)</title><rect x="220.2" y="787.0" width="10.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="223.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (11 samples, 0.91%)</title><rect x="220.2" y="771.0" width="10.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="223.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (11 samples, 0.91%)</title><rect x="220.2" y="755.0" width="10.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="223.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (10 samples, 0.83%)</title><rect x="221.2" y="739.0" width="9.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="224.2" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (9 samples, 0.75%)</title><rect x="230.9" y="835.0" width="8.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="233.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (9 samples, 0.75%)</title><rect x="230.9" y="819.0" width="8.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="233.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.ensureNoneRemaining (9 samples, 0.75%)</title><rect x="230.9" y="803.0" width="8.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="233.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.08%)</title><rect x="239.7" y="835.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="242.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.08%)</title><rect x="239.7" y="819.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="242.7" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.08%)</title><rect x="239.7" y="803.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="242.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.08%)</title><rect x="239.7" y="787.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="242.7" y="798.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.08%)</title><rect x="239.7" y="771.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="242.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (9 samples, 0.75%)</title><rect x="240.7" y="851.0" width="8.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="243.7" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.08%)</title><rect x="240.7" y="835.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="243.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (8 samples, 0.66%)</title><rect x="241.7" y="835.0" width="7.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="244.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (8 samples, 0.66%)</title><rect x="241.7" y="819.0" width="7.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="244.7" y="830.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (8 samples, 0.66%)</title><rect x="241.7" y="803.0" width="7.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="244.7" y="814.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (3 samples, 0.25%)</title><rect x="245.6" y="787.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="248.6" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (3 samples, 0.25%)</title><rect x="245.6" y="771.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="248.6" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (3 samples, 0.25%)</title><rect x="245.6" y="755.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="248.6" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (3 samples, 0.25%)</title><rect x="245.6" y="739.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="248.6" y="750.0"></text>
</g>
<g>
<title>java/util/Arrays$ArrayList.toArray (1 samples, 0.08%)</title><rect x="248.5" y="787.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="251.5" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="248.5" y="771.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="251.5" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="248.5" y="755.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="251.5" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="248.5" y="739.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="251.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.08%)</title><rect x="249.5" y="883.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="252.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isFetchable (1 samples, 0.08%)</title><rect x="250.5" y="883.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="253.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$2300 (1 samples, 0.08%)</title><rect x="250.5" y="867.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="253.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.isFetchable (1 samples, 0.08%)</title><rect x="250.5" y="851.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="253.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionLead (1 samples, 0.08%)</title><rect x="251.5" y="883.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="254.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.08%)</title><rect x="251.5" y="867.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="254.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (8 samples, 0.66%)</title><rect x="252.5" y="931.0" width="7.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="255.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (5 samples, 0.41%)</title><rect x="252.5" y="915.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="255.5" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (5 samples, 0.41%)</title><rect x="252.5" y="899.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="255.5" y="910.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 0.25%)</title><rect x="253.4" y="883.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="256.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$236/1271389189.accept (3 samples, 0.25%)</title><rect x="253.4" y="867.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="256.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (3 samples, 0.25%)</title><rect x="253.4" y="851.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="256.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (2 samples, 0.17%)</title><rect x="253.4" y="835.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="256.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.08%)</title><rect x="253.4" y="819.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="256.4" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="253.4" y="803.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="256.4" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="253.4" y="787.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="256.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.08%)</title><rect x="254.4" y="819.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="257.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.08%)</title><rect x="254.4" y="803.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="257.4" y="814.0"></text>
</g>
<g>
<title>java/util/Optional.ofNullable (1 samples, 0.08%)</title><rect x="254.4" y="787.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="257.4" y="798.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.08%)</title><rect x="254.4" y="771.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="257.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.08%)</title><rect x="255.4" y="835.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="258.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.08%)</title><rect x="255.4" y="819.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="258.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.08%)</title><rect x="255.4" y="803.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="258.4" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="256.4" y="883.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="259.4" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="256.4" y="867.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="259.4" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="256.4" y="851.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="259.4" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="256.4" y="835.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="259.4" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="256.4" y="819.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="259.4" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="256.4" y="803.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="259.4" y="814.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$82/508223132.get (1 samples, 0.08%)</title><rect x="256.4" y="787.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="259.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (3 samples, 0.25%)</title><rect x="257.3" y="915.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="260.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (2 samples, 0.17%)</title><rect x="257.3" y="899.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="260.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (2 samples, 0.17%)</title><rect x="257.3" y="883.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="260.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.invokeCompletedOffsetCommitCallbacks (1 samples, 0.08%)</title><rect x="257.3" y="867.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="260.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.08%)</title><rect x="258.3" y="867.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="261.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (1 samples, 0.08%)</title><rect x="258.3" y="851.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="261.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (1 samples, 0.08%)</title><rect x="258.3" y="835.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="261.3" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="258.3" y="819.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="261.3" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="258.3" y="803.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="261.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.pollHeartbeat (1 samples, 0.08%)</title><rect x="259.3" y="899.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="262.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (11 samples, 0.91%)</title><rect x="260.3" y="931.0" width="10.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="263.3" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (9 samples, 0.75%)</title><rect x="260.3" y="915.0" width="8.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="263.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleTimedOutRequests (1 samples, 0.08%)</title><rect x="260.3" y="899.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="263.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (8 samples, 0.66%)</title><rect x="261.3" y="899.0" width="7.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="264.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (7 samples, 0.58%)</title><rect x="261.3" y="883.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="264.3" y="894.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1967410333.linkToTargetMethod (1 samples, 0.08%)</title><rect x="262.2" y="867.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="265.2" y="878.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/2079866967.invokeStatic_JJ_L (1 samples, 0.08%)</title><rect x="262.2" y="851.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="265.2" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$IdleExpiryManager.update (1 samples, 0.08%)</title><rect x="263.2" y="867.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="266.2" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.08%)</title><rect x="263.2" y="851.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="266.2" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="263.2" y="835.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="266.2" y="846.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.afterNodeAccess (1 samples, 0.08%)</title><rect x="263.2" y="819.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="266.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (4 samples, 0.33%)</title><rect x="264.2" y="867.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="267.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (4 samples, 0.33%)</title><rect x="264.2" y="851.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="267.2" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (4 samples, 0.33%)</title><rect x="264.2" y="835.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="267.2" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (4 samples, 0.33%)</title><rect x="264.2" y="819.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="267.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (4 samples, 0.33%)</title><rect x="264.2" y="803.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="267.2" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (4 samples, 0.33%)</title><rect x="264.2" y="787.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="267.2" y="798.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.25%)</title><rect x="264.2" y="771.0" width="2.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="267.2" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.08%)</title><rect x="267.1" y="771.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="270.1" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.08%)</title><rect x="267.1" y="755.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="270.1" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.08%)</title><rect x="267.1" y="739.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="270.1" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (1 samples, 0.08%)</title><rect x="267.1" y="723.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="270.1" y="734.0"></text>
</g>
<g>
<title>__read (1 samples, 0.08%)</title><rect x="267.1" y="707.0" width="1.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="270.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/SystemTime.milliseconds (1 samples, 0.08%)</title><rect x="268.1" y="883.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="271.1" y="894.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.08%)</title><rect x="268.1" y="867.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="271.1" y="878.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="268.1" y="851.0" width="1.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="271.1" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.17%)</title><rect x="269.1" y="915.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="272.1" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (2 samples, 0.17%)</title><rect x="269.1" y="899.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="272.1" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.17%)</title><rect x="269.1" y="883.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="272.1" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.17%)</title><rect x="269.1" y="867.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="272.1" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.send (1 samples, 0.08%)</title><rect x="269.1" y="851.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="272.1" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.setSend (1 samples, 0.08%)</title><rect x="269.1" y="835.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="272.1" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.addInterestOps (1 samples, 0.08%)</title><rect x="269.1" y="819.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="272.1" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.interestOps (1 samples, 0.08%)</title><rect x="269.1" y="803.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="272.1" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.nioInterestOps (1 samples, 0.08%)</title><rect x="269.1" y="787.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="272.1" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.translateAndSetInterestOps (1 samples, 0.08%)</title><rect x="269.1" y="771.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="272.1" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.putEventOps (1 samples, 0.08%)</title><rect x="269.1" y="755.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="272.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.08%)</title><rect x="270.0" y="851.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="273.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.08%)</title><rect x="270.0" y="835.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="273.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.08%)</title><rect x="270.0" y="819.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="273.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.08%)</title><rect x="270.0" y="803.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="273.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.08%)</title><rect x="270.0" y="787.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="273.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.write (1 samples, 0.08%)</title><rect x="270.0" y="771.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="273.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.08%)</title><rect x="270.0" y="755.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="273.0" y="766.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.08%)</title><rect x="270.0" y="739.0" width="1.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="273.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (3 samples, 0.25%)</title><rect x="271.0" y="931.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="274.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (3 samples, 0.25%)</title><rect x="271.0" y="915.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="274.0" y="926.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.08%)</title><rect x="271.0" y="899.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="274.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$260/1507470912.accept (1 samples, 0.08%)</title><rect x="271.0" y="883.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="274.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.08%)</title><rect x="271.0" y="867.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="274.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.08%)</title><rect x="271.0" y="851.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="274.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.08%)</title><rect x="271.0" y="835.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="274.0" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="271.0" y="819.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="274.0" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="271.0" y="803.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="274.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.08%)</title><rect x="272.0" y="899.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="275.0" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.next (1 samples, 0.08%)</title><rect x="272.0" y="883.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="275.0" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.advance (1 samples, 0.08%)</title><rect x="272.0" y="867.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="275.0" y="878.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.08%)</title><rect x="273.0" y="899.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="276.0" y="910.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="273.0" y="883.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="276.0" y="894.0"></text>
</g>
<g>
<title>java/lang/Thread.run (807 samples, 66.86%)</title><rect x="274.0" y="995.0" width="788.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="277.0" y="1006.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (807 samples, 66.86%)</title><rect x="274.0" y="979.0" width="788.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="277.0" y="990.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (807 samples, 66.86%)</title><rect x="274.0" y="963.0" width="788.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="277.0" y="974.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$288/1072393613.run (563 samples, 46.64%)</title><rect x="277.9" y="947.0" width="550.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="280.9" y="958.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$288/10..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62 (562 samples, 46.56%)</title><rect x="278.8" y="931.0" width="549.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="281.8" y="942.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (562 samples, 46.56%)</title><rect x="278.8" y="915.0" width="549.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="281.8" y="926.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (562 samples, 46.56%)</title><rect x="278.8" y="899.0" width="549.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="281.8" y="910.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThen..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="291.6" y="883.0" width="0.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="294.6" y="894.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.50%)</title><rect x="292.5" y="883.0" width="5.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="295.5" y="894.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.41%)</title><rect x="293.5" y="867.0" width="4.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="296.5" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (10 samples, 0.83%)</title><rect x="298.4" y="883.0" width="9.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="301.4" y="894.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (10 samples, 0.83%)</title><rect x="298.4" y="867.0" width="9.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="301.4" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.get (10 samples, 0.83%)</title><rect x="298.4" y="851.0" width="9.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="301.4" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (10 samples, 0.83%)</title><rect x="298.4" y="835.0" width="9.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="301.4" y="846.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.58%)</title><rect x="300.4" y="819.0" width="6.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="303.4" y="830.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.58%)</title><rect x="300.4" y="803.0" width="6.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="303.4" y="814.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="307.2" y="819.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="310.2" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (46 samples, 3.81%)</title><rect x="308.2" y="883.0" width="44.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="311.2" y="894.0">com/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (35 samples, 2.90%)</title><rect x="318.9" y="867.0" width="34.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="321.9" y="878.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (35 samples, 2.90%)</title><rect x="318.9" y="851.0" width="34.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="321.9" y="862.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (35 samples, 2.90%)</title><rect x="318.9" y="835.0" width="34.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="321.9" y="846.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.08%)</title><rect x="318.9" y="819.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="321.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.08%)</title><rect x="318.9" y="803.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="321.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (34 samples, 2.82%)</title><rect x="319.9" y="819.0" width="33.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="322.9" y="830.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$293/748416563.accept (34 samples, 2.82%)</title><rect x="319.9" y="803.0" width="33.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="322.9" y="814.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (34 samples, 2.82%)</title><rect x="319.9" y="787.0" width="33.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="322.9" y="798.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$286/1621679832.accept (1 samples, 0.08%)</title><rect x="320.9" y="771.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="323.9" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$285/268518732.accept (1 samples, 0.08%)</title><rect x="321.9" y="771.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="324.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (31 samples, 2.57%)</title><rect x="322.8" y="771.0" width="30.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="325.8" y="782.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (31 samples, 2.57%)</title><rect x="322.8" y="755.0" width="30.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="325.8" y="766.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (30 samples, 2.49%)</title><rect x="323.8" y="739.0" width="29.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="326.8" y="750.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (8 samples, 0.66%)</title><rect x="323.8" y="723.0" width="7.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="326.8" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (8 samples, 0.66%)</title><rect x="323.8" y="707.0" width="7.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="326.8" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (22 samples, 1.82%)</title><rect x="331.6" y="723.0" width="21.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="334.6" y="734.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$285/268518732.accept (1 samples, 0.08%)</title><rect x="352.2" y="707.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="355.2" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ExecutionScheduler.schedule (1 samples, 0.08%)</title><rect x="353.1" y="883.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="356.1" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ExecutionScheduler.waitOnScheduledTime (1 samples, 0.08%)</title><rect x="353.1" y="867.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="356.1" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ExecutionScheduler$$Lambda$203/1021100561.get (1 samples, 0.08%)</title><rect x="353.1" y="851.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="356.1" y="862.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.08%)</title><rect x="353.1" y="835.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="356.1" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="353.1" y="819.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="356.1" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (158 samples, 13.09%)</title><rect x="354.1" y="883.0" width="154.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="357.1" y="894.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$45/1556995360.extract (156 samples, 12.92%)</title><rect x="356.1" y="867.0" width="152.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="359.1" y="878.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (156 samples, 12.92%)</title><rect x="356.1" y="851.0" width="152.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="359.1" y="862.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (156 samples, 12.92%)</title><rect x="356.1" y="835.0" width="152.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="359.1" y="846.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (156 samples, 12.92%)</title><rect x="356.1" y="819.0" width="152.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="359.1" y="830.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (156 samples, 12.92%)</title><rect x="356.1" y="803.0" width="152.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="359.1" y="814.0">com/fasterxml/jacks..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (51 samples, 4.23%)</title><rect x="356.1" y="787.0" width="49.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="359.1" y="798.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (15 samples, 1.24%)</title><rect x="356.1" y="771.0" width="14.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="359.1" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (15 samples, 1.24%)</title><rect x="356.1" y="755.0" width="14.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="359.1" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (15 samples, 1.24%)</title><rect x="356.1" y="739.0" width="14.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="359.1" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (15 samples, 1.24%)</title><rect x="356.1" y="723.0" width="14.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="359.1" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (36 samples, 2.98%)</title><rect x="370.7" y="771.0" width="35.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="373.7" y="782.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (36 samples, 2.98%)</title><rect x="370.7" y="755.0" width="35.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="373.7" y="766.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (18 samples, 1.49%)</title><rect x="370.7" y="739.0" width="17.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="373.7" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (18 samples, 1.49%)</title><rect x="370.7" y="723.0" width="17.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="373.7" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (4 samples, 0.33%)</title><rect x="383.5" y="707.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="386.5" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="387.4" y="707.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="390.4" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (12 samples, 0.99%)</title><rect x="388.3" y="739.0" width="11.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="391.3" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="388.3" y="723.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="391.3" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="388.3" y="707.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="391.3" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="388.3" y="691.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="391.3" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="388.3" y="675.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="391.3" y="686.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="388.3" y="659.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="391.3" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (11 samples, 0.91%)</title><rect x="389.3" y="723.0" width="10.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="392.3" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (4 samples, 0.33%)</title><rect x="394.2" y="707.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="397.2" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (2 samples, 0.17%)</title><rect x="398.1" y="707.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="401.1" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (6 samples, 0.50%)</title><rect x="400.1" y="739.0" width="5.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="403.1" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (3 samples, 0.25%)</title><rect x="400.1" y="723.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="403.1" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (3 samples, 0.25%)</title><rect x="403.0" y="723.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="406.0" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (96 samples, 7.95%)</title><rect x="405.9" y="787.0" width="93.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="408.9" y="798.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.17%)</title><rect x="405.9" y="771.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="408.9" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (2 samples, 0.17%)</title><rect x="405.9" y="755.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="408.9" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (2 samples, 0.17%)</title><rect x="405.9" y="739.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="408.9" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (2 samples, 0.17%)</title><rect x="405.9" y="723.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="408.9" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 0.17%)</title><rect x="405.9" y="707.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="408.9" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (8 samples, 0.66%)</title><rect x="407.9" y="771.0" width="7.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="410.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (8 samples, 0.66%)</title><rect x="407.9" y="755.0" width="7.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="410.9" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.17%)</title><rect x="413.8" y="739.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="416.8" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (11 samples, 0.91%)</title><rect x="415.7" y="771.0" width="10.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="418.7" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 0.50%)</title><rect x="416.7" y="755.0" width="5.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="419.7" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.08%)</title><rect x="416.7" y="739.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="419.7" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (5 samples, 0.41%)</title><rect x="417.7" y="739.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="420.7" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.17%)</title><rect x="420.6" y="723.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="423.6" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (4 samples, 0.33%)</title><rect x="422.6" y="755.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="425.6" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (8 samples, 0.66%)</title><rect x="426.5" y="771.0" width="7.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="429.5" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (8 samples, 0.66%)</title><rect x="426.5" y="755.0" width="7.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="429.5" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.08%)</title><rect x="433.3" y="739.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="436.3" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.08%)</title><rect x="433.3" y="723.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="436.3" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.08%)</title><rect x="433.3" y="707.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="436.3" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="433.3" y="691.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="436.3" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (67 samples, 5.55%)</title><rect x="434.3" y="771.0" width="65.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="437.3" y="782.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (67 samples, 5.55%)</title><rect x="434.3" y="755.0" width="65.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="437.3" y="766.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (13 samples, 1.08%)</title><rect x="435.3" y="739.0" width="12.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="438.3" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.17%)</title><rect x="435.3" y="723.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="438.3" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.17%)</title><rect x="435.3" y="707.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="438.3" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.17%)</title><rect x="435.3" y="691.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="438.3" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.08%)</title><rect x="436.2" y="675.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="439.2" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (9 samples, 0.75%)</title><rect x="437.2" y="723.0" width="8.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="440.2" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (5 samples, 0.41%)</title><rect x="437.2" y="707.0" width="4.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="440.2" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.08%)</title><rect x="441.1" y="691.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="444.1" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (4 samples, 0.33%)</title><rect x="442.1" y="707.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="445.1" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (4 samples, 0.33%)</title><rect x="442.1" y="691.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="445.1" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (3 samples, 0.25%)</title><rect x="443.1" y="675.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="446.1" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (3 samples, 0.25%)</title><rect x="443.1" y="659.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="446.1" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.17%)</title><rect x="446.0" y="723.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="449.0" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.17%)</title><rect x="446.0" y="707.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="449.0" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (53 samples, 4.39%)</title><rect x="448.0" y="739.0" width="51.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="451.0" y="750.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (53 samples, 4.39%)</title><rect x="448.0" y="723.0" width="51.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="451.0" y="734.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (47 samples, 3.89%)</title><rect x="449.9" y="707.0" width="46.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="452.9" y="718.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (15 samples, 1.24%)</title><rect x="453.8" y="691.0" width="14.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="456.8" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (4 samples, 0.33%)</title><rect x="454.8" y="675.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="457.8" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (7 samples, 0.58%)</title><rect x="458.7" y="675.0" width="6.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="461.7" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (7 samples, 0.58%)</title><rect x="458.7" y="659.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="461.7" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (7 samples, 0.58%)</title><rect x="458.7" y="643.0" width="6.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="461.7" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.08%)</title><rect x="460.7" y="627.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="463.7" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (4 samples, 0.33%)</title><rect x="461.7" y="627.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="464.7" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.17%)</title><rect x="463.6" y="611.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="466.6" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.17%)</title><rect x="463.6" y="595.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="466.6" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (2 samples, 0.17%)</title><rect x="463.6" y="579.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="466.6" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.08%)</title><rect x="465.6" y="675.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="468.6" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.08%)</title><rect x="465.6" y="659.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="468.6" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (2 samples, 0.17%)</title><rect x="466.6" y="675.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="469.6" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (9 samples, 0.75%)</title><rect x="468.5" y="691.0" width="8.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="471.5" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (8 samples, 0.66%)</title><rect x="469.5" y="675.0" width="7.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="472.5" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (8 samples, 0.66%)</title><rect x="469.5" y="659.0" width="7.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="472.5" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (8 samples, 0.66%)</title><rect x="469.5" y="643.0" width="7.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="472.5" y="654.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (8 samples, 0.66%)</title><rect x="469.5" y="627.0" width="7.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="472.5" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 0.25%)</title><rect x="477.3" y="691.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="480.3" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (8 samples, 0.66%)</title><rect x="480.2" y="691.0" width="7.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="483.2" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (8 samples, 0.66%)</title><rect x="480.2" y="675.0" width="7.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="483.2" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (8 samples, 0.66%)</title><rect x="480.2" y="659.0" width="7.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="483.2" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (8 samples, 0.66%)</title><rect x="480.2" y="643.0" width="7.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="483.2" y="654.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (8 samples, 0.66%)</title><rect x="480.2" y="627.0" width="7.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="483.2" y="638.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (3 samples, 0.25%)</title><rect x="485.1" y="611.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="488.1" y="622.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (3 samples, 0.25%)</title><rect x="485.1" y="595.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="488.1" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (4 samples, 0.33%)</title><rect x="488.1" y="691.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="491.1" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.33%)</title><rect x="488.1" y="675.0" width="3.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="491.1" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.33%)</title><rect x="488.1" y="659.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="491.1" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (2 samples, 0.17%)</title><rect x="490.0" y="643.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="493.0" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (4 samples, 0.33%)</title><rect x="492.0" y="691.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="495.0" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (2 samples, 0.17%)</title><rect x="493.9" y="675.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="496.9" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.17%)</title><rect x="493.9" y="659.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="496.9" y="670.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.17%)</title><rect x="493.9" y="643.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="496.9" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.17%)</title><rect x="493.9" y="627.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="496.9" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.17%)</title><rect x="493.9" y="611.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="496.9" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="493.9" y="595.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="496.9" y="606.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.08%)</title><rect x="494.9" y="595.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="497.9" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase._delegateDeserializer (4 samples, 0.33%)</title><rect x="495.9" y="707.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="498.9" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (9 samples, 0.75%)</title><rect x="499.8" y="787.0" width="8.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="502.8" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (9 samples, 0.75%)</title><rect x="499.8" y="771.0" width="8.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="502.8" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (9 samples, 0.75%)</title><rect x="499.8" y="755.0" width="8.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="502.8" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (9 samples, 0.75%)</title><rect x="499.8" y="739.0" width="8.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="502.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (9 samples, 0.75%)</title><rect x="499.8" y="723.0" width="8.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="502.8" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (319 samples, 26.43%)</title><rect x="508.6" y="883.0" width="311.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="511.6" y="894.0">com/linecorp/decaton/processor/runtime/int..</text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.33%)</title><rect x="511.5" y="867.0" width="3.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="514.5" y="878.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.33%)</title><rect x="511.5" y="851.0" width="3.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="514.5" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (63 samples, 5.22%)</title><rect x="515.4" y="867.0" width="61.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="518.4" y="878.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (1 samples, 0.08%)</title><rect x="515.4" y="851.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="518.4" y="862.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (62 samples, 5.14%)</title><rect x="516.4" y="851.0" width="60.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="519.4" y="862.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (57 samples, 4.72%)</title><rect x="521.3" y="835.0" width="55.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="524.3" y="846.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (25 samples, 2.07%)</title><rect x="525.2" y="819.0" width="24.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="528.2" y="830.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (25 samples, 2.07%)</title><rect x="525.2" y="803.0" width="24.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="528.2" y="814.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (25 samples, 2.07%)</title><rect x="525.2" y="787.0" width="24.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="528.2" y="798.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (25 samples, 2.07%)</title><rect x="525.2" y="771.0" width="24.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="528.2" y="782.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (25 samples, 2.07%)</title><rect x="525.2" y="755.0" width="24.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="528.2" y="766.0">j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.wasLastOpReadOrNull (2 samples, 0.17%)</title><rect x="549.7" y="819.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="552.7" y="830.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.17%)</title><rect x="549.7" y="803.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="552.7" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.17%)</title><rect x="551.6" y="819.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="554.6" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.17%)</title><rect x="551.6" y="803.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="554.6" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.17%)</title><rect x="551.6" y="787.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="554.6" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (24 samples, 1.99%)</title><rect x="553.6" y="819.0" width="23.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="556.6" y="830.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (10 samples, 0.83%)</title><rect x="566.3" y="803.0" width="9.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="569.3" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.25%)</title><rect x="566.3" y="787.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="569.3" y="798.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.25%)</title><rect x="566.3" y="771.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="569.3" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (7 samples, 0.58%)</title><rect x="569.2" y="787.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="572.2" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.08%)</title><rect x="576.0" y="803.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="579.0" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.50%)</title><rect x="577.0" y="867.0" width="5.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="580.0" y="878.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.41%)</title><rect x="578.0" y="851.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="581.0" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (161 samples, 13.34%)</title><rect x="582.9" y="867.0" width="157.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="585.9" y="878.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (158 samples, 13.09%)</title><rect x="582.9" y="851.0" width="154.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="585.9" y="862.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (69 samples, 5.72%)</title><rect x="593.6" y="835.0" width="67.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="596.6" y="846.0">com/lin..</text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.08%)</title><rect x="608.3" y="819.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="611.3" y="830.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.08%)</title><rect x="608.3" y="803.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="611.3" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="608.3" y="787.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="611.3" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="608.3" y="771.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="611.3" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="608.3" y="755.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="611.3" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="608.3" y="739.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="611.3" y="750.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.08%)</title><rect x="608.3" y="723.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="611.3" y="734.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (31 samples, 2.57%)</title><rect x="609.3" y="819.0" width="30.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="612.3" y="830.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (30 samples, 2.49%)</title><rect x="610.3" y="803.0" width="29.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="613.3" y="814.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (9 samples, 0.75%)</title><rect x="620.0" y="787.0" width="8.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="623.0" y="798.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (9 samples, 0.75%)</title><rect x="620.0" y="771.0" width="8.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="623.0" y="782.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (9 samples, 0.75%)</title><rect x="620.0" y="755.0" width="8.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="623.0" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="620.0" y="739.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="623.0" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (7 samples, 0.58%)</title><rect x="621.0" y="739.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="624.0" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="622.0" y="723.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="625.0" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (4 samples, 0.33%)</title><rect x="623.0" y="723.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="626.0" y="734.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="623.0" y="707.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="626.0" y="718.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.25%)</title><rect x="624.0" y="707.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="627.0" y="718.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (3 samples, 0.25%)</title><rect x="624.0" y="691.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="627.0" y="702.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="624.0" y="675.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="627.0" y="686.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="624.0" y="659.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="627.0" y="670.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (2 samples, 0.17%)</title><rect x="624.9" y="675.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="627.9" y="686.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="626.9" y="723.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="629.9" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="626.9" y="707.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="629.9" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="626.9" y="691.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="629.9" y="702.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="627.9" y="739.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="630.9" y="750.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (8 samples, 0.66%)</title><rect x="628.8" y="787.0" width="7.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="631.8" y="798.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.17%)</title><rect x="636.7" y="787.0" width="1.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="639.7" y="798.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="638.6" y="787.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="641.6" y="798.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (2 samples, 0.17%)</title><rect x="639.6" y="819.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="642.6" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.17%)</title><rect x="639.6" y="803.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="642.6" y="814.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.17%)</title><rect x="639.6" y="787.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="642.6" y="798.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (20 samples, 1.66%)</title><rect x="641.5" y="819.0" width="19.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="644.5" y="830.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (3 samples, 0.25%)</title><rect x="661.1" y="835.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="664.1" y="846.0"></text>
</g>
<g>
<title>java/lang/Long.toString (3 samples, 0.25%)</title><rect x="661.1" y="819.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="664.1" y="830.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.25%)</title><rect x="661.1" y="803.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="664.1" y="814.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.08%)</title><rect x="664.0" y="835.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="667.0" y="846.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.08%)</title><rect x="664.0" y="819.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="667.0" y="830.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.08%)</title><rect x="664.0" y="803.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="667.0" y="814.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.08%)</title><rect x="664.0" y="787.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="667.0" y="798.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.08%)</title><rect x="664.0" y="771.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="667.0" y="782.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (74 samples, 6.13%)</title><rect x="665.0" y="835.0" width="72.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="668.0" y="846.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (71 samples, 5.88%)</title><rect x="667.9" y="819.0" width="69.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="670.9" y="830.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 0.41%)</title><rect x="667.9" y="803.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="670.9" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.41%)</title><rect x="667.9" y="787.0" width="4.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="670.9" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 0.41%)</title><rect x="667.9" y="771.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="670.9" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.41%)</title><rect x="667.9" y="755.0" width="4.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="670.9" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="672.8" y="803.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="675.8" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="672.8" y="787.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="675.8" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="672.8" y="771.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="675.8" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.08%)</title><rect x="672.8" y="755.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="675.8" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="672.8" y="739.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="675.8" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (65 samples, 5.39%)</title><rect x="673.8" y="803.0" width="63.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="676.8" y="814.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.put (58 samples, 4.81%)</title><rect x="680.7" y="787.0" width="56.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="683.7" y="798.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.putVal (32 samples, 2.65%)</title><rect x="706.1" y="771.0" width="31.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="709.1" y="782.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.25%)</title><rect x="724.6" y="755.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="727.6" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (5 samples, 0.41%)</title><rect x="727.6" y="755.0" width="4.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="730.6" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="731.5" y="739.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="734.5" y="750.0"></text>
</g>
<g>
<title>vtable stub (5 samples, 0.41%)</title><rect x="732.5" y="755.0" width="4.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="735.5" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (3 samples, 0.25%)</title><rect x="737.4" y="851.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="740.4" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (3 samples, 0.25%)</title><rect x="737.4" y="835.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="740.4" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.25%)</title><rect x="737.4" y="819.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="740.4" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.25%)</title><rect x="737.4" y="803.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="740.4" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (72 samples, 5.97%)</title><rect x="740.3" y="867.0" width="70.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="743.3" y="878.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (4 samples, 0.33%)</title><rect x="741.3" y="851.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="744.3" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (67 samples, 5.55%)</title><rect x="745.2" y="851.0" width="65.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="748.2" y="862.0">com/lin..</text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="745.2" y="835.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="748.2" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$209/787971479.process (25 samples, 2.07%)</title><rect x="746.2" y="835.0" width="24.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="749.2" y="846.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (25 samples, 2.07%)</title><rect x="746.2" y="819.0" width="24.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="749.2" y="830.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (22 samples, 1.82%)</title><rect x="748.1" y="803.0" width="21.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="751.1" y="814.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.25%)</title><rect x="755.0" y="787.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="758.0" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.25%)</title><rect x="755.0" y="771.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="758.0" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 0.25%)</title><rect x="755.0" y="755.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="758.0" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (3 samples, 0.25%)</title><rect x="755.0" y="739.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="758.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.17%)</title><rect x="755.9" y="723.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="758.9" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (10 samples, 0.83%)</title><rect x="757.9" y="787.0" width="9.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="760.9" y="798.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.17%)</title><rect x="759.8" y="771.0" width="2.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="762.8" y="782.0"></text>
</g>
<g>
<title>_init (1 samples, 0.08%)</title><rect x="761.8" y="771.0" width="1.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="764.8" y="782.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.41%)</title><rect x="762.8" y="771.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="765.8" y="782.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.33%)</title><rect x="763.8" y="755.0" width="3.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="766.8" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.17%)</title><rect x="767.7" y="787.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="770.7" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="768.6" y="771.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="771.6" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="768.6" y="755.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="771.6" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.08%)</title><rect x="769.6" y="803.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="772.6" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="769.6" y="787.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="772.6" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (2 samples, 0.17%)</title><rect x="770.6" y="835.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="773.6" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (1 samples, 0.08%)</title><rect x="771.6" y="819.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="774.6" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (6 samples, 0.50%)</title><rect x="772.6" y="835.0" width="5.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="775.6" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (4 samples, 0.33%)</title><rect x="772.6" y="819.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="775.6" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (2 samples, 0.17%)</title><rect x="776.5" y="819.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="779.5" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.17%)</title><rect x="776.5" y="803.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="779.5" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="776.5" y="787.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="779.5" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.08%)</title><rect x="776.5" y="771.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="779.5" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="777.4" y="787.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="780.4" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="777.4" y="771.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="780.4" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="777.4" y="755.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="780.4" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.17%)</title><rect x="778.4" y="835.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="781.4" y="846.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.17%)</title><rect x="778.4" y="819.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="781.4" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.loggingExceptions (1 samples, 0.08%)</title><rect x="780.4" y="835.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="783.4" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$290/908511243.get (1 samples, 0.08%)</title><rect x="780.4" y="819.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="783.4" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$75 (1 samples, 0.08%)</title><rect x="780.4" y="803.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="783.4" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/260840925.linkToTargetMethod (3 samples, 0.25%)</title><rect x="781.4" y="835.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="784.4" y="846.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/205962452.invokeStatic_L_L (3 samples, 0.25%)</title><rect x="781.4" y="819.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="784.4" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$291/1389581783.get$Lambda (3 samples, 0.25%)</title><rect x="781.4" y="803.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="784.4" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="783.3" y="787.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="786.3" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="783.3" y="771.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="786.3" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="783.3" y="755.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="786.3" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="783.3" y="739.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="786.3" y="750.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.08%)</title><rect x="783.3" y="723.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="786.3" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.08%)</title><rect x="784.3" y="835.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="787.3" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.08%)</title><rect x="784.3" y="819.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="787.3" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (11 samples, 0.91%)</title><rect x="785.3" y="835.0" width="10.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="788.3" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (11 samples, 0.91%)</title><rect x="785.3" y="819.0" width="10.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="788.3" y="830.0"></text>
</g>
<g>
<title>itable stub (9 samples, 0.75%)</title><rect x="785.3" y="803.0" width="8.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="788.3" y="814.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.17%)</title><rect x="794.1" y="803.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="797.1" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.08%)</title><rect x="796.0" y="835.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="799.0" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.08%)</title><rect x="796.0" y="819.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="799.0" y="830.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (1 samples, 0.08%)</title><rect x="796.0" y="803.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="799.0" y="814.0"></text>
</g>
<g>
<title>java/util/ArrayList.elementData (1 samples, 0.08%)</title><rect x="796.0" y="787.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="799.0" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (7 samples, 0.58%)</title><rect x="797.0" y="835.0" width="6.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="800.0" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.25%)</title><rect x="800.9" y="819.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="803.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 0.58%)</title><rect x="803.8" y="835.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="806.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 0.50%)</title><rect x="804.8" y="819.0" width="5.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="807.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 0.50%)</title><rect x="804.8" y="803.0" width="5.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="807.8" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="804.8" y="787.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="807.8" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="804.8" y="771.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="807.8" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="804.8" y="755.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="807.8" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="804.8" y="739.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="807.8" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="804.8" y="723.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="807.8" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.25%)</title><rect x="805.8" y="787.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="808.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (3 samples, 0.25%)</title><rect x="805.8" y="771.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="808.8" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (3 samples, 0.25%)</title><rect x="805.8" y="755.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="808.8" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$291/1389581783.accept (2 samples, 0.17%)</title><rect x="805.8" y="739.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="808.8" y="750.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="807.7" y="739.0" width="1.0" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="810.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.17%)</title><rect x="808.7" y="787.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="811.7" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$291/1389581783.accept (1 samples, 0.08%)</title><rect x="809.7" y="771.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="812.7" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$76 (1 samples, 0.08%)</title><rect x="809.7" y="755.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="812.7" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (1 samples, 0.08%)</title><rect x="810.7" y="867.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="813.7" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="810.7" y="851.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="813.7" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="810.7" y="835.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="813.7" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="810.7" y="819.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="813.7" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="810.7" y="803.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="813.7" y="814.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.08%)</title><rect x="810.7" y="787.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="813.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (9 samples, 0.75%)</title><rect x="811.7" y="867.0" width="8.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="814.7" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (9 samples, 0.75%)</title><rect x="811.7" y="851.0" width="8.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="814.7" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (9 samples, 0.75%)</title><rect x="811.7" y="835.0" width="8.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="814.7" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.25%)</title><rect x="811.7" y="819.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="814.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (3 samples, 0.25%)</title><rect x="811.7" y="803.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="814.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (3 samples, 0.25%)</title><rect x="811.7" y="787.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="814.7" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$292/1070389865.accept (1 samples, 0.08%)</title><rect x="813.6" y="771.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="816.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 0.50%)</title><rect x="814.6" y="819.0" width="5.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="817.6" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$292/1070389865.accept (6 samples, 0.50%)</title><rect x="814.6" y="803.0" width="5.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="817.6" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="814.6" y="787.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="817.6" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="814.6" y="771.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="817.6" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="814.6" y="755.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="817.6" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="814.6" y="739.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="817.6" y="750.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="814.6" y="723.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="817.6" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.08%)</title><rect x="814.6" y="707.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="817.6" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$57 (5 samples, 0.41%)</title><rect x="815.6" y="787.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="818.6" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (5 samples, 0.41%)</title><rect x="815.6" y="771.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="818.6" y="782.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (5 samples, 0.41%)</title><rect x="815.6" y="755.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="818.6" y="766.0"></text>
</g>
<g>
<title>java/time/Duration.create (5 samples, 0.41%)</title><rect x="815.6" y="739.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="818.6" y="750.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.33%)</title><rect x="816.5" y="723.0" width="4.0" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="819.5" y="734.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.33%)</title><rect x="816.5" y="707.0" width="4.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="819.5" y="718.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.58%)</title><rect x="820.5" y="883.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="823.5" y="894.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.58%)</title><rect x="820.5" y="867.0" width="6.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="823.5" y="878.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="827.3" y="883.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="830.3" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.17%)</title><rect x="828.3" y="947.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="831.3" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.17%)</title><rect x="828.3" y="931.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="831.3" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.17%)</title><rect x="828.3" y="915.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="831.3" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.17%)</title><rect x="828.3" y="899.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="831.3" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (238 samples, 19.72%)</title><rect x="830.2" y="947.0" width="232.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="833.2" y="958.0">java/util/concurrent/ThreadPool..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (237 samples, 19.64%)</title><rect x="831.2" y="931.0" width="231.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="834.2" y="942.0">java/util/concurrent/LinkedBloc..</text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.08%)</title><rect x="848.8" y="915.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="851.8" y="926.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.08%)</title><rect x="848.8" y="899.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="851.8" y="910.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_invocation_event(methodHandle, methodHandle, CompLevel, nmethod*, JavaThread*) (1 samples, 0.08%)</title><rect x="848.8" y="883.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="851.8" y="894.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.08%)</title><rect x="848.8" y="867.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="851.8" y="878.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::submit_compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.08%)</title><rect x="848.8" y="851.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="851.8" y="862.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.08%)</title><rect x="848.8" y="835.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="851.8" y="846.0"></text>
</g>
<g>
<title>ConstantPool::resolve_string_constants_impl(constantPoolHandle, Thread*) (1 samples, 0.08%)</title><rect x="848.8" y="819.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="851.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.dequeue (5 samples, 0.41%)</title><rect x="849.8" y="915.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="852.8" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (1 samples, 0.08%)</title><rect x="854.7" y="915.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="857.7" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.08%)</title><rect x="854.7" y="899.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="857.7" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (203 samples, 16.82%)</title><rect x="855.7" y="915.0" width="198.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="858.7" y="926.0">java/util/concurrent/locks..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (17 samples, 1.41%)</title><rect x="865.4" y="899.0" width="16.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="868.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (17 samples, 1.41%)</title><rect x="865.4" y="883.0" width="16.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="868.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (17 samples, 1.41%)</title><rect x="865.4" y="867.0" width="16.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="868.4" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (17 samples, 1.41%)</title><rect x="865.4" y="851.0" width="16.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="868.4" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (1 samples, 0.08%)</title><rect x="882.0" y="899.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="885.0" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (1 samples, 0.08%)</title><rect x="882.0" y="883.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="885.0" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (174 samples, 14.42%)</title><rect x="883.0" y="899.0" width="170.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="886.0" y="910.0">java/util/concurrent/l..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (164 samples, 13.59%)</title><rect x="892.8" y="883.0" width="160.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="895.8" y="894.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="896.7" y="867.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="899.7" y="878.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (4 samples, 0.33%)</title><rect x="897.7" y="867.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="900.7" y="878.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="901.6" y="867.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="904.6" y="878.0"></text>
</g>
<g>
<title>Unsafe_Park (151 samples, 12.51%)</title><rect x="902.6" y="867.0" width="147.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="905.6" y="878.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.17%)</title><rect x="905.5" y="851.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="908.5" y="862.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (32 samples, 2.65%)</title><rect x="907.5" y="851.0" width="31.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="910.5" y="862.0">Pa..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (17 samples, 1.41%)</title><rect x="916.3" y="835.0" width="16.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="919.3" y="846.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.08%)</title><rect x="920.2" y="819.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="923.2" y="830.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.25%)</title><rect x="921.2" y="819.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="924.2" y="830.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.17%)</title><rect x="922.1" y="803.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="925.1" y="814.0"></text>
</g>
<g>
<title>Monitor::unlock() (6 samples, 0.50%)</title><rect x="924.1" y="819.0" width="5.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="927.1" y="830.0"></text>
</g>
<g>
<title>pthread_getspecific (3 samples, 0.25%)</title><rect x="930.0" y="819.0" width="2.9" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="933.0" y="830.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.08%)</title><rect x="932.9" y="835.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="935.9" y="846.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.08%)</title><rect x="933.9" y="835.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="936.9" y="846.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (4 samples, 0.33%)</title><rect x="934.8" y="835.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="937.8" y="846.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (2 samples, 0.17%)</title><rect x="938.7" y="851.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="941.7" y="862.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.08%)</title><rect x="940.7" y="851.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="943.7" y="862.0"></text>
</g>
<g>
<title>__lll_lock_wait (11 samples, 0.91%)</title><rect x="941.7" y="851.0" width="10.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="944.7" y="862.0"></text>
</g>
<g>
<title>__lll_unlock_wake (30 samples, 2.49%)</title><rect x="952.4" y="851.0" width="29.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="955.4" y="862.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (57 samples, 4.72%)</title><rect x="981.8" y="851.0" width="55.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="984.8" y="862.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.17%)</title><rect x="1037.5" y="851.0" width="1.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1040.5" y="862.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.08%)</title><rect x="1039.4" y="851.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1042.4" y="862.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.08%)</title><rect x="1040.4" y="851.0" width="1.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1043.4" y="862.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.25%)</title><rect x="1041.4" y="851.0" width="2.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1044.4" y="862.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (5 samples, 0.41%)</title><rect x="1044.3" y="851.0" width="4.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1047.3" y="862.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="1049.2" y="851.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1052.2" y="862.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.25%)</title><rect x="1050.2" y="867.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1053.2" y="878.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.08%)</title><rect x="1053.1" y="899.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1056.1" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (8 samples, 0.66%)</title><rect x="1054.1" y="915.0" width="7.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1057.1" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (8 samples, 0.66%)</title><rect x="1054.1" y="899.0" width="7.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1057.1" y="910.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (5 samples, 0.41%)</title><rect x="1054.1" y="883.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1057.1" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.25%)</title><rect x="1059.0" y="883.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1062.0" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.25%)</title><rect x="1059.0" y="867.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1062.0" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.25%)</title><rect x="1059.0" y="851.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1062.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.08%)</title><rect x="1061.9" y="915.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1064.9" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.08%)</title><rect x="1061.9" y="899.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1064.9" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.08%)</title><rect x="1062.9" y="995.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1065.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.08%)</title><rect x="1062.9" y="979.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1065.9" y="990.0"></text>
</g>
<g>
<title>start_thread (129 samples, 10.69%)</title><rect x="1063.9" y="995.0" width="126.1" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1066.9" y="1006.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (129 samples, 10.69%)</title><rect x="1063.9" y="979.0" width="126.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1066.9" y="990.0">java_start(Threa..</text>
</g>
<g>
<title>GangWorker::loop() (20 samples, 1.66%)</title><rect x="1063.9" y="963.0" width="19.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1066.9" y="974.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (5 samples, 0.41%)</title><rect x="1063.9" y="947.0" width="4.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1066.9" y="958.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.41%)</title><rect x="1063.9" y="931.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1066.9" y="942.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (4 samples, 0.33%)</title><rect x="1063.9" y="915.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1066.9" y="926.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.08%)</title><rect x="1067.8" y="915.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1070.8" y="926.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (14 samples, 1.16%)</title><rect x="1068.8" y="947.0" width="13.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1071.8" y="958.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.08%)</title><rect x="1068.8" y="931.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1071.8" y="942.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.17%)</title><rect x="1069.8" y="931.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1072.8" y="942.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.08%)</title><rect x="1069.8" y="915.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1072.8" y="926.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.08%)</title><rect x="1070.7" y="915.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1073.7" y="926.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (4 samples, 0.33%)</title><rect x="1071.7" y="931.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1074.7" y="942.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.17%)</title><rect x="1071.7" y="915.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1074.7" y="926.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.08%)</title><rect x="1071.7" y="899.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1074.7" y="910.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.08%)</title><rect x="1071.7" y="883.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1074.7" y="894.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.08%)</title><rect x="1071.7" y="867.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1074.7" y="878.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="1072.7" y="899.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1075.7" y="910.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="1072.7" y="883.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1075.7" y="894.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="1072.7" y="867.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1075.7" y="878.0"></text>
</g>
<g>
<title>nmethod::get_deopt_original_pc(frame const*) (1 samples, 0.08%)</title><rect x="1072.7" y="851.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1075.7" y="862.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.17%)</title><rect x="1073.7" y="915.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1076.7" y="926.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (2 samples, 0.17%)</title><rect x="1073.7" y="899.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1076.7" y="910.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (7 samples, 0.58%)</title><rect x="1075.6" y="931.0" width="6.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1078.6" y="942.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (7 samples, 0.58%)</title><rect x="1075.6" y="915.0" width="6.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1078.6" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (6 samples, 0.50%)</title><rect x="1075.6" y="899.0" width="5.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1078.6" y="910.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (6 samples, 0.50%)</title><rect x="1075.6" y="883.0" width="5.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1078.6" y="894.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.08%)</title><rect x="1075.6" y="867.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1078.6" y="878.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.08%)</title><rect x="1075.6" y="851.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1078.6" y="862.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (5 samples, 0.41%)</title><rect x="1076.6" y="867.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1079.6" y="878.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (5 samples, 0.41%)</title><rect x="1076.6" y="851.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1079.6" y="862.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.08%)</title><rect x="1077.6" y="835.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1080.6" y="846.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (3 samples, 0.25%)</title><rect x="1078.6" y="835.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1081.6" y="846.0"></text>
</g>
<g>
<title>G1BlockOffsetArray::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.08%)</title><rect x="1079.5" y="819.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1082.5" y="830.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.08%)</title><rect x="1079.5" y="803.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1082.5" y="814.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.08%)</title><rect x="1080.5" y="819.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1083.5" y="830.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.08%)</title><rect x="1081.5" y="899.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1084.5" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.08%)</title><rect x="1081.5" y="883.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1084.5" y="894.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.08%)</title><rect x="1081.5" y="867.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1084.5" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::push_dirty_cards_region(HeapRegion*) (1 samples, 0.08%)</title><rect x="1081.5" y="851.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1084.5" y="862.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.08%)</title><rect x="1082.5" y="947.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1085.5" y="958.0"></text>
</g>
<g>
<title>JavaThread::run() (105 samples, 8.70%)</title><rect x="1083.4" y="963.0" width="102.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1086.4" y="974.0">JavaThread::..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (105 samples, 8.70%)</title><rect x="1083.4" y="947.0" width="102.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1086.4" y="958.0">JavaThread::..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (105 samples, 8.70%)</title><rect x="1083.4" y="931.0" width="102.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1086.4" y="942.0">CompileBroke..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (105 samples, 8.70%)</title><rect x="1083.4" y="915.0" width="102.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1086.4" y="926.0">CompileBroke..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (104 samples, 8.62%)</title><rect x="1083.4" y="899.0" width="101.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1086.4" y="910.0">C2Compiler::..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (104 samples, 8.62%)</title><rect x="1083.4" y="883.0" width="101.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1086.4" y="894.0">Compile::Com..</text>
</g>
<g>
<title>Compile::Code_Gen() (48 samples, 3.98%)</title><rect x="1083.4" y="867.0" width="47.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1086.4" y="878.0">Comp..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.17%)</title><rect x="1083.4" y="851.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1086.4" y="862.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.08%)</title><rect x="1083.4" y="835.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1086.4" y="846.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.08%)</title><rect x="1084.4" y="835.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1087.4" y="846.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.08%)</title><rect x="1084.4" y="819.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1087.4" y="830.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.08%)</title><rect x="1084.4" y="803.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1087.4" y="814.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.17%)</title><rect x="1085.4" y="851.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1088.4" y="862.0"></text>
</g>
<g>
<title>Compile::FillExceptionTables(unsigned int, unsigned int*, unsigned int*, Label*) (1 samples, 0.08%)</title><rect x="1085.4" y="835.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1088.4" y="846.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.08%)</title><rect x="1086.4" y="835.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1089.4" y="846.0"></text>
</g>
<g>
<title>Matcher::Matcher() (1 samples, 0.08%)</title><rect x="1087.3" y="851.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1090.3" y="862.0"></text>
</g>
<g>
<title>Arena::Arena(MemoryType, unsigned long) (1 samples, 0.08%)</title><rect x="1087.3" y="835.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1090.3" y="846.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.08%)</title><rect x="1087.3" y="819.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1090.3" y="830.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.08%)</title><rect x="1087.3" y="803.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1090.3" y="814.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 0.25%)</title><rect x="1088.3" y="851.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1091.3" y="862.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.08%)</title><rect x="1088.3" y="835.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1091.3" y="846.0"></text>
</g>
<g>
<title>Matcher::is_bmi_pattern(Node*, Node*) (1 samples, 0.08%)</title><rect x="1088.3" y="819.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1091.3" y="830.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.17%)</title><rect x="1089.3" y="835.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1092.3" y="846.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.08%)</title><rect x="1090.3" y="819.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1093.3" y="830.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.08%)</title><rect x="1090.3" y="803.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1093.3" y="814.0"></text>
</g>
<g>
<title>State::_sub_Op_CompareAndSwapI(Node const*) (1 samples, 0.08%)</title><rect x="1090.3" y="787.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1093.3" y="798.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.08%)</title><rect x="1091.3" y="851.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1094.3" y="862.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.08%)</title><rect x="1091.3" y="835.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1094.3" y="846.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.08%)</title><rect x="1091.3" y="819.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1094.3" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.17%)</title><rect x="1092.2" y="851.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1095.2" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.17%)</title><rect x="1092.2" y="835.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1095.2" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1092.2" y="819.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1095.2" y="830.0"></text>
</g>
<g>
<title>MachCallNode::pinned() const (1 samples, 0.08%)</title><rect x="1092.2" y="803.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1095.2" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1093.2" y="819.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1096.2" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (37 samples, 3.07%)</title><rect x="1094.2" y="851.0" width="36.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1097.2" y="862.0">Pha..</text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.08%)</title><rect x="1094.2" y="835.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1097.2" y="846.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.17%)</title><rect x="1095.2" y="835.0" width="1.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1098.2" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.25%)</title><rect x="1097.1" y="835.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1100.1" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1098.1" y="819.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1101.1" y="830.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.08%)</title><rect x="1099.1" y="819.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1102.1" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.17%)</title><rect x="1100.1" y="835.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1103.1" y="846.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.17%)</title><rect x="1100.1" y="819.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1103.1" y="830.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1101.0" y="803.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1104.0" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 0.41%)</title><rect x="1102.0" y="835.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1105.0" y="846.0"></text>
</g>
<g>
<title>loadNNode::rule() const (1 samples, 0.08%)</title><rect x="1105.9" y="819.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1108.9" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 0.58%)</title><rect x="1106.9" y="835.0" width="6.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1109.9" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1110.8" y="819.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1113.8" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.17%)</title><rect x="1111.8" y="819.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1114.8" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 0.33%)</title><rect x="1113.7" y="835.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1116.7" y="846.0"></text>
</g>
<g>
<title>loadConPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1115.7" y="819.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1118.7" y="830.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="1116.7" y="819.0" width="1.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1119.7" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.25%)</title><rect x="1117.7" y="835.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1120.7" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.17%)</title><rect x="1118.6" y="819.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1121.6" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1119.6" y="803.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1122.6" y="814.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (1 samples, 0.08%)</title><rect x="1119.6" y="787.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1122.6" y="798.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.08%)</title><rect x="1119.6" y="771.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1122.6" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.08%)</title><rect x="1120.6" y="835.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1123.6" y="846.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (3 samples, 0.25%)</title><rect x="1121.6" y="835.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1124.6" y="846.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.08%)</title><rect x="1121.6" y="819.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1124.6" y="830.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (1 samples, 0.08%)</title><rect x="1121.6" y="803.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1124.6" y="814.0"></text>
</g>
<g>
<title>PhaseIFG::Union(unsigned int, unsigned int) (1 samples, 0.08%)</title><rect x="1121.6" y="787.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1124.6" y="798.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1121.6" y="771.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1124.6" y="782.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.17%)</title><rect x="1122.5" y="819.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1125.5" y="830.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 0.17%)</title><rect x="1122.5" y="803.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1125.5" y="814.0"></text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (1 samples, 0.08%)</title><rect x="1122.5" y="787.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1125.5" y="798.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.08%)</title><rect x="1123.5" y="787.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1126.5" y="798.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.08%)</title><rect x="1124.5" y="835.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1127.5" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1124.5" y="819.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1127.5" y="830.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.08%)</title><rect x="1125.5" y="835.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1128.5" y="846.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.08%)</title><rect x="1126.5" y="835.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1129.5" y="846.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.08%)</title><rect x="1126.5" y="819.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1129.5" y="830.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.25%)</title><rect x="1127.4" y="835.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1130.4" y="846.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.17%)</title><rect x="1128.4" y="819.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1131.4" y="830.0"></text>
</g>
<g>
<title>PhaseLive::getfreeset() (1 samples, 0.08%)</title><rect x="1129.4" y="803.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1132.4" y="814.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int, Arena*) (1 samples, 0.08%)</title><rect x="1129.4" y="787.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1132.4" y="798.0"></text>
</g>
<g>
<title>Compile::Optimize() (46 samples, 3.81%)</title><rect x="1130.4" y="867.0" width="44.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1133.4" y="878.0">Comp..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (2 samples, 0.17%)</title><rect x="1130.4" y="851.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1133.4" y="862.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (2 samples, 0.17%)</title><rect x="1130.4" y="835.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1133.4" y="846.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.08%)</title><rect x="1131.3" y="819.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.3" y="830.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (2 samples, 0.17%)</title><rect x="1132.3" y="851.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1135.3" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_speculative_types() (1 samples, 0.08%)</title><rect x="1133.3" y="835.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1136.3" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.08%)</title><rect x="1134.3" y="851.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1137.3" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.08%)</title><rect x="1134.3" y="835.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1137.3" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1134.3" y="819.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1137.3" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (29 samples, 2.40%)</title><rect x="1135.3" y="851.0" width="28.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1138.3" y="862.0">Ph..</text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.08%)</title><rect x="1135.3" y="835.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.3" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.08%)</title><rect x="1136.2" y="835.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1139.2" y="846.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.08%)</title><rect x="1136.2" y="819.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1139.2" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.08%)</title><rect x="1137.2" y="835.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1140.2" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (23 samples, 1.91%)</title><rect x="1138.2" y="835.0" width="22.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1141.2" y="846.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (20 samples, 1.66%)</title><rect x="1140.1" y="819.0" width="19.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1143.1" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.08%)</title><rect x="1140.1" y="803.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1143.1" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (19 samples, 1.57%)</title><rect x="1141.1" y="803.0" width="18.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1144.1" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.08%)</title><rect x="1155.8" y="787.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.8" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.08%)</title><rect x="1156.8" y="787.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.8" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.17%)</title><rect x="1157.7" y="787.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1160.7" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.08%)</title><rect x="1158.7" y="771.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.7" y="782.0"></text>
</g>
<g>
<title>ProjNode::Opcode() const (1 samples, 0.08%)</title><rect x="1159.7" y="819.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.7" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.17%)</title><rect x="1160.7" y="835.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1163.7" y="846.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.08%)</title><rect x="1160.7" y="819.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.7" y="830.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.08%)</title><rect x="1161.6" y="819.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.6" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.08%)</title><rect x="1162.6" y="835.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.6" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (11 samples, 0.91%)</title><rect x="1163.6" y="851.0" width="10.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.6" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (11 samples, 0.91%)</title><rect x="1163.6" y="835.0" width="10.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.6" y="846.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1164.6" y="819.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.6" y="830.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1164.6" y="803.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1167.6" y="814.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1164.6" y="787.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.6" y="798.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1164.6" y="771.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.6" y="782.0"></text>
</g>
<g>
<title>MemBarNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1165.6" y="819.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.6" y="830.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1165.6" y="803.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.6" y="814.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1165.6" y="787.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.6" y="798.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1165.6" y="771.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1168.6" y="782.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1165.6" y="755.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1168.6" y="766.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.08%)</title><rect x="1165.6" y="739.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.6" y="750.0"></text>
</g>
<g>
<title>TypeOopPtr::klass() const (1 samples, 0.08%)</title><rect x="1165.6" y="723.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.6" y="734.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (4 samples, 0.33%)</title><rect x="1166.5" y="819.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.5" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1170.4" y="819.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.4" y="830.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1170.4" y="803.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.4" y="814.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.08%)</title><rect x="1170.4" y="787.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.4" y="798.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.08%)</title><rect x="1170.4" y="771.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.4" y="782.0"></text>
</g>
<g>
<title>TypeOopPtr::klass() const (1 samples, 0.08%)</title><rect x="1170.4" y="755.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1173.4" y="766.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (3 samples, 0.25%)</title><rect x="1171.4" y="819.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.4" y="830.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (3 samples, 0.25%)</title><rect x="1171.4" y="803.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.4" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.25%)</title><rect x="1171.4" y="787.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.4" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.25%)</title><rect x="1171.4" y="771.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.4" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.25%)</title><rect x="1171.4" y="755.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.4" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.25%)</title><rect x="1171.4" y="739.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.4" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.25%)</title><rect x="1171.4" y="723.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.4" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.25%)</title><rect x="1171.4" y="707.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.4" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1171.4" y="691.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.4" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1171.4" y="675.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.4" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1171.4" y="659.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.4" y="670.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1171.4" y="643.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.4" y="654.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1171.4" y="627.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.4" y="638.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1172.4" y="659.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.4" y="670.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1172.4" y="643.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.4" y="654.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1173.4" y="691.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.4" y="702.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1173.4" y="675.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.4" y="686.0"></text>
</g>
<g>
<title>StoreLNode::Opcode() const (1 samples, 0.08%)</title><rect x="1174.4" y="851.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.4" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.83%)</title><rect x="1175.3" y="867.0" width="9.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.3" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.83%)</title><rect x="1175.3" y="851.0" width="9.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.83%)</title><rect x="1175.3" y="835.0" width="9.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.83%)</title><rect x="1175.3" y="819.0" width="9.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.08%)</title><rect x="1175.3" y="803.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.3" y="814.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.08%)</title><rect x="1175.3" y="787.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.3" y="798.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.08%)</title><rect x="1175.3" y="771.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 0.75%)</title><rect x="1176.3" y="803.0" width="8.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.3" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (9 samples, 0.75%)</title><rect x="1176.3" y="787.0" width="8.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.3" y="798.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1176.3" y="771.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.3" y="782.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1176.3" y="755.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.3" y="766.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1176.3" y="739.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.3" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1176.3" y="723.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.3" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1176.3" y="707.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.3" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1176.3" y="691.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.3" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1176.3" y="675.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.3" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::successors(ciBytecodeStream*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1176.3" y="659.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.3" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::get_block_for(int, ciTypeFlow::JsrSet*, ciTypeFlow::CreateOption) (1 samples, 0.08%)</title><rect x="1176.3" y="643.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.3" y="654.0"></text>
</g>
<g>
<title>ciType::make(BasicType) (1 samples, 0.08%)</title><rect x="1176.3" y="627.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.3" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.58%)</title><rect x="1177.3" y="771.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.3" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.58%)</title><rect x="1177.3" y="755.0" width="6.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.58%)</title><rect x="1177.3" y="739.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.58%)</title><rect x="1177.3" y="723.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.58%)</title><rect x="1177.3" y="707.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.50%)</title><rect x="1178.3" y="691.0" width="5.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.3" y="702.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1178.3" y="675.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.3" y="686.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1178.3" y="659.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.3" y="670.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1178.3" y="643.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.3" y="654.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.08%)</title><rect x="1178.3" y="627.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.3" y="638.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle, Thread*) (1 samples, 0.08%)</title><rect x="1178.3" y="611.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.3" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.33%)</title><rect x="1179.2" y="675.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.2" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.33%)</title><rect x="1179.2" y="659.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.25%)</title><rect x="1179.2" y="643.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.25%)</title><rect x="1179.2" y="627.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.25%)</title><rect x="1179.2" y="611.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.25%)</title><rect x="1179.2" y="595.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.2" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.25%)</title><rect x="1179.2" y="579.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.2" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.25%)</title><rect x="1179.2" y="563.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.25%)</title><rect x="1179.2" y="547.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.25%)</title><rect x="1179.2" y="531.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.25%)</title><rect x="1179.2" y="515.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1179.2" y="499.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.2" y="510.0"></text>
</g>
<g>
<title>Compile::optimize_inlining(ciMethod*, int, ciInstanceKlass*, ciMethod*, TypeOopPtr const*, bool) (1 samples, 0.08%)</title><rect x="1179.2" y="483.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.2" y="494.0"></text>
</g>
<g>
<title>methodHandle::methodHandle(Method*) (1 samples, 0.08%)</title><rect x="1179.2" y="467.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.2" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.2" y="483.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.2" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1180.2" y="467.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1180.2" y="451.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1180.2" y="435.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1180.2" y="419.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1180.2" y="403.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.2" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.2" y="387.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.2" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1180.2" y="371.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1180.2" y="355.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.2" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1180.2" y="339.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.2" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1180.2" y="323.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1180.2" y="307.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.2" y="318.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1180.2" y="291.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.2" y="302.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1180.2" y="275.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.2" y="286.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1180.2" y="259.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.2" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1180.2" y="243.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.2" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1180.2" y="227.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.2" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1180.2" y="211.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.2" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1180.2" y="195.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.2" y="206.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1180.2" y="179.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.2" y="190.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1180.2" y="163.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.2" y="174.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.08%)</title><rect x="1180.2" y="147.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.2" y="158.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1180.2" y="131.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.2" y="142.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1180.2" y="115.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.2" y="126.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1180.2" y="99.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.2" y="110.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1180.2" y="83.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.2" y="94.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1180.2" y="67.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.2" y="78.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.08%)</title><rect x="1180.2" y="51.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.2" y="62.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.08%)</title><rect x="1180.2" y="35.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.2" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1181.2" y="499.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1181.2" y="483.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.2" y="494.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.08%)</title><rect x="1181.2" y="467.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.2" y="478.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.08%)</title><rect x="1181.2" y="451.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.2" y="462.0"></text>
</g>
<g>
<title>IdealKit::load(Node*, Node*, Type const*, BasicType, int, bool) (1 samples, 0.08%)</title><rect x="1181.2" y="435.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.2" y="446.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.08%)</title><rect x="1181.2" y="419.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.2" y="430.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1181.2" y="403.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.2" y="414.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1181.2" y="387.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.2" y="398.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1181.2" y="371.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.2" y="382.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1181.2" y="355.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.2" y="366.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1181.2" y="339.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.2" y="350.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.08%)</title><rect x="1182.2" y="643.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.2" y="654.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1182.2" y="627.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.2" y="638.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.08%)</title><rect x="1182.2" y="611.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.2" y="622.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.2" y="675.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.2" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.2" y="659.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.2" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1183.2" y="643.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1183.2" y="627.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1183.2" y="611.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1183.2" y="595.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1183.2" y="579.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.2" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.2" y="563.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.2" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1183.2" y="547.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1183.2" y="531.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1183.2" y="515.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1183.2" y="499.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1183.2" y="483.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.2" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.2" y="467.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.2" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1183.2" y="451.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1183.2" y="435.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1183.2" y="419.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1183.2" y="403.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1183.2" y="387.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.2" y="398.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1183.2" y="371.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.2" y="382.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1183.2" y="355.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.2" y="366.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1183.2" y="339.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.2" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1183.2" y="323.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.2" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1183.2" y="307.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.2" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1183.2" y="291.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.2" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1183.2" y="275.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.2" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::successors(ciBytecodeStream*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1183.2" y="259.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.2" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::get_block_for(int, ciTypeFlow::JsrSet*, ciTypeFlow::CreateOption) (1 samples, 0.08%)</title><rect x="1183.2" y="243.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.2" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::Block(ciTypeFlow*, ciBlock*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1183.2" y="227.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.2" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::JsrSet::JsrSet(Arena*, int) (1 samples, 0.08%)</title><rect x="1183.2" y="211.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.2" y="222.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.1" y="771.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.1" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.1" y="755.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.1" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1184.1" y="739.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.1" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1184.1" y="723.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1184.1" y="707.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1184.1" y="691.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1184.1" y="675.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.1" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.1" y="659.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.1" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1184.1" y="643.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1184.1" y="627.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1184.1" y="611.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1184.1" y="595.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1184.1" y="579.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.1" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.1" y="563.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.1" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1184.1" y="547.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.1" y="558.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.08%)</title><rect x="1184.1" y="531.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.1" y="542.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.08%)</title><rect x="1185.1" y="899.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.1" y="910.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.08%)</title><rect x="1185.1" y="883.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.1" y="894.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.08%)</title><rect x="1185.1" y="867.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.1" y="878.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.08%)</title><rect x="1185.1" y="851.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.1" y="862.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.08%)</title><rect x="1185.1" y="835.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.1" y="846.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.08%)</title><rect x="1185.1" y="819.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.1" y="830.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.08%)</title><rect x="1185.1" y="803.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.1" y="814.0"></text>
</g>
<g>
<title>LinearScan::add_register_hints(LIR_Op*) (1 samples, 0.08%)</title><rect x="1185.1" y="787.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.1" y="798.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.25%)</title><rect x="1186.1" y="963.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.1" y="974.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.25%)</title><rect x="1186.1" y="947.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.1" y="958.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (2 samples, 0.17%)</title><rect x="1186.1" y="931.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.1" y="942.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.08%)</title><rect x="1187.1" y="915.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.1" y="926.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.08%)</title><rect x="1187.1" y="899.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.1" y="910.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="1187.1" y="883.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.1" y="894.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="1187.1" y="867.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.1" y="878.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="1187.1" y="851.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.1" y="862.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.08%)</title><rect x="1187.1" y="835.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.1" y="846.0"></text>
</g>
<g>
<title>CompressedReadStream::read_int_mb(int) (1 samples, 0.08%)</title><rect x="1187.1" y="819.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.1" y="830.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.08%)</title><rect x="1188.0" y="931.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1191.0" y="942.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.08%)</title><rect x="1188.0" y="915.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.0" y="926.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.08%)</title><rect x="1188.0" y="899.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.0" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.08%)</title><rect x="1188.0" y="883.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.0" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.08%)</title><rect x="1188.0" y="867.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.0" y="878.0"></text>
</g>
<g>
<title>G1BlockOffsetArray::resize(unsigned long) (1 samples, 0.08%)</title><rect x="1188.0" y="851.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.0" y="862.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.08%)</title><rect x="1189.0" y="963.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1192.0" y="974.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (1 samples, 0.08%)</title><rect x="1189.0" y="947.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.0" y="958.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.08%)</title><rect x="1189.0" y="931.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.0" y="942.0"></text>
</g>
</g>
</svg>
