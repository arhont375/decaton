<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1414" onload="init(evt)" viewBox="0 0 1200 1414" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1397"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1397"> </text>
<g id="frames">
<g>
<title>all (314 samples, 100.00%)</title><rect x="10.0" y="1363.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1374.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (26 samples, 8.28%)</title><rect x="10.0" y="1347.0" width="97.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1358.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (3 samples, 0.96%)</title><rect x="10.0" y="1331.0" width="11.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (3 samples, 0.96%)</title><rect x="10.0" y="1315.0" width="11.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (3 samples, 0.96%)</title><rect x="10.0" y="1299.0" width="11.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (3 samples, 0.96%)</title><rect x="10.0" y="1283.0" width="11.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (3 samples, 0.96%)</title><rect x="10.0" y="1267.0" width="11.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 0.96%)</title><rect x="10.0" y="1251.0" width="11.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.96%)</title><rect x="10.0" y="1235.0" width="11.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.96%)</title><rect x="10.0" y="1219.0" width="11.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.64%)</title><rect x="13.8" y="1203.0" width="7.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (2 samples, 0.64%)</title><rect x="13.8" y="1187.0" width="7.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.8" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (2 samples, 0.64%)</title><rect x="13.8" y="1171.0" width="7.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (2 samples, 0.64%)</title><rect x="13.8" y="1155.0" width="7.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.8" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (2 samples, 0.64%)</title><rect x="13.8" y="1139.0" width="7.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.8" y="1150.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (2 samples, 0.64%)</title><rect x="13.8" y="1123.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.8" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (2 samples, 0.64%)</title><rect x="13.8" y="1107.0" width="7.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.8" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.32%)</title><rect x="13.8" y="1091.0" width="3.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.8" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.ensureWriteOpen (1 samples, 0.32%)</title><rect x="17.5" y="1091.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.5" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (23 samples, 7.32%)</title><rect x="21.3" y="1331.0" width="86.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="24.3" y="1342.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.32%)</title><rect x="21.3" y="1315.0" width="3.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="24.3" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (1 samples, 0.32%)</title><rect x="21.3" y="1299.0" width="3.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="24.3" y="1310.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.characteristics (1 samples, 0.32%)</title><rect x="21.3" y="1283.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.3" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (3 samples, 0.96%)</title><rect x="25.0" y="1315.0" width="11.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="28.0" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (3 samples, 0.96%)</title><rect x="25.0" y="1299.0" width="11.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="28.0" y="1310.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (3 samples, 0.96%)</title><rect x="25.0" y="1283.0" width="11.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="28.0" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$269/1517074717.accept (3 samples, 0.96%)</title><rect x="25.0" y="1267.0" width="11.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="28.0" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (3 samples, 0.96%)</title><rect x="25.0" y="1251.0" width="11.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="28.0" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (3 samples, 0.96%)</title><rect x="25.0" y="1235.0" width="11.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="28.0" y="1246.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (3 samples, 0.96%)</title><rect x="25.0" y="1219.0" width="11.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="28.0" y="1230.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (6 samples, 1.91%)</title><rect x="36.3" y="1315.0" width="22.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="39.3" y="1326.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$268/1066121591.accept (6 samples, 1.91%)</title><rect x="36.3" y="1299.0" width="22.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="39.3" y="1310.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (6 samples, 1.91%)</title><rect x="36.3" y="1283.0" width="22.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="39.3" y="1294.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (2 samples, 0.64%)</title><rect x="36.3" y="1267.0" width="7.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="39.3" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (2 samples, 0.64%)</title><rect x="36.3" y="1251.0" width="7.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="39.3" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (2 samples, 0.64%)</title><rect x="36.3" y="1235.0" width="7.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="39.3" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (2 samples, 0.64%)</title><rect x="36.3" y="1219.0" width="7.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="39.3" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.64%)</title><rect x="36.3" y="1203.0" width="7.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="39.3" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.32%)</title><rect x="40.1" y="1187.0" width="3.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="43.1" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.32%)</title><rect x="40.1" y="1171.0" width="3.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="43.1" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.32%)</title><rect x="40.1" y="1155.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="43.1" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.32%)</title><rect x="40.1" y="1139.0" width="3.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="43.1" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (2 samples, 0.64%)</title><rect x="43.8" y="1267.0" width="7.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="46.8" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 0.64%)</title><rect x="43.8" y="1251.0" width="7.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="46.8" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.64%)</title><rect x="51.3" y="1267.0" width="7.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="54.3" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.64%)</title><rect x="51.3" y="1251.0" width="7.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="54.3" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.64%)</title><rect x="51.3" y="1235.0" width="7.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="54.3" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.64%)</title><rect x="51.3" y="1219.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="54.3" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.64%)</title><rect x="51.3" y="1203.0" width="7.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="54.3" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (13 samples, 4.14%)</title><rect x="58.9" y="1315.0" width="48.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="61.9" y="1326.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (13 samples, 4.14%)</title><rect x="58.9" y="1299.0" width="48.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="61.9" y="1310.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (9 samples, 2.87%)</title><rect x="58.9" y="1283.0" width="33.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="61.9" y="1294.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 0.96%)</title><rect x="58.9" y="1267.0" width="11.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="61.9" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 0.96%)</title><rect x="58.9" y="1251.0" width="11.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="61.9" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.64%)</title><rect x="58.9" y="1235.0" width="7.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="61.9" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.64%)</title><rect x="58.9" y="1219.0" width="7.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="61.9" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.32%)</title><rect x="58.9" y="1203.0" width="3.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="61.9" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.32%)</title><rect x="58.9" y="1187.0" width="3.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="61.9" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.32%)</title><rect x="58.9" y="1171.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="61.9" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.32%)</title><rect x="58.9" y="1155.0" width="3.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="61.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.32%)</title><rect x="58.9" y="1139.0" width="3.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="61.9" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.32%)</title><rect x="58.9" y="1123.0" width="3.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="61.9" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.32%)</title><rect x="58.9" y="1107.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="61.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.32%)</title><rect x="62.6" y="1203.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="65.6" y="1214.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.32%)</title><rect x="62.6" y="1187.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="65.6" y="1198.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.32%)</title><rect x="62.6" y="1171.0" width="3.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="65.6" y="1182.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.32%)</title><rect x="62.6" y="1155.0" width="3.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="65.6" y="1166.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.updateSelectedKeys (1 samples, 0.32%)</title><rect x="62.6" y="1139.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="65.6" y="1150.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.32%)</title><rect x="62.6" y="1123.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="65.6" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.32%)</title><rect x="62.6" y="1107.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="65.6" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.32%)</title><rect x="62.6" y="1091.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="65.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.checkDisconnects (1 samples, 0.32%)</title><rect x="66.4" y="1235.0" width="3.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="69.4" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$KeySetView.iterator (1 samples, 0.32%)</title><rect x="66.4" y="1219.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="69.4" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (5 samples, 1.59%)</title><rect x="70.1" y="1267.0" width="18.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="73.1" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (5 samples, 1.59%)</title><rect x="70.1" y="1251.0" width="18.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="73.1" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (5 samples, 1.59%)</title><rect x="70.1" y="1235.0" width="18.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="73.1" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (5 samples, 1.59%)</title><rect x="70.1" y="1219.0" width="18.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="73.1" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.32%)</title><rect x="70.1" y="1203.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="73.1" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.32%)</title><rect x="70.1" y="1187.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="73.1" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.32%)</title><rect x="70.1" y="1171.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="73.1" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (4 samples, 1.27%)</title><rect x="73.9" y="1203.0" width="15.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="76.9" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (4 samples, 1.27%)</title><rect x="73.9" y="1187.0" width="15.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="76.9" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (4 samples, 1.27%)</title><rect x="73.9" y="1171.0" width="15.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="76.9" y="1182.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (4 samples, 1.27%)</title><rect x="73.9" y="1155.0" width="15.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="76.9" y="1166.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (2 samples, 0.64%)</title><rect x="81.4" y="1139.0" width="7.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="84.4" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (2 samples, 0.64%)</title><rect x="81.4" y="1123.0" width="7.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="84.4" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (2 samples, 0.64%)</title><rect x="81.4" y="1107.0" width="7.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="84.4" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (2 samples, 0.64%)</title><rect x="81.4" y="1091.0" width="7.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="84.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.32%)</title><rect x="88.9" y="1267.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="91.9" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.32%)</title><rect x="88.9" y="1251.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="91.9" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.32%)</title><rect x="88.9" y="1235.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="91.9" y="1246.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.32%)</title><rect x="88.9" y="1219.0" width="3.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="91.9" y="1230.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.32%)</title><rect x="88.9" y="1203.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="91.9" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.32%)</title><rect x="92.7" y="1283.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="95.7" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.32%)</title><rect x="92.7" y="1267.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="95.7" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.32%)</title><rect x="92.7" y="1251.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="95.7" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.32%)</title><rect x="92.7" y="1235.0" width="3.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="95.7" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.32%)</title><rect x="92.7" y="1219.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="95.7" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.32%)</title><rect x="92.7" y="1203.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="95.7" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.32%)</title><rect x="92.7" y="1187.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="95.7" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.32%)</title><rect x="92.7" y="1171.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="95.7" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.forEachRemaining (1 samples, 0.32%)</title><rect x="92.7" y="1155.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="95.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.32%)</title><rect x="96.4" y="1283.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="99.4" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.32%)</title><rect x="96.4" y="1267.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="99.4" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.32%)</title><rect x="96.4" y="1251.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="99.4" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.32%)</title><rect x="96.4" y="1235.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="99.4" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest$Builder.build (1 samples, 0.32%)</title><rect x="96.4" y="1219.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="99.4" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest$Builder.build (1 samples, 0.32%)</title><rect x="96.4" y="1203.0" width="3.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="99.4" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.&lt;init&gt; (1 samples, 0.32%)</title><rect x="96.4" y="1187.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="99.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.&lt;init&gt; (1 samples, 0.32%)</title><rect x="96.4" y="1171.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="99.4" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.&lt;init&gt; (1 samples, 0.32%)</title><rect x="96.4" y="1155.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="99.4" y="1166.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.32%)</title><rect x="96.4" y="1139.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="99.4" y="1150.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.32%)</title><rect x="96.4" y="1123.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="99.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.64%)</title><rect x="100.2" y="1283.0" width="7.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="103.2" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 0.64%)</title><rect x="100.2" y="1267.0" width="7.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="103.2" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.32%)</title><rect x="100.2" y="1251.0" width="3.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="103.2" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap$Node.getKey (1 samples, 0.32%)</title><rect x="100.2" y="1235.0" width="3.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="103.2" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.32%)</title><rect x="103.9" y="1251.0" width="3.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="106.9" y="1262.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.32%)</title><rect x="103.9" y="1235.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="106.9" y="1246.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.32%)</title><rect x="103.9" y="1219.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="106.9" y="1230.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.32%)</title><rect x="103.9" y="1203.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="106.9" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.32%)</title><rect x="103.9" y="1187.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="106.9" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.32%)</title><rect x="103.9" y="1171.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="106.9" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.32%)</title><rect x="103.9" y="1155.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="106.9" y="1166.0"></text>
</g>
<g>
<title>java/lang/Thread.run (226 samples, 71.97%)</title><rect x="107.7" y="1347.0" width="849.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="110.7" y="1358.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (226 samples, 71.97%)</title><rect x="107.7" y="1331.0" width="849.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="110.7" y="1342.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (226 samples, 71.97%)</title><rect x="107.7" y="1315.0" width="849.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="110.7" y="1326.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$288/1072393613.run (218 samples, 69.43%)</title><rect x="119.0" y="1299.0" width="819.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="122.0" y="1310.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$288/1072393613.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62 (218 samples, 69.43%)</title><rect x="119.0" y="1283.0" width="819.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="122.0" y="1294.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (218 samples, 69.43%)</title><rect x="119.0" y="1267.0" width="819.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="122.0" y="1278.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (218 samples, 69.43%)</title><rect x="119.0" y="1251.0" width="819.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="122.0" y="1262.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$45/1556995360.extract (1 samples, 0.32%)</title><rect x="145.3" y="1235.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="148.3" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (8 samples, 2.55%)</title><rect x="149.0" y="1235.0" width="30.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="152.0" y="1246.0">co..</text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (8 samples, 2.55%)</title><rect x="149.0" y="1219.0" width="30.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="152.0" y="1230.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.get (8 samples, 2.55%)</title><rect x="149.0" y="1203.0" width="30.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="152.0" y="1214.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.64%)</title><rect x="149.0" y="1187.0" width="7.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="152.0" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (6 samples, 1.91%)</title><rect x="156.6" y="1187.0" width="22.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="159.6" y="1198.0">j..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.32%)</title><rect x="175.4" y="1171.0" width="3.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="178.4" y="1182.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.32%)</title><rect x="175.4" y="1155.0" width="3.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="178.4" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (16 samples, 5.10%)</title><rect x="179.1" y="1235.0" width="60.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="182.1" y="1246.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (1 samples, 0.32%)</title><rect x="201.7" y="1219.0" width="3.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="204.7" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (9 samples, 2.87%)</title><rect x="205.4" y="1219.0" width="33.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="208.4" y="1230.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (9 samples, 2.87%)</title><rect x="205.4" y="1203.0" width="33.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="208.4" y="1214.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (9 samples, 2.87%)</title><rect x="205.4" y="1187.0" width="33.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="208.4" y="1198.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.32%)</title><rect x="205.4" y="1171.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="208.4" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.32%)</title><rect x="205.4" y="1155.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="208.4" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.32%)</title><rect x="205.4" y="1139.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="208.4" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$296/1761230361.accept (1 samples, 0.32%)</title><rect x="205.4" y="1123.0" width="3.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="208.4" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 2.55%)</title><rect x="209.2" y="1171.0" width="30.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="212.2" y="1182.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$296/1761230361.accept (8 samples, 2.55%)</title><rect x="209.2" y="1155.0" width="30.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="212.2" y="1166.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (8 samples, 2.55%)</title><rect x="209.2" y="1139.0" width="30.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="212.2" y="1150.0">co..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (8 samples, 2.55%)</title><rect x="209.2" y="1123.0" width="30.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="212.2" y="1134.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (8 samples, 2.55%)</title><rect x="209.2" y="1107.0" width="30.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="212.2" y="1118.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (8 samples, 2.55%)</title><rect x="209.2" y="1091.0" width="30.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="212.2" y="1102.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (3 samples, 0.96%)</title><rect x="209.2" y="1075.0" width="11.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="212.2" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (3 samples, 0.96%)</title><rect x="209.2" y="1059.0" width="11.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="212.2" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$286/1621679832.accept (1 samples, 0.32%)</title><rect x="212.9" y="1043.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="215.9" y="1054.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.32%)</title><rect x="216.7" y="1043.0" width="3.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="219.7" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 1.59%)</title><rect x="220.4" y="1075.0" width="18.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="223.4" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (27 samples, 8.60%)</title><rect x="239.2" y="1235.0" width="101.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="242.2" y="1246.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$45/1556995360.extract (27 samples, 8.60%)</title><rect x="239.2" y="1219.0" width="101.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="242.2" y="1230.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (27 samples, 8.60%)</title><rect x="239.2" y="1203.0" width="101.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="242.2" y="1214.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (27 samples, 8.60%)</title><rect x="239.2" y="1187.0" width="101.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="242.2" y="1198.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (27 samples, 8.60%)</title><rect x="239.2" y="1171.0" width="101.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="242.2" y="1182.0">com/linecorp..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (27 samples, 8.60%)</title><rect x="239.2" y="1155.0" width="101.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="242.2" y="1166.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (5 samples, 1.59%)</title><rect x="239.2" y="1139.0" width="18.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="242.2" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (2 samples, 0.64%)</title><rect x="243.0" y="1123.0" width="7.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="246.0" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (2 samples, 0.64%)</title><rect x="243.0" y="1107.0" width="7.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="246.0" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.64%)</title><rect x="243.0" y="1091.0" width="7.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="246.0" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.64%)</title><rect x="243.0" y="1075.0" width="7.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="246.0" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.32%)</title><rect x="243.0" y="1059.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="246.0" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.32%)</title><rect x="246.8" y="1059.0" width="3.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="249.8" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (2 samples, 0.64%)</title><rect x="250.5" y="1123.0" width="7.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="253.5" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.32%)</title><rect x="254.3" y="1107.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="257.3" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.32%)</title><rect x="254.3" y="1091.0" width="3.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="257.3" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.32%)</title><rect x="254.3" y="1075.0" width="3.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="257.3" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (18 samples, 5.73%)</title><rect x="258.0" y="1139.0" width="67.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="261.0" y="1150.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.64%)</title><rect x="258.0" y="1123.0" width="7.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="261.0" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.64%)</title><rect x="258.0" y="1107.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="261.0" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (3 samples, 0.96%)</title><rect x="265.5" y="1123.0" width="11.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="268.5" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.getReadCapabilities (1 samples, 0.32%)</title><rect x="273.1" y="1107.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="276.1" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (4 samples, 1.27%)</title><rect x="276.8" y="1123.0" width="15.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="279.8" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (4 samples, 1.27%)</title><rect x="276.8" y="1107.0" width="15.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="279.8" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (4 samples, 1.27%)</title><rect x="276.8" y="1091.0" width="15.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="279.8" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (4 samples, 1.27%)</title><rect x="276.8" y="1075.0" width="15.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="279.8" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (4 samples, 1.27%)</title><rect x="276.8" y="1059.0" width="15.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="279.8" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (9 samples, 2.87%)</title><rect x="291.8" y="1123.0" width="33.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="294.8" y="1134.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (9 samples, 2.87%)</title><rect x="291.8" y="1107.0" width="33.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="294.8" y="1118.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.96%)</title><rect x="291.8" y="1091.0" width="11.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="294.8" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.32%)</title><rect x="299.4" y="1075.0" width="3.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="302.4" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (6 samples, 1.91%)</title><rect x="303.1" y="1091.0" width="22.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="306.1" y="1102.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (6 samples, 1.91%)</title><rect x="303.1" y="1075.0" width="22.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="306.1" y="1086.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (6 samples, 1.91%)</title><rect x="303.1" y="1059.0" width="22.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="306.1" y="1070.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.64%)</title><rect x="306.9" y="1043.0" width="7.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="309.9" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.64%)</title><rect x="306.9" y="1027.0" width="7.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="309.9" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.64%)</title><rect x="306.9" y="1011.0" width="7.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="309.9" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.64%)</title><rect x="306.9" y="995.0" width="7.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="309.9" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.64%)</title><rect x="306.9" y="979.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="309.9" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 0.64%)</title><rect x="314.4" y="1043.0" width="7.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="317.4" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 0.64%)</title><rect x="314.4" y="1027.0" width="7.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="317.4" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 0.64%)</title><rect x="314.4" y="1011.0" width="7.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="317.4" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (2 samples, 0.64%)</title><rect x="314.4" y="995.0" width="7.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="317.4" y="1006.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 0.64%)</title><rect x="314.4" y="979.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="317.4" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.32%)</title><rect x="321.9" y="1043.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="324.9" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.32%)</title><rect x="321.9" y="1027.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="324.9" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.32%)</title><rect x="321.9" y="1011.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="324.9" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (4 samples, 1.27%)</title><rect x="325.7" y="1139.0" width="15.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="328.7" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (4 samples, 1.27%)</title><rect x="325.7" y="1123.0" width="15.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="328.7" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (4 samples, 1.27%)</title><rect x="325.7" y="1107.0" width="15.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="328.7" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (4 samples, 1.27%)</title><rect x="325.7" y="1091.0" width="15.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="328.7" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 1.27%)</title><rect x="325.7" y="1075.0" width="15.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="328.7" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.32%)</title><rect x="336.9" y="1059.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="339.9" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (159 samples, 50.64%)</title><rect x="340.7" y="1235.0" width="597.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="343.7" y="1246.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (33 samples, 10.51%)</title><rect x="367.0" y="1219.0" width="124.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="370.0" y="1230.0">com/linecorp/de..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (28 samples, 8.92%)</title><rect x="385.8" y="1203.0" width="105.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="388.8" y="1214.0">org/slf4j/MDC..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (25 samples, 7.96%)</title><rect x="397.1" y="1187.0" width="93.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="400.1" y="1198.0">ch/qos/logb..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.64%)</title><rect x="404.6" y="1171.0" width="7.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="407.6" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.32%)</title><rect x="408.3" y="1155.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="411.3" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.32%)</title><rect x="408.3" y="1139.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="411.3" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.32%)</title><rect x="408.3" y="1123.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="411.3" y="1134.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.wasLastOpReadOrNull (1 samples, 0.32%)</title><rect x="412.1" y="1171.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="415.1" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (8 samples, 2.55%)</title><rect x="415.9" y="1171.0" width="30.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="418.9" y="1182.0">ja..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (5 samples, 1.59%)</title><rect x="427.1" y="1155.0" width="18.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="430.1" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 1.59%)</title><rect x="427.1" y="1139.0" width="18.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="430.1" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (12 samples, 3.82%)</title><rect x="445.9" y="1171.0" width="45.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="448.9" y="1182.0">java..</text>
</g>
<g>
<title>java/util/HashMap.remove (10 samples, 3.18%)</title><rect x="453.4" y="1155.0" width="37.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="456.4" y="1166.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (10 samples, 3.18%)</title><rect x="453.4" y="1139.0" width="37.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="456.4" y="1150.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (4 samples, 1.27%)</title><rect x="491.0" y="1219.0" width="15.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="494.0" y="1230.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 1.27%)</title><rect x="491.0" y="1203.0" width="15.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="494.0" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (27 samples, 8.60%)</title><rect x="506.1" y="1219.0" width="101.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="509.1" y="1230.0">com/linecorp..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.32%)</title><rect x="506.1" y="1203.0" width="3.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="509.1" y="1214.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.32%)</title><rect x="506.1" y="1187.0" width="3.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="509.1" y="1198.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.32%)</title><rect x="506.1" y="1171.0" width="3.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="509.1" y="1182.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.32%)</title><rect x="506.1" y="1155.0" width="3.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="509.1" y="1166.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.32%)</title><rect x="506.1" y="1139.0" width="3.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="509.1" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (25 samples, 7.96%)</title><rect x="509.8" y="1203.0" width="94.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="512.8" y="1214.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (14 samples, 4.46%)</title><rect x="513.6" y="1187.0" width="52.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="516.6" y="1198.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (8 samples, 2.55%)</title><rect x="528.6" y="1171.0" width="30.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="531.6" y="1182.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (8 samples, 2.55%)</title><rect x="528.6" y="1155.0" width="30.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="531.6" y="1166.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 1.27%)</title><rect x="532.4" y="1139.0" width="15.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="535.4" y="1150.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (4 samples, 1.27%)</title><rect x="532.4" y="1123.0" width="15.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="535.4" y="1134.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 1.27%)</title><rect x="532.4" y="1107.0" width="15.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="535.4" y="1118.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.96%)</title><rect x="532.4" y="1091.0" width="11.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="535.4" y="1102.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.64%)</title><rect x="532.4" y="1075.0" width="7.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="535.4" y="1086.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.32%)</title><rect x="532.4" y="1059.0" width="3.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="535.4" y="1070.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.32%)</title><rect x="536.1" y="1059.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="539.1" y="1070.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.32%)</title><rect x="536.1" y="1043.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="539.1" y="1054.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.32%)</title><rect x="536.1" y="1027.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="539.1" y="1038.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.32%)</title><rect x="539.9" y="1075.0" width="3.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="542.9" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.32%)</title><rect x="543.6" y="1091.0" width="3.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="546.6" y="1102.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.32%)</title><rect x="543.6" y="1075.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="546.6" y="1086.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.96%)</title><rect x="547.4" y="1139.0" width="11.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="550.4" y="1150.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.64%)</title><rect x="558.7" y="1171.0" width="7.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="561.7" y="1182.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (10 samples, 3.18%)</title><rect x="566.2" y="1187.0" width="37.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="569.2" y="1198.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (10 samples, 3.18%)</title><rect x="566.2" y="1171.0" width="37.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="569.2" y="1182.0">ch/..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.32%)</title><rect x="566.2" y="1155.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="569.2" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.32%)</title><rect x="566.2" y="1139.0" width="3.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="569.2" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.32%)</title><rect x="566.2" y="1123.0" width="3.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="569.2" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.32%)</title><rect x="566.2" y="1107.0" width="3.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="569.2" y="1118.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (9 samples, 2.87%)</title><rect x="569.9" y="1155.0" width="33.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="572.9" y="1166.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (8 samples, 2.55%)</title><rect x="573.7" y="1139.0" width="30.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="576.7" y="1150.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.putVal (6 samples, 1.91%)</title><rect x="581.2" y="1123.0" width="22.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="584.2" y="1134.0">j..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.32%)</title><rect x="581.2" y="1107.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="584.2" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (4 samples, 1.27%)</title><rect x="585.0" y="1107.0" width="15.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="588.0" y="1118.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.32%)</title><rect x="596.2" y="1091.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="599.2" y="1102.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.32%)</title><rect x="600.0" y="1107.0" width="3.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="603.0" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (1 samples, 0.32%)</title><rect x="603.8" y="1203.0" width="3.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="606.8" y="1214.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.32%)</title><rect x="603.8" y="1187.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="606.8" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.32%)</title><rect x="603.8" y="1171.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="606.8" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.32%)</title><rect x="603.8" y="1155.0" width="3.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="606.8" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (83 samples, 26.43%)</title><rect x="607.5" y="1219.0" width="311.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="610.5" y="1230.0">com/linecorp/decaton/processor/runtime/int..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (83 samples, 26.43%)</title><rect x="607.5" y="1203.0" width="311.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="610.5" y="1214.0">com/linecorp/decaton/processor/runtime/int..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$209/787971479.process (63 samples, 20.06%)</title><rect x="622.5" y="1187.0" width="236.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="625.5" y="1198.0">com/linecorp/decaton/benchmark/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (63 samples, 20.06%)</title><rect x="622.5" y="1171.0" width="236.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="625.5" y="1182.0">com/linecorp/decaton/benchmark/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (63 samples, 20.06%)</title><rect x="622.5" y="1155.0" width="236.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="625.5" y="1166.0">com/linecorp/decaton/benchmark/..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.32%)</title><rect x="626.3" y="1139.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="629.3" y="1150.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.32%)</title><rect x="626.3" y="1123.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="629.3" y="1134.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.32%)</title><rect x="626.3" y="1107.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="629.3" y="1118.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.32%)</title><rect x="626.3" y="1091.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="629.3" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.32%)</title><rect x="626.3" y="1075.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="629.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.32%)</title><rect x="626.3" y="1059.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="629.3" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (59 samples, 18.79%)</title><rect x="630.1" y="1139.0" width="221.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="633.1" y="1150.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>java/lang/Thread.sleep (58 samples, 18.47%)</title><rect x="630.1" y="1123.0" width="217.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="633.1" y="1134.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (50 samples, 15.92%)</title><rect x="656.4" y="1107.0" width="187.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="659.4" y="1118.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.32%)</title><rect x="667.6" y="1091.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="670.6" y="1102.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.32%)</title><rect x="671.4" y="1091.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="674.4" y="1102.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.64%)</title><rect x="675.2" y="1091.0" width="7.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="678.2" y="1102.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.64%)</title><rect x="675.2" y="1075.0" width="7.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="678.2" y="1086.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.32%)</title><rect x="682.7" y="1091.0" width="3.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="685.7" y="1102.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (42 samples, 13.38%)</title><rect x="686.4" y="1091.0" width="157.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="689.4" y="1102.0">os::sleep(Thread*, l..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 1.27%)</title><rect x="709.0" y="1075.0" width="15.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="712.0" y="1086.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (3 samples, 0.96%)</title><rect x="712.7" y="1059.0" width="11.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="715.7" y="1070.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.64%)</title><rect x="724.0" y="1075.0" width="7.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="727.0" y="1086.0"></text>
</g>
<g>
<title>__pthread_cond_init (1 samples, 0.32%)</title><rect x="731.5" y="1075.0" width="3.8" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="734.5" y="1086.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (17 samples, 5.41%)</title><rect x="735.3" y="1075.0" width="63.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="738.3" y="1086.0">__pthre..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.32%)</title><rect x="799.2" y="1075.0" width="3.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="802.2" y="1086.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.32%)</title><rect x="802.9" y="1075.0" width="3.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="805.9" y="1086.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (5 samples, 1.59%)</title><rect x="806.7" y="1075.0" width="18.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="809.7" y="1086.0"></text>
</g>
<g>
<title>pthread_mutex_lock (5 samples, 1.59%)</title><rect x="825.5" y="1075.0" width="18.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="828.5" y="1086.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.32%)</title><rect x="844.3" y="1107.0" width="3.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="847.3" y="1118.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.32%)</title><rect x="848.0" y="1123.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="851.0" y="1134.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.32%)</title><rect x="848.0" y="1107.0" width="3.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="851.0" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.32%)</title><rect x="851.8" y="1139.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="854.8" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.32%)</title><rect x="855.5" y="1139.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="858.5" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (2 samples, 0.64%)</title><rect x="859.3" y="1187.0" width="7.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="862.3" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (2 samples, 0.64%)</title><rect x="859.3" y="1171.0" width="7.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="862.3" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (5 samples, 1.59%)</title><rect x="866.8" y="1187.0" width="18.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="869.8" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (3 samples, 0.96%)</title><rect x="874.3" y="1171.0" width="11.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="877.3" y="1182.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.32%)</title><rect x="885.6" y="1187.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="888.6" y="1198.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.32%)</title><rect x="885.6" y="1171.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="888.6" y="1182.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.32%)</title><rect x="885.6" y="1155.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="888.6" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.32%)</title><rect x="889.4" y="1187.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="892.4" y="1198.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.32%)</title><rect x="889.4" y="1171.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="892.4" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 1.27%)</title><rect x="893.1" y="1187.0" width="15.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="896.1" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 1.27%)</title><rect x="893.1" y="1171.0" width="15.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="896.1" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 1.27%)</title><rect x="893.1" y="1155.0" width="15.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="896.1" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.96%)</title><rect x="893.1" y="1139.0" width="11.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="896.1" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (3 samples, 0.96%)</title><rect x="893.1" y="1123.0" width="11.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="896.1" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (3 samples, 0.96%)</title><rect x="893.1" y="1107.0" width="11.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="896.1" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$294/333687793.accept (1 samples, 0.32%)</title><rect x="900.6" y="1091.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="903.6" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.32%)</title><rect x="904.4" y="1139.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="907.4" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReference.get (3 samples, 0.96%)</title><rect x="908.2" y="1187.0" width="11.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="911.2" y="1198.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1849748053.linkToTargetMethod (1 samples, 0.32%)</title><rect x="919.4" y="1219.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="922.4" y="1230.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/263025902.invokeStatic_L3_L (1 samples, 0.32%)</title><rect x="919.4" y="1203.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="922.4" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$295/1766847513.get$Lambda (1 samples, 0.32%)</title><rect x="919.4" y="1187.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="922.4" y="1198.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.32%)</title><rect x="919.4" y="1171.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="922.4" y="1182.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.32%)</title><rect x="919.4" y="1155.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="922.4" y="1166.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.32%)</title><rect x="919.4" y="1139.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="922.4" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.32%)</title><rect x="919.4" y="1123.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="922.4" y="1134.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.32%)</title><rect x="919.4" y="1107.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="922.4" y="1118.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.32%)</title><rect x="919.4" y="1091.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="922.4" y="1102.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.32%)</title><rect x="919.4" y="1075.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="922.4" y="1086.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.32%)</title><rect x="919.4" y="1059.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="922.4" y="1070.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.32%)</title><rect x="919.4" y="1043.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="922.4" y="1054.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.32%)</title><rect x="919.4" y="1027.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="922.4" y="1038.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_bytes_to_copy(HeapRegion*) (1 samples, 0.32%)</title><rect x="919.4" y="1011.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="922.4" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 1.27%)</title><rect x="923.2" y="1219.0" width="15.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="926.2" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 1.27%)</title><rect x="923.2" y="1203.0" width="15.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="926.2" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 1.27%)</title><rect x="923.2" y="1187.0" width="15.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="926.2" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.64%)</title><rect x="923.2" y="1171.0" width="7.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="926.2" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.64%)</title><rect x="923.2" y="1155.0" width="7.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="926.2" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 0.64%)</title><rect x="923.2" y="1139.0" width="7.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="926.2" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$295/1766847513.accept (1 samples, 0.32%)</title><rect x="926.9" y="1123.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="929.9" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.64%)</title><rect x="930.7" y="1171.0" width="7.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="933.7" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$295/1766847513.accept (2 samples, 0.64%)</title><rect x="930.7" y="1155.0" width="7.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="933.7" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$57 (2 samples, 0.64%)</title><rect x="930.7" y="1139.0" width="7.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="933.7" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (2 samples, 0.64%)</title><rect x="930.7" y="1123.0" width="7.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="933.7" y="1134.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.64%)</title><rect x="930.7" y="1107.0" width="7.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="933.7" y="1118.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.64%)</title><rect x="930.7" y="1091.0" width="7.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="933.7" y="1102.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.32%)</title><rect x="934.5" y="1075.0" width="3.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="937.5" y="1086.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.32%)</title><rect x="934.5" y="1059.0" width="3.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="937.5" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (5 samples, 1.59%)</title><rect x="938.2" y="1299.0" width="18.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="941.2" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (5 samples, 1.59%)</title><rect x="938.2" y="1283.0" width="18.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="941.2" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 1.59%)</title><rect x="938.2" y="1267.0" width="18.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="941.2" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 1.59%)</title><rect x="938.2" y="1251.0" width="18.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="941.2" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 1.59%)</title><rect x="938.2" y="1235.0" width="18.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="941.2" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.32%)</title><rect x="957.0" y="1347.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="960.0" y="1358.0"></text>
</g>
<g>
<title>start_thread (61 samples, 19.43%)</title><rect x="960.8" y="1347.0" width="229.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="963.8" y="1358.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (61 samples, 19.43%)</title><rect x="960.8" y="1331.0" width="229.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="963.8" y="1342.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (14 samples, 4.46%)</title><rect x="960.8" y="1315.0" width="52.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="963.8" y="1326.0">GangW..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (14 samples, 4.46%)</title><rect x="960.8" y="1299.0" width="52.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="963.8" y="1310.0">G1Par..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (12 samples, 3.82%)</title><rect x="960.8" y="1283.0" width="45.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="963.8" y="1294.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (11 samples, 3.50%)</title><rect x="960.8" y="1267.0" width="41.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="963.8" y="1278.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (5 samples, 1.59%)</title><rect x="979.6" y="1251.0" width="18.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="982.6" y="1262.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (3 samples, 0.96%)</title><rect x="983.3" y="1235.0" width="11.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="986.3" y="1246.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.32%)</title><rect x="990.8" y="1219.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="993.8" y="1230.0"></text>
</g>
<g>
<title>InstanceKlass::vtable_length() const (1 samples, 0.32%)</title><rect x="994.6" y="1235.0" width="3.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="997.6" y="1246.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.32%)</title><rect x="998.3" y="1251.0" width="3.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1001.3" y="1262.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.32%)</title><rect x="1002.1" y="1267.0" width="3.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1005.1" y="1278.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.32%)</title><rect x="1005.9" y="1283.0" width="3.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1008.9" y="1294.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.32%)</title><rect x="1005.9" y="1267.0" width="3.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1008.9" y="1278.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.32%)</title><rect x="1005.9" y="1251.0" width="3.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1008.9" y="1262.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.32%)</title><rect x="1009.6" y="1283.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1012.6" y="1294.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.32%)</title><rect x="1009.6" y="1267.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1012.6" y="1278.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (1 samples, 0.32%)</title><rect x="1009.6" y="1251.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1012.6" y="1262.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (1 samples, 0.32%)</title><rect x="1009.6" y="1235.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1012.6" y="1246.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.32%)</title><rect x="1009.6" y="1219.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1012.6" y="1230.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (1 samples, 0.32%)</title><rect x="1009.6" y="1203.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1012.6" y="1214.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.32%)</title><rect x="1009.6" y="1187.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1012.6" y="1198.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.32%)</title><rect x="1009.6" y="1171.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1012.6" y="1182.0"></text>
</g>
<g>
<title>JavaThread::run() (47 samples, 14.97%)</title><rect x="1013.4" y="1315.0" width="176.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1016.4" y="1326.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (47 samples, 14.97%)</title><rect x="1013.4" y="1299.0" width="176.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1016.4" y="1310.0">JavaThread::thread_main..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (47 samples, 14.97%)</title><rect x="1013.4" y="1283.0" width="176.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1016.4" y="1294.0">CompileBroker::compiler..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (47 samples, 14.97%)</title><rect x="1013.4" y="1267.0" width="176.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1016.4" y="1278.0">CompileBroker::invoke_c..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (44 samples, 14.01%)</title><rect x="1013.4" y="1251.0" width="165.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1016.4" y="1262.0">C2Compiler::compile_m..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (44 samples, 14.01%)</title><rect x="1013.4" y="1235.0" width="165.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1016.4" y="1246.0">Compile::Compile(ciEn..</text>
</g>
<g>
<title>Compile::Code_Gen() (26 samples, 8.28%)</title><rect x="1013.4" y="1219.0" width="97.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1016.4" y="1230.0">Compile::Co..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.32%)</title><rect x="1013.4" y="1203.0" width="3.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1016.4" y="1214.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.32%)</title><rect x="1013.4" y="1187.0" width="3.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1016.4" y="1198.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.32%)</title><rect x="1013.4" y="1171.0" width="3.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1016.4" y="1182.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.32%)</title><rect x="1017.1" y="1203.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1020.1" y="1214.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.32%)</title><rect x="1017.1" y="1187.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1020.1" y="1198.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.32%)</title><rect x="1017.1" y="1171.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1020.1" y="1182.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.32%)</title><rect x="1017.1" y="1155.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1020.1" y="1166.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.32%)</title><rect x="1020.9" y="1203.0" width="3.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1023.9" y="1214.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.64%)</title><rect x="1024.6" y="1203.0" width="7.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1027.6" y="1214.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.64%)</title><rect x="1024.6" y="1187.0" width="7.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1027.6" y="1198.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.32%)</title><rect x="1024.6" y="1171.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1027.6" y="1182.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.32%)</title><rect x="1024.6" y="1155.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1027.6" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.32%)</title><rect x="1028.4" y="1171.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1031.4" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (20 samples, 6.37%)</title><rect x="1032.2" y="1203.0" width="75.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1035.2" y="1214.0">PhaseCha..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.64%)</title><rect x="1032.2" y="1187.0" width="7.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1035.2" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.32%)</title><rect x="1039.7" y="1187.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1042.7" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.32%)</title><rect x="1043.4" y="1187.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1046.4" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 1.27%)</title><rect x="1047.2" y="1187.0" width="15.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1050.2" y="1198.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.32%)</title><rect x="1051.0" y="1171.0" width="3.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1054.0" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.32%)</title><rect x="1054.7" y="1171.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1057.7" y="1182.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.32%)</title><rect x="1058.5" y="1171.0" width="3.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1061.5" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (5 samples, 1.59%)</title><rect x="1062.2" y="1187.0" width="18.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1065.2" y="1198.0"></text>
</g>
<g>
<title>MachSpillCopyNode::ideal_reg() const (1 samples, 0.32%)</title><rect x="1069.7" y="1171.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1072.7" y="1182.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.64%)</title><rect x="1073.5" y="1171.0" width="7.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1076.5" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.32%)</title><rect x="1081.0" y="1187.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1084.0" y="1198.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.32%)</title><rect x="1084.8" y="1187.0" width="3.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1087.8" y="1198.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.32%)</title><rect x="1084.8" y="1171.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1087.8" y="1182.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 1.27%)</title><rect x="1088.5" y="1187.0" width="15.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1091.5" y="1198.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.32%)</title><rect x="1088.5" y="1171.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1091.5" y="1182.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.32%)</title><rect x="1092.3" y="1171.0" width="3.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1095.3" y="1182.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.64%)</title><rect x="1096.1" y="1171.0" width="7.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1099.1" y="1182.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.32%)</title><rect x="1103.6" y="1187.0" width="3.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1106.6" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.32%)</title><rect x="1107.3" y="1203.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1110.3" y="1214.0"></text>
</g>
<g>
<title>Compile::Optimize() (13 samples, 4.14%)</title><rect x="1111.1" y="1219.0" width="48.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1114.1" y="1230.0">Comp..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.32%)</title><rect x="1111.1" y="1203.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1114.1" y="1214.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.32%)</title><rect x="1111.1" y="1187.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1114.1" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (9 samples, 2.87%)</title><rect x="1114.8" y="1203.0" width="33.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1117.8" y="1214.0">Ph..</text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.32%)</title><rect x="1114.8" y="1187.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1117.8" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.32%)</title><rect x="1118.6" y="1187.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1121.6" y="1198.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.32%)</title><rect x="1118.6" y="1171.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1121.6" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.64%)</title><rect x="1122.4" y="1187.0" width="7.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1125.4" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.32%)</title><rect x="1126.1" y="1171.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1129.1" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.32%)</title><rect x="1126.1" y="1155.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1129.1" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.32%)</title><rect x="1126.1" y="1139.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1129.1" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.32%)</title><rect x="1126.1" y="1123.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1129.1" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.32%)</title><rect x="1126.1" y="1107.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1129.1" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.64%)</title><rect x="1129.9" y="1187.0" width="7.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1132.9" y="1198.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.32%)</title><rect x="1133.6" y="1171.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1136.6" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.64%)</title><rect x="1137.4" y="1187.0" width="7.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1140.4" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.32%)</title><rect x="1137.4" y="1171.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1140.4" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.32%)</title><rect x="1137.4" y="1155.0" width="3.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1140.4" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.32%)</title><rect x="1137.4" y="1139.0" width="3.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1140.4" y="1150.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.32%)</title><rect x="1141.1" y="1171.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1144.1" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.32%)</title><rect x="1144.9" y="1187.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1147.9" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.32%)</title><rect x="1144.9" y="1171.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1147.9" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.32%)</title><rect x="1144.9" y="1155.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1147.9" y="1166.0"></text>
</g>
<g>
<title>LoadPNode::Opcode() const (1 samples, 0.32%)</title><rect x="1144.9" y="1139.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1147.9" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.64%)</title><rect x="1148.7" y="1203.0" width="7.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1151.7" y="1214.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.64%)</title><rect x="1148.7" y="1187.0" width="7.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1151.7" y="1198.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.32%)</title><rect x="1148.7" y="1171.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1151.7" y="1182.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.32%)</title><rect x="1148.7" y="1155.0" width="3.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1151.7" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.32%)</title><rect x="1152.4" y="1171.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.4" y="1182.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.32%)</title><rect x="1152.4" y="1155.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1155.4" y="1166.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.32%)</title><rect x="1156.2" y="1203.0" width="3.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1159.2" y="1214.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.59%)</title><rect x="1159.9" y="1219.0" width="18.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.9" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.59%)</title><rect x="1159.9" y="1203.0" width="18.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.9" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.59%)</title><rect x="1159.9" y="1187.0" width="18.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.9" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.59%)</title><rect x="1159.9" y="1171.0" width="18.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.9" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.59%)</title><rect x="1159.9" y="1155.0" width="18.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1162.9" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.27%)</title><rect x="1159.9" y="1139.0" width="15.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.9" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.96%)</title><rect x="1159.9" y="1123.0" width="11.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.9" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.96%)</title><rect x="1159.9" y="1107.0" width="11.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.9" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.96%)</title><rect x="1159.9" y="1091.0" width="11.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.9" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.96%)</title><rect x="1159.9" y="1075.0" width="11.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.9" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.96%)</title><rect x="1159.9" y="1059.0" width="11.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.9" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.96%)</title><rect x="1159.9" y="1043.0" width="11.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.9" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.96%)</title><rect x="1159.9" y="1027.0" width="11.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.9" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.96%)</title><rect x="1159.9" y="1011.0" width="11.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.9" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.96%)</title><rect x="1159.9" y="995.0" width="11.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.9" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.96%)</title><rect x="1159.9" y="979.0" width="11.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.9" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.96%)</title><rect x="1159.9" y="963.0" width="11.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1162.9" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.96%)</title><rect x="1159.9" y="947.0" width="11.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.9" y="958.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.32%)</title><rect x="1159.9" y="931.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.9" y="942.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.32%)</title><rect x="1159.9" y="915.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.9" y="926.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.32%)</title><rect x="1159.9" y="899.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.9" y="910.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.32%)</title><rect x="1159.9" y="883.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.9" y="894.0"></text>
</g>
<g>
<title>ciMethod::has_compiled_code() (1 samples, 0.32%)</title><rect x="1159.9" y="867.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1162.9" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.64%)</title><rect x="1163.7" y="931.0" width="7.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.7" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.64%)</title><rect x="1163.7" y="915.0" width="7.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.7" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.64%)</title><rect x="1163.7" y="899.0" width="7.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.7" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.64%)</title><rect x="1163.7" y="883.0" width="7.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.7" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.64%)</title><rect x="1163.7" y="867.0" width="7.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.64%)</title><rect x="1163.7" y="851.0" width="7.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.7" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.64%)</title><rect x="1163.7" y="835.0" width="7.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.7" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.64%)</title><rect x="1163.7" y="819.0" width="7.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.7" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.64%)</title><rect x="1163.7" y="803.0" width="7.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.7" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.64%)</title><rect x="1163.7" y="787.0" width="7.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.7" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.64%)</title><rect x="1163.7" y="771.0" width="7.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.64%)</title><rect x="1163.7" y="755.0" width="7.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.7" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.64%)</title><rect x="1163.7" y="739.0" width="7.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.7" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.64%)</title><rect x="1163.7" y="723.0" width="7.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.64%)</title><rect x="1163.7" y="707.0" width="7.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.64%)</title><rect x="1163.7" y="691.0" width="7.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.64%)</title><rect x="1163.7" y="675.0" width="7.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.7" y="686.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.32%)</title><rect x="1163.7" y="659.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.7" y="670.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.32%)</title><rect x="1163.7" y="643.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.7" y="654.0"></text>
</g>
<g>
<title>IdealKit::load(Node*, Node*, Type const*, BasicType, int, bool) (1 samples, 0.32%)</title><rect x="1163.7" y="627.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.7" y="638.0"></text>
</g>
<g>
<title>MergeMemNode::memory_at(unsigned int) const (1 samples, 0.32%)</title><rect x="1163.7" y="611.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.32%)</title><rect x="1167.5" y="659.0" width="3.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.5" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1167.5" y="643.0" width="3.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.5" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1167.5" y="627.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.5" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1167.5" y="611.0" width="3.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1167.5" y="595.0" width="3.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1167.5" y="579.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.32%)</title><rect x="1167.5" y="563.0" width="3.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.5" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1167.5" y="547.0" width="3.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.5" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1167.5" y="531.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1167.5" y="515.0" width="3.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1167.5" y="499.0" width="3.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1167.5" y="483.0" width="3.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.32%)</title><rect x="1167.5" y="467.0" width="3.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.5" y="478.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.32%)</title><rect x="1167.5" y="451.0" width="3.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.5" y="462.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.32%)</title><rect x="1167.5" y="435.0" width="3.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.5" y="446.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.32%)</title><rect x="1167.5" y="419.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.5" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.32%)</title><rect x="1167.5" y="403.0" width="3.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.5" y="414.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.32%)</title><rect x="1167.5" y="387.0" width="3.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.5" y="398.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.32%)</title><rect x="1167.5" y="371.0" width="3.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.5" y="382.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.32%)</title><rect x="1167.5" y="355.0" width="3.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.5" y="366.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.32%)</title><rect x="1167.5" y="339.0" width="3.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.5" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.32%)</title><rect x="1167.5" y="323.0" width="3.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.5" y="334.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.32%)</title><rect x="1167.5" y="307.0" width="3.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.5" y="318.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.32%)</title><rect x="1167.5" y="291.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.5" y="302.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.32%)</title><rect x="1167.5" y="275.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.5" y="286.0"></text>
</g>
<g>
<title>ConstantPool::impl_name_ref_at(int, bool) (1 samples, 0.32%)</title><rect x="1167.5" y="259.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.5" y="270.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1171.2" y="1123.0" width="3.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.2" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1171.2" y="1107.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.2" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1171.2" y="1091.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.2" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1171.2" y="1075.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.2" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1171.2" y="1059.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.2" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1171.2" y="1043.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.2" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.32%)</title><rect x="1171.2" y="1027.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.2" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1171.2" y="1011.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.2" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1171.2" y="995.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.2" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1171.2" y="979.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.2" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1171.2" y="963.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.2" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1171.2" y="947.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.2" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.32%)</title><rect x="1171.2" y="931.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.2" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1171.2" y="915.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.2" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1171.2" y="899.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.2" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1171.2" y="883.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.2" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1171.2" y="867.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.2" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1171.2" y="851.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.2" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.32%)</title><rect x="1171.2" y="835.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.2" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1171.2" y="819.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.2" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1171.2" y="803.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.2" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1171.2" y="787.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.2" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1171.2" y="771.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.2" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1171.2" y="755.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.32%)</title><rect x="1171.2" y="739.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.2" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1171.2" y="723.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.2" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1171.2" y="707.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1171.2" y="691.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1171.2" y="675.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.2" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1171.2" y="659.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.32%)</title><rect x="1171.2" y="643.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.2" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1171.2" y="627.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.2" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1171.2" y="611.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1171.2" y="595.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1171.2" y="579.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1171.2" y="563.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.32%)</title><rect x="1171.2" y="547.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.2" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1171.2" y="531.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.2" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1171.2" y="515.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1171.2" y="499.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1171.2" y="483.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1171.2" y="467.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.32%)</title><rect x="1171.2" y="451.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.2" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1171.2" y="435.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.2" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1171.2" y="419.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1171.2" y="403.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1171.2" y="387.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1171.2" y="371.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.32%)</title><rect x="1171.2" y="355.0" width="3.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.2" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1171.2" y="339.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.2" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1171.2" y="323.0" width="3.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1171.2" y="307.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1171.2" y="291.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.2" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1171.2" y="275.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.2" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.32%)</title><rect x="1171.2" y="259.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.2" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1171.2" y="243.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.2" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1171.2" y="227.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.2" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1171.2" y="211.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.2" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1171.2" y="195.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.2" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1171.2" y="179.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.2" y="190.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.32%)</title><rect x="1171.2" y="163.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.2" y="174.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.32%)</title><rect x="1171.2" y="147.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.2" y="158.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.32%)</title><rect x="1171.2" y="131.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.2" y="142.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.32%)</title><rect x="1171.2" y="115.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.2" y="126.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.32%)</title><rect x="1171.2" y="99.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.2" y="110.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.32%)</title><rect x="1171.2" y="83.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.2" y="94.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.32%)</title><rect x="1171.2" y="67.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.2" y="78.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.32%)</title><rect x="1171.2" y="51.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.2" y="62.0"></text>
</g>
<g>
<title>Symbol::as_C_string() const (1 samples, 0.32%)</title><rect x="1171.2" y="35.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.2" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.32%)</title><rect x="1175.0" y="1139.0" width="3.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.0" y="1150.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.32%)</title><rect x="1175.0" y="1123.0" width="3.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.0" y="1134.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.32%)</title><rect x="1175.0" y="1107.0" width="3.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.0" y="1118.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.32%)</title><rect x="1175.0" y="1091.0" width="3.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.0" y="1102.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.32%)</title><rect x="1175.0" y="1075.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.0" y="1086.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.32%)</title><rect x="1175.0" y="1059.0" width="3.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.0" y="1070.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.32%)</title><rect x="1175.0" y="1043.0" width="3.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.0" y="1054.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields() (1 samples, 0.32%)</title><rect x="1175.0" y="1027.0" width="3.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.0" y="1038.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields_impl(GrowableArray&lt;ciField*&gt;*) (1 samples, 0.32%)</title><rect x="1175.0" y="1011.0" width="3.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.0" y="1022.0"></text>
</g>
<g>
<title>ciField::ciField(fieldDescriptor*) (1 samples, 0.32%)</title><rect x="1175.0" y="995.0" width="3.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.0" y="1006.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.32%)</title><rect x="1175.0" y="979.0" width="3.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.0" y="990.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 0.96%)</title><rect x="1178.7" y="1251.0" width="11.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.7" y="1262.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 0.96%)</title><rect x="1178.7" y="1235.0" width="11.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.7" y="1246.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.96%)</title><rect x="1178.7" y="1219.0" width="11.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.7" y="1230.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.96%)</title><rect x="1178.7" y="1203.0" width="11.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.7" y="1214.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.32%)</title><rect x="1178.7" y="1187.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.7" y="1198.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.32%)</title><rect x="1178.7" y="1171.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.7" y="1182.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.32%)</title><rect x="1178.7" y="1155.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.7" y="1166.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.32%)</title><rect x="1178.7" y="1139.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.7" y="1150.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.32%)</title><rect x="1178.7" y="1123.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.7" y="1134.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.32%)</title><rect x="1178.7" y="1107.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.7" y="1118.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.32%)</title><rect x="1178.7" y="1091.0" width="3.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1181.7" y="1102.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (2 samples, 0.64%)</title><rect x="1182.5" y="1187.0" width="7.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.5" y="1198.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (2 samples, 0.64%)</title><rect x="1182.5" y="1171.0" width="7.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.5" y="1182.0"></text>
</g>
<g>
<title>AbstractAssembler::bind(Label&amp;) (1 samples, 0.32%)</title><rect x="1182.5" y="1155.0" width="3.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.5" y="1166.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_call(LIR_OpJavaCall*) (1 samples, 0.32%)</title><rect x="1186.2" y="1155.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.2" y="1166.0"></text>
</g>
<g>
<title>LIR_Assembler::call(LIR_OpJavaCall*, relocInfo::relocType) (1 samples, 0.32%)</title><rect x="1186.2" y="1139.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.2" y="1150.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.32%)</title><rect x="1186.2" y="1123.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.2" y="1134.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.32%)</title><rect x="1186.2" y="1107.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.2" y="1118.0"></text>
</g>
<g>
<title>IRScopeDebugInfo::record_debug_info(DebugInformationRecorder*, int, bool, bool) (1 samples, 0.32%)</title><rect x="1186.2" y="1091.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.2" y="1102.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.32%)</title><rect x="1186.2" y="1075.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.2" y="1086.0"></text>
</g>
</g>
</svg>
