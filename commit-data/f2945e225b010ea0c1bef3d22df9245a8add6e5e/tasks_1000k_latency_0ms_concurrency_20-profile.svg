<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="870" onload="init(evt)" viewBox="0 0 1200 870" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="853"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="853"> </text>
<g id="frames">
<g>
<title>all (1,131 samples, 100.00%)</title><rect x="10.0" y="819.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="830.0">all</text>
</g>
<g>
<title>[unknown] (2 samples, 0.18%)</title><rect x="10.0" y="803.0" width="2.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>_int_malloc (2 samples, 0.18%)</title><rect x="10.0" y="787.0" width="2.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (265 samples, 23.43%)</title><rect x="12.1" y="803.0" width="276.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.1" y="814.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.09%)</title><rect x="12.1" y="787.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.1" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (1 samples, 0.09%)</title><rect x="12.1" y="771.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.09%)</title><rect x="12.1" y="755.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.09%)</title><rect x="12.1" y="739.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.09%)</title><rect x="12.1" y="723.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="12.1" y="707.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.09%)</title><rect x="12.1" y="691.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.09%)</title><rect x="12.1" y="675.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="12.1" y="659.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.1" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="12.1" y="643.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.1" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.09%)</title><rect x="12.1" y="627.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.1" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.09%)</title><rect x="12.1" y="611.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.1" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.09%)</title><rect x="12.1" y="595.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="15.1" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.09%)</title><rect x="12.1" y="579.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.1" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.09%)</title><rect x="12.1" y="563.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.1" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$9.write (1 samples, 0.09%)</title><rect x="12.1" y="547.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.1" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (264 samples, 23.34%)</title><rect x="13.1" y="787.0" width="275.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="16.1" y="798.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (2 samples, 0.18%)</title><rect x="13.1" y="771.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="16.1" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (2 samples, 0.18%)</title><rect x="13.1" y="755.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.1" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.18%)</title><rect x="13.1" y="739.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="16.1" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.18%)</title><rect x="13.1" y="723.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.1" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.18%)</title><rect x="13.1" y="707.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="16.1" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.18%)</title><rect x="13.1" y="691.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="16.1" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.18%)</title><rect x="13.1" y="675.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="16.1" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="13.1" y="659.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="16.1" y="670.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.09%)</title><rect x="14.2" y="659.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="17.2" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.09%)</title><rect x="15.2" y="771.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.2" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.09%)</title><rect x="15.2" y="755.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="18.2" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (6 samples, 0.53%)</title><rect x="16.3" y="771.0" width="6.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.3" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (6 samples, 0.53%)</title><rect x="16.3" y="755.0" width="6.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.3" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (6 samples, 0.53%)</title><rect x="16.3" y="739.0" width="6.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.3" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$271/1029624210.accept (6 samples, 0.53%)</title><rect x="16.3" y="723.0" width="6.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.3" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (6 samples, 0.53%)</title><rect x="16.3" y="707.0" width="6.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="19.3" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (6 samples, 0.53%)</title><rect x="16.3" y="691.0" width="6.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="19.3" y="702.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (5 samples, 0.44%)</title><rect x="17.3" y="675.0" width="5.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.3" y="686.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (188 samples, 16.62%)</title><rect x="22.5" y="771.0" width="196.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="25.5" y="782.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$268/1676727645.accept (185 samples, 16.36%)</title><rect x="22.5" y="755.0" width="193.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.5" y="766.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (184 samples, 16.27%)</title><rect x="23.6" y="739.0" width="191.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="26.6" y="750.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (161 samples, 14.24%)</title><rect x="23.6" y="723.0" width="167.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="26.6" y="734.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (161 samples, 14.24%)</title><rect x="23.6" y="707.0" width="167.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="26.6" y="718.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (161 samples, 14.24%)</title><rect x="23.6" y="691.0" width="167.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="26.6" y="702.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (161 samples, 14.24%)</title><rect x="23.6" y="675.0" width="167.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="26.6" y="686.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (161 samples, 14.24%)</title><rect x="23.6" y="659.0" width="167.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="26.6" y="670.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (161 samples, 14.24%)</title><rect x="23.6" y="643.0" width="167.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.6" y="654.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (115 samples, 10.17%)</title><rect x="70.5" y="627.0" width="120.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="73.5" y="638.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (23 samples, 2.03%)</title><rect x="71.6" y="611.0" width="24.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="74.6" y="622.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (23 samples, 2.03%)</title><rect x="71.6" y="595.0" width="24.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="74.6" y="606.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (23 samples, 2.03%)</title><rect x="71.6" y="579.0" width="24.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="74.6" y="590.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.53%)</title><rect x="95.6" y="611.0" width="6.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="98.6" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (6 samples, 0.53%)</title><rect x="95.6" y="595.0" width="6.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="98.6" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.27%)</title><rect x="95.6" y="579.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="98.6" y="590.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (3 samples, 0.27%)</title><rect x="95.6" y="563.0" width="3.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="98.6" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.27%)</title><rect x="98.7" y="579.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="101.7" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (85 samples, 7.52%)</title><rect x="101.8" y="611.0" width="88.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="104.8" y="622.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (85 samples, 7.52%)</title><rect x="101.8" y="595.0" width="88.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="104.8" y="606.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (84 samples, 7.43%)</title><rect x="102.9" y="579.0" width="87.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="105.9" y="590.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (84 samples, 7.43%)</title><rect x="102.9" y="563.0" width="87.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="105.9" y="574.0">java/util/..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (83 samples, 7.34%)</title><rect x="103.9" y="547.0" width="86.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="106.9" y="558.0">sun/misc/U..</text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="103.9" y="531.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="106.9" y="542.0"></text>
</g>
<g>
<title>Unsafe_Unpark (75 samples, 6.63%)</title><rect x="104.9" y="531.0" width="78.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="107.9" y="542.0">Unsafe_Un..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="107.0" y="515.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="110.0" y="526.0"></text>
</g>
<g>
<title>__pthread_cond_signal (53 samples, 4.69%)</title><rect x="108.1" y="515.0" width="55.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="111.1" y="526.0">__pth..</text>
</g>
<g>
<title>_init (1 samples, 0.09%)</title><rect x="163.4" y="515.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="166.4" y="526.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (4 samples, 0.35%)</title><rect x="164.4" y="515.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="167.4" y="526.0"></text>
</g>
<g>
<title>pthread_mutex_lock (14 samples, 1.24%)</title><rect x="168.6" y="515.0" width="14.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="171.6" y="526.0"></text>
</g>
<g>
<title>__lll_unlock_wake (7 samples, 0.62%)</title><rect x="183.2" y="531.0" width="7.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="186.2" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.09%)</title><rect x="190.5" y="627.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="193.5" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.09%)</title><rect x="190.5" y="611.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="193.5" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.09%)</title><rect x="190.5" y="595.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="193.5" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.09%)</title><rect x="190.5" y="579.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="193.5" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (16 samples, 1.41%)</title><rect x="191.5" y="723.0" width="16.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="194.5" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (16 samples, 1.41%)</title><rect x="191.5" y="707.0" width="16.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="194.5" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="191.5" y="691.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="194.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (15 samples, 1.33%)</title><rect x="192.6" y="691.0" width="15.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="195.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (15 samples, 1.33%)</title><rect x="192.6" y="675.0" width="15.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="195.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 0.44%)</title><rect x="203.0" y="659.0" width="5.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="206.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (5 samples, 0.44%)</title><rect x="203.0" y="643.0" width="5.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="206.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 0.44%)</title><rect x="203.0" y="627.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="206.0" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (3 samples, 0.27%)</title><rect x="208.2" y="723.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="211.2" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.27%)</title><rect x="208.2" y="707.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="211.2" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.27%)</title><rect x="208.2" y="691.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="211.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 0.35%)</title><rect x="211.4" y="723.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="214.4" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 0.35%)</title><rect x="211.4" y="707.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="214.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 0.35%)</title><rect x="211.4" y="691.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="214.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (4 samples, 0.35%)</title><rect x="211.4" y="675.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="214.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 0.35%)</title><rect x="211.4" y="659.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="214.4" y="670.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="215.5" y="755.0" width="1.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="218.5" y="766.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.09%)</title><rect x="216.6" y="755.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="219.6" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.09%)</title><rect x="216.6" y="739.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="219.6" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.09%)</title><rect x="216.6" y="723.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="219.6" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.09%)</title><rect x="216.6" y="707.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="219.6" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.09%)</title><rect x="216.6" y="691.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="219.6" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.09%)</title><rect x="217.6" y="755.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="220.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.09%)</title><rect x="217.6" y="739.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="220.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.09%)</title><rect x="217.6" y="723.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="220.6" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.09%)</title><rect x="217.6" y="707.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="220.6" y="718.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.09%)</title><rect x="217.6" y="691.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="220.6" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (67 samples, 5.92%)</title><rect x="218.7" y="771.0" width="69.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="221.7" y="782.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (67 samples, 5.92%)</title><rect x="218.7" y="755.0" width="69.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="221.7" y="766.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (41 samples, 3.63%)</title><rect x="219.7" y="739.0" width="42.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="222.7" y="750.0">org/..</text>
</g>
<g>
<title>java/util/HashMap.isEmpty (1 samples, 0.09%)</title><rect x="219.7" y="723.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="222.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (40 samples, 3.54%)</title><rect x="220.8" y="723.0" width="41.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="223.8" y="734.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (40 samples, 3.54%)</title><rect x="220.8" y="707.0" width="41.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="223.8" y="718.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (36 samples, 3.18%)</title><rect x="220.8" y="691.0" width="37.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="223.8" y="702.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (36 samples, 3.18%)</title><rect x="220.8" y="675.0" width="37.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="223.8" y="686.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (12 samples, 1.06%)</title><rect x="222.8" y="659.0" width="12.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="225.8" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (3 samples, 0.27%)</title><rect x="231.2" y="643.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="234.2" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (3 samples, 0.27%)</title><rect x="231.2" y="627.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="234.2" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (3 samples, 0.27%)</title><rect x="231.2" y="611.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="234.2" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (3 samples, 0.27%)</title><rect x="231.2" y="595.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="234.2" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (3 samples, 0.27%)</title><rect x="231.2" y="579.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="234.2" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (3 samples, 0.27%)</title><rect x="231.2" y="563.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="234.2" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (3 samples, 0.27%)</title><rect x="231.2" y="547.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="234.2" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.09%)</title><rect x="234.3" y="643.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="237.3" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.09%)</title><rect x="234.3" y="627.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="237.3" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.09%)</title><rect x="234.3" y="611.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="237.3" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.09%)</title><rect x="234.3" y="595.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="237.3" y="606.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.09%)</title><rect x="234.3" y="579.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="237.3" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (21 samples, 1.86%)</title><rect x="235.4" y="659.0" width="21.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="238.4" y="670.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (21 samples, 1.86%)</title><rect x="235.4" y="643.0" width="21.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="238.4" y="654.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (10 samples, 0.88%)</title><rect x="240.6" y="627.0" width="10.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="243.6" y="638.0"></text>
</g>
<g>
<title>java/util/Optional.of (10 samples, 0.88%)</title><rect x="240.6" y="611.0" width="10.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="243.6" y="622.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.18%)</title><rect x="248.9" y="595.0" width="2.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="251.9" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (6 samples, 0.53%)</title><rect x="251.0" y="627.0" width="6.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="254.0" y="638.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (4 samples, 0.35%)</title><rect x="253.1" y="611.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="256.1" y="622.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="256.2" y="595.0" width="1.1" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="259.2" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.09%)</title><rect x="257.3" y="659.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="260.3" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.09%)</title><rect x="258.3" y="691.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="261.3" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.09%)</title><rect x="258.3" y="675.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="261.3" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="258.3" y="659.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="261.3" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="258.3" y="643.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="261.3" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="258.3" y="627.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="261.3" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.09%)</title><rect x="258.3" y="611.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="261.3" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="258.3" y="595.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="261.3" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (3 samples, 0.27%)</title><rect x="259.4" y="691.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="262.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (3 samples, 0.27%)</title><rect x="259.4" y="675.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="262.4" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLeadMetricName (2 samples, 0.18%)</title><rect x="259.4" y="659.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="262.4" y="670.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="259.4" y="643.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="262.4" y="654.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="259.4" y="627.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="262.4" y="638.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.09%)</title><rect x="260.4" y="643.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="263.4" y="654.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.09%)</title><rect x="260.4" y="627.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="263.4" y="638.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.09%)</title><rect x="260.4" y="611.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="263.4" y="622.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.09%)</title><rect x="260.4" y="595.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="263.4" y="606.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.09%)</title><rect x="260.4" y="579.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="263.4" y="590.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.09%)</title><rect x="260.4" y="563.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="263.4" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="261.4" y="659.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="264.4" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="261.4" y="643.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="264.4" y="654.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="261.4" y="627.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="264.4" y="638.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="261.4" y="611.0" width="1.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="264.4" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (10 samples, 0.88%)</title><rect x="262.5" y="739.0" width="10.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="265.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (9 samples, 0.80%)</title><rect x="262.5" y="723.0" width="9.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="265.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (7 samples, 0.62%)</title><rect x="262.5" y="707.0" width="7.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="265.5" y="718.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.18%)</title><rect x="262.5" y="691.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="265.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$236/343880405.accept (2 samples, 0.18%)</title><rect x="262.5" y="675.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="265.5" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (2 samples, 0.18%)</title><rect x="262.5" y="659.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="265.5" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (2 samples, 0.18%)</title><rect x="262.5" y="643.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="265.5" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.09%)</title><rect x="263.5" y="627.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="266.5" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="263.5" y="611.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="266.5" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="263.5" y="595.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="266.5" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.09%)</title><rect x="264.6" y="691.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="267.6" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.09%)</title><rect x="264.6" y="675.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="267.6" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.09%)</title><rect x="265.6" y="691.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="268.6" y="702.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.09%)</title><rect x="265.6" y="675.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="268.6" y="686.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.09%)</title><rect x="265.6" y="659.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="268.6" y="670.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="265.6" y="643.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="268.6" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="265.6" y="627.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="268.6" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (3 samples, 0.27%)</title><rect x="266.7" y="691.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="269.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.18%)</title><rect x="267.7" y="675.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="270.7" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.18%)</title><rect x="267.7" y="659.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="270.7" y="670.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.18%)</title><rect x="267.7" y="643.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="270.7" y="654.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.18%)</title><rect x="267.7" y="627.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="270.7" y="638.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.18%)</title><rect x="267.7" y="611.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="270.7" y="622.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.18%)</title><rect x="267.7" y="595.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="270.7" y="606.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.09%)</title><rect x="267.7" y="579.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="270.7" y="590.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.characteristics (1 samples, 0.09%)</title><rect x="267.7" y="563.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="270.7" y="574.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="268.7" y="579.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="271.7" y="590.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.09%)</title><rect x="268.7" y="563.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="271.7" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="268.7" y="547.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="271.7" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates$$Lambda$240/1123798923.apply (1 samples, 0.09%)</title><rect x="268.7" y="531.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="271.7" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.18%)</title><rect x="269.8" y="707.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="272.8" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 0.18%)</title><rect x="269.8" y="691.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="272.8" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.18%)</title><rect x="269.8" y="675.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="272.8" y="686.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.18%)</title><rect x="269.8" y="659.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="272.8" y="670.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.18%)</title><rect x="269.8" y="643.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="272.8" y="654.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.18%)</title><rect x="269.8" y="627.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="272.8" y="638.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="269.8" y="611.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="272.8" y="622.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.09%)</title><rect x="269.8" y="595.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="272.8" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.09%)</title><rect x="269.8" y="579.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="272.8" y="590.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.09%)</title><rect x="270.8" y="611.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="273.8" y="622.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.09%)</title><rect x="270.8" y="595.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="273.8" y="606.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.09%)</title><rect x="270.8" y="579.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="273.8" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.09%)</title><rect x="271.9" y="723.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="274.9" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.09%)</title><rect x="271.9" y="707.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="274.9" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.09%)</title><rect x="271.9" y="691.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="274.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.09%)</title><rect x="271.9" y="675.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="274.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.09%)</title><rect x="271.9" y="659.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="274.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.09%)</title><rect x="271.9" y="643.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="274.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="271.9" y="627.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="274.9" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.09%)</title><rect x="271.9" y="611.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="274.9" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.09%)</title><rect x="272.9" y="739.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="275.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.09%)</title><rect x="272.9" y="723.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="275.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.09%)</title><rect x="272.9" y="707.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="275.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="272.9" y="691.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="275.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.09%)</title><rect x="272.9" y="675.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="275.9" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (5 samples, 0.44%)</title><rect x="274.0" y="739.0" width="5.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="277.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (5 samples, 0.44%)</title><rect x="274.0" y="723.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="277.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (5 samples, 0.44%)</title><rect x="274.0" y="707.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="277.0" y="718.0"></text>
</g>
<g>
<title>java/util/HashSet.isEmpty (1 samples, 0.09%)</title><rect x="274.0" y="691.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="277.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="275.0" y="691.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="278.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/SystemTime.milliseconds (1 samples, 0.09%)</title><rect x="275.0" y="675.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="278.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (3 samples, 0.27%)</title><rect x="276.0" y="691.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="279.0" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.09%)</title><rect x="276.0" y="675.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="279.0" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.09%)</title><rect x="276.0" y="659.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="279.0" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="276.0" y="643.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="279.0" y="654.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="276.0" y="627.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="279.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.09%)</title><rect x="277.1" y="675.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="280.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.09%)</title><rect x="278.1" y="675.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="281.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.09%)</title><rect x="278.1" y="659.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="281.1" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.09%)</title><rect x="278.1" y="643.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="281.1" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.09%)</title><rect x="278.1" y="627.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="281.1" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.09%)</title><rect x="278.1" y="611.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="281.1" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.09%)</title><rect x="278.1" y="595.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="281.1" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.09%)</title><rect x="278.1" y="579.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="281.1" y="590.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="278.1" y="563.0" width="1.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="281.1" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (5 samples, 0.44%)</title><rect x="279.2" y="739.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="282.2" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (5 samples, 0.44%)</title><rect x="279.2" y="723.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="282.2" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (4 samples, 0.35%)</title><rect x="279.2" y="707.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="282.2" y="718.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="279.2" y="691.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="282.2" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="279.2" y="675.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="282.2" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="279.2" y="659.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="282.2" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.09%)</title><rect x="279.2" y="643.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="282.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.iterator (2 samples, 0.18%)</title><rect x="280.2" y="691.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="283.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.&lt;init&gt; (2 samples, 0.18%)</title><rect x="280.2" y="675.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="283.2" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="280.2" y="659.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="283.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.advance (1 samples, 0.09%)</title><rect x="281.3" y="659.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="284.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.first (1 samples, 0.09%)</title><rect x="281.3" y="643.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="284.3" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.09%)</title><rect x="282.3" y="691.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="285.3" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.selectReadReplica (1 samples, 0.09%)</title><rect x="283.4" y="707.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="286.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.preferredReadReplica (1 samples, 0.09%)</title><rect x="283.4" y="691.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="286.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.09%)</title><rect x="283.4" y="675.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="286.4" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.09%)</title><rect x="283.4" y="659.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="286.4" y="670.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.09%)</title><rect x="283.4" y="643.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="286.4" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="283.4" y="627.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="286.4" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.09%)</title><rect x="283.4" y="611.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="286.4" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (2 samples, 0.18%)</title><rect x="284.4" y="739.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="287.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.18%)</title><rect x="284.4" y="723.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="287.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="285.4" y="707.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="288.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="285.4" y="691.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="288.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.09%)</title><rect x="286.5" y="739.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="289.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="286.5" y="723.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="289.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="286.5" y="707.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="289.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="286.5" y="691.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="289.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="286.5" y="675.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="289.5" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.09%)</title><rect x="286.5" y="659.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="289.5" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Avg.update (1 samples, 0.09%)</title><rect x="286.5" y="643.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="289.5" y="654.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="287.5" y="739.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="290.5" y="750.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="287.5" y="723.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="290.5" y="734.0"></text>
</g>
<g>
<title>java/lang/Thread.run (796 samples, 70.38%)</title><rect x="288.6" y="803.0" width="830.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="291.6" y="814.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (796 samples, 70.38%)</title><rect x="288.6" y="787.0" width="830.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="291.6" y="798.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (796 samples, 70.38%)</title><rect x="288.6" y="771.0" width="830.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="291.6" y="782.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$288/394748295.run (569 samples, 50.31%)</title><rect x="291.7" y="755.0" width="593.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="294.7" y="766.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$288/39474829..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62 (569 samples, 50.31%)</title><rect x="291.7" y="739.0" width="593.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="294.7" y="750.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (567 samples, 50.13%)</title><rect x="293.8" y="723.0" width="591.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="296.8" y="734.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (565 samples, 49.96%)</title><rect x="293.8" y="707.0" width="589.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="296.8" y="718.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.release (1 samples, 0.09%)</title><rect x="303.2" y="691.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="306.2" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (13 samples, 1.15%)</title><rect x="304.2" y="691.0" width="13.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="307.2" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (13 samples, 1.15%)</title><rect x="304.2" y="675.0" width="13.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="307.2" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.get (13 samples, 1.15%)</title><rect x="304.2" y="659.0" width="13.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="307.2" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.27%)</title><rect x="304.2" y="643.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="307.2" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (10 samples, 0.88%)</title><rect x="307.3" y="643.0" width="10.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="310.3" y="654.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="312.6" y="627.0" width="1.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="315.6" y="638.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="312.6" y="611.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="315.6" y="622.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.35%)</title><rect x="313.6" y="627.0" width="4.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="316.6" y="638.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.35%)</title><rect x="313.6" y="611.0" width="4.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="316.6" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (45 samples, 3.98%)</title><rect x="317.8" y="691.0" width="46.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="320.8" y="702.0">com/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (45 samples, 3.98%)</title><rect x="317.8" y="675.0" width="46.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="320.8" y="686.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (45 samples, 3.98%)</title><rect x="317.8" y="659.0" width="46.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="320.8" y="670.0">java..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (1 samples, 0.09%)</title><rect x="329.3" y="643.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="332.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (33 samples, 2.92%)</title><rect x="330.3" y="643.0" width="34.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="333.3" y="654.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.27%)</title><rect x="330.3" y="627.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="333.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (3 samples, 0.27%)</title><rect x="330.3" y="611.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="333.3" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (3 samples, 0.27%)</title><rect x="330.3" y="595.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="333.3" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$296/513627704.accept (2 samples, 0.18%)</title><rect x="331.3" y="579.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="334.3" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (30 samples, 2.65%)</title><rect x="333.4" y="627.0" width="31.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="336.4" y="638.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$296/513627704.accept (30 samples, 2.65%)</title><rect x="333.4" y="611.0" width="31.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="336.4" y="622.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (30 samples, 2.65%)</title><rect x="333.4" y="595.0" width="31.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="336.4" y="606.0">co..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (30 samples, 2.65%)</title><rect x="333.4" y="579.0" width="31.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="336.4" y="590.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (30 samples, 2.65%)</title><rect x="333.4" y="563.0" width="31.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="336.4" y="574.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (30 samples, 2.65%)</title><rect x="333.4" y="547.0" width="31.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="336.4" y="558.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (9 samples, 0.80%)</title><rect x="333.4" y="531.0" width="9.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="336.4" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (9 samples, 0.80%)</title><rect x="333.4" y="515.0" width="9.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="336.4" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$285/1979041941.accept (1 samples, 0.09%)</title><rect x="340.7" y="499.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="343.7" y="510.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="341.8" y="499.0" width="1.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="344.8" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (21 samples, 1.86%)</title><rect x="342.8" y="531.0" width="21.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="345.8" y="542.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$285/1979041941.accept (1 samples, 0.09%)</title><rect x="363.7" y="515.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="366.7" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (179 samples, 15.83%)</title><rect x="364.7" y="691.0" width="186.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="367.7" y="702.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$45/1556995360.extract (179 samples, 15.83%)</title><rect x="364.7" y="675.0" width="186.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="367.7" y="686.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (179 samples, 15.83%)</title><rect x="364.7" y="659.0" width="186.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="367.7" y="670.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="364.7" y="643.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="367.7" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="364.7" y="627.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="367.7" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="364.7" y="611.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="367.7" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="364.7" y="595.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="367.7" y="606.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="364.7" y="579.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="367.7" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (178 samples, 15.74%)</title><rect x="365.8" y="643.0" width="185.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="368.8" y="654.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (178 samples, 15.74%)</title><rect x="365.8" y="627.0" width="185.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="368.8" y="638.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (178 samples, 15.74%)</title><rect x="365.8" y="611.0" width="185.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="368.8" y="622.0">com/fasterxml/jackson/da..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (67 samples, 5.92%)</title><rect x="365.8" y="595.0" width="69.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="368.8" y="606.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (34 samples, 3.01%)</title><rect x="365.8" y="579.0" width="35.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="368.8" y="590.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (33 samples, 2.92%)</title><rect x="365.8" y="563.0" width="34.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="368.8" y="574.0">co..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="377.3" y="547.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="380.3" y="558.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="377.3" y="531.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="380.3" y="542.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="378.3" y="547.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="381.3" y="558.0"></text>
</g>
<g>
<title>__clock_gettime (11 samples, 0.97%)</title><rect x="379.3" y="547.0" width="11.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="382.3" y="558.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.71%)</title><rect x="382.5" y="531.0" width="8.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="385.5" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.09%)</title><rect x="390.8" y="547.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="393.8" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (8 samples, 0.71%)</title><rect x="391.9" y="547.0" width="8.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="394.9" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (8 samples, 0.71%)</title><rect x="391.9" y="531.0" width="8.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="394.9" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (8 samples, 0.71%)</title><rect x="391.9" y="515.0" width="8.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="394.9" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (8 samples, 0.71%)</title><rect x="391.9" y="499.0" width="8.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="394.9" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (8 samples, 0.71%)</title><rect x="391.9" y="483.0" width="8.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="394.9" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.&lt;init&gt; (1 samples, 0.09%)</title><rect x="400.2" y="563.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="403.2" y="574.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.09%)</title><rect x="400.2" y="547.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="403.2" y="558.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (1 samples, 0.09%)</title><rect x="400.2" y="531.0" width="1.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="403.2" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (33 samples, 2.92%)</title><rect x="401.2" y="579.0" width="34.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="404.2" y="590.0">co..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="401.2" y="563.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="404.2" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="401.2" y="547.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="404.2" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="401.2" y="531.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="404.2" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.&lt;init&gt; (8 samples, 0.71%)</title><rect x="402.3" y="563.0" width="8.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="405.3" y="574.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.09%)</title><rect x="409.6" y="547.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="412.6" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (24 samples, 2.12%)</title><rect x="410.6" y="563.0" width="25.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="413.6" y="574.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (5 samples, 0.44%)</title><rect x="413.8" y="547.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="416.8" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 0.18%)</title><rect x="416.9" y="531.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="419.9" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (7 samples, 0.62%)</title><rect x="419.0" y="547.0" width="7.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="422.0" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (7 samples, 0.62%)</title><rect x="419.0" y="531.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="422.0" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (7 samples, 0.62%)</title><rect x="419.0" y="515.0" width="7.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="422.0" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (8 samples, 0.71%)</title><rect x="426.3" y="547.0" width="8.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="429.3" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.09%)</title><rect x="433.6" y="531.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="436.6" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="433.6" y="515.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="436.6" y="526.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.09%)</title><rect x="434.6" y="547.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="437.6" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (99 samples, 8.75%)</title><rect x="435.7" y="595.0" width="103.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="438.7" y="606.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (5 samples, 0.44%)</title><rect x="435.7" y="579.0" width="5.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="438.7" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (5 samples, 0.44%)</title><rect x="435.7" y="563.0" width="5.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="438.7" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (3 samples, 0.27%)</title><rect x="436.7" y="547.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="439.7" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.09%)</title><rect x="438.8" y="531.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="441.8" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (1 samples, 0.09%)</title><rect x="439.8" y="547.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="442.8" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (11 samples, 0.97%)</title><rect x="440.9" y="579.0" width="11.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="443.9" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (11 samples, 0.97%)</title><rect x="440.9" y="563.0" width="11.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="443.9" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.18%)</title><rect x="450.3" y="547.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="453.3" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (6 samples, 0.53%)</title><rect x="452.4" y="579.0" width="6.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="455.4" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 0.53%)</title><rect x="452.4" y="563.0" width="6.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="455.4" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (5 samples, 0.44%)</title><rect x="453.4" y="547.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="456.4" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (3 samples, 0.27%)</title><rect x="455.5" y="531.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="458.5" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="457.6" y="515.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="460.6" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (5 samples, 0.44%)</title><rect x="458.6" y="579.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="461.6" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (4 samples, 0.35%)</title><rect x="459.7" y="563.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="462.7" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (72 samples, 6.37%)</title><rect x="463.8" y="579.0" width="75.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="466.8" y="590.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (2 samples, 0.18%)</title><rect x="463.8" y="563.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="466.8" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (70 samples, 6.19%)</title><rect x="465.9" y="563.0" width="73.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="468.9" y="574.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (23 samples, 2.03%)</title><rect x="467.0" y="547.0" width="24.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="470.0" y="558.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (7 samples, 0.62%)</title><rect x="472.2" y="531.0" width="7.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="475.2" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (7 samples, 0.62%)</title><rect x="472.2" y="515.0" width="7.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="475.2" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (7 samples, 0.62%)</title><rect x="472.2" y="499.0" width="7.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="475.2" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (11 samples, 0.97%)</title><rect x="479.5" y="531.0" width="11.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="482.5" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.09%)</title><rect x="491.0" y="547.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="494.0" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (45 samples, 3.98%)</title><rect x="492.0" y="547.0" width="47.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="495.0" y="558.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (3 samples, 0.27%)</title><rect x="492.0" y="531.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="495.0" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (42 samples, 3.71%)</title><rect x="495.1" y="531.0" width="43.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="498.1" y="542.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (42 samples, 3.71%)</title><rect x="495.1" y="515.0" width="43.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="498.1" y="526.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (7 samples, 0.62%)</title><rect x="506.6" y="499.0" width="7.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="509.6" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.18%)</title><rect x="509.8" y="483.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="512.8" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.18%)</title><rect x="509.8" y="467.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="512.8" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.18%)</title><rect x="509.8" y="451.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="512.8" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.09%)</title><rect x="511.8" y="483.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="514.8" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.09%)</title><rect x="512.9" y="483.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="515.9" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (11 samples, 0.97%)</title><rect x="513.9" y="499.0" width="11.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="516.9" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (9 samples, 0.80%)</title><rect x="516.0" y="483.0" width="9.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="519.0" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (9 samples, 0.80%)</title><rect x="516.0" y="467.0" width="9.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="519.0" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (9 samples, 0.80%)</title><rect x="516.0" y="451.0" width="9.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="519.0" y="462.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (9 samples, 0.80%)</title><rect x="516.0" y="435.0" width="9.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="519.0" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.09%)</title><rect x="525.4" y="499.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="528.4" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.09%)</title><rect x="526.4" y="499.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="529.4" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.09%)</title><rect x="526.4" y="483.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="529.4" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.09%)</title><rect x="526.4" y="467.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="529.4" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.09%)</title><rect x="526.4" y="451.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="529.4" y="462.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.09%)</title><rect x="526.4" y="435.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="529.4" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (8 samples, 0.71%)</title><rect x="527.5" y="499.0" width="8.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="530.5" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.get (8 samples, 0.71%)</title><rect x="527.5" y="483.0" width="8.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="530.5" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (8 samples, 0.71%)</title><rect x="527.5" y="467.0" width="8.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="530.5" y="478.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="534.8" y="451.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="537.8" y="462.0"></text>
</g>
<g>
<title>InstanceKlass::array_klass_impl(bool, int, Thread*) (1 samples, 0.09%)</title><rect x="534.8" y="435.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="537.8" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (3 samples, 0.27%)</title><rect x="535.8" y="499.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="538.8" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 0.18%)</title><rect x="536.9" y="483.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="539.9" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (12 samples, 1.06%)</title><rect x="539.0" y="595.0" width="12.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="542.0" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (12 samples, 1.06%)</title><rect x="539.0" y="579.0" width="12.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="542.0" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (12 samples, 1.06%)</title><rect x="539.0" y="563.0" width="12.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="542.0" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBindings.isEmpty (2 samples, 0.18%)</title><rect x="540.0" y="547.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="543.0" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._findWellKnownSimple (5 samples, 0.44%)</title><rect x="542.1" y="547.0" width="5.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="545.1" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (4 samples, 0.35%)</title><rect x="547.3" y="547.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="550.3" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.35%)</title><rect x="547.3" y="531.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="550.3" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (313 samples, 27.67%)</title><rect x="551.5" y="691.0" width="326.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="554.5" y="702.0">com/linecorp/decaton/processor/runtime/inter..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (53 samples, 4.69%)</title><rect x="556.7" y="675.0" width="55.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="559.7" y="686.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (2 samples, 0.18%)</title><rect x="557.7" y="659.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="560.7" y="670.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (50 samples, 4.42%)</title><rect x="559.8" y="659.0" width="52.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="562.8" y="670.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (46 samples, 4.07%)</title><rect x="564.0" y="643.0" width="48.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="567.0" y="654.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (8 samples, 0.71%)</title><rect x="566.1" y="627.0" width="8.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="569.1" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (8 samples, 0.71%)</title><rect x="566.1" y="611.0" width="8.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="569.1" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (8 samples, 0.71%)</title><rect x="566.1" y="595.0" width="8.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="569.1" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (8 samples, 0.71%)</title><rect x="566.1" y="579.0" width="8.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="569.1" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.18%)</title><rect x="574.4" y="627.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="577.4" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.18%)</title><rect x="574.4" y="611.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="577.4" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.18%)</title><rect x="574.4" y="595.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="577.4" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.18%)</title><rect x="574.4" y="579.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="577.4" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.09%)</title><rect x="575.5" y="563.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="578.5" y="574.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (34 samples, 3.01%)</title><rect x="576.5" y="627.0" width="35.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="579.5" y="638.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (14 samples, 1.24%)</title><rect x="597.4" y="611.0" width="14.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="600.4" y="622.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.09%)</title><rect x="597.4" y="595.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="600.4" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.35%)</title><rect x="598.4" y="595.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="601.4" y="606.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.09%)</title><rect x="599.5" y="579.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="602.5" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.18%)</title><rect x="600.5" y="579.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="603.5" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (9 samples, 0.80%)</title><rect x="602.6" y="595.0" width="9.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="605.6" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.27%)</title><rect x="612.0" y="675.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="615.0" y="686.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.27%)</title><rect x="612.0" y="659.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="615.0" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (171 samples, 15.12%)</title><rect x="615.1" y="675.0" width="178.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="618.1" y="686.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (163 samples, 14.41%)</title><rect x="615.1" y="659.0" width="170.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="618.1" y="670.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (63 samples, 5.57%)</title><rect x="620.3" y="643.0" width="65.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="623.3" y="654.0">com/lin..</text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="637.0" y="627.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="640.0" y="638.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="637.0" y="611.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="640.0" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="637.0" y="595.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="640.0" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="637.0" y="579.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="640.0" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="637.0" y="563.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="640.0" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="637.0" y="547.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="640.0" y="558.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.09%)</title><rect x="637.0" y="531.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="640.0" y="542.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (32 samples, 2.83%)</title><rect x="638.1" y="627.0" width="33.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="641.1" y="638.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (30 samples, 2.65%)</title><rect x="640.2" y="611.0" width="31.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="643.2" y="622.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (15 samples, 1.33%)</title><rect x="645.4" y="595.0" width="15.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="648.4" y="606.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (15 samples, 1.33%)</title><rect x="645.4" y="579.0" width="15.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="648.4" y="590.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (15 samples, 1.33%)</title><rect x="645.4" y="563.0" width="15.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="648.4" y="574.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (15 samples, 1.33%)</title><rect x="645.4" y="547.0" width="15.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="648.4" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (5 samples, 0.44%)</title><rect x="646.4" y="531.0" width="5.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="649.4" y="542.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="646.4" y="515.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="649.4" y="526.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.09%)</title><rect x="647.5" y="515.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="650.5" y="526.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.27%)</title><rect x="648.5" y="515.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="651.5" y="526.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.09%)</title><rect x="650.6" y="499.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="653.6" y="510.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.09%)</title><rect x="650.6" y="483.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="653.6" y="494.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (9 samples, 0.80%)</title><rect x="651.6" y="531.0" width="9.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="654.6" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (4 samples, 0.35%)</title><rect x="653.7" y="515.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="656.7" y="526.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="653.7" y="499.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="656.7" y="510.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (2 samples, 0.18%)</title><rect x="654.8" y="499.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="657.8" y="510.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="656.9" y="499.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="659.9" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.09%)</title><rect x="656.9" y="483.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="659.9" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (2 samples, 0.18%)</title><rect x="657.9" y="515.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="660.9" y="526.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="660.0" y="515.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="663.0" y="526.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.35%)</title><rect x="661.0" y="595.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="664.0" y="606.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.35%)</title><rect x="665.2" y="595.0" width="4.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="668.2" y="606.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.18%)</title><rect x="669.4" y="595.0" width="2.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="672.4" y="606.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.09%)</title><rect x="671.5" y="627.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="674.5" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="671.5" y="611.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="674.5" y="622.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="671.5" y="595.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="674.5" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="671.5" y="579.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="674.5" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="671.5" y="563.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="674.5" y="574.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.09%)</title><rect x="672.5" y="627.0" width="1.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="675.5" y="638.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (12 samples, 1.06%)</title><rect x="673.6" y="627.0" width="12.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="676.6" y="638.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (7 samples, 0.62%)</title><rect x="686.1" y="643.0" width="7.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="689.1" y="654.0"></text>
</g>
<g>
<title>java/lang/Long.toString (7 samples, 0.62%)</title><rect x="686.1" y="627.0" width="7.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="689.1" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="686.1" y="611.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="689.1" y="622.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="686.1" y="595.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="689.1" y="606.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (6 samples, 0.53%)</title><rect x="687.1" y="611.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="690.1" y="622.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (88 samples, 7.78%)</title><rect x="693.4" y="643.0" width="91.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="696.4" y="654.0">org/slf4j/M..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (87 samples, 7.69%)</title><rect x="694.4" y="627.0" width="90.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="697.4" y="638.0">ch/qos/log..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (8 samples, 0.71%)</title><rect x="694.4" y="611.0" width="8.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="697.4" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (8 samples, 0.71%)</title><rect x="694.4" y="595.0" width="8.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="697.4" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (8 samples, 0.71%)</title><rect x="694.4" y="579.0" width="8.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="697.4" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (8 samples, 0.71%)</title><rect x="694.4" y="563.0" width="8.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="697.4" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.27%)</title><rect x="702.8" y="611.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="705.8" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.27%)</title><rect x="702.8" y="595.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="705.8" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.27%)</title><rect x="702.8" y="579.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="705.8" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.27%)</title><rect x="702.8" y="563.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="705.8" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.18%)</title><rect x="703.8" y="547.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="706.8" y="558.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (76 samples, 6.72%)</title><rect x="705.9" y="611.0" width="79.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="708.9" y="622.0">java/util..</text>
</g>
<g>
<title>java/util/HashMap.put (71 samples, 6.28%)</title><rect x="711.1" y="595.0" width="74.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="714.1" y="606.0">java/uti..</text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.09%)</title><rect x="739.3" y="579.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="742.3" y="590.0"></text>
</g>
<g>
<title>PtrQueueSet::allocate_buffer() (1 samples, 0.09%)</title><rect x="739.3" y="563.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="742.3" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (43 samples, 3.80%)</title><rect x="740.3" y="579.0" width="44.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="743.3" y="590.0">java..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (7 samples, 0.62%)</title><rect x="759.1" y="563.0" width="7.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="762.1" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (13 samples, 1.15%)</title><rect x="766.4" y="563.0" width="13.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="769.4" y="574.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="778.9" y="547.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="781.9" y="558.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="778.9" y="531.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="781.9" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="778.9" y="515.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="781.9" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="778.9" y="499.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="781.9" y="510.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="778.9" y="483.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="781.9" y="494.0"></text>
</g>
<g>
<title>vtable stub (5 samples, 0.44%)</title><rect x="780.0" y="563.0" width="5.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="783.0" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (8 samples, 0.71%)</title><rect x="785.2" y="659.0" width="8.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="788.2" y="670.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (8 samples, 0.71%)</title><rect x="785.2" y="643.0" width="8.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="788.2" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.get (8 samples, 0.71%)</title><rect x="785.2" y="627.0" width="8.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="788.2" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (8 samples, 0.71%)</title><rect x="785.2" y="611.0" width="8.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="788.2" y="622.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="789.4" y="595.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="792.4" y="606.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.18%)</title><rect x="790.4" y="595.0" width="2.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="793.4" y="606.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.18%)</title><rect x="790.4" y="579.0" width="2.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="793.4" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.09%)</title><rect x="792.5" y="595.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="795.5" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (66 samples, 5.84%)</title><rect x="793.5" y="675.0" width="68.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="796.5" y="686.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (64 samples, 5.66%)</title><rect x="795.6" y="659.0" width="66.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="798.6" y="670.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$209/252542782.process (25 samples, 2.21%)</title><rect x="796.7" y="643.0" width="26.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="799.7" y="654.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (25 samples, 2.21%)</title><rect x="796.7" y="627.0" width="26.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="799.7" y="638.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (24 samples, 2.12%)</title><rect x="796.7" y="611.0" width="25.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="799.7" y="622.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.18%)</title><rect x="797.7" y="595.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="800.7" y="606.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.18%)</title><rect x="797.7" y="579.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="800.7" y="590.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.18%)</title><rect x="797.7" y="563.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="800.7" y="574.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.18%)</title><rect x="797.7" y="547.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="800.7" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.18%)</title><rect x="797.7" y="531.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="800.7" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.09%)</title><rect x="798.8" y="515.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="801.8" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (8 samples, 0.71%)</title><rect x="799.8" y="595.0" width="8.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="802.8" y="606.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="799.8" y="579.0" width="1.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="802.8" y="590.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.62%)</title><rect x="800.8" y="579.0" width="7.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="803.8" y="590.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.53%)</title><rect x="801.9" y="563.0" width="6.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="804.9" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (13 samples, 1.15%)</title><rect x="808.1" y="595.0" width="13.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="811.1" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.09%)</title><rect x="821.7" y="611.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="824.7" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="821.7" y="595.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="824.7" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="821.7" y="579.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="824.7" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="821.7" y="563.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="824.7" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (7 samples, 0.62%)</title><rect x="822.7" y="643.0" width="7.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="825.7" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (1 samples, 0.09%)</title><rect x="822.7" y="627.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="825.7" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="822.7" y="611.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="825.7" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (6 samples, 0.53%)</title><rect x="823.8" y="627.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="826.8" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (6 samples, 0.53%)</title><rect x="823.8" y="611.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="826.8" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (6 samples, 0.53%)</title><rect x="823.8" y="595.0" width="6.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="826.8" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (6 samples, 0.53%)</title><rect x="823.8" y="579.0" width="6.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="826.8" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 0.53%)</title><rect x="823.8" y="563.0" width="6.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="826.8" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$209/252542782.process (3 samples, 0.27%)</title><rect x="826.9" y="547.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="829.9" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.44%)</title><rect x="830.1" y="643.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="833.1" y="654.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.35%)</title><rect x="831.1" y="627.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="834.1" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (8 samples, 0.71%)</title><rect x="835.3" y="643.0" width="8.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="838.3" y="654.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.35%)</title><rect x="839.4" y="627.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="842.4" y="638.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.18%)</title><rect x="839.4" y="611.0" width="2.1" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="842.4" y="622.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.18%)</title><rect x="841.5" y="611.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="844.5" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.18%)</title><rect x="843.6" y="643.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="846.6" y="654.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.18%)</title><rect x="843.6" y="627.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="846.6" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (5 samples, 0.44%)</title><rect x="845.7" y="643.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="848.7" y="654.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.09%)</title><rect x="847.8" y="627.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="850.8" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="847.8" y="611.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="850.8" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.18%)</title><rect x="848.8" y="627.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="851.8" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.09%)</title><rect x="850.9" y="643.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="853.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 0.88%)</title><rect x="852.0" y="643.0" width="10.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="855.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 0.88%)</title><rect x="852.0" y="627.0" width="10.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="855.0" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 0.53%)</title><rect x="856.1" y="611.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="859.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.27%)</title><rect x="856.1" y="595.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="859.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.18%)</title><rect x="856.1" y="579.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="859.1" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 0.18%)</title><rect x="856.1" y="563.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="859.1" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.09%)</title><rect x="858.2" y="579.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="861.2" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.27%)</title><rect x="859.3" y="595.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="862.3" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$294/282855437.accept (1 samples, 0.09%)</title><rect x="861.4" y="579.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="864.4" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$76 (1 samples, 0.09%)</title><rect x="861.4" y="563.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="864.4" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (15 samples, 1.33%)</title><rect x="862.4" y="675.0" width="15.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="865.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (15 samples, 1.33%)</title><rect x="862.4" y="659.0" width="15.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="865.4" y="670.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.18%)</title><rect x="865.5" y="643.0" width="2.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="868.5" y="654.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.18%)</title><rect x="865.5" y="627.0" width="2.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="868.5" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (10 samples, 0.88%)</title><rect x="867.6" y="643.0" width="10.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="870.6" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="867.6" y="627.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="870.6" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="867.6" y="611.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="870.6" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="867.6" y="595.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="870.6" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="867.6" y="579.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="870.6" y="590.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="867.6" y="563.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="870.6" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (5 samples, 0.44%)</title><rect x="868.7" y="627.0" width="5.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="871.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (5 samples, 0.44%)</title><rect x="868.7" y="611.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="871.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (5 samples, 0.44%)</title><rect x="868.7" y="595.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="871.7" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$295/1844830105.accept (2 samples, 0.18%)</title><rect x="868.7" y="579.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="871.7" y="590.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.27%)</title><rect x="870.7" y="579.0" width="3.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="873.7" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 0.35%)</title><rect x="873.9" y="627.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="876.9" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$295/1844830105.accept (4 samples, 0.35%)</title><rect x="873.9" y="611.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="876.9" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$57 (4 samples, 0.35%)</title><rect x="873.9" y="595.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="876.9" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (4 samples, 0.35%)</title><rect x="873.9" y="579.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="876.9" y="590.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (4 samples, 0.35%)</title><rect x="873.9" y="563.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="876.9" y="574.0"></text>
</g>
<g>
<title>java/time/Duration.create (4 samples, 0.35%)</title><rect x="873.9" y="547.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="876.9" y="558.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.27%)</title><rect x="873.9" y="531.0" width="3.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="876.9" y="542.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.27%)</title><rect x="873.9" y="515.0" width="3.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="876.9" y="526.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="877.0" y="531.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="880.0" y="542.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.44%)</title><rect x="878.0" y="691.0" width="5.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="881.0" y="702.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.44%)</title><rect x="878.0" y="675.0" width="5.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="881.0" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (2 samples, 0.18%)</title><rect x="883.3" y="707.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="886.3" y="718.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.18%)</title><rect x="883.3" y="691.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="886.3" y="702.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.18%)</title><rect x="883.3" y="675.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="886.3" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.18%)</title><rect x="883.3" y="659.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="886.3" y="670.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.18%)</title><rect x="883.3" y="643.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="886.3" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.18%)</title><rect x="883.3" y="627.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="886.3" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.18%)</title><rect x="883.3" y="611.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="886.3" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (2 samples, 0.18%)</title><rect x="883.3" y="595.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="886.3" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (2 samples, 0.18%)</title><rect x="885.3" y="755.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="888.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.09%)</title><rect x="887.4" y="755.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="890.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.09%)</title><rect x="887.4" y="739.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="890.4" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="887.4" y="723.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="890.4" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.09%)</title><rect x="887.4" y="707.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="890.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (221 samples, 19.54%)</title><rect x="888.5" y="755.0" width="230.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="891.5" y="766.0">java/util/concurrent/ThreadPoo..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (221 samples, 19.54%)</title><rect x="888.5" y="739.0" width="230.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="891.5" y="750.0">java/util/concurrent/LinkedBlo..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (202 samples, 17.86%)</title><rect x="908.3" y="723.0" width="210.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="911.3" y="734.0">java/util/concurrent/locks/A..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (14 samples, 1.24%)</title><rect x="914.6" y="707.0" width="14.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="917.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (14 samples, 1.24%)</title><rect x="914.6" y="691.0" width="14.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="917.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (14 samples, 1.24%)</title><rect x="914.6" y="675.0" width="14.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="917.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (14 samples, 1.24%)</title><rect x="914.6" y="659.0" width="14.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="917.6" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (182 samples, 16.09%)</title><rect x="929.2" y="707.0" width="189.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="932.2" y="718.0">java/util/concurrent/lock..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (173 samples, 15.30%)</title><rect x="938.6" y="691.0" width="180.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="941.6" y="702.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.09%)</title><rect x="947.9" y="675.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="950.9" y="686.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (2 samples, 0.18%)</title><rect x="949.0" y="675.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="952.0" y="686.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.09%)</title><rect x="951.1" y="675.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="954.1" y="686.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.18%)</title><rect x="952.1" y="675.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="955.1" y="686.0"></text>
</g>
<g>
<title>Unsafe_Park (151 samples, 13.35%)</title><rect x="954.2" y="675.0" width="157.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="957.2" y="686.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.18%)</title><rect x="961.5" y="659.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="964.5" y="670.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="963.6" y="659.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="966.6" y="670.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (24 samples, 2.12%)</title><rect x="964.6" y="659.0" width="25.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="967.6" y="670.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (9 samples, 0.80%)</title><rect x="973.0" y="643.0" width="9.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="976.0" y="654.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (5 samples, 0.44%)</title><rect x="974.0" y="627.0" width="5.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="977.0" y="638.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (3 samples, 0.27%)</title><rect x="976.1" y="611.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="979.1" y="622.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.18%)</title><rect x="979.2" y="627.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="982.2" y="638.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="981.3" y="627.0" width="1.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="984.3" y="638.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.09%)</title><rect x="982.4" y="643.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="985.4" y="654.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.18%)</title><rect x="983.4" y="643.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="986.4" y="654.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (4 samples, 0.35%)</title><rect x="985.5" y="643.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="988.5" y="654.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.09%)</title><rect x="989.7" y="659.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="992.7" y="670.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.18%)</title><rect x="990.7" y="659.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="993.7" y="670.0"></text>
</g>
<g>
<title>__lll_lock_wait (10 samples, 0.88%)</title><rect x="992.8" y="659.0" width="10.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="995.8" y="670.0"></text>
</g>
<g>
<title>__lll_unlock_wake (25 samples, 2.21%)</title><rect x="1003.2" y="659.0" width="26.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1006.2" y="670.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (58 samples, 5.13%)</title><rect x="1029.3" y="659.0" width="60.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1032.3" y="670.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (9 samples, 0.80%)</title><rect x="1089.8" y="659.0" width="9.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1092.8" y="670.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.09%)</title><rect x="1099.2" y="659.0" width="1.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1102.2" y="670.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.18%)</title><rect x="1100.3" y="659.0" width="2.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1103.3" y="670.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.35%)</title><rect x="1102.4" y="659.0" width="4.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1105.4" y="670.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.18%)</title><rect x="1106.5" y="659.0" width="2.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1109.5" y="670.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (3 samples, 0.27%)</title><rect x="1108.6" y="659.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1111.6" y="670.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.18%)</title><rect x="1111.8" y="675.0" width="2.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1114.8" y="686.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (2 samples, 0.18%)</title><rect x="1113.8" y="675.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1116.8" y="686.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.27%)</title><rect x="1115.9" y="675.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1118.9" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.09%)</title><rect x="1119.1" y="803.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1122.1" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.09%)</title><rect x="1119.1" y="787.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1122.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="1119.1" y="771.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1122.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.09%)</title><rect x="1119.1" y="755.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1122.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.09%)</title><rect x="1119.1" y="739.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1122.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.09%)</title><rect x="1119.1" y="723.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1122.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.09%)</title><rect x="1119.1" y="707.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1122.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.09%)</title><rect x="1119.1" y="691.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1122.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.09%)</title><rect x="1119.1" y="675.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1122.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.09%)</title><rect x="1119.1" y="659.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1122.1" y="670.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.09%)</title><rect x="1119.1" y="643.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1122.1" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.09%)</title><rect x="1119.1" y="627.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1122.1" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.09%)</title><rect x="1119.1" y="611.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1122.1" y="622.0"></text>
</g>
<g>
<title>start_thread (67 samples, 5.92%)</title><rect x="1120.1" y="803.0" width="69.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1123.1" y="814.0">start_t..</text>
</g>
<g>
<title>java_start(Thread*) (67 samples, 5.92%)</title><rect x="1120.1" y="787.0" width="69.9" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1123.1" y="798.0">java_st..</text>
</g>
<g>
<title>GangWorker::loop() (23 samples, 2.03%)</title><rect x="1120.1" y="771.0" width="24.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1123.1" y="782.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (8 samples, 0.71%)</title><rect x="1120.1" y="755.0" width="8.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1123.1" y="766.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 0.71%)</title><rect x="1120.1" y="739.0" width="8.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1123.1" y="750.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.18%)</title><rect x="1120.1" y="723.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1123.1" y="734.0"></text>
</g>
<g>
<title>SpinPause (6 samples, 0.53%)</title><rect x="1122.2" y="723.0" width="6.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1125.2" y="734.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (15 samples, 1.33%)</title><rect x="1128.4" y="755.0" width="15.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1131.4" y="766.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 0.53%)</title><rect x="1128.4" y="739.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1131.4" y="750.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.09%)</title><rect x="1128.4" y="723.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1131.4" y="734.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.09%)</title><rect x="1128.4" y="707.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1131.4" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.09%)</title><rect x="1128.4" y="691.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1131.4" y="702.0"></text>
</g>
<g>
<title>SpinPause (5 samples, 0.44%)</title><rect x="1129.5" y="723.0" width="5.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1132.5" y="734.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (5 samples, 0.44%)</title><rect x="1134.7" y="739.0" width="5.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1137.7" y="750.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (5 samples, 0.44%)</title><rect x="1134.7" y="723.0" width="5.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1137.7" y="734.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (5 samples, 0.44%)</title><rect x="1134.7" y="707.0" width="5.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1137.7" y="718.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (4 samples, 0.35%)</title><rect x="1139.9" y="739.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1142.9" y="750.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (4 samples, 0.35%)</title><rect x="1139.9" y="723.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1142.9" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (4 samples, 0.35%)</title><rect x="1139.9" y="707.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1142.9" y="718.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (4 samples, 0.35%)</title><rect x="1139.9" y="691.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1142.9" y="702.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (4 samples, 0.35%)</title><rect x="1139.9" y="675.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1142.9" y="686.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (4 samples, 0.35%)</title><rect x="1139.9" y="659.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.9" y="670.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (3 samples, 0.27%)</title><rect x="1141.0" y="643.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1144.0" y="654.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (2 samples, 0.18%)</title><rect x="1141.0" y="627.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1144.0" y="638.0"></text>
</g>
<g>
<title>InstanceRefKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.09%)</title><rect x="1143.1" y="627.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1146.1" y="638.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, int) (1 samples, 0.09%)</title><rect x="1143.1" y="611.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1146.1" y="622.0"></text>
</g>
<g>
<title>JavaThread::run() (41 samples, 3.63%)</title><rect x="1144.1" y="771.0" width="42.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1147.1" y="782.0">Java..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (41 samples, 3.63%)</title><rect x="1144.1" y="755.0" width="42.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1147.1" y="766.0">Java..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (41 samples, 3.63%)</title><rect x="1144.1" y="739.0" width="42.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1147.1" y="750.0">Comp..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (41 samples, 3.63%)</title><rect x="1144.1" y="723.0" width="42.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1147.1" y="734.0">Comp..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (39 samples, 3.45%)</title><rect x="1144.1" y="707.0" width="40.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1147.1" y="718.0">C2C..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (39 samples, 3.45%)</title><rect x="1144.1" y="691.0" width="40.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1147.1" y="702.0">Com..</text>
</g>
<g>
<title>Compile::Code_Gen() (20 samples, 1.77%)</title><rect x="1144.1" y="675.0" width="20.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1147.1" y="686.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.18%)</title><rect x="1144.1" y="659.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1147.1" y="670.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.18%)</title><rect x="1144.1" y="643.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1147.1" y="654.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.09%)</title><rect x="1144.1" y="627.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1147.1" y="638.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.09%)</title><rect x="1144.1" y="611.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1147.1" y="622.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int, Compile*) (1 samples, 0.09%)</title><rect x="1144.1" y="595.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1147.1" y="606.0"></text>
</g>
<g>
<title>MachTypeNode::MachTypeNode() (1 samples, 0.09%)</title><rect x="1144.1" y="579.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1147.1" y="590.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.09%)</title><rect x="1144.1" y="563.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1147.1" y="574.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1145.1" y="627.0" width="1.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1148.1" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (18 samples, 1.59%)</title><rect x="1146.2" y="659.0" width="18.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1149.2" y="670.0"></text>
</g>
<g>
<title>MachNode::Opcode() const (1 samples, 0.09%)</title><rect x="1146.2" y="643.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1149.2" y="654.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.18%)</title><rect x="1147.2" y="643.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.2" y="654.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.09%)</title><rect x="1148.3" y="627.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1151.3" y="638.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.09%)</title><rect x="1148.3" y="611.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1151.3" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.09%)</title><rect x="1149.3" y="643.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.3" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.09%)</title><rect x="1150.4" y="643.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.4" y="654.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.09%)</title><rect x="1150.4" y="627.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.4" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 0.35%)</title><rect x="1151.4" y="643.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1154.4" y="654.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.09%)</title><rect x="1152.4" y="627.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.4" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (1 samples, 0.09%)</title><rect x="1153.5" y="627.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.5" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::clone_projs(Block*, unsigned int, Node*, Node*, unsigned int&amp;) (1 samples, 0.09%)</title><rect x="1153.5" y="611.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.5" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.09%)</title><rect x="1154.5" y="627.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1157.5" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::insert_proj(Block*, unsigned int, Node*, unsigned int) (1 samples, 0.09%)</title><rect x="1154.5" y="611.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1157.5" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 0.27%)</title><rect x="1155.6" y="643.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1158.6" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.18%)</title><rect x="1156.6" y="627.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.6" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.09%)</title><rect x="1158.7" y="643.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1161.7" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.18%)</title><rect x="1159.7" y="643.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.7" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.09%)</title><rect x="1160.8" y="627.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.8" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.09%)</title><rect x="1160.8" y="611.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.8" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.09%)</title><rect x="1161.8" y="643.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.8" y="654.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.09%)</title><rect x="1162.9" y="643.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.9" y="654.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1162.9" y="627.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.9" y="638.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.09%)</title><rect x="1163.9" y="643.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.9" y="654.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1163.9" y="627.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.9" y="638.0"></text>
</g>
<g>
<title>Compile::Optimize() (11 samples, 0.97%)</title><rect x="1165.0" y="675.0" width="11.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.0" y="686.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.09%)</title><rect x="1165.0" y="659.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.0" y="670.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.09%)</title><rect x="1166.0" y="659.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.0" y="670.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.09%)</title><rect x="1166.0" y="643.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.0" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (6 samples, 0.53%)</title><rect x="1167.0" y="659.0" width="6.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.0" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.18%)</title><rect x="1167.0" y="643.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.0" y="654.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.09%)</title><rect x="1168.1" y="627.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.1" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.09%)</title><rect x="1169.1" y="643.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.1" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (3 samples, 0.27%)</title><rect x="1170.2" y="643.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.2" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.09%)</title><rect x="1172.3" y="627.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.3" y="638.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.18%)</title><rect x="1173.3" y="659.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.3" y="670.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.18%)</title><rect x="1173.3" y="643.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.3" y="654.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1173.3" y="627.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.3" y="638.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1173.3" y="611.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.3" y="622.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.09%)</title><rect x="1173.3" y="595.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.3" y="606.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1174.4" y="627.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.4" y="638.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1175.4" y="659.0" width="1.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1178.4" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.35%)</title><rect x="1176.4" y="675.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.4" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.35%)</title><rect x="1176.4" y="659.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.35%)</title><rect x="1176.4" y="643.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.4" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.35%)</title><rect x="1176.4" y="627.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.4" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.35%)</title><rect x="1176.4" y="611.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.35%)</title><rect x="1176.4" y="595.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.4" y="606.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1176.4" y="579.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.4" y="590.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1176.4" y="563.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.4" y="574.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1176.4" y="547.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.4" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1176.4" y="531.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.4" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1176.4" y="515.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.4" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1176.4" y="499.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.4" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1176.4" y="483.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.4" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::compute_exceptions() (1 samples, 0.09%)</title><rect x="1176.4" y="467.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.4" y="478.0"></text>
</g>
<g>
<title>ciExceptionHandler::catch_klass() (1 samples, 0.09%)</title><rect x="1176.4" y="451.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.4" y="462.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1176.4" y="435.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.4" y="446.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1176.4" y="419.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.4" y="430.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_if_loaded(constantPoolHandle, int) (1 samples, 0.09%)</title><rect x="1176.4" y="403.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.4" y="414.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.09%)</title><rect x="1176.4" y="387.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.4" y="398.0"></text>
</g>
<g>
<title>InstanceKlass::protection_domain() const (1 samples, 0.09%)</title><rect x="1176.4" y="371.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.4" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.27%)</title><rect x="1177.5" y="579.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.5" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.27%)</title><rect x="1177.5" y="563.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.27%)</title><rect x="1177.5" y="547.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1177.5" y="531.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1177.5" y="515.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1177.5" y="499.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.5" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1177.5" y="483.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.5" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1177.5" y="467.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1177.5" y="451.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1177.5" y="435.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1177.5" y="419.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1177.5" y="403.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.5" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1177.5" y="387.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.5" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1177.5" y="371.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1177.5" y="355.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1177.5" y="339.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.5" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1177.5" y="323.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1177.5" y="307.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.5" y="318.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1177.5" y="291.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.5" y="302.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1177.5" y="275.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.5" y="286.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1177.5" y="259.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.5" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1177.5" y="243.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.5" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1177.5" y="227.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.5" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1177.5" y="211.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.5" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1177.5" y="195.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.5" y="206.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1177.5" y="179.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.5" y="190.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1177.5" y="163.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.5" y="174.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.09%)</title><rect x="1177.5" y="147.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.5" y="158.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1177.5" y="131.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.5" y="142.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1177.5" y="115.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.5" y="126.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1177.5" y="99.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.5" y="110.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1177.5" y="83.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.5" y="94.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1177.5" y="67.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.5" y="78.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.09%)</title><rect x="1177.5" y="51.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.5" y="62.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1177.5" y="35.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.5" y="46.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.5" y="291.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.5" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1178.5" y="275.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1178.5" y="259.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.5" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1178.5" y="243.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.5" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1178.5" y="227.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.5" y="238.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.09%)</title><rect x="1178.5" y="211.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.5" y="222.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const**) (1 samples, 0.09%)</title><rect x="1178.5" y="195.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.5" y="206.0"></text>
</g>
<g>
<title>BuildCutout::BuildCutout(GraphKit*, Node*, float, float) (1 samples, 0.09%)</title><rect x="1178.5" y="179.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.5" y="190.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.09%)</title><rect x="1178.5" y="163.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.5" y="174.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.09%)</title><rect x="1178.5" y="147.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.5" y="158.0"></text>
</g>
<g>
<title>ReplacedNodes::clone() (1 samples, 0.09%)</title><rect x="1178.5" y="131.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.5" y="142.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="1178.5" y="115.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.5" y="126.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.09%)</title><rect x="1179.6" y="531.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.6" y="542.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1179.6" y="515.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.6" y="526.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1179.6" y="499.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.6" y="510.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1179.6" y="483.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.6" y="494.0"></text>
</g>
<g>
<title>Conv2BNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1179.6" y="467.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.6" y="478.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (2 samples, 0.18%)</title><rect x="1180.6" y="675.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.6" y="686.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1181.7" y="659.0" width="1.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1184.7" y="670.0"></text>
</g>
<g>
<title>Type::Initialize(Compile*) (1 samples, 0.09%)</title><rect x="1182.7" y="675.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.7" y="686.0"></text>
</g>
<g>
<title>TypeAry::hash() const (1 samples, 0.09%)</title><rect x="1182.7" y="659.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.7" y="670.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.09%)</title><rect x="1183.7" y="675.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.7" y="686.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.09%)</title><rect x="1183.7" y="659.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.7" y="670.0"></text>
</g>
<g>
<title>CodeBuffer::finalize_oop_references(methodHandle) (1 samples, 0.09%)</title><rect x="1183.7" y="643.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.7" y="654.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.18%)</title><rect x="1184.8" y="707.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.8" y="718.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.18%)</title><rect x="1184.8" y="691.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.8" y="702.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.18%)</title><rect x="1184.8" y="675.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.8" y="686.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.18%)</title><rect x="1184.8" y="659.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.8" y="670.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.09%)</title><rect x="1184.8" y="643.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.8" y="654.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1184.8" y="627.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.8" y="638.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.09%)</title><rect x="1184.8" y="611.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.8" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.09%)</title><rect x="1184.8" y="595.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.8" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.09%)</title><rect x="1184.8" y="579.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.8" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.09%)</title><rect x="1184.8" y="563.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.8" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1184.8" y="547.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.8" y="558.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.09%)</title><rect x="1184.8" y="531.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.8" y="542.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1184.8" y="515.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.8" y="526.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1184.8" y="499.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.8" y="510.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1184.8" y="483.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.8" y="494.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1184.8" y="467.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.8" y="478.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1184.8" y="451.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.8" y="462.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.09%)</title><rect x="1184.8" y="435.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.8" y="446.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.09%)</title><rect x="1185.8" y="643.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.8" y="654.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.27%)</title><rect x="1186.9" y="771.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.9" y="782.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.27%)</title><rect x="1186.9" y="755.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.9" y="766.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (3 samples, 0.27%)</title><rect x="1186.9" y="739.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.9" y="750.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.09%)</title><rect x="1189.0" y="723.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1192.0" y="734.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.09%)</title><rect x="1189.0" y="707.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1192.0" y="718.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1189.0" y="691.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.0" y="702.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1189.0" y="675.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.0" y="686.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="1189.0" y="659.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1192.0" y="670.0"></text>
</g>
</g>
</svg>
