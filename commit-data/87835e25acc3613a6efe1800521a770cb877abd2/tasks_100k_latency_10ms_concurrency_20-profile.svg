<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1782" onload="init(evt)" viewBox="0 0 1200 1782" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1765"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1765"> </text>
<g id="frames">
<g>
<title>all (329 samples, 100.00%)</title><rect x="10.0" y="1731.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1742.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (26 samples, 7.90%)</title><rect x="10.0" y="1715.0" width="93.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1726.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.30%)</title><rect x="10.0" y="1699.0" width="3.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (1 samples, 0.30%)</title><rect x="10.0" y="1683.0" width="3.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.30%)</title><rect x="10.0" y="1667.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.30%)</title><rect x="10.0" y="1651.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.30%)</title><rect x="10.0" y="1635.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.30%)</title><rect x="10.0" y="1619.0" width="3.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.30%)</title><rect x="10.0" y="1603.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.requestIterator (1 samples, 0.30%)</title><rect x="10.0" y="1587.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.iterator (1 samples, 0.30%)</title><rect x="10.0" y="1571.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.&lt;init&gt; (1 samples, 0.30%)</title><rect x="10.0" y="1555.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.advance (1 samples, 0.30%)</title><rect x="10.0" y="1539.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (25 samples, 7.60%)</title><rect x="13.6" y="1699.0" width="89.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.6" y="1710.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.30%)</title><rect x="13.6" y="1683.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.6" y="1694.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (1 samples, 0.30%)</title><rect x="13.6" y="1667.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.6" y="1678.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (1 samples, 0.30%)</title><rect x="17.2" y="1683.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.2" y="1694.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (1 samples, 0.30%)</title><rect x="17.2" y="1667.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="20.2" y="1678.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.30%)</title><rect x="17.2" y="1651.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.2" y="1662.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$270/734103461.accept (1 samples, 0.30%)</title><rect x="17.2" y="1635.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.2" y="1646.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (1 samples, 0.30%)</title><rect x="17.2" y="1619.0" width="3.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="20.2" y="1630.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.30%)</title><rect x="17.2" y="1603.0" width="3.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="20.2" y="1614.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.30%)</title><rect x="17.2" y="1587.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.2" y="1598.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (8 samples, 2.43%)</title><rect x="20.8" y="1683.0" width="28.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="23.8" y="1694.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$269/1821222865.accept (7 samples, 2.13%)</title><rect x="24.3" y="1667.0" width="25.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="27.3" y="1678.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (7 samples, 2.13%)</title><rect x="24.3" y="1651.0" width="25.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="27.3" y="1662.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (5 samples, 1.52%)</title><rect x="24.3" y="1635.0" width="18.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="27.3" y="1646.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (5 samples, 1.52%)</title><rect x="24.3" y="1619.0" width="18.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="27.3" y="1630.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (5 samples, 1.52%)</title><rect x="24.3" y="1603.0" width="18.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="27.3" y="1614.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (5 samples, 1.52%)</title><rect x="24.3" y="1587.0" width="18.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="27.3" y="1598.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (5 samples, 1.52%)</title><rect x="24.3" y="1571.0" width="18.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.3" y="1582.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (5 samples, 1.52%)</title><rect x="24.3" y="1555.0" width="18.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="27.3" y="1566.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.30%)</title><rect x="35.1" y="1539.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="38.1" y="1550.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.30%)</title><rect x="35.1" y="1523.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="38.1" y="1534.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.30%)</title><rect x="35.1" y="1507.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="38.1" y="1518.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.30%)</title><rect x="38.7" y="1539.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="41.7" y="1550.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.30%)</title><rect x="38.7" y="1523.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="41.7" y="1534.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.30%)</title><rect x="38.7" y="1507.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="41.7" y="1518.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/TaskRequest.&lt;init&gt; (2 samples, 0.61%)</title><rect x="42.3" y="1635.0" width="7.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="45.3" y="1646.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.61%)</title><rect x="42.3" y="1619.0" width="7.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="45.3" y="1630.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (15 samples, 4.56%)</title><rect x="49.5" y="1683.0" width="53.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="52.5" y="1694.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (15 samples, 4.56%)</title><rect x="49.5" y="1667.0" width="53.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="52.5" y="1678.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (11 samples, 3.34%)</title><rect x="49.5" y="1651.0" width="39.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="52.5" y="1662.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 1.52%)</title><rect x="49.5" y="1635.0" width="17.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="52.5" y="1646.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 1.52%)</title><rect x="49.5" y="1619.0" width="17.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="52.5" y="1630.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.61%)</title><rect x="49.5" y="1603.0" width="7.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="52.5" y="1614.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.61%)</title><rect x="49.5" y="1587.0" width="7.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="52.5" y="1598.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.30%)</title><rect x="49.5" y="1571.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="52.5" y="1582.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.30%)</title><rect x="53.0" y="1571.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="56.0" y="1582.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.30%)</title><rect x="53.0" y="1555.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="56.0" y="1566.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.30%)</title><rect x="53.0" y="1539.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="56.0" y="1550.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.30%)</title><rect x="53.0" y="1523.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="56.0" y="1534.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.30%)</title><rect x="53.0" y="1507.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="56.0" y="1518.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.30%)</title><rect x="53.0" y="1491.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="56.0" y="1502.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.30%)</title><rect x="53.0" y="1475.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="56.0" y="1486.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.30%)</title><rect x="53.0" y="1459.0" width="3.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="56.0" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$262/1440608600.shouldBlock (1 samples, 0.30%)</title><rect x="56.6" y="1603.0" width="3.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="59.6" y="1614.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.checkDisconnects (1 samples, 0.30%)</title><rect x="60.2" y="1603.0" width="3.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="63.2" y="1614.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$BaseIterator.hasNext (1 samples, 0.30%)</title><rect x="60.2" y="1587.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="63.2" y="1598.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.30%)</title><rect x="63.8" y="1603.0" width="3.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="66.8" y="1614.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.30%)</title><rect x="63.8" y="1587.0" width="3.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="66.8" y="1598.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.30%)</title><rect x="63.8" y="1571.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="66.8" y="1582.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.30%)</title><rect x="63.8" y="1555.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="66.8" y="1566.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.30%)</title><rect x="63.8" y="1539.0" width="3.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="66.8" y="1550.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.30%)</title><rect x="63.8" y="1523.0" width="3.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="66.8" y="1534.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.30%)</title><rect x="63.8" y="1507.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="66.8" y="1518.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.30%)</title><rect x="63.8" y="1491.0" width="3.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="66.8" y="1502.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.30%)</title><rect x="63.8" y="1475.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="66.8" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.validate (1 samples, 0.30%)</title><rect x="63.8" y="1459.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="66.8" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (5 samples, 1.52%)</title><rect x="67.4" y="1635.0" width="17.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="70.4" y="1646.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 1.22%)</title><rect x="71.0" y="1619.0" width="14.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="74.0" y="1630.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (2 samples, 0.61%)</title><rect x="71.0" y="1603.0" width="7.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="74.0" y="1614.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 0.61%)</title><rect x="71.0" y="1587.0" width="7.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="74.0" y="1598.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.30%)</title><rect x="71.0" y="1571.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="74.0" y="1582.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.30%)</title><rect x="71.0" y="1555.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="74.0" y="1566.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.30%)</title><rect x="71.0" y="1539.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="74.0" y="1550.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.30%)</title><rect x="71.0" y="1523.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="74.0" y="1534.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.30%)</title><rect x="71.0" y="1507.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="74.0" y="1518.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.30%)</title><rect x="71.0" y="1491.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="74.0" y="1502.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.30%)</title><rect x="71.0" y="1475.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="74.0" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.30%)</title><rect x="71.0" y="1459.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="74.0" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.30%)</title><rect x="74.6" y="1571.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="77.6" y="1582.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.30%)</title><rect x="74.6" y="1555.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="77.6" y="1566.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.30%)</title><rect x="74.6" y="1539.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="77.6" y="1550.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.30%)</title><rect x="74.6" y="1523.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="77.6" y="1534.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.61%)</title><rect x="78.1" y="1603.0" width="7.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="81.1" y="1614.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.61%)</title><rect x="78.1" y="1587.0" width="7.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="81.1" y="1598.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.30%)</title><rect x="78.1" y="1571.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="81.1" y="1582.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.30%)</title><rect x="78.1" y="1555.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="81.1" y="1566.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.30%)</title><rect x="81.7" y="1571.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="84.7" y="1582.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.30%)</title><rect x="81.7" y="1555.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="84.7" y="1566.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.30%)</title><rect x="81.7" y="1539.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="84.7" y="1550.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.30%)</title><rect x="81.7" y="1523.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="84.7" y="1534.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.30%)</title><rect x="81.7" y="1507.0" width="3.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="84.7" y="1518.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.30%)</title><rect x="85.3" y="1635.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="88.3" y="1646.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.30%)</title><rect x="85.3" y="1619.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="88.3" y="1630.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.61%)</title><rect x="88.9" y="1651.0" width="7.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="91.9" y="1662.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.61%)</title><rect x="88.9" y="1635.0" width="7.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="91.9" y="1646.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.61%)</title><rect x="88.9" y="1619.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="91.9" y="1630.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.30%)</title><rect x="88.9" y="1603.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="91.9" y="1614.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.30%)</title><rect x="88.9" y="1587.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="91.9" y="1598.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.30%)</title><rect x="88.9" y="1571.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="91.9" y="1582.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.30%)</title><rect x="88.9" y="1555.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="91.9" y="1566.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.30%)</title><rect x="88.9" y="1539.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="91.9" y="1550.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.forEachRemaining (1 samples, 0.30%)</title><rect x="88.9" y="1523.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="91.9" y="1534.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.30%)</title><rect x="92.5" y="1603.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="95.5" y="1614.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.30%)</title><rect x="92.5" y="1587.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="95.5" y="1598.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.30%)</title><rect x="96.1" y="1651.0" width="3.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="99.1" y="1662.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.30%)</title><rect x="96.1" y="1635.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="99.1" y="1646.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.30%)</title><rect x="96.1" y="1619.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="99.1" y="1630.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.30%)</title><rect x="96.1" y="1603.0" width="3.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="99.1" y="1614.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesSent (1 samples, 0.30%)</title><rect x="96.1" y="1587.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="99.1" y="1598.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.30%)</title><rect x="96.1" y="1571.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="99.1" y="1582.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.30%)</title><rect x="96.1" y="1555.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="99.1" y="1566.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.30%)</title><rect x="99.7" y="1651.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="102.7" y="1662.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.30%)</title><rect x="99.7" y="1635.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="102.7" y="1646.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.30%)</title><rect x="99.7" y="1619.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="102.7" y="1630.0"></text>
</g>
<g>
<title>java/lang/Thread.run (203 samples, 61.70%)</title><rect x="103.3" y="1715.0" width="728.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="106.3" y="1726.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (203 samples, 61.70%)</title><rect x="103.3" y="1699.0" width="728.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="106.3" y="1710.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (203 samples, 61.70%)</title><rect x="103.3" y="1683.0" width="728.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="106.3" y="1694.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$285/1133491195.run (193 samples, 58.66%)</title><rect x="103.3" y="1667.0" width="692.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="106.3" y="1678.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$285/1133491195.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$70 (193 samples, 58.66%)</title><rect x="103.3" y="1651.0" width="692.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="106.3" y="1662.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$70</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (193 samples, 58.66%)</title><rect x="103.3" y="1635.0" width="692.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="106.3" y="1646.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (189 samples, 57.45%)</title><rect x="103.3" y="1619.0" width="677.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="106.3" y="1630.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (40 samples, 12.16%)</title><rect x="121.2" y="1603.0" width="143.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="124.2" y="1614.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$42/815674463.extract (40 samples, 12.16%)</title><rect x="121.2" y="1587.0" width="143.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="124.2" y="1598.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (40 samples, 12.16%)</title><rect x="121.2" y="1571.0" width="143.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="124.2" y="1582.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (40 samples, 12.16%)</title><rect x="121.2" y="1555.0" width="143.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="124.2" y="1566.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (40 samples, 12.16%)</title><rect x="121.2" y="1539.0" width="143.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="124.2" y="1550.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (40 samples, 12.16%)</title><rect x="121.2" y="1523.0" width="143.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="124.2" y="1534.0">com/fasterxml/jack..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (19 samples, 5.78%)</title><rect x="121.2" y="1507.0" width="68.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="124.2" y="1518.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (6 samples, 1.82%)</title><rect x="142.7" y="1491.0" width="21.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="145.7" y="1502.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (5 samples, 1.52%)</title><rect x="142.7" y="1475.0" width="17.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="145.7" y="1486.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.30%)</title><rect x="146.3" y="1459.0" width="3.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="149.3" y="1470.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.30%)</title><rect x="146.3" y="1443.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="149.3" y="1454.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.30%)</title><rect x="146.3" y="1427.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="149.3" y="1438.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.30%)</title><rect x="146.3" y="1411.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="149.3" y="1422.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.30%)</title><rect x="146.3" y="1395.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="149.3" y="1406.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.30%)</title><rect x="146.3" y="1379.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="149.3" y="1390.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (3 samples, 0.91%)</title><rect x="149.9" y="1459.0" width="10.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="152.9" y="1470.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.91%)</title><rect x="149.9" y="1443.0" width="10.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="152.9" y="1454.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.91%)</title><rect x="149.9" y="1427.0" width="10.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="152.9" y="1438.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.91%)</title><rect x="149.9" y="1411.0" width="10.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="152.9" y="1422.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.91%)</title><rect x="149.9" y="1395.0" width="10.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="152.9" y="1406.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.30%)</title><rect x="160.6" y="1475.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="163.6" y="1486.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (7 samples, 2.13%)</title><rect x="164.2" y="1491.0" width="25.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="167.2" y="1502.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (5 samples, 1.52%)</title><rect x="171.4" y="1475.0" width="17.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="174.4" y="1486.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (3 samples, 0.91%)</title><rect x="171.4" y="1459.0" width="10.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="174.4" y="1470.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.30%)</title><rect x="171.4" y="1443.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="174.4" y="1454.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.30%)</title><rect x="171.4" y="1427.0" width="3.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="174.4" y="1438.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.30%)</title><rect x="171.4" y="1411.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="174.4" y="1422.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.30%)</title><rect x="171.4" y="1395.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="174.4" y="1406.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.30%)</title><rect x="171.4" y="1379.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="174.4" y="1390.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 0.61%)</title><rect x="175.0" y="1443.0" width="7.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="178.0" y="1454.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.30%)</title><rect x="182.2" y="1459.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="185.2" y="1470.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.30%)</title><rect x="182.2" y="1443.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="185.2" y="1454.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.30%)</title><rect x="182.2" y="1427.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="185.2" y="1438.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.30%)</title><rect x="182.2" y="1411.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="185.2" y="1422.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.30%)</title><rect x="182.2" y="1395.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="185.2" y="1406.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.30%)</title><rect x="182.2" y="1379.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="185.2" y="1390.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.30%)</title><rect x="185.7" y="1459.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="188.7" y="1470.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.30%)</title><rect x="185.7" y="1443.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="188.7" y="1454.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.30%)</title><rect x="185.7" y="1427.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="188.7" y="1438.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (17 samples, 5.17%)</title><rect x="189.3" y="1507.0" width="61.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="192.3" y="1518.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (3 samples, 0.91%)</title><rect x="189.3" y="1491.0" width="10.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="192.3" y="1502.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.30%)</title><rect x="196.5" y="1475.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="199.5" y="1486.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.61%)</title><rect x="200.1" y="1491.0" width="7.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="203.1" y="1502.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.61%)</title><rect x="200.1" y="1475.0" width="7.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="203.1" y="1486.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.30%)</title><rect x="203.7" y="1459.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="206.7" y="1470.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.30%)</title><rect x="203.7" y="1443.0" width="3.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="206.7" y="1454.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.30%)</title><rect x="203.7" y="1427.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="206.7" y="1438.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.30%)</title><rect x="203.7" y="1411.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="206.7" y="1422.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.30%)</title><rect x="203.7" y="1395.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="206.7" y="1406.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (12 samples, 3.65%)</title><rect x="207.3" y="1491.0" width="43.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="210.3" y="1502.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.61%)</title><rect x="207.3" y="1475.0" width="7.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="210.3" y="1486.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.30%)</title><rect x="207.3" y="1459.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="210.3" y="1470.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.30%)</title><rect x="207.3" y="1443.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="210.3" y="1454.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.30%)</title><rect x="207.3" y="1427.0" width="3.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="210.3" y="1438.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.30%)</title><rect x="207.3" y="1411.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="210.3" y="1422.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.30%)</title><rect x="210.9" y="1459.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="213.9" y="1470.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (10 samples, 3.04%)</title><rect x="214.4" y="1475.0" width="35.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="217.4" y="1486.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (10 samples, 3.04%)</title><rect x="214.4" y="1459.0" width="35.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="217.4" y="1470.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (10 samples, 3.04%)</title><rect x="214.4" y="1443.0" width="35.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="217.4" y="1454.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.91%)</title><rect x="221.6" y="1427.0" width="10.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="224.6" y="1438.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.30%)</title><rect x="221.6" y="1411.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="224.6" y="1422.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.30%)</title><rect x="221.6" y="1395.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="224.6" y="1406.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.30%)</title><rect x="221.6" y="1379.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="224.6" y="1390.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.30%)</title><rect x="225.2" y="1411.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="228.2" y="1422.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.30%)</title><rect x="225.2" y="1395.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="228.2" y="1406.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.30%)</title><rect x="225.2" y="1379.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="228.2" y="1390.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.30%)</title><rect x="228.8" y="1411.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="231.8" y="1422.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (3 samples, 0.91%)</title><rect x="232.4" y="1427.0" width="10.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="235.4" y="1438.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (3 samples, 0.91%)</title><rect x="232.4" y="1411.0" width="10.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="235.4" y="1422.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (3 samples, 0.91%)</title><rect x="232.4" y="1395.0" width="10.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="235.4" y="1406.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (3 samples, 0.91%)</title><rect x="232.4" y="1379.0" width="10.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="235.4" y="1390.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (3 samples, 0.91%)</title><rect x="232.4" y="1363.0" width="10.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="235.4" y="1374.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.30%)</title><rect x="232.4" y="1347.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="235.4" y="1358.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (1 samples, 0.30%)</title><rect x="232.4" y="1331.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="235.4" y="1342.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (1 samples, 0.30%)</title><rect x="236.0" y="1347.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="239.0" y="1358.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.30%)</title><rect x="239.5" y="1347.0" width="3.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="242.5" y="1358.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.61%)</title><rect x="243.1" y="1427.0" width="7.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="246.1" y="1438.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.61%)</title><rect x="243.1" y="1411.0" width="7.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="246.1" y="1422.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.61%)</title><rect x="243.1" y="1395.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="246.1" y="1406.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (4 samples, 1.22%)</title><rect x="250.3" y="1507.0" width="14.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="253.3" y="1518.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.30%)</title><rect x="253.9" y="1491.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="256.9" y="1502.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.61%)</title><rect x="257.5" y="1491.0" width="7.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="260.5" y="1502.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.61%)</title><rect x="257.5" y="1475.0" width="7.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="260.5" y="1486.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.61%)</title><rect x="257.5" y="1459.0" width="7.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="260.5" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.61%)</title><rect x="257.5" y="1443.0" width="7.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="260.5" y="1454.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (129 samples, 39.21%)</title><rect x="264.7" y="1603.0" width="462.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="267.7" y="1614.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline...</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (28 samples, 8.51%)</title><rect x="264.7" y="1587.0" width="100.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="267.7" y="1598.0">com/linecorp..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (24 samples, 7.29%)</title><rect x="279.0" y="1571.0" width="86.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="282.0" y="1582.0">org/slf4j/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (18 samples, 5.47%)</title><rect x="300.5" y="1555.0" width="64.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="303.5" y="1566.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 1.22%)</title><rect x="304.1" y="1539.0" width="14.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="307.1" y="1550.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 1.22%)</title><rect x="304.1" y="1523.0" width="14.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="307.1" y="1534.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (4 samples, 1.22%)</title><rect x="304.1" y="1507.0" width="14.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="307.1" y="1518.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 1.22%)</title><rect x="304.1" y="1491.0" width="14.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="307.1" y="1502.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.61%)</title><rect x="318.4" y="1539.0" width="7.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="321.4" y="1550.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.61%)</title><rect x="318.4" y="1523.0" width="7.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="321.4" y="1534.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.61%)</title><rect x="318.4" y="1507.0" width="7.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="321.4" y="1518.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.61%)</title><rect x="318.4" y="1491.0" width="7.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="321.4" y="1502.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.61%)</title><rect x="318.4" y="1475.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="321.4" y="1486.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (11 samples, 3.34%)</title><rect x="325.6" y="1539.0" width="39.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="328.6" y="1550.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (10 samples, 3.04%)</title><rect x="329.2" y="1523.0" width="35.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="332.2" y="1534.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (7 samples, 2.13%)</title><rect x="340.0" y="1507.0" width="25.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="343.0" y="1518.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.30%)</title><rect x="365.1" y="1587.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="368.1" y="1598.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.30%)</title><rect x="365.1" y="1571.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="368.1" y="1582.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.30%)</title><rect x="365.1" y="1555.0" width="3.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="368.1" y="1566.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (21 samples, 6.38%)</title><rect x="368.7" y="1587.0" width="75.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="371.7" y="1598.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (21 samples, 6.38%)</title><rect x="368.7" y="1571.0" width="75.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="371.7" y="1582.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (6 samples, 1.82%)</title><rect x="375.8" y="1555.0" width="21.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="378.8" y="1566.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 1.52%)</title><rect x="379.4" y="1539.0" width="18.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="382.4" y="1550.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 1.52%)</title><rect x="379.4" y="1523.0" width="18.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="382.4" y="1534.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 0.91%)</title><rect x="379.4" y="1507.0" width="10.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="382.4" y="1518.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (3 samples, 0.91%)</title><rect x="379.4" y="1491.0" width="10.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="382.4" y="1502.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.91%)</title><rect x="379.4" y="1475.0" width="10.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="382.4" y="1486.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.91%)</title><rect x="379.4" y="1459.0" width="10.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="382.4" y="1470.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.30%)</title><rect x="383.0" y="1443.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="386.0" y="1454.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.30%)</title><rect x="383.0" y="1427.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="386.0" y="1438.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.30%)</title><rect x="386.6" y="1443.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="389.6" y="1454.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.30%)</title><rect x="386.6" y="1427.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="389.6" y="1438.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.30%)</title><rect x="386.6" y="1411.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="389.6" y="1422.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.61%)</title><rect x="390.2" y="1507.0" width="7.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="393.2" y="1518.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (13 samples, 3.95%)</title><rect x="397.4" y="1555.0" width="46.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="400.4" y="1566.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (12 samples, 3.65%)</title><rect x="400.9" y="1539.0" width="43.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="403.9" y="1550.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.30%)</title><rect x="400.9" y="1523.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="403.9" y="1534.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.30%)</title><rect x="400.9" y="1507.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="403.9" y="1518.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.30%)</title><rect x="400.9" y="1491.0" width="3.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="403.9" y="1502.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.30%)</title><rect x="400.9" y="1475.0" width="3.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="403.9" y="1486.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (11 samples, 3.34%)</title><rect x="404.5" y="1523.0" width="39.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="407.5" y="1534.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.put (11 samples, 3.34%)</title><rect x="404.5" y="1507.0" width="39.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="407.5" y="1518.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.putVal (8 samples, 2.43%)</title><rect x="415.3" y="1491.0" width="28.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="418.3" y="1502.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.newNode (3 samples, 0.91%)</title><rect x="433.2" y="1475.0" width="10.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="436.2" y="1486.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.30%)</title><rect x="440.4" y="1459.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="443.4" y="1470.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.30%)</title><rect x="440.4" y="1443.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="443.4" y="1454.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.30%)</title><rect x="440.4" y="1427.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="443.4" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (69 samples, 20.97%)</title><rect x="444.0" y="1587.0" width="247.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="447.0" y="1598.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (69 samples, 20.97%)</title><rect x="444.0" y="1571.0" width="247.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="447.0" y="1582.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$207/1384629197.process (58 samples, 17.63%)</title><rect x="458.3" y="1555.0" width="208.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="461.3" y="1566.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (58 samples, 17.63%)</title><rect x="458.3" y="1539.0" width="208.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="461.3" y="1550.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (57 samples, 17.33%)</title><rect x="461.9" y="1523.0" width="204.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="464.9" y="1534.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.61%)</title><rect x="461.9" y="1507.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="464.9" y="1518.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.61%)</title><rect x="461.9" y="1491.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="464.9" y="1502.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.61%)</title><rect x="461.9" y="1475.0" width="7.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="464.9" y="1486.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.30%)</title><rect x="465.5" y="1459.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="468.5" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.30%)</title><rect x="465.5" y="1443.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="468.5" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.30%)</title><rect x="465.5" y="1427.0" width="3.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="468.5" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (53 samples, 16.11%)</title><rect x="469.1" y="1507.0" width="190.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="472.1" y="1518.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>java/lang/Thread.sleep (52 samples, 15.81%)</title><rect x="469.1" y="1491.0" width="186.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="472.1" y="1502.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (47 samples, 14.29%)</title><rect x="487.0" y="1475.0" width="168.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="490.0" y="1486.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.61%)</title><rect x="501.4" y="1459.0" width="7.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="504.4" y="1470.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.61%)</title><rect x="508.5" y="1459.0" width="7.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="511.5" y="1470.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.30%)</title><rect x="512.1" y="1443.0" width="3.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="515.1" y="1454.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.91%)</title><rect x="515.7" y="1459.0" width="10.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="518.7" y="1470.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.61%)</title><rect x="526.5" y="1459.0" width="7.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="529.5" y="1470.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (34 samples, 10.33%)</title><rect x="533.6" y="1459.0" width="122.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="536.6" y="1470.0">os::sleep(Threa..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.91%)</title><rect x="551.6" y="1443.0" width="10.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="554.6" y="1454.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.61%)</title><rect x="555.2" y="1427.0" width="7.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="558.2" y="1438.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.61%)</title><rect x="562.3" y="1443.0" width="7.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="565.3" y="1454.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.61%)</title><rect x="562.3" y="1427.0" width="7.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="565.3" y="1438.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.30%)</title><rect x="569.5" y="1443.0" width="3.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="572.5" y="1454.0"></text>
</g>
<g>
<title>__pthread_cond_init (1 samples, 0.30%)</title><rect x="573.1" y="1443.0" width="3.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="576.1" y="1454.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (9 samples, 2.74%)</title><rect x="576.7" y="1443.0" width="32.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="579.7" y="1454.0">__..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.61%)</title><rect x="609.0" y="1443.0" width="7.1" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="612.0" y="1454.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.61%)</title><rect x="616.1" y="1443.0" width="7.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="619.1" y="1454.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (4 samples, 1.22%)</title><rect x="623.3" y="1443.0" width="14.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="626.3" y="1454.0"></text>
</g>
<g>
<title>pthread_cond_destroy@@GLIBC_2.3.2 (2 samples, 0.61%)</title><rect x="637.7" y="1443.0" width="7.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="640.7" y="1454.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.30%)</title><rect x="644.8" y="1443.0" width="3.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="647.8" y="1454.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.61%)</title><rect x="648.4" y="1443.0" width="7.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="651.4" y="1454.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.30%)</title><rect x="655.6" y="1491.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="658.6" y="1502.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.30%)</title><rect x="655.6" y="1475.0" width="3.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="658.6" y="1486.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.61%)</title><rect x="659.2" y="1507.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="662.2" y="1518.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.61%)</title><rect x="666.4" y="1555.0" width="7.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="669.4" y="1566.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.61%)</title><rect x="666.4" y="1539.0" width="7.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="669.4" y="1550.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/789653861.linkToTargetMethod (1 samples, 0.30%)</title><rect x="673.5" y="1555.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="676.5" y="1566.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (1 samples, 0.30%)</title><rect x="673.5" y="1539.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="676.5" y="1550.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$291/436524348.get$Lambda (1 samples, 0.30%)</title><rect x="673.5" y="1523.0" width="3.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="676.5" y="1534.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.61%)</title><rect x="677.1" y="1555.0" width="7.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="680.1" y="1566.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.61%)</title><rect x="677.1" y="1539.0" width="7.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="680.1" y="1550.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.61%)</title><rect x="677.1" y="1523.0" width="7.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="680.1" y="1534.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.30%)</title><rect x="684.3" y="1555.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="687.3" y="1566.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.30%)</title><rect x="684.3" y="1539.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="687.3" y="1550.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.30%)</title><rect x="687.9" y="1555.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="690.9" y="1566.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.30%)</title><rect x="687.9" y="1539.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="690.9" y="1550.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.30%)</title><rect x="687.9" y="1523.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="690.9" y="1534.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.30%)</title><rect x="687.9" y="1507.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="690.9" y="1518.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.30%)</title><rect x="687.9" y="1491.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="690.9" y="1502.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.30%)</title><rect x="687.9" y="1475.0" width="3.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="690.9" y="1486.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.30%)</title><rect x="687.9" y="1459.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="690.9" y="1470.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.30%)</title><rect x="687.9" y="1443.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="690.9" y="1454.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.30%)</title><rect x="687.9" y="1427.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="690.9" y="1438.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.30%)</title><rect x="687.9" y="1411.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="690.9" y="1422.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.30%)</title><rect x="687.9" y="1395.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="690.9" y="1406.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/636943912.linkToTargetMethod (1 samples, 0.30%)</title><rect x="691.5" y="1587.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="694.5" y="1598.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/399931359.invokeStatic_L3_L (1 samples, 0.30%)</title><rect x="691.5" y="1571.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="694.5" y="1582.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$294/1015228796.get$Lambda (1 samples, 0.30%)</title><rect x="691.5" y="1555.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="694.5" y="1566.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.30%)</title><rect x="691.5" y="1539.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="694.5" y="1550.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.30%)</title><rect x="691.5" y="1523.0" width="3.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="694.5" y="1534.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.30%)</title><rect x="691.5" y="1507.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="694.5" y="1518.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (9 samples, 2.74%)</title><rect x="695.0" y="1587.0" width="32.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="698.0" y="1598.0">ja..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.61%)</title><rect x="716.6" y="1571.0" width="7.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="719.6" y="1582.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.30%)</title><rect x="720.2" y="1555.0" width="3.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="723.2" y="1566.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.30%)</title><rect x="723.7" y="1571.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="726.7" y="1582.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.30%)</title><rect x="723.7" y="1555.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="726.7" y="1566.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$294/1015228796.accept (1 samples, 0.30%)</title><rect x="723.7" y="1539.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="726.7" y="1550.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$62 (1 samples, 0.30%)</title><rect x="723.7" y="1523.0" width="3.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="726.7" y="1534.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.30%)</title><rect x="723.7" y="1507.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="726.7" y="1518.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.30%)</title><rect x="723.7" y="1491.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="726.7" y="1502.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (14 samples, 4.26%)</title><rect x="727.3" y="1603.0" width="50.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="730.3" y="1614.0">java/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (1 samples, 0.30%)</title><rect x="734.5" y="1587.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="737.5" y="1598.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (11 samples, 3.34%)</title><rect x="738.1" y="1587.0" width="39.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="741.1" y="1598.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (11 samples, 3.34%)</title><rect x="738.1" y="1571.0" width="39.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="741.1" y="1582.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$297/1466843995.accept (11 samples, 3.34%)</title><rect x="738.1" y="1555.0" width="39.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="741.1" y="1566.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$61 (11 samples, 3.34%)</title><rect x="738.1" y="1539.0" width="39.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="741.1" y="1550.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$283/201068628.complete (11 samples, 3.34%)</title><rect x="738.1" y="1523.0" width="39.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="741.1" y="1534.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$38 (11 samples, 3.34%)</title><rect x="738.1" y="1507.0" width="39.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="741.1" y="1518.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$282/2068786222.complete (11 samples, 3.34%)</title><rect x="738.1" y="1491.0" width="39.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="741.1" y="1502.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$68 (11 samples, 3.34%)</title><rect x="738.1" y="1475.0" width="39.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="741.1" y="1486.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (11 samples, 3.34%)</title><rect x="738.1" y="1459.0" width="39.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="741.1" y="1470.0">com..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (11 samples, 3.34%)</title><rect x="738.1" y="1443.0" width="39.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="741.1" y="1454.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (11 samples, 3.34%)</title><rect x="738.1" y="1427.0" width="39.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="741.1" y="1438.0">ch/..</text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.30%)</title><rect x="777.5" y="1603.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="780.5" y="1614.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.30%)</title><rect x="777.5" y="1587.0" width="3.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="780.5" y="1598.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (4 samples, 1.22%)</title><rect x="781.1" y="1619.0" width="14.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="784.1" y="1630.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.30%)</title><rect x="795.5" y="1667.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="798.5" y="1678.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (3 samples, 0.91%)</title><rect x="799.1" y="1667.0" width="10.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="802.1" y="1678.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.91%)</title><rect x="799.1" y="1651.0" width="10.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="802.1" y="1662.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.91%)</title><rect x="799.1" y="1635.0" width="10.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="802.1" y="1646.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.91%)</title><rect x="799.1" y="1619.0" width="10.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="802.1" y="1630.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (6 samples, 1.82%)</title><rect x="809.8" y="1667.0" width="21.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="812.8" y="1678.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (6 samples, 1.82%)</title><rect x="809.8" y="1651.0" width="21.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="812.8" y="1662.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (4 samples, 1.22%)</title><rect x="809.8" y="1635.0" width="14.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="812.8" y="1646.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (4 samples, 1.22%)</title><rect x="809.8" y="1619.0" width="14.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="812.8" y="1630.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 1.22%)</title><rect x="809.8" y="1603.0" width="14.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="812.8" y="1614.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.61%)</title><rect x="824.2" y="1635.0" width="7.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="827.2" y="1646.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.61%)</title><rect x="824.2" y="1619.0" width="7.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="827.2" y="1630.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.61%)</title><rect x="824.2" y="1603.0" width="7.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="827.2" y="1614.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.61%)</title><rect x="824.2" y="1587.0" width="7.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="827.2" y="1598.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.30%)</title><rect x="831.3" y="1715.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="834.3" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.access$2200 (1 samples, 0.30%)</title><rect x="831.3" y="1699.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="834.3" y="1710.0"></text>
</g>
<g>
<title>start_thread (99 samples, 30.09%)</title><rect x="834.9" y="1715.0" width="355.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="837.9" y="1726.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (99 samples, 30.09%)</title><rect x="834.9" y="1699.0" width="355.1" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="837.9" y="1710.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (15 samples, 4.56%)</title><rect x="834.9" y="1683.0" width="53.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="837.9" y="1694.0">GangW..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.30%)</title><rect x="834.9" y="1667.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="837.9" y="1678.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.30%)</title><rect x="834.9" y="1651.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="837.9" y="1662.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.30%)</title><rect x="834.9" y="1635.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="837.9" y="1646.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::peek() (1 samples, 0.30%)</title><rect x="834.9" y="1619.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="837.9" y="1630.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (14 samples, 4.26%)</title><rect x="838.5" y="1667.0" width="50.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="841.5" y="1678.0">G1Par..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (14 samples, 4.26%)</title><rect x="838.5" y="1651.0" width="50.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="841.5" y="1662.0">G1Par..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.30%)</title><rect x="838.5" y="1635.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="841.5" y="1646.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (13 samples, 3.95%)</title><rect x="842.1" y="1635.0" width="46.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="845.1" y="1646.0">G1Pa..</text>
</g>
<g>
<title>G1DefaultParGCAllocator::alloc_buffer(InCSetState, unsigned char) (1 samples, 0.30%)</title><rect x="856.4" y="1619.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="859.4" y="1630.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (8 samples, 2.43%)</title><rect x="860.0" y="1619.0" width="28.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="863.0" y="1630.0">G1..</text>
</g>
<g>
<title>G1ParGCAllocator::allocate_direct_or_new_plab(InCSetState, unsigned long, unsigned char) (1 samples, 0.30%)</title><rect x="878.0" y="1603.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="881.0" y="1614.0"></text>
</g>
<g>
<title>G1ParGCAllocBuffer::retire(bool, bool) (1 samples, 0.30%)</title><rect x="878.0" y="1587.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="881.0" y="1598.0"></text>
</g>
<g>
<title>ParGCAllocBuffer::retire(bool, bool) (1 samples, 0.30%)</title><rect x="878.0" y="1571.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="881.0" y="1582.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (2 samples, 0.61%)</title><rect x="881.6" y="1603.0" width="7.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="884.6" y="1614.0"></text>
</g>
<g>
<title>JavaThread::run() (84 samples, 25.53%)</title><rect x="888.7" y="1683.0" width="301.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="891.7" y="1694.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (84 samples, 25.53%)</title><rect x="888.7" y="1667.0" width="301.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="891.7" y="1678.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (84 samples, 25.53%)</title><rect x="888.7" y="1651.0" width="301.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="891.7" y="1662.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (83 samples, 25.23%)</title><rect x="888.7" y="1635.0" width="297.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="891.7" y="1646.0">CompileBroker::invoke_compiler_on_method..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (78 samples, 23.71%)</title><rect x="888.7" y="1619.0" width="279.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="891.7" y="1630.0">C2Compiler::compile_method(ciEnv*, ci..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (78 samples, 23.71%)</title><rect x="888.7" y="1603.0" width="279.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="891.7" y="1614.0">Compile::Compile(ciEnv*, C2Compiler*,..</text>
</g>
<g>
<title>Compile::Code_Gen() (38 samples, 11.55%)</title><rect x="888.7" y="1587.0" width="136.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="891.7" y="1598.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.30%)</title><rect x="888.7" y="1571.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="891.7" y="1582.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.30%)</title><rect x="888.7" y="1555.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="891.7" y="1566.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.30%)</title><rect x="888.7" y="1539.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="891.7" y="1550.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.91%)</title><rect x="892.3" y="1571.0" width="10.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="895.3" y="1582.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.30%)</title><rect x="895.9" y="1555.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="898.9" y="1566.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.30%)</title><rect x="895.9" y="1539.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="898.9" y="1550.0"></text>
</g>
<g>
<title>LocationValue::write_on(DebugInfoWriteStream*) (1 samples, 0.30%)</title><rect x="895.9" y="1523.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="898.9" y="1534.0"></text>
</g>
<g>
<title>CompressedWriteStream::write_int_mb(int) (1 samples, 0.30%)</title><rect x="895.9" y="1507.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="898.9" y="1518.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.30%)</title><rect x="899.5" y="1555.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="902.5" y="1566.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.30%)</title><rect x="899.5" y="1539.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="902.5" y="1550.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 0.91%)</title><rect x="903.1" y="1571.0" width="10.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="906.1" y="1582.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.91%)</title><rect x="903.1" y="1555.0" width="10.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="906.1" y="1566.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.61%)</title><rect x="903.1" y="1539.0" width="7.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="906.1" y="1550.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.30%)</title><rect x="910.2" y="1539.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="913.2" y="1550.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.30%)</title><rect x="910.2" y="1523.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="913.2" y="1534.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int, Compile*) (1 samples, 0.30%)</title><rect x="910.2" y="1507.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="913.2" y="1518.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.61%)</title><rect x="913.8" y="1571.0" width="7.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="916.8" y="1582.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.61%)</title><rect x="913.8" y="1555.0" width="7.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="916.8" y="1566.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.30%)</title><rect x="913.8" y="1539.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="916.8" y="1550.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.30%)</title><rect x="917.4" y="1539.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="920.4" y="1550.0"></text>
</g>
<g>
<title>PhaseCFG::fixup_flow() (1 samples, 0.30%)</title><rect x="921.0" y="1571.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="924.0" y="1582.0"></text>
</g>
<g>
<title>PhaseCFG::insert_goto_at(unsigned int, unsigned int) (1 samples, 0.30%)</title><rect x="921.0" y="1555.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="924.0" y="1566.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (28 samples, 8.51%)</title><rect x="924.6" y="1571.0" width="100.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="927.6" y="1582.0">PhaseChaitin..</text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.91%)</title><rect x="928.2" y="1555.0" width="10.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="931.2" y="1566.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.61%)</title><rect x="931.8" y="1539.0" width="7.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="934.8" y="1550.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.30%)</title><rect x="935.3" y="1523.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="938.3" y="1534.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.61%)</title><rect x="938.9" y="1555.0" width="7.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="941.9" y="1566.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.30%)</title><rect x="938.9" y="1539.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="941.9" y="1550.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.30%)</title><rect x="942.5" y="1539.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="945.5" y="1550.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.30%)</title><rect x="942.5" y="1523.0" width="3.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="945.5" y="1534.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 1.52%)</title><rect x="946.1" y="1555.0" width="17.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="949.1" y="1566.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 1.22%)</title><rect x="964.0" y="1555.0" width="14.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="967.0" y="1566.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.30%)</title><rect x="967.6" y="1539.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="970.6" y="1550.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.30%)</title><rect x="971.2" y="1539.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="974.2" y="1550.0"></text>
</g>
<g>
<title>addP_rReg_immNode::rule() const (1 samples, 0.30%)</title><rect x="974.8" y="1539.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="977.8" y="1550.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.61%)</title><rect x="978.4" y="1555.0" width="7.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="981.4" y="1566.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.30%)</title><rect x="985.6" y="1555.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="988.6" y="1566.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.61%)</title><rect x="989.1" y="1555.0" width="7.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="992.1" y="1566.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.61%)</title><rect x="996.3" y="1555.0" width="7.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="999.3" y="1566.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.61%)</title><rect x="996.3" y="1539.0" width="7.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="999.3" y="1550.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.30%)</title><rect x="1003.5" y="1555.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1006.5" y="1566.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 1.52%)</title><rect x="1007.1" y="1555.0" width="17.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1010.1" y="1566.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.61%)</title><rect x="1017.8" y="1539.0" width="7.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1020.8" y="1550.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.30%)</title><rect x="1021.4" y="1523.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1024.4" y="1534.0"></text>
</g>
<g>
<title>Compile::Optimize() (34 samples, 10.33%)</title><rect x="1025.0" y="1587.0" width="122.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1028.0" y="1598.0">Compile::Optimi..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.30%)</title><rect x="1025.0" y="1571.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1028.0" y="1582.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.30%)</title><rect x="1025.0" y="1555.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1028.0" y="1566.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.30%)</title><rect x="1025.0" y="1539.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1028.0" y="1550.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (2 samples, 0.61%)</title><rect x="1028.6" y="1571.0" width="7.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1031.6" y="1582.0"></text>
</g>
<g>
<title>NodeHash::hash_insert(Node*) (1 samples, 0.30%)</title><rect x="1032.2" y="1555.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1035.2" y="1566.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.30%)</title><rect x="1032.2" y="1539.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1035.2" y="1550.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.30%)</title><rect x="1032.2" y="1523.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1035.2" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.30%)</title><rect x="1035.8" y="1571.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1038.8" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.30%)</title><rect x="1035.8" y="1555.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1038.8" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="1539.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1038.8" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="1523.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1038.8" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="1507.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1038.8" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="1491.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1038.8" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="1475.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1038.8" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="1459.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1038.8" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="1443.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1038.8" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="1427.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1038.8" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="1411.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1038.8" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="1395.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1038.8" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="1379.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1038.8" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="1363.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1038.8" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="1347.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1038.8" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="1331.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1038.8" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="1315.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1038.8" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="1299.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1038.8" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="1283.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1038.8" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="1267.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1038.8" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="1251.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1038.8" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="1235.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1038.8" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="1219.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1038.8" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="1203.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1038.8" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="1187.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1038.8" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="1171.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1038.8" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="1155.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1038.8" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="1139.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1038.8" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="1123.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1038.8" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="1107.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1038.8" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="1091.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1038.8" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="1075.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1038.8" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="1059.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1038.8" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="1043.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1038.8" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="1027.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1038.8" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="1011.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1038.8" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="995.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1038.8" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="979.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1038.8" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="963.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1038.8" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="947.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1038.8" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="931.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1038.8" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="915.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1038.8" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="899.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1038.8" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="883.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1038.8" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="867.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1038.8" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="851.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1038.8" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="835.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1038.8" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="819.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1038.8" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="803.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1038.8" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="787.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1038.8" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="771.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1038.8" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="755.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1038.8" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="739.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1038.8" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="723.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1038.8" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="707.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1038.8" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="691.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1038.8" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="675.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1038.8" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="659.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1038.8" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="643.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1038.8" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="627.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1038.8" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="611.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1038.8" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="595.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1038.8" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="579.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1038.8" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="563.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1038.8" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="547.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1038.8" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="531.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1038.8" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="515.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1038.8" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="499.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1038.8" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="483.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1038.8" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="467.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1038.8" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="451.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1038.8" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="435.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1038.8" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="419.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1038.8" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="403.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1038.8" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="387.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1038.8" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="371.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1038.8" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="355.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1038.8" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="339.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1038.8" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="323.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1038.8" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="307.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1038.8" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="291.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1038.8" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="275.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1038.8" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="259.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1038.8" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="243.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1038.8" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="227.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1038.8" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="211.0" width="3.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1038.8" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="195.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1038.8" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="179.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1038.8" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="163.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1038.8" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="147.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1038.8" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="131.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1038.8" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="115.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1038.8" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1035.8" y="99.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1038.8" y="110.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.30%)</title><rect x="1035.8" y="83.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1038.8" y="94.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.30%)</title><rect x="1035.8" y="67.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1038.8" y="78.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.30%)</title><rect x="1035.8" y="51.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1038.8" y="62.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.30%)</title><rect x="1035.8" y="35.0" width="3.6" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1038.8" y="46.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.30%)</title><rect x="1039.4" y="1571.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1042.4" y="1582.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.30%)</title><rect x="1039.4" y="1555.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1042.4" y="1566.0"></text>
</g>
<g>
<title>GrowableArray&lt;Node*&gt;::push(Node* const&amp;) (1 samples, 0.30%)</title><rect x="1039.4" y="1539.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1042.4" y="1550.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (23 samples, 6.99%)</title><rect x="1042.9" y="1571.0" width="82.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1045.9" y="1582.0">PhaseIdea..</text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.30%)</title><rect x="1042.9" y="1555.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1045.9" y="1566.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.30%)</title><rect x="1046.5" y="1555.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1049.5" y="1566.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (18 samples, 5.47%)</title><rect x="1050.1" y="1555.0" width="64.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1053.1" y="1566.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (18 samples, 5.47%)</title><rect x="1050.1" y="1539.0" width="64.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1053.1" y="1550.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (17 samples, 5.17%)</title><rect x="1053.7" y="1523.0" width="61.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1056.7" y="1534.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 0.91%)</title><rect x="1103.9" y="1507.0" width="10.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1106.9" y="1518.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.30%)</title><rect x="1114.7" y="1555.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1117.7" y="1566.0"></text>
</g>
<g>
<title>RegionNode::Opcode() const (1 samples, 0.30%)</title><rect x="1114.7" y="1539.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1117.7" y="1550.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.30%)</title><rect x="1118.3" y="1555.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1121.3" y="1566.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.30%)</title><rect x="1118.3" y="1539.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1121.3" y="1550.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.30%)</title><rect x="1121.9" y="1555.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1124.9" y="1566.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.30%)</title><rect x="1121.9" y="1539.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1124.9" y="1550.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.30%)</title><rect x="1121.9" y="1523.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1124.9" y="1534.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.30%)</title><rect x="1121.9" y="1507.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1124.9" y="1518.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.30%)</title><rect x="1121.9" y="1491.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1124.9" y="1502.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.30%)</title><rect x="1121.9" y="1475.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1124.9" y="1486.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.30%)</title><rect x="1121.9" y="1459.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1124.9" y="1470.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.30%)</title><rect x="1121.9" y="1443.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1124.9" y="1454.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.30%)</title><rect x="1121.9" y="1427.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1124.9" y="1438.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.30%)</title><rect x="1121.9" y="1411.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1124.9" y="1422.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.30%)</title><rect x="1121.9" y="1395.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1124.9" y="1406.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.30%)</title><rect x="1121.9" y="1379.0" width="3.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1124.9" y="1390.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.30%)</title><rect x="1121.9" y="1363.0" width="3.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1124.9" y="1374.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.30%)</title><rect x="1121.9" y="1347.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1124.9" y="1358.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.30%)</title><rect x="1121.9" y="1331.0" width="3.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1124.9" y="1342.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.91%)</title><rect x="1125.4" y="1571.0" width="10.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1128.4" y="1582.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.91%)</title><rect x="1125.4" y="1555.0" width="10.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1128.4" y="1566.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.30%)</title><rect x="1125.4" y="1539.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1128.4" y="1550.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.30%)</title><rect x="1125.4" y="1523.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1128.4" y="1534.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.30%)</title><rect x="1125.4" y="1507.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1128.4" y="1518.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.30%)</title><rect x="1129.0" y="1539.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1132.0" y="1550.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (1 samples, 0.30%)</title><rect x="1129.0" y="1523.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1132.0" y="1534.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.30%)</title><rect x="1129.0" y="1507.0" width="3.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1132.0" y="1518.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.30%)</title><rect x="1129.0" y="1491.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1132.0" y="1502.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.30%)</title><rect x="1132.6" y="1539.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1135.6" y="1550.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.30%)</title><rect x="1132.6" y="1523.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1135.6" y="1534.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.30%)</title><rect x="1136.2" y="1571.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1139.2" y="1582.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.30%)</title><rect x="1136.2" y="1555.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1139.2" y="1566.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1136.2" y="1539.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1139.2" y="1550.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.30%)</title><rect x="1136.2" y="1523.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1139.2" y="1534.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.30%)</title><rect x="1136.2" y="1507.0" width="3.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1139.2" y="1518.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.30%)</title><rect x="1139.8" y="1571.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1142.8" y="1582.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.30%)</title><rect x="1139.8" y="1555.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1142.8" y="1566.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.30%)</title><rect x="1139.8" y="1539.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1142.8" y="1550.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.30%)</title><rect x="1139.8" y="1523.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1142.8" y="1534.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.30%)</title><rect x="1139.8" y="1507.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1142.8" y="1518.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.30%)</title><rect x="1143.4" y="1571.0" width="3.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1146.4" y="1582.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 1.82%)</title><rect x="1147.0" y="1587.0" width="21.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1150.0" y="1598.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 1.82%)</title><rect x="1147.0" y="1571.0" width="21.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.0" y="1582.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 1.82%)</title><rect x="1147.0" y="1555.0" width="21.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1150.0" y="1566.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 1.82%)</title><rect x="1147.0" y="1539.0" width="21.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.0" y="1550.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 1.82%)</title><rect x="1147.0" y="1523.0" width="21.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1150.0" y="1534.0">P..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 1.82%)</title><rect x="1147.0" y="1507.0" width="21.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1150.0" y="1518.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.22%)</title><rect x="1147.0" y="1491.0" width="14.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1150.0" y="1502.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.22%)</title><rect x="1147.0" y="1475.0" width="14.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1150.0" y="1486.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.22%)</title><rect x="1147.0" y="1459.0" width="14.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1150.0" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.22%)</title><rect x="1147.0" y="1443.0" width="14.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1150.0" y="1454.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.22%)</title><rect x="1147.0" y="1427.0" width="14.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.0" y="1438.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.22%)</title><rect x="1147.0" y="1411.0" width="14.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1150.0" y="1422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1147.0" y="1395.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.0" y="1406.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.30%)</title><rect x="1147.0" y="1379.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1150.0" y="1390.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.30%)</title><rect x="1147.0" y="1363.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.0" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.30%)</title><rect x="1147.0" y="1347.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1150.0" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.30%)</title><rect x="1147.0" y="1331.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1150.0" y="1342.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.30%)</title><rect x="1147.0" y="1315.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1150.0" y="1326.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1147.0" y="1299.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.0" y="1310.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.30%)</title><rect x="1147.0" y="1283.0" width="3.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1150.0" y="1294.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.30%)</title><rect x="1147.0" y="1267.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.0" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.30%)</title><rect x="1147.0" y="1251.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.0" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.30%)</title><rect x="1147.0" y="1235.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.0" y="1246.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.30%)</title><rect x="1147.0" y="1219.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.0" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1147.0" y="1203.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1150.0" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.30%)</title><rect x="1147.0" y="1187.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1150.0" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.30%)</title><rect x="1147.0" y="1171.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.0" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.30%)</title><rect x="1147.0" y="1155.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.0" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.30%)</title><rect x="1147.0" y="1139.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1150.0" y="1150.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.30%)</title><rect x="1147.0" y="1123.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.0" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1147.0" y="1107.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1150.0" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.30%)</title><rect x="1147.0" y="1091.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1150.0" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.30%)</title><rect x="1147.0" y="1075.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1150.0" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.30%)</title><rect x="1147.0" y="1059.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.0" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.30%)</title><rect x="1147.0" y="1043.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.0" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.30%)</title><rect x="1147.0" y="1027.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.0" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1147.0" y="1011.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1150.0" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.30%)</title><rect x="1147.0" y="995.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.0" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.30%)</title><rect x="1147.0" y="979.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1150.0" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.30%)</title><rect x="1147.0" y="963.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.0" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.30%)</title><rect x="1147.0" y="947.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.0" y="958.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.30%)</title><rect x="1147.0" y="931.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1150.0" y="942.0"></text>
</g>
<g>
<title>MulNode::Value(PhaseTransform*) const (1 samples, 0.30%)</title><rect x="1147.0" y="915.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1150.0" y="926.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.30%)</title><rect x="1147.0" y="899.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1150.0" y="910.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.30%)</title><rect x="1147.0" y="883.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1150.0" y="894.0"></text>
</g>
<g>
<title>TypeInt::xmeet(Type const*) const (1 samples, 0.30%)</title><rect x="1147.0" y="867.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.0" y="878.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.30%)</title><rect x="1147.0" y="851.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.0" y="862.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.30%)</title><rect x="1147.0" y="835.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.0" y="846.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.30%)</title><rect x="1147.0" y="819.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1150.0" y="830.0"></text>
</g>
<g>
<title>TypeInt::eq(Type const*) const (1 samples, 0.30%)</title><rect x="1147.0" y="803.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.0" y="814.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.91%)</title><rect x="1150.5" y="1395.0" width="10.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.5" y="1406.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.91%)</title><rect x="1150.5" y="1379.0" width="10.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1153.5" y="1390.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.91%)</title><rect x="1150.5" y="1363.0" width="10.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1153.5" y="1374.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.91%)</title><rect x="1150.5" y="1347.0" width="10.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1153.5" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.91%)</title><rect x="1150.5" y="1331.0" width="10.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.5" y="1342.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.91%)</title><rect x="1150.5" y="1315.0" width="10.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1153.5" y="1326.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.91%)</title><rect x="1150.5" y="1299.0" width="10.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1153.5" y="1310.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.91%)</title><rect x="1150.5" y="1283.0" width="10.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1153.5" y="1294.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.91%)</title><rect x="1150.5" y="1267.0" width="10.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1153.5" y="1278.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.91%)</title><rect x="1150.5" y="1251.0" width="10.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.5" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.91%)</title><rect x="1150.5" y="1235.0" width="10.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1153.5" y="1246.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.91%)</title><rect x="1150.5" y="1219.0" width="10.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1153.5" y="1230.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.91%)</title><rect x="1150.5" y="1203.0" width="10.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1153.5" y="1214.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.61%)</title><rect x="1150.5" y="1187.0" width="7.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1153.5" y="1198.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.61%)</title><rect x="1150.5" y="1171.0" width="7.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1153.5" y="1182.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.61%)</title><rect x="1150.5" y="1155.0" width="7.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1153.5" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.61%)</title><rect x="1150.5" y="1139.0" width="7.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.5" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.61%)</title><rect x="1150.5" y="1123.0" width="7.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.5" y="1134.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.61%)</title><rect x="1150.5" y="1107.0" width="7.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1153.5" y="1118.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1150.5" y="1091.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.5" y="1102.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.30%)</title><rect x="1150.5" y="1075.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.5" y="1086.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.30%)</title><rect x="1150.5" y="1059.0" width="3.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1153.5" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.30%)</title><rect x="1150.5" y="1043.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.5" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.30%)</title><rect x="1150.5" y="1027.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.5" y="1038.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.30%)</title><rect x="1150.5" y="1011.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.5" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1150.5" y="995.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.5" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.30%)</title><rect x="1150.5" y="979.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1153.5" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.30%)</title><rect x="1150.5" y="963.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.5" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.30%)</title><rect x="1150.5" y="947.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1153.5" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.30%)</title><rect x="1150.5" y="931.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1153.5" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.30%)</title><rect x="1150.5" y="915.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1153.5" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1150.5" y="899.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1153.5" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.30%)</title><rect x="1150.5" y="883.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1153.5" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.30%)</title><rect x="1150.5" y="867.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.5" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.30%)</title><rect x="1150.5" y="851.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.5" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.30%)</title><rect x="1150.5" y="835.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1153.5" y="846.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1154.1" y="1091.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1157.1" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1154.1" y="1075.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1157.1" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.30%)</title><rect x="1154.1" y="1059.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1157.1" y="1070.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.30%)</title><rect x="1154.1" y="1043.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1157.1" y="1054.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1157.7" y="1187.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.7" y="1198.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1157.7" y="1171.0" width="3.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1160.7" y="1182.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.30%)</title><rect x="1157.7" y="1155.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.7" y="1166.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.30%)</title><rect x="1157.7" y="1139.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.7" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.30%)</title><rect x="1157.7" y="1123.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.7" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.30%)</title><rect x="1157.7" y="1107.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.7" y="1118.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.30%)</title><rect x="1157.7" y="1091.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1160.7" y="1102.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1157.7" y="1075.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.7" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1157.7" y="1059.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.7" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.30%)</title><rect x="1157.7" y="1043.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1160.7" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.30%)</title><rect x="1157.7" y="1027.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.7" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.30%)</title><rect x="1157.7" y="1011.0" width="3.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1160.7" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.30%)</title><rect x="1157.7" y="995.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1160.7" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.30%)</title><rect x="1157.7" y="979.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.7" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1157.7" y="963.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.7" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.30%)</title><rect x="1157.7" y="947.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.7" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.30%)</title><rect x="1157.7" y="931.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.7" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.30%)</title><rect x="1157.7" y="915.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.7" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.30%)</title><rect x="1157.7" y="899.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.7" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.30%)</title><rect x="1157.7" y="883.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.7" y="894.0"></text>
</g>
<g>
<title>GraphKit::record_profile_for_speculation(Node*, ciKlass*) (1 samples, 0.30%)</title><rect x="1157.7" y="867.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.7" y="878.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.30%)</title><rect x="1157.7" y="851.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1160.7" y="862.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.30%)</title><rect x="1157.7" y="835.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.7" y="846.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1161.3" y="1491.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.3" y="1502.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1161.3" y="1475.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.3" y="1486.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.30%)</title><rect x="1161.3" y="1459.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.3" y="1470.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.30%)</title><rect x="1161.3" y="1443.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.3" y="1454.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.30%)</title><rect x="1161.3" y="1427.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.3" y="1438.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.30%)</title><rect x="1161.3" y="1411.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.3" y="1422.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.30%)</title><rect x="1161.3" y="1395.0" width="3.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.3" y="1406.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1161.3" y="1379.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.3" y="1390.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1161.3" y="1363.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.3" y="1374.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.30%)</title><rect x="1161.3" y="1347.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.3" y="1358.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.30%)</title><rect x="1161.3" y="1331.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.3" y="1342.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.30%)</title><rect x="1161.3" y="1315.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.3" y="1326.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.30%)</title><rect x="1161.3" y="1299.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.3" y="1310.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.30%)</title><rect x="1161.3" y="1283.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.3" y="1294.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1161.3" y="1267.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.3" y="1278.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.30%)</title><rect x="1161.3" y="1251.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.3" y="1262.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.30%)</title><rect x="1161.3" y="1235.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.3" y="1246.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.30%)</title><rect x="1161.3" y="1219.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.3" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.30%)</title><rect x="1161.3" y="1203.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.3" y="1214.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.30%)</title><rect x="1161.3" y="1187.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.3" y="1198.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1161.3" y="1171.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.3" y="1182.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.30%)</title><rect x="1161.3" y="1155.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.3" y="1166.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.30%)</title><rect x="1161.3" y="1139.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.3" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.30%)</title><rect x="1161.3" y="1123.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.3" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.30%)</title><rect x="1161.3" y="1107.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.3" y="1118.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.30%)</title><rect x="1161.3" y="1091.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.3" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1161.3" y="1075.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.3" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.30%)</title><rect x="1161.3" y="1059.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.3" y="1070.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.30%)</title><rect x="1161.3" y="1043.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.3" y="1054.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.30%)</title><rect x="1161.3" y="1027.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.3" y="1038.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.30%)</title><rect x="1161.3" y="1011.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.3" y="1022.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.30%)</title><rect x="1161.3" y="995.0" width="3.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1164.3" y="1006.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.30%)</title><rect x="1164.9" y="1491.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.9" y="1502.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.30%)</title><rect x="1164.9" y="1475.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.9" y="1486.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.30%)</title><rect x="1164.9" y="1459.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.9" y="1470.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.30%)</title><rect x="1164.9" y="1443.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.9" y="1454.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.30%)</title><rect x="1164.9" y="1427.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.9" y="1438.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (5 samples, 1.52%)</title><rect x="1168.5" y="1619.0" width="17.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.5" y="1630.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (5 samples, 1.52%)</title><rect x="1168.5" y="1603.0" width="17.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.5" y="1614.0"></text>
</g>
<g>
<title>Compilation::compile_method() (5 samples, 1.52%)</title><rect x="1168.5" y="1587.0" width="17.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.5" y="1598.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (5 samples, 1.52%)</title><rect x="1168.5" y="1571.0" width="17.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.5" y="1582.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.30%)</title><rect x="1168.5" y="1555.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.5" y="1566.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.30%)</title><rect x="1168.5" y="1539.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.5" y="1550.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.30%)</title><rect x="1168.5" y="1523.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.5" y="1534.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.30%)</title><rect x="1168.5" y="1507.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.5" y="1518.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.30%)</title><rect x="1168.5" y="1491.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.5" y="1502.0"></text>
</g>
<g>
<title>BlockListBuilder::set_leaders() (1 samples, 0.30%)</title><rect x="1168.5" y="1475.0" width="3.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.5" y="1486.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.30%)</title><rect x="1172.1" y="1555.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.1" y="1566.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.30%)</title><rect x="1172.1" y="1539.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.1" y="1550.0"></text>
</g>
<g>
<title>LIR_Assembler::return_op(LIR_OprDesc*) (1 samples, 0.30%)</title><rect x="1172.1" y="1523.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.1" y="1534.0"></text>
</g>
<g>
<title>Address::Address(int, unsigned char*, relocInfo::relocType) (1 samples, 0.30%)</title><rect x="1172.1" y="1507.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.1" y="1518.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (3 samples, 0.91%)</title><rect x="1175.7" y="1555.0" width="10.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.7" y="1566.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (3 samples, 0.91%)</title><rect x="1175.7" y="1539.0" width="10.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.7" y="1550.0"></text>
</g>
<g>
<title>Interval::add_use_pos(int, IntervalUseKind) (1 samples, 0.30%)</title><rect x="1175.7" y="1523.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.7" y="1534.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.30%)</title><rect x="1179.2" y="1523.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.2" y="1534.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(LIR_OpList*, IntervalWalker*) (1 samples, 0.30%)</title><rect x="1179.2" y="1507.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.2" y="1518.0"></text>
</g>
<g>
<title>LinearScan::compute_oop_map(IntervalWalker*, LIR_Op*, CodeEmitInfo*, bool) (1 samples, 0.30%)</title><rect x="1179.2" y="1491.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.2" y="1502.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.30%)</title><rect x="1179.2" y="1475.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.2" y="1486.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(IntervalState, int) (1 samples, 0.30%)</title><rect x="1179.2" y="1459.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.2" y="1470.0"></text>
</g>
<g>
<title>LinearScan::resolve_exception_handlers() (1 samples, 0.30%)</title><rect x="1182.8" y="1523.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.8" y="1534.0"></text>
</g>
<g>
<title>LinearScan::resolve_exception_edge(XHandler*, int, MoveResolver&amp;) (1 samples, 0.30%)</title><rect x="1182.8" y="1507.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.8" y="1518.0"></text>
</g>
<g>
<title>LinearScan::resolve_exception_edge(XHandler*, int, int, Phi*, MoveResolver&amp;) (1 samples, 0.30%)</title><rect x="1182.8" y="1491.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.8" y="1502.0"></text>
</g>
<g>
<title>LinearScan::split_child_at_op_id(Interval*, int, LIR_OpVisitState::OprMode) (1 samples, 0.30%)</title><rect x="1182.8" y="1475.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.8" y="1486.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.30%)</title><rect x="1186.4" y="1635.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.4" y="1646.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.30%)</title><rect x="1186.4" y="1619.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.4" y="1630.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.30%)</title><rect x="1186.4" y="1603.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.4" y="1614.0"></text>
</g>
</g>
</svg>
