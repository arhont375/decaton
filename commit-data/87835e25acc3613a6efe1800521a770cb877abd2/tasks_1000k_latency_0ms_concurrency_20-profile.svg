<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1125"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1125"> </text>
<g id="frames">
<g>
<title>all (1,174 samples, 100.00%)</title><rect x="10.0" y="1091.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1102.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="10.0" y="1075.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.09%)</title><rect x="10.0" y="1059.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (277 samples, 23.59%)</title><rect x="11.0" y="1075.0" width="278.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.0" y="1086.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.09%)</title><rect x="12.0" y="1059.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="15.0" y="1070.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.09%)</title><rect x="12.0" y="1043.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="15.0" y="1054.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_back_branch_event(methodHandle, methodHandle, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.09%)</title><rect x="12.0" y="1027.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="15.0" y="1038.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.09%)</title><rect x="12.0" y="1011.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="15.0" y="1022.0"></text>
</g>
<g>
<title>CompilationPolicy::can_be_compiled(methodHandle, int) (1 samples, 0.09%)</title><rect x="12.0" y="995.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="15.0" y="1006.0"></text>
</g>
<g>
<title>Method::is_not_compilable(int) const (1 samples, 0.09%)</title><rect x="12.0" y="979.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="15.0" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.09%)</title><rect x="13.0" y="1059.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.0" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (1 samples, 0.09%)</title><rect x="13.0" y="1043.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.0" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.commitReadyOffsets (1 samples, 0.09%)</title><rect x="13.0" y="1027.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.0" y="1038.0"></text>
</g>
<g>
<title>java/util/OptionalLong.ifPresent (1 samples, 0.09%)</title><rect x="13.0" y="1011.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.0" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$273/1430633569.accept (1 samples, 0.09%)</title><rect x="13.0" y="995.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.0" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.lambda$commitReadyOffsets$53 (1 samples, 0.09%)</title><rect x="13.0" y="979.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/OffsetAndMetadata.&lt;init&gt; (1 samples, 0.09%)</title><rect x="13.0" y="963.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/OffsetAndMetadata.&lt;init&gt; (1 samples, 0.09%)</title><rect x="13.0" y="947.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.0" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (273 samples, 23.25%)</title><rect x="14.0" y="1059.0" width="274.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.0" y="1070.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.09%)</title><rect x="14.0" y="1043.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.0" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (1 samples, 0.09%)</title><rect x="14.0" y="1027.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="17.0" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="14.0" y="1011.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.0" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="14.0" y="995.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.0" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="14.0" y="979.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="17.0" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="14.0" y="963.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.0" y="974.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.09%)</title><rect x="14.0" y="947.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="17.0" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.09%)</title><rect x="15.0" y="1043.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.0" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.09%)</title><rect x="15.0" y="1027.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.0" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="15.0" y="1011.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="18.0" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="15.0" y="995.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="18.0" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="15.0" y="979.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.0" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="15.0" y="963.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="18.0" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="15.0" y="947.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.0" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="15.0" y="931.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="18.0" y="942.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="15.0" y="915.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.0" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="15.0" y="899.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.0" y="910.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="15.0" y="883.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="18.0" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (6 samples, 0.51%)</title><rect x="16.0" y="1043.0" width="6.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="19.0" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (6 samples, 0.51%)</title><rect x="16.0" y="1027.0" width="6.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.0" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (6 samples, 0.51%)</title><rect x="16.0" y="1011.0" width="6.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.0" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$266/909783793.accept (6 samples, 0.51%)</title><rect x="16.0" y="995.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.0" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (6 samples, 0.51%)</title><rect x="16.0" y="979.0" width="6.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.0" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (6 samples, 0.51%)</title><rect x="16.0" y="963.0" width="6.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="19.0" y="974.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (4 samples, 0.34%)</title><rect x="17.0" y="947.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="20.0" y="958.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.09%)</title><rect x="20.1" y="931.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.1" y="942.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (1 samples, 0.09%)</title><rect x="21.1" y="947.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="24.1" y="958.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.09%)</title><rect x="21.1" y="931.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="24.1" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.09%)</title><rect x="22.1" y="1043.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="25.1" y="1054.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.09%)</title><rect x="22.1" y="1027.0" width="1.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="25.1" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (1 samples, 0.09%)</title><rect x="23.1" y="1043.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="26.1" y="1054.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.09%)</title><rect x="23.1" y="1027.0" width="1.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="26.1" y="1038.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="23.1" y="1011.0" width="1.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="26.1" y="1022.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (197 samples, 16.78%)</title><rect x="24.1" y="1043.0" width="198.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="27.1" y="1054.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$265/1967973641.accept (191 samples, 16.27%)</title><rect x="25.1" y="1027.0" width="192.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="28.1" y="1038.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (191 samples, 16.27%)</title><rect x="25.1" y="1011.0" width="192.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="28.1" y="1022.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (154 samples, 13.12%)</title><rect x="25.1" y="995.0" width="154.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="28.1" y="1006.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (154 samples, 13.12%)</title><rect x="25.1" y="979.0" width="154.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="28.1" y="990.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (154 samples, 13.12%)</title><rect x="25.1" y="963.0" width="154.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="28.1" y="974.0">com/linecorp/decaton..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (154 samples, 13.12%)</title><rect x="25.1" y="947.0" width="154.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="28.1" y="958.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (154 samples, 13.12%)</title><rect x="25.1" y="931.0" width="154.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="28.1" y="942.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (154 samples, 13.12%)</title><rect x="25.1" y="915.0" width="154.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="28.1" y="926.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (103 samples, 8.77%)</title><rect x="67.3" y="899.0" width="103.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="70.3" y="910.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (20 samples, 1.70%)</title><rect x="67.3" y="883.0" width="20.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="70.3" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (20 samples, 1.70%)</title><rect x="67.3" y="867.0" width="20.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="70.3" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (20 samples, 1.70%)</title><rect x="67.3" y="851.0" width="20.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="70.3" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (8 samples, 0.68%)</title><rect x="87.4" y="883.0" width="8.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="90.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (8 samples, 0.68%)</title><rect x="87.4" y="867.0" width="8.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="90.4" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.17%)</title><rect x="90.4" y="851.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="93.4" y="862.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (2 samples, 0.17%)</title><rect x="90.4" y="835.0" width="2.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="93.4" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.26%)</title><rect x="92.4" y="851.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="95.4" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (75 samples, 6.39%)</title><rect x="95.4" y="883.0" width="75.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="98.4" y="894.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (75 samples, 6.39%)</title><rect x="95.4" y="867.0" width="75.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="98.4" y="878.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.09%)</title><rect x="95.4" y="851.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="98.4" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (73 samples, 6.22%)</title><rect x="96.4" y="851.0" width="73.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="99.4" y="862.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (73 samples, 6.22%)</title><rect x="96.4" y="835.0" width="73.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="99.4" y="846.0">java/uti..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (73 samples, 6.22%)</title><rect x="96.4" y="819.0" width="73.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="99.4" y="830.0">sun/misc..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="97.4" y="803.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="100.4" y="814.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.09%)</title><rect x="98.4" y="803.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="101.4" y="814.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="99.5" y="803.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="102.5" y="814.0"></text>
</g>
<g>
<title>Unsafe_Unpark (64 samples, 5.45%)</title><rect x="100.5" y="803.0" width="64.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="103.5" y="814.0">Unsafe_..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="103.5" y="787.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="106.5" y="798.0"></text>
</g>
<g>
<title>Parker::unpark() (3 samples, 0.26%)</title><rect x="104.5" y="787.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="107.5" y="798.0"></text>
</g>
<g>
<title>__pthread_cond_signal (40 samples, 3.41%)</title><rect x="107.5" y="787.0" width="40.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="110.5" y="798.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.17%)</title><rect x="147.7" y="787.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="150.7" y="798.0"></text>
</g>
<g>
<title>pthread_mutex_lock (15 samples, 1.28%)</title><rect x="149.7" y="787.0" width="15.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="152.7" y="798.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.17%)</title><rect x="164.8" y="803.0" width="2.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="167.8" y="814.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.26%)</title><rect x="166.8" y="803.0" width="3.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="169.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.09%)</title><rect x="169.8" y="851.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="172.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.34%)</title><rect x="170.8" y="899.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="173.8" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (4 samples, 0.34%)</title><rect x="170.8" y="883.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="173.8" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.34%)</title><rect x="170.8" y="867.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="173.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.17%)</title><rect x="174.8" y="899.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="177.8" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.17%)</title><rect x="174.8" y="883.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="177.8" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.17%)</title><rect x="174.8" y="867.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="177.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.09%)</title><rect x="175.8" y="851.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="178.8" y="862.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.26%)</title><rect x="176.8" y="899.0" width="3.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="179.8" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (3 samples, 0.26%)</title><rect x="179.9" y="995.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="182.9" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (3 samples, 0.26%)</title><rect x="179.9" y="979.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="182.9" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (3 samples, 0.26%)</title><rect x="182.9" y="995.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="185.9" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.26%)</title><rect x="182.9" y="979.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="185.9" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.26%)</title><rect x="182.9" y="963.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="185.9" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/TaskRequest.&lt;init&gt; (31 samples, 2.64%)</title><rect x="185.9" y="995.0" width="31.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="188.9" y="1006.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (31 samples, 2.64%)</title><rect x="185.9" y="979.0" width="31.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="188.9" y="990.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 0.43%)</title><rect x="210.0" y="963.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="213.0" y="974.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.09%)</title><rect x="210.0" y="947.0" width="1.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="213.0" y="958.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="210.0" y="931.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="213.0" y="942.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 0.34%)</title><rect x="211.0" y="947.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="214.0" y="958.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (4 samples, 0.34%)</title><rect x="211.0" y="931.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="214.0" y="942.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 0.34%)</title><rect x="211.0" y="915.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="214.0" y="926.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="214.0" y="899.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="217.0" y="910.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.09%)</title><rect x="215.0" y="963.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="218.0" y="974.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="216.0" y="963.0" width="1.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="219.0" y="974.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.09%)</title><rect x="217.1" y="1027.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="220.1" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.09%)</title><rect x="217.1" y="1011.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="220.1" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.09%)</title><rect x="217.1" y="995.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="220.1" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.09%)</title><rect x="217.1" y="979.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="220.1" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.09%)</title><rect x="217.1" y="963.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="220.1" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (4 samples, 0.34%)</title><rect x="218.1" y="1027.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="221.1" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (4 samples, 0.34%)</title><rect x="218.1" y="1011.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="221.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.34%)</title><rect x="218.1" y="995.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="221.1" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.34%)</title><rect x="218.1" y="979.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="221.1" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (66 samples, 5.62%)</title><rect x="222.1" y="1043.0" width="66.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="225.1" y="1054.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (66 samples, 5.62%)</title><rect x="222.1" y="1027.0" width="66.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="225.1" y="1038.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (35 samples, 2.98%)</title><rect x="222.1" y="1011.0" width="35.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="225.1" y="1022.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="222.1" y="995.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="225.1" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="222.1" y="979.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="225.1" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.09%)</title><rect x="222.1" y="963.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="225.1" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.09%)</title><rect x="222.1" y="947.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="225.1" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.09%)</title><rect x="222.1" y="931.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="225.1" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.09%)</title><rect x="222.1" y="915.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="225.1" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (1 samples, 0.09%)</title><rect x="222.1" y="899.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="225.1" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (34 samples, 2.90%)</title><rect x="223.1" y="995.0" width="34.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="226.1" y="1006.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (33 samples, 2.81%)</title><rect x="223.1" y="979.0" width="33.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="226.1" y="990.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (26 samples, 2.21%)</title><rect x="223.1" y="963.0" width="26.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="226.1" y="974.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (26 samples, 2.21%)</title><rect x="223.1" y="947.0" width="26.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="226.1" y="958.0">o..</text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.09%)</title><rect x="223.1" y="931.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="226.1" y="942.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureCapacityInternal (1 samples, 0.09%)</title><rect x="223.1" y="915.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="226.1" y="926.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureExplicitCapacity (1 samples, 0.09%)</title><rect x="223.1" y="899.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="226.1" y="910.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.09%)</title><rect x="223.1" y="883.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="226.1" y="894.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.09%)</title><rect x="223.1" y="867.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="226.1" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (15 samples, 1.28%)</title><rect x="224.1" y="931.0" width="15.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="227.1" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.09%)</title><rect x="224.1" y="915.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="227.1" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.record (1 samples, 0.09%)</title><rect x="224.1" y="899.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="227.1" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySet.iterator (1 samples, 0.09%)</title><rect x="224.1" y="883.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="227.1" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap$EntryIterator.&lt;init&gt; (1 samples, 0.09%)</title><rect x="224.1" y="867.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="227.1" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.09%)</title><rect x="224.1" y="851.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="227.1" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeCloseRecordStream (10 samples, 0.85%)</title><rect x="225.1" y="915.0" width="10.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="228.1" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (4 samples, 0.34%)</title><rect x="235.1" y="915.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="238.1" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (4 samples, 0.34%)</title><rect x="235.1" y="899.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="238.1" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (4 samples, 0.34%)</title><rect x="235.1" y="883.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="238.1" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (4 samples, 0.34%)</title><rect x="235.1" y="867.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="238.1" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (4 samples, 0.34%)</title><rect x="235.1" y="851.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="238.1" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (4 samples, 0.34%)</title><rect x="235.1" y="835.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="238.1" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (4 samples, 0.34%)</title><rect x="235.1" y="819.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="238.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (10 samples, 0.85%)</title><rect x="239.2" y="931.0" width="10.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="242.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (10 samples, 0.85%)</title><rect x="239.2" y="915.0" width="10.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="242.2" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="239.2" y="899.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="242.2" y="910.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray(BasicType, int, Thread*) (1 samples, 0.09%)</title><rect x="239.2" y="883.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="242.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (8 samples, 0.68%)</title><rect x="240.2" y="899.0" width="8.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="243.2" y="910.0"></text>
</g>
<g>
<title>java/util/Optional.of (8 samples, 0.68%)</title><rect x="240.2" y="883.0" width="8.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="243.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.09%)</title><rect x="248.2" y="899.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="251.2" y="910.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.09%)</title><rect x="248.2" y="883.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="251.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (3 samples, 0.26%)</title><rect x="249.2" y="963.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="252.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (3 samples, 0.26%)</title><rect x="249.2" y="947.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="252.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.09%)</title><rect x="249.2" y="931.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="252.2" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.09%)</title><rect x="249.2" y="915.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="252.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="250.2" y="931.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="253.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="250.2" y="915.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="253.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="250.2" y="899.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="253.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (2 samples, 0.17%)</title><rect x="250.2" y="883.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="253.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Value.record (1 samples, 0.09%)</title><rect x="251.2" y="867.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="254.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.09%)</title><rect x="252.2" y="963.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="255.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.09%)</title><rect x="252.2" y="947.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="255.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="252.2" y="931.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="255.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="252.2" y="915.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="255.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="252.2" y="899.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="255.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (3 samples, 0.26%)</title><rect x="253.2" y="963.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="256.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$400 (1 samples, 0.09%)</title><rect x="254.2" y="947.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="257.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.position (1 samples, 0.09%)</title><rect x="254.2" y="931.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="257.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.hasValidPosition (1 samples, 0.09%)</title><rect x="254.2" y="915.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="257.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.09%)</title><rect x="255.2" y="947.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="258.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.09%)</title><rect x="255.2" y="931.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="258.2" y="942.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.09%)</title><rect x="255.2" y="915.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="258.2" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="255.2" y="899.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="258.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.09%)</title><rect x="256.3" y="979.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="259.3" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.09%)</title><rect x="256.3" y="963.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="259.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.09%)</title><rect x="256.3" y="947.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="259.3" y="958.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.09%)</title><rect x="256.3" y="931.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="259.3" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="256.3" y="915.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="259.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (14 samples, 1.19%)</title><rect x="257.3" y="1011.0" width="14.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="260.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (14 samples, 1.19%)</title><rect x="257.3" y="995.0" width="14.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="260.3" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (11 samples, 0.94%)</title><rect x="257.3" y="979.0" width="11.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="260.3" y="990.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.09%)</title><rect x="258.3" y="963.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="261.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$233/1725652470.accept (1 samples, 0.09%)</title><rect x="258.3" y="947.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="261.3" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.09%)</title><rect x="258.3" y="931.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="261.3" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.09%)</title><rect x="258.3" y="915.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="261.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.09%)</title><rect x="258.3" y="899.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="261.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.09%)</title><rect x="258.3" y="883.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="261.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.09%)</title><rect x="258.3" y="867.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="261.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.09%)</title><rect x="259.3" y="963.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="262.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.09%)</title><rect x="259.3" y="947.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="262.3" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="259.3" y="931.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="262.3" y="942.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="259.3" y="915.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="262.3" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="259.3" y="899.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="262.3" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="259.3" y="883.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="262.3" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="259.3" y="867.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="262.3" y="878.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.09%)</title><rect x="259.3" y="851.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="262.3" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySpliterator.characteristics (1 samples, 0.09%)</title><rect x="259.3" y="835.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="262.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (3 samples, 0.26%)</title><rect x="260.3" y="963.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="263.3" y="974.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (3 samples, 0.26%)</title><rect x="260.3" y="947.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="263.3" y="958.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (2 samples, 0.17%)</title><rect x="260.3" y="931.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="263.3" y="942.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (1 samples, 0.09%)</title><rect x="260.3" y="915.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="263.3" y="926.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeySet.iterator (1 samples, 0.09%)</title><rect x="260.3" y="899.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="263.3" y="910.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="261.3" y="915.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="264.3" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="261.3" y="899.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="264.3" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="261.3" y="883.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="264.3" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.09%)</title><rect x="261.3" y="867.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="264.3" y="878.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.09%)</title><rect x="262.3" y="931.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="265.3" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (5 samples, 0.43%)</title><rect x="263.3" y="963.0" width="5.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="266.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (5 samples, 0.43%)</title><rect x="263.3" y="947.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="266.3" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (4 samples, 0.34%)</title><rect x="264.3" y="931.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="267.3" y="942.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.34%)</title><rect x="264.3" y="915.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="267.3" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (4 samples, 0.34%)</title><rect x="264.3" y="899.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="267.3" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (4 samples, 0.34%)</title><rect x="264.3" y="883.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="267.3" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (4 samples, 0.34%)</title><rect x="264.3" y="867.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="267.3" y="878.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.09%)</title><rect x="264.3" y="851.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="267.3" y="862.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.estimateSize (1 samples, 0.09%)</title><rect x="264.3" y="835.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="267.3" y="846.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (3 samples, 0.26%)</title><rect x="265.3" y="851.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="268.3" y="862.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (3 samples, 0.26%)</title><rect x="265.3" y="835.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="268.3" y="846.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (1 samples, 0.09%)</title><rect x="265.3" y="819.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="268.3" y="830.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (1 samples, 0.09%)</title><rect x="265.3" y="803.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="268.3" y="814.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.09%)</title><rect x="265.3" y="787.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="268.3" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (2 samples, 0.17%)</title><rect x="266.3" y="819.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="269.3" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.17%)</title><rect x="266.3" y="803.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="269.3" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="266.3" y="787.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="269.3" y="798.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="266.3" y="771.0" width="1.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="269.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$238/186962197.test (1 samples, 0.09%)</title><rect x="267.3" y="787.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="270.3" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$collectPartitions$6 (1 samples, 0.09%)</title><rect x="267.3" y="771.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="270.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (3 samples, 0.26%)</title><rect x="268.3" y="979.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="271.3" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (3 samples, 0.26%)</title><rect x="268.3" y="963.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="271.3" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.26%)</title><rect x="268.3" y="947.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="271.3" y="958.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.17%)</title><rect x="269.3" y="931.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="272.3" y="942.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.17%)</title><rect x="269.3" y="915.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="272.3" y="926.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.17%)</title><rect x="269.3" y="899.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="272.3" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.17%)</title><rect x="269.3" y="883.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="272.3" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (2 samples, 0.17%)</title><rect x="269.3" y="867.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="272.3" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.09%)</title><rect x="269.3" y="851.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="272.3" y="862.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.09%)</title><rect x="270.3" y="851.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="273.3" y="862.0"></text>
</g>
<g>
<title>java/util/stream/Sink.begin (1 samples, 0.09%)</title><rect x="270.3" y="835.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="273.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (2 samples, 0.17%)</title><rect x="271.3" y="1011.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="274.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (2 samples, 0.17%)</title><rect x="271.3" y="995.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="274.3" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$ValuesView.iterator (2 samples, 0.17%)</title><rect x="271.3" y="979.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="274.3" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$ValueIterator.&lt;init&gt; (2 samples, 0.17%)</title><rect x="271.3" y="963.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="274.3" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$BaseIterator.&lt;init&gt; (2 samples, 0.17%)</title><rect x="271.3" y="947.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="274.3" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$Traverser.advance (2 samples, 0.17%)</title><rect x="271.3" y="931.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="274.3" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (6 samples, 0.51%)</title><rect x="273.3" y="1011.0" width="6.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="276.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (6 samples, 0.51%)</title><rect x="273.3" y="995.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="276.3" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (6 samples, 0.51%)</title><rect x="273.3" y="979.0" width="6.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="276.3" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (4 samples, 0.34%)</title><rect x="275.3" y="963.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="278.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (4 samples, 0.34%)</title><rect x="275.3" y="947.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="278.3" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (4 samples, 0.34%)</title><rect x="275.3" y="931.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="278.3" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="275.3" y="915.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="278.3" y="926.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="275.3" y="899.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="278.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (3 samples, 0.26%)</title><rect x="276.4" y="915.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="279.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (3 samples, 0.26%)</title><rect x="276.4" y="899.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="279.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (3 samples, 0.26%)</title><rect x="276.4" y="883.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="279.4" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (3 samples, 0.26%)</title><rect x="276.4" y="867.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="279.4" y="878.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.17%)</title><rect x="277.4" y="851.0" width="2.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="280.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (8 samples, 0.68%)</title><rect x="279.4" y="1011.0" width="8.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="282.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (8 samples, 0.68%)</title><rect x="279.4" y="995.0" width="8.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="282.4" y="1006.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.09%)</title><rect x="279.4" y="979.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="282.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$258/921370889.accept (1 samples, 0.09%)</title><rect x="279.4" y="963.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="282.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.09%)</title><rect x="279.4" y="947.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="282.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.09%)</title><rect x="279.4" y="931.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="282.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.09%)</title><rect x="279.4" y="915.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="282.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.09%)</title><rect x="279.4" y="899.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="282.4" y="910.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.09%)</title><rect x="279.4" y="883.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="282.4" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="279.4" y="867.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="282.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (5 samples, 0.43%)</title><rect x="280.4" y="979.0" width="5.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="283.4" y="990.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="280.4" y="963.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="283.4" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="280.4" y="947.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="283.4" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.09%)</title><rect x="280.4" y="931.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="283.4" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="280.4" y="915.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="283.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (4 samples, 0.34%)</title><rect x="281.4" y="963.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="284.4" y="974.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (4 samples, 0.34%)</title><rect x="281.4" y="947.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="284.4" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.34%)</title><rect x="281.4" y="931.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="284.4" y="942.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (4 samples, 0.34%)</title><rect x="281.4" y="915.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="284.4" y="926.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (4 samples, 0.34%)</title><rect x="281.4" y="899.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="284.4" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.26%)</title><rect x="282.4" y="883.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="285.4" y="894.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (3 samples, 0.26%)</title><rect x="282.4" y="867.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="285.4" y="878.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (3 samples, 0.26%)</title><rect x="282.4" y="851.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="285.4" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (3 samples, 0.26%)</title><rect x="282.4" y="835.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="285.4" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.17%)</title><rect x="282.4" y="819.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="285.4" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="282.4" y="803.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="285.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$260/154526262.test (1 samples, 0.09%)</title><rect x="282.4" y="787.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="285.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$260/154526262.test (1 samples, 0.09%)</title><rect x="283.4" y="803.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="286.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$fetchablePartitions$1 (1 samples, 0.09%)</title><rect x="283.4" y="787.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="286.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$259/1356047430.test (1 samples, 0.09%)</title><rect x="283.4" y="771.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="286.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$fetchablePartitions$6 (1 samples, 0.09%)</title><rect x="283.4" y="755.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="286.4" y="766.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.09%)</title><rect x="283.4" y="739.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="286.4" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.09%)</title><rect x="283.4" y="723.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="286.4" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="283.4" y="707.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="286.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (1 samples, 0.09%)</title><rect x="283.4" y="691.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="286.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates$$Lambda$237/1774162558.apply (1 samples, 0.09%)</title><rect x="284.4" y="819.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="287.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.lambda$stream$0 (1 samples, 0.09%)</title><rect x="284.4" y="803.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="287.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 0.17%)</title><rect x="285.4" y="979.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="288.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.09%)</title><rect x="287.4" y="1011.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="290.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="287.4" y="995.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="290.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="287.4" y="979.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="290.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="287.4" y="963.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="290.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.09%)</title><rect x="287.4" y="947.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="290.4" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.09%)</title><rect x="288.4" y="1059.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="291.4" y="1070.0"></text>
</g>
<g>
<title>edge_order(CFGEdge**, CFGEdge**) (1 samples, 0.09%)</title><rect x="289.4" y="1075.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="292.4" y="1086.0"></text>
</g>
<g>
<title>java/lang/Thread.run (707 samples, 60.22%)</title><rect x="290.4" y="1075.0" width="710.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="293.4" y="1086.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (707 samples, 60.22%)</title><rect x="290.4" y="1059.0" width="710.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="293.4" y="1070.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (707 samples, 60.22%)</title><rect x="290.4" y="1043.0" width="710.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="293.4" y="1054.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$285/1688671074.run (490 samples, 41.74%)</title><rect x="295.5" y="1027.0" width="492.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="298.5" y="1038.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambd..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$70 (490 samples, 41.74%)</title><rect x="295.5" y="1011.0" width="492.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="298.5" y="1022.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (490 samples, 41.74%)</title><rect x="295.5" y="995.0" width="492.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="298.5" y="1006.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (485 samples, 41.31%)</title><rect x="295.5" y="979.0" width="487.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="298.5" y="990.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.sch..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="304.5" y="963.0" width="1.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="307.5" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.17%)</title><rect x="305.5" y="963.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="308.5" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (180 samples, 15.33%)</title><rect x="307.5" y="963.0" width="180.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="310.5" y="974.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$42/815674463.extract (180 samples, 15.33%)</title><rect x="307.5" y="947.0" width="180.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="310.5" y="958.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (180 samples, 15.33%)</title><rect x="307.5" y="931.0" width="180.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="310.5" y="942.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.17%)</title><rect x="307.5" y="915.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="310.5" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="307.5" y="899.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="310.5" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="308.5" y="899.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="311.5" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="308.5" y="883.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="311.5" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="308.5" y="867.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="311.5" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="308.5" y="851.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="311.5" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="308.5" y="835.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="311.5" y="846.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.09%)</title><rect x="308.5" y="819.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="311.5" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.09%)</title><rect x="308.5" y="803.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="311.5" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.09%)</title><rect x="308.5" y="787.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="311.5" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (178 samples, 15.16%)</title><rect x="309.5" y="915.0" width="178.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="312.5" y="926.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (178 samples, 15.16%)</title><rect x="309.5" y="899.0" width="178.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="312.5" y="910.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (178 samples, 15.16%)</title><rect x="309.5" y="883.0" width="178.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="312.5" y="894.0">com/fasterxml/jackson/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (63 samples, 5.37%)</title><rect x="309.5" y="867.0" width="63.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="312.5" y="878.0">com/fas..</text>
</g>
<g>
<title>__clock_gettime (12 samples, 1.02%)</title><rect x="330.6" y="851.0" width="12.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="333.6" y="862.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.77%)</title><rect x="333.6" y="835.0" width="9.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="336.6" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (7 samples, 0.60%)</title><rect x="342.7" y="851.0" width="7.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="345.7" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.17%)</title><rect x="345.7" y="835.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="348.7" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="345.7" y="819.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="348.7" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.09%)</title><rect x="345.7" y="803.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="348.7" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="346.7" y="819.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="349.7" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="346.7" y="803.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="349.7" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="346.7" y="787.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="349.7" y="798.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.09%)</title><rect x="346.7" y="771.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="349.7" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (2 samples, 0.17%)</title><rect x="347.7" y="835.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="350.7" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.17%)</title><rect x="347.7" y="819.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="350.7" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.17%)</title><rect x="347.7" y="803.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="350.7" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.17%)</title><rect x="347.7" y="787.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="350.7" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.17%)</title><rect x="347.7" y="771.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="350.7" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.17%)</title><rect x="347.7" y="755.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="350.7" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (23 samples, 1.96%)</title><rect x="349.7" y="851.0" width="23.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="352.7" y="862.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (22 samples, 1.87%)</title><rect x="349.7" y="835.0" width="22.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="352.7" y="846.0">c..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="355.8" y="819.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="358.8" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="355.8" y="803.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="358.8" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="355.8" y="787.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="358.8" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (8 samples, 0.68%)</title><rect x="356.8" y="819.0" width="8.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="359.8" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (4 samples, 0.34%)</title><rect x="356.8" y="803.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="359.8" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (4 samples, 0.34%)</title><rect x="356.8" y="787.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="359.8" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (4 samples, 0.34%)</title><rect x="356.8" y="771.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="359.8" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.17%)</title><rect x="358.8" y="755.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="361.8" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="358.8" y="739.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="361.8" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="358.8" y="723.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="361.8" y="734.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="358.8" y="707.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="361.8" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.09%)</title><rect x="358.8" y="691.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="361.8" y="702.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.09%)</title><rect x="358.8" y="675.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="361.8" y="686.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.09%)</title><rect x="358.8" y="659.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="361.8" y="670.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.09%)</title><rect x="358.8" y="643.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="361.8" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="359.8" y="739.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="362.8" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="360.8" y="803.0" width="1.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="363.8" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="360.8" y="787.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="363.8" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (3 samples, 0.26%)</title><rect x="361.8" y="803.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="364.8" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (7 samples, 0.60%)</title><rect x="364.8" y="819.0" width="7.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="367.8" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (7 samples, 0.60%)</title><rect x="364.8" y="803.0" width="7.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="367.8" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (1 samples, 0.09%)</title><rect x="364.8" y="787.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="367.8" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="364.8" y="771.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="367.8" y="782.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="364.8" y="755.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="367.8" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="364.8" y="739.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="367.8" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="364.8" y="723.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="367.8" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (6 samples, 0.51%)</title><rect x="365.8" y="787.0" width="6.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="368.8" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.09%)</title><rect x="371.8" y="835.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="374.8" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (104 samples, 8.86%)</title><rect x="372.8" y="867.0" width="104.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="375.8" y="878.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.09%)</title><rect x="374.9" y="851.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="377.9" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (1 samples, 0.09%)</title><rect x="375.9" y="851.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="378.9" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (3 samples, 0.26%)</title><rect x="376.9" y="851.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="379.9" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.26%)</title><rect x="376.9" y="835.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="379.9" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (8 samples, 0.68%)</title><rect x="379.9" y="851.0" width="8.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="382.9" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (8 samples, 0.68%)</title><rect x="379.9" y="835.0" width="8.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="382.9" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (8 samples, 0.68%)</title><rect x="379.9" y="819.0" width="8.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="382.9" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (7 samples, 0.60%)</title><rect x="380.9" y="803.0" width="7.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="383.9" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (3 samples, 0.26%)</title><rect x="384.9" y="787.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="387.9" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (7 samples, 0.60%)</title><rect x="387.9" y="851.0" width="7.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="390.9" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 0.26%)</title><rect x="391.9" y="835.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="394.9" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (79 samples, 6.73%)</title><rect x="395.0" y="851.0" width="79.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="398.0" y="862.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (25 samples, 2.13%)</title><rect x="397.0" y="835.0" width="25.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="400.0" y="846.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (8 samples, 0.68%)</title><rect x="407.0" y="819.0" width="8.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="410.0" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (8 samples, 0.68%)</title><rect x="407.0" y="803.0" width="8.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="410.0" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (8 samples, 0.68%)</title><rect x="407.0" y="787.0" width="8.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="410.0" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.09%)</title><rect x="415.1" y="819.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="418.1" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.09%)</title><rect x="415.1" y="803.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="418.1" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (6 samples, 0.51%)</title><rect x="416.1" y="819.0" width="6.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="419.1" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 0.17%)</title><rect x="422.1" y="835.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="425.1" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (50 samples, 4.26%)</title><rect x="424.1" y="835.0" width="50.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="427.1" y="846.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (50 samples, 4.26%)</title><rect x="424.1" y="819.0" width="50.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="427.1" y="830.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (50 samples, 4.26%)</title><rect x="424.1" y="803.0" width="50.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="427.1" y="814.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (16 samples, 1.36%)</title><rect x="428.1" y="787.0" width="16.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="431.1" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (7 samples, 0.60%)</title><rect x="435.2" y="771.0" width="7.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="438.2" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (7 samples, 0.60%)</title><rect x="435.2" y="755.0" width="7.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="438.2" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (7 samples, 0.60%)</title><rect x="435.2" y="739.0" width="7.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="438.2" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (4 samples, 0.34%)</title><rect x="438.2" y="723.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="441.2" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.09%)</title><rect x="442.2" y="771.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="445.2" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.09%)</title><rect x="442.2" y="755.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="445.2" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.09%)</title><rect x="443.2" y="771.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="446.2" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (13 samples, 1.11%)</title><rect x="444.2" y="787.0" width="13.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="447.2" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (11 samples, 0.94%)</title><rect x="446.2" y="771.0" width="11.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="449.2" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (11 samples, 0.94%)</title><rect x="446.2" y="755.0" width="11.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="449.2" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (11 samples, 0.94%)</title><rect x="446.2" y="739.0" width="11.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="449.2" y="750.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (11 samples, 0.94%)</title><rect x="446.2" y="723.0" width="11.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="449.2" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.09%)</title><rect x="457.3" y="787.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="460.3" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (4 samples, 0.34%)</title><rect x="458.3" y="787.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="461.3" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (4 samples, 0.34%)</title><rect x="458.3" y="771.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="461.3" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (4 samples, 0.34%)</title><rect x="458.3" y="755.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="461.3" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (4 samples, 0.34%)</title><rect x="458.3" y="739.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="461.3" y="750.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (4 samples, 0.34%)</title><rect x="458.3" y="723.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="461.3" y="734.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (4 samples, 0.34%)</title><rect x="458.3" y="707.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="461.3" y="718.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (4 samples, 0.34%)</title><rect x="458.3" y="691.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="461.3" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (9 samples, 0.77%)</title><rect x="462.3" y="787.0" width="9.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="465.3" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.get (9 samples, 0.77%)</title><rect x="462.3" y="771.0" width="9.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="465.3" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (9 samples, 0.77%)</title><rect x="462.3" y="755.0" width="9.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="465.3" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.09%)</title><rect x="469.3" y="739.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="472.3" y="750.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.09%)</title><rect x="470.3" y="739.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="473.3" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (3 samples, 0.26%)</title><rect x="471.3" y="787.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="474.3" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.checkUnresolvedObjectId (1 samples, 0.09%)</title><rect x="474.4" y="851.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="477.4" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.17%)</title><rect x="475.4" y="851.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="478.4" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (11 samples, 0.94%)</title><rect x="477.4" y="867.0" width="11.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="480.4" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.09%)</title><rect x="478.4" y="851.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="481.4" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (9 samples, 0.77%)</title><rect x="479.4" y="851.0" width="9.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="482.4" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (9 samples, 0.77%)</title><rect x="479.4" y="835.0" width="9.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="482.4" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (9 samples, 0.77%)</title><rect x="479.4" y="819.0" width="9.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="482.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (9 samples, 0.77%)</title><rect x="479.4" y="803.0" width="9.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="482.4" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (264 samples, 22.49%)</title><rect x="488.4" y="963.0" width="265.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="491.4" y="974.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (43 samples, 3.66%)</title><rect x="490.4" y="947.0" width="43.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="493.4" y="958.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (2 samples, 0.17%)</title><rect x="491.4" y="931.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="494.4" y="942.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (40 samples, 3.41%)</title><rect x="493.5" y="931.0" width="40.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="496.5" y="942.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (38 samples, 3.24%)</title><rect x="495.5" y="915.0" width="38.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="498.5" y="926.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 0.34%)</title><rect x="497.5" y="899.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="500.5" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 0.34%)</title><rect x="497.5" y="883.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="500.5" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (4 samples, 0.34%)</title><rect x="497.5" y="867.0" width="4.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="500.5" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 0.34%)</title><rect x="497.5" y="851.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="500.5" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (27 samples, 2.30%)</title><rect x="501.5" y="899.0" width="27.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="504.5" y="910.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (27 samples, 2.30%)</title><rect x="501.5" y="883.0" width="27.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="504.5" y="894.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (27 samples, 2.30%)</title><rect x="501.5" y="867.0" width="27.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="504.5" y="878.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (27 samples, 2.30%)</title><rect x="501.5" y="851.0" width="27.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="504.5" y="862.0">j..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (5 samples, 0.43%)</title><rect x="528.6" y="899.0" width="5.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="531.6" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.17%)</title><rect x="533.7" y="947.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="536.7" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.17%)</title><rect x="533.7" y="931.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="536.7" y="942.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.17%)</title><rect x="533.7" y="915.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="536.7" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (147 samples, 12.52%)</title><rect x="535.7" y="947.0" width="147.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="538.7" y="958.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (147 samples, 12.52%)</title><rect x="535.7" y="931.0" width="147.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="538.7" y="942.0">com/linecorp/decato..</text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.34%)</title><rect x="544.7" y="915.0" width="4.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="547.7" y="926.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.26%)</title><rect x="545.7" y="899.0" width="3.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="548.7" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (56 samples, 4.77%)</title><rect x="548.7" y="915.0" width="56.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="551.7" y="926.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (55 samples, 4.68%)</title><rect x="548.7" y="899.0" width="55.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="551.7" y="910.0">java/..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (39 samples, 3.32%)</title><rect x="554.8" y="883.0" width="39.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="557.8" y="894.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.09%)</title><rect x="563.8" y="867.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="566.8" y="878.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (22 samples, 1.87%)</title><rect x="564.8" y="867.0" width="22.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="567.8" y="878.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (22 samples, 1.87%)</title><rect x="564.8" y="851.0" width="22.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="567.8" y="862.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (22 samples, 1.87%)</title><rect x="564.8" y="835.0" width="22.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="567.8" y="846.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (12 samples, 1.02%)</title><rect x="570.9" y="819.0" width="12.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="573.9" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (8 samples, 0.68%)</title><rect x="570.9" y="803.0" width="8.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="573.9" y="814.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.09%)</title><rect x="570.9" y="787.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="573.9" y="798.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (7 samples, 0.60%)</title><rect x="571.9" y="787.0" width="7.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="574.9" y="798.0"></text>
</g>
<g>
<title>RuntimeStub::caller_must_gc_arguments(JavaThread*) const (1 samples, 0.09%)</title><rect x="572.9" y="771.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="575.9" y="782.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (5 samples, 0.43%)</title><rect x="573.9" y="771.0" width="5.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="576.9" y="782.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="573.9" y="755.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="576.9" y="766.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.09%)</title><rect x="574.9" y="755.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="577.9" y="766.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.09%)</title><rect x="575.9" y="755.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="578.9" y="766.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (2 samples, 0.17%)</title><rect x="576.9" y="755.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="579.9" y="766.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.34%)</title><rect x="578.9" y="803.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="581.9" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.26%)</title><rect x="578.9" y="787.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="581.9" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="578.9" y="771.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="581.9" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="578.9" y="755.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="581.9" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="579.9" y="771.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="582.9" y="782.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="580.9" y="771.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="583.9" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.09%)</title><rect x="580.9" y="755.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="583.9" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.09%)</title><rect x="581.9" y="787.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="584.9" y="798.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.34%)</title><rect x="582.9" y="819.0" width="4.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="585.9" y="830.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.34%)</title><rect x="586.9" y="867.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="589.9" y="878.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.17%)</title><rect x="591.0" y="867.0" width="2.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="594.0" y="878.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="593.0" y="867.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="596.0" y="878.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.17%)</title><rect x="594.0" y="883.0" width="2.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="597.0" y="894.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (8 samples, 0.68%)</title><rect x="596.0" y="883.0" width="8.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="599.0" y="894.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.09%)</title><rect x="604.0" y="899.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="607.0" y="910.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.09%)</title><rect x="604.0" y="883.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="607.0" y="894.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.09%)</title><rect x="604.0" y="867.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="607.0" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="604.0" y="851.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="607.0" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="604.0" y="835.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="607.0" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.17%)</title><rect x="605.0" y="915.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="608.0" y="926.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (8 samples, 0.68%)</title><rect x="607.0" y="915.0" width="8.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="610.0" y="926.0"></text>
</g>
<g>
<title>java/lang/Long.toString (8 samples, 0.68%)</title><rect x="607.0" y="899.0" width="8.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="610.0" y="910.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (8 samples, 0.68%)</title><rect x="607.0" y="883.0" width="8.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="610.0" y="894.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (68 samples, 5.79%)</title><rect x="615.1" y="915.0" width="68.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="618.1" y="926.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (67 samples, 5.71%)</title><rect x="616.1" y="899.0" width="67.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="619.1" y="910.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (6 samples, 0.51%)</title><rect x="616.1" y="883.0" width="6.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="619.1" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (6 samples, 0.51%)</title><rect x="616.1" y="867.0" width="6.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="619.1" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (6 samples, 0.51%)</title><rect x="616.1" y="851.0" width="6.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="619.1" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (6 samples, 0.51%)</title><rect x="616.1" y="835.0" width="6.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="619.1" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.26%)</title><rect x="622.1" y="883.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="625.1" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.26%)</title><rect x="622.1" y="867.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="625.1" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.26%)</title><rect x="622.1" y="851.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="625.1" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.26%)</title><rect x="622.1" y="835.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="625.1" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.17%)</title><rect x="623.1" y="819.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="626.1" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (58 samples, 4.94%)</title><rect x="625.1" y="883.0" width="58.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="628.1" y="894.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.put (51 samples, 4.34%)</title><rect x="632.2" y="867.0" width="51.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="635.2" y="878.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.putVal (26 samples, 2.21%)</title><rect x="657.3" y="851.0" width="26.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="660.3" y="862.0">j..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.09%)</title><rect x="675.4" y="835.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="678.4" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (5 samples, 0.43%)</title><rect x="676.4" y="835.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="679.4" y="846.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.17%)</title><rect x="681.4" y="835.0" width="2.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="684.4" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (60 samples, 5.11%)</title><rect x="683.4" y="947.0" width="60.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="686.4" y="958.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (1 samples, 0.09%)</title><rect x="683.4" y="931.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="686.4" y="942.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.09%)</title><rect x="683.4" y="915.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="686.4" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (58 samples, 4.94%)</title><rect x="684.4" y="931.0" width="58.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="687.4" y="942.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$207/1551791257.process (25 samples, 2.13%)</title><rect x="685.4" y="915.0" width="25.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="688.4" y="926.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (24 samples, 2.04%)</title><rect x="685.4" y="899.0" width="24.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="688.4" y="910.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (22 samples, 1.87%)</title><rect x="685.4" y="883.0" width="22.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="688.4" y="894.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.17%)</title><rect x="695.5" y="867.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="698.5" y="878.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.17%)</title><rect x="695.5" y="851.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="698.5" y="862.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.17%)</title><rect x="695.5" y="835.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="698.5" y="846.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.17%)</title><rect x="695.5" y="819.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="698.5" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.17%)</title><rect x="695.5" y="803.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="698.5" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (9 samples, 0.77%)</title><rect x="697.5" y="867.0" width="9.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="700.5" y="878.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.43%)</title><rect x="701.5" y="851.0" width="5.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="704.5" y="862.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.43%)</title><rect x="701.5" y="835.0" width="5.0" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="704.5" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.incrementAndGet (1 samples, 0.09%)</title><rect x="706.5" y="867.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="709.5" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.17%)</title><rect x="707.5" y="883.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="710.5" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.17%)</title><rect x="707.5" y="867.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="710.5" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.17%)</title><rect x="707.5" y="851.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="710.5" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.17%)</title><rect x="707.5" y="835.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="710.5" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.17%)</title><rect x="707.5" y="819.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="710.5" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.09%)</title><rect x="709.6" y="899.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="712.6" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (5 samples, 0.43%)</title><rect x="710.6" y="915.0" width="5.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="713.6" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.26%)</title><rect x="715.6" y="915.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="718.6" y="926.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.26%)</title><rect x="715.6" y="899.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="718.6" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.loggingExceptions (3 samples, 0.26%)</title><rect x="718.6" y="915.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="721.6" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$287/60705182.get (3 samples, 0.26%)</title><rect x="718.6" y="899.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="721.6" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$77 (3 samples, 0.26%)</title><rect x="718.6" y="883.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="721.6" y="894.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/789653861.linkToTargetMethod (1 samples, 0.09%)</title><rect x="721.6" y="915.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="724.6" y="926.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (1 samples, 0.09%)</title><rect x="721.6" y="899.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="724.6" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$289/1619232020.get$Lambda (1 samples, 0.09%)</title><rect x="721.6" y="883.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="724.6" y="894.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.09%)</title><rect x="722.6" y="915.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="725.6" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.09%)</title><rect x="722.6" y="899.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="725.6" y="910.0"></text>
</g>
<g>
<title>java/util/ArrayList.isEmpty (1 samples, 0.09%)</title><rect x="722.6" y="883.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="725.6" y="894.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (12 samples, 1.02%)</title><rect x="723.6" y="915.0" width="12.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="726.6" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (10 samples, 0.85%)</title><rect x="725.6" y="899.0" width="10.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="728.6" y="910.0"></text>
</g>
<g>
<title>itable stub (8 samples, 0.68%)</title><rect x="725.6" y="883.0" width="8.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="728.6" y="894.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.17%)</title><rect x="733.7" y="883.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="736.7" y="894.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.17%)</title><rect x="735.7" y="915.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="738.7" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (5 samples, 0.43%)</title><rect x="737.7" y="915.0" width="5.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="740.7" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.09%)</title><rect x="741.7" y="899.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="744.7" y="910.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.09%)</title><rect x="741.7" y="883.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="744.7" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="741.7" y="867.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="744.7" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="741.7" y="851.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="744.7" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="741.7" y="835.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="744.7" y="846.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.09%)</title><rect x="742.7" y="931.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="745.7" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 0.85%)</title><rect x="743.7" y="947.0" width="10.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="746.7" y="958.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.26%)</title><rect x="744.7" y="931.0" width="3.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="747.7" y="942.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.26%)</title><rect x="744.7" y="915.0" width="3.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="747.7" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 0.51%)</title><rect x="747.8" y="931.0" width="6.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="750.8" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 0.34%)</title><rect x="749.8" y="915.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="752.8" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$290/1133601864.accept (3 samples, 0.26%)</title><rect x="749.8" y="899.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="752.8" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$62 (3 samples, 0.26%)</title><rect x="749.8" y="883.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="752.8" y="894.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (3 samples, 0.26%)</title><rect x="749.8" y="867.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="752.8" y="878.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (3 samples, 0.26%)</title><rect x="749.8" y="851.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="752.8" y="862.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.17%)</title><rect x="750.8" y="835.0" width="2.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="753.8" y="846.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.17%)</title><rect x="750.8" y="819.0" width="2.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="753.8" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$291/1130270980.accept (1 samples, 0.09%)</title><rect x="752.8" y="899.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="755.8" y="910.0"></text>
</g>
<g>
<title>_new_instance_Java (1 samples, 0.09%)</title><rect x="752.8" y="883.0" width="1.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="755.8" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (22 samples, 1.87%)</title><rect x="753.8" y="963.0" width="22.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="756.8" y="974.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (21 samples, 1.79%)</title><rect x="754.8" y="947.0" width="21.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="757.8" y="958.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (20 samples, 1.70%)</title><rect x="755.8" y="931.0" width="20.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="758.8" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$291/1130270980.accept (20 samples, 1.70%)</title><rect x="755.8" y="915.0" width="20.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="758.8" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$61 (20 samples, 1.70%)</title><rect x="755.8" y="899.0" width="20.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="758.8" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$283/1084743089.complete (20 samples, 1.70%)</title><rect x="755.8" y="883.0" width="20.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="758.8" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$38 (20 samples, 1.70%)</title><rect x="755.8" y="867.0" width="20.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="758.8" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$282/647136693.complete (20 samples, 1.70%)</title><rect x="755.8" y="851.0" width="20.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="758.8" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$68 (20 samples, 1.70%)</title><rect x="755.8" y="835.0" width="20.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="758.8" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (20 samples, 1.70%)</title><rect x="755.8" y="819.0" width="20.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="758.8" y="830.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (20 samples, 1.70%)</title><rect x="755.8" y="803.0" width="20.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="758.8" y="814.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (20 samples, 1.70%)</title><rect x="755.8" y="787.0" width="20.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="758.8" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.09%)</title><rect x="774.9" y="771.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="777.9" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.09%)</title><rect x="774.9" y="755.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="777.9" y="766.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.60%)</title><rect x="775.9" y="963.0" width="7.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="778.9" y="974.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.60%)</title><rect x="775.9" y="947.0" width="7.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="778.9" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (5 samples, 0.43%)</title><rect x="782.9" y="979.0" width="5.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="785.9" y="990.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.34%)</title><rect x="783.9" y="963.0" width="4.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="786.9" y="974.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.34%)</title><rect x="783.9" y="947.0" width="4.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="786.9" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (11 samples, 0.94%)</title><rect x="788.0" y="1027.0" width="11.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="791.0" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (11 samples, 0.94%)</title><rect x="788.0" y="1011.0" width="11.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="791.0" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (11 samples, 0.94%)</title><rect x="788.0" y="995.0" width="11.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="791.0" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (11 samples, 0.94%)</title><rect x="788.0" y="979.0" width="11.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="791.0" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (201 samples, 17.12%)</title><rect x="799.0" y="1027.0" width="202.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="802.0" y="1038.0">java/util/concurrent/Threa..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (197 samples, 16.78%)</title><rect x="803.0" y="1011.0" width="198.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="806.0" y="1022.0">java/util/concurrent/Linke..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (169 samples, 14.40%)</title><rect x="805.0" y="995.0" width="169.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="808.0" y="1006.0">java/util/concurrent/l..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.17%)</title><rect x="813.1" y="979.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="816.1" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.09%)</title><rect x="814.1" y="963.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="817.1" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (14 samples, 1.19%)</title><rect x="815.1" y="979.0" width="14.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="818.1" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (8 samples, 0.68%)</title><rect x="829.2" y="979.0" width="8.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="832.2" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 0.68%)</title><rect x="829.2" y="963.0" width="8.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="832.2" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 0.68%)</title><rect x="829.2" y="947.0" width="8.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="832.2" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 0.68%)</title><rect x="829.2" y="931.0" width="8.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="832.2" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (137 samples, 11.67%)</title><rect x="837.2" y="979.0" width="137.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="840.2" y="990.0">java/util/concurr..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (137 samples, 11.67%)</title><rect x="837.2" y="963.0" width="137.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="840.2" y="974.0">sun/misc/Unsafe.p..</text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="841.2" y="947.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="844.2" y="958.0"></text>
</g>
<g>
<title>Unsafe_Park (129 samples, 10.99%)</title><rect x="842.2" y="947.0" width="129.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="845.2" y="958.0">Unsafe_Park</text>
</g>
<g>
<title>Parker::park(bool, long) (22 samples, 1.87%)</title><rect x="845.2" y="931.0" width="22.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="848.2" y="942.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (4 samples, 0.34%)</title><rect x="853.3" y="915.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="856.3" y="926.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.26%)</title><rect x="853.3" y="899.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="856.3" y="910.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (3 samples, 0.26%)</title><rect x="853.3" y="883.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="856.3" y="894.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="856.3" y="899.0" width="1.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="859.3" y="910.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.09%)</title><rect x="857.3" y="915.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="860.3" y="926.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="858.3" y="915.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="861.3" y="926.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (8 samples, 0.68%)</title><rect x="859.3" y="915.0" width="8.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="862.3" y="926.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.17%)</title><rect x="867.4" y="931.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="870.4" y="942.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.17%)</title><rect x="869.4" y="931.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="872.4" y="942.0"></text>
</g>
<g>
<title>_L_cond_lock_847 (1 samples, 0.09%)</title><rect x="871.4" y="931.0" width="1.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="874.4" y="942.0"></text>
</g>
<g>
<title>__lll_lock_wait (14 samples, 1.19%)</title><rect x="872.4" y="931.0" width="14.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="875.4" y="942.0"></text>
</g>
<g>
<title>__lll_unlock_wake (22 samples, 1.87%)</title><rect x="886.5" y="931.0" width="22.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="889.5" y="942.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (49 samples, 4.17%)</title><rect x="908.6" y="931.0" width="49.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="911.6" y="942.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.17%)</title><rect x="957.8" y="931.0" width="2.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="960.8" y="942.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.17%)</title><rect x="959.8" y="931.0" width="2.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="962.8" y="942.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.17%)</title><rect x="961.8" y="931.0" width="2.1" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="964.8" y="942.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.17%)</title><rect x="963.9" y="931.0" width="2.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="966.9" y="942.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (4 samples, 0.34%)</title><rect x="965.9" y="931.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="968.9" y="942.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.17%)</title><rect x="969.9" y="931.0" width="2.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="972.9" y="942.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.26%)</title><rect x="971.9" y="947.0" width="3.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="974.9" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (26 samples, 2.21%)</title><rect x="974.9" y="995.0" width="26.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="977.9" y="1006.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (26 samples, 2.21%)</title><rect x="974.9" y="979.0" width="26.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="977.9" y="990.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (26 samples, 2.21%)</title><rect x="974.9" y="963.0" width="26.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="977.9" y="974.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (26 samples, 2.21%)</title><rect x="974.9" y="947.0" width="26.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="977.9" y="958.0">j..</text>
</g>
<g>
<title>start_thread (188 samples, 16.01%)</title><rect x="1001.0" y="1075.0" width="189.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1004.0" y="1086.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (188 samples, 16.01%)</title><rect x="1001.0" y="1059.0" width="189.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1004.0" y="1070.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (21 samples, 1.79%)</title><rect x="1001.0" y="1043.0" width="21.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1004.0" y="1054.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (4 samples, 0.34%)</title><rect x="1001.0" y="1027.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1004.0" y="1038.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 0.34%)</title><rect x="1001.0" y="1011.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1004.0" y="1022.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.34%)</title><rect x="1001.0" y="995.0" width="4.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1004.0" y="1006.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (16 samples, 1.36%)</title><rect x="1005.1" y="1027.0" width="16.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1008.1" y="1038.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 0.34%)</title><rect x="1005.1" y="1011.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1008.1" y="1022.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.09%)</title><rect x="1005.1" y="995.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1008.1" y="1006.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.09%)</title><rect x="1005.1" y="979.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1008.1" y="990.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.09%)</title><rect x="1006.1" y="995.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1009.1" y="1006.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.17%)</title><rect x="1007.1" y="995.0" width="2.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1010.1" y="1006.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (3 samples, 0.26%)</title><rect x="1009.1" y="1011.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1012.1" y="1022.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.26%)</title><rect x="1009.1" y="995.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1012.1" y="1006.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.09%)</title><rect x="1009.1" y="979.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1012.1" y="990.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (2 samples, 0.17%)</title><rect x="1010.1" y="979.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1013.1" y="990.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (9 samples, 0.77%)</title><rect x="1012.1" y="1011.0" width="9.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1015.1" y="1022.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (9 samples, 0.77%)</title><rect x="1012.1" y="995.0" width="9.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1015.1" y="1006.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (8 samples, 0.68%)</title><rect x="1012.1" y="979.0" width="8.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1015.1" y="990.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (8 samples, 0.68%)</title><rect x="1012.1" y="963.0" width="8.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1015.1" y="974.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (8 samples, 0.68%)</title><rect x="1012.1" y="947.0" width="8.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1015.1" y="958.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (8 samples, 0.68%)</title><rect x="1012.1" y="931.0" width="8.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1015.1" y="942.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (5 samples, 0.43%)</title><rect x="1015.1" y="915.0" width="5.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1018.1" y="926.0"></text>
</g>
<g>
<title>G1BlockOffsetArray::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.09%)</title><rect x="1015.1" y="899.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1018.1" y="910.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.09%)</title><rect x="1016.1" y="899.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1019.1" y="910.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.09%)</title><rect x="1017.1" y="899.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1020.1" y="910.0"></text>
</g>
<g>
<title>InstanceMirrorKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.09%)</title><rect x="1018.1" y="899.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1021.1" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.09%)</title><rect x="1018.1" y="883.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1021.1" y="894.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.09%)</title><rect x="1019.1" y="899.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1022.1" y="910.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.09%)</title><rect x="1020.1" y="979.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1023.1" y="990.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.09%)</title><rect x="1021.1" y="1027.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1024.1" y="1038.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.09%)</title><rect x="1021.1" y="1011.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1024.1" y="1022.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.09%)</title><rect x="1021.1" y="995.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1024.1" y="1006.0"></text>
</g>
<g>
<title>JavaThread::run() (164 samples, 13.97%)</title><rect x="1022.1" y="1043.0" width="164.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1025.1" y="1054.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (164 samples, 13.97%)</title><rect x="1022.1" y="1027.0" width="164.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1025.1" y="1038.0">JavaThread::thread_ma..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (163 samples, 13.88%)</title><rect x="1022.1" y="1011.0" width="163.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1025.1" y="1022.0">CompileBroker::compil..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (162 samples, 13.80%)</title><rect x="1022.1" y="995.0" width="162.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1025.1" y="1006.0">CompileBroker::invoke..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (161 samples, 13.71%)</title><rect x="1022.1" y="979.0" width="161.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1025.1" y="990.0">C2Compiler::compile_m..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (161 samples, 13.71%)</title><rect x="1022.1" y="963.0" width="161.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1025.1" y="974.0">Compile::Compile(ciEn..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.09%)</title><rect x="1022.1" y="947.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1025.1" y="958.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.09%)</title><rect x="1022.1" y="931.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1025.1" y="942.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1022.1" y="915.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1025.1" y="926.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1022.1" y="899.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1025.1" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1022.1" y="883.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1025.1" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::JsrSet::JsrSet(Arena*, int) (1 samples, 0.09%)</title><rect x="1022.1" y="867.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1025.1" y="878.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (64 samples, 5.45%)</title><rect x="1023.2" y="947.0" width="64.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1026.2" y="958.0">Compile..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.17%)</title><rect x="1023.2" y="931.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1026.2" y="942.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.09%)</title><rect x="1023.2" y="915.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1026.2" y="926.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.09%)</title><rect x="1024.2" y="915.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1027.2" y="926.0"></text>
</g>
<g>
<title>CodeBuffer::initialize(int, int) (1 samples, 0.09%)</title><rect x="1024.2" y="899.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1027.2" y="910.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.09%)</title><rect x="1024.2" y="883.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1027.2" y="894.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.09%)</title><rect x="1024.2" y="867.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1027.2" y="878.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.09%)</title><rect x="1024.2" y="851.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1027.2" y="862.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (4 samples, 0.34%)</title><rect x="1025.2" y="931.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1028.2" y="942.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.09%)</title><rect x="1026.2" y="915.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1029.2" y="926.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.09%)</title><rect x="1026.2" y="899.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1029.2" y="910.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.09%)</title><rect x="1026.2" y="883.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1029.2" y="894.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.09%)</title><rect x="1027.2" y="915.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1030.2" y="926.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.09%)</title><rect x="1027.2" y="899.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1030.2" y="910.0"></text>
</g>
<g>
<title>decodeHeapOopNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.09%)</title><rect x="1028.2" y="915.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1031.2" y="926.0"></text>
</g>
<g>
<title>Assembler::movq(RegisterImpl*, RegisterImpl*) (1 samples, 0.09%)</title><rect x="1028.2" y="899.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1031.2" y="910.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 0.51%)</title><rect x="1029.2" y="931.0" width="6.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1032.2" y="942.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (6 samples, 0.51%)</title><rect x="1029.2" y="915.0" width="6.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1032.2" y="926.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 0.26%)</title><rect x="1031.2" y="899.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1034.2" y="910.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.09%)</title><rect x="1034.2" y="899.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1037.2" y="910.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.09%)</title><rect x="1034.2" y="883.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1037.2" y="894.0"></text>
</g>
<g>
<title>Node::operator new(unsigned long, Compile*) (1 samples, 0.09%)</title><rect x="1034.2" y="867.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1037.2" y="878.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.09%)</title><rect x="1035.2" y="931.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1038.2" y="942.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.09%)</title><rect x="1035.2" y="915.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1038.2" y="926.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.26%)</title><rect x="1036.2" y="931.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1039.2" y="942.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.26%)</title><rect x="1036.2" y="915.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1039.2" y="926.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.17%)</title><rect x="1036.2" y="899.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1039.2" y="910.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.09%)</title><rect x="1037.2" y="883.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1040.2" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1038.2" y="899.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1041.2" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (48 samples, 4.09%)</title><rect x="1039.2" y="931.0" width="48.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1042.2" y="942.0">Phas..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.09%)</title><rect x="1039.2" y="915.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1042.2" y="926.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.17%)</title><rect x="1040.2" y="915.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1043.2" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.26%)</title><rect x="1042.2" y="915.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1045.2" y="926.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1042.2" y="899.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1045.2" y="910.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.17%)</title><rect x="1043.3" y="899.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1046.3" y="910.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.17%)</title><rect x="1043.3" y="883.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1046.3" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 0.26%)</title><rect x="1045.3" y="915.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1048.3" y="926.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1045.3" y="899.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1048.3" y="910.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.17%)</title><rect x="1046.3" y="899.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1049.3" y="910.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.09%)</title><rect x="1046.3" y="883.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1049.3" y="894.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1047.3" y="883.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1050.3" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (9 samples, 0.77%)</title><rect x="1048.3" y="915.0" width="9.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1051.3" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.09%)</title><rect x="1055.3" y="899.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1058.3" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::insert_proj(Block*, unsigned int, Node*, unsigned int) (1 samples, 0.09%)</title><rect x="1055.3" y="883.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1058.3" y="894.0"></text>
</g>
<g>
<title>PhiNode::out_RegMask() const (1 samples, 0.09%)</title><rect x="1056.3" y="899.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1059.3" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (10 samples, 0.85%)</title><rect x="1057.3" y="915.0" width="10.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1060.3" y="926.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.17%)</title><rect x="1062.4" y="899.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1065.4" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.26%)</title><rect x="1064.4" y="899.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1067.4" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.09%)</title><rect x="1067.4" y="915.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1070.4" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.09%)</title><rect x="1067.4" y="899.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1070.4" y="910.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1067.4" y="883.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1070.4" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 0.34%)</title><rect x="1068.4" y="915.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1071.4" y="926.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.09%)</title><rect x="1070.4" y="899.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1073.4" y="910.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1071.4" y="899.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1074.4" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.17%)</title><rect x="1072.4" y="915.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1075.4" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.09%)</title><rect x="1073.4" y="899.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1076.4" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.09%)</title><rect x="1074.4" y="915.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1077.4" y="926.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.09%)</title><rect x="1075.4" y="915.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1078.4" y="926.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.09%)</title><rect x="1075.4" y="899.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1078.4" y="910.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (3 samples, 0.26%)</title><rect x="1076.4" y="915.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1079.4" y="926.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.17%)</title><rect x="1077.4" y="899.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1080.4" y="910.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.17%)</title><rect x="1079.4" y="915.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1082.4" y="926.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.17%)</title><rect x="1079.4" y="899.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1082.4" y="910.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 0.43%)</title><rect x="1081.4" y="915.0" width="5.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1084.4" y="926.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1085.5" y="899.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1088.5" y="910.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.09%)</title><rect x="1086.5" y="915.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1089.5" y="926.0"></text>
</g>
<g>
<title>Compile::Optimize() (83 samples, 7.07%)</title><rect x="1087.5" y="947.0" width="83.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1090.5" y="958.0">Compile::..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.09%)</title><rect x="1087.5" y="931.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1090.5" y="942.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.09%)</title><rect x="1087.5" y="915.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1090.5" y="926.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (2 samples, 0.17%)</title><rect x="1088.5" y="931.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1091.5" y="942.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.09%)</title><rect x="1088.5" y="915.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1091.5" y="926.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.09%)</title><rect x="1088.5" y="899.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1091.5" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1089.5" y="915.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1092.5" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1089.5" y="899.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1092.5" y="910.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1089.5" y="883.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1092.5" y="894.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1089.5" y="867.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1092.5" y="878.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1089.5" y="851.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1092.5" y="862.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1089.5" y="835.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1092.5" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (6 samples, 0.51%)</title><rect x="1090.5" y="931.0" width="6.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1093.5" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (6 samples, 0.51%)</title><rect x="1090.5" y="915.0" width="6.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1093.5" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::add_call_node(CallNode*) (1 samples, 0.09%)</title><rect x="1090.5" y="899.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1093.5" y="910.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.09%)</title><rect x="1090.5" y="883.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1093.5" y="894.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.09%)</title><rect x="1090.5" y="867.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1093.5" y="878.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.09%)</title><rect x="1090.5" y="851.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1093.5" y="862.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.09%)</title><rect x="1090.5" y="835.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1093.5" y="846.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1090.5" y="819.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1093.5" y="830.0"></text>
</g>
<g>
<title>ciBytecodeStream::has_appendix() (1 samples, 0.09%)</title><rect x="1090.5" y="803.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1093.5" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.09%)</title><rect x="1091.5" y="899.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1094.5" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (4 samples, 0.34%)</title><rect x="1092.5" y="899.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1095.5" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1093.5" y="883.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1096.5" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1093.5" y="867.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1096.5" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1093.5" y="851.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1096.5" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1093.5" y="835.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1096.5" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1093.5" y="819.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1096.5" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1093.5" y="803.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1096.5" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1093.5" y="787.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1096.5" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1093.5" y="771.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1096.5" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1093.5" y="755.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1096.5" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1093.5" y="739.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1096.5" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1093.5" y="723.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1096.5" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1093.5" y="707.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1096.5" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1093.5" y="691.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1096.5" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1093.5" y="675.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1096.5" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1093.5" y="659.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1096.5" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1093.5" y="643.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1096.5" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1093.5" y="627.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1096.5" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1093.5" y="611.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1096.5" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1093.5" y="595.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1096.5" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1093.5" y="579.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1096.5" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1093.5" y="563.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1096.5" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1093.5" y="547.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1096.5" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1093.5" y="531.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1096.5" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1093.5" y="515.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1096.5" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1093.5" y="499.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1096.5" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1093.5" y="483.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1096.5" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1093.5" y="467.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1096.5" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1093.5" y="451.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1096.5" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1093.5" y="435.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1096.5" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1093.5" y="419.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1096.5" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1093.5" y="403.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1096.5" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1093.5" y="387.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1096.5" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1093.5" y="371.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1096.5" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1093.5" y="355.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1096.5" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1093.5" y="339.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1096.5" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1093.5" y="323.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1096.5" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1093.5" y="307.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1096.5" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1093.5" y="291.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1096.5" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1093.5" y="275.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1096.5" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1093.5" y="259.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1096.5" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1093.5" y="243.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1096.5" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1093.5" y="227.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1096.5" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1093.5" y="211.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1096.5" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1093.5" y="195.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1096.5" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1093.5" y="179.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1096.5" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1093.5" y="163.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1096.5" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1093.5" y="147.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1096.5" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.09%)</title><rect x="1093.5" y="131.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1096.5" y="142.0"></text>
</g>
<g>
<title>PhiNode::make(Node*, Node*, Type const*, TypePtr const*) (1 samples, 0.09%)</title><rect x="1093.5" y="115.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1096.5" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1094.5" y="867.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1097.5" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1094.5" y="851.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1097.5" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1094.5" y="835.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1097.5" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1094.5" y="819.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1097.5" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1094.5" y="803.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1097.5" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1094.5" y="787.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1097.5" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1094.5" y="771.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1097.5" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1094.5" y="755.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1097.5" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1094.5" y="739.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1097.5" y="750.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1094.5" y="723.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1097.5" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.09%)</title><rect x="1095.5" y="883.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1098.5" y="894.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.09%)</title><rect x="1096.5" y="931.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1099.5" y="942.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.09%)</title><rect x="1096.5" y="915.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1099.5" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (58 samples, 4.94%)</title><rect x="1097.5" y="931.0" width="58.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1100.5" y="942.0">PhaseI..</text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.09%)</title><rect x="1097.5" y="915.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1100.5" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.09%)</title><rect x="1097.5" y="899.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1100.5" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (4 samples, 0.34%)</title><rect x="1098.5" y="915.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1101.5" y="926.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.09%)</title><rect x="1101.6" y="899.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1104.6" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.26%)</title><rect x="1102.6" y="915.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1105.6" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.09%)</title><rect x="1104.6" y="899.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1107.6" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (41 samples, 3.49%)</title><rect x="1105.6" y="915.0" width="41.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1108.6" y="926.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (38 samples, 3.24%)</title><rect x="1108.6" y="899.0" width="38.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1111.6" y="910.0">Pha..</text>
</g>
<g>
<title>Node::unique_ctrl_out() (1 samples, 0.09%)</title><rect x="1110.6" y="883.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1113.6" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.17%)</title><rect x="1111.6" y="883.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1114.6" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (33 samples, 2.81%)</title><rect x="1113.6" y="883.0" width="33.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1116.6" y="894.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.09%)</title><rect x="1141.8" y="867.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1144.8" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.17%)</title><rect x="1142.8" y="867.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1145.8" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.17%)</title><rect x="1144.8" y="867.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1147.8" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (3 samples, 0.26%)</title><rect x="1146.8" y="915.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1149.8" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.09%)</title><rect x="1148.8" y="899.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1151.8" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (4 samples, 0.34%)</title><rect x="1149.8" y="915.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.8" y="926.0"></text>
</g>
<g>
<title>CmpINode::Opcode() const (1 samples, 0.09%)</title><rect x="1150.8" y="899.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.8" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.09%)</title><rect x="1151.8" y="899.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.8" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::spinup(Node*, Node*, Node*, Node*, Node*, small_cache*) (1 samples, 0.09%)</title><rect x="1151.8" y="883.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.8" y="894.0"></text>
</g>
<g>
<title>cmpkey(void const*, void const*) (1 samples, 0.09%)</title><rect x="1151.8" y="867.0" width="1.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1154.8" y="878.0"></text>
</g>
<g>
<title>SubINode::Opcode() const (1 samples, 0.09%)</title><rect x="1152.8" y="899.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1155.8" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1153.8" y="915.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1156.8" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1153.8" y="899.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.8" y="910.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1153.8" y="883.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.8" y="894.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.09%)</title><rect x="1153.8" y="867.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1156.8" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1153.8" y="851.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1156.8" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1153.8" y="835.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1156.8" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1153.8" y="819.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.8" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1153.8" y="803.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.8" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1153.8" y="787.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.8" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1153.8" y="771.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1156.8" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1153.8" y="755.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.8" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1153.8" y="739.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1156.8" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1153.8" y="723.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1156.8" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1153.8" y="707.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1156.8" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1153.8" y="691.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.8" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1153.8" y="675.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1156.8" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1153.8" y="659.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1156.8" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1153.8" y="643.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1156.8" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1153.8" y="627.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1156.8" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1153.8" y="611.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.8" y="622.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1153.8" y="595.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1156.8" y="606.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1153.8" y="579.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.8" y="590.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1153.8" y="563.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1156.8" y="574.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1153.8" y="547.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.8" y="558.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1153.8" y="531.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1156.8" y="542.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1153.8" y="515.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.8" y="526.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.09%)</title><rect x="1154.8" y="915.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1157.8" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (13 samples, 1.11%)</title><rect x="1155.8" y="931.0" width="13.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.8" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (12 samples, 1.02%)</title><rect x="1155.8" y="915.0" width="12.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1158.8" y="926.0"></text>
</g>
<g>
<title>CmpUNode::sub(Type const*, Type const*) const (1 samples, 0.09%)</title><rect x="1155.8" y="899.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.8" y="910.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.17%)</title><rect x="1156.8" y="899.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.8" y="910.0"></text>
</g>
<g>
<title>AddPNode::Ideal_base_and_offset(Node*, PhaseTransform*, long&amp;) (1 samples, 0.09%)</title><rect x="1156.8" y="883.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.8" y="894.0"></text>
</g>
<g>
<title>PhaseTransform::find_long_type(Node*) (1 samples, 0.09%)</title><rect x="1156.8" y="867.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.8" y="878.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1157.8" y="883.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.8" y="894.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.09%)</title><rect x="1157.8" y="867.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.8" y="878.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1157.8" y="851.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1160.8" y="862.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1157.8" y="835.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.8" y="846.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1157.8" y="819.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.8" y="830.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1157.8" y="803.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.8" y="814.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.09%)</title><rect x="1157.8" y="787.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1160.8" y="798.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1158.8" y="899.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.8" y="910.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1158.8" y="883.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1161.8" y="894.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1159.8" y="899.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.8" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (3 samples, 0.26%)</title><rect x="1160.9" y="899.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1163.9" y="910.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (2 samples, 0.17%)</title><rect x="1161.9" y="883.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.9" y="894.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1163.9" y="899.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.9" y="910.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.17%)</title><rect x="1164.9" y="899.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.9" y="910.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.09%)</title><rect x="1164.9" y="883.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.9" y="894.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.09%)</title><rect x="1165.9" y="883.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1168.9" y="894.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1166.9" y="899.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.9" y="910.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.09%)</title><rect x="1166.9" y="883.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.9" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1166.9" y="867.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.9" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1166.9" y="851.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.9" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1166.9" y="835.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.9" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1166.9" y="819.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.9" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1166.9" y="803.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.9" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1166.9" y="787.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.9" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1166.9" y="771.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.9" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1166.9" y="755.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.9" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1166.9" y="739.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.9" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1166.9" y="723.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.9" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1166.9" y="707.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.9" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1166.9" y="691.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.9" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1166.9" y="675.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.9" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1166.9" y="659.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.9" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1166.9" y="643.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.9" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1166.9" y="627.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.9" y="638.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1166.9" y="611.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.9" y="622.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1166.9" y="595.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.9" y="606.0"></text>
</g>
<g>
<title>VectorSet::operator&gt;&gt;=(unsigned int) (1 samples, 0.09%)</title><rect x="1167.9" y="915.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.9" y="926.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.09%)</title><rect x="1168.9" y="931.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.9" y="942.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.09%)</title><rect x="1168.9" y="915.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.9" y="926.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1168.9" y="899.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.9" y="910.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.09%)</title><rect x="1168.9" y="883.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.9" y="894.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.09%)</title><rect x="1169.9" y="931.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.9" y="942.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.09%)</title><rect x="1169.9" y="915.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1172.9" y="926.0"></text>
</g>
<g>
<title>PhaseMacroExpand::initialize_object(AllocateNode*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1169.9" y="899.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.9" y="910.0"></text>
</g>
<g>
<title>InitializeNode::complete_stores(Node*, Node*, Node*, long, Node*, PhaseGVN*) (1 samples, 0.09%)</title><rect x="1169.9" y="883.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.9" y="894.0"></text>
</g>
<g>
<title>InitializeNode::coalesce_subword_stores(long, Node*, PhaseGVN*) (1 samples, 0.09%)</title><rect x="1169.9" y="867.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.9" y="878.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.09%)</title><rect x="1169.9" y="851.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.9" y="862.0"></text>
</g>
<g>
<title>Node::destruct() (1 samples, 0.09%)</title><rect x="1169.9" y="835.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.9" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (12 samples, 1.02%)</title><rect x="1170.9" y="947.0" width="12.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1173.9" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (12 samples, 1.02%)</title><rect x="1170.9" y="931.0" width="12.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.9" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (12 samples, 1.02%)</title><rect x="1170.9" y="915.0" width="12.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.9" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (12 samples, 1.02%)</title><rect x="1170.9" y="899.0" width="12.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.9" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (12 samples, 1.02%)</title><rect x="1170.9" y="883.0" width="12.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.9" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (12 samples, 1.02%)</title><rect x="1170.9" y="867.0" width="12.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.9" y="878.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1170.9" y="851.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.9" y="862.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.09%)</title><rect x="1170.9" y="835.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.9" y="846.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.09%)</title><rect x="1170.9" y="819.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.9" y="830.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1170.9" y="803.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.9" y="814.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_output_for_runtime_call(Node*, Node*, TypePtr const*) (1 samples, 0.09%)</title><rect x="1170.9" y="787.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1173.9" y="798.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.09%)</title><rect x="1170.9" y="771.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.9" y="782.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1170.9" y="755.0" width="1.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1173.9" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.68%)</title><rect x="1171.9" y="851.0" width="8.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.9" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.68%)</title><rect x="1171.9" y="835.0" width="8.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.9" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.68%)</title><rect x="1171.9" y="819.0" width="8.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.9" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.68%)</title><rect x="1171.9" y="803.0" width="8.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.9" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.68%)</title><rect x="1171.9" y="787.0" width="8.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.9" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.68%)</title><rect x="1171.9" y="771.0" width="8.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.9" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.51%)</title><rect x="1171.9" y="755.0" width="6.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.9" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.51%)</title><rect x="1171.9" y="739.0" width="6.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.51%)</title><rect x="1171.9" y="723.0" width="6.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.51%)</title><rect x="1171.9" y="707.0" width="6.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.51%)</title><rect x="1171.9" y="691.0" width="6.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.43%)</title><rect x="1171.9" y="675.0" width="5.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.9" y="686.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1171.9" y="659.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.9" y="670.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1171.9" y="643.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.9" y="654.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1171.9" y="627.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.9" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::ciTypeFlow(ciEnv*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1171.9" y="611.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.9" y="622.0"></text>
</g>
<g>
<title>ciMethod::get_method_blocks() (1 samples, 0.09%)</title><rect x="1171.9" y="595.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.9" y="606.0"></text>
</g>
<g>
<title>ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*) (1 samples, 0.09%)</title><rect x="1171.9" y="579.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.9" y="590.0"></text>
</g>
<g>
<title>ciMethodBlocks::do_analysis() (1 samples, 0.09%)</title><rect x="1171.9" y="563.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.9" y="574.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1172.9" y="659.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.9" y="670.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_native_hashcode(bool, bool) (1 samples, 0.09%)</title><rect x="1172.9" y="643.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.9" y="654.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1172.9" y="627.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.9" y="638.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1172.9" y="611.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.9" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1173.9" y="659.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.9" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1173.9" y="643.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1173.9" y="627.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1173.9" y="611.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1173.9" y="595.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1173.9" y="579.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.9" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1173.9" y="563.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.9" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1173.9" y="547.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1173.9" y="531.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1173.9" y="515.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1173.9" y="499.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1173.9" y="483.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.9" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1173.9" y="467.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.9" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1173.9" y="451.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1173.9" y="435.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1173.9" y="419.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1173.9" y="403.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1173.9" y="387.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.9" y="398.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1173.9" y="371.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.9" y="382.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1173.9" y="355.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.9" y="366.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1173.9" y="339.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.9" y="350.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.09%)</title><rect x="1173.9" y="323.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.9" y="334.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.09%)</title><rect x="1173.9" y="307.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.9" y="318.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle, Thread*) (1 samples, 0.09%)</title><rect x="1173.9" y="291.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.9" y="302.0"></text>
</g>
<g>
<title>java_lang_Class::protection_domain(oopDesc*) (1 samples, 0.09%)</title><rect x="1173.9" y="275.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.9" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1174.9" y="371.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.9" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1174.9" y="355.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1174.9" y="339.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1174.9" y="323.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1174.9" y="307.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1174.9" y="291.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.9" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1174.9" y="275.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.9" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1174.9" y="259.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1174.9" y="243.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1174.9" y="227.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1174.9" y="211.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1174.9" y="195.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.9" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1174.9" y="179.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.9" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1174.9" y="163.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.9" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1174.9" y="147.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.9" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1174.9" y="131.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.9" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1174.9" y="115.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.9" y="126.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1174.9" y="99.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.9" y="110.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1174.9" y="83.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.9" y="94.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1174.9" y="67.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.9" y="78.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.09%)</title><rect x="1174.9" y="51.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.9" y="62.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.09%)</title><rect x="1174.9" y="35.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.9" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1175.9" y="659.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.9" y="670.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1175.9" y="643.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.9" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1175.9" y="627.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.9" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1175.9" y="611.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1175.9" y="595.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1175.9" y="579.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1175.9" y="563.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1175.9" y="547.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.9" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1175.9" y="531.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.9" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1175.9" y="515.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1175.9" y="499.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1175.9" y="483.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1175.9" y="467.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1175.9" y="451.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.9" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1175.9" y="435.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.9" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1175.9" y="419.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1175.9" y="403.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1175.9" y="387.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1175.9" y="371.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.9" y="382.0"></text>
</g>
<g>
<title>GraphKit::record_profiled_arguments_for_speculation(ciMethod*, Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1175.9" y="355.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1176.9" y="675.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1176.9" y="659.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.9" y="670.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.09%)</title><rect x="1176.9" y="643.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.9" y="654.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1176.9" y="627.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.9" y="638.0"></text>
</g>
<g>
<title>TypeOopPtr::singleton() const (1 samples, 0.09%)</title><rect x="1176.9" y="611.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.9" y="622.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1177.9" y="755.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.9" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1177.9" y="739.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.9" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1177.9" y="723.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1177.9" y="707.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1177.9" y="691.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1177.9" y="675.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1177.9" y="659.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.9" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1177.9" y="643.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.9" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1177.9" y="627.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1177.9" y="611.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1177.9" y="595.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1177.9" y="579.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1177.9" y="563.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.9" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1177.9" y="547.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.9" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1177.9" y="531.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1177.9" y="515.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1177.9" y="499.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1177.9" y="483.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1177.9" y="467.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.9" y="478.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1177.9" y="451.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.9" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1177.9" y="435.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.9" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1177.9" y="419.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1177.9" y="403.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1177.9" y="387.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1177.9" y="371.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1177.9" y="355.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.9" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1177.9" y="339.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.9" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1177.9" y="323.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1177.9" y="307.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1177.9" y="291.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1177.9" y="275.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1177.9" y="259.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.9" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1177.9" y="243.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.9" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1177.9" y="227.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1177.9" y="211.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1177.9" y="195.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.9" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1177.9" y="179.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.9" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1177.9" y="163.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.9" y="174.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1177.9" y="147.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.9" y="158.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.09%)</title><rect x="1177.9" y="131.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.9" y="142.0"></text>
</g>
<g>
<title>BuildCutout::BuildCutout(GraphKit*, Node*, float, float) (1 samples, 0.09%)</title><rect x="1177.9" y="115.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.9" y="126.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.09%)</title><rect x="1177.9" y="99.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.9" y="110.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.09%)</title><rect x="1177.9" y="83.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.9" y="94.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.9" y="643.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.9" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.9" y="627.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.9" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1178.9" y="611.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1178.9" y="595.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1178.9" y="579.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1178.9" y="563.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1178.9" y="547.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.9" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.9" y="531.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.9" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1178.9" y="515.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1178.9" y="499.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1178.9" y="483.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1178.9" y="467.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1178.9" y="451.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1178.9" y="435.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.9" y="446.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.09%)</title><rect x="1178.9" y="419.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.9" y="430.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.09%)</title><rect x="1178.9" y="403.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.9" y="414.0"></text>
</g>
<g>
<title>PhaseTransform::intcon(int) (1 samples, 0.09%)</title><rect x="1178.9" y="387.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.9" y="398.0"></text>
</g>
<g>
<title>TypeInt::xdual() const (1 samples, 0.09%)</title><rect x="1178.9" y="371.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.9" y="382.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1179.9" y="851.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.9" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1179.9" y="835.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.9" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.26%)</title><rect x="1179.9" y="819.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.9" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.26%)</title><rect x="1179.9" y="803.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.9" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.26%)</title><rect x="1179.9" y="787.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.9" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.26%)</title><rect x="1179.9" y="771.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.26%)</title><rect x="1179.9" y="755.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.9" y="766.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1179.9" y="739.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.9" y="750.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1179.9" y="723.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.9" y="734.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1179.9" y="707.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.9" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1179.9" y="691.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.9" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1179.9" y="675.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.9" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1179.9" y="659.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.9" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1179.9" y="643.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.9" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1179.9" y="627.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.9" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.09%)</title><rect x="1179.9" y="611.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.9" y="622.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1179.9" y="595.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.9" y="606.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1179.9" y="579.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.9" y="590.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1179.9" y="563.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.9" y="574.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1179.9" y="547.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.9" y="558.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_interface_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.09%)</title><rect x="1179.9" y="531.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.9" y="542.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.09%)</title><rect x="1179.9" y="515.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.9" y="526.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.09%)</title><rect x="1179.9" y="499.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.9" y="510.0"></text>
</g>
<g>
<title>SystemDictionary::add_loader_constraint(Symbol*, Handle, Handle, Thread*) (1 samples, 0.09%)</title><rect x="1179.9" y="483.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.9" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1181.0" y="739.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.0" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1181.0" y="723.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1181.0" y="707.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1181.0" y="691.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1181.0" y="675.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1181.0" y="659.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.0" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.0" y="643.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.0" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.0" y="627.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.0" y="611.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.0" y="595.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.0" y="579.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1181.0" y="563.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.0" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.0" y="547.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.0" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.0" y="531.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.0" y="515.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.0" y="499.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.0" y="483.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1181.0" y="467.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1181.0" y="451.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.0" y="462.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.09%)</title><rect x="1181.0" y="435.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.0" y="446.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1181.0" y="419.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.0" y="430.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1181.0" y="403.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.0" y="414.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1181.0" y="387.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.0" y="398.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1181.0" y="371.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.0" y="382.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1181.0" y="355.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.0" y="366.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.0" y="643.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.0" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.0" y="627.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.0" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.0" y="611.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.0" y="595.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.0" y="579.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.0" y="563.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1182.0" y="547.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1182.0" y="531.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.0" y="542.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.09%)</title><rect x="1182.0" y="515.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.0" y="526.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.09%)</title><rect x="1182.0" y="499.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.0" y="510.0"></text>
</g>
<g>
<title>IdealKit::load(Node*, Node*, Type const*, BasicType, int, bool) (1 samples, 0.09%)</title><rect x="1182.0" y="483.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.0" y="494.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.09%)</title><rect x="1182.0" y="467.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.0" y="478.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1182.0" y="451.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.0" y="462.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1182.0" y="435.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.0" y="446.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.09%)</title><rect x="1183.0" y="947.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.0" y="958.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.09%)</title><rect x="1183.0" y="931.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.0" y="942.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1184.0" y="979.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.0" y="990.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.09%)</title><rect x="1184.0" y="963.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.0" y="974.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.09%)</title><rect x="1184.0" y="947.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.0" y="958.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.09%)</title><rect x="1184.0" y="931.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.0" y="942.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.09%)</title><rect x="1184.0" y="915.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.0" y="926.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.09%)</title><rect x="1184.0" y="899.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.0" y="910.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_profile_call(LIR_OpProfileCall*) (1 samples, 0.09%)</title><rect x="1184.0" y="883.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.0" y="894.0"></text>
</g>
<g>
<title>LIR_Assembler::type_profile_helper(RegisterImpl*, ciMethodData*, ProfileData*, RegisterImpl*, Label*) (1 samples, 0.09%)</title><rect x="1184.0" y="867.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.0" y="878.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.09%)</title><rect x="1185.0" y="995.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.0" y="1006.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.09%)</title><rect x="1185.0" y="979.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.0" y="990.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.09%)</title><rect x="1185.0" y="963.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.0" y="974.0"></text>
</g>
<g>
<title>CodeCache::next_nmethod(CodeBlob*) (1 samples, 0.09%)</title><rect x="1185.0" y="947.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.0" y="958.0"></text>
</g>
<g>
<title>CodeHeap::next_free(HeapBlock*) const (1 samples, 0.09%)</title><rect x="1185.0" y="931.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.0" y="942.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.09%)</title><rect x="1186.0" y="1011.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.0" y="1022.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.09%)</title><rect x="1186.0" y="995.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.0" y="1006.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.09%)</title><rect x="1186.0" y="979.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.0" y="990.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.09%)</title><rect x="1186.0" y="963.0" width="1.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1189.0" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::get_jmethod_id(instanceKlassHandle, methodHandle) (1 samples, 0.09%)</title><rect x="1186.0" y="947.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.0" y="958.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.26%)</title><rect x="1187.0" y="1043.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.0" y="1054.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.26%)</title><rect x="1187.0" y="1027.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.0" y="1038.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.09%)</title><rect x="1187.0" y="1011.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.0" y="1022.0"></text>
</g>
<g>
<title>SafepointSynchronize::end() (1 samples, 0.09%)</title><rect x="1188.0" y="1011.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.0" y="1022.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.09%)</title><rect x="1189.0" y="1011.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1192.0" y="1022.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.09%)</title><rect x="1189.0" y="995.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.0" y="1006.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.09%)</title><rect x="1189.0" y="979.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.0" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.09%)</title><rect x="1189.0" y="963.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1192.0" y="974.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.09%)</title><rect x="1189.0" y="947.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.0" y="958.0"></text>
</g>
<g>
<title>HeapRegion::hr_clear(bool, bool, bool) (1 samples, 0.09%)</title><rect x="1189.0" y="931.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.0" y="942.0"></text>
</g>
<g>
<title>HeapRegionRemSet::clear_locked() (1 samples, 0.09%)</title><rect x="1189.0" y="915.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1192.0" y="926.0"></text>
</g>
<g>
<title>OtherRegionsTable::clear() (1 samples, 0.09%)</title><rect x="1189.0" y="899.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1192.0" y="910.0"></text>
</g>
</g>
</svg>
