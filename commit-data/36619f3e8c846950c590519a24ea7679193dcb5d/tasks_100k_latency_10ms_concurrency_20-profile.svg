<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="886" onload="init(evt)" viewBox="0 0 1200 886" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="869"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="869"> </text>
<g id="frames">
<g>
<title>all (292 samples, 100.00%)</title><rect x="10.0" y="835.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="846.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (29 samples, 9.93%)</title><rect x="10.0" y="819.0" width="117.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="830.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (29 samples, 9.93%)</title><rect x="10.0" y="803.0" width="117.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="814.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.34%)</title><rect x="10.0" y="787.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (1 samples, 0.34%)</title><rect x="10.0" y="771.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.34%)</title><rect x="10.0" y="755.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.34%)</title><rect x="10.0" y="739.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.34%)</title><rect x="10.0" y="723.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.34%)</title><rect x="10.0" y="707.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.34%)</title><rect x="10.0" y="691.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.34%)</title><rect x="10.0" y="675.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.34%)</title><rect x="10.0" y="659.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (1 samples, 0.34%)</title><rect x="14.0" y="787.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.0" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (1 samples, 0.34%)</title><rect x="14.0" y="771.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.0" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.34%)</title><rect x="14.0" y="755.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.0" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$270/1858625419.accept (1 samples, 0.34%)</title><rect x="14.0" y="739.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.0" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (1 samples, 0.34%)</title><rect x="14.0" y="723.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.0" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.34%)</title><rect x="14.0" y="707.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.0" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.34%)</title><rect x="14.0" y="691.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.0" y="702.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (15 samples, 5.14%)</title><rect x="18.1" y="787.0" width="60.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.1" y="798.0">java/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$269/1036146590.accept (14 samples, 4.79%)</title><rect x="18.1" y="771.0" width="56.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="21.1" y="782.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (14 samples, 4.79%)</title><rect x="18.1" y="755.0" width="56.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="21.1" y="766.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (5 samples, 1.71%)</title><rect x="34.2" y="739.0" width="20.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="37.2" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (5 samples, 1.71%)</title><rect x="34.2" y="723.0" width="20.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="37.2" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (5 samples, 1.71%)</title><rect x="34.2" y="707.0" width="20.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="37.2" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (5 samples, 1.71%)</title><rect x="34.2" y="691.0" width="20.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="37.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (5 samples, 1.71%)</title><rect x="34.2" y="675.0" width="20.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="37.2" y="686.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.34%)</title><rect x="50.4" y="659.0" width="4.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="53.4" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (1 samples, 0.34%)</title><rect x="54.5" y="739.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="57.5" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.34%)</title><rect x="54.5" y="723.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="57.5" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/TaskRequest.&lt;init&gt; (3 samples, 1.03%)</title><rect x="58.5" y="739.0" width="12.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="61.5" y="750.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.03%)</title><rect x="58.5" y="723.0" width="12.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="61.5" y="734.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.34%)</title><rect x="66.6" y="707.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="69.6" y="718.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.34%)</title><rect x="66.6" y="691.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="69.6" y="702.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.34%)</title><rect x="70.6" y="739.0" width="4.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="73.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.34%)</title><rect x="74.7" y="771.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="77.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.34%)</title><rect x="74.7" y="755.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="77.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.34%)</title><rect x="74.7" y="739.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="77.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.34%)</title><rect x="74.7" y="723.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="77.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 4.11%)</title><rect x="78.7" y="787.0" width="48.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="81.7" y="798.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 4.11%)</title><rect x="78.7" y="771.0" width="48.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="81.7" y="782.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (10 samples, 3.42%)</title><rect x="78.7" y="755.0" width="40.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="81.7" y="766.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.37%)</title><rect x="78.7" y="739.0" width="16.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="81.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.37%)</title><rect x="78.7" y="723.0" width="16.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="81.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 1.37%)</title><rect x="78.7" y="707.0" width="16.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="81.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (4 samples, 1.37%)</title><rect x="78.7" y="691.0" width="16.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="81.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.68%)</title><rect x="78.7" y="675.0" width="8.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="81.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.68%)</title><rect x="78.7" y="659.0" width="8.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="81.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.34%)</title><rect x="82.7" y="643.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="85.7" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.34%)</title><rect x="82.7" y="627.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="85.7" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.34%)</title><rect x="86.8" y="675.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="89.8" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.34%)</title><rect x="86.8" y="659.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="89.8" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.34%)</title><rect x="86.8" y="643.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="89.8" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.34%)</title><rect x="86.8" y="627.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="89.8" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.34%)</title><rect x="86.8" y="611.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="89.8" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.34%)</title><rect x="86.8" y="595.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="89.8" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.34%)</title><rect x="86.8" y="579.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="89.8" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.34%)</title><rect x="86.8" y="563.0" width="4.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="89.8" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.34%)</title><rect x="86.8" y="547.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="89.8" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.34%)</title><rect x="86.8" y="531.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="89.8" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (1 samples, 0.34%)</title><rect x="86.8" y="515.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="89.8" y="526.0"></text>
</g>
<g>
<title>__read (1 samples, 0.34%)</title><rect x="86.8" y="499.0" width="4.0" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="89.8" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.34%)</title><rect x="90.8" y="675.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="93.8" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.34%)</title><rect x="90.8" y="659.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="93.8" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.34%)</title><rect x="90.8" y="643.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="93.8" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.34%)</title><rect x="90.8" y="627.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="93.8" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.updateSelectedKeys (1 samples, 0.34%)</title><rect x="90.8" y="611.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="93.8" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.34%)</title><rect x="90.8" y="595.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="93.8" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.34%)</title><rect x="90.8" y="579.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="93.8" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (6 samples, 2.05%)</title><rect x="94.9" y="739.0" width="24.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="97.9" y="750.0">o..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.addAll (1 samples, 0.34%)</title><rect x="94.9" y="723.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="97.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.checkNotNull (1 samples, 0.34%)</title><rect x="94.9" y="707.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="97.9" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (5 samples, 1.71%)</title><rect x="98.9" y="723.0" width="20.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="101.9" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 1.03%)</title><rect x="98.9" y="707.0" width="12.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="101.9" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 1.03%)</title><rect x="98.9" y="691.0" width="12.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="101.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.68%)</title><rect x="98.9" y="675.0" width="8.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="101.9" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (2 samples, 0.68%)</title><rect x="98.9" y="659.0" width="8.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="101.9" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (2 samples, 0.68%)</title><rect x="98.9" y="643.0" width="8.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="101.9" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (2 samples, 0.68%)</title><rect x="98.9" y="627.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="101.9" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (2 samples, 0.68%)</title><rect x="98.9" y="611.0" width="8.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="101.9" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (2 samples, 0.68%)</title><rect x="98.9" y="595.0" width="8.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="101.9" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (2 samples, 0.68%)</title><rect x="98.9" y="579.0" width="8.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="101.9" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (2 samples, 0.68%)</title><rect x="98.9" y="563.0" width="8.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="101.9" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.34%)</title><rect x="107.0" y="675.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="110.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.34%)</title><rect x="107.0" y="659.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="110.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.34%)</title><rect x="107.0" y="643.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="110.0" y="654.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.34%)</title><rect x="107.0" y="627.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="110.0" y="638.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (1 samples, 0.34%)</title><rect x="107.0" y="611.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="110.0" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.34%)</title><rect x="107.0" y="595.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="110.0" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (1 samples, 0.34%)</title><rect x="107.0" y="579.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="110.0" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.34%)</title><rect x="107.0" y="563.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="110.0" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.34%)</title><rect x="111.0" y="707.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="114.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.34%)</title><rect x="111.0" y="691.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="114.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.34%)</title><rect x="111.0" y="675.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="114.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.34%)</title><rect x="111.0" y="659.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="114.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.34%)</title><rect x="111.0" y="643.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="114.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.34%)</title><rect x="111.0" y="627.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="114.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Value.record (1 samples, 0.34%)</title><rect x="111.0" y="611.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="114.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.34%)</title><rect x="115.1" y="707.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="118.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.34%)</title><rect x="115.1" y="691.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="118.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.34%)</title><rect x="119.1" y="755.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="122.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.34%)</title><rect x="119.1" y="739.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="122.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.34%)</title><rect x="119.1" y="723.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="122.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.34%)</title><rect x="119.1" y="707.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="122.1" y="718.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandle.invokeBasic (1 samples, 0.34%)</title><rect x="119.1" y="691.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="122.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.34%)</title><rect x="123.2" y="755.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="126.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.34%)</title><rect x="123.2" y="739.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="126.2" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.34%)</title><rect x="123.2" y="723.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="126.2" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.iterator (1 samples, 0.34%)</title><rect x="123.2" y="707.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="126.2" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.&lt;init&gt; (1 samples, 0.34%)</title><rect x="123.2" y="691.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="126.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.advance (1 samples, 0.34%)</title><rect x="123.2" y="675.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="126.2" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.first (1 samples, 0.34%)</title><rect x="123.2" y="659.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="126.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (1 samples, 0.34%)</title><rect x="123.2" y="643.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="126.2" y="654.0"></text>
</g>
<g>
<title>java/lang/Thread.run (217 samples, 74.32%)</title><rect x="127.2" y="819.0" width="876.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="130.2" y="830.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (217 samples, 74.32%)</title><rect x="127.2" y="803.0" width="876.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="130.2" y="814.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (217 samples, 74.32%)</title><rect x="127.2" y="787.0" width="876.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="130.2" y="798.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$285/747411722.run (207 samples, 70.89%)</title><rect x="127.2" y="771.0" width="836.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="130.2" y="782.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$285/747411722.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$70 (207 samples, 70.89%)</title><rect x="127.2" y="755.0" width="836.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="130.2" y="766.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$70</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (207 samples, 70.89%)</title><rect x="127.2" y="739.0" width="836.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="130.2" y="750.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (203 samples, 69.52%)</title><rect x="127.2" y="723.0" width="820.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="130.2" y="734.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (40 samples, 13.70%)</title><rect x="135.3" y="707.0" width="161.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="138.3" y="718.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.68%)</title><rect x="135.3" y="691.0" width="8.1" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="138.3" y="702.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.68%)</title><rect x="135.3" y="675.0" width="8.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="138.3" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$42/815674463.extract (38 samples, 13.01%)</title><rect x="143.4" y="691.0" width="153.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="146.4" y="702.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (38 samples, 13.01%)</title><rect x="143.4" y="675.0" width="153.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="146.4" y="686.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (38 samples, 13.01%)</title><rect x="143.4" y="659.0" width="153.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="146.4" y="670.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (38 samples, 13.01%)</title><rect x="143.4" y="643.0" width="153.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="146.4" y="654.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (38 samples, 13.01%)</title><rect x="143.4" y="627.0" width="153.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="146.4" y="638.0">com/fasterxml/jacks..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (16 samples, 5.48%)</title><rect x="143.4" y="611.0" width="64.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="146.4" y="622.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (5 samples, 1.71%)</title><rect x="143.4" y="595.0" width="20.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="146.4" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (5 samples, 1.71%)</title><rect x="143.4" y="579.0" width="20.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="146.4" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (5 samples, 1.71%)</title><rect x="143.4" y="563.0" width="20.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="146.4" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 1.71%)</title><rect x="143.4" y="547.0" width="20.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="146.4" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (5 samples, 1.71%)</title><rect x="143.4" y="531.0" width="20.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="146.4" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (11 samples, 3.77%)</title><rect x="163.6" y="595.0" width="44.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="166.6" y="606.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (11 samples, 3.77%)</title><rect x="163.6" y="579.0" width="44.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="166.6" y="590.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (3 samples, 1.03%)</title><rect x="163.6" y="563.0" width="12.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="166.6" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (3 samples, 1.03%)</title><rect x="163.6" y="547.0" width="12.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="166.6" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (1 samples, 0.34%)</title><rect x="171.6" y="531.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="174.6" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (8 samples, 2.74%)</title><rect x="175.7" y="563.0" width="32.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="178.7" y="574.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (8 samples, 2.74%)</title><rect x="175.7" y="547.0" width="32.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="178.7" y="558.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (5 samples, 1.71%)</title><rect x="175.7" y="531.0" width="20.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="178.7" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 0.68%)</title><rect x="195.9" y="531.0" width="8.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="198.9" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.34%)</title><rect x="195.9" y="515.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="198.9" y="526.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.34%)</title><rect x="195.9" y="499.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="198.9" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.34%)</title><rect x="195.9" y="483.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="198.9" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.34%)</title><rect x="195.9" y="467.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="198.9" y="478.0"></text>
</g>
<g>
<title>G1CollectedHeap::max_tlab_size() const (1 samples, 0.34%)</title><rect x="195.9" y="451.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="198.9" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser.&lt;init&gt; (1 samples, 0.34%)</title><rect x="199.9" y="515.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="202.9" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.34%)</title><rect x="204.0" y="531.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="207.0" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (21 samples, 7.19%)</title><rect x="208.0" y="611.0" width="84.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="211.0" y="622.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.34%)</title><rect x="208.0" y="595.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="211.0" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.34%)</title><rect x="208.0" y="579.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="211.0" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.34%)</title><rect x="208.0" y="563.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="211.0" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.68%)</title><rect x="212.1" y="595.0" width="8.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="215.1" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.68%)</title><rect x="212.1" y="579.0" width="8.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="215.1" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.34%)</title><rect x="216.1" y="563.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="219.1" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.34%)</title><rect x="216.1" y="547.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="219.1" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (3 samples, 1.03%)</title><rect x="220.1" y="595.0" width="12.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="223.1" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 1.03%)</title><rect x="220.1" y="579.0" width="12.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="223.1" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.34%)</title><rect x="228.2" y="563.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="231.2" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.34%)</title><rect x="228.2" y="547.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="231.2" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.34%)</title><rect x="228.2" y="531.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="231.2" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.34%)</title><rect x="228.2" y="515.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="231.2" y="526.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.34%)</title><rect x="228.2" y="499.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="231.2" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.34%)</title><rect x="228.2" y="483.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="231.2" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.34%)</title><rect x="228.2" y="467.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="231.2" y="478.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.34%)</title><rect x="228.2" y="451.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="231.2" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (15 samples, 5.14%)</title><rect x="232.3" y="595.0" width="60.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="235.3" y="606.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 1.71%)</title><rect x="232.3" y="579.0" width="20.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="235.3" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.68%)</title><rect x="232.3" y="563.0" width="8.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="235.3" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.68%)</title><rect x="232.3" y="547.0" width="8.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="235.3" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.68%)</title><rect x="232.3" y="531.0" width="8.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="235.3" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.68%)</title><rect x="232.3" y="515.0" width="8.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="235.3" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 1.03%)</title><rect x="240.3" y="563.0" width="12.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="243.3" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (3 samples, 1.03%)</title><rect x="240.3" y="547.0" width="12.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="243.3" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (3 samples, 1.03%)</title><rect x="240.3" y="531.0" width="12.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="243.3" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.34%)</title><rect x="248.4" y="515.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="251.4" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (1 samples, 0.34%)</title><rect x="248.4" y="499.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="251.4" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (10 samples, 3.42%)</title><rect x="252.5" y="579.0" width="40.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="255.5" y="590.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (10 samples, 3.42%)</title><rect x="252.5" y="563.0" width="40.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="255.5" y="574.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (9 samples, 3.08%)</title><rect x="256.5" y="547.0" width="36.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="259.5" y="558.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.03%)</title><rect x="260.5" y="531.0" width="12.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="263.5" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 1.03%)</title><rect x="260.5" y="515.0" width="12.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="263.5" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 1.03%)</title><rect x="260.5" y="499.0" width="12.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="263.5" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 1.03%)</title><rect x="260.5" y="483.0" width="12.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="263.5" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (3 samples, 1.03%)</title><rect x="260.5" y="467.0" width="12.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="263.5" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (2 samples, 0.68%)</title><rect x="272.7" y="531.0" width="8.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="275.7" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.34%)</title><rect x="276.7" y="515.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="279.7" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.34%)</title><rect x="276.7" y="499.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="279.7" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.34%)</title><rect x="276.7" y="483.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="279.7" y="494.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.34%)</title><rect x="276.7" y="467.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="279.7" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 0.68%)</title><rect x="280.8" y="531.0" width="8.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="283.8" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 0.68%)</title><rect x="280.8" y="515.0" width="8.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="283.8" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 0.68%)</title><rect x="280.8" y="499.0" width="8.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="283.8" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (2 samples, 0.68%)</title><rect x="280.8" y="483.0" width="8.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="283.8" y="494.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 0.68%)</title><rect x="280.8" y="467.0" width="8.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="283.8" y="478.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (2 samples, 0.68%)</title><rect x="280.8" y="451.0" width="8.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="283.8" y="462.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (1 samples, 0.34%)</title><rect x="280.8" y="435.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="283.8" y="446.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.34%)</title><rect x="280.8" y="419.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="283.8" y="430.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.34%)</title><rect x="280.8" y="403.0" width="4.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="283.8" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.34%)</title><rect x="280.8" y="387.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="283.8" y="398.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (1 samples, 0.34%)</title><rect x="284.8" y="435.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="287.8" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.34%)</title><rect x="288.8" y="531.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="291.8" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.34%)</title><rect x="288.8" y="515.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="291.8" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.34%)</title><rect x="288.8" y="499.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="291.8" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.34%)</title><rect x="292.9" y="611.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="295.9" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.34%)</title><rect x="292.9" y="595.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="295.9" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.34%)</title><rect x="292.9" y="579.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="295.9" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.34%)</title><rect x="292.9" y="563.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="295.9" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.34%)</title><rect x="292.9" y="547.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="295.9" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.34%)</title><rect x="292.9" y="531.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="295.9" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (146 samples, 50.00%)</title><rect x="296.9" y="707.0" width="590.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="299.9" y="718.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (20 samples, 6.85%)</title><rect x="296.9" y="691.0" width="80.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="299.9" y="702.0">com/linec..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (20 samples, 6.85%)</title><rect x="296.9" y="675.0" width="80.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="299.9" y="686.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (20 samples, 6.85%)</title><rect x="296.9" y="659.0" width="80.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="299.9" y="670.0">ch/qos/lo..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (14 samples, 4.79%)</title><rect x="321.2" y="643.0" width="56.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="324.2" y="654.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.remove (9 samples, 3.08%)</title><rect x="341.4" y="627.0" width="36.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="344.4" y="638.0">jav..</text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.34%)</title><rect x="341.4" y="611.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="344.4" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.34%)</title><rect x="345.4" y="611.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="348.4" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (7 samples, 2.40%)</title><rect x="349.5" y="611.0" width="28.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="352.5" y="622.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.68%)</title><rect x="377.7" y="691.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="380.7" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.68%)</title><rect x="377.7" y="675.0" width="8.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="380.7" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.34%)</title><rect x="377.7" y="659.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="380.7" y="670.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.34%)</title><rect x="377.7" y="643.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="380.7" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.34%)</title><rect x="377.7" y="627.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="380.7" y="638.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.34%)</title><rect x="381.8" y="659.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="384.8" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (27 samples, 9.25%)</title><rect x="385.8" y="691.0" width="109.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="388.8" y="702.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (27 samples, 9.25%)</title><rect x="385.8" y="675.0" width="109.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="388.8" y="686.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (13 samples, 4.45%)</title><rect x="389.9" y="659.0" width="52.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="392.9" y="670.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (13 samples, 4.45%)</title><rect x="389.9" y="643.0" width="52.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="392.9" y="654.0">java/..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (11 samples, 3.77%)</title><rect x="397.9" y="627.0" width="44.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="400.9" y="638.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (10 samples, 3.42%)</title><rect x="397.9" y="611.0" width="40.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="400.9" y="622.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (10 samples, 3.42%)</title><rect x="397.9" y="595.0" width="40.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="400.9" y="606.0">jav..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (10 samples, 3.42%)</title><rect x="397.9" y="579.0" width="40.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="400.9" y="590.0">jav..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (5 samples, 1.71%)</title><rect x="418.2" y="563.0" width="20.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="421.2" y="574.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.34%)</title><rect x="418.2" y="547.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="421.2" y="558.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.34%)</title><rect x="418.2" y="531.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="421.2" y="542.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.34%)</title><rect x="418.2" y="515.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="421.2" y="526.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.34%)</title><rect x="418.2" y="499.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="421.2" y="510.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 1.37%)</title><rect x="422.2" y="547.0" width="16.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="425.2" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.68%)</title><rect x="430.3" y="531.0" width="8.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="433.3" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.34%)</title><rect x="430.3" y="515.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="433.3" y="526.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.34%)</title><rect x="434.3" y="515.0" width="4.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="437.3" y="526.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.34%)</title><rect x="438.4" y="611.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="441.4" y="622.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.34%)</title><rect x="442.4" y="659.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="445.4" y="670.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.34%)</title><rect x="442.4" y="643.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="445.4" y="654.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.34%)</title><rect x="442.4" y="627.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="445.4" y="638.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.34%)</title><rect x="446.4" y="659.0" width="4.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="449.4" y="670.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (11 samples, 3.77%)</title><rect x="450.5" y="659.0" width="44.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="453.5" y="670.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (11 samples, 3.77%)</title><rect x="450.5" y="643.0" width="44.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="453.5" y="654.0">ch/q..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (11 samples, 3.77%)</title><rect x="450.5" y="627.0" width="44.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="453.5" y="638.0">java..</text>
</g>
<g>
<title>java/util/HashMap.put (10 samples, 3.42%)</title><rect x="454.5" y="611.0" width="40.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="457.5" y="622.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.putVal (7 samples, 2.40%)</title><rect x="466.6" y="595.0" width="28.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="469.6" y="606.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.68%)</title><rect x="486.8" y="579.0" width="8.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="489.8" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (86 samples, 29.45%)</title><rect x="494.9" y="691.0" width="347.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="497.9" y="702.0">com/linecorp/decaton/processor/runtime/internal..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (82 samples, 28.08%)</title><rect x="511.1" y="675.0" width="331.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="514.1" y="686.0">com/linecorp/decaton/processor/runtime/intern..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$207/1399142726.process (71 samples, 24.32%)</title><rect x="515.1" y="659.0" width="287.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="518.1" y="670.0">com/linecorp/decaton/benchmark/Decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (71 samples, 24.32%)</title><rect x="515.1" y="643.0" width="287.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="518.1" y="654.0">com/linecorp/decaton/benchmark/Decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (71 samples, 24.32%)</title><rect x="515.1" y="627.0" width="287.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="518.1" y="638.0">com/linecorp/decaton/benchmark/Recordi..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.34%)</title><rect x="523.2" y="611.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="526.2" y="622.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.34%)</title><rect x="523.2" y="595.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="526.2" y="606.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.34%)</title><rect x="523.2" y="579.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="526.2" y="590.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.34%)</title><rect x="523.2" y="563.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="526.2" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (65 samples, 22.26%)</title><rect x="527.3" y="611.0" width="262.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="530.3" y="622.0">com/linecorp/decaton/benchmark/Reco..</text>
</g>
<g>
<title>java/lang/Thread.sleep (63 samples, 21.58%)</title><rect x="527.3" y="595.0" width="254.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="530.3" y="606.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.34%)</title><rect x="551.5" y="579.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="554.5" y="590.0"></text>
</g>
<g>
<title>JVM_Sleep (54 samples, 18.49%)</title><rect x="555.5" y="579.0" width="218.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="558.5" y="590.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.68%)</title><rect x="575.8" y="563.0" width="8.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="578.8" y="574.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.34%)</title><rect x="583.8" y="563.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="586.8" y="574.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 1.03%)</title><rect x="587.9" y="563.0" width="12.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="590.9" y="574.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.68%)</title><rect x="591.9" y="547.0" width="8.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="594.9" y="558.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.68%)</title><rect x="600.0" y="563.0" width="8.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="603.0" y="574.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (41 samples, 14.04%)</title><rect x="608.1" y="563.0" width="165.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="611.1" y="574.0">os::sleep(Thread*, lo..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.68%)</title><rect x="632.3" y="547.0" width="8.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="635.3" y="558.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.34%)</title><rect x="636.4" y="531.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="639.4" y="542.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.34%)</title><rect x="640.4" y="547.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="643.4" y="558.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.34%)</title><rect x="640.4" y="531.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="643.4" y="542.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.34%)</title><rect x="640.4" y="515.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="643.4" y="526.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.34%)</title><rect x="640.4" y="499.0" width="4.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="643.4" y="510.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.34%)</title><rect x="644.5" y="547.0" width="4.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="647.5" y="558.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.34%)</title><rect x="644.5" y="531.0" width="4.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="647.5" y="542.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 1.71%)</title><rect x="648.5" y="547.0" width="20.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="651.5" y="558.0"></text>
</g>
<g>
<title>__pthread_cond_init (1 samples, 0.34%)</title><rect x="668.7" y="547.0" width="4.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="671.7" y="558.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (21 samples, 7.19%)</title><rect x="672.7" y="547.0" width="84.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="675.7" y="558.0">__pthread_..</text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 1.03%)</title><rect x="757.6" y="547.0" width="12.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="760.6" y="558.0"></text>
</g>
<g>
<title>pthread_cond_destroy@@GLIBC_2.3.2 (1 samples, 0.34%)</title><rect x="769.7" y="547.0" width="4.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="772.7" y="558.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.34%)</title><rect x="773.8" y="579.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="776.8" y="590.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (1 samples, 0.34%)</title><rect x="777.8" y="579.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="780.8" y="590.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.68%)</title><rect x="781.8" y="595.0" width="8.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="784.8" y="606.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.68%)</title><rect x="781.8" y="579.0" width="8.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="784.8" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 1.03%)</title><rect x="789.9" y="611.0" width="12.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="792.9" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 1.03%)</title><rect x="789.9" y="595.0" width="12.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="792.9" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 1.03%)</title><rect x="789.9" y="579.0" width="12.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="792.9" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 1.03%)</title><rect x="789.9" y="563.0" width="12.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="792.9" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (2 samples, 0.68%)</title><rect x="802.1" y="659.0" width="8.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="805.1" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.34%)</title><rect x="810.1" y="659.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="813.1" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.34%)</title><rect x="810.1" y="643.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="813.1" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.34%)</title><rect x="810.1" y="627.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="813.1" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.34%)</title><rect x="810.1" y="611.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="813.1" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.34%)</title><rect x="814.2" y="659.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="817.2" y="670.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.34%)</title><rect x="814.2" y="643.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="817.2" y="654.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.34%)</title><rect x="818.2" y="659.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="821.2" y="670.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.34%)</title><rect x="818.2" y="643.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="821.2" y="654.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.34%)</title><rect x="818.2" y="627.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="821.2" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (4 samples, 1.37%)</title><rect x="822.3" y="659.0" width="16.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="825.3" y="670.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.34%)</title><rect x="834.4" y="643.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="837.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.34%)</title><rect x="838.4" y="659.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="841.4" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (5 samples, 1.71%)</title><rect x="842.5" y="691.0" width="20.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="845.5" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.elapsedNanos (2 samples, 0.68%)</title><rect x="842.5" y="675.0" width="8.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="845.5" y="686.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.34%)</title><rect x="842.5" y="659.0" width="4.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="845.5" y="670.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.34%)</title><rect x="842.5" y="643.0" width="4.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="845.5" y="654.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.34%)</title><rect x="846.5" y="659.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="849.5" y="670.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (3 samples, 1.03%)</title><rect x="850.5" y="675.0" width="12.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="853.5" y="686.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.68%)</title><rect x="854.6" y="659.0" width="8.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="857.6" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.34%)</title><rect x="858.6" y="643.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="861.6" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.34%)</title><rect x="858.6" y="627.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="861.6" y="638.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/Counter.increment (4 samples, 1.37%)</title><rect x="862.7" y="691.0" width="16.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="865.7" y="702.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeCounter.increment (4 samples, 1.37%)</title><rect x="862.7" y="675.0" width="16.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="865.7" y="686.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.34%)</title><rect x="862.7" y="659.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="865.7" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/734291103.linkToTargetMethod (3 samples, 1.03%)</title><rect x="866.7" y="659.0" width="12.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="869.7" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/2033830163.invokeStatic_D_L (3 samples, 1.03%)</title><rect x="866.7" y="643.0" width="12.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="869.7" y="654.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeCounter$$Lambda$284/190278963.get$Lambda (3 samples, 1.03%)</title><rect x="866.7" y="627.0" width="12.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="869.7" y="638.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.34%)</title><rect x="878.8" y="691.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="881.8" y="702.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1172131546.linkToTargetMethod (1 samples, 0.34%)</title><rect x="878.8" y="675.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="881.8" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/55331187.invokeStatic_L_L (1 samples, 0.34%)</title><rect x="878.8" y="659.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="881.8" y="670.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer$$Lambda$268/2007635344.get$Lambda (1 samples, 0.34%)</title><rect x="878.8" y="643.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="881.8" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.34%)</title><rect x="882.9" y="691.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="885.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.34%)</title><rect x="882.9" y="675.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="885.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.34%)</title><rect x="882.9" y="659.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="885.9" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$293/1430096023.accept (1 samples, 0.34%)</title><rect x="882.9" y="643.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="885.9" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$62 (1 samples, 0.34%)</title><rect x="882.9" y="627.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="885.9" y="638.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.34%)</title><rect x="882.9" y="611.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="885.9" y="622.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.34%)</title><rect x="882.9" y="595.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="885.9" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (15 samples, 5.14%)</title><rect x="886.9" y="707.0" width="60.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="889.9" y="718.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (15 samples, 5.14%)</title><rect x="886.9" y="691.0" width="60.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="889.9" y="702.0">java/u..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.34%)</title><rect x="886.9" y="675.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="889.9" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.34%)</title><rect x="886.9" y="659.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="889.9" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.34%)</title><rect x="886.9" y="643.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="889.9" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (3 samples, 1.03%)</title><rect x="891.0" y="675.0" width="12.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="894.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (11 samples, 3.77%)</title><rect x="903.1" y="675.0" width="44.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="906.1" y="686.0">java..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$295/1543138368.accept (11 samples, 3.77%)</title><rect x="903.1" y="659.0" width="44.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="906.1" y="670.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$61 (11 samples, 3.77%)</title><rect x="903.1" y="643.0" width="44.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="906.1" y="654.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$283/1671330511.complete (11 samples, 3.77%)</title><rect x="903.1" y="627.0" width="44.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="906.1" y="638.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$38 (11 samples, 3.77%)</title><rect x="903.1" y="611.0" width="44.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="906.1" y="622.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$282/1929224699.complete (11 samples, 3.77%)</title><rect x="903.1" y="595.0" width="44.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="906.1" y="606.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$68 (11 samples, 3.77%)</title><rect x="903.1" y="579.0" width="44.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="906.1" y="590.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (11 samples, 3.77%)</title><rect x="903.1" y="563.0" width="44.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="906.1" y="574.0">com/..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (11 samples, 3.77%)</title><rect x="903.1" y="547.0" width="44.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="906.1" y="558.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (11 samples, 3.77%)</title><rect x="903.1" y="531.0" width="44.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="906.1" y="542.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (11 samples, 3.77%)</title><rect x="903.1" y="515.0" width="44.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="906.1" y="526.0">ch/q..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (4 samples, 1.37%)</title><rect x="947.5" y="723.0" width="16.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="950.5" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (5 samples, 1.71%)</title><rect x="963.7" y="771.0" width="20.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="966.7" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 1.71%)</title><rect x="963.7" y="755.0" width="20.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="966.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 1.71%)</title><rect x="963.7" y="739.0" width="20.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="966.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 1.71%)</title><rect x="963.7" y="723.0" width="20.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="966.7" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (1 samples, 0.34%)</title><rect x="979.9" y="707.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="982.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (5 samples, 1.71%)</title><rect x="983.9" y="771.0" width="20.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="986.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (4 samples, 1.37%)</title><rect x="983.9" y="755.0" width="16.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="986.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.34%)</title><rect x="987.9" y="739.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="990.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.34%)</title><rect x="987.9" y="723.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="990.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.34%)</title><rect x="987.9" y="707.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="990.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.34%)</title><rect x="987.9" y="691.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="990.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.34%)</title><rect x="987.9" y="675.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="990.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.68%)</title><rect x="992.0" y="739.0" width="8.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="995.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.68%)</title><rect x="992.0" y="723.0" width="8.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="995.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.68%)</title><rect x="992.0" y="707.0" width="8.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="995.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.68%)</title><rect x="992.0" y="691.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="995.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateOf (1 samples, 0.34%)</title><rect x="1000.1" y="755.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1003.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.34%)</title><rect x="1004.1" y="819.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1007.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.34%)</title><rect x="1004.1" y="803.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1007.1" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.34%)</title><rect x="1004.1" y="787.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1007.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.34%)</title><rect x="1004.1" y="771.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1007.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.34%)</title><rect x="1004.1" y="755.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1007.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.34%)</title><rect x="1004.1" y="739.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1007.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.34%)</title><rect x="1004.1" y="723.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1007.1" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.34%)</title><rect x="1004.1" y="707.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1007.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.34%)</title><rect x="1004.1" y="691.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1007.1" y="702.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.34%)</title><rect x="1004.1" y="675.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1007.1" y="686.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.34%)</title><rect x="1004.1" y="659.0" width="4.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1007.1" y="670.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.34%)</title><rect x="1004.1" y="643.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1007.1" y="654.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.34%)</title><rect x="1004.1" y="627.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1007.1" y="638.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.34%)</title><rect x="1004.1" y="611.0" width="4.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1007.1" y="622.0"></text>
</g>
<g>
<title>start_thread (45 samples, 15.41%)</title><rect x="1008.2" y="819.0" width="181.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1011.2" y="830.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (45 samples, 15.41%)</title><rect x="1008.2" y="803.0" width="181.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1011.2" y="814.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (13 samples, 4.45%)</title><rect x="1008.2" y="787.0" width="52.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1011.2" y="798.0">GangW..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (13 samples, 4.45%)</title><rect x="1008.2" y="771.0" width="52.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1011.2" y="782.0">G1Par..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (12 samples, 4.11%)</title><rect x="1008.2" y="755.0" width="48.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1011.2" y="766.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (12 samples, 4.11%)</title><rect x="1008.2" y="739.0" width="48.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1011.2" y="750.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (5 samples, 1.71%)</title><rect x="1020.3" y="723.0" width="20.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1023.3" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (3 samples, 1.03%)</title><rect x="1028.4" y="707.0" width="12.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1031.4" y="718.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.34%)</title><rect x="1036.4" y="691.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1039.4" y="702.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (4 samples, 1.37%)</title><rect x="1040.5" y="723.0" width="16.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1043.5" y="734.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.34%)</title><rect x="1056.6" y="755.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1059.6" y="766.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.34%)</title><rect x="1056.6" y="739.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1059.6" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (1 samples, 0.34%)</title><rect x="1056.6" y="723.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1059.6" y="734.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (1 samples, 0.34%)</title><rect x="1056.6" y="707.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1059.6" y="718.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.34%)</title><rect x="1056.6" y="691.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1059.6" y="702.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (1 samples, 0.34%)</title><rect x="1056.6" y="675.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1059.6" y="686.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.34%)</title><rect x="1056.6" y="659.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1059.6" y="670.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.34%)</title><rect x="1056.6" y="643.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1059.6" y="654.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.34%)</title><rect x="1056.6" y="627.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1059.6" y="638.0"></text>
</g>
<g>
<title>JavaThread::run() (31 samples, 10.62%)</title><rect x="1060.7" y="787.0" width="125.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1063.7" y="798.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (31 samples, 10.62%)</title><rect x="1060.7" y="771.0" width="125.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1063.7" y="782.0">JavaThread::thr..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (31 samples, 10.62%)</title><rect x="1060.7" y="755.0" width="125.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1063.7" y="766.0">CompileBroker::..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (31 samples, 10.62%)</title><rect x="1060.7" y="739.0" width="125.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1063.7" y="750.0">CompileBroker::..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (28 samples, 9.59%)</title><rect x="1060.7" y="723.0" width="113.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1063.7" y="734.0">C2Compiler::co..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (28 samples, 9.59%)</title><rect x="1060.7" y="707.0" width="113.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1063.7" y="718.0">Compile::Compi..</text>
</g>
<g>
<title>Compile::Code_Gen() (16 samples, 5.48%)</title><rect x="1060.7" y="691.0" width="64.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1063.7" y="702.0">Compile..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.34%)</title><rect x="1060.7" y="675.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1063.7" y="686.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.34%)</title><rect x="1060.7" y="659.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1063.7" y="670.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.68%)</title><rect x="1064.7" y="675.0" width="8.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1067.7" y="686.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.68%)</title><rect x="1064.7" y="659.0" width="8.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1067.7" y="670.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.68%)</title><rect x="1064.7" y="643.0" width="8.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1067.7" y="654.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.68%)</title><rect x="1064.7" y="627.0" width="8.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1067.7" y="638.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.34%)</title><rect x="1064.7" y="611.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1067.7" y="622.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.34%)</title><rect x="1064.7" y="595.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1067.7" y="606.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.34%)</title><rect x="1064.7" y="579.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1067.7" y="590.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.34%)</title><rect x="1064.7" y="563.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1067.7" y="574.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.34%)</title><rect x="1064.7" y="547.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1067.7" y="558.0"></text>
</g>
<g>
<title>InstanceKlass::find_field_from_offset(int, bool, fieldDescriptor*) const (1 samples, 0.34%)</title><rect x="1064.7" y="531.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1067.7" y="542.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field_from_offset(int, bool, fieldDescriptor*) const (1 samples, 0.34%)</title><rect x="1064.7" y="515.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1067.7" y="526.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.34%)</title><rect x="1068.8" y="611.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1071.8" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (13 samples, 4.45%)</title><rect x="1072.8" y="675.0" width="52.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1075.8" y="686.0">Phase..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.34%)</title><rect x="1072.8" y="659.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1075.8" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (2 samples, 0.68%)</title><rect x="1076.8" y="659.0" width="8.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1079.8" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.68%)</title><rect x="1076.8" y="643.0" width="8.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1079.8" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.34%)</title><rect x="1084.9" y="659.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1087.9" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.34%)</title><rect x="1089.0" y="659.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1092.0" y="670.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.34%)</title><rect x="1089.0" y="643.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1092.0" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.68%)</title><rect x="1093.0" y="659.0" width="8.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1096.0" y="670.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.34%)</title><rect x="1101.1" y="659.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1104.1" y="670.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 1.03%)</title><rect x="1105.1" y="659.0" width="12.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1108.1" y="670.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.34%)</title><rect x="1113.2" y="643.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1116.2" y="654.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.34%)</title><rect x="1117.3" y="659.0" width="4.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1120.3" y="670.0"></text>
</g>
<g>
<title>rbx_RegPOper::in_RegMask(int) const (1 samples, 0.34%)</title><rect x="1121.3" y="659.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1124.3" y="670.0"></text>
</g>
<g>
<title>Compile::Optimize() (6 samples, 2.05%)</title><rect x="1125.3" y="691.0" width="24.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1128.3" y="702.0">C..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.34%)</title><rect x="1125.3" y="675.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1128.3" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.34%)</title><rect x="1125.3" y="659.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1128.3" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.34%)</title><rect x="1125.3" y="643.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1128.3" y="654.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.34%)</title><rect x="1125.3" y="627.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1128.3" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (5 samples, 1.71%)</title><rect x="1129.4" y="675.0" width="20.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1132.4" y="686.0"></text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.34%)</title><rect x="1129.4" y="659.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1132.4" y="670.0"></text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.34%)</title><rect x="1129.4" y="643.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1132.4" y="654.0"></text>
</g>
<g>
<title>IdealLoopTree::merge_many_backedges(PhaseIdealLoop*) (1 samples, 0.34%)</title><rect x="1129.4" y="627.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1132.4" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.34%)</title><rect x="1133.4" y="659.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1136.4" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.03%)</title><rect x="1137.5" y="659.0" width="12.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1140.5" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (3 samples, 1.03%)</title><rect x="1137.5" y="643.0" width="12.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1140.5" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.34%)</title><rect x="1141.5" y="627.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1144.5" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.34%)</title><rect x="1145.5" y="627.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1148.5" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.37%)</title><rect x="1149.6" y="691.0" width="16.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1152.6" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.37%)</title><rect x="1149.6" y="675.0" width="16.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1152.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.37%)</title><rect x="1149.6" y="659.0" width="16.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1152.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.37%)</title><rect x="1149.6" y="643.0" width="16.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1152.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.37%)</title><rect x="1149.6" y="627.0" width="16.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.6" y="638.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.34%)</title><rect x="1149.6" y="611.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.6" y="622.0"></text>
</g>
<g>
<title>PhaseTransform::zerocon(BasicType) (1 samples, 0.34%)</title><rect x="1149.6" y="595.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.03%)</title><rect x="1153.6" y="611.0" width="12.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.6" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.03%)</title><rect x="1153.6" y="595.0" width="12.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1156.6" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.03%)</title><rect x="1153.6" y="579.0" width="12.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.03%)</title><rect x="1153.6" y="563.0" width="12.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.03%)</title><rect x="1153.6" y="547.0" width="12.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.03%)</title><rect x="1153.6" y="531.0" width="12.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.68%)</title><rect x="1153.6" y="515.0" width="8.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1156.6" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.68%)</title><rect x="1153.6" y="499.0" width="8.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.6" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.68%)</title><rect x="1153.6" y="483.0" width="8.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.68%)</title><rect x="1153.6" y="467.0" width="8.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1156.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.68%)</title><rect x="1153.6" y="451.0" width="8.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1156.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.68%)</title><rect x="1153.6" y="435.0" width="8.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.68%)</title><rect x="1153.6" y="419.0" width="8.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.6" y="430.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.34%)</title><rect x="1153.6" y="403.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1156.6" y="414.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.34%)</title><rect x="1153.6" y="387.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1156.6" y="398.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.34%)</title><rect x="1153.6" y="371.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1156.6" y="382.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.34%)</title><rect x="1153.6" y="355.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1156.6" y="366.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.34%)</title><rect x="1153.6" y="339.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.6" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.34%)</title><rect x="1153.6" y="323.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.6" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.34%)</title><rect x="1153.6" y="307.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1156.6" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.34%)</title><rect x="1153.6" y="291.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.6" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.34%)</title><rect x="1153.6" y="275.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1156.6" y="286.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.34%)</title><rect x="1153.6" y="259.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.6" y="270.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.34%)</title><rect x="1153.6" y="243.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.6" y="254.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.34%)</title><rect x="1153.6" y="227.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.6" y="238.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.34%)</title><rect x="1153.6" y="211.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1156.6" y="222.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.34%)</title><rect x="1153.6" y="195.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.6" y="206.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.34%)</title><rect x="1153.6" y="179.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.6" y="190.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.34%)</title><rect x="1153.6" y="163.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.6" y="174.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.34%)</title><rect x="1153.6" y="147.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1156.6" y="158.0"></text>
</g>
<g>
<title>SystemDictionary::add_loader_constraint(Symbol*, Handle, Handle, Thread*) (1 samples, 0.34%)</title><rect x="1153.6" y="131.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1156.6" y="142.0"></text>
</g>
<g>
<title>Dictionary::find_class(int, unsigned int, Symbol*, ClassLoaderData*) (1 samples, 0.34%)</title><rect x="1153.6" y="115.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.6" y="126.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1157.7" y="403.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.7" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1157.7" y="387.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1157.7" y="371.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1157.7" y="355.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1157.7" y="339.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1157.7" y="323.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.7" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1157.7" y="307.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.7" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1157.7" y="291.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1157.7" y="275.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1157.7" y="259.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1160.7" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1157.7" y="243.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.7" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1157.7" y="227.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.7" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1157.7" y="211.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.7" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1157.7" y="195.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.7" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1157.7" y="179.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.7" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1157.7" y="163.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1160.7" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1157.7" y="147.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1160.7" y="158.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.34%)</title><rect x="1157.7" y="131.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.7" y="142.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.34%)</title><rect x="1157.7" y="115.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.7" y="126.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.34%)</title><rect x="1157.7" y="99.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1160.7" y="110.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.34%)</title><rect x="1157.7" y="83.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.7" y="94.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.34%)</title><rect x="1157.7" y="67.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.7" y="78.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.34%)</title><rect x="1157.7" y="51.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.7" y="62.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.34%)</title><rect x="1157.7" y="35.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.7" y="46.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.34%)</title><rect x="1161.7" y="515.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.7" y="526.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.34%)</title><rect x="1165.8" y="691.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.8" y="702.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.34%)</title><rect x="1165.8" y="675.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.8" y="686.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.34%)</title><rect x="1169.8" y="691.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.8" y="702.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.34%)</title><rect x="1169.8" y="675.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.8" y="686.0"></text>
</g>
<g>
<title>CodeBuffer::finalize_oop_references(methodHandle) (1 samples, 0.34%)</title><rect x="1169.8" y="659.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.8" y="670.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.03%)</title><rect x="1173.8" y="723.0" width="12.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.8" y="734.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.03%)</title><rect x="1173.8" y="707.0" width="12.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.8" y="718.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.03%)</title><rect x="1173.8" y="691.0" width="12.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.8" y="702.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (3 samples, 1.03%)</title><rect x="1173.8" y="675.0" width="12.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.8" y="686.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (3 samples, 1.03%)</title><rect x="1173.8" y="659.0" width="12.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.8" y="670.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (3 samples, 1.03%)</title><rect x="1173.8" y="643.0" width="12.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.8" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::add_dependent_nmethod(nmethod*) (3 samples, 1.03%)</title><rect x="1173.8" y="627.0" width="12.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.8" y="638.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.34%)</title><rect x="1186.0" y="787.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.0" y="798.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (1 samples, 0.34%)</title><rect x="1186.0" y="771.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.0" y="782.0"></text>
</g>
</g>
</svg>
