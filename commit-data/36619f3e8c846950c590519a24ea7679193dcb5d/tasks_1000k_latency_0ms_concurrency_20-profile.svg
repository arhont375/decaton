<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="694" onload="init(evt)" viewBox="0 0 1200 694" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="677"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="677"> </text>
<g id="frames">
<g>
<title>all (1,100 samples, 100.00%)</title><rect x="10.0" y="643.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="654.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (279 samples, 25.36%)</title><rect x="10.0" y="627.0" width="299.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="638.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.09%)</title><rect x="10.0" y="611.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (1 samples, 0.09%)</title><rect x="10.0" y="595.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.09%)</title><rect x="10.0" y="579.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.09%)</title><rect x="10.0" y="563.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (277 samples, 25.18%)</title><rect x="11.1" y="611.0" width="297.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.1" y="622.0">com/linecorp/decaton/processor/runtime/i..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (2 samples, 0.18%)</title><rect x="11.1" y="595.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.1" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (2 samples, 0.18%)</title><rect x="11.1" y="579.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.1" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.18%)</title><rect x="11.1" y="563.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.1" y="574.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.18%)</title><rect x="11.1" y="547.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="14.1" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.18%)</title><rect x="11.1" y="531.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="14.1" y="542.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.18%)</title><rect x="11.1" y="515.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.1" y="526.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.18%)</title><rect x="11.1" y="499.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="14.1" y="510.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="11.1" y="483.0" width="1.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="14.1" y="494.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.09%)</title><rect x="12.1" y="483.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.1" y="494.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="12.1" y="467.0" width="1.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="15.1" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (3 samples, 0.27%)</title><rect x="13.2" y="595.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.2" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (3 samples, 0.27%)</title><rect x="13.2" y="579.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.2" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.18%)</title><rect x="14.3" y="563.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.3" y="574.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.09%)</title><rect x="14.3" y="547.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="17.3" y="558.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.09%)</title><rect x="14.3" y="531.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.3" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.09%)</title><rect x="14.3" y="515.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.3" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="14.3" y="499.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="17.3" y="510.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="15.4" y="547.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.4" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="15.4" y="531.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="18.4" y="542.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="15.4" y="515.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.4" y="526.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="15.4" y="499.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.4" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="15.4" y="483.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="18.4" y="494.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="15.4" y="467.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="18.4" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (7 samples, 0.64%)</title><rect x="16.4" y="595.0" width="7.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.4" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (7 samples, 0.64%)</title><rect x="16.4" y="579.0" width="7.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="19.4" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (7 samples, 0.64%)</title><rect x="16.4" y="563.0" width="7.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.4" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$270/57009747.accept (5 samples, 0.45%)</title><rect x="18.6" y="547.0" width="5.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.6" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (5 samples, 0.45%)</title><rect x="18.6" y="531.0" width="5.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.6" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (5 samples, 0.45%)</title><rect x="18.6" y="515.0" width="5.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.6" y="526.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (5 samples, 0.45%)</title><rect x="18.6" y="499.0" width="5.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="21.6" y="510.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (208 samples, 18.91%)</title><rect x="23.9" y="595.0" width="223.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="26.9" y="606.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$269/1436504617.accept (201 samples, 18.27%)</title><rect x="23.9" y="579.0" width="215.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="26.9" y="590.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (200 samples, 18.18%)</title><rect x="25.0" y="563.0" width="214.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="28.0" y="574.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (156 samples, 14.18%)</title><rect x="28.2" y="547.0" width="167.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="31.2" y="558.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (156 samples, 14.18%)</title><rect x="28.2" y="531.0" width="167.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="31.2" y="542.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (156 samples, 14.18%)</title><rect x="28.2" y="515.0" width="167.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="31.2" y="526.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (156 samples, 14.18%)</title><rect x="28.2" y="499.0" width="167.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="31.2" y="510.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (156 samples, 14.18%)</title><rect x="28.2" y="483.0" width="167.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="31.2" y="494.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (156 samples, 14.18%)</title><rect x="28.2" y="467.0" width="167.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="31.2" y="478.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (103 samples, 9.36%)</title><rect x="72.2" y="451.0" width="110.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="75.2" y="462.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (16 samples, 1.45%)</title><rect x="72.2" y="435.0" width="17.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="75.2" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (16 samples, 1.45%)</title><rect x="72.2" y="419.0" width="17.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="75.2" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (16 samples, 1.45%)</title><rect x="72.2" y="403.0" width="17.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="75.2" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.45%)</title><rect x="89.4" y="435.0" width="5.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="92.4" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (5 samples, 0.45%)</title><rect x="89.4" y="419.0" width="5.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="92.4" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (5 samples, 0.45%)</title><rect x="89.4" y="403.0" width="5.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="92.4" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (82 samples, 7.45%)</title><rect x="94.7" y="435.0" width="88.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="97.7" y="446.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (82 samples, 7.45%)</title><rect x="94.7" y="419.0" width="88.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="97.7" y="430.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (80 samples, 7.27%)</title><rect x="94.7" y="403.0" width="85.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="97.7" y="414.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (80 samples, 7.27%)</title><rect x="94.7" y="387.0" width="85.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="97.7" y="398.0">java/util/..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (80 samples, 7.27%)</title><rect x="94.7" y="371.0" width="85.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="97.7" y="382.0">sun/misc/U..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.09%)</title><rect x="94.7" y="355.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="97.7" y="366.0"></text>
</g>
<g>
<title>Unsafe_Unpark (74 samples, 6.73%)</title><rect x="95.8" y="355.0" width="79.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="98.8" y="366.0">Unsafe_Un..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="96.9" y="339.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="99.9" y="350.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.09%)</title><rect x="98.0" y="339.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="101.0" y="350.0"></text>
</g>
<g>
<title>__pthread_cond_signal (44 samples, 4.00%)</title><rect x="99.0" y="339.0" width="47.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="102.0" y="350.0">__pt..</text>
</g>
<g>
<title>_init (1 samples, 0.09%)</title><rect x="146.2" y="339.0" width="1.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="149.2" y="350.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (9 samples, 0.82%)</title><rect x="147.3" y="339.0" width="9.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="150.3" y="350.0"></text>
</g>
<g>
<title>pthread_mutex_lock (17 samples, 1.55%)</title><rect x="157.0" y="339.0" width="18.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="160.0" y="350.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 0.45%)</title><rect x="175.2" y="355.0" width="5.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="178.2" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.18%)</title><rect x="180.6" y="403.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="183.6" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.45%)</title><rect x="182.7" y="451.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="185.7" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (5 samples, 0.45%)</title><rect x="182.7" y="435.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="185.7" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.45%)</title><rect x="182.7" y="419.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="185.7" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.18%)</title><rect x="188.1" y="451.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="191.1" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.18%)</title><rect x="188.1" y="435.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="191.1" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.18%)</title><rect x="188.1" y="419.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="191.1" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (2 samples, 0.18%)</title><rect x="188.1" y="403.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="191.1" y="414.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (5 samples, 0.45%)</title><rect x="190.2" y="451.0" width="5.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="193.2" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (1 samples, 0.09%)</title><rect x="195.6" y="547.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="198.6" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.09%)</title><rect x="195.6" y="531.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="198.6" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (2 samples, 0.18%)</title><rect x="196.7" y="547.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="199.7" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.18%)</title><rect x="196.7" y="531.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="199.7" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.18%)</title><rect x="196.7" y="515.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="199.7" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/TaskRequest.&lt;init&gt; (38 samples, 3.45%)</title><rect x="198.8" y="547.0" width="40.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="201.8" y="558.0">com..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.18%)</title><rect x="198.8" y="531.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="201.8" y="542.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (36 samples, 3.27%)</title><rect x="200.9" y="531.0" width="38.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="203.9" y="542.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (13 samples, 1.18%)</title><rect x="223.5" y="515.0" width="13.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="226.5" y="526.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (9 samples, 0.82%)</title><rect x="223.5" y="499.0" width="9.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="226.5" y="510.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (9 samples, 0.82%)</title><rect x="223.5" y="483.0" width="9.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="226.5" y="494.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (9 samples, 0.82%)</title><rect x="223.5" y="467.0" width="9.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="226.5" y="478.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.18%)</title><rect x="231.0" y="451.0" width="2.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="234.0" y="462.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.09%)</title><rect x="233.1" y="499.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="236.1" y="510.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.27%)</title><rect x="234.2" y="499.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="237.2" y="510.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.18%)</title><rect x="237.4" y="515.0" width="2.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="240.4" y="526.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.18%)</title><rect x="239.6" y="579.0" width="2.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="242.6" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (4 samples, 0.36%)</title><rect x="241.7" y="579.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="244.7" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (4 samples, 0.36%)</title><rect x="241.7" y="563.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="244.7" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.36%)</title><rect x="241.7" y="547.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="244.7" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.36%)</title><rect x="241.7" y="531.0" width="4.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="244.7" y="542.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.09%)</title><rect x="243.9" y="515.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="246.9" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.09%)</title><rect x="244.9" y="515.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="247.9" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.09%)</title><rect x="246.0" y="579.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="249.0" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.09%)</title><rect x="246.0" y="563.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="249.0" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (57 samples, 5.18%)</title><rect x="247.1" y="595.0" width="61.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="250.1" y="606.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (57 samples, 5.18%)</title><rect x="247.1" y="579.0" width="61.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="250.1" y="590.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (31 samples, 2.82%)</title><rect x="247.1" y="563.0" width="33.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="250.1" y="574.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="247.1" y="547.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="250.1" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="247.1" y="531.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="250.1" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.09%)</title><rect x="247.1" y="515.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="250.1" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.09%)</title><rect x="247.1" y="499.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="250.1" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.09%)</title><rect x="247.1" y="483.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="250.1" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.09%)</title><rect x="247.1" y="467.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="250.1" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.09%)</title><rect x="247.1" y="451.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="250.1" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.09%)</title><rect x="247.1" y="435.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="250.1" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.handleResponse (1 samples, 0.09%)</title><rect x="247.1" y="419.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="250.1" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (30 samples, 2.73%)</title><rect x="248.1" y="547.0" width="32.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="251.1" y="558.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (30 samples, 2.73%)</title><rect x="248.1" y="531.0" width="32.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="251.1" y="542.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (26 samples, 2.36%)</title><rect x="249.2" y="515.0" width="27.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="252.2" y="526.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (26 samples, 2.36%)</title><rect x="249.2" y="499.0" width="27.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="252.2" y="510.0">o..</text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.09%)</title><rect x="253.5" y="483.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="256.5" y="494.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureCapacityInternal (1 samples, 0.09%)</title><rect x="253.5" y="467.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="256.5" y="478.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureExplicitCapacity (1 samples, 0.09%)</title><rect x="253.5" y="451.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="256.5" y="462.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.09%)</title><rect x="253.5" y="435.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="256.5" y="446.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.09%)</title><rect x="253.5" y="419.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="256.5" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (9 samples, 0.82%)</title><rect x="254.6" y="483.0" width="9.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="257.6" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (5 samples, 0.45%)</title><rect x="258.9" y="467.0" width="5.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="261.9" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (5 samples, 0.45%)</title><rect x="258.9" y="451.0" width="5.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="261.9" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (5 samples, 0.45%)</title><rect x="258.9" y="435.0" width="5.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="261.9" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (5 samples, 0.45%)</title><rect x="258.9" y="419.0" width="5.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="261.9" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (5 samples, 0.45%)</title><rect x="258.9" y="403.0" width="5.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="261.9" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (5 samples, 0.45%)</title><rect x="258.9" y="387.0" width="5.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="261.9" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (5 samples, 0.45%)</title><rect x="258.9" y="371.0" width="5.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="261.9" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (12 samples, 1.09%)</title><rect x="264.2" y="483.0" width="12.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="267.2" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.09%)</title><rect x="264.2" y="467.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="267.2" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (11 samples, 1.00%)</title><rect x="265.3" y="467.0" width="11.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="268.3" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (7 samples, 0.64%)</title><rect x="265.3" y="451.0" width="7.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="268.3" y="462.0"></text>
</g>
<g>
<title>java/util/Optional.of (7 samples, 0.64%)</title><rect x="265.3" y="435.0" width="7.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="268.3" y="446.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.27%)</title><rect x="269.6" y="419.0" width="3.2" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="272.6" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (4 samples, 0.36%)</title><rect x="272.8" y="451.0" width="4.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="275.8" y="462.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (4 samples, 0.36%)</title><rect x="272.8" y="435.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="275.8" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.18%)</title><rect x="277.1" y="515.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="280.1" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.18%)</title><rect x="277.1" y="499.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="280.1" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.09%)</title><rect x="277.1" y="483.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="280.1" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.09%)</title><rect x="277.1" y="467.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="280.1" y="478.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="277.1" y="451.0" width="1.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="280.1" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="278.2" y="483.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="281.2" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="278.2" y="467.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="281.2" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="278.2" y="451.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="281.2" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="278.2" y="435.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="281.2" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.09%)</title><rect x="279.3" y="515.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="282.3" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.09%)</title><rect x="279.3" y="499.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="282.3" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.09%)</title><rect x="279.3" y="483.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="282.3" y="494.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.09%)</title><rect x="279.3" y="467.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="282.3" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="279.3" y="451.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="282.3" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (11 samples, 1.00%)</title><rect x="280.3" y="563.0" width="11.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="283.3" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (9 samples, 0.82%)</title><rect x="280.3" y="547.0" width="9.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="283.3" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (9 samples, 0.82%)</title><rect x="280.3" y="531.0" width="9.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="283.3" y="542.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 0.27%)</title><rect x="281.4" y="515.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="284.4" y="526.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.09%)</title><rect x="281.4" y="499.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="284.4" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.09%)</title><rect x="281.4" y="483.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="284.4" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.09%)</title><rect x="281.4" y="467.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="284.4" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.09%)</title><rect x="281.4" y="451.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="284.4" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$233/766664480.accept (2 samples, 0.18%)</title><rect x="282.5" y="499.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="285.5" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (2 samples, 0.18%)</title><rect x="282.5" y="483.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="285.5" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.09%)</title><rect x="282.5" y="467.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="285.5" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.09%)</title><rect x="282.5" y="451.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="285.5" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.09%)</title><rect x="282.5" y="435.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="285.5" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="282.5" y="419.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="285.5" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="282.5" y="403.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="285.5" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.09%)</title><rect x="283.5" y="467.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="286.5" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.09%)</title><rect x="283.5" y="451.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="286.5" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.09%)</title><rect x="283.5" y="435.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="286.5" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.09%)</title><rect x="284.6" y="515.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="287.6" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.09%)</title><rect x="284.6" y="499.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="287.6" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 0.18%)</title><rect x="285.7" y="515.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="288.7" y="526.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (2 samples, 0.18%)</title><rect x="285.7" y="499.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="288.7" y="510.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (2 samples, 0.18%)</title><rect x="285.7" y="483.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="288.7" y="494.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.next (1 samples, 0.09%)</title><rect x="285.7" y="467.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="288.7" y="478.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (1 samples, 0.09%)</title><rect x="285.7" y="451.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="288.7" y="462.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.09%)</title><rect x="285.7" y="435.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="288.7" y="446.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (1 samples, 0.09%)</title><rect x="286.8" y="467.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="289.8" y="478.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.&lt;init&gt; (1 samples, 0.09%)</title><rect x="286.8" y="451.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="289.8" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.18%)</title><rect x="287.8" y="515.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="290.8" y="526.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.09%)</title><rect x="287.8" y="499.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="290.8" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.09%)</title><rect x="288.9" y="499.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="291.9" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="288.9" y="483.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="291.9" y="494.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="288.9" y="467.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="291.9" y="478.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="288.9" y="451.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="291.9" y="462.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="288.9" y="435.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="291.9" y="446.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="288.9" y="419.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="291.9" y="430.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.09%)</title><rect x="288.9" y="403.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="291.9" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (2 samples, 0.18%)</title><rect x="290.0" y="547.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="293.0" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.09%)</title><rect x="290.0" y="531.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="293.0" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.09%)</title><rect x="290.0" y="515.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="293.0" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.09%)</title><rect x="290.0" y="499.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="293.0" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.09%)</title><rect x="290.0" y="483.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="293.0" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.09%)</title><rect x="290.0" y="467.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="293.0" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="290.0" y="451.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="293.0" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.09%)</title><rect x="290.0" y="435.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="293.0" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.pollHeartbeat (1 samples, 0.09%)</title><rect x="291.1" y="531.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="294.1" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (6 samples, 0.55%)</title><rect x="292.1" y="563.0" width="6.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="295.1" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (5 samples, 0.45%)</title><rect x="292.1" y="547.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="295.1" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (5 samples, 0.45%)</title><rect x="292.1" y="531.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="295.1" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.hasStagedReceives (1 samples, 0.09%)</title><rect x="292.1" y="515.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="295.1" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.18%)</title><rect x="293.2" y="515.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="296.2" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.09%)</title><rect x="293.2" y="499.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="296.2" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.09%)</title><rect x="293.2" y="483.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="296.2" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.09%)</title><rect x="293.2" y="467.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="296.2" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.09%)</title><rect x="293.2" y="451.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="296.2" y="462.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.09%)</title><rect x="293.2" y="435.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="296.2" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.09%)</title><rect x="293.2" y="419.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="296.2" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.09%)</title><rect x="293.2" y="403.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="296.2" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerLastTemporaryDirectBuffer (1 samples, 0.09%)</title><rect x="293.2" y="387.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="296.2" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.offerLast (1 samples, 0.09%)</title><rect x="293.2" y="371.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="296.2" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.09%)</title><rect x="294.3" y="499.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="297.3" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.09%)</title><rect x="294.3" y="483.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="297.3" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.09%)</title><rect x="294.3" y="467.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="297.3" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.09%)</title><rect x="294.3" y="451.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="297.3" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.09%)</title><rect x="294.3" y="435.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="297.3" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.09%)</title><rect x="294.3" y="419.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="297.3" y="430.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="294.3" y="403.0" width="1.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="297.3" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (2 samples, 0.18%)</title><rect x="295.3" y="515.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="298.3" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (2 samples, 0.18%)</title><rect x="295.3" y="499.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="298.3" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (2 samples, 0.18%)</title><rect x="295.3" y="483.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="298.3" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (2 samples, 0.18%)</title><rect x="295.3" y="467.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="298.3" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (2 samples, 0.18%)</title><rect x="295.3" y="451.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="298.3" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (2 samples, 0.18%)</title><rect x="295.3" y="435.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="298.3" y="446.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_EPollArrayWrapper_epollWait (1 samples, 0.09%)</title><rect x="296.4" y="419.0" width="1.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="299.4" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.09%)</title><rect x="297.5" y="547.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="300.5" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.09%)</title><rect x="297.5" y="531.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="300.5" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="297.5" y="515.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="300.5" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="297.5" y="499.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="300.5" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.09%)</title><rect x="297.5" y="483.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="300.5" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkSend.&lt;init&gt; (1 samples, 0.09%)</title><rect x="297.5" y="467.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="300.5" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkSend.sizeBuffer (1 samples, 0.09%)</title><rect x="297.5" y="451.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="300.5" y="462.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.putInt (1 samples, 0.09%)</title><rect x="297.5" y="435.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="300.5" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (8 samples, 0.73%)</title><rect x="298.6" y="563.0" width="8.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="301.6" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (8 samples, 0.73%)</title><rect x="298.6" y="547.0" width="8.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="301.6" y="558.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.18%)</title><rect x="298.6" y="531.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="301.6" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$257/820983508.accept (2 samples, 0.18%)</title><rect x="298.6" y="515.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="301.6" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.09%)</title><rect x="299.6" y="499.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="302.6" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.09%)</title><rect x="299.6" y="483.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="302.6" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.09%)</title><rect x="299.6" y="467.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="302.6" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="299.6" y="451.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="302.6" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="299.6" y="435.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="302.6" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (5 samples, 0.45%)</title><rect x="300.7" y="531.0" width="5.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="303.7" y="542.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="300.7" y="515.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="303.7" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="300.7" y="499.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="303.7" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="300.7" y="483.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="303.7" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.next (1 samples, 0.09%)</title><rect x="301.8" y="515.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="304.8" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (3 samples, 0.27%)</title><rect x="302.9" y="515.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="305.9" y="526.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.27%)</title><rect x="302.9" y="499.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="305.9" y="510.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.27%)</title><rect x="302.9" y="483.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="305.9" y="494.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.18%)</title><rect x="303.9" y="467.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="306.9" y="478.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.18%)</title><rect x="303.9" y="451.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="306.9" y="462.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.18%)</title><rect x="303.9" y="435.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="306.9" y="446.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (2 samples, 0.18%)</title><rect x="303.9" y="419.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="306.9" y="430.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (2 samples, 0.18%)</title><rect x="303.9" y="403.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="306.9" y="414.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (1 samples, 0.09%)</title><rect x="303.9" y="387.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="306.9" y="398.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (1 samples, 0.09%)</title><rect x="303.9" y="371.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="306.9" y="382.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.09%)</title><rect x="303.9" y="355.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="306.9" y="366.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="305.0" y="387.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="308.0" y="398.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="305.0" y="371.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="308.0" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$259/776144850.test (1 samples, 0.09%)</title><rect x="305.0" y="355.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="308.0" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$fetchablePartitions$1 (1 samples, 0.09%)</title><rect x="305.0" y="339.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="308.0" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$258/157237502.test (1 samples, 0.09%)</title><rect x="305.0" y="323.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="308.0" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$fetchablePartitions$6 (1 samples, 0.09%)</title><rect x="305.0" y="307.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="308.0" y="318.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.09%)</title><rect x="305.0" y="291.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="308.0" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.09%)</title><rect x="305.0" y="275.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="308.0" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="305.0" y="259.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="308.0" y="270.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (1 samples, 0.09%)</title><rect x="305.0" y="243.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="308.0" y="254.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.09%)</title><rect x="306.1" y="531.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="309.1" y="542.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.09%)</title><rect x="306.1" y="515.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="309.1" y="526.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.09%)</title><rect x="306.1" y="499.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="309.1" y="510.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="306.1" y="483.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="309.1" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="306.1" y="467.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="309.1" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="306.1" y="451.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="309.1" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.09%)</title><rect x="307.1" y="563.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="310.1" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="307.1" y="547.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="310.1" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.maybeHandlePropertyReload (1 samples, 0.09%)</title><rect x="308.2" y="611.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="311.2" y="622.0"></text>
</g>
<g>
<title>java/lang/Thread.run (764 samples, 69.45%)</title><rect x="309.3" y="627.0" width="819.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="312.3" y="638.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (764 samples, 69.45%)</title><rect x="309.3" y="611.0" width="819.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="312.3" y="622.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (764 samples, 69.45%)</title><rect x="309.3" y="595.0" width="819.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="312.3" y="606.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$285/1485762261.run (499 samples, 45.36%)</title><rect x="316.8" y="579.0" width="535.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="319.8" y="590.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$285/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$70 (499 samples, 45.36%)</title><rect x="316.8" y="563.0" width="535.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="319.8" y="574.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTa..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (499 samples, 45.36%)</title><rect x="316.8" y="547.0" width="535.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="319.8" y="558.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (490 samples, 44.55%)</title><rect x="316.8" y="531.0" width="525.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="319.8" y="542.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleT..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (167 samples, 15.18%)</title><rect x="328.6" y="515.0" width="179.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="331.6" y="526.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$42/815674463.extract (167 samples, 15.18%)</title><rect x="328.6" y="499.0" width="179.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="331.6" y="510.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (167 samples, 15.18%)</title><rect x="328.6" y="483.0" width="179.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="331.6" y="494.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (167 samples, 15.18%)</title><rect x="328.6" y="467.0" width="179.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="331.6" y="478.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (167 samples, 15.18%)</title><rect x="328.6" y="451.0" width="179.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="331.6" y="462.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (167 samples, 15.18%)</title><rect x="328.6" y="435.0" width="179.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="331.6" y="446.0">com/fasterxml/jackson/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (59 samples, 5.36%)</title><rect x="328.6" y="419.0" width="63.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="331.6" y="430.0">com/fas..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="347.9" y="403.0" width="1.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="350.9" y="414.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="347.9" y="387.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="350.9" y="398.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="349.0" y="403.0" width="1.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="352.0" y="414.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.55%)</title><rect x="350.1" y="403.0" width="6.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="353.1" y="414.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.36%)</title><rect x="352.2" y="387.0" width="4.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="355.2" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (13 samples, 1.18%)</title><rect x="356.5" y="403.0" width="13.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="359.5" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (10 samples, 0.91%)</title><rect x="358.6" y="387.0" width="10.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="361.6" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (7 samples, 0.64%)</title><rect x="361.9" y="371.0" width="7.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="364.9" y="382.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 0.64%)</title><rect x="361.9" y="355.0" width="7.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="364.9" y="366.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (7 samples, 0.64%)</title><rect x="361.9" y="339.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="364.9" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (7 samples, 0.64%)</title><rect x="361.9" y="323.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="364.9" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (7 samples, 0.64%)</title><rect x="361.9" y="307.0" width="7.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="364.9" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.09%)</title><rect x="369.4" y="387.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="372.4" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (19 samples, 1.73%)</title><rect x="370.4" y="403.0" width="20.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="373.4" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (4 samples, 0.36%)</title><rect x="386.5" y="387.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="389.5" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (4 samples, 0.36%)</title><rect x="386.5" y="371.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="389.5" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (4 samples, 0.36%)</title><rect x="386.5" y="355.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="389.5" y="366.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="390.8" y="403.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="393.8" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (101 samples, 9.18%)</title><rect x="391.9" y="419.0" width="108.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="394.9" y="430.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (3 samples, 0.27%)</title><rect x="394.0" y="403.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="397.0" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.09%)</title><rect x="397.3" y="403.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="400.3" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (5 samples, 0.45%)</title><rect x="398.3" y="403.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="401.3" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.27%)</title><rect x="400.5" y="387.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="403.5" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (10 samples, 0.91%)</title><rect x="403.7" y="403.0" width="10.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="406.7" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (9 samples, 0.82%)</title><rect x="404.8" y="387.0" width="9.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="407.8" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (6 samples, 0.55%)</title><rect x="406.9" y="371.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="409.9" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (6 samples, 0.55%)</title><rect x="406.9" y="355.0" width="6.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="409.9" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (3 samples, 0.27%)</title><rect x="410.1" y="339.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="413.1" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.09%)</title><rect x="413.3" y="371.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="416.3" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.09%)</title><rect x="413.3" y="355.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="416.3" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (7 samples, 0.64%)</title><rect x="414.4" y="403.0" width="7.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="417.4" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="415.5" y="387.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="418.5" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="415.5" y="371.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="418.5" y="382.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.09%)</title><rect x="415.5" y="355.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="418.5" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (5 samples, 0.45%)</title><rect x="416.6" y="387.0" width="5.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="419.6" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (73 samples, 6.64%)</title><rect x="421.9" y="403.0" width="78.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="424.9" y="414.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (21 samples, 1.91%)</title><rect x="421.9" y="387.0" width="22.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="424.9" y="398.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.18%)</title><rect x="426.2" y="371.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="429.2" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.18%)</title><rect x="426.2" y="355.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="429.2" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.18%)</title><rect x="426.2" y="339.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="429.2" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (14 samples, 1.27%)</title><rect x="428.4" y="371.0" width="15.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="431.4" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.09%)</title><rect x="443.4" y="371.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="446.4" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.09%)</title><rect x="443.4" y="355.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="446.4" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.09%)</title><rect x="444.5" y="387.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="447.5" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (51 samples, 4.64%)</title><rect x="445.5" y="387.0" width="54.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="448.5" y="398.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (51 samples, 4.64%)</title><rect x="445.5" y="371.0" width="54.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="448.5" y="382.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.09%)</title><rect x="446.6" y="355.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="449.6" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (49 samples, 4.45%)</title><rect x="447.7" y="355.0" width="52.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="450.7" y="366.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (14 samples, 1.27%)</title><rect x="452.0" y="339.0" width="15.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="455.0" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.09%)</title><rect x="454.1" y="323.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="457.1" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (9 samples, 0.82%)</title><rect x="455.2" y="323.0" width="9.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="458.2" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (9 samples, 0.82%)</title><rect x="455.2" y="307.0" width="9.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="458.2" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (9 samples, 0.82%)</title><rect x="455.2" y="291.0" width="9.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="458.2" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (4 samples, 0.36%)</title><rect x="460.5" y="275.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="463.5" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.09%)</title><rect x="464.8" y="323.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="467.8" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.09%)</title><rect x="465.9" y="323.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="468.9" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.09%)</title><rect x="465.9" y="307.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="468.9" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (9 samples, 0.82%)</title><rect x="467.0" y="339.0" width="9.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="470.0" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (8 samples, 0.73%)</title><rect x="468.1" y="323.0" width="8.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="471.1" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (8 samples, 0.73%)</title><rect x="468.1" y="307.0" width="8.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="471.1" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (8 samples, 0.73%)</title><rect x="468.1" y="291.0" width="8.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="471.1" y="302.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (8 samples, 0.73%)</title><rect x="468.1" y="275.0" width="8.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="471.1" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.09%)</title><rect x="476.6" y="339.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="479.6" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (13 samples, 1.18%)</title><rect x="477.7" y="339.0" width="14.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="480.7" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (13 samples, 1.18%)</title><rect x="477.7" y="323.0" width="14.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="480.7" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (13 samples, 1.18%)</title><rect x="477.7" y="307.0" width="14.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="480.7" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (13 samples, 1.18%)</title><rect x="477.7" y="291.0" width="14.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="480.7" y="302.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (13 samples, 1.18%)</title><rect x="477.7" y="275.0" width="14.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="480.7" y="286.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (10 samples, 0.91%)</title><rect x="480.9" y="259.0" width="10.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="483.9" y="270.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor16.newInstance (6 samples, 0.55%)</title><rect x="485.2" y="243.0" width="6.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="488.2" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (7 samples, 0.64%)</title><rect x="491.7" y="339.0" width="7.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="494.7" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.64%)</title><rect x="491.7" y="323.0" width="7.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="494.7" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.64%)</title><rect x="491.7" y="307.0" width="7.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="494.7" y="318.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor16.newInstance (1 samples, 0.09%)</title><rect x="499.2" y="339.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="502.2" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (7 samples, 0.64%)</title><rect x="500.2" y="419.0" width="7.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="503.2" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (3 samples, 0.27%)</title><rect x="500.2" y="403.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="503.2" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (4 samples, 0.36%)</title><rect x="503.5" y="403.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="506.5" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (4 samples, 0.36%)</title><rect x="503.5" y="387.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="506.5" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (4 samples, 0.36%)</title><rect x="503.5" y="371.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="506.5" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.36%)</title><rect x="503.5" y="355.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="506.5" y="366.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (292 samples, 26.55%)</title><rect x="507.7" y="515.0" width="313.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="510.7" y="526.0">com/linecorp/decaton/processor/runtime/int..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (41 samples, 3.73%)</title><rect x="507.7" y="499.0" width="44.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="510.7" y="510.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$207/833274017.process (2 samples, 0.18%)</title><rect x="509.9" y="483.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="512.9" y="494.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (37 samples, 3.36%)</title><rect x="512.0" y="483.0" width="39.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="515.0" y="494.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (35 samples, 3.18%)</title><rect x="513.1" y="467.0" width="37.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="516.1" y="478.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 0.27%)</title><rect x="514.2" y="451.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="517.2" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 0.27%)</title><rect x="514.2" y="435.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="517.2" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 0.27%)</title><rect x="514.2" y="419.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="517.2" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 0.27%)</title><rect x="514.2" y="403.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="517.2" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.36%)</title><rect x="517.4" y="451.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="520.4" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 0.36%)</title><rect x="517.4" y="435.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="520.4" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.36%)</title><rect x="517.4" y="419.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="520.4" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (4 samples, 0.36%)</title><rect x="517.4" y="403.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="520.4" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 0.36%)</title><rect x="517.4" y="387.0" width="4.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="520.4" y="398.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (27 samples, 2.45%)</title><rect x="521.7" y="451.0" width="29.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="524.7" y="462.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (19 samples, 1.73%)</title><rect x="530.3" y="435.0" width="20.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="533.3" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (7 samples, 0.64%)</title><rect x="543.1" y="419.0" width="7.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="546.1" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.09%)</title><rect x="550.7" y="467.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="553.7" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.27%)</title><rect x="551.7" y="499.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="554.7" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.27%)</title><rect x="551.7" y="483.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="554.7" y="494.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="551.7" y="467.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="554.7" y="478.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="551.7" y="451.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="554.7" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="551.7" y="435.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="554.7" y="446.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.18%)</title><rect x="552.8" y="467.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="555.8" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (177 samples, 16.09%)</title><rect x="554.9" y="499.0" width="189.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="557.9" y="510.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.18%)</title><rect x="557.1" y="483.0" width="2.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="560.1" y="494.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.18%)</title><rect x="557.1" y="467.0" width="2.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="560.1" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (171 samples, 15.55%)</title><rect x="559.2" y="483.0" width="183.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="562.2" y="494.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (45 samples, 4.09%)</title><rect x="574.3" y="467.0" width="48.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="577.3" y="478.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (44 samples, 4.00%)</title><rect x="574.3" y="451.0" width="47.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="577.3" y="462.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (32 samples, 2.91%)</title><rect x="581.8" y="435.0" width="34.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="584.8" y="446.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (30 samples, 2.73%)</title><rect x="581.8" y="419.0" width="32.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="584.8" y="430.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (30 samples, 2.73%)</title><rect x="581.8" y="403.0" width="32.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="584.8" y="414.0">ja..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (30 samples, 2.73%)</title><rect x="581.8" y="387.0" width="32.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="584.8" y="398.0">ja..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (12 samples, 1.09%)</title><rect x="598.9" y="371.0" width="12.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="601.9" y="382.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="598.9" y="355.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="601.9" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="600.0" y="355.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="603.0" y="366.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.09%)</title><rect x="600.0" y="339.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="603.0" y="350.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.27%)</title><rect x="601.1" y="355.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="604.1" y="366.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="601.1" y="339.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="604.1" y="350.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.09%)</title><rect x="601.1" y="323.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="604.1" y="334.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.18%)</title><rect x="602.1" y="339.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="605.1" y="350.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.09%)</title><rect x="603.2" y="323.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="606.2" y="334.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.09%)</title><rect x="603.2" y="307.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="606.2" y="318.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (2 samples, 0.18%)</title><rect x="604.3" y="355.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="607.3" y="366.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.36%)</title><rect x="606.4" y="355.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="609.4" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.27%)</title><rect x="607.5" y="339.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="610.5" y="350.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="607.5" y="323.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="610.5" y="334.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="607.5" y="307.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="610.5" y="318.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (2 samples, 0.18%)</title><rect x="608.6" y="323.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="611.6" y="334.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.09%)</title><rect x="609.7" y="307.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="612.7" y="318.0"></text>
</g>
<g>
<title>nmethod::get_deopt_original_pc(frame const*) (1 samples, 0.09%)</title><rect x="610.7" y="355.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="613.7" y="366.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.18%)</title><rect x="611.8" y="371.0" width="2.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="614.8" y="382.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.18%)</title><rect x="613.9" y="419.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="616.9" y="430.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.45%)</title><rect x="616.1" y="435.0" width="5.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="619.1" y="446.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.09%)</title><rect x="621.5" y="451.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="624.5" y="462.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.09%)</title><rect x="621.5" y="435.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="624.5" y="446.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (12 samples, 1.09%)</title><rect x="622.5" y="467.0" width="12.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="625.5" y="478.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (4 samples, 0.36%)</title><rect x="622.5" y="451.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="625.5" y="462.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (4 samples, 0.36%)</title><rect x="622.5" y="435.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="625.5" y="446.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.09%)</title><rect x="625.7" y="419.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="628.7" y="430.0"></text>
</g>
<g>
<title>java/lang/Long.toString (8 samples, 0.73%)</title><rect x="626.8" y="451.0" width="8.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="629.8" y="462.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (8 samples, 0.73%)</title><rect x="626.8" y="435.0" width="8.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="629.8" y="446.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.09%)</title><rect x="634.3" y="419.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="637.3" y="430.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.27%)</title><rect x="635.4" y="467.0" width="3.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="638.4" y="478.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (97 samples, 8.82%)</title><rect x="638.6" y="467.0" width="104.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="641.6" y="478.0">org/slf4j/MD..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (96 samples, 8.73%)</title><rect x="639.7" y="451.0" width="103.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="642.7" y="462.0">ch/qos/logba..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 0.36%)</title><rect x="639.7" y="435.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="642.7" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 0.36%)</title><rect x="639.7" y="419.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="642.7" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (4 samples, 0.36%)</title><rect x="639.7" y="403.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="642.7" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 0.36%)</title><rect x="639.7" y="387.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="642.7" y="398.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.18%)</title><rect x="644.0" y="435.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="647.0" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.18%)</title><rect x="644.0" y="419.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="647.0" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.18%)</title><rect x="644.0" y="403.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="647.0" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.18%)</title><rect x="644.0" y="387.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="647.0" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.18%)</title><rect x="644.0" y="371.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="647.0" y="382.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (90 samples, 8.18%)</title><rect x="646.1" y="435.0" width="96.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="649.1" y="446.0">java/util/C..</text>
</g>
<g>
<title>java/util/HashMap.put (84 samples, 7.64%)</title><rect x="652.6" y="419.0" width="90.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="655.6" y="430.0">java/util/..</text>
</g>
<g>
<title>java/util/HashMap.putVal (44 samples, 4.00%)</title><rect x="695.5" y="403.0" width="47.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="698.5" y="414.0">java..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.27%)</title><rect x="718.0" y="387.0" width="3.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="721.0" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (18 samples, 1.64%)</title><rect x="721.2" y="387.0" width="19.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="724.2" y="398.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (5 samples, 0.45%)</title><rect x="735.2" y="371.0" width="5.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="738.2" y="382.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="736.2" y="355.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="739.2" y="366.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.09%)</title><rect x="736.2" y="339.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="739.2" y="350.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.27%)</title><rect x="737.3" y="355.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="740.3" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (3 samples, 0.27%)</title><rect x="737.3" y="339.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="740.3" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.18%)</title><rect x="738.4" y="323.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="741.4" y="334.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="739.5" y="307.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="742.5" y="318.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="739.5" y="291.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="742.5" y="302.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.18%)</title><rect x="740.5" y="387.0" width="2.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="743.5" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.18%)</title><rect x="742.7" y="483.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="745.7" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (56 samples, 5.09%)</title><rect x="744.8" y="499.0" width="60.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="747.8" y="510.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (56 samples, 5.09%)</title><rect x="744.8" y="483.0" width="60.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="747.8" y="494.0">com/li..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="745.9" y="467.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="748.9" y="478.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="745.9" y="451.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="748.9" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="745.9" y="435.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="748.9" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$207/833274017.process (27 samples, 2.45%)</title><rect x="747.0" y="467.0" width="28.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="750.0" y="478.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (27 samples, 2.45%)</title><rect x="747.0" y="451.0" width="28.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="750.0" y="462.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (20 samples, 1.82%)</title><rect x="753.4" y="435.0" width="21.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="756.4" y="446.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.27%)</title><rect x="754.5" y="419.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="757.5" y="430.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.27%)</title><rect x="754.5" y="403.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="757.5" y="414.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 0.27%)</title><rect x="754.5" y="387.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="757.5" y="398.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (3 samples, 0.27%)</title><rect x="754.5" y="371.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="757.5" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (3 samples, 0.27%)</title><rect x="754.5" y="355.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="757.5" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (2 samples, 0.18%)</title><rect x="755.5" y="339.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="758.5" y="350.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (8 samples, 0.73%)</title><rect x="757.7" y="419.0" width="8.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="760.7" y="430.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.73%)</title><rect x="757.7" y="403.0" width="8.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="760.7" y="414.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.73%)</title><rect x="757.7" y="387.0" width="8.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="760.7" y="398.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (8 samples, 0.73%)</title><rect x="766.3" y="419.0" width="8.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="769.3" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.09%)</title><rect x="774.9" y="435.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="777.9" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="774.9" y="419.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="777.9" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="774.9" y="403.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="777.9" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="774.9" y="387.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="777.9" y="398.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.09%)</title><rect x="774.9" y="371.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="777.9" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (1 samples, 0.09%)</title><rect x="774.9" y="355.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="777.9" y="366.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.27%)</title><rect x="775.9" y="467.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="778.9" y="478.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="775.9" y="451.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="778.9" y="462.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="775.9" y="435.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="778.9" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="775.9" y="419.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="778.9" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="775.9" y="403.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="778.9" y="414.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="775.9" y="387.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="778.9" y="398.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="775.9" y="371.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="778.9" y="382.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="775.9" y="355.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="778.9" y="366.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.09%)</title><rect x="775.9" y="339.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="778.9" y="350.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.09%)</title><rect x="775.9" y="323.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="778.9" y="334.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.09%)</title><rect x="775.9" y="307.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="778.9" y="318.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_bytes_to_copy(HeapRegion*) (1 samples, 0.09%)</title><rect x="775.9" y="291.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="778.9" y="302.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.18%)</title><rect x="777.0" y="451.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="780.0" y="462.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.09%)</title><rect x="779.1" y="467.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="782.1" y="478.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.09%)</title><rect x="779.1" y="451.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="782.1" y="462.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (16 samples, 1.45%)</title><rect x="780.2" y="467.0" width="17.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="783.2" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (3 samples, 0.27%)</title><rect x="786.7" y="451.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="789.7" y="462.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (7 samples, 0.64%)</title><rect x="789.9" y="451.0" width="7.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="792.9" y="462.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.27%)</title><rect x="789.9" y="435.0" width="3.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="792.9" y="446.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (4 samples, 0.36%)</title><rect x="793.1" y="435.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="796.1" y="446.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (3 samples, 0.27%)</title><rect x="797.4" y="467.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="800.4" y="478.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (3 samples, 0.27%)</title><rect x="797.4" y="451.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="800.4" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.18%)</title><rect x="798.5" y="435.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="801.5" y="446.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (4 samples, 0.36%)</title><rect x="800.6" y="467.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="803.6" y="478.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.27%)</title><rect x="801.7" y="451.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="804.7" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (15 samples, 1.36%)</title><rect x="804.9" y="499.0" width="16.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="807.9" y="510.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.27%)</title><rect x="812.4" y="483.0" width="3.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="815.4" y="494.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.18%)</title><rect x="813.5" y="467.0" width="2.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="816.5" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 0.45%)</title><rect x="815.6" y="483.0" width="5.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="818.6" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 0.45%)</title><rect x="815.6" y="467.0" width="5.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="818.6" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$294/1508973584.accept (5 samples, 0.45%)</title><rect x="815.6" y="451.0" width="5.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="818.6" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$62 (5 samples, 0.45%)</title><rect x="815.6" y="435.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="818.6" y="446.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (5 samples, 0.45%)</title><rect x="815.6" y="419.0" width="5.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="818.6" y="430.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (5 samples, 0.45%)</title><rect x="815.6" y="403.0" width="5.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="818.6" y="414.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.09%)</title><rect x="818.8" y="387.0" width="1.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="821.8" y="398.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="818.8" y="371.0" width="1.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="821.8" y="382.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="819.9" y="387.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="822.9" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 1.09%)</title><rect x="821.0" y="515.0" width="12.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="824.0" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (1 samples, 0.09%)</title><rect x="821.0" y="499.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="824.0" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (11 samples, 1.00%)</title><rect x="822.1" y="499.0" width="11.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="825.1" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 0.73%)</title><rect x="825.3" y="483.0" width="8.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="828.3" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$296/1795063334.accept (8 samples, 0.73%)</title><rect x="825.3" y="467.0" width="8.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="828.3" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$61 (8 samples, 0.73%)</title><rect x="825.3" y="451.0" width="8.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="828.3" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$283/1061163795.complete (8 samples, 0.73%)</title><rect x="825.3" y="435.0" width="8.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="828.3" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$38 (8 samples, 0.73%)</title><rect x="825.3" y="419.0" width="8.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="828.3" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$282/814476270.complete (8 samples, 0.73%)</title><rect x="825.3" y="403.0" width="8.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="828.3" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$68 (8 samples, 0.73%)</title><rect x="825.3" y="387.0" width="8.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="828.3" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (8 samples, 0.73%)</title><rect x="825.3" y="371.0" width="8.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="828.3" y="382.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (8 samples, 0.73%)</title><rect x="825.3" y="355.0" width="8.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="828.3" y="366.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (8 samples, 0.73%)</title><rect x="825.3" y="339.0" width="8.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="828.3" y="350.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.73%)</title><rect x="833.9" y="515.0" width="8.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="836.9" y="526.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.73%)</title><rect x="833.9" y="499.0" width="8.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="836.9" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.09%)</title><rect x="842.4" y="531.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="845.4" y="542.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.09%)</title><rect x="842.4" y="515.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="845.4" y="526.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.09%)</title><rect x="842.4" y="499.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="845.4" y="510.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="842.4" y="483.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="845.4" y="494.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="842.4" y="467.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="845.4" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="842.4" y="451.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="845.4" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="842.4" y="435.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="845.4" y="446.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="842.4" y="419.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="845.4" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (8 samples, 0.73%)</title><rect x="843.5" y="531.0" width="8.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="846.5" y="542.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.36%)</title><rect x="847.8" y="515.0" width="4.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="850.8" y="526.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.27%)</title><rect x="848.9" y="499.0" width="3.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="851.9" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (258 samples, 23.45%)</title><rect x="852.1" y="579.0" width="276.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="855.1" y="590.0">java/util/concurrent/ThreadPoolExecut..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (255 samples, 23.18%)</title><rect x="855.3" y="563.0" width="273.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="858.3" y="574.0">java/util/concurrent/LinkedBlockingQu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (214 samples, 19.45%)</title><rect x="861.7" y="547.0" width="229.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="864.7" y="558.0">java/util/concurrent/locks/Abs..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.checkInterruptWhileWaiting (3 samples, 0.27%)</title><rect x="882.1" y="531.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="885.1" y="542.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (3 samples, 0.27%)</title><rect x="882.1" y="515.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="885.1" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.18%)</title><rect x="883.2" y="499.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="886.2" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (15 samples, 1.36%)</title><rect x="885.3" y="531.0" width="16.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="888.3" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (9 samples, 0.82%)</title><rect x="901.4" y="531.0" width="9.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="904.4" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.82%)</title><rect x="901.4" y="515.0" width="9.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="904.4" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.82%)</title><rect x="901.4" y="499.0" width="9.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="904.4" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.82%)</title><rect x="901.4" y="483.0" width="9.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="904.4" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (168 samples, 15.27%)</title><rect x="911.1" y="531.0" width="180.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="914.1" y="542.0">java/util/concurrent/lo..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (168 samples, 15.27%)</title><rect x="911.1" y="515.0" width="180.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="914.1" y="526.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.18%)</title><rect x="917.5" y="499.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="920.5" y="510.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (2 samples, 0.18%)</title><rect x="919.7" y="499.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="922.7" y="510.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.09%)</title><rect x="921.8" y="499.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="924.8" y="510.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.18%)</title><rect x="922.9" y="499.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="925.9" y="510.0"></text>
</g>
<g>
<title>Unsafe_Park (149 samples, 13.55%)</title><rect x="925.0" y="499.0" width="159.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="928.0" y="510.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.18%)</title><rect x="932.5" y="483.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="935.5" y="494.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (29 samples, 2.64%)</title><rect x="934.7" y="483.0" width="31.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="937.7" y="494.0">Pa..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (8 samples, 0.73%)</title><rect x="950.8" y="467.0" width="8.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="953.8" y="478.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.18%)</title><rect x="951.9" y="451.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="954.9" y="462.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.18%)</title><rect x="951.9" y="435.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="954.9" y="446.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.18%)</title><rect x="954.0" y="451.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="957.0" y="462.0"></text>
</g>
<g>
<title>pthread_getspecific (3 samples, 0.27%)</title><rect x="956.1" y="451.0" width="3.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="959.1" y="462.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="959.4" y="467.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="962.4" y="478.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (5 samples, 0.45%)</title><rect x="960.4" y="467.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="963.4" y="478.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="965.8" y="483.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="968.8" y="494.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.09%)</title><rect x="966.9" y="483.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="969.9" y="494.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.18%)</title><rect x="967.9" y="483.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="970.9" y="494.0"></text>
</g>
<g>
<title>__lll_lock_wait (7 samples, 0.64%)</title><rect x="970.1" y="483.0" width="7.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="973.1" y="494.0"></text>
</g>
<g>
<title>__lll_unlock_wake (36 samples, 3.27%)</title><rect x="977.6" y="483.0" width="38.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="980.6" y="494.0">__l..</text>
</g>
<g>
<title>__pthread_cond_wait (45 samples, 4.09%)</title><rect x="1016.2" y="483.0" width="48.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1019.2" y="494.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.45%)</title><rect x="1064.5" y="483.0" width="5.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1067.5" y="494.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.09%)</title><rect x="1069.9" y="483.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1072.9" y="494.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.27%)</title><rect x="1070.9" y="483.0" width="3.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1073.9" y="494.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.36%)</title><rect x="1074.1" y="483.0" width="4.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1077.1" y="494.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.09%)</title><rect x="1078.4" y="483.0" width="1.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1081.4" y="494.0"></text>
</g>
<g>
<title>_init (1 samples, 0.09%)</title><rect x="1079.5" y="483.0" width="1.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1082.5" y="494.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.09%)</title><rect x="1080.6" y="483.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1083.6" y="494.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.18%)</title><rect x="1081.7" y="483.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1084.7" y="494.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1083.8" y="483.0" width="1.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1086.8" y="494.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.36%)</title><rect x="1084.9" y="499.0" width="4.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1087.9" y="510.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.18%)</title><rect x="1089.2" y="499.0" width="2.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1092.2" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (35 samples, 3.18%)</title><rect x="1091.3" y="547.0" width="37.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1094.3" y="558.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (35 samples, 3.18%)</title><rect x="1091.3" y="531.0" width="37.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1094.3" y="542.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (35 samples, 3.18%)</title><rect x="1091.3" y="515.0" width="37.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1094.3" y="526.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (35 samples, 3.18%)</title><rect x="1091.3" y="499.0" width="37.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1094.3" y="510.0">jav..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.09%)</title><rect x="1128.9" y="627.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1131.9" y="638.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_exit(oopDesc*, BasicLock*, Thread*) (1 samples, 0.09%)</title><rect x="1128.9" y="611.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1131.9" y="622.0"></text>
</g>
<g>
<title>start_thread (56 samples, 5.09%)</title><rect x="1129.9" y="627.0" width="60.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1132.9" y="638.0">start_..</text>
</g>
<g>
<title>java_start(Thread*) (56 samples, 5.09%)</title><rect x="1129.9" y="611.0" width="60.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1132.9" y="622.0">java_s..</text>
</g>
<g>
<title>GangWorker::loop() (22 samples, 2.00%)</title><rect x="1129.9" y="595.0" width="23.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1132.9" y="606.0">G..</text>
</g>
<g>
<title>G1ParCleanupCTTask::work(unsigned int) (1 samples, 0.09%)</title><rect x="1129.9" y="579.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1132.9" y="590.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1129.9" y="563.0" width="1.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1132.9" y="574.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (19 samples, 1.73%)</title><rect x="1131.0" y="579.0" width="20.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1134.0" y="590.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.45%)</title><rect x="1131.0" y="563.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1134.0" y="574.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.09%)</title><rect x="1132.1" y="547.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1135.1" y="558.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::mark_card_deferred(unsigned long) (1 samples, 0.09%)</title><rect x="1132.1" y="531.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1135.1" y="542.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.27%)</title><rect x="1133.1" y="547.0" width="3.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1136.1" y="558.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (6 samples, 0.55%)</title><rect x="1136.4" y="563.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1139.4" y="574.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.27%)</title><rect x="1136.4" y="547.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1139.4" y="558.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.18%)</title><rect x="1136.4" y="531.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1139.4" y="542.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.09%)</title><rect x="1136.4" y="515.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1139.4" y="526.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.09%)</title><rect x="1136.4" y="499.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1139.4" y="510.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.09%)</title><rect x="1137.4" y="515.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1140.4" y="526.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1138.5" y="531.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1141.5" y="542.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.27%)</title><rect x="1139.6" y="547.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1142.6" y="558.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (3 samples, 0.27%)</title><rect x="1139.6" y="531.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.6" y="542.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (8 samples, 0.73%)</title><rect x="1142.8" y="563.0" width="8.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1145.8" y="574.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (8 samples, 0.73%)</title><rect x="1142.8" y="547.0" width="8.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1145.8" y="558.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (7 samples, 0.64%)</title><rect x="1142.8" y="531.0" width="7.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1145.8" y="542.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (7 samples, 0.64%)</title><rect x="1142.8" y="515.0" width="7.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1145.8" y="526.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (7 samples, 0.64%)</title><rect x="1142.8" y="499.0" width="7.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1145.8" y="510.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (7 samples, 0.64%)</title><rect x="1142.8" y="483.0" width="7.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1145.8" y="494.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (4 samples, 0.36%)</title><rect x="1146.0" y="467.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1149.0" y="478.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.09%)</title><rect x="1148.2" y="451.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1151.2" y="462.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (1 samples, 0.09%)</title><rect x="1148.2" y="435.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1151.2" y="446.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.09%)</title><rect x="1149.2" y="451.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1152.2" y="462.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.09%)</title><rect x="1150.3" y="531.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.3" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.09%)</title><rect x="1150.3" y="515.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.3" y="526.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.09%)</title><rect x="1150.3" y="499.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1153.3" y="510.0"></text>
</g>
<g>
<title>HeapRegionRemSetIterator::has_next(unsigned long&amp;) (1 samples, 0.09%)</title><rect x="1150.3" y="483.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1153.3" y="494.0"></text>
</g>
<g>
<title>RSHashTableIter::has_next(unsigned long&amp;) (1 samples, 0.09%)</title><rect x="1150.3" y="467.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.3" y="478.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.18%)</title><rect x="1151.4" y="579.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.4" y="590.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.18%)</title><rect x="1151.4" y="563.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1154.4" y="574.0"></text>
</g>
<g>
<title>__pthread_cond_wait (2 samples, 0.18%)</title><rect x="1151.4" y="547.0" width="2.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1154.4" y="558.0"></text>
</g>
<g>
<title>JavaThread::run() (32 samples, 2.91%)</title><rect x="1153.5" y="595.0" width="34.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.5" y="606.0">Ja..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (32 samples, 2.91%)</title><rect x="1153.5" y="579.0" width="34.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.5" y="590.0">Ja..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (32 samples, 2.91%)</title><rect x="1153.5" y="563.0" width="34.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1156.5" y="574.0">Co..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (32 samples, 2.91%)</title><rect x="1153.5" y="547.0" width="34.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1156.5" y="558.0">Co..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (30 samples, 2.73%)</title><rect x="1153.5" y="531.0" width="32.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1156.5" y="542.0">C2..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (30 samples, 2.73%)</title><rect x="1153.5" y="515.0" width="32.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.5" y="526.0">Co..</text>
</g>
<g>
<title>Compile::Code_Gen() (17 samples, 1.55%)</title><rect x="1153.5" y="499.0" width="18.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1156.5" y="510.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.09%)</title><rect x="1153.5" y="483.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.5" y="494.0"></text>
</g>
<g>
<title>loadConPNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.09%)</title><rect x="1153.5" y="467.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1156.5" y="478.0"></text>
</g>
<g>
<title>immPOper::constant_reloc() const (1 samples, 0.09%)</title><rect x="1153.5" y="451.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1156.5" y="462.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.18%)</title><rect x="1154.6" y="483.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1157.6" y="494.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.18%)</title><rect x="1154.6" y="467.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1157.6" y="478.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.09%)</title><rect x="1154.6" y="451.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1157.6" y="462.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.09%)</title><rect x="1155.7" y="451.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.7" y="462.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.09%)</title><rect x="1155.7" y="435.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.7" y="446.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.09%)</title><rect x="1155.7" y="419.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1158.7" y="430.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.27%)</title><rect x="1156.7" y="483.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.7" y="494.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.27%)</title><rect x="1156.7" y="467.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.7" y="478.0"></text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.09%)</title><rect x="1156.7" y="451.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1159.7" y="462.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1156.7" y="435.0" width="1.1" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1159.7" y="446.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1157.8" y="451.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.8" y="462.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.09%)</title><rect x="1157.8" y="435.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.8" y="446.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1158.9" y="451.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.9" y="462.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1158.9" y="435.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1161.9" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (10 samples, 0.91%)</title><rect x="1160.0" y="483.0" width="10.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.0" y="494.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.09%)</title><rect x="1160.0" y="467.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.0" y="478.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.09%)</title><rect x="1160.0" y="451.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.0" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.09%)</title><rect x="1161.0" y="467.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.0" y="478.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (1 samples, 0.09%)</title><rect x="1162.1" y="467.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.1" y="478.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.09%)</title><rect x="1162.1" y="451.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.1" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.18%)</title><rect x="1163.2" y="467.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.2" y="478.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.09%)</title><rect x="1164.3" y="451.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.3" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 0.36%)</title><rect x="1165.3" y="467.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1168.3" y="478.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.09%)</title><rect x="1168.5" y="451.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.5" y="462.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.09%)</title><rect x="1169.6" y="467.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.6" y="478.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1169.6" y="451.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1172.6" y="462.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1170.7" y="483.0" width="1.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1173.7" y="494.0"></text>
</g>
<g>
<title>Compile::Optimize() (9 samples, 0.82%)</title><rect x="1171.8" y="499.0" width="9.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.8" y="510.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.09%)</title><rect x="1171.8" y="483.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.8" y="494.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.09%)</title><rect x="1171.8" y="467.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.8" y="478.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.09%)</title><rect x="1171.8" y="451.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.8" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.09%)</title><rect x="1172.8" y="483.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.8" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.09%)</title><rect x="1172.8" y="467.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.8" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.09%)</title><rect x="1172.8" y="451.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.8" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field(Node*, PointsToNode::EscapeState, int) (1 samples, 0.09%)</title><rect x="1172.8" y="435.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.8" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::is_oop_field(Node*, int, bool*) (1 samples, 0.09%)</title><rect x="1172.8" y="419.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.8" y="430.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1172.8" y="403.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.8" y="414.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1172.8" y="387.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.8" y="398.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1172.8" y="371.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.8" y="382.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1172.8" y="355.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.8" y="366.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.09%)</title><rect x="1173.9" y="483.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.9" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (6 samples, 0.55%)</title><rect x="1175.0" y="483.0" width="6.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.0" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.18%)</title><rect x="1175.0" y="467.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.0" y="478.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.18%)</title><rect x="1177.1" y="467.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.1" y="478.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.09%)</title><rect x="1178.2" y="451.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.2" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.18%)</title><rect x="1179.3" y="467.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.3" y="478.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.09%)</title><rect x="1180.3" y="451.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.3" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.09%)</title><rect x="1180.3" y="435.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.3" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.36%)</title><rect x="1181.4" y="499.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.4" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.36%)</title><rect x="1181.4" y="483.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.36%)</title><rect x="1181.4" y="467.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.36%)</title><rect x="1181.4" y="451.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.36%)</title><rect x="1181.4" y="435.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.36%)</title><rect x="1181.4" y="419.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.4" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.36%)</title><rect x="1181.4" y="403.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.4" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.36%)</title><rect x="1181.4" y="387.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.36%)</title><rect x="1181.4" y="371.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.36%)</title><rect x="1181.4" y="355.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.36%)</title><rect x="1181.4" y="339.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.4" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.36%)</title><rect x="1181.4" y="323.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.4" y="334.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1181.4" y="307.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.4" y="318.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.09%)</title><rect x="1181.4" y="291.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.4" y="302.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1181.4" y="275.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.4" y="286.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1181.4" y="259.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.4" y="270.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1181.4" y="243.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.4" y="254.0"></text>
</g>
<g>
<title>Dependencies::check_evol_method(Method*) (1 samples, 0.09%)</title><rect x="1181.4" y="227.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.4" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1182.5" y="307.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.5" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1182.5" y="291.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.5" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1182.5" y="275.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1182.5" y="259.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.5" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1182.5" y="243.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.5" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1182.5" y="227.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.5" y="238.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1182.5" y="211.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.5" y="222.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1182.5" y="195.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.5" y="206.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1182.5" y="179.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.5" y="190.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.09%)</title><rect x="1182.5" y="163.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.5" y="174.0"></text>
</g>
<g>
<title>ciMethod::should_not_inline() (1 samples, 0.09%)</title><rect x="1182.5" y="147.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.5" y="158.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.6" y="211.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.6" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1183.6" y="195.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.6" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1183.6" y="179.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.6" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1183.6" y="163.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.6" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1183.6" y="147.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.6" y="158.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1183.6" y="131.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.6" y="142.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1183.6" y="115.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.6" y="126.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.09%)</title><rect x="1183.6" y="99.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.6" y="110.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.09%)</title><rect x="1183.6" y="83.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.6" y="94.0"></text>
</g>
<g>
<title>GraphKit::g1_mark_card(IdealKit&amp;, Node*, Node*, unsigned int, Node*, Node*, Node*, TypeFunc const*) (1 samples, 0.09%)</title><rect x="1183.6" y="67.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.6" y="78.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1183.6" y="51.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.6" y="62.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1183.6" y="35.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.6" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.6" y="307.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.6" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.6" y="291.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.6" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1184.6" y="275.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1184.6" y="259.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1184.6" y="243.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.6" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1184.6" y="227.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.6" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1184.6" y="211.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.6" y="222.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_declared_method_holder() (1 samples, 0.09%)</title><rect x="1184.6" y="195.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.6" y="206.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1185.7" y="531.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.7" y="542.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.09%)</title><rect x="1185.7" y="515.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.7" y="526.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.09%)</title><rect x="1185.7" y="499.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.7" y="510.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.09%)</title><rect x="1185.7" y="483.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.7" y="494.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.09%)</title><rect x="1185.7" y="467.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.7" y="478.0"></text>
</g>
<g>
<title>GlobalValueNumbering::GlobalValueNumbering(IR*) (1 samples, 0.09%)</title><rect x="1185.7" y="451.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.7" y="462.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(BlockClosure*) (1 samples, 0.09%)</title><rect x="1185.7" y="435.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.7" y="446.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(boolArray&amp;, BlockClosure*) (1 samples, 0.09%)</title><rect x="1185.7" y="419.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.7" y="430.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(boolArray&amp;, BlockClosure*) (1 samples, 0.09%)</title><rect x="1185.7" y="403.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.7" y="414.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(boolArray&amp;, BlockClosure*) (1 samples, 0.09%)</title><rect x="1185.7" y="387.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.7" y="398.0"></text>
</g>
<g>
<title>SubstitutionResolver::block_do(BlockBegin*) (1 samples, 0.09%)</title><rect x="1185.7" y="371.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.7" y="382.0"></text>
</g>
<g>
<title>ValueStack::values_do(ValueVisitor*) (1 samples, 0.09%)</title><rect x="1185.7" y="355.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.7" y="366.0"></text>
</g>
<g>
<title>ciEnv::get_method_from_handle(Method*) (1 samples, 0.09%)</title><rect x="1186.8" y="531.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.8" y="542.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1186.8" y="515.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.8" y="526.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1186.8" y="499.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.8" y="510.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1186.8" y="483.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.8" y="494.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.18%)</title><rect x="1187.9" y="595.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.9" y="606.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.18%)</title><rect x="1187.9" y="579.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.9" y="590.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.09%)</title><rect x="1187.9" y="563.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.9" y="574.0"></text>
</g>
<g>
<title>TemplateInterpreter::notice_safepoints() (1 samples, 0.09%)</title><rect x="1187.9" y="547.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.9" y="558.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.09%)</title><rect x="1188.9" y="563.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.9" y="574.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.09%)</title><rect x="1188.9" y="547.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.9" y="558.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.09%)</title><rect x="1188.9" y="531.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.9" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.09%)</title><rect x="1188.9" y="515.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.9" y="526.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.09%)</title><rect x="1188.9" y="499.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.9" y="510.0"></text>
</g>
<g>
<title>G1CollectedHeap::process_discovered_references(unsigned int) (1 samples, 0.09%)</title><rect x="1188.9" y="483.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.9" y="494.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_discovered_references(BoolObjectClosure*, OopClosure*, VoidClosure*, AbstractRefProcTaskExecutor*, GCTimer*, GCId) (1 samples, 0.09%)</title><rect x="1188.9" y="467.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.9" y="478.0"></text>
</g>
<g>
<title>JNIHandles::weak_oops_do(BoolObjectClosure*, OopClosure*) (1 samples, 0.09%)</title><rect x="1188.9" y="451.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.9" y="462.0"></text>
</g>
</g>
</svg>
