<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (1,491 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2035.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2019.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2003.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1987.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1971.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1955.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1939.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1923.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1907.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1891.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1875.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1859.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1843.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1827.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1811.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1795.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1779.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1763.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1747.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1731.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1715.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1699.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1683.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1667.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1651.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1635.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1619.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1603.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1587.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1571.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1555.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1539.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1523.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1507.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1491.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1475.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1459.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1443.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1427.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1411.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1395.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1379.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1363.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1347.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1331.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1315.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1299.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1283.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1267.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1251.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1235.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1219.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1203.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1187.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1171.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1155.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1139.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1123.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1107.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1091.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1075.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1059.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1043.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1027.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1011.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="995.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="979.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="963.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="947.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="931.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="915.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="899.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="883.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="867.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="851.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="835.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="819.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="803.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="787.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="771.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="755.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="739.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="723.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="707.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="691.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="675.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="659.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="643.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="627.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="611.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="595.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="579.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="563.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="547.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="531.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="515.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="499.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="483.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="467.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="451.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="435.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="419.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="403.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="387.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="371.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="355.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="339.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="323.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="307.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="291.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="275.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="259.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="243.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="227.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="211.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="195.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="179.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="163.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="147.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="131.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="115.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="99.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="83.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="67.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="51.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="35.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.07%)</title><rect x="10.8" y="2035.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.8" y="2046.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (251 samples, 16.83%)</title><rect x="11.6" y="2035.0" width="198.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="14.6" y="2046.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (251 samples, 16.83%)</title><rect x="11.6" y="2019.0" width="198.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="14.6" y="2030.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (6 samples, 0.40%)</title><rect x="11.6" y="2003.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.6" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (6 samples, 0.40%)</title><rect x="11.6" y="1987.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="14.6" y="1998.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (5 samples, 0.34%)</title><rect x="12.4" y="1971.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="15.4" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (5 samples, 0.34%)</title><rect x="12.4" y="1955.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="15.4" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (4 samples, 0.27%)</title><rect x="13.2" y="1939.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.2" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (4 samples, 0.27%)</title><rect x="13.2" y="1923.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.2" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (4 samples, 0.27%)</title><rect x="13.2" y="1907.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="16.2" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (2 samples, 0.13%)</title><rect x="13.2" y="1891.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.2" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.13%)</title><rect x="13.2" y="1875.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.2" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.13%)</title><rect x="13.2" y="1859.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="16.2" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$267/1584107859.test (1 samples, 0.07%)</title><rect x="14.0" y="1843.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="17.0" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (2 samples, 0.13%)</title><rect x="14.7" y="1891.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.7" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.07%)</title><rect x="14.7" y="1875.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="17.7" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.07%)</title><rect x="14.7" y="1859.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.7" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.07%)</title><rect x="14.7" y="1843.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="17.7" y="1854.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="14.7" y="1827.0" width="0.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="17.7" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.07%)</title><rect x="15.5" y="1875.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.5" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.07%)</title><rect x="15.5" y="1859.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="18.5" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (6 samples, 0.40%)</title><rect x="16.3" y="2003.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.3" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (6 samples, 0.40%)</title><rect x="16.3" y="1987.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="19.3" y="1998.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (6 samples, 0.40%)</title><rect x="16.3" y="1971.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.3" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$266/652410444.accept (6 samples, 0.40%)</title><rect x="16.3" y="1955.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="19.3" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (6 samples, 0.40%)</title><rect x="16.3" y="1939.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="19.3" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.pendingOffsetsCount (1 samples, 0.07%)</title><rect x="16.3" y="1923.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.3" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (5 samples, 0.34%)</title><rect x="17.1" y="1923.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.1" y="1934.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (5 samples, 0.34%)</title><rect x="17.1" y="1907.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="20.1" y="1918.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (174 samples, 11.67%)</title><rect x="21.1" y="2003.0" width="137.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="24.1" y="2014.0">java/lang/Iterabl..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$265/1678818415.accept (167 samples, 11.20%)</title><rect x="21.1" y="1987.0" width="132.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="24.1" y="1998.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (167 samples, 11.20%)</title><rect x="21.1" y="1971.0" width="132.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="24.1" y="1982.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (154 samples, 10.33%)</title><rect x="25.0" y="1955.0" width="121.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="28.0" y="1966.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (154 samples, 10.33%)</title><rect x="25.0" y="1939.0" width="121.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="28.0" y="1950.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (154 samples, 10.33%)</title><rect x="25.0" y="1923.0" width="121.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="28.0" y="1934.0">com/linecorp/de..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (123 samples, 8.25%)</title><rect x="49.6" y="1907.0" width="97.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="52.6" y="1918.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (123 samples, 8.25%)</title><rect x="49.6" y="1891.0" width="97.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="52.6" y="1902.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (123 samples, 8.25%)</title><rect x="49.6" y="1875.0" width="97.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="52.6" y="1886.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (93 samples, 6.24%)</title><rect x="69.4" y="1859.0" width="73.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="72.4" y="1870.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (17 samples, 1.14%)</title><rect x="70.9" y="1843.0" width="13.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="73.9" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (17 samples, 1.14%)</title><rect x="70.9" y="1827.0" width="13.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="73.9" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (17 samples, 1.14%)</title><rect x="70.9" y="1811.0" width="13.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="73.9" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (74 samples, 4.96%)</title><rect x="84.4" y="1843.0" width="58.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="87.4" y="1854.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (74 samples, 4.96%)</title><rect x="84.4" y="1827.0" width="58.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="87.4" y="1838.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (74 samples, 4.96%)</title><rect x="84.4" y="1811.0" width="58.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="87.4" y="1822.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (74 samples, 4.96%)</title><rect x="84.4" y="1795.0" width="58.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="87.4" y="1806.0">java/u..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (72 samples, 4.83%)</title><rect x="86.0" y="1779.0" width="57.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="89.0" y="1790.0">sun/mi..</text>
</g>
<g>
<title>Unsafe_Unpark (63 samples, 4.23%)</title><rect x="86.8" y="1763.0" width="49.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="89.8" y="1774.0">Unsaf..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.13%)</title><rect x="87.6" y="1747.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="90.6" y="1758.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.07%)</title><rect x="89.1" y="1747.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="92.1" y="1758.0"></text>
</g>
<g>
<title>__pthread_cond_signal (40 samples, 2.68%)</title><rect x="89.9" y="1747.0" width="31.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="92.9" y="1758.0">__..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.13%)</title><rect x="121.6" y="1747.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="124.6" y="1758.0"></text>
</g>
<g>
<title>pthread_mutex_lock (17 samples, 1.14%)</title><rect x="123.2" y="1747.0" width="13.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="126.2" y="1758.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.13%)</title><rect x="136.6" y="1763.0" width="1.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="139.6" y="1774.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.34%)</title><rect x="138.2" y="1763.0" width="4.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="141.2" y="1774.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.07%)</title><rect x="142.2" y="1763.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="145.2" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.07%)</title><rect x="143.0" y="1859.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="146.0" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.07%)</title><rect x="143.0" y="1843.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="146.0" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.07%)</title><rect x="143.0" y="1827.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="146.0" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.13%)</title><rect x="143.7" y="1859.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="146.7" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (2 samples, 0.13%)</title><rect x="143.7" y="1843.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="146.7" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.13%)</title><rect x="143.7" y="1827.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="146.7" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.13%)</title><rect x="145.3" y="1859.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="148.3" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.13%)</title><rect x="145.3" y="1843.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="148.3" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.13%)</title><rect x="145.3" y="1827.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="148.3" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.13%)</title><rect x="145.3" y="1811.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="148.3" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (2 samples, 0.13%)</title><rect x="146.9" y="1955.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="149.9" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 0.13%)</title><rect x="146.9" y="1939.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="149.9" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (5 samples, 0.34%)</title><rect x="148.5" y="1955.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="151.5" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.34%)</title><rect x="148.5" y="1939.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="151.5" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.34%)</title><rect x="148.5" y="1923.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="151.5" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (1 samples, 0.07%)</title><rect x="152.5" y="1955.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="155.5" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.07%)</title><rect x="153.2" y="1987.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="156.2" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.07%)</title><rect x="153.2" y="1971.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="156.2" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.07%)</title><rect x="153.2" y="1955.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="156.2" y="1966.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="153.2" y="1939.0" width="0.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="156.2" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (5 samples, 0.34%)</title><rect x="154.0" y="1987.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="157.0" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (5 samples, 0.34%)</title><rect x="154.0" y="1971.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="157.0" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.34%)</title><rect x="154.0" y="1955.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="157.0" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.34%)</title><rect x="154.0" y="1939.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="157.0" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.07%)</title><rect x="158.0" y="1987.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="161.0" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.07%)</title><rect x="158.0" y="1971.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="161.0" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.07%)</title><rect x="158.0" y="1955.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="161.0" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.07%)</title><rect x="158.0" y="1939.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="161.0" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.07%)</title><rect x="158.0" y="1923.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="161.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (64 samples, 4.29%)</title><rect x="158.8" y="2003.0" width="50.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="161.8" y="2014.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (64 samples, 4.29%)</title><rect x="158.8" y="1987.0" width="50.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="161.8" y="1998.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (40 samples, 2.68%)</title><rect x="159.6" y="1971.0" width="31.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="162.6" y="1982.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.07%)</title><rect x="160.4" y="1955.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="163.4" y="1966.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.07%)</title><rect x="160.4" y="1939.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="163.4" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (38 samples, 2.55%)</title><rect x="161.2" y="1955.0" width="30.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="164.2" y="1966.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (38 samples, 2.55%)</title><rect x="161.2" y="1939.0" width="30.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="164.2" y="1950.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (35 samples, 2.35%)</title><rect x="161.2" y="1923.0" width="27.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="164.2" y="1934.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (35 samples, 2.35%)</title><rect x="161.2" y="1907.0" width="27.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="164.2" y="1918.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (22 samples, 1.48%)</title><rect x="161.2" y="1891.0" width="17.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="164.2" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeCloseRecordStream (8 samples, 0.54%)</title><rect x="161.2" y="1875.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="164.2" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (13 samples, 0.87%)</title><rect x="167.5" y="1875.0" width="10.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="170.5" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (13 samples, 0.87%)</title><rect x="167.5" y="1859.0" width="10.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="170.5" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (13 samples, 0.87%)</title><rect x="167.5" y="1843.0" width="10.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="170.5" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (13 samples, 0.87%)</title><rect x="167.5" y="1827.0" width="10.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="170.5" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (13 samples, 0.87%)</title><rect x="167.5" y="1811.0" width="10.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="170.5" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (13 samples, 0.87%)</title><rect x="167.5" y="1795.0" width="10.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="170.5" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (13 samples, 0.87%)</title><rect x="167.5" y="1779.0" width="10.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="170.5" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.07%)</title><rect x="177.8" y="1875.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="180.8" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.07%)</title><rect x="177.8" y="1859.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="180.8" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (1 samples, 0.07%)</title><rect x="177.8" y="1843.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="180.8" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.07%)</title><rect x="177.8" y="1827.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="180.8" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.07%)</title><rect x="177.8" y="1811.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="180.8" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/ByteUtils.readVarlong (1 samples, 0.07%)</title><rect x="177.8" y="1795.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="180.8" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="177.8" y="1779.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="180.8" y="1790.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="177.8" y="1763.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="180.8" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="177.8" y="1747.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="180.8" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="177.8" y="1731.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="180.8" y="1742.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="177.8" y="1715.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="180.8" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (12 samples, 0.80%)</title><rect x="178.6" y="1891.0" width="9.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="181.6" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.13%)</title><rect x="178.6" y="1875.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="181.6" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (10 samples, 0.67%)</title><rect x="180.2" y="1875.0" width="7.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="183.2" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (10 samples, 0.67%)</title><rect x="180.2" y="1859.0" width="7.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="183.2" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (10 samples, 0.67%)</title><rect x="180.2" y="1843.0" width="7.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="183.2" y="1854.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (5 samples, 0.34%)</title><rect x="184.1" y="1827.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="187.1" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (5 samples, 0.34%)</title><rect x="184.1" y="1811.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="187.1" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (5 samples, 0.34%)</title><rect x="184.1" y="1795.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="187.1" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (5 samples, 0.34%)</title><rect x="184.1" y="1779.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="187.1" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.07%)</title><rect x="188.1" y="1891.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="191.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (3 samples, 0.20%)</title><rect x="188.9" y="1923.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="191.9" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (3 samples, 0.20%)</title><rect x="188.9" y="1907.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="191.9" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.07%)</title><rect x="188.9" y="1891.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="191.9" y="1902.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.07%)</title><rect x="188.9" y="1875.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="191.9" y="1886.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.07%)</title><rect x="188.9" y="1859.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="191.9" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.13%)</title><rect x="189.7" y="1891.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="192.7" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.13%)</title><rect x="189.7" y="1875.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="192.7" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.13%)</title><rect x="189.7" y="1859.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="192.7" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.07%)</title><rect x="189.7" y="1843.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="192.7" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.07%)</title><rect x="190.4" y="1843.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="193.4" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (7 samples, 0.47%)</title><rect x="191.2" y="1971.0" width="5.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="194.2" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (7 samples, 0.47%)</title><rect x="191.2" y="1955.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="194.2" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (4 samples, 0.27%)</title><rect x="191.2" y="1939.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="194.2" y="1950.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.13%)</title><rect x="192.0" y="1923.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="195.0" y="1934.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.07%)</title><rect x="192.0" y="1907.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="195.0" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$233/699728070.accept (1 samples, 0.07%)</title><rect x="192.8" y="1907.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="195.8" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.07%)</title><rect x="192.8" y="1891.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="195.8" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.07%)</title><rect x="192.8" y="1875.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="195.8" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.07%)</title><rect x="192.8" y="1859.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="195.8" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.07%)</title><rect x="192.8" y="1843.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="195.8" y="1854.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.07%)</title><rect x="192.8" y="1827.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="195.8" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="192.8" y="1811.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="195.8" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="193.6" y="1923.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="196.6" y="1934.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.07%)</title><rect x="193.6" y="1907.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="196.6" y="1918.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.07%)</title><rect x="193.6" y="1891.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="196.6" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.07%)</title><rect x="193.6" y="1875.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="196.6" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="193.6" y="1859.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="196.6" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="193.6" y="1843.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="196.6" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (3 samples, 0.20%)</title><rect x="194.4" y="1939.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="197.4" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (3 samples, 0.20%)</title><rect x="194.4" y="1923.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="197.4" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.20%)</title><rect x="194.4" y="1907.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="197.4" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.13%)</title><rect x="194.4" y="1891.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="197.4" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.13%)</title><rect x="194.4" y="1875.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="197.4" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.13%)</title><rect x="194.4" y="1859.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="197.4" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.13%)</title><rect x="194.4" y="1843.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="197.4" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (2 samples, 0.13%)</title><rect x="194.4" y="1827.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="197.4" y="1838.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.07%)</title><rect x="194.4" y="1811.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="197.4" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.07%)</title><rect x="195.2" y="1811.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="198.2" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.07%)</title><rect x="195.2" y="1795.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="198.2" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.getOpFlags (1 samples, 0.07%)</title><rect x="196.0" y="1891.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="199.0" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.07%)</title><rect x="196.8" y="1971.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="199.8" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.hasInFlightRequests (1 samples, 0.07%)</title><rect x="196.8" y="1955.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="199.8" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.isEmpty (1 samples, 0.07%)</title><rect x="196.8" y="1939.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="199.8" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.maybeTriggerWakeup (1 samples, 0.07%)</title><rect x="197.6" y="1971.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="200.6" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (7 samples, 0.47%)</title><rect x="198.4" y="1971.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="201.4" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (7 samples, 0.47%)</title><rect x="198.4" y="1955.0" width="5.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="201.4" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (7 samples, 0.47%)</title><rect x="198.4" y="1939.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="201.4" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.clear (1 samples, 0.07%)</title><rect x="198.4" y="1923.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="201.4" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySet.iterator (1 samples, 0.07%)</title><rect x="198.4" y="1907.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="201.4" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap$EntryIterator.&lt;init&gt; (1 samples, 0.07%)</title><rect x="198.4" y="1891.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="201.4" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.07%)</title><rect x="198.4" y="1875.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="201.4" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (3 samples, 0.20%)</title><rect x="199.1" y="1923.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="202.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.07%)</title><rect x="199.1" y="1907.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="202.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.07%)</title><rect x="199.1" y="1891.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="202.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.07%)</title><rect x="199.1" y="1875.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="202.1" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.07%)</title><rect x="199.1" y="1859.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="202.1" y="1870.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.07%)</title><rect x="199.1" y="1843.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="202.1" y="1854.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.07%)</title><rect x="199.1" y="1827.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="202.1" y="1838.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.07%)</title><rect x="199.1" y="1811.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="202.1" y="1822.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerLastTemporaryDirectBuffer (1 samples, 0.07%)</title><rect x="199.1" y="1795.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="202.1" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.07%)</title><rect x="199.1" y="1779.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="202.1" y="1790.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.07%)</title><rect x="199.1" y="1763.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="202.1" y="1774.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.07%)</title><rect x="199.1" y="1747.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="202.1" y="1758.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.07%)</title><rect x="199.1" y="1731.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="202.1" y="1742.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.07%)</title><rect x="199.1" y="1715.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="202.1" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.13%)</title><rect x="199.9" y="1907.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="202.9" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.13%)</title><rect x="199.9" y="1891.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="202.9" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 0.13%)</title><rect x="199.9" y="1875.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="202.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 0.13%)</title><rect x="199.9" y="1859.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="202.9" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (2 samples, 0.13%)</title><rect x="199.9" y="1843.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="202.9" y="1854.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.13%)</title><rect x="199.9" y="1827.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="202.9" y="1838.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.13%)</title><rect x="199.9" y="1811.0" width="1.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="202.9" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (3 samples, 0.20%)</title><rect x="201.5" y="1923.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="204.5" y="1934.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (3 samples, 0.20%)</title><rect x="201.5" y="1907.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="204.5" y="1918.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (3 samples, 0.20%)</title><rect x="201.5" y="1891.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="204.5" y="1902.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (3 samples, 0.20%)</title><rect x="201.5" y="1875.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="204.5" y="1886.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (2 samples, 0.13%)</title><rect x="201.5" y="1859.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="204.5" y="1870.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.07%)</title><rect x="201.5" y="1843.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="204.5" y="1854.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.updateRegistrations (1 samples, 0.07%)</title><rect x="202.3" y="1843.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="205.3" y="1854.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.updateSelectedKeys (1 samples, 0.07%)</title><rect x="203.1" y="1859.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="206.1" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="203.1" y="1843.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="206.1" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="203.1" y="1827.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="206.1" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (5 samples, 0.34%)</title><rect x="203.9" y="1971.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="206.9" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (4 samples, 0.27%)</title><rect x="204.7" y="1955.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="207.7" y="1966.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.13%)</title><rect x="204.7" y="1939.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="207.7" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$257/1815359525.accept (2 samples, 0.13%)</title><rect x="204.7" y="1923.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="207.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (2 samples, 0.13%)</title><rect x="204.7" y="1907.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="207.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (2 samples, 0.13%)</title><rect x="204.7" y="1891.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="207.7" y="1902.0"></text>
</g>
<g>
<title>java/util/Optional.map (1 samples, 0.07%)</title><rect x="204.7" y="1875.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="207.7" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$$Lambda$235/455137514.apply (1 samples, 0.07%)</title><rect x="204.7" y="1859.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="207.7" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lambda$leaderAndEpoch$6 (1 samples, 0.07%)</title><rect x="204.7" y="1843.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="207.7" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.07%)</title><rect x="205.5" y="1875.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="208.5" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="205.5" y="1859.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="208.5" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="205.5" y="1843.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="208.5" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.07%)</title><rect x="206.3" y="1939.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="209.3" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.07%)</title><rect x="207.1" y="1939.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="210.1" y="1950.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.07%)</title><rect x="207.1" y="1923.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="210.1" y="1934.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.07%)</title><rect x="207.1" y="1907.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="210.1" y="1918.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.07%)</title><rect x="207.1" y="1891.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="210.1" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.07%)</title><rect x="207.1" y="1875.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="210.1" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.07%)</title><rect x="207.1" y="1859.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="210.1" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.07%)</title><rect x="207.9" y="1971.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="210.9" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="207.9" y="1955.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="210.9" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="207.9" y="1939.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="210.9" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.07%)</title><rect x="208.6" y="1971.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="211.6" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="208.6" y="1955.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="211.6" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="208.6" y="1939.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="211.6" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="208.6" y="1923.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="211.6" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.07%)</title><rect x="208.6" y="1907.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="211.6" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.07%)</title><rect x="208.6" y="1891.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="211.6" y="1902.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.07%)</title><rect x="209.4" y="2003.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="212.4" y="2014.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="209.4" y="1987.0" width="0.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="212.4" y="1998.0"></text>
</g>
<g>
<title>java/lang/Thread.run (778 samples, 52.18%)</title><rect x="210.2" y="2035.0" width="615.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="213.2" y="2046.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (778 samples, 52.18%)</title><rect x="210.2" y="2019.0" width="615.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="213.2" y="2030.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (778 samples, 52.18%)</title><rect x="210.2" y="2003.0" width="615.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="213.2" y="2014.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$285/83578526.run (528 samples, 35.41%)</title><rect x="214.2" y="1987.0" width="417.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="217.2" y="1998.0">com/linecorp/decaton/processor/runtime/internal/Processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$69 (528 samples, 35.41%)</title><rect x="214.2" y="1971.0" width="417.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="217.2" y="1982.0">com/linecorp/decaton/processor/runtime/internal/Processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (528 samples, 35.41%)</title><rect x="214.2" y="1955.0" width="417.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="217.2" y="1966.0">com/linecorp/decaton/processor/runtime/internal/Processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (522 samples, 35.01%)</title><rect x="214.2" y="1939.0" width="413.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="217.2" y="1950.0">com/linecorp/decaton/processor/runtime/internal/ProcessPi..</text>
</g>
<g>
<title>__clock_gettime (8 samples, 0.54%)</title><rect x="223.7" y="1923.0" width="6.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="226.7" y="1934.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.34%)</title><rect x="226.1" y="1907.0" width="3.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="229.1" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (155 samples, 10.40%)</title><rect x="230.0" y="1923.0" width="122.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="233.0" y="1934.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$43/1448247698.extract (155 samples, 10.40%)</title><rect x="230.0" y="1907.0" width="122.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="233.0" y="1918.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (155 samples, 10.40%)</title><rect x="230.0" y="1891.0" width="122.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="233.0" y="1902.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (155 samples, 10.40%)</title><rect x="230.0" y="1875.0" width="122.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="233.0" y="1886.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (155 samples, 10.40%)</title><rect x="230.0" y="1859.0" width="122.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="233.0" y="1870.0">com/linecorp/de..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (155 samples, 10.40%)</title><rect x="230.0" y="1843.0" width="122.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="233.0" y="1854.0">com/fasterxml/j..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (56 samples, 3.76%)</title><rect x="230.0" y="1827.0" width="44.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="233.0" y="1838.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (14 samples, 0.94%)</title><rect x="230.0" y="1811.0" width="11.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="233.0" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (14 samples, 0.94%)</title><rect x="230.0" y="1795.0" width="11.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="233.0" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (14 samples, 0.94%)</title><rect x="230.0" y="1779.0" width="11.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="233.0" y="1790.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (14 samples, 0.94%)</title><rect x="230.0" y="1763.0" width="11.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="233.0" y="1774.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.13%)</title><rect x="239.5" y="1747.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="242.5" y="1758.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.13%)</title><rect x="239.5" y="1731.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="242.5" y="1742.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.13%)</title><rect x="239.5" y="1715.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="242.5" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (42 samples, 2.82%)</title><rect x="241.1" y="1811.0" width="33.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="244.1" y="1822.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (42 samples, 2.82%)</title><rect x="241.1" y="1795.0" width="33.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="244.1" y="1806.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (18 samples, 1.21%)</title><rect x="241.1" y="1779.0" width="14.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="244.1" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (18 samples, 1.21%)</title><rect x="241.1" y="1763.0" width="14.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="244.1" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (3 samples, 0.20%)</title><rect x="253.0" y="1747.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="256.0" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (9 samples, 0.60%)</title><rect x="255.3" y="1779.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="258.3" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.13%)</title><rect x="255.3" y="1763.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="258.3" y="1774.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.13%)</title><rect x="255.3" y="1747.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="258.3" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.13%)</title><rect x="255.3" y="1731.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="258.3" y="1742.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="256.1" y="1715.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="259.1" y="1726.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="256.1" y="1699.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="259.1" y="1710.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="256.1" y="1683.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="259.1" y="1694.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.07%)</title><rect x="256.1" y="1667.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="259.1" y="1678.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.07%)</title><rect x="256.1" y="1651.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="259.1" y="1662.0"></text>
</g>
<g>
<title>MasterFreeRegionListMtSafeChecker::check() (1 samples, 0.07%)</title><rect x="256.1" y="1635.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="259.1" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (7 samples, 0.47%)</title><rect x="256.9" y="1763.0" width="5.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="259.9" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (1 samples, 0.07%)</title><rect x="258.5" y="1747.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="261.5" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (1 samples, 0.07%)</title><rect x="259.3" y="1747.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="262.3" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 0.13%)</title><rect x="260.1" y="1747.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="263.1" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.07%)</title><rect x="261.7" y="1747.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="264.7" y="1758.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="261.7" y="1731.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="264.7" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (15 samples, 1.01%)</title><rect x="262.5" y="1779.0" width="11.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="265.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (9 samples, 0.60%)</title><rect x="262.5" y="1763.0" width="7.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="265.5" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.getMask (2 samples, 0.13%)</title><rect x="268.0" y="1747.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="271.0" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (6 samples, 0.40%)</title><rect x="269.6" y="1763.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="272.6" y="1774.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.13%)</title><rect x="272.7" y="1747.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="275.7" y="1758.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (2 samples, 0.13%)</title><rect x="272.7" y="1731.0" width="1.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="275.7" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (92 samples, 6.17%)</title><rect x="274.3" y="1827.0" width="72.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="277.3" y="1838.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (6 samples, 0.40%)</title><rect x="274.3" y="1811.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="277.3" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (6 samples, 0.40%)</title><rect x="274.3" y="1795.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="277.3" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (6 samples, 0.40%)</title><rect x="274.3" y="1779.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="277.3" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (6 samples, 0.40%)</title><rect x="274.3" y="1763.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="277.3" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (2 samples, 0.13%)</title><rect x="276.7" y="1747.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="279.7" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (2 samples, 0.13%)</title><rect x="276.7" y="1731.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="279.7" y="1742.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.checkedByteOffset (2 samples, 0.13%)</title><rect x="276.7" y="1715.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="279.7" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.07%)</title><rect x="278.3" y="1747.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="281.3" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (3 samples, 0.20%)</title><rect x="279.1" y="1811.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="282.1" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.20%)</title><rect x="279.1" y="1795.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="282.1" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.13%)</title><rect x="279.9" y="1779.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="282.9" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (13 samples, 0.87%)</title><rect x="281.5" y="1811.0" width="10.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="284.5" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (10 samples, 0.67%)</title><rect x="281.5" y="1795.0" width="7.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="284.5" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (8 samples, 0.54%)</title><rect x="283.0" y="1779.0" width="6.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="286.0" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (7 samples, 0.47%)</title><rect x="283.8" y="1763.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="286.8" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (4 samples, 0.27%)</title><rect x="286.2" y="1747.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="289.2" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (3 samples, 0.20%)</title><rect x="289.4" y="1795.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="292.4" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (5 samples, 0.34%)</title><rect x="291.7" y="1811.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="294.7" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (5 samples, 0.34%)</title><rect x="291.7" y="1795.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="294.7" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (5 samples, 0.34%)</title><rect x="291.7" y="1779.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="294.7" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (5 samples, 0.34%)</title><rect x="291.7" y="1763.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="294.7" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (4 samples, 0.27%)</title><rect x="292.5" y="1747.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="295.5" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (65 samples, 4.36%)</title><rect x="295.7" y="1811.0" width="51.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="298.7" y="1822.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (65 samples, 4.36%)</title><rect x="295.7" y="1795.0" width="51.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="298.7" y="1806.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (17 samples, 1.14%)</title><rect x="295.7" y="1779.0" width="13.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="298.7" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.34%)</title><rect x="295.7" y="1763.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="298.7" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.34%)</title><rect x="295.7" y="1747.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="298.7" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.34%)</title><rect x="295.7" y="1731.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="298.7" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (11 samples, 0.74%)</title><rect x="299.7" y="1763.0" width="8.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="302.7" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.07%)</title><rect x="308.4" y="1763.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="311.4" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.07%)</title><rect x="308.4" y="1747.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="311.4" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (48 samples, 3.22%)</title><rect x="309.2" y="1779.0" width="37.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="312.2" y="1790.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (48 samples, 3.22%)</title><rect x="309.2" y="1763.0" width="37.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="312.2" y="1774.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.07%)</title><rect x="309.9" y="1747.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="312.9" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (44 samples, 2.95%)</title><rect x="310.7" y="1747.0" width="34.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="313.7" y="1758.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (13 samples, 0.87%)</title><rect x="311.5" y="1731.0" width="10.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="314.5" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.13%)</title><rect x="314.7" y="1715.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="317.7" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.13%)</title><rect x="314.7" y="1699.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="317.7" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.13%)</title><rect x="314.7" y="1683.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="317.7" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.13%)</title><rect x="314.7" y="1667.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="317.7" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.13%)</title><rect x="314.7" y="1651.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="317.7" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (4 samples, 0.27%)</title><rect x="316.3" y="1715.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="319.3" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.13%)</title><rect x="319.4" y="1715.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="322.4" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.13%)</title><rect x="319.4" y="1699.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="322.4" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.07%)</title><rect x="320.2" y="1683.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="323.2" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.07%)</title><rect x="321.0" y="1715.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="324.0" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (16 samples, 1.07%)</title><rect x="321.8" y="1731.0" width="12.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="324.8" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (11 samples, 0.74%)</title><rect x="325.8" y="1715.0" width="8.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="328.8" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (11 samples, 0.74%)</title><rect x="325.8" y="1699.0" width="8.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="328.8" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (11 samples, 0.74%)</title><rect x="325.8" y="1683.0" width="8.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="328.8" y="1694.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (11 samples, 0.74%)</title><rect x="325.8" y="1667.0" width="8.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="328.8" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.07%)</title><rect x="334.5" y="1731.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="337.5" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (7 samples, 0.47%)</title><rect x="335.3" y="1731.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="338.3" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (7 samples, 0.47%)</title><rect x="335.3" y="1715.0" width="5.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="338.3" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (7 samples, 0.47%)</title><rect x="335.3" y="1699.0" width="5.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="338.3" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (7 samples, 0.47%)</title><rect x="335.3" y="1683.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="338.3" y="1694.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (7 samples, 0.47%)</title><rect x="335.3" y="1667.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="338.3" y="1678.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (4 samples, 0.27%)</title><rect x="337.6" y="1651.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="340.6" y="1662.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (3 samples, 0.20%)</title><rect x="338.4" y="1635.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="341.4" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.13%)</title><rect x="340.8" y="1731.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="343.8" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.13%)</title><rect x="340.8" y="1715.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="343.8" y="1726.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.13%)</title><rect x="340.8" y="1699.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="343.8" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (4 samples, 0.27%)</title><rect x="342.4" y="1731.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="345.4" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.07%)</title><rect x="344.8" y="1715.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="347.8" y="1726.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="344.8" y="1699.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="347.8" y="1710.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="344.8" y="1683.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="347.8" y="1694.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="344.8" y="1667.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="347.8" y="1678.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="344.8" y="1651.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="347.8" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase._delegateDeserializer (2 samples, 0.13%)</title><rect x="345.6" y="1747.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="348.6" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (7 samples, 0.47%)</title><rect x="347.1" y="1827.0" width="5.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="350.1" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (7 samples, 0.47%)</title><rect x="347.1" y="1811.0" width="5.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="350.1" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (7 samples, 0.47%)</title><rect x="347.1" y="1795.0" width="5.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="350.1" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (7 samples, 0.47%)</title><rect x="347.1" y="1779.0" width="5.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="350.1" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (7 samples, 0.47%)</title><rect x="347.1" y="1763.0" width="5.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="350.1" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (1 samples, 0.07%)</title><rect x="351.9" y="1747.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="354.9" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (322 samples, 21.60%)</title><rect x="352.7" y="1923.0" width="254.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="355.7" y="1934.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (61 samples, 4.09%)</title><rect x="352.7" y="1907.0" width="48.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="355.7" y="1918.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (2 samples, 0.13%)</title><rect x="352.7" y="1891.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="355.7" y="1902.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (59 samples, 3.96%)</title><rect x="354.3" y="1891.0" width="46.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="357.3" y="1902.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (58 samples, 3.89%)</title><rect x="355.1" y="1875.0" width="45.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="358.1" y="1886.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 0.27%)</title><rect x="357.4" y="1859.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="360.4" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 0.27%)</title><rect x="357.4" y="1843.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="360.4" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (4 samples, 0.27%)</title><rect x="357.4" y="1827.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="360.4" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 0.27%)</title><rect x="357.4" y="1811.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="360.4" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.27%)</title><rect x="360.6" y="1859.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="363.6" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 0.27%)</title><rect x="360.6" y="1843.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="363.6" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.27%)</title><rect x="360.6" y="1827.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="363.6" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (4 samples, 0.27%)</title><rect x="360.6" y="1811.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="363.6" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 0.13%)</title><rect x="362.2" y="1795.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="365.2" y="1806.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (47 samples, 3.15%)</title><rect x="363.8" y="1859.0" width="37.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="366.8" y="1870.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (15 samples, 1.01%)</title><rect x="389.1" y="1843.0" width="11.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="392.1" y="1854.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.07%)</title><rect x="389.9" y="1827.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="392.9" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 0.34%)</title><rect x="390.7" y="1827.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="393.7" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (3 samples, 0.20%)</title><rect x="392.3" y="1811.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="395.3" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (6 samples, 0.40%)</title><rect x="394.6" y="1827.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="397.6" y="1838.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.13%)</title><rect x="399.4" y="1827.0" width="1.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="402.4" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (12 samples, 0.80%)</title><rect x="401.0" y="1907.0" width="9.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="404.0" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (9 samples, 0.60%)</title><rect x="403.3" y="1891.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="406.3" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (9 samples, 0.60%)</title><rect x="403.3" y="1875.0" width="7.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="406.3" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (166 samples, 11.13%)</title><rect x="410.5" y="1907.0" width="131.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="413.5" y="1918.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (155 samples, 10.40%)</title><rect x="410.5" y="1891.0" width="122.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="413.5" y="1902.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (65 samples, 4.36%)</title><rect x="420.7" y="1875.0" width="51.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="423.7" y="1886.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (54 samples, 3.62%)</title><rect x="426.3" y="1859.0" width="42.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="429.3" y="1870.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (36 samples, 2.41%)</title><rect x="433.4" y="1843.0" width="28.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="436.4" y="1854.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (12 samples, 0.80%)</title><rect x="444.5" y="1827.0" width="9.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="447.5" y="1838.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (12 samples, 0.80%)</title><rect x="444.5" y="1811.0" width="9.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="447.5" y="1822.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (12 samples, 0.80%)</title><rect x="444.5" y="1795.0" width="9.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="447.5" y="1806.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.07%)</title><rect x="444.5" y="1779.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="447.5" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (11 samples, 0.74%)</title><rect x="445.3" y="1779.0" width="8.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="448.3" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.20%)</title><rect x="445.3" y="1763.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="448.3" y="1774.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.07%)</title><rect x="445.3" y="1747.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="448.3" y="1758.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.13%)</title><rect x="446.1" y="1747.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="449.1" y="1758.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.13%)</title><rect x="446.1" y="1731.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="449.1" y="1742.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.07%)</title><rect x="446.1" y="1715.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="449.1" y="1726.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="446.9" y="1715.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="449.9" y="1726.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (7 samples, 0.47%)</title><rect x="447.7" y="1763.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="450.7" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (5 samples, 0.34%)</title><rect x="448.4" y="1747.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="451.4" y="1758.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (2 samples, 0.13%)</title><rect x="450.8" y="1731.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="453.8" y="1742.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.07%)</title><rect x="452.4" y="1747.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="455.4" y="1758.0"></text>
</g>
<g>
<title>nmethod::get_deopt_original_pc(frame const*) (1 samples, 0.07%)</title><rect x="453.2" y="1763.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="456.2" y="1774.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.34%)</title><rect x="454.0" y="1827.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="457.0" y="1838.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.27%)</title><rect x="457.9" y="1827.0" width="3.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="460.9" y="1838.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="461.1" y="1827.0" width="0.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="464.1" y="1838.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (9 samples, 0.60%)</title><rect x="461.9" y="1843.0" width="7.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="464.9" y="1854.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.07%)</title><rect x="469.0" y="1859.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="472.0" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="469.0" y="1843.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="472.0" y="1854.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="469.0" y="1827.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="472.0" y="1838.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.20%)</title><rect x="469.8" y="1859.0" width="2.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="472.8" y="1870.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.07%)</title><rect x="472.2" y="1875.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="475.2" y="1886.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.07%)</title><rect x="472.2" y="1859.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="475.2" y="1870.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.07%)</title><rect x="472.2" y="1843.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="475.2" y="1854.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.07%)</title><rect x="472.2" y="1827.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="475.2" y="1838.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (5 samples, 0.34%)</title><rect x="473.0" y="1875.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="476.0" y="1886.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (2 samples, 0.13%)</title><rect x="473.0" y="1859.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="476.0" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="473.0" y="1843.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="476.0" y="1854.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="473.0" y="1827.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="476.0" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.07%)</title><rect x="473.0" y="1811.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="476.0" y="1822.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.07%)</title><rect x="473.8" y="1843.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="476.8" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.07%)</title><rect x="473.8" y="1827.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="476.8" y="1838.0"></text>
</g>
<g>
<title>java/lang/Long.toString (3 samples, 0.20%)</title><rect x="474.6" y="1859.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="477.6" y="1870.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.20%)</title><rect x="474.6" y="1843.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="477.6" y="1854.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (71 samples, 4.76%)</title><rect x="476.9" y="1875.0" width="56.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="479.9" y="1886.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (70 samples, 4.69%)</title><rect x="477.7" y="1859.0" width="55.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="480.7" y="1870.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.07%)</title><rect x="477.7" y="1843.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="480.7" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.07%)</title><rect x="477.7" y="1827.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="480.7" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.07%)</title><rect x="477.7" y="1811.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="480.7" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.07%)</title><rect x="477.7" y="1795.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="480.7" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.07%)</title><rect x="478.5" y="1843.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="481.5" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.07%)</title><rect x="478.5" y="1827.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="481.5" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.07%)</title><rect x="478.5" y="1811.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="481.5" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.07%)</title><rect x="478.5" y="1795.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="481.5" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.07%)</title><rect x="478.5" y="1779.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="481.5" y="1790.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (68 samples, 4.56%)</title><rect x="479.3" y="1843.0" width="53.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="482.3" y="1854.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.put (60 samples, 4.02%)</title><rect x="485.6" y="1827.0" width="47.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="488.6" y="1838.0">java..</text>
</g>
<g>
<title>java/util/HashMap.putVal (33 samples, 2.21%)</title><rect x="507.0" y="1811.0" width="26.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="510.0" y="1822.0">j..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.13%)</title><rect x="520.5" y="1795.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="523.5" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (9 samples, 0.60%)</title><rect x="522.0" y="1795.0" width="7.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="525.0" y="1806.0"></text>
</g>
<g>
<title>vtable stub (5 samples, 0.34%)</title><rect x="529.2" y="1795.0" width="3.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="532.2" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (11 samples, 0.74%)</title><rect x="533.1" y="1891.0" width="8.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="536.1" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (11 samples, 0.74%)</title><rect x="533.1" y="1875.0" width="8.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="536.1" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.get (10 samples, 0.67%)</title><rect x="533.1" y="1859.0" width="7.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="536.1" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (10 samples, 0.67%)</title><rect x="533.1" y="1843.0" width="7.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="536.1" y="1854.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.47%)</title><rect x="535.5" y="1827.0" width="5.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="538.5" y="1838.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.40%)</title><rect x="536.3" y="1811.0" width="4.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="539.3" y="1822.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.07%)</title><rect x="541.0" y="1859.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="544.0" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="541.0" y="1843.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="544.0" y="1854.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="541.0" y="1827.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="544.0" y="1838.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="541.0" y="1811.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="544.0" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="541.0" y="1795.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="544.0" y="1806.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="541.0" y="1779.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="544.0" y="1790.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="541.0" y="1763.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="544.0" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (61 samples, 4.09%)</title><rect x="541.8" y="1907.0" width="48.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="544.8" y="1918.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (61 samples, 4.09%)</title><rect x="541.8" y="1891.0" width="48.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="544.8" y="1902.0">com/..</text>
</g>
<g>
<title>InlineCacheBuffer (1 samples, 0.07%)</title><rect x="544.2" y="1875.0" width="0.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="547.2" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="545.0" y="1875.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="548.0" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$207/52758988.process (24 samples, 1.61%)</title><rect x="545.8" y="1875.0" width="19.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="548.8" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (24 samples, 1.61%)</title><rect x="545.8" y="1859.0" width="19.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="548.8" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (22 samples, 1.48%)</title><rect x="545.8" y="1843.0" width="17.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="548.8" y="1854.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.13%)</title><rect x="552.9" y="1827.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="555.9" y="1838.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.13%)</title><rect x="552.9" y="1811.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="555.9" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.07%)</title><rect x="553.7" y="1795.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="556.7" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.07%)</title><rect x="553.7" y="1779.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="556.7" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (8 samples, 0.54%)</title><rect x="554.5" y="1827.0" width="6.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="557.5" y="1838.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.40%)</title><rect x="556.1" y="1811.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="559.1" y="1822.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.40%)</title><rect x="556.1" y="1795.0" width="4.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="559.1" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.20%)</title><rect x="560.8" y="1827.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="563.8" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.13%)</title><rect x="563.2" y="1843.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="566.2" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.13%)</title><rect x="563.2" y="1827.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="566.2" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.13%)</title><rect x="563.2" y="1811.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="566.2" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.13%)</title><rect x="563.2" y="1795.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="566.2" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.13%)</title><rect x="563.2" y="1779.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="566.2" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (7 samples, 0.47%)</title><rect x="564.8" y="1875.0" width="5.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="567.8" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.47%)</title><rect x="570.3" y="1875.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="573.3" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (7 samples, 0.47%)</title><rect x="570.3" y="1859.0" width="5.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="573.3" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.13%)</title><rect x="574.3" y="1843.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="577.3" y="1854.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.07%)</title><rect x="575.1" y="1827.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="578.1" y="1838.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.20%)</title><rect x="575.9" y="1875.0" width="2.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="578.9" y="1886.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/2081191879.linkToTargetMethod (1 samples, 0.07%)</title><rect x="578.2" y="1875.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="581.2" y="1886.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/917819120.invokeStatic_LL_L (1 samples, 0.07%)</title><rect x="578.2" y="1859.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="581.2" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$289/506257072.get$Lambda (1 samples, 0.07%)</title><rect x="578.2" y="1843.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="581.2" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (8 samples, 0.54%)</title><rect x="579.0" y="1875.0" width="6.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="582.0" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.34%)</title><rect x="581.4" y="1859.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="584.4" y="1870.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="581.4" y="1843.0" width="0.8" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="584.4" y="1854.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (4 samples, 0.27%)</title><rect x="582.2" y="1843.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="585.2" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.07%)</title><rect x="585.4" y="1875.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="588.4" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (5 samples, 0.34%)</title><rect x="586.2" y="1875.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="589.2" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.13%)</title><rect x="588.5" y="1859.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="591.5" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (2 samples, 0.13%)</title><rect x="588.5" y="1843.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="591.5" y="1854.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.13%)</title><rect x="588.5" y="1827.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="591.5" y="1838.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.13%)</title><rect x="588.5" y="1811.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="591.5" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.13%)</title><rect x="588.5" y="1795.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="591.5" y="1806.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.13%)</title><rect x="588.5" y="1779.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="591.5" y="1790.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="588.5" y="1763.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="591.5" y="1774.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.07%)</title><rect x="589.3" y="1763.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="592.3" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.07%)</title><rect x="589.3" y="1747.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="592.3" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (22 samples, 1.48%)</title><rect x="590.1" y="1907.0" width="17.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="593.1" y="1918.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="595.6" y="1891.0" width="0.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="598.6" y="1902.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.13%)</title><rect x="596.4" y="1891.0" width="1.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="599.4" y="1902.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.13%)</title><rect x="596.4" y="1875.0" width="1.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="599.4" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (12 samples, 0.80%)</title><rect x="598.0" y="1891.0" width="9.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="601.0" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (12 samples, 0.80%)</title><rect x="598.0" y="1875.0" width="9.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="601.0" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$291/1597334110.accept (12 samples, 0.80%)</title><rect x="598.0" y="1859.0" width="9.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="601.0" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$64 (12 samples, 0.80%)</title><rect x="598.0" y="1843.0" width="9.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="601.0" y="1854.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (7 samples, 0.47%)</title><rect x="598.0" y="1827.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="601.0" y="1838.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="600.4" y="1811.0" width="0.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="603.4" y="1822.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.07%)</title><rect x="601.2" y="1811.0" width="0.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="604.2" y="1822.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="601.2" y="1795.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="604.2" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.13%)</title><rect x="602.0" y="1811.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="605.0" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.13%)</title><rect x="602.0" y="1795.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="605.0" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.13%)</title><rect x="602.0" y="1779.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="605.0" y="1790.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (5 samples, 0.34%)</title><rect x="603.6" y="1827.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="606.6" y="1838.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (5 samples, 0.34%)</title><rect x="603.6" y="1811.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="606.6" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (4 samples, 0.27%)</title><rect x="604.4" y="1795.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="607.4" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (14 samples, 0.94%)</title><rect x="607.5" y="1923.0" width="11.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="610.5" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (13 samples, 0.87%)</title><rect x="608.3" y="1907.0" width="10.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="611.3" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (12 samples, 0.80%)</title><rect x="609.1" y="1891.0" width="9.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="612.1" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$291/1597334110.accept (3 samples, 0.20%)</title><rect x="609.1" y="1875.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="612.1" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$64 (3 samples, 0.20%)</title><rect x="609.1" y="1859.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="612.1" y="1870.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.13%)</title><rect x="609.1" y="1843.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="612.1" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.07%)</title><rect x="610.7" y="1843.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="613.7" y="1854.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.07%)</title><rect x="610.7" y="1827.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="613.7" y="1838.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.07%)</title><rect x="610.7" y="1811.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="613.7" y="1822.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="610.7" y="1795.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="613.7" y="1806.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.07%)</title><rect x="610.7" y="1779.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="613.7" y="1790.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.07%)</title><rect x="610.7" y="1763.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="613.7" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$292/1805351582.accept (9 samples, 0.60%)</title><rect x="611.5" y="1875.0" width="7.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="614.5" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$63 (9 samples, 0.60%)</title><rect x="611.5" y="1859.0" width="7.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="614.5" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$283/1545319751.complete (9 samples, 0.60%)</title><rect x="611.5" y="1843.0" width="7.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="614.5" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$73 (9 samples, 0.60%)</title><rect x="611.5" y="1827.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="614.5" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$282/116961521.complete (9 samples, 0.60%)</title><rect x="611.5" y="1811.0" width="7.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="614.5" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$49 (9 samples, 0.60%)</title><rect x="611.5" y="1795.0" width="7.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="614.5" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (9 samples, 0.60%)</title><rect x="611.5" y="1779.0" width="7.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="614.5" y="1790.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (9 samples, 0.60%)</title><rect x="611.5" y="1763.0" width="7.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="614.5" y="1774.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.07%)</title><rect x="617.8" y="1747.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="620.8" y="1758.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.07%)</title><rect x="617.8" y="1731.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="620.8" y="1742.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.07%)</title><rect x="617.8" y="1715.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="620.8" y="1726.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (9 samples, 0.60%)</title><rect x="618.6" y="1923.0" width="7.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="621.6" y="1934.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.47%)</title><rect x="620.2" y="1907.0" width="5.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="623.2" y="1918.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.13%)</title><rect x="625.7" y="1923.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="628.7" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (6 samples, 0.40%)</title><rect x="627.3" y="1939.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="630.3" y="1950.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.27%)</title><rect x="628.1" y="1923.0" width="3.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="631.1" y="1934.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.27%)</title><rect x="628.1" y="1907.0" width="3.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="631.1" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.07%)</title><rect x="631.3" y="1923.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="634.3" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.07%)</title><rect x="632.1" y="1987.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="635.1" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.13%)</title><rect x="632.8" y="1987.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="635.8" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.13%)</title><rect x="632.8" y="1971.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="635.8" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.13%)</title><rect x="632.8" y="1955.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="635.8" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.13%)</title><rect x="632.8" y="1939.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="635.8" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (242 samples, 16.23%)</title><rect x="634.4" y="1987.0" width="191.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="637.4" y="1998.0">java/util/concurrent/Thre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (241 samples, 16.16%)</title><rect x="635.2" y="1971.0" width="190.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="638.2" y="1982.0">java/util/concurrent/Link..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (214 samples, 14.35%)</title><rect x="639.2" y="1955.0" width="169.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="642.2" y="1966.0">java/util/concurrent/l..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.13%)</title><rect x="653.4" y="1939.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="656.4" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.13%)</title><rect x="653.4" y="1923.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="656.4" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (13 samples, 0.87%)</title><rect x="655.0" y="1939.0" width="10.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="658.0" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (7 samples, 0.47%)</title><rect x="665.3" y="1939.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="668.3" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.47%)</title><rect x="665.3" y="1923.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="668.3" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.47%)</title><rect x="665.3" y="1907.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="668.3" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.47%)</title><rect x="665.3" y="1891.0" width="5.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="668.3" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (174 samples, 11.67%)</title><rect x="670.8" y="1939.0" width="137.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="673.8" y="1950.0">java/util/concurr..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (174 samples, 11.67%)</title><rect x="670.8" y="1923.0" width="137.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="673.8" y="1934.0">sun/misc/Unsafe.p..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (3 samples, 0.20%)</title><rect x="674.0" y="1907.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="677.0" y="1918.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.07%)</title><rect x="676.4" y="1907.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="679.4" y="1918.0"></text>
</g>
<g>
<title>Unsafe_Park (163 samples, 10.93%)</title><rect x="677.2" y="1907.0" width="129.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="680.2" y="1918.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.13%)</title><rect x="680.3" y="1891.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="683.3" y="1902.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.07%)</title><rect x="681.9" y="1891.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="684.9" y="1902.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (24 samples, 1.61%)</title><rect x="682.7" y="1891.0" width="19.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="685.7" y="1902.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (7 samples, 0.47%)</title><rect x="689.8" y="1875.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="692.8" y="1886.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.20%)</title><rect x="692.2" y="1859.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="695.2" y="1870.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.13%)</title><rect x="693.0" y="1843.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="696.0" y="1854.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.07%)</title><rect x="694.6" y="1859.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="697.6" y="1870.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (7 samples, 0.47%)</title><rect x="695.4" y="1875.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="698.4" y="1886.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.07%)</title><rect x="700.9" y="1875.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="703.9" y="1886.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.07%)</title><rect x="701.7" y="1891.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="704.7" y="1902.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.13%)</title><rect x="702.5" y="1891.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="705.5" y="1902.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.07%)</title><rect x="704.1" y="1891.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="707.1" y="1902.0"></text>
</g>
<g>
<title>__lll_lock_wait (8 samples, 0.54%)</title><rect x="704.9" y="1891.0" width="6.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="707.9" y="1902.0"></text>
</g>
<g>
<title>__lll_unlock_wake (35 samples, 2.35%)</title><rect x="711.2" y="1891.0" width="27.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="714.2" y="1902.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (58 samples, 3.89%)</title><rect x="738.9" y="1891.0" width="45.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="741.9" y="1902.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (7 samples, 0.47%)</title><rect x="784.8" y="1891.0" width="5.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="787.8" y="1902.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.07%)</title><rect x="790.3" y="1891.0" width="0.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="793.3" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 0.20%)</title><rect x="791.1" y="1891.0" width="2.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="794.1" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.27%)</title><rect x="793.5" y="1891.0" width="3.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="796.5" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.34%)</title><rect x="796.7" y="1891.0" width="3.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="799.7" y="1902.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.07%)</title><rect x="800.6" y="1891.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="803.6" y="1902.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.20%)</title><rect x="801.4" y="1891.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="804.4" y="1902.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (3 samples, 0.20%)</title><rect x="803.8" y="1891.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="806.8" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.07%)</title><rect x="806.2" y="1907.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="809.2" y="1918.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.13%)</title><rect x="807.0" y="1907.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="810.0" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (2 samples, 0.13%)</title><rect x="808.5" y="1955.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="811.5" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (2 samples, 0.13%)</title><rect x="808.5" y="1939.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="811.5" y="1950.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.13%)</title><rect x="808.5" y="1923.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="811.5" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.13%)</title><rect x="808.5" y="1907.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="811.5" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (20 samples, 1.34%)</title><rect x="810.1" y="1955.0" width="15.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="813.1" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (20 samples, 1.34%)</title><rect x="810.1" y="1939.0" width="15.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="813.1" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (20 samples, 1.34%)</title><rect x="810.1" y="1923.0" width="15.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="813.1" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (20 samples, 1.34%)</title><rect x="810.1" y="1907.0" width="15.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="813.1" y="1918.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.07%)</title><rect x="825.9" y="2035.0" width="0.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="828.9" y="2046.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.07%)</title><rect x="826.7" y="2035.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="829.7" y="2046.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.07%)</title><rect x="826.7" y="2019.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="829.7" y="2030.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="826.7" y="2003.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="829.7" y="2014.0"></text>
</g>
<g>
<title>start_thread (458 samples, 30.72%)</title><rect x="827.5" y="2035.0" width="362.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="830.5" y="2046.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (458 samples, 30.72%)</title><rect x="827.5" y="2019.0" width="362.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="830.5" y="2030.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (24 samples, 1.61%)</title><rect x="827.5" y="2003.0" width="19.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="830.5" y="2014.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (4 samples, 0.27%)</title><rect x="827.5" y="1987.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="830.5" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 0.27%)</title><rect x="827.5" y="1971.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="830.5" y="1982.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.13%)</title><rect x="827.5" y="1955.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="830.5" y="1966.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.13%)</title><rect x="829.1" y="1955.0" width="1.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="832.1" y="1966.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (19 samples, 1.27%)</title><rect x="830.7" y="1987.0" width="15.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="833.7" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 0.47%)</title><rect x="830.7" y="1971.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="833.7" y="1982.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.13%)</title><rect x="830.7" y="1955.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="833.7" y="1966.0"></text>
</g>
<g>
<title>SpinPause (5 samples, 0.34%)</title><rect x="832.3" y="1955.0" width="3.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="835.3" y="1966.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (7 samples, 0.47%)</title><rect x="836.2" y="1971.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="839.2" y="1982.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.13%)</title><rect x="836.2" y="1955.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="839.2" y="1966.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.07%)</title><rect x="836.2" y="1939.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="839.2" y="1950.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.07%)</title><rect x="836.2" y="1923.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="839.2" y="1934.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.07%)</title><rect x="836.2" y="1907.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="839.2" y="1918.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)2, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.07%)</title><rect x="836.2" y="1891.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="839.2" y="1902.0"></text>
</g>
<g>
<title>InstanceMirrorKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.07%)</title><rect x="836.2" y="1875.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="839.2" y="1886.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="837.0" y="1939.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="840.0" y="1950.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="837.0" y="1923.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="840.0" y="1934.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CLDClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.07%)</title><rect x="837.0" y="1907.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="840.0" y="1918.0"></text>
</g>
<g>
<title>OopMapSet::all_do(frame const*, RegisterMap const*, OopClosure*, void (*)(oopDesc**, oopDesc**), OopClosure*) (1 samples, 0.07%)</title><rect x="837.0" y="1891.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="840.0" y="1902.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.07%)</title><rect x="837.0" y="1875.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="840.0" y="1886.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (5 samples, 0.34%)</title><rect x="837.8" y="1955.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="840.8" y="1966.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (4 samples, 0.27%)</title><rect x="837.8" y="1939.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="840.8" y="1950.0"></text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.07%)</title><rect x="841.0" y="1939.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="844.0" y="1950.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.07%)</title><rect x="841.0" y="1923.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="844.0" y="1934.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (5 samples, 0.34%)</title><rect x="841.8" y="1971.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="844.8" y="1982.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (5 samples, 0.34%)</title><rect x="841.8" y="1955.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="844.8" y="1966.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (5 samples, 0.34%)</title><rect x="841.8" y="1939.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="844.8" y="1950.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (5 samples, 0.34%)</title><rect x="841.8" y="1923.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="844.8" y="1934.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (5 samples, 0.34%)</title><rect x="841.8" y="1907.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="844.8" y="1918.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (4 samples, 0.27%)</title><rect x="842.6" y="1891.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="845.6" y="1902.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (4 samples, 0.27%)</title><rect x="842.6" y="1875.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="845.6" y="1886.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.07%)</title><rect x="843.4" y="1859.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="846.4" y="1870.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.07%)</title><rect x="844.2" y="1859.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="847.2" y="1870.0"></text>
</g>
<g>
<title>InstanceRefKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.07%)</title><rect x="844.9" y="1859.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="847.9" y="1870.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.07%)</title><rect x="845.7" y="1987.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="848.7" y="1998.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.07%)</title><rect x="845.7" y="1971.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="848.7" y="1982.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.07%)</title><rect x="845.7" y="1955.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="848.7" y="1966.0"></text>
</g>
<g>
<title>JavaThread::run() (433 samples, 29.04%)</title><rect x="846.5" y="2003.0" width="342.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="849.5" y="2014.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (433 samples, 29.04%)</title><rect x="846.5" y="1987.0" width="342.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="849.5" y="1998.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (432 samples, 28.97%)</title><rect x="846.5" y="1971.0" width="341.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="849.5" y="1982.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (431 samples, 28.91%)</title><rect x="846.5" y="1955.0" width="341.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="849.5" y="1966.0">CompileBroker::invoke_compiler_on_method(Compi..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (431 samples, 28.91%)</title><rect x="846.5" y="1939.0" width="341.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="849.5" y="1950.0">C2Compiler::compile_method(ciEnv*, ciMethod*, ..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (431 samples, 28.91%)</title><rect x="846.5" y="1923.0" width="341.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="849.5" y="1934.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod..</text>
</g>
<g>
<title>Compile::Code_Gen() (166 samples, 11.13%)</title><rect x="846.5" y="1907.0" width="131.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="849.5" y="1918.0">Compile::Code_Ge..</text>
</g>
<g>
<title>Block::code_alignment() (1 samples, 0.07%)</title><rect x="846.5" y="1891.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="849.5" y="1902.0"></text>
</g>
<g>
<title>Compile::Output() (5 samples, 0.34%)</title><rect x="847.3" y="1891.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="850.3" y="1902.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (3 samples, 0.20%)</title><rect x="847.3" y="1875.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="850.3" y="1886.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.13%)</title><rect x="849.7" y="1875.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="852.7" y="1886.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.13%)</title><rect x="849.7" y="1859.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="852.7" y="1870.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (7 samples, 0.47%)</title><rect x="851.3" y="1891.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="854.3" y="1902.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (4 samples, 0.27%)</title><rect x="851.3" y="1875.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="854.3" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (3 samples, 0.20%)</title><rect x="851.3" y="1859.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="854.3" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.13%)</title><rect x="851.3" y="1843.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="854.3" y="1854.0"></text>
</g>
<g>
<title>LocationValue::write_on(DebugInfoWriteStream*) (1 samples, 0.07%)</title><rect x="852.9" y="1843.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="855.9" y="1854.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.07%)</title><rect x="853.6" y="1859.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="856.6" y="1870.0"></text>
</g>
<g>
<title>CompressedWriteStream::write_int_mb(int) (1 samples, 0.07%)</title><rect x="853.6" y="1843.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="856.6" y="1854.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (3 samples, 0.20%)</title><rect x="854.4" y="1875.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="857.4" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (3 samples, 0.20%)</title><rect x="854.4" y="1859.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="857.4" y="1870.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (2 samples, 0.13%)</title><rect x="856.8" y="1891.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="859.8" y="1902.0"></text>
</g>
<g>
<title>Matcher::match() (20 samples, 1.34%)</title><rect x="858.4" y="1891.0" width="15.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="861.4" y="1902.0"></text>
</g>
<g>
<title>LoadPNode::Opcode() const (1 samples, 0.07%)</title><rect x="858.4" y="1875.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="861.4" y="1886.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.13%)</title><rect x="859.2" y="1875.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="862.2" y="1886.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (17 samples, 1.14%)</title><rect x="860.8" y="1875.0" width="13.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="863.8" y="1886.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (11 samples, 0.74%)</title><rect x="860.8" y="1859.0" width="8.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="863.8" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (5 samples, 0.34%)</title><rect x="869.5" y="1859.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="872.5" y="1870.0"></text>
</g>
<g>
<title>MachNode::Expand(State*, Node_List&amp;, Node*) (1 samples, 0.07%)</title><rect x="870.3" y="1843.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="873.3" y="1854.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.13%)</title><rect x="871.1" y="1843.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="874.1" y="1854.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.07%)</title><rect x="871.1" y="1827.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="874.1" y="1838.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.07%)</title><rect x="871.9" y="1827.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="874.9" y="1838.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.07%)</title><rect x="872.6" y="1843.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="875.6" y="1854.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.07%)</title><rect x="872.6" y="1827.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="875.6" y="1838.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.07%)</title><rect x="872.6" y="1811.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="875.6" y="1822.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int, Compile*) (1 samples, 0.07%)</title><rect x="872.6" y="1795.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="875.6" y="1806.0"></text>
</g>
<g>
<title>MachNode::MachNode() (1 samples, 0.07%)</title><rect x="872.6" y="1779.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="875.6" y="1790.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.07%)</title><rect x="872.6" y="1763.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="875.6" y="1774.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.07%)</title><rect x="873.4" y="1859.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="876.4" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.07%)</title><rect x="874.2" y="1891.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="877.2" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.07%)</title><rect x="874.2" y="1875.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="877.2" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (6 samples, 0.40%)</title><rect x="875.0" y="1891.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="878.0" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (6 samples, 0.40%)</title><rect x="875.0" y="1875.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="878.0" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (2 samples, 0.13%)</title><rect x="875.0" y="1859.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="878.0" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (3 samples, 0.20%)</title><rect x="876.6" y="1859.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="879.6" y="1870.0"></text>
</g>
<g>
<title>MachProjNode::Opcode() const (1 samples, 0.07%)</title><rect x="876.6" y="1843.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="879.6" y="1854.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.07%)</title><rect x="877.4" y="1843.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="880.4" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.07%)</title><rect x="878.2" y="1843.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="881.2" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.07%)</title><rect x="879.0" y="1859.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="882.0" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 0.07%)</title><rect x="879.0" y="1843.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="882.0" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (123 samples, 8.25%)</title><rect x="879.8" y="1891.0" width="97.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="882.8" y="1902.0">PhaseChaiti..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="879.8" y="1875.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="882.8" y="1886.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.07%)</title><rect x="880.6" y="1875.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="883.6" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.13%)</title><rect x="881.3" y="1875.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="884.3" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::new_lrg(Node const*, unsigned int) (1 samples, 0.07%)</title><rect x="882.1" y="1859.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="885.1" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (9 samples, 0.60%)</title><rect x="882.9" y="1875.0" width="7.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="885.9" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="883.7" y="1859.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="886.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (7 samples, 0.47%)</title><rect x="884.5" y="1859.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="887.5" y="1870.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.07%)</title><rect x="886.9" y="1843.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="889.9" y="1854.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.20%)</title><rect x="887.7" y="1843.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="890.7" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (9 samples, 0.60%)</title><rect x="890.1" y="1875.0" width="7.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="893.1" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="890.8" y="1859.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="893.8" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (7 samples, 0.47%)</title><rect x="891.6" y="1859.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="894.6" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.20%)</title><rect x="894.8" y="1843.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="897.8" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (19 samples, 1.27%)</title><rect x="897.2" y="1875.0" width="15.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="900.2" y="1886.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.07%)</title><rect x="907.5" y="1859.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="910.5" y="1870.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.07%)</title><rect x="908.3" y="1859.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="911.3" y="1870.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.07%)</title><rect x="909.0" y="1859.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="912.0" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::split_DEF(Node*, Block*, int, unsigned int, Node**, Node**, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.07%)</title><rect x="909.8" y="1859.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="912.8" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.07%)</title><rect x="909.8" y="1843.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="912.8" y="1854.0"></text>
</g>
<g>
<title>TypeNode::ideal_reg() const (1 samples, 0.07%)</title><rect x="909.8" y="1827.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="912.8" y="1838.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.07%)</title><rect x="910.6" y="1859.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="913.6" y="1870.0"></text>
</g>
<g>
<title>loadNNode::rule() const (1 samples, 0.07%)</title><rect x="911.4" y="1859.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="914.4" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (27 samples, 1.81%)</title><rect x="912.2" y="1875.0" width="21.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="915.2" y="1886.0">P..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.07%)</title><rect x="922.5" y="1859.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="925.5" y="1870.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (2 samples, 0.13%)</title><rect x="923.3" y="1859.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="926.3" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.13%)</title><rect x="924.9" y="1859.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="927.9" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (6 samples, 0.40%)</title><rect x="926.5" y="1859.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="929.5" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.13%)</title><rect x="929.6" y="1843.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="932.6" y="1854.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.07%)</title><rect x="931.2" y="1859.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="934.2" y="1870.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.07%)</title><rect x="932.0" y="1859.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="935.0" y="1870.0"></text>
</g>
<g>
<title>loadConUL32Node::rule() const (1 samples, 0.07%)</title><rect x="932.8" y="1859.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="935.8" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.07%)</title><rect x="933.6" y="1875.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="936.6" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (9 samples, 0.60%)</title><rect x="934.4" y="1875.0" width="7.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="937.4" y="1886.0"></text>
</g>
<g>
<title>MachProjNode::bottom_type() const (1 samples, 0.07%)</title><rect x="939.1" y="1859.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="942.1" y="1870.0"></text>
</g>
<g>
<title>PhiNode::out_RegMask() const (1 samples, 0.07%)</title><rect x="939.9" y="1859.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="942.9" y="1870.0"></text>
</g>
<g>
<title>loadNNode::out_RegMask() const (1 samples, 0.07%)</title><rect x="940.7" y="1859.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="943.7" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (3 samples, 0.20%)</title><rect x="941.5" y="1875.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="944.5" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (9 samples, 0.60%)</title><rect x="943.9" y="1875.0" width="7.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="946.9" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (5 samples, 0.34%)</title><rect x="947.0" y="1859.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="950.0" y="1870.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (11 samples, 0.74%)</title><rect x="951.0" y="1875.0" width="8.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="954.0" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.07%)</title><rect x="951.0" y="1859.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="954.0" y="1870.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (10 samples, 0.67%)</title><rect x="951.8" y="1859.0" width="7.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="954.8" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (3 samples, 0.20%)</title><rect x="952.6" y="1843.0" width="2.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="955.6" y="1854.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (6 samples, 0.40%)</title><rect x="954.9" y="1843.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="957.9" y="1854.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.07%)</title><rect x="954.9" y="1827.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="957.9" y="1838.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (5 samples, 0.34%)</title><rect x="955.7" y="1827.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="958.7" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.13%)</title><rect x="959.7" y="1875.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="962.7" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="960.5" y="1859.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="963.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (7 samples, 0.47%)</title><rect x="961.3" y="1875.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="964.3" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="963.7" y="1859.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="966.7" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.20%)</title><rect x="964.4" y="1859.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="967.4" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.13%)</title><rect x="966.8" y="1875.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="969.8" y="1886.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.07%)</title><rect x="967.6" y="1859.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="970.6" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (8 samples, 0.54%)</title><rect x="968.4" y="1875.0" width="6.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="971.4" y="1886.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.13%)</title><rect x="973.2" y="1859.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="976.2" y="1870.0"></text>
</g>
<g>
<title>castIINode::out_RegMask() const (1 samples, 0.07%)</title><rect x="974.7" y="1875.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="977.7" y="1886.0"></text>
</g>
<g>
<title>compN_rRegNode::ideal_Opcode() const (1 samples, 0.07%)</title><rect x="975.5" y="1875.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="978.5" y="1886.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.07%)</title><rect x="976.3" y="1875.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="979.3" y="1886.0"></text>
</g>
<g>
<title>PhasePeephole::do_transform() (1 samples, 0.07%)</title><rect x="977.1" y="1891.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="980.1" y="1902.0"></text>
</g>
<g>
<title>Compile::Optimize() (247 samples, 16.57%)</title><rect x="977.9" y="1907.0" width="195.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="980.9" y="1918.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.07%)</title><rect x="977.9" y="1891.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="980.9" y="1902.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.07%)</title><rect x="977.9" y="1875.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="980.9" y="1886.0"></text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.07%)</title><rect x="978.7" y="1891.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="981.7" y="1902.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (1 samples, 0.07%)</title><rect x="978.7" y="1875.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="981.7" y="1886.0"></text>
</g>
<g>
<title>LateInlineCallGenerator::do_late_inline() (1 samples, 0.07%)</title><rect x="978.7" y="1859.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="981.7" y="1870.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="978.7" y="1843.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="981.7" y="1854.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="978.7" y="1827.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="981.7" y="1838.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="978.7" y="1811.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="981.7" y="1822.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="978.7" y="1795.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="981.7" y="1806.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="978.7" y="1779.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="981.7" y="1790.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="978.7" y="1763.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="981.7" y="1774.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="978.7" y="1747.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="981.7" y="1758.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="978.7" y="1731.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="981.7" y="1742.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="978.7" y="1715.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="981.7" y="1726.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="978.7" y="1699.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="981.7" y="1710.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="978.7" y="1683.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="981.7" y="1694.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="978.7" y="1667.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="981.7" y="1678.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="978.7" y="1651.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="981.7" y="1662.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="978.7" y="1635.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="981.7" y="1646.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="978.7" y="1619.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="981.7" y="1630.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="978.7" y="1603.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="981.7" y="1614.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="978.7" y="1587.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="981.7" y="1598.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="978.7" y="1571.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="981.7" y="1582.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="978.7" y="1555.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="981.7" y="1566.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="978.7" y="1539.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="981.7" y="1550.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="978.7" y="1523.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="981.7" y="1534.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="978.7" y="1507.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="981.7" y="1518.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="978.7" y="1491.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="981.7" y="1502.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="978.7" y="1475.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="981.7" y="1486.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="978.7" y="1459.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="981.7" y="1470.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="978.7" y="1443.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="981.7" y="1454.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="978.7" y="1427.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="981.7" y="1438.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="978.7" y="1411.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="981.7" y="1422.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="978.7" y="1395.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="981.7" y="1406.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.07%)</title><rect x="978.7" y="1379.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="981.7" y="1390.0"></text>
</g>
<g>
<title>Parse::call_register_finalizer() (1 samples, 0.07%)</title><rect x="978.7" y="1363.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="981.7" y="1374.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.07%)</title><rect x="978.7" y="1347.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="981.7" y="1358.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="978.7" y="1331.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="981.7" y="1342.0"></text>
</g>
<g>
<title>PhaseTransform::makecon(Type const*) (1 samples, 0.07%)</title><rect x="978.7" y="1315.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="981.7" y="1326.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.07%)</title><rect x="978.7" y="1299.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="981.7" y="1310.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="978.7" y="1283.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="981.7" y="1294.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (2 samples, 0.13%)</title><rect x="979.5" y="1891.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="982.5" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_speculative_types() (1 samples, 0.07%)</title><rect x="980.3" y="1875.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="983.3" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (7 samples, 0.47%)</title><rect x="981.1" y="1891.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="984.1" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (7 samples, 0.47%)</title><rect x="981.1" y="1875.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="984.1" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::add_final_edges(Node*) (2 samples, 0.13%)</title><rect x="981.1" y="1859.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="984.1" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (2 samples, 0.13%)</title><rect x="981.1" y="1843.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="984.1" y="1854.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (2 samples, 0.13%)</title><rect x="981.1" y="1827.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="984.1" y="1838.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (2 samples, 0.13%)</title><rect x="981.1" y="1811.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="984.1" y="1822.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (2 samples, 0.13%)</title><rect x="981.1" y="1795.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="984.1" y="1806.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (2 samples, 0.13%)</title><rect x="981.1" y="1779.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="984.1" y="1790.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (2 samples, 0.13%)</title><rect x="981.1" y="1763.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="984.1" y="1774.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::invoke(BCEscapeAnalyzer::StateInfo&amp;, Bytecodes::Code, ciMethod*, ciKlass*) (2 samples, 0.13%)</title><rect x="981.1" y="1747.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="984.1" y="1758.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (2 samples, 0.13%)</title><rect x="981.1" y="1731.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="984.1" y="1742.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (2 samples, 0.13%)</title><rect x="981.1" y="1715.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="984.1" y="1726.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (2 samples, 0.13%)</title><rect x="981.1" y="1699.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="984.1" y="1710.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (2 samples, 0.13%)</title><rect x="981.1" y="1683.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="984.1" y="1694.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::invoke(BCEscapeAnalyzer::StateInfo&amp;, Bytecodes::Code, ciMethod*, ciKlass*) (2 samples, 0.13%)</title><rect x="981.1" y="1667.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="984.1" y="1678.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (2 samples, 0.13%)</title><rect x="981.1" y="1651.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="984.1" y="1662.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (2 samples, 0.13%)</title><rect x="981.1" y="1635.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="984.1" y="1646.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (2 samples, 0.13%)</title><rect x="981.1" y="1619.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="984.1" y="1630.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (2 samples, 0.13%)</title><rect x="981.1" y="1603.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="984.1" y="1614.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::invoke(BCEscapeAnalyzer::StateInfo&amp;, Bytecodes::Code, ciMethod*, ciKlass*) (1 samples, 0.07%)</title><rect x="981.1" y="1587.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="984.1" y="1598.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.07%)</title><rect x="981.1" y="1571.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="984.1" y="1582.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.07%)</title><rect x="981.1" y="1555.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="984.1" y="1566.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.07%)</title><rect x="981.1" y="1539.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="984.1" y="1550.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.07%)</title><rect x="981.1" y="1523.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="984.1" y="1534.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::invoke(BCEscapeAnalyzer::StateInfo&amp;, Bytecodes::Code, ciMethod*, ciKlass*) (1 samples, 0.07%)</title><rect x="981.1" y="1507.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="984.1" y="1518.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::set_global_escape(BCEscapeAnalyzer::ArgumentMap, bool) (1 samples, 0.07%)</title><rect x="981.1" y="1491.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="984.1" y="1502.0"></text>
</g>
<g>
<title>VectorSet::operator&gt;&gt;=(unsigned int) (1 samples, 0.07%)</title><rect x="981.1" y="1475.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="984.1" y="1486.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="981.9" y="1587.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="984.9" y="1598.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="981.9" y="1571.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="984.9" y="1582.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="981.9" y="1555.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="984.9" y="1566.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.07%)</title><rect x="981.9" y="1539.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="984.9" y="1550.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.07%)</title><rect x="981.9" y="1523.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="984.9" y="1534.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.07%)</title><rect x="981.9" y="1507.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="984.9" y="1518.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="981.9" y="1491.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="984.9" y="1502.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="981.9" y="1475.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="984.9" y="1486.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.07%)</title><rect x="981.9" y="1459.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="984.9" y="1470.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.07%)</title><rect x="981.9" y="1443.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="984.9" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.07%)</title><rect x="982.6" y="1859.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="985.6" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (4 samples, 0.27%)</title><rect x="983.4" y="1859.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="986.4" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.27%)</title><rect x="983.4" y="1843.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="986.4" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.20%)</title><rect x="983.4" y="1827.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="986.4" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.20%)</title><rect x="983.4" y="1811.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="986.4" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.20%)</title><rect x="983.4" y="1795.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="986.4" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.20%)</title><rect x="983.4" y="1779.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="986.4" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1763.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="986.4" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1747.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="986.4" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1731.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="986.4" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1715.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="986.4" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1699.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="986.4" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1683.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="986.4" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1667.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="986.4" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1651.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="986.4" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1635.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="986.4" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1619.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="986.4" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1603.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="986.4" y="1614.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.07%)</title><rect x="983.4" y="1587.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="986.4" y="1598.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="983.4" y="1571.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="986.4" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.13%)</title><rect x="984.2" y="1763.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="987.2" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="984.2" y="1747.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="987.2" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="985.0" y="1747.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="988.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="985.0" y="1731.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="988.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="985.0" y="1715.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="988.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="985.0" y="1699.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="988.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="985.0" y="1683.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="988.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="985.0" y="1667.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="988.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="985.0" y="1651.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="988.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="985.0" y="1635.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="988.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="985.0" y="1619.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="988.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="985.0" y="1603.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="988.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="985.0" y="1587.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="988.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="985.0" y="1571.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="988.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="985.0" y="1555.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="988.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="985.0" y="1539.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="988.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="985.0" y="1523.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="988.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="985.0" y="1507.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="988.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="985.0" y="1491.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="988.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="985.0" y="1475.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="988.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="985.0" y="1459.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="988.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="985.0" y="1443.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="988.0" y="1454.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*) (1 samples, 0.07%)</title><rect x="985.0" y="1427.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="988.0" y="1438.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*) (1 samples, 0.07%)</title><rect x="985.8" y="1827.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="988.8" y="1838.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.13%)</title><rect x="986.6" y="1891.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="989.6" y="1902.0"></text>
</g>
<g>
<title>PCTableNode::bottom_type() const (1 samples, 0.07%)</title><rect x="986.6" y="1875.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="989.6" y="1886.0"></text>
</g>
<g>
<title>VectorSet::operator&gt;&gt;=(unsigned int) (1 samples, 0.07%)</title><rect x="987.4" y="1875.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="990.4" y="1886.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.07%)</title><rect x="988.2" y="1891.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="991.2" y="1902.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.07%)</title><rect x="988.2" y="1875.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="991.2" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;, bool, bool) (1 samples, 0.07%)</title><rect x="989.0" y="1891.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="992.0" y="1902.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="989.0" y="1875.0" width="0.8" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="992.0" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (198 samples, 13.28%)</title><rect x="989.8" y="1891.0" width="156.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="992.8" y="1902.0">PhaseIdealLoop::buil..</text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="989.8" y="1875.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="992.8" y="1886.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="989.8" y="1859.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="992.8" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::replace_parallel_iv(IdealLoopTree*) (1 samples, 0.07%)</title><rect x="989.8" y="1843.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="992.8" y="1854.0"></text>
</g>
<g>
<title>LoopNode::is_valid_counted_loop() const (1 samples, 0.07%)</title><rect x="989.8" y="1827.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="992.8" y="1838.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="990.6" y="1875.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="993.6" y="1886.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="990.6" y="1859.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="993.6" y="1870.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="990.6" y="1843.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="993.6" y="1854.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="990.6" y="1827.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="993.6" y="1838.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="990.6" y="1811.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="993.6" y="1822.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="990.6" y="1795.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="993.6" y="1806.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="990.6" y="1779.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="993.6" y="1790.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="990.6" y="1763.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="993.6" y="1774.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="990.6" y="1747.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="993.6" y="1758.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="990.6" y="1731.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="993.6" y="1742.0"></text>
</g>
<g>
<title>PhaseIdealLoop::recompute_dom_depth() (1 samples, 0.07%)</title><rect x="990.6" y="1715.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="993.6" y="1726.0"></text>
</g>
<g>
<title>Node::is_CFG() const (3 samples, 0.20%)</title><rect x="991.4" y="1875.0" width="2.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="994.4" y="1886.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.07%)</title><rect x="993.7" y="1875.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="996.7" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (5 samples, 0.34%)</title><rect x="994.5" y="1875.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="997.5" y="1886.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.07%)</title><rect x="997.7" y="1859.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1000.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 0.40%)</title><rect x="998.5" y="1875.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1001.5" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.07%)</title><rect x="1000.9" y="1859.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1003.9" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.07%)</title><rect x="1001.6" y="1859.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1004.6" y="1870.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.07%)</title><rect x="1002.4" y="1859.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1005.4" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (163 samples, 10.93%)</title><rect x="1003.2" y="1875.0" width="129.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1006.2" y="1886.0">PhaseIdealLoop::..</text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.07%)</title><rect x="1009.6" y="1859.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1012.6" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (154 samples, 10.33%)</title><rect x="1010.3" y="1859.0" width="121.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1013.3" y="1870.0">PhaseIdealLoop:..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (4 samples, 0.27%)</title><rect x="1012.7" y="1843.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1015.7" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (147 samples, 9.86%)</title><rect x="1015.9" y="1843.0" width="116.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1018.9" y="1854.0">PhaseIdealLoop..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (4 samples, 0.27%)</title><rect x="1113.2" y="1827.0" width="3.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1116.2" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (3 samples, 0.20%)</title><rect x="1114.0" y="1811.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1117.0" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (20 samples, 1.34%)</title><rect x="1116.4" y="1827.0" width="15.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1119.4" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (3 samples, 0.20%)</title><rect x="1132.2" y="1875.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1135.2" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (2 samples, 0.13%)</title><rect x="1133.0" y="1859.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1136.0" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.07%)</title><rect x="1134.6" y="1875.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1137.6" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (8 samples, 0.54%)</title><rect x="1135.4" y="1875.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1138.4" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.07%)</title><rect x="1138.6" y="1859.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1141.6" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (3 samples, 0.20%)</title><rect x="1139.3" y="1859.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1142.3" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (2 samples, 0.13%)</title><rect x="1140.1" y="1843.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.1" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.27%)</title><rect x="1141.7" y="1875.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1144.7" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 0.27%)</title><rect x="1141.7" y="1859.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1144.7" y="1870.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1141.7" y="1843.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1144.7" y="1854.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1141.7" y="1827.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1144.7" y="1838.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.13%)</title><rect x="1142.5" y="1843.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1145.5" y="1854.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.07%)</title><rect x="1143.3" y="1827.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1146.3" y="1838.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1144.1" y="1843.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1147.1" y="1854.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.07%)</title><rect x="1144.1" y="1827.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1147.1" y="1838.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1144.1" y="1811.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1147.1" y="1822.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1144.1" y="1795.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1147.1" y="1806.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1144.1" y="1779.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1147.1" y="1790.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1144.1" y="1763.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1147.1" y="1774.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1144.1" y="1747.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1147.1" y="1758.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1144.1" y="1731.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1147.1" y="1742.0"></text>
</g>
<g>
<title>RegionNode::pinned() const (1 samples, 0.07%)</title><rect x="1144.9" y="1875.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1147.9" y="1886.0"></text>
</g>
<g>
<title>StartNode::pinned() const (1 samples, 0.07%)</title><rect x="1145.7" y="1875.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.7" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (31 samples, 2.08%)</title><rect x="1146.5" y="1891.0" width="24.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1149.5" y="1902.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (31 samples, 2.08%)</title><rect x="1146.5" y="1875.0" width="24.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1149.5" y="1886.0">P..</text>
</g>
<g>
<title>CmpINode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1149.6" y="1859.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.6" y="1870.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1149.6" y="1843.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.6" y="1854.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1150.4" y="1859.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1153.4" y="1870.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1150.4" y="1843.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.4" y="1854.0"></text>
</g>
<g>
<title>LoadBNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1151.2" y="1859.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.2" y="1870.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1151.2" y="1843.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.2" y="1854.0"></text>
</g>
<g>
<title>AllocateNode::Ideal_allocation(Node*, PhaseTransform*, long&amp;) (1 samples, 0.07%)</title><rect x="1151.2" y="1827.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.2" y="1838.0"></text>
</g>
<g>
<title>AddPNode::Ideal_base_and_offset(Node*, PhaseTransform*, long&amp;) (1 samples, 0.07%)</title><rect x="1151.2" y="1811.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.2" y="1822.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.13%)</title><rect x="1152.0" y="1859.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1155.0" y="1870.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (2 samples, 0.13%)</title><rect x="1152.0" y="1843.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.0" y="1854.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (2 samples, 0.13%)</title><rect x="1152.0" y="1827.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1155.0" y="1838.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.13%)</title><rect x="1152.0" y="1811.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.0" y="1822.0"></text>
</g>
<g>
<title>MemBarNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1153.6" y="1859.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.6" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1153.6" y="1843.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.6" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1153.6" y="1827.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1156.6" y="1838.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.07%)</title><rect x="1153.6" y="1811.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.6" y="1822.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (2 samples, 0.13%)</title><rect x="1154.4" y="1859.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1157.4" y="1870.0"></text>
</g>
<g>
<title>Node::destruct() (1 samples, 0.07%)</title><rect x="1156.0" y="1859.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.0" y="1870.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.13%)</title><rect x="1156.8" y="1859.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1159.8" y="1870.0"></text>
</g>
<g>
<title>BoolNode::hash() const (1 samples, 0.07%)</title><rect x="1157.6" y="1843.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1160.6" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (7 samples, 0.47%)</title><rect x="1158.3" y="1859.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1161.3" y="1870.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.07%)</title><rect x="1160.7" y="1843.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.7" y="1854.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.07%)</title><rect x="1160.7" y="1827.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1163.7" y="1838.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1161.5" y="1843.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.5" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 0.13%)</title><rect x="1162.3" y="1843.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.3" y="1854.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.07%)</title><rect x="1162.3" y="1827.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.3" y="1838.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.07%)</title><rect x="1163.1" y="1827.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.1" y="1838.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (2 samples, 0.13%)</title><rect x="1163.9" y="1859.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.9" y="1870.0"></text>
</g>
<g>
<title>MemNode::optimize_memory_chain(Node*, TypePtr const*, Node*, PhaseGVN*) (1 samples, 0.07%)</title><rect x="1164.7" y="1843.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.7" y="1854.0"></text>
</g>
<g>
<title>PhiNode::Identity(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1165.5" y="1859.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.5" y="1870.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (2 samples, 0.13%)</title><rect x="1166.3" y="1859.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1169.3" y="1870.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1166.3" y="1843.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.3" y="1854.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1166.3" y="1827.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.3" y="1838.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1166.3" y="1811.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.3" y="1822.0"></text>
</g>
<g>
<title>TypeNarrowPtr::filter_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1167.0" y="1843.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.0" y="1854.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1167.0" y="1827.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.0" y="1838.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1167.0" y="1811.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.0" y="1822.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.07%)</title><rect x="1167.0" y="1795.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.0" y="1806.0"></text>
</g>
<g>
<title>TypeOopPtr::eq(Type const*) const (1 samples, 0.07%)</title><rect x="1167.0" y="1779.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.0" y="1790.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.13%)</title><rect x="1167.8" y="1859.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.8" y="1870.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.07%)</title><rect x="1168.6" y="1843.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.6" y="1854.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.13%)</title><rect x="1169.4" y="1859.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.4" y="1870.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.13%)</title><rect x="1169.4" y="1843.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.4" y="1854.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.13%)</title><rect x="1169.4" y="1827.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.4" y="1838.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.13%)</title><rect x="1169.4" y="1811.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.4" y="1822.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.13%)</title><rect x="1169.4" y="1795.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.4" y="1806.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.13%)</title><rect x="1169.4" y="1779.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.4" y="1790.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.13%)</title><rect x="1169.4" y="1763.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.4" y="1774.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.13%)</title><rect x="1169.4" y="1747.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.4" y="1758.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.13%)</title><rect x="1169.4" y="1731.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.4" y="1742.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.13%)</title><rect x="1169.4" y="1715.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.4" y="1726.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.13%)</title><rect x="1169.4" y="1699.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.4" y="1710.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.13%)</title><rect x="1169.4" y="1683.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.4" y="1694.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.13%)</title><rect x="1169.4" y="1667.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.4" y="1678.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.13%)</title><rect x="1169.4" y="1651.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.4" y="1662.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.13%)</title><rect x="1169.4" y="1635.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.4" y="1646.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.13%)</title><rect x="1169.4" y="1619.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.4" y="1630.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.13%)</title><rect x="1169.4" y="1603.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.4" y="1614.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.13%)</title><rect x="1169.4" y="1587.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1172.4" y="1598.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.13%)</title><rect x="1169.4" y="1571.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.4" y="1582.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.13%)</title><rect x="1169.4" y="1555.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.4" y="1566.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1169.4" y="1539.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1172.4" y="1550.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1169.4" y="1523.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.4" y="1534.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1169.4" y="1507.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1172.4" y="1518.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1170.2" y="1539.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.2" y="1550.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1170.2" y="1523.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.2" y="1534.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.07%)</title><rect x="1171.0" y="1891.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.0" y="1902.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.07%)</title><rect x="1171.0" y="1875.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.0" y="1886.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1171.0" y="1859.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.0" y="1870.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.07%)</title><rect x="1171.0" y="1843.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.0" y="1854.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.07%)</title><rect x="1171.0" y="1827.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.0" y="1838.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.07%)</title><rect x="1171.0" y="1811.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.0" y="1822.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.07%)</title><rect x="1171.0" y="1795.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.0" y="1806.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="1171.0" y="1779.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.0" y="1790.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.07%)</title><rect x="1171.8" y="1891.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.8" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.07%)</title><rect x="1171.8" y="1875.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.8" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.07%)</title><rect x="1171.8" y="1859.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.8" y="1870.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1171.8" y="1843.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.8" y="1854.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.07%)</title><rect x="1172.6" y="1891.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.6" y="1902.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (15 samples, 1.01%)</title><rect x="1173.4" y="1907.0" width="11.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.4" y="1918.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (15 samples, 1.01%)</title><rect x="1173.4" y="1891.0" width="11.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.4" y="1902.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (15 samples, 1.01%)</title><rect x="1173.4" y="1875.0" width="11.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.4" y="1886.0"></text>
</g>
<g>
<title>Parse::do_one_block() (15 samples, 1.01%)</title><rect x="1173.4" y="1859.0" width="11.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.4" y="1870.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (15 samples, 1.01%)</title><rect x="1173.4" y="1843.0" width="11.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.4" y="1854.0"></text>
</g>
<g>
<title>Parse::do_call() (15 samples, 1.01%)</title><rect x="1173.4" y="1827.0" width="11.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.4" y="1838.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 0.74%)</title><rect x="1173.4" y="1811.0" width="8.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.4" y="1822.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 0.74%)</title><rect x="1173.4" y="1795.0" width="8.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.4" y="1806.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 0.74%)</title><rect x="1173.4" y="1779.0" width="8.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.4" y="1790.0"></text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 0.74%)</title><rect x="1173.4" y="1763.0" width="8.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.4" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (11 samples, 0.74%)</title><rect x="1173.4" y="1747.0" width="8.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.4" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (11 samples, 0.74%)</title><rect x="1173.4" y="1731.0" width="8.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.4" y="1742.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.47%)</title><rect x="1173.4" y="1715.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.4" y="1726.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.47%)</title><rect x="1173.4" y="1699.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.4" y="1710.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.47%)</title><rect x="1173.4" y="1683.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.4" y="1694.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.47%)</title><rect x="1173.4" y="1667.0" width="5.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.4" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.47%)</title><rect x="1173.4" y="1651.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.4" y="1662.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.40%)</title><rect x="1174.2" y="1635.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.2" y="1646.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.40%)</title><rect x="1174.2" y="1619.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.2" y="1630.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.40%)</title><rect x="1174.2" y="1603.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.2" y="1614.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.40%)</title><rect x="1174.2" y="1587.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.2" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.40%)</title><rect x="1174.2" y="1571.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.2" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.40%)</title><rect x="1174.2" y="1555.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.2" y="1566.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.40%)</title><rect x="1174.2" y="1539.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.2" y="1550.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1174.2" y="1523.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.2" y="1534.0"></text>
</g>
<g>
<title>ciMethod::call_profile_at_bci(int) (1 samples, 0.07%)</title><rect x="1174.2" y="1507.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.2" y="1518.0"></text>
</g>
<g>
<title>ciMethodData::bci_to_data(int, ciMethod*) (1 samples, 0.07%)</title><rect x="1174.2" y="1491.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.2" y="1502.0"></text>
</g>
<g>
<title>ciMethodData::data_at(int) (1 samples, 0.07%)</title><rect x="1174.2" y="1475.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.2" y="1486.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.34%)</title><rect x="1175.0" y="1523.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.0" y="1534.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.34%)</title><rect x="1175.0" y="1507.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.0" y="1518.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.34%)</title><rect x="1175.0" y="1491.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.0" y="1502.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.34%)</title><rect x="1175.0" y="1475.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.0" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.34%)</title><rect x="1175.0" y="1459.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.0" y="1470.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.34%)</title><rect x="1175.0" y="1443.0" width="3.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.0" y="1454.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.07%)</title><rect x="1175.0" y="1427.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.0" y="1438.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.07%)</title><rect x="1175.0" y="1411.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.0" y="1422.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1175.0" y="1395.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.0" y="1406.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.07%)</title><rect x="1175.0" y="1379.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.0" y="1390.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.27%)</title><rect x="1175.8" y="1427.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.8" y="1438.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.27%)</title><rect x="1175.8" y="1411.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.8" y="1422.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.27%)</title><rect x="1175.8" y="1395.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.8" y="1406.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.27%)</title><rect x="1175.8" y="1379.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.8" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.27%)</title><rect x="1175.8" y="1363.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.8" y="1374.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.20%)</title><rect x="1175.8" y="1347.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.8" y="1358.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.13%)</title><rect x="1175.8" y="1331.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.8" y="1342.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.13%)</title><rect x="1175.8" y="1315.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.8" y="1326.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.13%)</title><rect x="1175.8" y="1299.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.8" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.13%)</title><rect x="1175.8" y="1283.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.8" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.13%)</title><rect x="1175.8" y="1267.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.8" y="1278.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.13%)</title><rect x="1175.8" y="1251.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.8" y="1262.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1175.8" y="1235.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.8" y="1246.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1175.8" y="1219.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.8" y="1230.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.07%)</title><rect x="1175.8" y="1203.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.8" y="1214.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.07%)</title><rect x="1175.8" y="1187.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.8" y="1198.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.07%)</title><rect x="1175.8" y="1171.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.8" y="1182.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.07%)</title><rect x="1175.8" y="1155.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.8" y="1166.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.07%)</title><rect x="1175.8" y="1139.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.8" y="1150.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="1175.8" y="1123.0" width="0.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1178.8" y="1134.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.5" y="1235.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.5" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.5" y="1219.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.5" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.5" y="1203.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.5" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.5" y="1187.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.5" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.5" y="1171.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.5" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.5" y="1155.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.5" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.5" y="1139.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.5" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.5" y="1123.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.5" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.5" y="1107.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.5" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.5" y="1091.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.5" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.5" y="1075.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.5" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.5" y="1059.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.5" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.5" y="1043.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.5" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.5" y="1027.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.5" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.5" y="1011.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.5" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.5" y="995.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.5" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.5" y="979.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.5" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.5" y="963.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.5" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.5" y="947.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.5" y="958.0"></text>
</g>
<g>
<title>MethodData::profile_return() (1 samples, 0.07%)</title><rect x="1176.5" y="931.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.5" y="942.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.3" y="1331.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.3" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1177.3" y="1315.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.3" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1177.3" y="1299.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.3" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1177.3" y="1283.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.3" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1177.3" y="1267.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.3" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1177.3" y="1251.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.3" y="1262.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1177.3" y="1235.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.3" y="1246.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1177.3" y="1219.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.3" y="1230.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1177.3" y="1203.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.3" y="1214.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1178.1" y="1347.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.1" y="1358.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1178.1" y="1331.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.1" y="1342.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1178.1" y="1315.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.1" y="1326.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1178.1" y="1299.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.1" y="1310.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1178.1" y="1283.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.1" y="1294.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1178.1" y="1267.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.1" y="1278.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1178.1" y="1251.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.1" y="1262.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.07%)</title><rect x="1178.1" y="1235.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.1" y="1246.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.27%)</title><rect x="1178.9" y="1715.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.9" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.27%)</title><rect x="1178.9" y="1699.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.9" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.27%)</title><rect x="1178.9" y="1683.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.9" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.27%)</title><rect x="1178.9" y="1667.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.9" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.27%)</title><rect x="1178.9" y="1651.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.9" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.27%)</title><rect x="1178.9" y="1635.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.9" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.27%)</title><rect x="1178.9" y="1619.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.9" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.27%)</title><rect x="1178.9" y="1603.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.9" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.27%)</title><rect x="1178.9" y="1587.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.9" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.27%)</title><rect x="1178.9" y="1571.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.9" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.27%)</title><rect x="1178.9" y="1555.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.9" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.27%)</title><rect x="1178.9" y="1539.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.9" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.27%)</title><rect x="1178.9" y="1523.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.9" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.27%)</title><rect x="1178.9" y="1507.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.9" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.27%)</title><rect x="1178.9" y="1491.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.9" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.27%)</title><rect x="1178.9" y="1475.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.9" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.27%)</title><rect x="1178.9" y="1459.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.9" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.27%)</title><rect x="1178.9" y="1443.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.9" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.20%)</title><rect x="1178.9" y="1427.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.9" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1178.9" y="1411.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.9" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.20%)</title><rect x="1178.9" y="1395.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.9" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.20%)</title><rect x="1178.9" y="1379.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.9" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.20%)</title><rect x="1178.9" y="1363.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.9" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.20%)</title><rect x="1178.9" y="1347.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.9" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.20%)</title><rect x="1178.9" y="1331.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.9" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1178.9" y="1315.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.9" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.20%)</title><rect x="1178.9" y="1299.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.9" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.20%)</title><rect x="1178.9" y="1283.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.9" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.13%)</title><rect x="1178.9" y="1267.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.9" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.13%)</title><rect x="1178.9" y="1251.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.9" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.13%)</title><rect x="1178.9" y="1235.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.9" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.9" y="1219.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.9" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.9" y="1203.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.9" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.9" y="1187.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.9" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.9" y="1171.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.9" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.9" y="1155.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.9" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.9" y="1139.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.9" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.9" y="1123.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.9" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.9" y="1107.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.9" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.9" y="1091.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.9" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.9" y="1075.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.9" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.9" y="1059.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.9" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.9" y="1043.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.9" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.9" y="1027.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.9" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.9" y="1011.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.9" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.9" y="995.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.9" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.9" y="979.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.9" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.9" y="963.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.9" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.9" y="947.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.9" y="958.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.9" y="931.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.9" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.9" y="915.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.9" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.9" y="899.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.9" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.9" y="883.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.9" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.9" y="867.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.9" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.9" y="851.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.9" y="862.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1178.9" y="835.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.9" y="846.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1178.9" y="819.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.9" y="830.0"></text>
</g>
<g>
<title>GraphKit::basic_plus_adr(Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1178.9" y="803.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.9" y="814.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1178.9" y="787.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.9" y="798.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.7" y="1219.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.7" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.7" y="1203.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.7" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1179.7" y="1187.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.7" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1179.7" y="1171.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.7" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1179.7" y="1155.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.7" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1179.7" y="1139.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.7" y="1150.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1179.7" y="1123.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.7" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.7" y="1107.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.7" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1179.7" y="1091.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.7" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1179.7" y="1075.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.7" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1179.7" y="1059.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.7" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1179.7" y="1043.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.7" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1179.7" y="1027.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.7" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.7" y="1011.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.7" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1179.7" y="995.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.7" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1179.7" y="979.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.7" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1179.7" y="963.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.7" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1179.7" y="947.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.7" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1179.7" y="931.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.7" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.7" y="915.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.7" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1179.7" y="899.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.7" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1179.7" y="883.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.7" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1179.7" y="867.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1179.7" y="851.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1179.7" y="835.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.7" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.7" y="819.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.7" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1179.7" y="803.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.7" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1179.7" y="787.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.7" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1179.7" y="771.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1179.7" y="755.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1179.7" y="739.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.7" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.7" y="723.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.7" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1179.7" y="707.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1179.7" y="691.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1179.7" y="675.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1179.7" y="659.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1179.7" y="643.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.7" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.7" y="627.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.7" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1179.7" y="611.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1179.7" y="595.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1179.7" y="579.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.07%)</title><rect x="1179.7" y="563.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.7" y="574.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.07%)</title><rect x="1179.7" y="547.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.7" y="558.0"></text>
</g>
<g>
<title>Parse::ensure_phis_everywhere() (1 samples, 0.07%)</title><rect x="1180.5" y="1267.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.5" y="1278.0"></text>
</g>
<g>
<title>Parse::ensure_phi(int, bool) (1 samples, 0.07%)</title><rect x="1180.5" y="1251.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.5" y="1262.0"></text>
</g>
<g>
<title>PhiNode::make(Node*, Node*, Type const*, TypePtr const*) (1 samples, 0.07%)</title><rect x="1180.5" y="1235.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.5" y="1246.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.3" y="1427.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.3" y="1438.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.27%)</title><rect x="1182.1" y="1811.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.1" y="1822.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.27%)</title><rect x="1182.1" y="1795.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.1" y="1806.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.27%)</title><rect x="1182.1" y="1779.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.1" y="1790.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.27%)</title><rect x="1182.1" y="1763.0" width="3.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.1" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.27%)</title><rect x="1182.1" y="1747.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.1" y="1758.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.27%)</title><rect x="1182.1" y="1731.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.1" y="1742.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.27%)</title><rect x="1182.1" y="1715.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.1" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.27%)</title><rect x="1182.1" y="1699.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.1" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.27%)</title><rect x="1182.1" y="1683.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.1" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.27%)</title><rect x="1182.1" y="1667.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.1" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.27%)</title><rect x="1182.1" y="1651.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.1" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.27%)</title><rect x="1182.1" y="1635.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.1" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.27%)</title><rect x="1182.1" y="1619.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.1" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.27%)</title><rect x="1182.1" y="1603.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.1" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.27%)</title><rect x="1182.1" y="1587.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.1" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.27%)</title><rect x="1182.1" y="1571.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.1" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.27%)</title><rect x="1182.1" y="1555.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.1" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.27%)</title><rect x="1182.1" y="1539.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.1" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.27%)</title><rect x="1182.1" y="1523.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.1" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.27%)</title><rect x="1182.1" y="1507.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.1" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.27%)</title><rect x="1182.1" y="1491.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.1" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.27%)</title><rect x="1182.1" y="1475.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.1" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.27%)</title><rect x="1182.1" y="1459.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.1" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.27%)</title><rect x="1182.1" y="1443.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.1" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.27%)</title><rect x="1182.1" y="1427.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.1" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.27%)</title><rect x="1182.1" y="1411.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.1" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.27%)</title><rect x="1182.1" y="1395.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.1" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.27%)</title><rect x="1182.1" y="1379.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.1" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.27%)</title><rect x="1182.1" y="1363.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.1" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.27%)</title><rect x="1182.1" y="1347.0" width="3.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.1" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.27%)</title><rect x="1182.1" y="1331.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.1" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1182.1" y="1315.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.1" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.20%)</title><rect x="1182.1" y="1299.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.1" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.20%)</title><rect x="1182.1" y="1283.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.1" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.20%)</title><rect x="1182.1" y="1267.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.1" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.20%)</title><rect x="1182.1" y="1251.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.1" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.13%)</title><rect x="1182.1" y="1235.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.1" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.13%)</title><rect x="1182.1" y="1219.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.1" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.13%)</title><rect x="1182.1" y="1203.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.1" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.13%)</title><rect x="1182.1" y="1187.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.1" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.13%)</title><rect x="1182.1" y="1171.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.1" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.13%)</title><rect x="1182.1" y="1155.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.1" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.13%)</title><rect x="1182.1" y="1139.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.1" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.13%)</title><rect x="1182.1" y="1123.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.1" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.13%)</title><rect x="1182.1" y="1107.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.1" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.13%)</title><rect x="1182.1" y="1091.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.1" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.13%)</title><rect x="1182.1" y="1075.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.1" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.13%)</title><rect x="1182.1" y="1059.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.1" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1182.1" y="1043.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.1" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.1" y="1027.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.1" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.1" y="1011.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.1" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.1" y="995.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.1" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.1" y="979.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.1" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1182.1" y="963.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.1" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1182.1" y="947.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.1" y="958.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.1" y="931.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.1" y="942.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_load_store(BasicType, LibraryCallKit::LoadStoreKind) (1 samples, 0.07%)</title><rect x="1182.1" y="915.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.1" y="926.0"></text>
</g>
<g>
<title>IdealKit::transform(Node*) (1 samples, 0.07%)</title><rect x="1182.1" y="899.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.1" y="910.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.07%)</title><rect x="1182.9" y="1043.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.9" y="1054.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.07%)</title><rect x="1182.9" y="1027.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.9" y="1038.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.07%)</title><rect x="1182.9" y="1011.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.9" y="1022.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields() (1 samples, 0.07%)</title><rect x="1182.9" y="995.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.9" y="1006.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields() (1 samples, 0.07%)</title><rect x="1182.9" y="979.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.9" y="990.0"></text>
</g>
<g>
<title>ciInstanceKlass::super() (1 samples, 0.07%)</title><rect x="1182.9" y="963.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.9" y="974.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1182.9" y="947.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.9" y="958.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1182.9" y="931.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.9" y="942.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1183.7" y="1235.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.7" y="1246.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1183.7" y="1219.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.7" y="1230.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1183.7" y="1203.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.7" y="1214.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1183.7" y="1187.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.7" y="1198.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1183.7" y="1171.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.7" y="1182.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1183.7" y="1155.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.7" y="1166.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1183.7" y="1139.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.7" y="1150.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.07%)</title><rect x="1183.7" y="1123.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.7" y="1134.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.5" y="1315.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.5" y="1326.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.5" y="1299.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.5" y="1310.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1184.5" y="1283.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.5" y="1294.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1184.5" y="1267.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.5" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1184.5" y="1251.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.5" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1184.5" y="1235.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.5" y="1246.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1184.5" y="1219.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.5" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.5" y="1203.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.5" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1184.5" y="1187.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.5" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1184.5" y="1171.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.5" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1184.5" y="1155.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.5" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1184.5" y="1139.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.5" y="1150.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1184.5" y="1123.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.5" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.5" y="1107.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.5" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1184.5" y="1091.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.5" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1184.5" y="1075.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.5" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1184.5" y="1059.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.5" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1184.5" y="1043.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.5" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1184.5" y="1027.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.5" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.5" y="1011.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.5" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1184.5" y="995.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.5" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1184.5" y="979.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.5" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1184.5" y="963.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.5" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1184.5" y="947.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.5" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1184.5" y="931.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.5" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.5" y="915.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.5" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1184.5" y="899.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.5" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1184.5" y="883.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.5" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1184.5" y="867.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.5" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1184.5" y="851.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.5" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1184.5" y="835.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.5" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.5" y="819.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.5" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1184.5" y="803.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.5" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1184.5" y="787.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.5" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1184.5" y="771.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.5" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1184.5" y="755.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.5" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1184.5" y="739.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.5" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.5" y="723.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.5" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1184.5" y="707.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.5" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1184.5" y="691.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1184.5" y="675.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.5" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1184.5" y="659.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.5" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1184.5" y="643.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.5" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.5" y="627.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.5" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1184.5" y="611.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1184.5" y="595.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1184.5" y="579.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1184.5" y="563.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.5" y="574.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.07%)</title><rect x="1184.5" y="547.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.5" y="558.0"></text>
</g>
<g>
<title>Parse::call_register_finalizer() (1 samples, 0.07%)</title><rect x="1184.5" y="531.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.5" y="542.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1184.5" y="515.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.5" y="526.0"></text>
</g>
<g>
<title>CmpNode::add_id() const (1 samples, 0.07%)</title><rect x="1184.5" y="499.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.5" y="510.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (3 samples, 0.20%)</title><rect x="1185.3" y="1907.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.3" y="1918.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (3 samples, 0.20%)</title><rect x="1185.3" y="1891.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.3" y="1902.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.07%)</title><rect x="1187.6" y="1955.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.6" y="1966.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.07%)</title><rect x="1187.6" y="1939.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.6" y="1950.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.07%)</title><rect x="1187.6" y="1923.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.6" y="1934.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.07%)</title><rect x="1187.6" y="1907.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.6" y="1918.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.07%)</title><rect x="1187.6" y="1891.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.6" y="1902.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.07%)</title><rect x="1188.4" y="1971.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.4" y="1982.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.07%)</title><rect x="1188.4" y="1955.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.4" y="1966.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.07%)</title><rect x="1188.4" y="1939.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.4" y="1950.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.07%)</title><rect x="1188.4" y="1923.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1191.4" y="1934.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.07%)</title><rect x="1188.4" y="1907.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.4" y="1918.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.07%)</title><rect x="1188.4" y="1891.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.4" y="1902.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.07%)</title><rect x="1189.2" y="2003.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1192.2" y="2014.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.07%)</title><rect x="1189.2" y="1987.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1192.2" y="1998.0"></text>
</g>
<g>
<title>SafepointSynchronize::end() (1 samples, 0.07%)</title><rect x="1189.2" y="1971.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1192.2" y="1982.0"></text>
</g>
</g>
</svg>
