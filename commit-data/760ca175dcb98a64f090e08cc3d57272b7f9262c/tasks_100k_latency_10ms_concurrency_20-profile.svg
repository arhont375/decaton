<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1318" onload="init(evt)" viewBox="0 0 1200 1318" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1301"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1301"> </text>
<g id="frames">
<g>
<title>all (407 samples, 100.00%)</title><rect x="10.0" y="1267.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1278.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.25%)</title><rect x="10.0" y="1251.0" width="2.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>__vsnprintf (1 samples, 0.25%)</title><rect x="10.0" y="1235.0" width="2.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>vfprintf (1 samples, 0.25%)</title><rect x="10.0" y="1219.0" width="2.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (27 samples, 6.63%)</title><rect x="12.9" y="1251.0" width="78.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.9" y="1262.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.25%)</title><rect x="12.9" y="1235.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.9" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (1 samples, 0.25%)</title><rect x="12.9" y="1219.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.9" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.25%)</title><rect x="12.9" y="1203.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.9" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.25%)</title><rect x="12.9" y="1187.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.9" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.25%)</title><rect x="12.9" y="1171.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.9" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.25%)</title><rect x="12.9" y="1155.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.25%)</title><rect x="12.9" y="1139.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.9" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.25%)</title><rect x="12.9" y="1123.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.25%)</title><rect x="12.9" y="1107.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.25%)</title><rect x="12.9" y="1091.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.25%)</title><rect x="12.9" y="1075.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.25%)</title><rect x="12.9" y="1059.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="15.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.25%)</title><rect x="12.9" y="1043.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.25%)</title><rect x="12.9" y="1027.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.25%)</title><rect x="12.9" y="1011.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$10.write (1 samples, 0.25%)</title><rect x="12.9" y="995.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="15.9" y="1006.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.25%)</title><rect x="12.9" y="979.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="15.9" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (26 samples, 6.39%)</title><rect x="15.8" y="1235.0" width="75.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.8" y="1246.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.25%)</title><rect x="18.7" y="1219.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="21.7" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.25%)</title><rect x="18.7" y="1203.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.7" y="1214.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.25%)</title><rect x="18.7" y="1187.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="21.7" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.25%)</title><rect x="18.7" y="1171.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.7" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.25%)</title><rect x="18.7" y="1155.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.7" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.spliterator (1 samples, 0.25%)</title><rect x="18.7" y="1139.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.7" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (5 samples, 1.23%)</title><rect x="21.6" y="1219.0" width="14.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="24.6" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (5 samples, 1.23%)</title><rect x="21.6" y="1203.0" width="14.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.6" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (5 samples, 1.23%)</title><rect x="21.6" y="1187.0" width="14.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="24.6" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$270/178821702.accept (5 samples, 1.23%)</title><rect x="21.6" y="1171.0" width="14.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="24.6" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (5 samples, 1.23%)</title><rect x="21.6" y="1155.0" width="14.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="24.6" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (5 samples, 1.23%)</title><rect x="21.6" y="1139.0" width="14.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="24.6" y="1150.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (5 samples, 1.23%)</title><rect x="21.6" y="1123.0" width="14.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.6" y="1134.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 0.74%)</title><rect x="36.1" y="1219.0" width="8.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="39.1" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$269/866948803.accept (3 samples, 0.74%)</title><rect x="36.1" y="1203.0" width="8.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="39.1" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (3 samples, 0.74%)</title><rect x="36.1" y="1187.0" width="8.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="39.1" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (3 samples, 0.74%)</title><rect x="36.1" y="1171.0" width="8.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="39.1" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (3 samples, 0.74%)</title><rect x="36.1" y="1155.0" width="8.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="39.1" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (3 samples, 0.74%)</title><rect x="36.1" y="1139.0" width="8.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="39.1" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (3 samples, 0.74%)</title><rect x="36.1" y="1123.0" width="8.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="39.1" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 0.74%)</title><rect x="36.1" y="1107.0" width="8.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="39.1" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (3 samples, 0.74%)</title><rect x="36.1" y="1091.0" width="8.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="39.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (16 samples, 3.93%)</title><rect x="44.8" y="1219.0" width="46.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="47.8" y="1230.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (16 samples, 3.93%)</title><rect x="44.8" y="1203.0" width="46.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="47.8" y="1214.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (14 samples, 3.44%)</title><rect x="44.8" y="1187.0" width="40.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="47.8" y="1198.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.25%)</title><rect x="44.8" y="1171.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="47.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.25%)</title><rect x="44.8" y="1155.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="47.8" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (1 samples, 0.25%)</title><rect x="44.8" y="1139.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="47.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 0.98%)</title><rect x="47.7" y="1171.0" width="11.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="50.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 0.98%)</title><rect x="47.7" y="1155.0" width="11.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="50.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.49%)</title><rect x="47.7" y="1139.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="50.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.49%)</title><rect x="47.7" y="1123.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="50.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.25%)</title><rect x="47.7" y="1107.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="50.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.25%)</title><rect x="47.7" y="1091.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="50.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.25%)</title><rect x="47.7" y="1075.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="50.7" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.25%)</title><rect x="47.7" y="1059.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="50.7" y="1070.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.25%)</title><rect x="47.7" y="1043.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="50.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.25%)</title><rect x="50.6" y="1107.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="53.6" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.25%)</title><rect x="50.6" y="1091.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="53.6" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.25%)</title><rect x="50.6" y="1075.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="53.6" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.25%)</title><rect x="50.6" y="1059.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="53.6" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.25%)</title><rect x="50.6" y="1043.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="53.6" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.25%)</title><rect x="50.6" y="1027.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="53.6" y="1038.0"></text>
</g>
<g>
<title>__GI_epoll_wait (1 samples, 0.25%)</title><rect x="50.6" y="1011.0" width="2.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="53.6" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$261/699001560.shouldBlock (1 samples, 0.25%)</title><rect x="53.5" y="1139.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="56.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.25%)</title><rect x="53.5" y="1123.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="56.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.25%)</title><rect x="53.5" y="1107.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="56.5" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.anyMatch (1 samples, 0.25%)</title><rect x="53.5" y="1091.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="56.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.maybeThrowInterruptException (1 samples, 0.25%)</title><rect x="56.4" y="1139.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="59.4" y="1150.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.25%)</title><rect x="56.4" y="1123.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="59.4" y="1134.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.25%)</title><rect x="56.4" y="1107.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="59.4" y="1118.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.25%)</title><rect x="56.4" y="1091.0" width="2.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="59.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (8 samples, 1.97%)</title><rect x="59.3" y="1171.0" width="23.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="62.3" y="1182.0">o..</text>
</g>
<g>
<title>java/util/ArrayDeque.add (1 samples, 0.25%)</title><rect x="59.3" y="1155.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="62.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (7 samples, 1.72%)</title><rect x="62.2" y="1155.0" width="20.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="65.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (4 samples, 0.98%)</title><rect x="62.2" y="1139.0" width="11.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="65.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 0.98%)</title><rect x="62.2" y="1123.0" width="11.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="65.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.25%)</title><rect x="62.2" y="1107.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="65.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.25%)</title><rect x="62.2" y="1091.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="65.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.25%)</title><rect x="62.2" y="1075.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="65.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (3 samples, 0.74%)</title><rect x="65.1" y="1107.0" width="8.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="68.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (3 samples, 0.74%)</title><rect x="65.1" y="1091.0" width="8.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="68.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (3 samples, 0.74%)</title><rect x="65.1" y="1075.0" width="8.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="68.1" y="1086.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (3 samples, 0.74%)</title><rect x="65.1" y="1059.0" width="8.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="68.1" y="1070.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (2 samples, 0.49%)</title><rect x="68.0" y="1043.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="71.0" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (2 samples, 0.49%)</title><rect x="68.0" y="1027.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="71.0" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (2 samples, 0.49%)</title><rect x="68.0" y="1011.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="71.0" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (2 samples, 0.49%)</title><rect x="68.0" y="995.0" width="5.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="71.0" y="1006.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.25%)</title><rect x="70.9" y="979.0" width="2.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="73.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.25%)</title><rect x="73.8" y="1139.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="76.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.25%)</title><rect x="73.8" y="1123.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="76.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.25%)</title><rect x="73.8" y="1107.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="76.8" y="1118.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.25%)</title><rect x="73.8" y="1091.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="76.8" y="1102.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.25%)</title><rect x="73.8" y="1075.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="76.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.25%)</title><rect x="76.7" y="1139.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="79.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.25%)</title><rect x="76.7" y="1123.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="79.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.25%)</title><rect x="76.7" y="1107.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="79.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.25%)</title><rect x="76.7" y="1091.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="79.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.25%)</title><rect x="76.7" y="1075.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="79.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.25%)</title><rect x="79.6" y="1139.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="82.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.25%)</title><rect x="82.5" y="1171.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="85.5" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.25%)</title><rect x="82.5" y="1155.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="85.5" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.25%)</title><rect x="82.5" y="1139.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="85.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.25%)</title><rect x="82.5" y="1123.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="85.5" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.25%)</title><rect x="82.5" y="1107.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="85.5" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.25%)</title><rect x="82.5" y="1091.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="85.5" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.25%)</title><rect x="82.5" y="1075.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="85.5" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.25%)</title><rect x="82.5" y="1059.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="85.5" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.25%)</title><rect x="82.5" y="1043.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="85.5" y="1054.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.25%)</title><rect x="82.5" y="1027.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="85.5" y="1038.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.25%)</title><rect x="82.5" y="1011.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="85.5" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.25%)</title><rect x="82.5" y="995.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="85.5" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.25%)</title><rect x="82.5" y="979.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="85.5" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.25%)</title><rect x="82.5" y="963.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="85.5" y="974.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.accept (1 samples, 0.25%)</title><rect x="82.5" y="947.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="85.5" y="958.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$183/1090072858.accept (1 samples, 0.25%)</title><rect x="82.5" y="931.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="85.5" y="942.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.25%)</title><rect x="82.5" y="915.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="85.5" y="926.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureCapacityInternal (1 samples, 0.25%)</title><rect x="82.5" y="899.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="85.5" y="910.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureExplicitCapacity (1 samples, 0.25%)</title><rect x="82.5" y="883.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="85.5" y="894.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.25%)</title><rect x="82.5" y="867.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="85.5" y="878.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.25%)</title><rect x="82.5" y="851.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="85.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.25%)</title><rect x="85.4" y="1187.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="88.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.25%)</title><rect x="85.4" y="1171.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="88.4" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.25%)</title><rect x="85.4" y="1155.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="88.4" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.25%)</title><rect x="85.4" y="1139.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="88.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.25%)</title><rect x="85.4" y="1123.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="88.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToStagedReceives (1 samples, 0.25%)</title><rect x="85.4" y="1107.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="88.4" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.25%)</title><rect x="88.3" y="1187.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="91.3" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.25%)</title><rect x="88.3" y="1171.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="91.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.25%)</title><rect x="88.3" y="1155.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="91.3" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.iterator (1 samples, 0.25%)</title><rect x="88.3" y="1139.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="91.3" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.&lt;init&gt; (1 samples, 0.25%)</title><rect x="88.3" y="1123.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="91.3" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.25%)</title><rect x="88.3" y="1107.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="91.3" y="1118.0"></text>
</g>
<g>
<title>java/lang/Thread.run (251 samples, 61.67%)</title><rect x="91.2" y="1251.0" width="727.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="94.2" y="1262.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (251 samples, 61.67%)</title><rect x="91.2" y="1235.0" width="727.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="94.2" y="1246.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (251 samples, 61.67%)</title><rect x="91.2" y="1219.0" width="727.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="94.2" y="1230.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$285/1192677443.run (242 samples, 59.46%)</title><rect x="94.1" y="1203.0" width="701.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="97.1" y="1214.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$285/1192677443.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$69 (242 samples, 59.46%)</title><rect x="94.1" y="1187.0" width="701.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="97.1" y="1198.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$69</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (242 samples, 59.46%)</title><rect x="94.1" y="1171.0" width="701.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="97.1" y="1182.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (236 samples, 57.99%)</title><rect x="94.1" y="1155.0" width="684.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="97.1" y="1166.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>[vdso] (1 samples, 0.25%)</title><rect x="108.6" y="1139.0" width="2.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="111.6" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.25%)</title><rect x="111.5" y="1139.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="114.5" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (49 samples, 12.04%)</title><rect x="114.4" y="1139.0" width="142.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="117.4" y="1150.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$43/1448247698.extract (49 samples, 12.04%)</title><rect x="114.4" y="1123.0" width="142.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="117.4" y="1134.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (49 samples, 12.04%)</title><rect x="114.4" y="1107.0" width="142.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="117.4" y="1118.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (49 samples, 12.04%)</title><rect x="114.4" y="1091.0" width="142.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="117.4" y="1102.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (49 samples, 12.04%)</title><rect x="114.4" y="1075.0" width="142.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="117.4" y="1086.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (49 samples, 12.04%)</title><rect x="114.4" y="1059.0" width="142.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="117.4" y="1070.0">com/fasterxml/jack..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (20 samples, 4.91%)</title><rect x="114.4" y="1043.0" width="58.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="117.4" y="1054.0">com/fa..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.49%)</title><rect x="128.9" y="1027.0" width="5.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="131.9" y="1038.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.49%)</title><rect x="128.9" y="1011.0" width="5.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="131.9" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (3 samples, 0.74%)</title><rect x="134.7" y="1027.0" width="8.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="137.7" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (3 samples, 0.74%)</title><rect x="134.7" y="1011.0" width="8.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="137.7" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (3 samples, 0.74%)</title><rect x="134.7" y="995.0" width="8.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="137.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.74%)</title><rect x="134.7" y="979.0" width="8.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="137.7" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.74%)</title><rect x="134.7" y="963.0" width="8.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="137.7" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.74%)</title><rect x="134.7" y="947.0" width="8.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="137.7" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.74%)</title><rect x="134.7" y="931.0" width="8.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="137.7" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (10 samples, 2.46%)</title><rect x="143.4" y="1027.0" width="29.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="146.4" y="1038.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (4 samples, 0.98%)</title><rect x="160.8" y="1011.0" width="11.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="163.8" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.25%)</title><rect x="160.8" y="995.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="163.8" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.25%)</title><rect x="160.8" y="979.0" width="2.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="163.8" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.49%)</title><rect x="163.7" y="995.0" width="5.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="166.7" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 0.49%)</title><rect x="163.7" y="979.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="166.7" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.25%)</title><rect x="169.5" y="995.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="172.5" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.25%)</title><rect x="169.5" y="979.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="172.5" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.25%)</title><rect x="169.5" y="963.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="172.5" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.25%)</title><rect x="169.5" y="947.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="172.5" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.25%)</title><rect x="169.5" y="931.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="172.5" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (28 samples, 6.88%)</title><rect x="172.4" y="1043.0" width="81.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="175.4" y="1054.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (3 samples, 0.74%)</title><rect x="172.4" y="1027.0" width="8.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="175.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.74%)</title><rect x="172.4" y="1011.0" width="8.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="175.4" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.25%)</title><rect x="181.1" y="1027.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="184.1" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.25%)</title><rect x="181.1" y="1011.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="184.1" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.25%)</title><rect x="181.1" y="995.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="184.1" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.49%)</title><rect x="184.0" y="1027.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="187.0" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.25%)</title><rect x="184.0" y="1011.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="187.0" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.25%)</title><rect x="184.0" y="995.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="187.0" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.25%)</title><rect x="186.9" y="1011.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="189.9" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (22 samples, 5.41%)</title><rect x="189.8" y="1027.0" width="63.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="192.8" y="1038.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.25%)</title><rect x="189.8" y="1011.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="192.8" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (21 samples, 5.16%)</title><rect x="192.7" y="1011.0" width="60.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="195.7" y="1022.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 1.23%)</title><rect x="192.7" y="995.0" width="14.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="195.7" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.25%)</title><rect x="192.7" y="979.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="195.7" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.49%)</title><rect x="195.6" y="979.0" width="5.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="198.6" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.49%)</title><rect x="195.6" y="963.0" width="5.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="198.6" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.49%)</title><rect x="195.6" y="947.0" width="5.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="198.6" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.49%)</title><rect x="201.4" y="979.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="204.4" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (16 samples, 3.93%)</title><rect x="207.1" y="995.0" width="46.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="210.1" y="1006.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (16 samples, 3.93%)</title><rect x="207.1" y="979.0" width="46.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="210.1" y="990.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (16 samples, 3.93%)</title><rect x="207.1" y="963.0" width="46.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="210.1" y="974.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.25%)</title><rect x="210.0" y="947.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="213.0" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.25%)</title><rect x="210.0" y="931.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="213.0" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (3 samples, 0.74%)</title><rect x="212.9" y="947.0" width="8.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="215.9" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.49%)</title><rect x="215.8" y="931.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="218.8" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.49%)</title><rect x="215.8" y="915.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="218.8" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.49%)</title><rect x="215.8" y="899.0" width="5.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="218.8" y="910.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.49%)</title><rect x="215.8" y="883.0" width="5.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="218.8" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (6 samples, 1.47%)</title><rect x="221.6" y="947.0" width="17.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="224.6" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (6 samples, 1.47%)</title><rect x="221.6" y="931.0" width="17.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="224.6" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (6 samples, 1.47%)</title><rect x="221.6" y="915.0" width="17.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="224.6" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (6 samples, 1.47%)</title><rect x="221.6" y="899.0" width="17.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="224.6" y="910.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (6 samples, 1.47%)</title><rect x="221.6" y="883.0" width="17.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="224.6" y="894.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (5 samples, 1.23%)</title><rect x="224.5" y="867.0" width="14.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="227.5" y="878.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (5 samples, 1.23%)</title><rect x="224.5" y="851.0" width="14.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="227.5" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.25%)</title><rect x="239.0" y="947.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="242.0" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.25%)</title><rect x="239.0" y="931.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="242.0" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.25%)</title><rect x="239.0" y="915.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="242.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (4 samples, 0.98%)</title><rect x="241.9" y="947.0" width="11.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="244.9" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.25%)</title><rect x="253.5" y="1043.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="256.5" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.25%)</title><rect x="253.5" y="1027.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="256.5" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.25%)</title><rect x="253.5" y="1011.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="256.5" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.25%)</title><rect x="253.5" y="995.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="256.5" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.25%)</title><rect x="253.5" y="979.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="256.5" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (166 samples, 40.79%)</title><rect x="256.4" y="1139.0" width="481.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="259.4" y="1150.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (32 samples, 7.86%)</title><rect x="256.4" y="1123.0" width="92.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="259.4" y="1134.0">com/linecor..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (30 samples, 7.37%)</title><rect x="262.2" y="1107.0" width="87.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="265.2" y="1118.0">org/slf4j/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (27 samples, 6.63%)</title><rect x="270.9" y="1091.0" width="78.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="273.9" y="1102.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 0.74%)</title><rect x="270.9" y="1075.0" width="8.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="273.9" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 0.74%)</title><rect x="270.9" y="1059.0" width="8.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="273.9" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 0.74%)</title><rect x="270.9" y="1043.0" width="8.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="273.9" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 0.74%)</title><rect x="270.9" y="1027.0" width="8.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="273.9" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (24 samples, 5.90%)</title><rect x="279.6" y="1075.0" width="69.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="282.6" y="1086.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.remove (22 samples, 5.41%)</title><rect x="285.4" y="1059.0" width="63.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="288.4" y="1070.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (10 samples, 2.46%)</title><rect x="320.2" y="1043.0" width="29.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="323.2" y="1054.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.74%)</title><rect x="349.2" y="1123.0" width="8.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="352.2" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.74%)</title><rect x="349.2" y="1107.0" width="8.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="352.2" y="1118.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.74%)</title><rect x="349.2" y="1091.0" width="8.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="352.2" y="1102.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.49%)</title><rect x="352.1" y="1075.0" width="5.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="355.1" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.49%)</title><rect x="352.1" y="1059.0" width="5.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="355.1" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.49%)</title><rect x="352.1" y="1043.0" width="5.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="355.1" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.25%)</title><rect x="355.0" y="1027.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="358.0" y="1038.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.25%)</title><rect x="355.0" y="1011.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="358.0" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.25%)</title><rect x="355.0" y="995.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="358.0" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (29 samples, 7.13%)</title><rect x="357.9" y="1123.0" width="84.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="360.9" y="1134.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (29 samples, 7.13%)</title><rect x="357.9" y="1107.0" width="84.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="360.9" y="1118.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (16 samples, 3.93%)</title><rect x="360.8" y="1091.0" width="46.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="363.8" y="1102.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (8 samples, 1.97%)</title><rect x="375.3" y="1075.0" width="23.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="378.3" y="1086.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (7 samples, 1.72%)</title><rect x="378.2" y="1059.0" width="20.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="381.2" y="1070.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 0.74%)</title><rect x="378.2" y="1043.0" width="8.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="381.2" y="1054.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (3 samples, 0.74%)</title><rect x="378.2" y="1027.0" width="8.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="381.2" y="1038.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.74%)</title><rect x="378.2" y="1011.0" width="8.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="381.2" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.74%)</title><rect x="378.2" y="995.0" width="8.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="381.2" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.25%)</title><rect x="378.2" y="979.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="381.2" y="990.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.25%)</title><rect x="378.2" y="963.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="381.2" y="974.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.25%)</title><rect x="378.2" y="947.0" width="2.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="381.2" y="958.0"></text>
</g>
<g>
<title>CodeBlob::oop_map_for_return_address(unsigned char*) (1 samples, 0.25%)</title><rect x="378.2" y="931.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="381.2" y="942.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.49%)</title><rect x="381.1" y="979.0" width="5.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="384.1" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.25%)</title><rect x="384.0" y="963.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="387.0" y="974.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.74%)</title><rect x="386.9" y="1043.0" width="8.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="389.9" y="1054.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.25%)</title><rect x="395.6" y="1043.0" width="2.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="398.6" y="1054.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.74%)</title><rect x="398.5" y="1075.0" width="8.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="401.5" y="1086.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (12 samples, 2.95%)</title><rect x="407.2" y="1091.0" width="34.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="410.2" y="1102.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (12 samples, 2.95%)</title><rect x="407.2" y="1075.0" width="34.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="410.2" y="1086.0">ch..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.49%)</title><rect x="407.2" y="1059.0" width="5.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="410.2" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.49%)</title><rect x="407.2" y="1043.0" width="5.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="410.2" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.49%)</title><rect x="407.2" y="1027.0" width="5.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="410.2" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.49%)</title><rect x="407.2" y="1011.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="410.2" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.49%)</title><rect x="407.2" y="995.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="410.2" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (10 samples, 2.46%)</title><rect x="413.0" y="1059.0" width="29.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="416.0" y="1070.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (7 samples, 1.72%)</title><rect x="421.7" y="1043.0" width="20.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="424.7" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 1.23%)</title><rect x="427.5" y="1027.0" width="14.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="430.5" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (3 samples, 0.74%)</title><rect x="430.4" y="1011.0" width="8.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="433.4" y="1022.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.25%)</title><rect x="439.1" y="1011.0" width="2.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="442.1" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (93 samples, 22.85%)</title><rect x="442.0" y="1123.0" width="269.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="445.0" y="1134.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (93 samples, 22.85%)</title><rect x="442.0" y="1107.0" width="269.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="445.0" y="1118.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$207/1526101313.process (82 samples, 20.15%)</title><rect x="447.8" y="1091.0" width="237.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="450.8" y="1102.0">com/linecorp/decaton/benchmark/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (82 samples, 20.15%)</title><rect x="447.8" y="1075.0" width="237.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="450.8" y="1086.0">com/linecorp/decaton/benchmark/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (80 samples, 19.66%)</title><rect x="447.8" y="1059.0" width="231.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="450.8" y="1070.0">com/linecorp/decaton/benchmark/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (77 samples, 18.92%)</title><rect x="456.5" y="1043.0" width="223.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="459.5" y="1054.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>java/lang/Thread.sleep (76 samples, 18.67%)</title><rect x="459.4" y="1027.0" width="220.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="462.4" y="1038.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (68 samples, 16.71%)</title><rect x="479.7" y="1011.0" width="197.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="482.7" y="1022.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.49%)</title><rect x="500.0" y="995.0" width="5.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="503.0" y="1006.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.49%)</title><rect x="505.8" y="995.0" width="5.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="508.8" y="1006.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.49%)</title><rect x="505.8" y="979.0" width="5.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="508.8" y="990.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (57 samples, 14.00%)</title><rect x="511.6" y="995.0" width="165.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="514.6" y="1006.0">os::sleep(Thread*, lo..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.49%)</title><rect x="558.0" y="979.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="561.0" y="990.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.25%)</title><rect x="563.8" y="979.0" width="2.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="566.8" y="990.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.25%)</title><rect x="566.7" y="979.0" width="2.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="569.7" y="990.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.25%)</title><rect x="566.7" y="963.0" width="2.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="569.7" y="974.0"></text>
</g>
<g>
<title>__lll_unlock_wake (6 samples, 1.47%)</title><rect x="569.6" y="979.0" width="17.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="572.6" y="990.0"></text>
</g>
<g>
<title>__pthread_cond_init (1 samples, 0.25%)</title><rect x="587.0" y="979.0" width="2.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="590.0" y="990.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (14 samples, 3.44%)</title><rect x="589.9" y="979.0" width="40.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="592.9" y="990.0">__p..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.25%)</title><rect x="630.4" y="979.0" width="2.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="633.4" y="990.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (13 samples, 3.19%)</title><rect x="633.3" y="979.0" width="37.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="636.3" y="990.0">os:..</text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.49%)</title><rect x="671.0" y="979.0" width="5.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="674.0" y="990.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.25%)</title><rect x="676.8" y="1011.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="679.8" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.49%)</title><rect x="679.7" y="1059.0" width="5.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="682.7" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.25%)</title><rect x="682.6" y="1043.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="685.6" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.25%)</title><rect x="682.6" y="1027.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="685.6" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.25%)</title><rect x="682.6" y="1011.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="685.6" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$293/191179384.complete (1 samples, 0.25%)</title><rect x="685.5" y="1091.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="688.5" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$72 (1 samples, 0.25%)</title><rect x="685.5" y="1075.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="688.5" y="1086.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.25%)</title><rect x="685.5" y="1059.0" width="2.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="688.5" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.49%)</title><rect x="688.4" y="1091.0" width="5.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="691.4" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.49%)</title><rect x="688.4" y="1075.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="691.4" y="1086.0"></text>
</g>
<g>
<title>java/util/ArrayList.isEmpty (2 samples, 0.49%)</title><rect x="688.4" y="1059.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="691.4" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.25%)</title><rect x="694.2" y="1091.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="697.2" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (5 samples, 1.23%)</title><rect x="697.1" y="1091.0" width="14.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="700.1" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (9 samples, 2.21%)</title><rect x="711.6" y="1123.0" width="26.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="714.6" y="1134.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.49%)</title><rect x="729.0" y="1107.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="732.0" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.49%)</title><rect x="729.0" y="1091.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="732.0" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$296/829880695.accept (2 samples, 0.49%)</title><rect x="729.0" y="1075.0" width="5.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="732.0" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$64 (2 samples, 0.49%)</title><rect x="729.0" y="1059.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="732.0" y="1070.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (2 samples, 0.49%)</title><rect x="729.0" y="1043.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="732.0" y="1054.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (2 samples, 0.49%)</title><rect x="729.0" y="1027.0" width="5.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="732.0" y="1038.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.25%)</title><rect x="734.8" y="1107.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="737.8" y="1118.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/2081191879.linkToTargetMethod (1 samples, 0.25%)</title><rect x="737.7" y="1139.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="740.7" y="1150.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/917819120.invokeStatic_LL_L (1 samples, 0.25%)</title><rect x="737.7" y="1123.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="740.7" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$298/1953788221.get$Lambda (1 samples, 0.25%)</title><rect x="737.7" y="1107.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="740.7" y="1118.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.25%)</title><rect x="737.7" y="1091.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="740.7" y="1102.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.25%)</title><rect x="737.7" y="1075.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="740.7" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.25%)</title><rect x="737.7" y="1059.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="740.7" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 2.95%)</title><rect x="740.6" y="1139.0" width="34.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="743.6" y="1150.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (12 samples, 2.95%)</title><rect x="740.6" y="1123.0" width="34.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="743.6" y="1134.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (11 samples, 2.70%)</title><rect x="743.5" y="1107.0" width="31.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="746.5" y="1118.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$298/1953788221.accept (11 samples, 2.70%)</title><rect x="743.5" y="1091.0" width="31.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="746.5" y="1102.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$63 (11 samples, 2.70%)</title><rect x="743.5" y="1075.0" width="31.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="746.5" y="1086.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$283/1097638499.complete (11 samples, 2.70%)</title><rect x="743.5" y="1059.0" width="31.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="746.5" y="1070.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$73 (11 samples, 2.70%)</title><rect x="743.5" y="1043.0" width="31.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="746.5" y="1054.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$282/675454827.complete (11 samples, 2.70%)</title><rect x="743.5" y="1027.0" width="31.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="746.5" y="1038.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$49 (11 samples, 2.70%)</title><rect x="743.5" y="1011.0" width="31.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="746.5" y="1022.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (11 samples, 2.70%)</title><rect x="743.5" y="995.0" width="31.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="746.5" y="1006.0">co..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (11 samples, 2.70%)</title><rect x="743.5" y="979.0" width="31.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="746.5" y="990.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (11 samples, 2.70%)</title><rect x="743.5" y="963.0" width="31.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="746.5" y="974.0">ch..</text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.25%)</title><rect x="775.4" y="1139.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="778.4" y="1150.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.25%)</title><rect x="775.4" y="1123.0" width="2.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="778.4" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (6 samples, 1.47%)</title><rect x="778.3" y="1155.0" width="17.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="781.3" y="1166.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.25%)</title><rect x="792.8" y="1139.0" width="2.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="795.8" y="1150.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.25%)</title><rect x="792.8" y="1123.0" width="2.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="795.8" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (8 samples, 1.97%)</title><rect x="795.7" y="1203.0" width="23.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="798.7" y="1214.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (7 samples, 1.72%)</title><rect x="798.6" y="1187.0" width="20.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="801.6" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (4 samples, 0.98%)</title><rect x="798.6" y="1171.0" width="11.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="801.6" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (4 samples, 0.98%)</title><rect x="798.6" y="1155.0" width="11.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="801.6" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.98%)</title><rect x="798.6" y="1139.0" width="11.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="801.6" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.98%)</title><rect x="798.6" y="1123.0" width="11.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="801.6" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.98%)</title><rect x="798.6" y="1107.0" width="11.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="801.6" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.74%)</title><rect x="810.2" y="1171.0" width="8.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="813.2" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.74%)</title><rect x="810.2" y="1155.0" width="8.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="813.2" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.74%)</title><rect x="810.2" y="1139.0" width="8.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="813.2" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.74%)</title><rect x="810.2" y="1123.0" width="8.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="813.2" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.25%)</title><rect x="816.0" y="1107.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="819.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.49%)</title><rect x="818.9" y="1251.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="821.9" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.25%)</title><rect x="818.9" y="1235.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="821.9" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.25%)</title><rect x="818.9" y="1219.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="821.9" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.25%)</title><rect x="818.9" y="1203.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="821.9" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (1 samples, 0.25%)</title><rect x="818.9" y="1187.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="821.9" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (1 samples, 0.25%)</title><rect x="818.9" y="1171.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="821.9" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.25%)</title><rect x="818.9" y="1155.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="821.9" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.25%)</title><rect x="818.9" y="1139.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="821.9" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.25%)</title><rect x="821.8" y="1235.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="824.8" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.25%)</title><rect x="821.8" y="1219.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="824.8" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.failExpiredRequests (1 samples, 0.25%)</title><rect x="821.8" y="1203.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="824.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.access$300 (1 samples, 0.25%)</title><rect x="821.8" y="1187.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="824.8" y="1198.0"></text>
</g>
<g>
<title>start_thread (126 samples, 30.96%)</title><rect x="824.7" y="1251.0" width="365.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="827.7" y="1262.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (126 samples, 30.96%)</title><rect x="824.7" y="1235.0" width="365.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="827.7" y="1246.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (14 samples, 3.44%)</title><rect x="824.7" y="1219.0" width="40.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="827.7" y="1230.0">Gan..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (2 samples, 0.49%)</title><rect x="824.7" y="1203.0" width="5.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="827.7" y="1214.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.49%)</title><rect x="824.7" y="1187.0" width="5.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="827.7" y="1198.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.25%)</title><rect x="824.7" y="1171.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="827.7" y="1182.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.25%)</title><rect x="827.6" y="1171.0" width="2.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="830.6" y="1182.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (11 samples, 2.70%)</title><rect x="830.5" y="1203.0" width="31.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="833.5" y="1214.0">G1..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (10 samples, 2.46%)</title><rect x="830.5" y="1187.0" width="29.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="833.5" y="1198.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (8 samples, 1.97%)</title><rect x="833.4" y="1171.0" width="23.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="836.4" y="1182.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (4 samples, 0.98%)</title><rect x="839.2" y="1155.0" width="11.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="842.2" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.25%)</title><rect x="847.9" y="1139.0" width="2.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="850.9" y="1150.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (2 samples, 0.49%)</title><rect x="850.8" y="1155.0" width="5.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="853.8" y="1166.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.25%)</title><rect x="856.6" y="1171.0" width="2.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="859.6" y="1182.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.25%)</title><rect x="859.5" y="1187.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="862.5" y="1198.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.25%)</title><rect x="859.5" y="1171.0" width="2.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="862.5" y="1182.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.25%)</title><rect x="859.5" y="1155.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="862.5" y="1166.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.25%)</title><rect x="862.4" y="1203.0" width="2.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="865.4" y="1214.0"></text>
</g>
<g>
<title>JavaThread::run() (111 samples, 27.27%)</title><rect x="865.3" y="1219.0" width="321.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="868.3" y="1230.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (111 samples, 27.27%)</title><rect x="865.3" y="1203.0" width="321.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="868.3" y="1214.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (111 samples, 27.27%)</title><rect x="865.3" y="1187.0" width="321.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="868.3" y="1198.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (110 samples, 27.03%)</title><rect x="865.3" y="1171.0" width="318.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="868.3" y="1182.0">CompileBroker::invoke_compiler_on_method(Co..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (107 samples, 26.29%)</title><rect x="865.3" y="1155.0" width="310.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="868.3" y="1166.0">C2Compiler::compile_method(ciEnv*, ciMetho..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (107 samples, 26.29%)</title><rect x="865.3" y="1139.0" width="310.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="868.3" y="1150.0">Compile::Compile(ciEnv*, C2Compiler*, ciMe..</text>
</g>
<g>
<title>Compile::Code_Gen() (39 samples, 9.58%)</title><rect x="865.3" y="1123.0" width="113.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="868.3" y="1134.0">Compile::Code_..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.49%)</title><rect x="865.3" y="1107.0" width="5.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="868.3" y="1118.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.49%)</title><rect x="865.3" y="1091.0" width="5.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="868.3" y="1102.0"></text>
</g>
<g>
<title>Block::code_alignment() (1 samples, 0.25%)</title><rect x="865.3" y="1075.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="868.3" y="1086.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (1 samples, 0.25%)</title><rect x="868.2" y="1075.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="871.2" y="1086.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.25%)</title><rect x="868.2" y="1059.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="871.2" y="1070.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.25%)</title><rect x="868.2" y="1043.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="871.2" y="1054.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.25%)</title><rect x="868.2" y="1027.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="871.2" y="1038.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.25%)</title><rect x="871.1" y="1107.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="874.1" y="1118.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.25%)</title><rect x="871.1" y="1091.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="874.1" y="1102.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.25%)</title><rect x="871.1" y="1075.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="874.1" y="1086.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.25%)</title><rect x="871.1" y="1059.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="874.1" y="1070.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 1.47%)</title><rect x="874.0" y="1107.0" width="17.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="877.0" y="1118.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.25%)</title><rect x="874.0" y="1091.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="877.0" y="1102.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 1.23%)</title><rect x="876.9" y="1091.0" width="14.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="879.9" y="1102.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.49%)</title><rect x="879.8" y="1075.0" width="5.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="882.8" y="1086.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.25%)</title><rect x="885.6" y="1075.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="888.6" y="1086.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.25%)</title><rect x="885.6" y="1059.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="888.6" y="1070.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int, Compile*) (1 samples, 0.25%)</title><rect x="885.6" y="1043.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="888.6" y="1054.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.25%)</title><rect x="888.5" y="1075.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="891.5" y="1086.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.25%)</title><rect x="888.5" y="1059.0" width="2.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="891.5" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.49%)</title><rect x="891.4" y="1107.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="894.4" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.49%)</title><rect x="891.4" y="1091.0" width="5.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="894.4" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.25%)</title><rect x="891.4" y="1075.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="894.4" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.25%)</title><rect x="894.3" y="1075.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="897.3" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int) (1 samples, 0.25%)</title><rect x="894.3" y="1059.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="897.3" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (28 samples, 6.88%)</title><rect x="897.2" y="1107.0" width="81.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="900.2" y="1118.0">PhaseChai..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.25%)</title><rect x="897.2" y="1091.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="900.2" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.49%)</title><rect x="900.1" y="1091.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="903.1" y="1102.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.25%)</title><rect x="903.0" y="1075.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="906.0" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.25%)</title><rect x="903.0" y="1059.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="906.0" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.25%)</title><rect x="905.9" y="1091.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="908.9" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 0.98%)</title><rect x="908.8" y="1091.0" width="11.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="911.8" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 1.23%)</title><rect x="920.4" y="1091.0" width="14.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="923.4" y="1102.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.25%)</title><rect x="926.2" y="1075.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="929.2" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.25%)</title><rect x="929.1" y="1075.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="932.1" y="1086.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.25%)</title><rect x="932.0" y="1075.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="935.0" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.49%)</title><rect x="934.9" y="1091.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="937.9" y="1102.0"></text>
</g>
<g>
<title>rRegPOper::type() const (1 samples, 0.25%)</title><rect x="937.8" y="1075.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="940.8" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.25%)</title><rect x="940.7" y="1091.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="943.7" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.74%)</title><rect x="943.6" y="1091.0" width="8.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="946.6" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.25%)</title><rect x="949.4" y="1075.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="952.4" y="1086.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.49%)</title><rect x="952.3" y="1091.0" width="5.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="955.3" y="1102.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.49%)</title><rect x="952.3" y="1075.0" width="5.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="955.3" y="1086.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 0.49%)</title><rect x="952.3" y="1059.0" width="5.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="955.3" y="1070.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.25%)</title><rect x="952.3" y="1043.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="955.3" y="1054.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.25%)</title><rect x="955.2" y="1043.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="958.2" y="1054.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.25%)</title><rect x="958.1" y="1091.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="961.1" y="1102.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (6 samples, 1.47%)</title><rect x="961.0" y="1091.0" width="17.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="964.0" y="1102.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (4 samples, 0.98%)</title><rect x="966.8" y="1075.0" width="11.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="969.8" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.49%)</title><rect x="972.6" y="1059.0" width="5.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="975.6" y="1070.0"></text>
</g>
<g>
<title>Compile::Optimize() (60 samples, 14.74%)</title><rect x="978.4" y="1123.0" width="173.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="981.4" y="1134.0">Compile::Optimize()</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (3 samples, 0.74%)</title><rect x="978.4" y="1107.0" width="8.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="981.4" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.49%)</title><rect x="978.4" y="1091.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="981.4" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.25%)</title><rect x="981.3" y="1075.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="984.3" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.25%)</title><rect x="981.3" y="1059.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="984.3" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.25%)</title><rect x="981.3" y="1043.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="984.3" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.25%)</title><rect x="981.3" y="1027.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="984.3" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.25%)</title><rect x="981.3" y="1011.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="984.3" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.25%)</title><rect x="981.3" y="995.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="984.3" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.25%)</title><rect x="981.3" y="979.0" width="2.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="984.3" y="990.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*) (1 samples, 0.25%)</title><rect x="981.3" y="963.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="984.3" y="974.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.25%)</title><rect x="984.2" y="1091.0" width="2.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="987.2" y="1102.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.25%)</title><rect x="987.1" y="1107.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="990.1" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (46 samples, 11.30%)</title><rect x="990.0" y="1107.0" width="133.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="993.0" y="1118.0">PhaseIdealLoop::b..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.49%)</title><rect x="990.0" y="1091.0" width="5.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="993.0" y="1102.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.49%)</title><rect x="990.0" y="1075.0" width="5.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="993.0" y="1086.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.49%)</title><rect x="990.0" y="1059.0" width="5.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="993.0" y="1070.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.49%)</title><rect x="990.0" y="1043.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="993.0" y="1054.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.49%)</title><rect x="990.0" y="1027.0" width="5.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="993.0" y="1038.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.49%)</title><rect x="990.0" y="1011.0" width="5.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="993.0" y="1022.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.25%)</title><rect x="990.0" y="995.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="993.0" y="1006.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.25%)</title><rect x="990.0" y="979.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="993.0" y="990.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.25%)</title><rect x="990.0" y="963.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="993.0" y="974.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.25%)</title><rect x="990.0" y="947.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="993.0" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.25%)</title><rect x="990.0" y="931.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="993.0" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.25%)</title><rect x="990.0" y="915.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="993.0" y="926.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.25%)</title><rect x="990.0" y="899.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="993.0" y="910.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.25%)</title><rect x="992.9" y="995.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="995.9" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.25%)</title><rect x="992.9" y="979.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="995.9" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::recompute_dom_depth() (1 samples, 0.25%)</title><rect x="992.9" y="963.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="995.9" y="974.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.25%)</title><rect x="995.7" y="1091.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="998.7" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.25%)</title><rect x="995.7" y="1075.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="998.7" y="1086.0"></text>
</g>
<g>
<title>Invariance::is_invariant(Node*) (1 samples, 0.25%)</title><rect x="995.7" y="1059.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="998.7" y="1070.0"></text>
</g>
<g>
<title>IfTrueNode::Opcode() const (1 samples, 0.25%)</title><rect x="998.6" y="1091.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1001.6" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (5 samples, 1.23%)</title><rect x="1001.5" y="1091.0" width="14.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1004.5" y="1102.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.25%)</title><rect x="1013.1" y="1075.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1016.1" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.74%)</title><rect x="1016.0" y="1091.0" width="8.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1019.0" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (32 samples, 7.86%)</title><rect x="1024.7" y="1091.0" width="92.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1027.7" y="1102.0">PhaseIdealL..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (31 samples, 7.62%)</title><rect x="1027.6" y="1075.0" width="89.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1030.6" y="1086.0">PhaseIdeal..</text>
</g>
<g>
<title>Node::unique_ctrl_out() (1 samples, 0.25%)</title><rect x="1027.6" y="1059.0" width="2.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1030.6" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.25%)</title><rect x="1030.5" y="1059.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1033.5" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (29 samples, 7.13%)</title><rect x="1033.4" y="1059.0" width="84.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1036.4" y="1070.0">PhaseIdeal..</text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.25%)</title><rect x="1100.1" y="1043.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1103.1" y="1054.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.25%)</title><rect x="1100.1" y="1027.0" width="2.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1103.1" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.25%)</title><rect x="1103.0" y="1043.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1106.0" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.25%)</title><rect x="1103.0" y="1027.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1106.0" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (4 samples, 0.98%)</title><rect x="1105.9" y="1043.0" width="11.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1108.9" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.25%)</title><rect x="1117.5" y="1091.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1120.5" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.25%)</title><rect x="1120.4" y="1091.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1123.4" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.25%)</title><rect x="1120.4" y="1075.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1123.4" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.25%)</title><rect x="1120.4" y="1059.0" width="2.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1123.4" y="1070.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.25%)</title><rect x="1120.4" y="1043.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1123.4" y="1054.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.25%)</title><rect x="1120.4" y="1027.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1123.4" y="1038.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.25%)</title><rect x="1120.4" y="1011.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1123.4" y="1022.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.25%)</title><rect x="1120.4" y="995.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1123.4" y="1006.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.25%)</title><rect x="1120.4" y="979.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1123.4" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (8 samples, 1.97%)</title><rect x="1123.3" y="1107.0" width="23.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1126.3" y="1118.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (8 samples, 1.97%)</title><rect x="1123.3" y="1091.0" width="23.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1126.3" y="1102.0">P..</text>
</g>
<g>
<title>DecodeNNode::Opcode() const (1 samples, 0.25%)</title><rect x="1123.3" y="1075.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1126.3" y="1086.0"></text>
</g>
<g>
<title>MultiNode::hash() const (1 samples, 0.25%)</title><rect x="1126.2" y="1075.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1129.2" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.49%)</title><rect x="1129.1" y="1075.0" width="5.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1132.1" y="1086.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.25%)</title><rect x="1134.9" y="1075.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1137.9" y="1086.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.25%)</title><rect x="1134.9" y="1059.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.9" y="1070.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.25%)</title><rect x="1137.8" y="1075.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1140.8" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.25%)</title><rect x="1137.8" y="1059.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1140.8" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.25%)</title><rect x="1137.8" y="1043.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1140.8" y="1054.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.25%)</title><rect x="1137.8" y="1027.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1140.8" y="1038.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.25%)</title><rect x="1140.7" y="1075.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1143.7" y="1086.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.25%)</title><rect x="1140.7" y="1059.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1143.7" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.25%)</title><rect x="1140.7" y="1043.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1143.7" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.25%)</title><rect x="1140.7" y="1027.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1143.7" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.25%)</title><rect x="1140.7" y="1011.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.7" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.25%)</title><rect x="1140.7" y="995.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1143.7" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.25%)</title><rect x="1140.7" y="979.0" width="2.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1143.7" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.25%)</title><rect x="1140.7" y="963.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1143.7" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.25%)</title><rect x="1140.7" y="947.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1143.7" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.25%)</title><rect x="1140.7" y="931.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1143.7" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.25%)</title><rect x="1140.7" y="915.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1143.7" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.25%)</title><rect x="1140.7" y="899.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1143.7" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.25%)</title><rect x="1140.7" y="883.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1143.7" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.25%)</title><rect x="1140.7" y="867.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1143.7" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.25%)</title><rect x="1140.7" y="851.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1143.7" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.25%)</title><rect x="1140.7" y="835.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1143.7" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.25%)</title><rect x="1140.7" y="819.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1143.7" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.25%)</title><rect x="1140.7" y="803.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1143.7" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.25%)</title><rect x="1140.7" y="787.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1143.7" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.25%)</title><rect x="1140.7" y="771.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1143.7" y="782.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.25%)</title><rect x="1140.7" y="755.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1143.7" y="766.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.25%)</title><rect x="1140.7" y="739.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1143.7" y="750.0"></text>
</g>
<g>
<title>StoreNode::Identity(PhaseTransform*) (1 samples, 0.25%)</title><rect x="1143.6" y="1075.0" width="2.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1146.6" y="1086.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.25%)</title><rect x="1143.6" y="1059.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1146.6" y="1070.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.25%)</title><rect x="1143.6" y="1043.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1146.6" y="1054.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.25%)</title><rect x="1143.6" y="1027.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1146.6" y="1038.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.25%)</title><rect x="1143.6" y="1011.0" width="2.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1146.6" y="1022.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.25%)</title><rect x="1146.5" y="1107.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1149.5" y="1118.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.25%)</title><rect x="1146.5" y="1091.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1149.5" y="1102.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.25%)</title><rect x="1146.5" y="1075.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1149.5" y="1086.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.25%)</title><rect x="1146.5" y="1059.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1149.5" y="1070.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.25%)</title><rect x="1146.5" y="1043.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1149.5" y="1054.0"></text>
</g>
<g>
<title>scan_mem_chain(Node*, int, int, Node*, Node*, PhaseGVN*) (1 samples, 0.25%)</title><rect x="1146.5" y="1027.0" width="2.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1149.5" y="1038.0"></text>
</g>
<g>
<title>MergeMemNode::memory_at(unsigned int) const (1 samples, 0.25%)</title><rect x="1146.5" y="1011.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1149.5" y="1022.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.25%)</title><rect x="1149.4" y="1107.0" width="2.9" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1152.4" y="1118.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 1.47%)</title><rect x="1152.3" y="1123.0" width="17.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.3" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 1.47%)</title><rect x="1152.3" y="1107.0" width="17.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1155.3" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 1.47%)</title><rect x="1152.3" y="1091.0" width="17.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.3" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 1.47%)</title><rect x="1152.3" y="1075.0" width="17.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.3" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 1.47%)</title><rect x="1152.3" y="1059.0" width="17.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.3" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 1.47%)</title><rect x="1152.3" y="1043.0" width="17.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.3" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 1.47%)</title><rect x="1152.3" y="1027.0" width="17.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.3" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 1.47%)</title><rect x="1152.3" y="1011.0" width="17.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.3" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 1.47%)</title><rect x="1152.3" y="995.0" width="17.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.3" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 1.47%)</title><rect x="1152.3" y="979.0" width="17.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1155.3" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 1.47%)</title><rect x="1152.3" y="963.0" width="17.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.3" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 1.47%)</title><rect x="1152.3" y="947.0" width="17.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.3" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 1.47%)</title><rect x="1152.3" y="931.0" width="17.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1155.3" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 1.47%)</title><rect x="1152.3" y="915.0" width="17.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.3" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 1.47%)</title><rect x="1152.3" y="899.0" width="17.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.3" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 1.47%)</title><rect x="1152.3" y="883.0" width="17.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.3" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 1.47%)</title><rect x="1152.3" y="867.0" width="17.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1155.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 1.47%)</title><rect x="1152.3" y="851.0" width="17.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.3" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.23%)</title><rect x="1152.3" y="835.0" width="14.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.3" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.23%)</title><rect x="1152.3" y="819.0" width="14.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1155.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.23%)</title><rect x="1152.3" y="803.0" width="14.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.3" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.23%)</title><rect x="1152.3" y="787.0" width="14.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1155.3" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.23%)</title><rect x="1152.3" y="771.0" width="14.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.98%)</title><rect x="1152.3" y="755.0" width="11.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.3" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.98%)</title><rect x="1152.3" y="739.0" width="11.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1155.3" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.98%)</title><rect x="1152.3" y="723.0" width="11.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.98%)</title><rect x="1152.3" y="707.0" width="11.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.98%)</title><rect x="1152.3" y="691.0" width="11.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.98%)</title><rect x="1152.3" y="675.0" width="11.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.98%)</title><rect x="1152.3" y="659.0" width="11.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1155.3" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.74%)</title><rect x="1152.3" y="643.0" width="8.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.3" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.74%)</title><rect x="1152.3" y="627.0" width="8.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.74%)</title><rect x="1152.3" y="611.0" width="8.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.74%)</title><rect x="1152.3" y="595.0" width="8.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.74%)</title><rect x="1152.3" y="579.0" width="8.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.74%)</title><rect x="1152.3" y="563.0" width="8.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1155.3" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.49%)</title><rect x="1152.3" y="547.0" width="5.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1155.3" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.49%)</title><rect x="1152.3" y="531.0" width="5.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1155.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.49%)</title><rect x="1152.3" y="515.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.49%)</title><rect x="1152.3" y="499.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.49%)</title><rect x="1152.3" y="483.0" width="5.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.49%)</title><rect x="1152.3" y="467.0" width="5.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.3" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.49%)</title><rect x="1152.3" y="451.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.3" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.49%)</title><rect x="1152.3" y="435.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.49%)</title><rect x="1152.3" y="419.0" width="5.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.49%)</title><rect x="1152.3" y="403.0" width="5.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.49%)</title><rect x="1152.3" y="387.0" width="5.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.25%)</title><rect x="1152.3" y="371.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1155.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.25%)</title><rect x="1152.3" y="355.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.3" y="366.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.25%)</title><rect x="1152.3" y="339.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.3" y="350.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.25%)</title><rect x="1152.3" y="323.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.3" y="334.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.25%)</title><rect x="1155.2" y="371.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.2" y="382.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1158.1" y="547.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1161.1" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1158.1" y="531.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.1" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.25%)</title><rect x="1158.1" y="515.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1161.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.25%)</title><rect x="1158.1" y="499.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.25%)</title><rect x="1158.1" y="483.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.25%)</title><rect x="1158.1" y="467.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.25%)</title><rect x="1158.1" y="451.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.1" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1158.1" y="435.0" width="2.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1161.1" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.25%)</title><rect x="1158.1" y="419.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.25%)</title><rect x="1158.1" y="403.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.25%)</title><rect x="1158.1" y="387.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.25%)</title><rect x="1158.1" y="371.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.25%)</title><rect x="1158.1" y="355.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.1" y="366.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1158.1" y="339.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.1" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1158.1" y="323.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.1" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.25%)</title><rect x="1158.1" y="307.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.25%)</title><rect x="1158.1" y="291.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.25%)</title><rect x="1158.1" y="275.0" width="2.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1161.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.25%)</title><rect x="1158.1" y="259.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.25%)</title><rect x="1158.1" y="243.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.1" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1158.1" y="227.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.1" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.25%)</title><rect x="1158.1" y="211.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.1" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.25%)</title><rect x="1158.1" y="195.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.1" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.25%)</title><rect x="1158.1" y="179.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1161.1" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.25%)</title><rect x="1158.1" y="163.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.1" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.25%)</title><rect x="1158.1" y="147.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.1" y="158.0"></text>
</g>
<g>
<title>VirtualCallGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1158.1" y="131.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1161.1" y="142.0"></text>
</g>
<g>
<title>GraphKit::set_edges_for_java_call(CallJavaNode*, bool, bool) (1 samples, 0.25%)</title><rect x="1158.1" y="115.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.1" y="126.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.25%)</title><rect x="1158.1" y="99.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1161.1" y="110.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1161.0" y="643.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.0" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1161.0" y="627.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.0" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.25%)</title><rect x="1161.0" y="611.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.25%)</title><rect x="1161.0" y="595.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.25%)</title><rect x="1161.0" y="579.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.25%)</title><rect x="1161.0" y="563.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.25%)</title><rect x="1161.0" y="547.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.0" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1161.0" y="531.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.0" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.25%)</title><rect x="1161.0" y="515.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.25%)</title><rect x="1161.0" y="499.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.25%)</title><rect x="1161.0" y="483.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.25%)</title><rect x="1161.0" y="467.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.25%)</title><rect x="1161.0" y="451.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.0" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1161.0" y="435.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.0" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.25%)</title><rect x="1161.0" y="419.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.25%)</title><rect x="1161.0" y="403.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.25%)</title><rect x="1161.0" y="387.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.25%)</title><rect x="1161.0" y="371.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.25%)</title><rect x="1161.0" y="355.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.0" y="366.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1161.0" y="339.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.0" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1161.0" y="323.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.0" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.25%)</title><rect x="1161.0" y="307.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.25%)</title><rect x="1161.0" y="291.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.25%)</title><rect x="1161.0" y="275.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.0" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.25%)</title><rect x="1161.0" y="259.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.0" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.25%)</title><rect x="1161.0" y="243.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.0" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1161.0" y="227.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.0" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.25%)</title><rect x="1161.0" y="211.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.0" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.25%)</title><rect x="1161.0" y="195.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.0" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.25%)</title><rect x="1161.0" y="179.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.0" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.25%)</title><rect x="1161.0" y="163.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.0" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.25%)</title><rect x="1161.0" y="147.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.0" y="158.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.25%)</title><rect x="1161.0" y="131.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.0" y="142.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.25%)</title><rect x="1161.0" y="115.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.0" y="126.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.25%)</title><rect x="1161.0" y="99.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.0" y="110.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.25%)</title><rect x="1161.0" y="83.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.0" y="94.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.25%)</title><rect x="1161.0" y="67.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.0" y="78.0"></text>
</g>
<g>
<title>ciTypeFlow::get_block_for(int, ciTypeFlow::JsrSet*, ciTypeFlow::CreateOption) (1 samples, 0.25%)</title><rect x="1161.0" y="51.0" width="2.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.0" y="62.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::Block(ciTypeFlow*, ciBlock*, ciTypeFlow::JsrSet*) (1 samples, 0.25%)</title><rect x="1161.0" y="35.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.0" y="46.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.25%)</title><rect x="1163.9" y="755.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.9" y="766.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.25%)</title><rect x="1163.9" y="739.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.9" y="750.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.25%)</title><rect x="1163.9" y="723.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.9" y="734.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_output_for_runtime_call(Node*, Node*, TypePtr const*) (1 samples, 0.25%)</title><rect x="1163.9" y="707.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.9" y="718.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.25%)</title><rect x="1163.9" y="691.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.9" y="702.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.25%)</title><rect x="1163.9" y="675.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.9" y="686.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.25%)</title><rect x="1163.9" y="659.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.9" y="670.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.25%)</title><rect x="1163.9" y="643.0" width="2.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1166.9" y="654.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1166.8" y="835.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.8" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1166.8" y="819.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.8" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.25%)</title><rect x="1166.8" y="803.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.8" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.25%)</title><rect x="1166.8" y="787.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.25%)</title><rect x="1166.8" y="771.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.8" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.25%)</title><rect x="1166.8" y="755.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.25%)</title><rect x="1166.8" y="739.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.8" y="750.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1166.8" y="723.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.8" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1166.8" y="707.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.8" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.25%)</title><rect x="1166.8" y="691.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.25%)</title><rect x="1166.8" y="675.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1169.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.25%)</title><rect x="1166.8" y="659.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.25%)</title><rect x="1166.8" y="643.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.25%)</title><rect x="1166.8" y="627.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.8" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1166.8" y="611.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.8" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.25%)</title><rect x="1166.8" y="595.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.25%)</title><rect x="1166.8" y="579.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.25%)</title><rect x="1166.8" y="563.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.25%)</title><rect x="1166.8" y="547.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.8" y="558.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_interface() (1 samples, 0.25%)</title><rect x="1166.8" y="531.0" width="2.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.8" y="542.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.25%)</title><rect x="1169.7" y="1123.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.7" y="1134.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.25%)</title><rect x="1169.7" y="1107.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.7" y="1118.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.25%)</title><rect x="1172.6" y="1123.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.6" y="1134.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.25%)</title><rect x="1172.6" y="1107.0" width="2.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.6" y="1118.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.25%)</title><rect x="1172.6" y="1091.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.6" y="1102.0"></text>
</g>
<g>
<title>RelocIterator::advance_over_prefix() (1 samples, 0.25%)</title><rect x="1172.6" y="1075.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.6" y="1086.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 0.74%)</title><rect x="1175.5" y="1155.0" width="8.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.5" y="1166.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 0.74%)</title><rect x="1175.5" y="1139.0" width="8.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.5" y="1150.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.74%)</title><rect x="1175.5" y="1123.0" width="8.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.5" y="1134.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.74%)</title><rect x="1175.5" y="1107.0" width="8.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.5" y="1118.0"></text>
</g>
<g>
<title>Compilation::build_hir() (3 samples, 0.74%)</title><rect x="1175.5" y="1091.0" width="8.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.5" y="1102.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (3 samples, 0.74%)</title><rect x="1175.5" y="1075.0" width="8.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.5" y="1086.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (3 samples, 0.74%)</title><rect x="1175.5" y="1059.0" width="8.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.5" y="1070.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (3 samples, 0.74%)</title><rect x="1175.5" y="1043.0" width="8.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.5" y="1054.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (3 samples, 0.74%)</title><rect x="1175.5" y="1027.0" width="8.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.5" y="1038.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (3 samples, 0.74%)</title><rect x="1175.5" y="1011.0" width="8.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.5" y="1022.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.25%)</title><rect x="1175.5" y="995.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.5" y="1006.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.25%)</title><rect x="1175.5" y="979.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.5" y="990.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.25%)</title><rect x="1175.5" y="963.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.5" y="974.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.25%)</title><rect x="1175.5" y="947.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.5" y="958.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.25%)</title><rect x="1175.5" y="931.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.5" y="942.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.25%)</title><rect x="1175.5" y="915.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.5" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.49%)</title><rect x="1178.4" y="995.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.4" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (2 samples, 0.49%)</title><rect x="1178.4" y="979.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.4" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (2 samples, 0.49%)</title><rect x="1178.4" y="963.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.4" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.49%)</title><rect x="1178.4" y="947.0" width="5.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.4" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.49%)</title><rect x="1178.4" y="931.0" width="5.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.4" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.49%)</title><rect x="1178.4" y="915.0" width="5.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.4" y="926.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (2 samples, 0.49%)</title><rect x="1178.4" y="899.0" width="5.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.4" y="910.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (2 samples, 0.49%)</title><rect x="1178.4" y="883.0" width="5.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.4" y="894.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (2 samples, 0.49%)</title><rect x="1178.4" y="867.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.4" y="878.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.25%)</title><rect x="1178.4" y="851.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.4" y="862.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.25%)</title><rect x="1178.4" y="835.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.4" y="846.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, KlassHandle&amp;, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.25%)</title><rect x="1178.4" y="819.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.4" y="830.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_static_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.25%)</title><rect x="1178.4" y="803.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.4" y="814.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.25%)</title><rect x="1178.4" y="787.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.4" y="798.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.25%)</title><rect x="1178.4" y="771.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.4" y="782.0"></text>
</g>
<g>
<title>SystemDictionary::add_loader_constraint(Symbol*, Handle, Handle, Thread*) (1 samples, 0.25%)</title><rect x="1178.4" y="755.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.4" y="766.0"></text>
</g>
<g>
<title>LoaderConstraintTable::add_entry(Symbol*, Klass*, Handle, Klass*, Handle) (1 samples, 0.25%)</title><rect x="1178.4" y="739.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.4" y="750.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.25%)</title><rect x="1181.3" y="851.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.3" y="862.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.25%)</title><rect x="1181.3" y="835.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.3" y="846.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.25%)</title><rect x="1181.3" y="819.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.3" y="830.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.25%)</title><rect x="1181.3" y="803.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.3" y="814.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol*) (1 samples, 0.25%)</title><rect x="1181.3" y="787.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.3" y="798.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.25%)</title><rect x="1184.2" y="1171.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.2" y="1182.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.25%)</title><rect x="1184.2" y="1155.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.2" y="1166.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.25%)</title><rect x="1184.2" y="1139.0" width="2.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.2" y="1150.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.25%)</title><rect x="1184.2" y="1123.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.2" y="1134.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.25%)</title><rect x="1184.2" y="1107.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.2" y="1118.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.25%)</title><rect x="1184.2" y="1091.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.2" y="1102.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.25%)</title><rect x="1187.1" y="1219.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.1" y="1230.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (1 samples, 0.25%)</title><rect x="1187.1" y="1203.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.1" y="1214.0"></text>
</g>
<g>
<title>StatSamplerTask::task() (1 samples, 0.25%)</title><rect x="1187.1" y="1187.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.1" y="1198.0"></text>
</g>
</g>
</svg>
