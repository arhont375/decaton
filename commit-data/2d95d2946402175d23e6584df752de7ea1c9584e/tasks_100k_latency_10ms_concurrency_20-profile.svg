<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1462" onload="init(evt)" viewBox="0 0 1200 1462" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1445"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1445"> </text>
<g id="frames">
<g>
<title>all (347 samples, 100.00%)</title><rect x="10.0" y="1411.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1422.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (31 samples, 8.93%)</title><rect x="10.0" y="1395.0" width="105.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1406.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (2 samples, 0.58%)</title><rect x="10.0" y="1379.0" width="6.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (2 samples, 0.58%)</title><rect x="10.0" y="1363.0" width="6.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (2 samples, 0.58%)</title><rect x="10.0" y="1347.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>java/util/HashMap.&lt;init&gt; (1 samples, 0.29%)</title><rect x="10.0" y="1331.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>java/util/HashMap.putMapEntries (1 samples, 0.29%)</title><rect x="10.0" y="1315.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>java/util/HashMap.tableSizeFor (1 samples, 0.29%)</title><rect x="10.0" y="1299.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.29%)</title><rect x="13.4" y="1331.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.4" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.29%)</title><rect x="13.4" y="1315.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.4" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.29%)</title><rect x="13.4" y="1299.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.4" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.29%)</title><rect x="13.4" y="1283.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.4" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.29%)</title><rect x="13.4" y="1267.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.4" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.29%)</title><rect x="13.4" y="1251.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.4" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.29%)</title><rect x="13.4" y="1235.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.4" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.29%)</title><rect x="13.4" y="1219.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.4" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.29%)</title><rect x="13.4" y="1203.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.4" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/OffsetCommitRequest.toStruct (1 samples, 0.29%)</title><rect x="13.4" y="1187.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitRequestData.toStruct (1 samples, 0.29%)</title><rect x="13.4" y="1171.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.4" y="1182.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.29%)</title><rect x="13.4" y="1155.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.4" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (29 samples, 8.36%)</title><rect x="16.8" y="1379.0" width="98.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.8" y="1390.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (2 samples, 0.58%)</title><rect x="16.8" y="1363.0" width="6.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="19.8" y="1374.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.29%)</title><rect x="16.8" y="1347.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.8" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsResumed (1 samples, 0.29%)</title><rect x="20.2" y="1347.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="23.2" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (2 samples, 0.58%)</title><rect x="23.6" y="1363.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.6" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (2 samples, 0.58%)</title><rect x="23.6" y="1347.0" width="6.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="26.6" y="1358.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 0.58%)</title><rect x="23.6" y="1331.0" width="6.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="26.6" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$266/1998490631.accept (2 samples, 0.58%)</title><rect x="23.6" y="1315.0" width="6.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="26.6" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (2 samples, 0.58%)</title><rect x="23.6" y="1299.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="26.6" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.58%)</title><rect x="23.6" y="1283.0" width="6.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="26.6" y="1294.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.29%)</title><rect x="27.0" y="1267.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="30.0" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (1 samples, 0.29%)</title><rect x="30.4" y="1363.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="33.4" y="1374.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (10 samples, 2.88%)</title><rect x="33.8" y="1363.0" width="34.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="36.8" y="1374.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$265/741324657.accept (10 samples, 2.88%)</title><rect x="33.8" y="1347.0" width="34.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="36.8" y="1358.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (10 samples, 2.88%)</title><rect x="33.8" y="1331.0" width="34.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="36.8" y="1342.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (5 samples, 1.44%)</title><rect x="37.2" y="1315.0" width="17.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="40.2" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (5 samples, 1.44%)</title><rect x="37.2" y="1299.0" width="17.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="40.2" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (5 samples, 1.44%)</title><rect x="37.2" y="1283.0" width="17.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="40.2" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (5 samples, 1.44%)</title><rect x="37.2" y="1267.0" width="17.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="40.2" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (5 samples, 1.44%)</title><rect x="37.2" y="1251.0" width="17.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="40.2" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (5 samples, 1.44%)</title><rect x="37.2" y="1235.0" width="17.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="40.2" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.29%)</title><rect x="50.8" y="1219.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="53.8" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.29%)</title><rect x="50.8" y="1203.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="53.8" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.29%)</title><rect x="50.8" y="1187.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="53.8" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/TaskRequest.&lt;init&gt; (4 samples, 1.15%)</title><rect x="54.2" y="1315.0" width="13.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="57.2" y="1326.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 1.15%)</title><rect x="54.2" y="1299.0" width="13.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="57.2" y="1310.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.29%)</title><rect x="61.0" y="1283.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="64.0" y="1294.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.29%)</title><rect x="61.0" y="1267.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="64.0" y="1278.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.29%)</title><rect x="64.4" y="1283.0" width="3.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="67.4" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (14 samples, 4.03%)</title><rect x="67.8" y="1363.0" width="47.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="70.8" y="1374.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (14 samples, 4.03%)</title><rect x="67.8" y="1347.0" width="47.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="70.8" y="1358.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (10 samples, 2.88%)</title><rect x="67.8" y="1331.0" width="34.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="70.8" y="1342.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 1.44%)</title><rect x="67.8" y="1315.0" width="17.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="70.8" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 1.44%)</title><rect x="67.8" y="1299.0" width="17.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="70.8" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 1.15%)</title><rect x="71.2" y="1283.0" width="13.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="74.2" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.29%)</title><rect x="71.2" y="1267.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="74.2" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.29%)</title><rect x="71.2" y="1251.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="74.2" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.29%)</title><rect x="71.2" y="1235.0" width="3.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="74.2" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.schemaFor (1 samples, 0.29%)</title><rect x="71.2" y="1219.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="74.2" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.86%)</title><rect x="74.6" y="1267.0" width="10.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="77.6" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.58%)</title><rect x="74.6" y="1251.0" width="6.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="77.6" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.29%)</title><rect x="78.0" y="1235.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="81.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.29%)</title><rect x="78.0" y="1219.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="81.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.29%)</title><rect x="78.0" y="1203.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="81.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.29%)</title><rect x="81.4" y="1251.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="84.4" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.29%)</title><rect x="81.4" y="1235.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="84.4" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.29%)</title><rect x="81.4" y="1219.0" width="3.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="84.4" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.29%)</title><rect x="81.4" y="1203.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="84.4" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.29%)</title><rect x="81.4" y="1187.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="84.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.29%)</title><rect x="81.4" y="1171.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="84.4" y="1182.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.29%)</title><rect x="81.4" y="1155.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="84.4" y="1166.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.29%)</title><rect x="81.4" y="1139.0" width="3.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="84.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (4 samples, 1.15%)</title><rect x="84.8" y="1315.0" width="13.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="87.8" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.addAll (2 samples, 0.58%)</title><rect x="84.8" y="1299.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="87.8" y="1310.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.29%)</title><rect x="88.2" y="1283.0" width="3.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="91.2" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (2 samples, 0.58%)</title><rect x="91.6" y="1299.0" width="6.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="94.6" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (2 samples, 0.58%)</title><rect x="91.6" y="1283.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="94.6" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 0.58%)</title><rect x="91.6" y="1267.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="94.6" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (2 samples, 0.58%)</title><rect x="91.6" y="1251.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="94.6" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 0.58%)</title><rect x="91.6" y="1235.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="94.6" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (2 samples, 0.58%)</title><rect x="91.6" y="1219.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="94.6" y="1230.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (2 samples, 0.58%)</title><rect x="91.6" y="1203.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="94.6" y="1214.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (1 samples, 0.29%)</title><rect x="95.0" y="1187.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="98.0" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.29%)</title><rect x="95.0" y="1171.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="98.0" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (1 samples, 0.29%)</title><rect x="95.0" y="1155.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="98.0" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.29%)</title><rect x="95.0" y="1139.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="98.0" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.29%)</title><rect x="98.4" y="1315.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="101.4" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.29%)</title><rect x="98.4" y="1299.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="101.4" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.29%)</title><rect x="98.4" y="1283.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="101.4" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.29%)</title><rect x="98.4" y="1267.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="101.4" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.29%)</title><rect x="98.4" y="1251.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="101.4" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.29%)</title><rect x="98.4" y="1235.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="101.4" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.29%)</title><rect x="98.4" y="1219.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="101.4" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (4 samples, 1.15%)</title><rect x="101.8" y="1331.0" width="13.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="104.8" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.58%)</title><rect x="101.8" y="1315.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="104.8" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.29%)</title><rect x="101.8" y="1299.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="104.8" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.completeNext (1 samples, 0.29%)</title><rect x="101.8" y="1283.0" width="3.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="104.8" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.requestQueue (1 samples, 0.29%)</title><rect x="101.8" y="1267.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="104.8" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.29%)</title><rect x="105.2" y="1299.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="108.2" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.29%)</title><rect x="105.2" y="1283.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="108.2" y="1294.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.29%)</title><rect x="105.2" y="1267.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="108.2" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.58%)</title><rect x="108.6" y="1315.0" width="6.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="111.6" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (2 samples, 0.58%)</title><rect x="108.6" y="1299.0" width="6.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="111.6" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.58%)</title><rect x="108.6" y="1283.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="111.6" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.29%)</title><rect x="108.6" y="1267.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="111.6" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.29%)</title><rect x="108.6" y="1251.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="111.6" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.29%)</title><rect x="108.6" y="1235.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="111.6" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.29%)</title><rect x="108.6" y="1219.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="111.6" y="1230.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.entrySet (1 samples, 0.29%)</title><rect x="108.6" y="1203.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="111.6" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NodeApiVersions.latestUsableVersion (1 samples, 0.29%)</title><rect x="112.0" y="1267.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="115.0" y="1278.0"></text>
</g>
<g>
<title>java/util/EnumMap.get (1 samples, 0.29%)</title><rect x="112.0" y="1251.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="115.0" y="1262.0"></text>
</g>
<g>
<title>java/lang/Thread.run (208 samples, 59.94%)</title><rect x="115.4" y="1395.0" width="707.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="118.4" y="1406.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (208 samples, 59.94%)</title><rect x="115.4" y="1379.0" width="707.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="118.4" y="1390.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (208 samples, 59.94%)</title><rect x="115.4" y="1363.0" width="707.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="118.4" y="1374.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (1 samples, 0.29%)</title><rect x="115.4" y="1347.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="118.4" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (1 samples, 0.29%)</title><rect x="115.4" y="1331.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="118.4" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (1 samples, 0.29%)</title><rect x="115.4" y="1315.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="118.4" y="1326.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.29%)</title><rect x="115.4" y="1299.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="118.4" y="1310.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.29%)</title><rect x="115.4" y="1283.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="118.4" y="1294.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.29%)</title><rect x="115.4" y="1267.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="118.4" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$285/1944859532.run (199 samples, 57.35%)</title><rect x="118.8" y="1347.0" width="676.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="121.8" y="1358.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$285/1944859532.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$70 (199 samples, 57.35%)</title><rect x="118.8" y="1331.0" width="676.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="121.8" y="1342.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$70</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (199 samples, 57.35%)</title><rect x="118.8" y="1315.0" width="676.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="121.8" y="1326.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (193 samples, 55.62%)</title><rect x="118.8" y="1299.0" width="656.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="121.8" y="1310.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (37 samples, 10.66%)</title><rect x="129.0" y="1283.0" width="125.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="132.0" y="1294.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$42/815674463.extract (37 samples, 10.66%)</title><rect x="129.0" y="1267.0" width="125.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="132.0" y="1278.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (37 samples, 10.66%)</title><rect x="129.0" y="1251.0" width="125.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="132.0" y="1262.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (37 samples, 10.66%)</title><rect x="129.0" y="1235.0" width="125.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="132.0" y="1246.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (37 samples, 10.66%)</title><rect x="129.0" y="1219.0" width="125.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="132.0" y="1230.0">com/linecorp/de..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (37 samples, 10.66%)</title><rect x="129.0" y="1203.0" width="125.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="132.0" y="1214.0">com/fasterxml/j..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (13 samples, 3.75%)</title><rect x="129.0" y="1187.0" width="44.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="132.0" y="1198.0">com/..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.29%)</title><rect x="149.4" y="1171.0" width="3.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="152.4" y="1182.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.29%)</title><rect x="149.4" y="1155.0" width="3.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="152.4" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (6 samples, 1.73%)</title><rect x="152.8" y="1171.0" width="20.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="155.8" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (20 samples, 5.76%)</title><rect x="173.2" y="1187.0" width="68.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="176.2" y="1198.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (3 samples, 0.86%)</title><rect x="173.2" y="1171.0" width="10.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="176.2" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.86%)</title><rect x="173.2" y="1155.0" width="10.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="176.2" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (3 samples, 0.86%)</title><rect x="173.2" y="1139.0" width="10.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="176.2" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.29%)</title><rect x="180.0" y="1123.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="183.0" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.29%)</title><rect x="180.0" y="1107.0" width="3.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="183.0" y="1118.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.29%)</title><rect x="180.0" y="1091.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="183.0" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.29%)</title><rect x="183.4" y="1171.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="186.4" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.29%)</title><rect x="183.4" y="1155.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="186.4" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (15 samples, 4.32%)</title><rect x="186.8" y="1171.0" width="51.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="189.8" y="1182.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.86%)</title><rect x="186.8" y="1155.0" width="10.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="189.8" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.29%)</title><rect x="186.8" y="1139.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="189.8" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.29%)</title><rect x="186.8" y="1123.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="189.8" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.29%)</title><rect x="186.8" y="1107.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="189.8" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.29%)</title><rect x="186.8" y="1091.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="189.8" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.29%)</title><rect x="186.8" y="1075.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="189.8" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.58%)</title><rect x="190.2" y="1139.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="193.2" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (2 samples, 0.58%)</title><rect x="190.2" y="1123.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="193.2" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (2 samples, 0.58%)</title><rect x="190.2" y="1107.0" width="6.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="193.2" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (2 samples, 0.58%)</title><rect x="190.2" y="1091.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="193.2" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (2 samples, 0.58%)</title><rect x="190.2" y="1075.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="193.2" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.29%)</title><rect x="197.0" y="1155.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="200.0" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (11 samples, 3.17%)</title><rect x="200.4" y="1155.0" width="37.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="203.4" y="1166.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (11 samples, 3.17%)</title><rect x="200.4" y="1139.0" width="37.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="203.4" y="1150.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (10 samples, 2.88%)</title><rect x="203.8" y="1123.0" width="34.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="206.8" y="1134.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (3 samples, 0.86%)</title><rect x="210.6" y="1107.0" width="10.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="213.6" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.58%)</title><rect x="214.0" y="1091.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="217.0" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.58%)</title><rect x="214.0" y="1075.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="217.0" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.58%)</title><rect x="214.0" y="1059.0" width="6.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="217.0" y="1070.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.58%)</title><rect x="214.0" y="1043.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="217.0" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.29%)</title><rect x="220.8" y="1107.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="223.8" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (3 samples, 0.86%)</title><rect x="224.2" y="1107.0" width="10.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="227.2" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (3 samples, 0.86%)</title><rect x="224.2" y="1091.0" width="10.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="227.2" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (3 samples, 0.86%)</title><rect x="224.2" y="1075.0" width="10.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="227.2" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (3 samples, 0.86%)</title><rect x="224.2" y="1059.0" width="10.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="227.2" y="1070.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (3 samples, 0.86%)</title><rect x="224.2" y="1043.0" width="10.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="227.2" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.29%)</title><rect x="234.4" y="1107.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="237.4" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.29%)</title><rect x="234.4" y="1091.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="237.4" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.29%)</title><rect x="234.4" y="1075.0" width="3.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="237.4" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.29%)</title><rect x="234.4" y="1059.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="237.4" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.29%)</title><rect x="237.8" y="1171.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="240.8" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (4 samples, 1.15%)</title><rect x="241.2" y="1187.0" width="13.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="244.2" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (4 samples, 1.15%)</title><rect x="241.2" y="1171.0" width="13.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="244.2" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (4 samples, 1.15%)</title><rect x="241.2" y="1155.0" width="13.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="244.2" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (4 samples, 1.15%)</title><rect x="241.2" y="1139.0" width="13.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="244.2" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 1.15%)</title><rect x="241.2" y="1123.0" width="13.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="244.2" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (144 samples, 41.50%)</title><rect x="254.8" y="1283.0" width="489.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="257.8" y="1294.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (29 samples, 8.36%)</title><rect x="254.8" y="1267.0" width="98.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="257.8" y="1278.0">com/linecorp..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (28 samples, 8.07%)</title><rect x="258.2" y="1251.0" width="95.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="261.2" y="1262.0">org/slf4j/M..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (22 samples, 6.34%)</title><rect x="278.6" y="1235.0" width="74.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="281.6" y="1246.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (13 samples, 3.75%)</title><rect x="282.0" y="1219.0" width="44.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="285.0" y="1230.0">ch/q..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (13 samples, 3.75%)</title><rect x="282.0" y="1203.0" width="44.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="285.0" y="1214.0">java..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (13 samples, 3.75%)</title><rect x="282.0" y="1187.0" width="44.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="285.0" y="1198.0">java..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 0.86%)</title><rect x="316.1" y="1171.0" width="10.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="319.1" y="1182.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (8 samples, 2.31%)</title><rect x="326.3" y="1219.0" width="27.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="329.3" y="1230.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (7 samples, 2.02%)</title><rect x="329.7" y="1203.0" width="23.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="332.7" y="1214.0">j..</text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.86%)</title><rect x="333.1" y="1187.0" width="10.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="336.1" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (3 samples, 0.86%)</title><rect x="343.3" y="1187.0" width="10.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="346.3" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.86%)</title><rect x="353.5" y="1267.0" width="10.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="356.5" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.86%)</title><rect x="353.5" y="1251.0" width="10.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="356.5" y="1262.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.86%)</title><rect x="353.5" y="1235.0" width="10.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="356.5" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (22 samples, 6.34%)</title><rect x="363.7" y="1267.0" width="74.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="366.7" y="1278.0">com/line..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.29%)</title><rect x="363.7" y="1251.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="366.7" y="1262.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.29%)</title><rect x="363.7" y="1235.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="366.7" y="1246.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.29%)</title><rect x="363.7" y="1219.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="366.7" y="1230.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.29%)</title><rect x="363.7" y="1203.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="366.7" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (21 samples, 6.05%)</title><rect x="367.1" y="1251.0" width="71.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="370.1" y="1262.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (7 samples, 2.02%)</title><rect x="370.5" y="1235.0" width="23.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="373.5" y="1246.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 1.44%)</title><rect x="377.3" y="1219.0" width="17.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="380.3" y="1230.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 1.15%)</title><rect x="380.7" y="1203.0" width="13.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="383.7" y="1214.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 0.86%)</title><rect x="384.1" y="1187.0" width="10.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="387.1" y="1198.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (3 samples, 0.86%)</title><rect x="384.1" y="1171.0" width="10.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="387.1" y="1182.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.86%)</title><rect x="384.1" y="1155.0" width="10.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="387.1" y="1166.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.58%)</title><rect x="384.1" y="1139.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="387.1" y="1150.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.29%)</title><rect x="384.1" y="1123.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="387.1" y="1134.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.29%)</title><rect x="384.1" y="1107.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="387.1" y="1118.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.29%)</title><rect x="384.1" y="1091.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="387.1" y="1102.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.29%)</title><rect x="384.1" y="1075.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="387.1" y="1086.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.29%)</title><rect x="387.5" y="1123.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="390.5" y="1134.0"></text>
</g>
<g>
<title>_new_array_nozero_Java (1 samples, 0.29%)</title><rect x="390.9" y="1139.0" width="3.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="393.9" y="1150.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (13 samples, 3.75%)</title><rect x="394.3" y="1235.0" width="44.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="397.3" y="1246.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (12 samples, 3.46%)</title><rect x="397.7" y="1219.0" width="40.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="400.7" y="1230.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 0.86%)</title><rect x="397.7" y="1203.0" width="10.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="400.7" y="1214.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 0.86%)</title><rect x="397.7" y="1187.0" width="10.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="400.7" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 0.86%)</title><rect x="397.7" y="1171.0" width="10.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="400.7" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 0.86%)</title><rect x="397.7" y="1155.0" width="10.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="400.7" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.29%)</title><rect x="407.9" y="1203.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="410.9" y="1214.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.29%)</title><rect x="407.9" y="1187.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="410.9" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.29%)</title><rect x="407.9" y="1171.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="410.9" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.29%)</title><rect x="407.9" y="1155.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="410.9" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.29%)</title><rect x="407.9" y="1139.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="410.9" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (8 samples, 2.31%)</title><rect x="411.3" y="1203.0" width="27.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="414.3" y="1214.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (8 samples, 2.31%)</title><rect x="411.3" y="1187.0" width="27.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="414.3" y="1198.0">j..</text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.29%)</title><rect x="411.3" y="1171.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="414.3" y="1182.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.29%)</title><rect x="411.3" y="1155.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="414.3" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (7 samples, 2.02%)</title><rect x="414.7" y="1171.0" width="23.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="417.7" y="1182.0">j..</text>
</g>
<g>
<title>java/util/HashMap.newNode (5 samples, 1.44%)</title><rect x="421.5" y="1155.0" width="17.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="424.5" y="1166.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.29%)</title><rect x="435.1" y="1139.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="438.1" y="1150.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.29%)</title><rect x="435.1" y="1123.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="438.1" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.29%)</title><rect x="435.1" y="1107.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="438.1" y="1118.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.29%)</title><rect x="435.1" y="1091.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="438.1" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (81 samples, 23.34%)</title><rect x="438.5" y="1267.0" width="275.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="441.5" y="1278.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (81 samples, 23.34%)</title><rect x="438.5" y="1251.0" width="275.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="441.5" y="1262.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$207/1989100193.process (67 samples, 19.31%)</title><rect x="445.3" y="1235.0" width="227.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="448.3" y="1246.0">com/linecorp/decaton/benchmark..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (66 samples, 19.02%)</title><rect x="448.7" y="1219.0" width="224.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="451.7" y="1230.0">com/linecorp/decaton/benchmark..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (65 samples, 18.73%)</title><rect x="448.7" y="1203.0" width="221.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="451.7" y="1214.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.58%)</title><rect x="452.1" y="1187.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="455.1" y="1198.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.58%)</title><rect x="452.1" y="1171.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="455.1" y="1182.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.58%)</title><rect x="452.1" y="1155.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="455.1" y="1166.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.58%)</title><rect x="452.1" y="1139.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="455.1" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (60 samples, 17.29%)</title><rect x="458.9" y="1187.0" width="204.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="461.9" y="1198.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>java/lang/Thread.sleep (59 samples, 17.00%)</title><rect x="458.9" y="1171.0" width="200.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="461.9" y="1182.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (55 samples, 15.85%)</title><rect x="469.1" y="1155.0" width="187.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="472.1" y="1166.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.58%)</title><rect x="482.7" y="1139.0" width="6.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="485.7" y="1150.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.58%)</title><rect x="489.5" y="1139.0" width="6.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="492.5" y="1150.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.58%)</title><rect x="496.3" y="1139.0" width="6.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="499.3" y="1150.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.58%)</title><rect x="496.3" y="1123.0" width="6.8" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="499.3" y="1134.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.29%)</title><rect x="503.1" y="1139.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="506.1" y="1150.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.29%)</title><rect x="506.5" y="1139.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="509.5" y="1150.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (43 samples, 12.39%)</title><rect x="509.9" y="1139.0" width="146.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="512.9" y="1150.0">os::sleep(Thread*,..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.86%)</title><rect x="537.1" y="1123.0" width="10.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="540.1" y="1134.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.58%)</title><rect x="540.5" y="1107.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="543.5" y="1118.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.29%)</title><rect x="547.3" y="1123.0" width="3.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="550.3" y="1134.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 1.15%)</title><rect x="550.7" y="1123.0" width="13.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="553.7" y="1134.0"></text>
</g>
<g>
<title>__pthread_cond_init (1 samples, 0.29%)</title><rect x="564.3" y="1123.0" width="3.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="567.3" y="1134.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (20 samples, 5.76%)</title><rect x="567.7" y="1123.0" width="68.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="570.7" y="1134.0">__pthre..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.86%)</title><rect x="635.7" y="1123.0" width="10.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="638.7" y="1134.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.29%)</title><rect x="645.9" y="1123.0" width="3.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="648.9" y="1134.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.58%)</title><rect x="649.3" y="1123.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="652.3" y="1134.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.29%)</title><rect x="656.1" y="1155.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="659.1" y="1166.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.29%)</title><rect x="659.5" y="1171.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="662.5" y="1182.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.29%)</title><rect x="659.5" y="1155.0" width="3.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="662.5" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.58%)</title><rect x="662.9" y="1187.0" width="6.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="665.9" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.29%)</title><rect x="669.7" y="1203.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="672.7" y="1214.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.29%)</title><rect x="669.7" y="1187.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="672.7" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.29%)</title><rect x="669.7" y="1171.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="672.7" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.29%)</title><rect x="669.7" y="1155.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="672.7" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.29%)</title><rect x="669.7" y="1139.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="672.7" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (2 samples, 0.58%)</title><rect x="673.1" y="1235.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="676.1" y="1246.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/789653861.linkToTargetMethod (3 samples, 0.86%)</title><rect x="679.9" y="1235.0" width="10.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="682.9" y="1246.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (3 samples, 0.86%)</title><rect x="679.9" y="1219.0" width="10.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="682.9" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$291/1796956391.get$Lambda (3 samples, 0.86%)</title><rect x="679.9" y="1203.0" width="10.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="682.9" y="1214.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.58%)</title><rect x="690.1" y="1235.0" width="6.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="693.1" y="1246.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.29%)</title><rect x="693.5" y="1219.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="696.5" y="1230.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.29%)</title><rect x="693.5" y="1203.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="696.5" y="1214.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.86%)</title><rect x="696.9" y="1235.0" width="10.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="699.9" y="1246.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.58%)</title><rect x="700.3" y="1219.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="703.3" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (2 samples, 0.58%)</title><rect x="707.1" y="1235.0" width="6.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="710.1" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (9 samples, 2.59%)</title><rect x="713.9" y="1267.0" width="30.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="716.9" y="1278.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (9 samples, 2.59%)</title><rect x="713.9" y="1251.0" width="30.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="716.9" y="1262.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.58%)</title><rect x="737.7" y="1235.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="740.7" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$296/939395373.accept (2 samples, 0.58%)</title><rect x="737.7" y="1219.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="740.7" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$62 (2 samples, 0.58%)</title><rect x="737.7" y="1203.0" width="6.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="740.7" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (2 samples, 0.58%)</title><rect x="737.7" y="1187.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="740.7" y="1198.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.58%)</title><rect x="737.7" y="1171.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="740.7" y="1182.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.58%)</title><rect x="737.7" y="1155.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="740.7" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (9 samples, 2.59%)</title><rect x="744.5" y="1283.0" width="30.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="747.5" y="1294.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (9 samples, 2.59%)</title><rect x="744.5" y="1267.0" width="30.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="747.5" y="1278.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 2.31%)</title><rect x="747.9" y="1251.0" width="27.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="750.9" y="1262.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$296/939395373.accept (1 samples, 0.29%)</title><rect x="747.9" y="1235.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="750.9" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$62 (1 samples, 0.29%)</title><rect x="747.9" y="1219.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="750.9" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.29%)</title><rect x="747.9" y="1203.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="750.9" y="1214.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.29%)</title><rect x="747.9" y="1187.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="750.9" y="1198.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.29%)</title><rect x="747.9" y="1171.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="750.9" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$299/294242067.accept (7 samples, 2.02%)</title><rect x="751.3" y="1235.0" width="23.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="754.3" y="1246.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$61 (7 samples, 2.02%)</title><rect x="751.3" y="1219.0" width="23.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="754.3" y="1230.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$283/394369473.complete (7 samples, 2.02%)</title><rect x="751.3" y="1203.0" width="23.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="754.3" y="1214.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$38 (7 samples, 2.02%)</title><rect x="751.3" y="1187.0" width="23.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="754.3" y="1198.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$282/1820496208.complete (7 samples, 2.02%)</title><rect x="751.3" y="1171.0" width="23.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="754.3" y="1182.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$68 (7 samples, 2.02%)</title><rect x="751.3" y="1155.0" width="23.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="754.3" y="1166.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (7 samples, 2.02%)</title><rect x="751.3" y="1139.0" width="23.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="754.3" y="1150.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (7 samples, 2.02%)</title><rect x="751.3" y="1123.0" width="23.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="754.3" y="1134.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (7 samples, 2.02%)</title><rect x="751.3" y="1107.0" width="23.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="754.3" y="1118.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (7 samples, 2.02%)</title><rect x="751.3" y="1091.0" width="23.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="754.3" y="1102.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.29%)</title><rect x="775.1" y="1299.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="778.1" y="1310.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.29%)</title><rect x="775.1" y="1283.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="778.1" y="1294.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.29%)</title><rect x="775.1" y="1267.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="778.1" y="1278.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.29%)</title><rect x="775.1" y="1251.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="778.1" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (5 samples, 1.44%)</title><rect x="778.5" y="1299.0" width="17.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="781.5" y="1310.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.29%)</title><rect x="792.1" y="1283.0" width="3.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="795.1" y="1294.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.29%)</title><rect x="792.1" y="1267.0" width="3.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="795.1" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.58%)</title><rect x="795.5" y="1347.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="798.5" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.58%)</title><rect x="795.5" y="1331.0" width="6.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="798.5" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.58%)</title><rect x="795.5" y="1315.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="798.5" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.58%)</title><rect x="795.5" y="1299.0" width="6.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="798.5" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$285/1944859532.run (1 samples, 0.29%)</title><rect x="798.9" y="1283.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="801.9" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (6 samples, 1.73%)</title><rect x="802.3" y="1347.0" width="20.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="805.3" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (6 samples, 1.73%)</title><rect x="802.3" y="1331.0" width="20.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="805.3" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (3 samples, 0.86%)</title><rect x="802.3" y="1315.0" width="10.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="805.3" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (3 samples, 0.86%)</title><rect x="802.3" y="1299.0" width="10.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="805.3" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.86%)</title><rect x="802.3" y="1283.0" width="10.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="805.3" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.86%)</title><rect x="802.3" y="1267.0" width="10.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="805.3" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.86%)</title><rect x="802.3" y="1251.0" width="10.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="805.3" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.86%)</title><rect x="812.5" y="1315.0" width="10.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="815.5" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.86%)</title><rect x="812.5" y="1299.0" width="10.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="815.5" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.86%)</title><rect x="812.5" y="1283.0" width="10.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="815.5" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.86%)</title><rect x="812.5" y="1267.0" width="10.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="815.5" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.58%)</title><rect x="822.7" y="1395.0" width="6.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="825.7" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (2 samples, 0.58%)</title><rect x="822.7" y="1379.0" width="6.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="825.7" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.58%)</title><rect x="822.7" y="1363.0" width="6.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="825.7" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.58%)</title><rect x="822.7" y="1347.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="825.7" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.29%)</title><rect x="822.7" y="1331.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="825.7" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.completeNext (1 samples, 0.29%)</title><rect x="822.7" y="1315.0" width="3.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="825.7" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.29%)</title><rect x="826.1" y="1331.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="829.1" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.29%)</title><rect x="826.1" y="1315.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="829.1" y="1326.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.29%)</title><rect x="826.1" y="1299.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="829.1" y="1310.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.29%)</title><rect x="826.1" y="1283.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="829.1" y="1294.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.29%)</title><rect x="826.1" y="1267.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="829.1" y="1278.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.29%)</title><rect x="826.1" y="1251.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="829.1" y="1262.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.29%)</title><rect x="826.1" y="1235.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="829.1" y="1246.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (1 samples, 0.29%)</title><rect x="826.1" y="1219.0" width="3.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="829.1" y="1230.0"></text>
</g>
<g>
<title>start_thread (106 samples, 30.55%)</title><rect x="829.5" y="1395.0" width="360.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="832.5" y="1406.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (106 samples, 30.55%)</title><rect x="829.5" y="1379.0" width="360.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="832.5" y="1390.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (19 samples, 5.48%)</title><rect x="829.5" y="1363.0" width="64.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="832.5" y="1374.0">GangWor..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (2 samples, 0.58%)</title><rect x="829.5" y="1347.0" width="6.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="832.5" y="1358.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.58%)</title><rect x="829.5" y="1331.0" width="6.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="832.5" y="1342.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.58%)</title><rect x="829.5" y="1315.0" width="6.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="832.5" y="1326.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (17 samples, 4.90%)</title><rect x="836.3" y="1347.0" width="57.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="839.3" y="1358.0">G1ParT..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (16 samples, 4.61%)</title><rect x="836.3" y="1331.0" width="54.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="839.3" y="1342.0">G1Par..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (14 samples, 4.03%)</title><rect x="839.7" y="1315.0" width="47.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="842.7" y="1326.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (7 samples, 2.02%)</title><rect x="853.3" y="1299.0" width="23.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="856.3" y="1310.0">G..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.29%)</title><rect x="873.7" y="1283.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="876.7" y="1294.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (3 samples, 0.86%)</title><rect x="877.1" y="1299.0" width="10.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="880.1" y="1310.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.29%)</title><rect x="887.3" y="1315.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="890.3" y="1326.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.29%)</title><rect x="890.7" y="1331.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="893.7" y="1342.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.29%)</title><rect x="890.7" y="1315.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="893.7" y="1326.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (1 samples, 0.29%)</title><rect x="890.7" y="1299.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="893.7" y="1310.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (1 samples, 0.29%)</title><rect x="890.7" y="1283.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="893.7" y="1294.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.29%)</title><rect x="890.7" y="1267.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="893.7" y="1278.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (1 samples, 0.29%)</title><rect x="890.7" y="1251.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="893.7" y="1262.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.29%)</title><rect x="890.7" y="1235.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="893.7" y="1246.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.29%)</title><rect x="890.7" y="1219.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="893.7" y="1230.0"></text>
</g>
<g>
<title>JavaThread::run() (86 samples, 24.78%)</title><rect x="894.1" y="1363.0" width="292.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="897.1" y="1374.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (86 samples, 24.78%)</title><rect x="894.1" y="1347.0" width="292.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="897.1" y="1358.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (86 samples, 24.78%)</title><rect x="894.1" y="1331.0" width="292.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="897.1" y="1342.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (86 samples, 24.78%)</title><rect x="894.1" y="1315.0" width="292.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="897.1" y="1326.0">CompileBroker::invoke_compiler_on_metho..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (83 samples, 23.92%)</title><rect x="894.1" y="1299.0" width="282.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="897.1" y="1310.0">C2Compiler::compile_method(ciEnv*, ciM..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (83 samples, 23.92%)</title><rect x="894.1" y="1283.0" width="282.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="897.1" y="1294.0">Compile::Compile(ciEnv*, C2Compiler*, ..</text>
</g>
<g>
<title>CallGenerator::for_osr(ciMethod*, int) (1 samples, 0.29%)</title><rect x="894.1" y="1267.0" width="3.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="897.1" y="1278.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.29%)</title><rect x="894.1" y="1251.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="897.1" y="1262.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.29%)</title><rect x="894.1" y="1235.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="897.1" y="1246.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.29%)</title><rect x="894.1" y="1219.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="897.1" y="1230.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.29%)</title><rect x="894.1" y="1203.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="897.1" y="1214.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.29%)</title><rect x="894.1" y="1187.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="897.1" y="1198.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.29%)</title><rect x="894.1" y="1171.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="897.1" y="1182.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.29%)</title><rect x="894.1" y="1155.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="897.1" y="1166.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.29%)</title><rect x="894.1" y="1139.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="897.1" y="1150.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.29%)</title><rect x="894.1" y="1123.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="897.1" y="1134.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.29%)</title><rect x="894.1" y="1107.0" width="3.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="897.1" y="1118.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.29%)</title><rect x="894.1" y="1091.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="897.1" y="1102.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.29%)</title><rect x="894.1" y="1075.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="897.1" y="1086.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.29%)</title><rect x="894.1" y="1059.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="897.1" y="1070.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.29%)</title><rect x="894.1" y="1043.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="897.1" y="1054.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.29%)</title><rect x="894.1" y="1027.0" width="3.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="897.1" y="1038.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (40 samples, 11.53%)</title><rect x="897.6" y="1267.0" width="136.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="900.6" y="1278.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.58%)</title><rect x="897.6" y="1251.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="900.6" y="1262.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.29%)</title><rect x="897.6" y="1235.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="900.6" y="1246.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.29%)</title><rect x="897.6" y="1219.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="900.6" y="1230.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.29%)</title><rect x="897.6" y="1203.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="900.6" y="1214.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.29%)</title><rect x="901.0" y="1235.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="904.0" y="1246.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.29%)</title><rect x="901.0" y="1219.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="904.0" y="1230.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.29%)</title><rect x="901.0" y="1203.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="904.0" y="1214.0"></text>
</g>
<g>
<title>CodeSection::initialize_shared_locs(relocInfo*, int) (1 samples, 0.29%)</title><rect x="901.0" y="1187.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="904.0" y="1198.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.58%)</title><rect x="904.4" y="1251.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="907.4" y="1262.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.29%)</title><rect x="907.8" y="1235.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="910.8" y="1246.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.29%)</title><rect x="907.8" y="1219.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="910.8" y="1230.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 1.15%)</title><rect x="911.2" y="1251.0" width="13.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="914.2" y="1262.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 1.15%)</title><rect x="911.2" y="1235.0" width="13.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="914.2" y="1246.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 0.86%)</title><rect x="914.6" y="1219.0" width="10.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="917.6" y="1230.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.29%)</title><rect x="924.8" y="1251.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="927.8" y="1262.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.29%)</title><rect x="924.8" y="1235.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="927.8" y="1246.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.29%)</title><rect x="924.8" y="1219.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="927.8" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (31 samples, 8.93%)</title><rect x="928.2" y="1251.0" width="105.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="931.2" y="1262.0">PhaseChaitin:..</text>
</g>
<g>
<title>BoxLockNode::out_RegMask() const (1 samples, 0.29%)</title><rect x="928.2" y="1235.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="931.2" y="1246.0"></text>
</g>
<g>
<title>MachSpillCopyNode::ideal_reg() const (1 samples, 0.29%)</title><rect x="931.6" y="1235.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="934.6" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.58%)</title><rect x="935.0" y="1235.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="938.0" y="1246.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.29%)</title><rect x="935.0" y="1219.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="938.0" y="1230.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.29%)</title><rect x="938.4" y="1219.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="941.4" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.29%)</title><rect x="941.8" y="1235.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="944.8" y="1246.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.29%)</title><rect x="941.8" y="1219.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="944.8" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 1.15%)</title><rect x="945.2" y="1235.0" width="13.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="948.2" y="1246.0"></text>
</g>
<g>
<title>decodeKlass_not_nullNode::rule() const (1 samples, 0.29%)</title><rect x="955.4" y="1219.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="958.4" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 2.31%)</title><rect x="958.8" y="1235.0" width="27.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="961.8" y="1246.0">P..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.29%)</title><rect x="969.0" y="1219.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="972.0" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.86%)</title><rect x="972.4" y="1219.0" width="10.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="975.4" y="1230.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.29%)</title><rect x="979.2" y="1203.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="982.2" y="1214.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.29%)</title><rect x="982.6" y="1219.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="985.6" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.29%)</title><rect x="986.0" y="1235.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="989.0" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.58%)</title><rect x="989.4" y="1235.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="992.4" y="1246.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.29%)</title><rect x="992.8" y="1219.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="995.8" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.58%)</title><rect x="996.2" y="1235.0" width="6.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="999.2" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.29%)</title><rect x="999.6" y="1219.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1002.6" y="1230.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (6 samples, 1.73%)</title><rect x="1003.0" y="1235.0" width="20.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1006.0" y="1246.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (6 samples, 1.73%)</title><rect x="1003.0" y="1219.0" width="20.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1006.0" y="1230.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (5 samples, 1.44%)</title><rect x="1006.4" y="1203.0" width="17.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1009.4" y="1214.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 0.58%)</title><rect x="1006.4" y="1187.0" width="6.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1009.4" y="1198.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (3 samples, 0.86%)</title><rect x="1013.2" y="1187.0" width="10.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1016.2" y="1198.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.58%)</title><rect x="1023.4" y="1235.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1026.4" y="1246.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.29%)</title><rect x="1026.8" y="1219.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1029.8" y="1230.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.29%)</title><rect x="1030.2" y="1235.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1033.2" y="1246.0"></text>
</g>
<g>
<title>Compile::Optimize() (35 samples, 10.09%)</title><rect x="1033.6" y="1267.0" width="119.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1036.6" y="1278.0">Compile::Optimi..</text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.29%)</title><rect x="1033.6" y="1251.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1036.6" y="1262.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (1 samples, 0.29%)</title><rect x="1033.6" y="1235.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1036.6" y="1246.0"></text>
</g>
<g>
<title>BoolNode::Opcode() const (1 samples, 0.29%)</title><rect x="1033.6" y="1219.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1036.6" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.29%)</title><rect x="1037.0" y="1251.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1040.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.29%)</title><rect x="1037.0" y="1235.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1040.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::add_final_edges(Node*) (1 samples, 0.29%)</title><rect x="1037.0" y="1219.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1040.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.29%)</title><rect x="1037.0" y="1203.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1040.0" y="1214.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.29%)</title><rect x="1037.0" y="1187.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1040.0" y="1198.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.29%)</title><rect x="1037.0" y="1171.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1040.0" y="1182.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.29%)</title><rect x="1037.0" y="1155.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1040.0" y="1166.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.29%)</title><rect x="1037.0" y="1139.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1040.0" y="1150.0"></text>
</g>
<g>
<title>ciMethodBlocks::clear_processed() (1 samples, 0.29%)</title><rect x="1037.0" y="1123.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1040.0" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (23 samples, 6.63%)</title><rect x="1040.4" y="1251.0" width="78.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1043.4" y="1262.0">PhaseIdea..</text>
</g>
<g>
<title>IfNode::pinned() const (1 samples, 0.29%)</title><rect x="1040.4" y="1235.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1043.4" y="1246.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.29%)</title><rect x="1043.8" y="1235.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1046.8" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.29%)</title><rect x="1047.2" y="1235.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1050.2" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (16 samples, 4.61%)</title><rect x="1050.6" y="1235.0" width="54.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1053.6" y="1246.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (16 samples, 4.61%)</title><rect x="1050.6" y="1219.0" width="54.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1053.6" y="1230.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 0.86%)</title><rect x="1050.6" y="1203.0" width="10.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1053.6" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (13 samples, 3.75%)</title><rect x="1060.8" y="1203.0" width="44.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1063.8" y="1214.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 0.86%)</title><rect x="1094.8" y="1187.0" width="10.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1097.8" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.29%)</title><rect x="1105.0" y="1235.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1108.0" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.58%)</title><rect x="1108.4" y="1235.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1111.4" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.29%)</title><rect x="1111.8" y="1219.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1114.8" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.29%)</title><rect x="1111.8" y="1203.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1114.8" y="1214.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.29%)</title><rect x="1115.2" y="1235.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1118.2" y="1246.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.29%)</title><rect x="1115.2" y="1219.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1118.2" y="1230.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.29%)</title><rect x="1115.2" y="1203.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1118.2" y="1214.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.29%)</title><rect x="1115.2" y="1187.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1118.2" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.29%)</title><rect x="1115.2" y="1171.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1118.2" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (8 samples, 2.31%)</title><rect x="1118.6" y="1251.0" width="27.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1121.6" y="1262.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (8 samples, 2.31%)</title><rect x="1118.6" y="1235.0" width="27.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1121.6" y="1246.0">P..</text>
</g>
<g>
<title>AddPNode::Identity(PhaseTransform*) (1 samples, 0.29%)</title><rect x="1118.6" y="1219.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1121.6" y="1230.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.29%)</title><rect x="1118.6" y="1203.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1121.6" y="1214.0"></text>
</g>
<g>
<title>TypeLong::xmeet(Type const*) const (1 samples, 0.29%)</title><rect x="1118.6" y="1187.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1121.6" y="1198.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.29%)</title><rect x="1118.6" y="1171.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1121.6" y="1182.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.58%)</title><rect x="1122.0" y="1219.0" width="6.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1125.0" y="1230.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.29%)</title><rect x="1122.0" y="1203.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1125.0" y="1214.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.29%)</title><rect x="1122.0" y="1187.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1125.0" y="1198.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.29%)</title><rect x="1122.0" y="1171.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1125.0" y="1182.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.29%)</title><rect x="1122.0" y="1155.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1125.0" y="1166.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.29%)</title><rect x="1122.0" y="1139.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1125.0" y="1150.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.29%)</title><rect x="1122.0" y="1123.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1125.0" y="1134.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.29%)</title><rect x="1122.0" y="1107.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1125.0" y="1118.0"></text>
</g>
<g>
<title>TypeOopPtr::klass() const (1 samples, 0.29%)</title><rect x="1122.0" y="1091.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1125.0" y="1102.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.29%)</title><rect x="1125.4" y="1203.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1128.4" y="1214.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.29%)</title><rect x="1128.8" y="1219.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1131.8" y="1230.0"></text>
</g>
<g>
<title>Node::destruct() (1 samples, 0.29%)</title><rect x="1132.2" y="1219.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1135.2" y="1230.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.29%)</title><rect x="1135.6" y="1219.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1138.6" y="1230.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.29%)</title><rect x="1135.6" y="1203.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1138.6" y="1214.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.29%)</title><rect x="1139.0" y="1219.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1142.0" y="1230.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.29%)</title><rect x="1142.4" y="1219.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1145.4" y="1230.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.29%)</title><rect x="1142.4" y="1203.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1145.4" y="1214.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1142.4" y="1187.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.4" y="1198.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1142.4" y="1171.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1145.4" y="1182.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1142.4" y="1155.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.4" y="1166.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1142.4" y="1139.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1145.4" y="1150.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1142.4" y="1123.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1145.4" y="1134.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1142.4" y="1107.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1145.4" y="1118.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1142.4" y="1091.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.4" y="1102.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1142.4" y="1075.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1145.4" y="1086.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1142.4" y="1059.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1145.4" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1142.4" y="1043.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.4" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1142.4" y="1027.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1145.4" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1142.4" y="1011.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1145.4" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1142.4" y="995.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1145.4" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1142.4" y="979.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1145.4" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1142.4" y="963.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1145.4" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1142.4" y="947.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.4" y="958.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.29%)</title><rect x="1142.4" y="931.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1145.4" y="942.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.29%)</title><rect x="1142.4" y="915.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1145.4" y="926.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.29%)</title><rect x="1145.8" y="1251.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.8" y="1262.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.29%)</title><rect x="1145.8" y="1235.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1148.8" y="1246.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="1145.8" y="1219.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1148.8" y="1230.0"></text>
</g>
<g>
<title>Node::operator new(unsigned long, Compile*) (1 samples, 0.29%)</title><rect x="1145.8" y="1203.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.8" y="1214.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.29%)</title><rect x="1149.2" y="1251.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.2" y="1262.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_lock_node(LockNode*) (1 samples, 0.29%)</title><rect x="1149.2" y="1235.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.2" y="1246.0"></text>
</g>
<g>
<title>PhaseMacroExpand::opt_bits_test(Node*, Node*, int, Node*, int, int, bool) (1 samples, 0.29%)</title><rect x="1149.2" y="1219.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1152.2" y="1230.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*) (1 samples, 0.29%)</title><rect x="1149.2" y="1203.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1152.2" y="1214.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 2.02%)</title><rect x="1152.6" y="1267.0" width="23.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.6" y="1278.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 2.02%)</title><rect x="1152.6" y="1251.0" width="23.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.6" y="1262.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 2.02%)</title><rect x="1152.6" y="1235.0" width="23.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.6" y="1246.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 2.02%)</title><rect x="1152.6" y="1219.0" width="23.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.6" y="1230.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 2.02%)</title><rect x="1152.6" y="1203.0" width="23.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.6" y="1214.0">P..</text>
</g>
<g>
<title>Parse::do_call() (7 samples, 2.02%)</title><rect x="1152.6" y="1187.0" width="23.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.6" y="1198.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.29%)</title><rect x="1152.6" y="1171.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.6" y="1182.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.29%)</title><rect x="1152.6" y="1155.0" width="3.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1155.6" y="1166.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.29%)</title><rect x="1152.6" y="1139.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.6" y="1150.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.29%)</title><rect x="1152.6" y="1123.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.6" y="1134.0"></text>
</g>
<g>
<title>ciTypeFlow::ciTypeFlow(ciEnv*, ciMethod*, int) (1 samples, 0.29%)</title><rect x="1152.6" y="1107.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.6" y="1118.0"></text>
</g>
<g>
<title>ciMethod::get_method_blocks() (1 samples, 0.29%)</title><rect x="1152.6" y="1091.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.6" y="1102.0"></text>
</g>
<g>
<title>ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*) (1 samples, 0.29%)</title><rect x="1152.6" y="1075.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.6" y="1086.0"></text>
</g>
<g>
<title>ciMethodBlocks::do_analysis() (1 samples, 0.29%)</title><rect x="1152.6" y="1059.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.6" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.15%)</title><rect x="1156.0" y="1171.0" width="13.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.0" y="1182.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.15%)</title><rect x="1156.0" y="1155.0" width="13.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.0" y="1166.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.86%)</title><rect x="1156.0" y="1139.0" width="10.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.0" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.86%)</title><rect x="1156.0" y="1123.0" width="10.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.0" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.86%)</title><rect x="1156.0" y="1107.0" width="10.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.0" y="1118.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.86%)</title><rect x="1156.0" y="1091.0" width="10.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.0" y="1102.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.29%)</title><rect x="1156.0" y="1075.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.0" y="1086.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.29%)</title><rect x="1156.0" y="1059.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.0" y="1070.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.29%)</title><rect x="1156.0" y="1043.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.0" y="1054.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.29%)</title><rect x="1156.0" y="1027.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.0" y="1038.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle, Thread*) (1 samples, 0.29%)</title><rect x="1156.0" y="1011.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.0" y="1022.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.58%)</title><rect x="1159.4" y="1075.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.4" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.58%)</title><rect x="1159.4" y="1059.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.4" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.58%)</title><rect x="1159.4" y="1043.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.4" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.58%)</title><rect x="1159.4" y="1027.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.4" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.58%)</title><rect x="1159.4" y="1011.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.4" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.58%)</title><rect x="1159.4" y="995.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.4" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.58%)</title><rect x="1159.4" y="979.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.4" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.58%)</title><rect x="1159.4" y="963.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1162.4" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.58%)</title><rect x="1159.4" y="947.0" width="6.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.4" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.58%)</title><rect x="1159.4" y="931.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.4" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.58%)</title><rect x="1159.4" y="915.0" width="6.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.4" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.58%)</title><rect x="1159.4" y="899.0" width="6.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.4" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.58%)</title><rect x="1159.4" y="883.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.4" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.58%)</title><rect x="1159.4" y="867.0" width="6.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.4" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.58%)</title><rect x="1159.4" y="851.0" width="6.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1162.4" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.58%)</title><rect x="1159.4" y="835.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.4" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.58%)</title><rect x="1159.4" y="819.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.4" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.58%)</title><rect x="1159.4" y="803.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.4" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1159.4" y="787.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.4" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1159.4" y="771.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.4" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1159.4" y="755.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.4" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1159.4" y="739.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.4" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1159.4" y="723.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.4" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.29%)</title><rect x="1159.4" y="707.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.4" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1159.4" y="691.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1162.4" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1159.4" y="675.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.4" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1159.4" y="659.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1159.4" y="643.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.4" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1159.4" y="627.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.4" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.29%)</title><rect x="1159.4" y="611.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1159.4" y="595.0" width="3.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1162.4" y="606.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1159.4" y="579.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1162.4" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1159.4" y="563.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1162.4" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1159.4" y="547.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1159.4" y="531.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1159.4" y="515.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.29%)</title><rect x="1159.4" y="499.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1159.4" y="483.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.4" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1159.4" y="467.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.4" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1159.4" y="451.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1162.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1159.4" y="435.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1159.4" y="419.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.29%)</title><rect x="1159.4" y="403.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1162.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1159.4" y="387.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.4" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1159.4" y="371.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.4" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1159.4" y="355.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1159.4" y="339.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.4" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1159.4" y="323.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.4" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.29%)</title><rect x="1159.4" y="307.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1159.4" y="291.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.4" y="302.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1159.4" y="275.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.4" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1159.4" y="259.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.4" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1159.4" y="243.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.4" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1159.4" y="227.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.4" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1159.4" y="211.0" width="3.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1162.4" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.29%)</title><rect x="1159.4" y="195.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.4" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1159.4" y="179.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.4" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1159.4" y="163.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.4" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1159.4" y="147.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1162.4" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1159.4" y="131.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.4" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1159.4" y="115.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.4" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.29%)</title><rect x="1159.4" y="99.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1162.4" y="110.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.29%)</title><rect x="1159.4" y="83.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.4" y="94.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.29%)</title><rect x="1159.4" y="67.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.4" y="78.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.29%)</title><rect x="1159.4" y="51.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.4" y="62.0"></text>
</g>
<g>
<title>LoadUBNode::Ideal(PhaseGVN*, bool) (1 samples, 0.29%)</title><rect x="1159.4" y="35.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.4" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.29%)</title><rect x="1162.8" y="787.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.29%)</title><rect x="1162.8" y="771.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.8" y="782.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.29%)</title><rect x="1162.8" y="755.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.8" y="766.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.29%)</title><rect x="1162.8" y="739.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.8" y="750.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.29%)</title><rect x="1162.8" y="723.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.29%)</title><rect x="1166.2" y="1139.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.2" y="1150.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.29%)</title><rect x="1166.2" y="1123.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.2" y="1134.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.29%)</title><rect x="1166.2" y="1107.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.2" y="1118.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1169.6" y="1171.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.6" y="1182.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1169.6" y="1155.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1172.6" y="1166.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1169.6" y="1139.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.6" y="1150.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1169.6" y="1123.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1172.6" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1169.6" y="1107.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.6" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.29%)</title><rect x="1169.6" y="1091.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.6" y="1102.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1169.6" y="1075.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.6" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1169.6" y="1059.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.6" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1169.6" y="1043.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.6" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1169.6" y="1027.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.6" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1169.6" y="1011.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.6" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.29%)</title><rect x="1169.6" y="995.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.6" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1169.6" y="979.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.6" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1169.6" y="963.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.6" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1169.6" y="947.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.6" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1169.6" y="931.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.6" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1169.6" y="915.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.6" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.29%)</title><rect x="1169.6" y="899.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.6" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1169.6" y="883.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.6" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1169.6" y="867.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.6" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1169.6" y="851.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.6" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1169.6" y="835.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.6" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1169.6" y="819.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.6" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.29%)</title><rect x="1169.6" y="803.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.6" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1169.6" y="787.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.6" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1169.6" y="771.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.6" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1169.6" y="755.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1169.6" y="739.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1169.6" y="723.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.29%)</title><rect x="1169.6" y="707.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1169.6" y="691.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.6" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1169.6" y="675.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.6" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1169.6" y="659.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1169.6" y="643.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1169.6" y="627.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.29%)</title><rect x="1169.6" y="611.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1169.6" y="595.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.6" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1169.6" y="579.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1172.6" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1169.6" y="563.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1169.6" y="547.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1172.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1169.6" y="531.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.29%)</title><rect x="1169.6" y="515.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.6" y="526.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.29%)</title><rect x="1169.6" y="499.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.6" y="510.0"></text>
</g>
<g>
<title>ciSignature::return_type() const (1 samples, 0.29%)</title><rect x="1173.0" y="1171.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.0" y="1182.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 0.86%)</title><rect x="1176.4" y="1299.0" width="10.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.4" y="1310.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 0.86%)</title><rect x="1176.4" y="1283.0" width="10.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.4" y="1294.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.86%)</title><rect x="1176.4" y="1267.0" width="10.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.4" y="1278.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.58%)</title><rect x="1176.4" y="1251.0" width="6.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.4" y="1262.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.29%)</title><rect x="1176.4" y="1235.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.4" y="1246.0"></text>
</g>
<g>
<title>GlobalValueNumbering::GlobalValueNumbering(IR*) (1 samples, 0.29%)</title><rect x="1176.4" y="1219.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.4" y="1230.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(BlockClosure*) (1 samples, 0.29%)</title><rect x="1176.4" y="1203.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.4" y="1214.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(boolArray&amp;, BlockClosure*) (1 samples, 0.29%)</title><rect x="1176.4" y="1187.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.4" y="1198.0"></text>
</g>
<g>
<title>SubstitutionResolver::block_do(BlockBegin*) (1 samples, 0.29%)</title><rect x="1176.4" y="1171.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.4" y="1182.0"></text>
</g>
<g>
<title>SubstitutionResolver::visit(Instruction**) (1 samples, 0.29%)</title><rect x="1176.4" y="1155.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.4" y="1166.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.29%)</title><rect x="1179.8" y="1235.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.8" y="1246.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.29%)</title><rect x="1179.8" y="1219.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.8" y="1230.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_profile_call(LIR_OpProfileCall*) (1 samples, 0.29%)</title><rect x="1179.8" y="1203.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.8" y="1214.0"></text>
</g>
<g>
<title>ciMethodData::offset_of_slot(ProfileData*, int) (1 samples, 0.29%)</title><rect x="1179.8" y="1187.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.8" y="1198.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.29%)</title><rect x="1183.2" y="1251.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.2" y="1262.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.29%)</title><rect x="1183.2" y="1235.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.2" y="1246.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.29%)</title><rect x="1183.2" y="1219.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.2" y="1230.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.29%)</title><rect x="1183.2" y="1203.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.2" y="1214.0"></text>
</g>
<g>
<title>G1CollectedHeap::register_nmethod(nmethod*) (1 samples, 0.29%)</title><rect x="1183.2" y="1187.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.2" y="1198.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.29%)</title><rect x="1183.2" y="1171.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.2" y="1182.0"></text>
</g>
<g>
<title>G1CodeRootSet::add(nmethod*) (1 samples, 0.29%)</title><rect x="1183.2" y="1155.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.2" y="1166.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.29%)</title><rect x="1186.6" y="1363.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.6" y="1374.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (1 samples, 0.29%)</title><rect x="1186.6" y="1347.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.6" y="1358.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.29%)</title><rect x="1186.6" y="1331.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.6" y="1342.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.29%)</title><rect x="1186.6" y="1315.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.6" y="1326.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (1 samples, 0.29%)</title><rect x="1186.6" y="1299.0" width="3.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1189.6" y="1310.0"></text>
</g>
</g>
</svg>
