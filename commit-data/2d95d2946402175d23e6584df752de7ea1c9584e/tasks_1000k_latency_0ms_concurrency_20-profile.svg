<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1222" onload="init(evt)" viewBox="0 0 1200 1222" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1205"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1205"> </text>
<g id="frames">
<g>
<title>all (1,171 samples, 100.00%)</title><rect x="10.0" y="1171.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1182.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (299 samples, 25.53%)</title><rect x="10.0" y="1155.0" width="301.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1166.0">com/linecorp/decaton/processor/runtime/Pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.09%)</title><rect x="10.0" y="1139.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (1 samples, 0.09%)</title><rect x="10.0" y="1123.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.09%)</title><rect x="10.0" y="1107.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.09%)</title><rect x="10.0" y="1091.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.doCommitOffsetsAsync (1 samples, 0.09%)</title><rect x="10.0" y="1075.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.sendOffsetCommitRequest (1 samples, 0.09%)</title><rect x="10.0" y="1059.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="10.0" y="1043.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="10.0" y="1027.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeAccess (1 samples, 0.09%)</title><rect x="10.0" y="1011.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (297 samples, 25.36%)</title><rect x="11.0" y="1139.0" width="299.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="14.0" y="1150.0">com/linecorp/decaton/processor/runtime/i..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (7 samples, 0.60%)</title><rect x="13.0" y="1123.0" width="7.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.0" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (7 samples, 0.60%)</title><rect x="13.0" y="1107.0" width="7.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.0" y="1118.0"></text>
</g>
<g>
<title>java/util/Collection.stream (3 samples, 0.26%)</title><rect x="14.0" y="1091.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.0" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (3 samples, 0.26%)</title><rect x="14.0" y="1075.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.0" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (3 samples, 0.26%)</title><rect x="14.0" y="1059.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.0" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.26%)</title><rect x="17.1" y="1091.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="20.1" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.09%)</title><rect x="17.1" y="1075.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.1" y="1086.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.09%)</title><rect x="17.1" y="1059.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.1" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.09%)</title><rect x="17.1" y="1043.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="20.1" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="17.1" y="1027.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="20.1" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="17.1" y="1011.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.1" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.17%)</title><rect x="18.1" y="1075.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="21.1" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="19.1" y="1059.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.1" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="19.1" y="1043.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="22.1" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="19.1" y="1027.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.1" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="19.1" y="1011.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.1" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="19.1" y="995.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.1" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="19.1" y="979.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="22.1" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$267/1300658964.test (1 samples, 0.09%)</title><rect x="19.1" y="963.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.1" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (3 samples, 0.26%)</title><rect x="20.1" y="1123.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="23.1" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (3 samples, 0.26%)</title><rect x="20.1" y="1107.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="23.1" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (3 samples, 0.26%)</title><rect x="20.1" y="1091.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.1" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$266/1858625419.accept (3 samples, 0.26%)</title><rect x="20.1" y="1075.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="23.1" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (3 samples, 0.26%)</title><rect x="20.1" y="1059.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.1" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (3 samples, 0.26%)</title><rect x="20.1" y="1043.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="23.1" y="1054.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.17%)</title><rect x="21.1" y="1027.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="24.1" y="1038.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.09%)</title><rect x="22.1" y="1011.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="25.1" y="1022.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.09%)</title><rect x="22.1" y="995.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="25.1" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.09%)</title><rect x="23.1" y="1123.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.1" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.elapsedNanos (1 samples, 0.09%)</title><rect x="23.1" y="1107.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="26.1" y="1118.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (223 samples, 19.04%)</title><rect x="24.1" y="1123.0" width="224.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="27.1" y="1134.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$265/1036146590.accept (214 samples, 18.27%)</title><rect x="27.1" y="1107.0" width="215.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="30.1" y="1118.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (214 samples, 18.27%)</title><rect x="27.1" y="1091.0" width="215.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="30.1" y="1102.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (164 samples, 14.01%)</title><rect x="32.2" y="1075.0" width="165.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="35.2" y="1086.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (164 samples, 14.01%)</title><rect x="32.2" y="1059.0" width="165.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="35.2" y="1070.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (164 samples, 14.01%)</title><rect x="32.2" y="1043.0" width="165.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="35.2" y="1054.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (164 samples, 14.01%)</title><rect x="32.2" y="1027.0" width="165.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="35.2" y="1038.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (164 samples, 14.01%)</title><rect x="32.2" y="1011.0" width="165.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="35.2" y="1022.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (164 samples, 14.01%)</title><rect x="32.2" y="995.0" width="165.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="35.2" y="1006.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (121 samples, 10.33%)</title><rect x="32.2" y="979.0" width="121.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="35.2" y="990.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (33 samples, 2.82%)</title><rect x="32.2" y="963.0" width="33.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="35.2" y="974.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (33 samples, 2.82%)</title><rect x="32.2" y="947.0" width="33.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="35.2" y="958.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.09%)</title><rect x="44.3" y="931.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="47.3" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (20 samples, 1.71%)</title><rect x="45.3" y="931.0" width="20.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="48.3" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (20 samples, 1.71%)</title><rect x="45.3" y="915.0" width="20.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="48.3" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (13 samples, 1.11%)</title><rect x="65.4" y="963.0" width="13.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="68.4" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (13 samples, 1.11%)</title><rect x="65.4" y="947.0" width="13.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="68.4" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.26%)</title><rect x="67.4" y="931.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="70.4" y="942.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (3 samples, 0.26%)</title><rect x="67.4" y="915.0" width="3.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="70.4" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (8 samples, 0.68%)</title><rect x="70.5" y="931.0" width="8.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="73.5" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (75 samples, 6.40%)</title><rect x="78.5" y="963.0" width="75.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="81.5" y="974.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (75 samples, 6.40%)</title><rect x="78.5" y="947.0" width="75.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="81.5" y="958.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (75 samples, 6.40%)</title><rect x="78.5" y="931.0" width="75.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="81.5" y="942.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (75 samples, 6.40%)</title><rect x="78.5" y="915.0" width="75.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="81.5" y="926.0">java/uti..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (72 samples, 6.15%)</title><rect x="81.5" y="899.0" width="72.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="84.5" y="910.0">sun/misc..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.09%)</title><rect x="82.6" y="883.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="85.6" y="894.0"></text>
</g>
<g>
<title>Unsafe_Unpark (65 samples, 5.55%)</title><rect x="83.6" y="883.0" width="65.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="86.6" y="894.0">Unsafe_..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="83.6" y="867.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="86.6" y="878.0"></text>
</g>
<g>
<title>__pthread_cond_signal (44 samples, 3.76%)</title><rect x="84.6" y="867.0" width="44.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="87.6" y="878.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (4 samples, 0.34%)</title><rect x="128.9" y="867.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="131.9" y="878.0"></text>
</g>
<g>
<title>pthread_mutex_lock (16 samples, 1.37%)</title><rect x="132.9" y="867.0" width="16.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="135.9" y="878.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.26%)</title><rect x="149.1" y="883.0" width="3.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="152.1" y="894.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.09%)</title><rect x="152.1" y="883.0" width="1.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="155.1" y="894.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.09%)</title><rect x="153.1" y="883.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="156.1" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (35 samples, 2.99%)</title><rect x="154.1" y="979.0" width="35.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="157.1" y="990.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (35 samples, 2.99%)</title><rect x="154.1" y="963.0" width="35.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="157.1" y="974.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (35 samples, 2.99%)</title><rect x="154.1" y="947.0" width="35.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="157.1" y="958.0">jav..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.17%)</title><rect x="187.4" y="931.0" width="2.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="190.4" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (7 samples, 0.60%)</title><rect x="189.4" y="979.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="192.4" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (7 samples, 0.60%)</title><rect x="189.4" y="963.0" width="7.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="192.4" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (7 samples, 0.60%)</title><rect x="189.4" y="947.0" width="7.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="192.4" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.09%)</title><rect x="196.4" y="979.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="199.4" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.09%)</title><rect x="196.4" y="963.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="199.4" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.09%)</title><rect x="196.4" y="947.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="199.4" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.09%)</title><rect x="196.4" y="931.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="199.4" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (2 samples, 0.17%)</title><rect x="197.4" y="1075.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="200.4" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 0.17%)</title><rect x="197.4" y="1059.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="200.4" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (7 samples, 0.60%)</title><rect x="199.4" y="1075.0" width="7.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="202.4" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.60%)</title><rect x="199.4" y="1059.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="202.4" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.60%)</title><rect x="199.4" y="1043.0" width="7.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="202.4" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/TaskRequest.&lt;init&gt; (35 samples, 2.99%)</title><rect x="206.5" y="1075.0" width="35.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="209.5" y="1086.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (35 samples, 2.99%)</title><rect x="206.5" y="1059.0" width="35.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="209.5" y="1070.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 0.43%)</title><rect x="231.7" y="1043.0" width="5.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="234.7" y="1054.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.09%)</title><rect x="231.7" y="1027.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="234.7" y="1038.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.09%)</title><rect x="231.7" y="1011.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="234.7" y="1022.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.09%)</title><rect x="231.7" y="995.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="234.7" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="231.7" y="979.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="234.7" y="990.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="231.7" y="963.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="234.7" y="974.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.34%)</title><rect x="232.7" y="1027.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="235.7" y="1038.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.43%)</title><rect x="236.7" y="1043.0" width="5.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="239.7" y="1054.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="241.8" y="1075.0" width="1.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="244.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (6 samples, 0.51%)</title><rect x="242.8" y="1107.0" width="6.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="245.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (6 samples, 0.51%)</title><rect x="242.8" y="1091.0" width="6.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="245.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (6 samples, 0.51%)</title><rect x="242.8" y="1075.0" width="6.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="245.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (6 samples, 0.51%)</title><rect x="242.8" y="1059.0" width="6.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="245.8" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.09%)</title><rect x="247.8" y="1043.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="250.8" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.09%)</title><rect x="248.8" y="1123.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="251.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (60 samples, 5.12%)</title><rect x="249.8" y="1123.0" width="60.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="252.8" y="1134.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (60 samples, 5.12%)</title><rect x="249.8" y="1107.0" width="60.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="252.8" y="1118.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquireAndEnsureOpen (1 samples, 0.09%)</title><rect x="249.8" y="1091.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="252.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (38 samples, 3.25%)</title><rect x="250.8" y="1091.0" width="38.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="253.8" y="1102.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (37 samples, 3.16%)</title><rect x="251.8" y="1075.0" width="37.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="254.8" y="1086.0">org..</text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="251.8" y="1059.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="254.8" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="251.8" y="1043.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="254.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (1 samples, 0.09%)</title><rect x="251.8" y="1027.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="254.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (36 samples, 3.07%)</title><rect x="252.9" y="1059.0" width="36.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="255.9" y="1070.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (30 samples, 2.56%)</title><rect x="253.9" y="1043.0" width="30.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="256.9" y="1054.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (30 samples, 2.56%)</title><rect x="253.9" y="1027.0" width="30.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="256.9" y="1038.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (14 samples, 1.20%)</title><rect x="255.9" y="1011.0" width="14.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="258.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (10 samples, 0.85%)</title><rect x="255.9" y="995.0" width="10.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="258.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (10 samples, 0.85%)</title><rect x="255.9" y="979.0" width="10.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="258.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (10 samples, 0.85%)</title><rect x="255.9" y="963.0" width="10.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="258.9" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (10 samples, 0.85%)</title><rect x="255.9" y="947.0" width="10.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="258.9" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (10 samples, 0.85%)</title><rect x="255.9" y="931.0" width="10.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="258.9" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (10 samples, 0.85%)</title><rect x="255.9" y="915.0" width="10.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="258.9" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (10 samples, 0.85%)</title><rect x="255.9" y="899.0" width="10.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="258.9" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (4 samples, 0.34%)</title><rect x="266.0" y="995.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="269.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (4 samples, 0.34%)</title><rect x="266.0" y="979.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="269.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.ensureNoneRemaining (4 samples, 0.34%)</title><rect x="266.0" y="963.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="269.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (14 samples, 1.20%)</title><rect x="270.0" y="1011.0" width="14.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="273.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (14 samples, 1.20%)</title><rect x="270.0" y="995.0" width="14.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="273.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (14 samples, 1.20%)</title><rect x="270.0" y="979.0" width="14.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="273.0" y="990.0"></text>
</g>
<g>
<title>java/util/Optional.of (14 samples, 1.20%)</title><rect x="270.0" y="963.0" width="14.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="273.0" y="974.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.17%)</title><rect x="282.1" y="947.0" width="2.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="285.1" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (4 samples, 0.34%)</title><rect x="284.1" y="1043.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="287.1" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (4 samples, 0.34%)</title><rect x="284.1" y="1027.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="287.1" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (3 samples, 0.26%)</title><rect x="284.1" y="1011.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="287.1" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.26%)</title><rect x="284.1" y="995.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="287.1" y="1006.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.09%)</title><rect x="286.1" y="979.0" width="1.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="289.1" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="287.1" y="1011.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="290.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="287.1" y="995.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="290.1" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="287.1" y="979.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="290.1" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isFetchable (1 samples, 0.09%)</title><rect x="288.1" y="1043.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="291.1" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.09%)</title><rect x="288.1" y="1027.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="291.1" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.09%)</title><rect x="288.1" y="1011.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="291.1" y="1022.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.09%)</title><rect x="288.1" y="995.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="291.1" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="288.1" y="979.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="291.1" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (8 samples, 0.68%)</title><rect x="289.1" y="1091.0" width="8.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="292.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (7 samples, 0.60%)</title><rect x="289.1" y="1075.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="292.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (4 samples, 0.34%)</title><rect x="289.1" y="1059.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="292.1" y="1070.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 0.26%)</title><rect x="289.1" y="1043.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="292.1" y="1054.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.09%)</title><rect x="290.1" y="1027.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="293.1" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$233/492911540.accept (1 samples, 0.09%)</title><rect x="290.1" y="1011.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="293.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$233/492911540.accept (1 samples, 0.09%)</title><rect x="291.1" y="1027.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="294.1" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.09%)</title><rect x="291.1" y="1011.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="294.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.09%)</title><rect x="291.1" y="995.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="294.1" y="1006.0"></text>
</g>
<g>
<title>java/util/Optional.map (1 samples, 0.09%)</title><rect x="291.1" y="979.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="294.1" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$$Lambda$235/1746703051.apply (1 samples, 0.09%)</title><rect x="291.1" y="963.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="294.1" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lambda$leaderAndEpoch$6 (1 samples, 0.09%)</title><rect x="291.1" y="947.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="294.1" y="958.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (1 samples, 0.09%)</title><rect x="291.1" y="931.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="294.1" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.09%)</title><rect x="292.2" y="1043.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="295.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.09%)</title><rect x="292.2" y="1027.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="295.2" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="292.2" y="1011.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="295.2" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="292.2" y="995.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="295.2" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="292.2" y="979.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="295.2" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="292.2" y="963.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="295.2" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="292.2" y="947.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="295.2" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.09%)</title><rect x="292.2" y="931.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="295.2" y="942.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$244/1097445010.get (1 samples, 0.09%)</title><rect x="292.2" y="915.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="295.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (3 samples, 0.26%)</title><rect x="293.2" y="1059.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="296.2" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (3 samples, 0.26%)</title><rect x="293.2" y="1043.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="296.2" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.26%)</title><rect x="293.2" y="1027.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="296.2" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.17%)</title><rect x="294.2" y="1011.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="297.2" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.17%)</title><rect x="294.2" y="995.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="297.2" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.17%)</title><rect x="294.2" y="979.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="297.2" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.17%)</title><rect x="294.2" y="963.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="297.2" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (2 samples, 0.17%)</title><rect x="294.2" y="947.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="297.2" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.09%)</title><rect x="294.2" y="931.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="297.2" y="942.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.09%)</title><rect x="294.2" y="915.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="297.2" y="926.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.09%)</title><rect x="295.2" y="931.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="298.2" y="942.0"></text>
</g>
<g>
<title>java/util/stream/Sink.begin (1 samples, 0.09%)</title><rect x="295.2" y="915.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="298.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.09%)</title><rect x="296.2" y="1075.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="299.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.09%)</title><rect x="296.2" y="1059.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="299.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.subscription (1 samples, 0.09%)</title><rect x="296.2" y="1043.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="299.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.maybeTriggerWakeup (1 samples, 0.09%)</title><rect x="297.2" y="1091.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="300.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (6 samples, 0.51%)</title><rect x="298.2" y="1091.0" width="6.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="301.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (6 samples, 0.51%)</title><rect x="298.2" y="1075.0" width="6.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="301.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (6 samples, 0.51%)</title><rect x="298.2" y="1059.0" width="6.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="301.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.09%)</title><rect x="298.2" y="1043.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="301.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.09%)</title><rect x="298.2" y="1027.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="301.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesReceived (1 samples, 0.09%)</title><rect x="298.2" y="1011.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="301.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="298.2" y="995.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="301.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="298.2" y="979.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="301.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.09%)</title><rect x="298.2" y="963.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="301.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.09%)</title><rect x="298.2" y="947.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="301.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="298.2" y="931.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="301.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (5 samples, 0.43%)</title><rect x="299.2" y="1043.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="302.2" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.09%)</title><rect x="299.2" y="1027.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="302.2" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.09%)</title><rect x="299.2" y="1011.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="302.2" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="299.2" y="995.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="302.2" y="1006.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="299.2" y="979.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="302.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.09%)</title><rect x="300.2" y="1027.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="303.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.09%)</title><rect x="300.2" y="1011.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="303.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.09%)</title><rect x="300.2" y="995.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="303.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.09%)</title><rect x="300.2" y="979.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="303.2" y="990.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.09%)</title><rect x="300.2" y="963.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="303.2" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.09%)</title><rect x="300.2" y="947.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="303.2" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.09%)</title><rect x="300.2" y="931.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="303.2" y="942.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.09%)</title><rect x="300.2" y="915.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="303.2" y="926.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.09%)</title><rect x="300.2" y="899.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="303.2" y="910.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.put (1 samples, 0.09%)</title><rect x="300.2" y="883.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="303.2" y="894.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.09%)</title><rect x="300.2" y="867.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="303.2" y="878.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextPutIndex (1 samples, 0.09%)</title><rect x="300.2" y="851.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="303.2" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (3 samples, 0.26%)</title><rect x="301.2" y="1027.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="304.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (3 samples, 0.26%)</title><rect x="301.2" y="1011.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="304.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (3 samples, 0.26%)</title><rect x="301.2" y="995.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="304.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (3 samples, 0.26%)</title><rect x="301.2" y="979.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="304.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (3 samples, 0.26%)</title><rect x="301.2" y="963.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="304.2" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (3 samples, 0.26%)</title><rect x="301.2" y="947.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="304.2" y="958.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="301.2" y="931.0" width="1.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="304.2" y="942.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="302.2" y="931.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="305.2" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.09%)</title><rect x="303.2" y="931.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="306.2" y="942.0"></text>
</g>
<g>
<title>_init (1 samples, 0.09%)</title><rect x="303.2" y="915.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="306.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (5 samples, 0.43%)</title><rect x="304.2" y="1091.0" width="5.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="307.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (5 samples, 0.43%)</title><rect x="304.2" y="1075.0" width="5.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="307.2" y="1086.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.09%)</title><rect x="304.2" y="1059.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="307.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$257/73143154.accept (1 samples, 0.09%)</title><rect x="304.2" y="1043.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="307.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.09%)</title><rect x="304.2" y="1027.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="307.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.09%)</title><rect x="304.2" y="1011.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="307.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.09%)</title><rect x="304.2" y="995.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="307.2" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="304.2" y="979.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="307.2" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="304.2" y="963.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="307.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (4 samples, 0.34%)</title><rect x="305.3" y="1059.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="308.3" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.next (1 samples, 0.09%)</title><rect x="306.3" y="1043.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="309.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (2 samples, 0.17%)</title><rect x="307.3" y="1043.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="310.3" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="307.3" y="1027.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="310.3" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="307.3" y="1011.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="310.3" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="307.3" y="995.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="310.3" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="307.3" y="979.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="310.3" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="307.3" y="963.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="310.3" y="974.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="307.3" y="947.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="310.3" y="958.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.09%)</title><rect x="307.3" y="931.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="310.3" y="942.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="307.3" y="915.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="310.3" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="307.3" y="899.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="310.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$259/684021959.test (1 samples, 0.09%)</title><rect x="307.3" y="883.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="310.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$fetchablePartitions$1 (1 samples, 0.09%)</title><rect x="307.3" y="867.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="310.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$258/1911179760.test (1 samples, 0.09%)</title><rect x="307.3" y="851.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="310.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$fetchablePartitions$6 (1 samples, 0.09%)</title><rect x="307.3" y="835.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="310.3" y="846.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.09%)</title><rect x="307.3" y="819.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="310.3" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.09%)</title><rect x="307.3" y="803.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="310.3" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="307.3" y="787.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="310.3" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (1 samples, 0.09%)</title><rect x="308.3" y="1027.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="311.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.09%)</title><rect x="309.3" y="1091.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="312.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="309.3" y="1075.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="312.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="309.3" y="1059.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="312.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="309.3" y="1043.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="312.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.09%)</title><rect x="309.3" y="1027.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="312.3" y="1038.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="309.3" y="1011.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="312.3" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.09%)</title><rect x="310.3" y="1139.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="313.3" y="1150.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.09%)</title><rect x="310.3" y="1123.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="313.3" y="1134.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="310.3" y="1107.0" width="1.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="313.3" y="1118.0"></text>
</g>
<g>
<title>java/lang/Thread.run (720 samples, 61.49%)</title><rect x="311.3" y="1155.0" width="725.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="314.3" y="1166.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (720 samples, 61.49%)</title><rect x="311.3" y="1139.0" width="725.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="314.3" y="1150.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (720 samples, 61.49%)</title><rect x="311.3" y="1123.0" width="725.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="314.3" y="1134.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$285/747411722.run (496 samples, 42.36%)</title><rect x="313.3" y="1107.0" width="499.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="316.3" y="1118.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$70 (496 samples, 42.36%)</title><rect x="313.3" y="1091.0" width="499.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="316.3" y="1102.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (496 samples, 42.36%)</title><rect x="313.3" y="1075.0" width="499.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="316.3" y="1086.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.process..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="317.3" y="1059.0" width="1.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="320.3" y="1070.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="317.3" y="1043.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="320.3" y="1054.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.34%)</title><rect x="318.4" y="1059.0" width="4.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="321.4" y="1070.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.26%)</title><rect x="319.4" y="1043.0" width="3.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="322.4" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (485 samples, 41.42%)</title><rect x="322.4" y="1059.0" width="488.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="325.4" y="1070.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.sch..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="328.4" y="1043.0" width="1.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="331.4" y="1054.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="328.4" y="1027.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="331.4" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.maybeDirty (4 samples, 0.34%)</title><rect x="329.4" y="1043.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="332.4" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (159 samples, 13.58%)</title><rect x="333.5" y="1043.0" width="160.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="336.5" y="1054.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$42/815674463.extract (159 samples, 13.58%)</title><rect x="333.5" y="1027.0" width="160.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="336.5" y="1038.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (159 samples, 13.58%)</title><rect x="333.5" y="1011.0" width="160.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="336.5" y="1022.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (159 samples, 13.58%)</title><rect x="333.5" y="995.0" width="160.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="336.5" y="1006.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (159 samples, 13.58%)</title><rect x="333.5" y="979.0" width="160.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="336.5" y="990.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (159 samples, 13.58%)</title><rect x="333.5" y="963.0" width="160.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="336.5" y="974.0">com/fasterxml/jackso..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (52 samples, 4.44%)</title><rect x="333.5" y="947.0" width="52.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="336.5" y="958.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (30 samples, 2.56%)</title><rect x="333.5" y="931.0" width="30.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="336.5" y="942.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (30 samples, 2.56%)</title><rect x="333.5" y="915.0" width="30.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="336.5" y="926.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (21 samples, 1.79%)</title><rect x="333.5" y="899.0" width="21.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="336.5" y="910.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.getMask (1 samples, 0.09%)</title><rect x="353.6" y="883.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="356.6" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (9 samples, 0.77%)</title><rect x="354.6" y="899.0" width="9.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="357.6" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.43%)</title><rect x="356.6" y="883.0" width="5.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="359.6" y="894.0"></text>
</g>
<g>
<title>java/lang/ref/SoftReference.get (1 samples, 0.09%)</title><rect x="361.7" y="883.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="364.7" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.09%)</title><rect x="362.7" y="883.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="365.7" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (22 samples, 1.88%)</title><rect x="363.7" y="931.0" width="22.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="366.7" y="942.0">c..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="363.7" y="915.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="366.7" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="363.7" y="899.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="366.7" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="363.7" y="883.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="366.7" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="363.7" y="867.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="366.7" y="878.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="363.7" y="851.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="366.7" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (21 samples, 1.79%)</title><rect x="364.7" y="915.0" width="21.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="367.7" y="926.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.09%)</title><rect x="364.7" y="899.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="367.7" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.setEncoding (1 samples, 0.09%)</title><rect x="364.7" y="883.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="367.7" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (10 samples, 0.85%)</title><rect x="365.7" y="899.0" width="10.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="368.7" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.setEncoding (1 samples, 0.09%)</title><rect x="371.8" y="883.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="374.8" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.checkUTF16 (1 samples, 0.09%)</title><rect x="372.8" y="883.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="375.8" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 0.17%)</title><rect x="373.8" y="883.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="376.8" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (5 samples, 0.43%)</title><rect x="375.8" y="899.0" width="5.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="378.8" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="378.8" y="883.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="381.8" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="378.8" y="867.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="381.8" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="378.8" y="851.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="381.8" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="378.8" y="835.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="381.8" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="378.8" y="819.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="381.8" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="378.8" y="803.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="381.8" y="814.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="378.8" y="787.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="381.8" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.09%)</title><rect x="378.8" y="771.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="381.8" y="782.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.09%)</title><rect x="378.8" y="755.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="381.8" y="766.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.09%)</title><rect x="378.8" y="739.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="381.8" y="750.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_bytes_to_copy(HeapRegion*) (1 samples, 0.09%)</title><rect x="378.8" y="723.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="381.8" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.09%)</title><rect x="379.8" y="883.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="382.8" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.09%)</title><rect x="379.8" y="867.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="382.8" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="379.8" y="851.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="382.8" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="379.8" y="835.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="382.8" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="379.8" y="819.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="382.8" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="379.8" y="803.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="382.8" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (5 samples, 0.43%)</title><rect x="380.8" y="899.0" width="5.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="383.8" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (1 samples, 0.09%)</title><rect x="384.9" y="883.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="387.9" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (99 samples, 8.45%)</title><rect x="385.9" y="947.0" width="99.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="388.9" y="958.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (5 samples, 0.43%)</title><rect x="385.9" y="931.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="388.9" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (5 samples, 0.43%)</title><rect x="385.9" y="915.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="388.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (3 samples, 0.26%)</title><rect x="385.9" y="899.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="388.9" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (3 samples, 0.26%)</title><rect x="385.9" y="883.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="388.9" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.release (2 samples, 0.17%)</title><rect x="388.9" y="899.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="391.9" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (2 samples, 0.17%)</title><rect x="388.9" y="883.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="391.9" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (4 samples, 0.34%)</title><rect x="390.9" y="931.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="393.9" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.34%)</title><rect x="390.9" y="915.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="393.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.09%)</title><rect x="393.9" y="899.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="396.9" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (10 samples, 0.85%)</title><rect x="394.9" y="931.0" width="10.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="397.9" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (8 samples, 0.68%)</title><rect x="395.9" y="915.0" width="8.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="398.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (5 samples, 0.43%)</title><rect x="399.0" y="899.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="402.0" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (5 samples, 0.43%)</title><rect x="399.0" y="883.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="402.0" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="403.0" y="867.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="406.0" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="403.0" y="851.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="406.0" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="403.0" y="835.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="406.0" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.09%)</title><rect x="404.0" y="915.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="407.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (11 samples, 0.94%)</title><rect x="405.0" y="931.0" width="11.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="408.0" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (11 samples, 0.94%)</title><rect x="405.0" y="915.0" width="11.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="408.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (11 samples, 0.94%)</title><rect x="405.0" y="899.0" width="11.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="408.0" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (5 samples, 0.43%)</title><rect x="411.1" y="883.0" width="5.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="414.1" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (5 samples, 0.43%)</title><rect x="411.1" y="867.0" width="5.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="414.1" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (69 samples, 5.89%)</title><rect x="416.1" y="931.0" width="69.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="419.1" y="942.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (22 samples, 1.88%)</title><rect x="417.1" y="915.0" width="22.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="420.1" y="926.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (7 samples, 0.60%)</title><rect x="420.1" y="899.0" width="7.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="423.1" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (7 samples, 0.60%)</title><rect x="420.1" y="883.0" width="7.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="423.1" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (7 samples, 0.60%)</title><rect x="420.1" y="867.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="423.1" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (9 samples, 0.77%)</title><rect x="427.2" y="899.0" width="9.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="430.2" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (9 samples, 0.77%)</title><rect x="427.2" y="883.0" width="9.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="430.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (3 samples, 0.26%)</title><rect x="436.3" y="899.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="439.3" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (46 samples, 3.93%)</title><rect x="439.3" y="915.0" width="46.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="442.3" y="926.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (46 samples, 3.93%)</title><rect x="439.3" y="899.0" width="46.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="442.3" y="910.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (46 samples, 3.93%)</title><rect x="439.3" y="883.0" width="46.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="442.3" y="894.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (11 samples, 0.94%)</title><rect x="445.3" y="867.0" width="11.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="448.3" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.34%)</title><rect x="448.3" y="851.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="451.3" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.34%)</title><rect x="448.3" y="835.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="451.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.34%)</title><rect x="448.3" y="819.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="451.3" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (3 samples, 0.26%)</title><rect x="449.4" y="803.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="452.4" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (3 samples, 0.26%)</title><rect x="449.4" y="787.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="452.4" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.09%)</title><rect x="452.4" y="851.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="455.4" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.09%)</title><rect x="452.4" y="835.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="455.4" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.09%)</title><rect x="453.4" y="851.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="456.4" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.17%)</title><rect x="454.4" y="851.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="457.4" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (10 samples, 0.85%)</title><rect x="456.4" y="867.0" width="10.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="459.4" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (8 samples, 0.68%)</title><rect x="458.4" y="851.0" width="8.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="461.4" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (8 samples, 0.68%)</title><rect x="458.4" y="835.0" width="8.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="461.4" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (8 samples, 0.68%)</title><rect x="458.4" y="819.0" width="8.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="461.4" y="830.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (8 samples, 0.68%)</title><rect x="458.4" y="803.0" width="8.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="461.4" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (6 samples, 0.51%)</title><rect x="466.5" y="867.0" width="6.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="469.5" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (6 samples, 0.51%)</title><rect x="466.5" y="851.0" width="6.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="469.5" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (6 samples, 0.51%)</title><rect x="466.5" y="835.0" width="6.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="469.5" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (6 samples, 0.51%)</title><rect x="466.5" y="819.0" width="6.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="469.5" y="830.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (6 samples, 0.51%)</title><rect x="466.5" y="803.0" width="6.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="469.5" y="814.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (5 samples, 0.43%)</title><rect x="467.5" y="787.0" width="5.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="470.5" y="798.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor11.newInstance (4 samples, 0.34%)</title><rect x="468.5" y="771.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="471.5" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (4 samples, 0.34%)</title><rect x="472.5" y="867.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="475.5" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.34%)</title><rect x="472.5" y="851.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="475.5" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.34%)</title><rect x="472.5" y="835.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="475.5" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (9 samples, 0.77%)</title><rect x="476.6" y="867.0" width="9.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="479.6" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (2 samples, 0.17%)</title><rect x="483.6" y="851.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="486.6" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="483.6" y="835.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="486.6" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="483.6" y="819.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="486.6" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="484.6" y="835.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="487.6" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.09%)</title><rect x="484.6" y="819.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="487.6" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (8 samples, 0.68%)</title><rect x="485.6" y="947.0" width="8.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="488.6" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (8 samples, 0.68%)</title><rect x="485.6" y="931.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="488.6" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (8 samples, 0.68%)</title><rect x="485.6" y="915.0" width="8.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="488.6" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (8 samples, 0.68%)</title><rect x="485.6" y="899.0" width="8.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="488.6" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.09%)</title><rect x="492.7" y="883.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="495.7" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (288 samples, 24.59%)</title><rect x="493.7" y="1043.0" width="290.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="496.7" y="1054.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (58 samples, 4.95%)</title><rect x="495.7" y="1027.0" width="58.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="498.7" y="1038.0">com/li..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (58 samples, 4.95%)</title><rect x="495.7" y="1011.0" width="58.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="498.7" y="1022.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (56 samples, 4.78%)</title><rect x="497.7" y="995.0" width="56.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="500.7" y="1006.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (8 samples, 0.68%)</title><rect x="500.7" y="979.0" width="8.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="503.7" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (8 samples, 0.68%)</title><rect x="500.7" y="963.0" width="8.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="503.7" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (8 samples, 0.68%)</title><rect x="500.7" y="947.0" width="8.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="503.7" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (8 samples, 0.68%)</title><rect x="500.7" y="931.0" width="8.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="503.7" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.26%)</title><rect x="508.8" y="979.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="511.8" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.26%)</title><rect x="508.8" y="963.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="511.8" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.26%)</title><rect x="508.8" y="947.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="511.8" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.26%)</title><rect x="508.8" y="931.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="511.8" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.17%)</title><rect x="509.8" y="915.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="512.8" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (42 samples, 3.59%)</title><rect x="511.8" y="979.0" width="42.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="514.8" y="990.0">java..</text>
</g>
<g>
<title>java/util/HashMap.remove (38 samples, 3.25%)</title><rect x="515.9" y="963.0" width="38.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="518.9" y="974.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (7 samples, 0.60%)</title><rect x="547.1" y="947.0" width="7.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="550.1" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.51%)</title><rect x="554.2" y="1027.0" width="6.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="557.2" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.43%)</title><rect x="555.2" y="1011.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="558.2" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.43%)</title><rect x="555.2" y="995.0" width="5.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="558.2" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="559.2" y="979.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="562.2" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="559.2" y="963.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="562.2" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="559.2" y="947.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="562.2" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (158 samples, 13.49%)</title><rect x="560.2" y="1027.0" width="159.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="563.2" y="1038.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (158 samples, 13.49%)</title><rect x="560.2" y="1011.0" width="159.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="563.2" y="1022.0">com/linecorp/decaton..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="568.3" y="995.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="571.3" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="568.3" y="979.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="571.3" y="990.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.34%)</title><rect x="569.3" y="995.0" width="4.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="572.3" y="1006.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.26%)</title><rect x="570.3" y="979.0" width="3.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="573.3" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (63 samples, 5.38%)</title><rect x="573.3" y="995.0" width="63.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="576.3" y="1006.0">com/lin..</text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="583.4" y="979.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="586.4" y="990.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="583.4" y="963.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="586.4" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="583.4" y="947.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="586.4" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.09%)</title><rect x="583.4" y="931.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="586.4" y="942.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (48 samples, 4.10%)</title><rect x="584.4" y="979.0" width="48.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="587.4" y="990.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (34 samples, 2.90%)</title><rect x="587.4" y="963.0" width="34.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="590.4" y="974.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (19 samples, 1.62%)</title><rect x="596.5" y="947.0" width="19.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="599.5" y="958.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (19 samples, 1.62%)</title><rect x="596.5" y="931.0" width="19.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="599.5" y="942.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (19 samples, 1.62%)</title><rect x="596.5" y="915.0" width="19.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="599.5" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (18 samples, 1.54%)</title><rect x="596.5" y="899.0" width="18.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="599.5" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.09%)</title><rect x="596.5" y="883.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="599.5" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (5 samples, 0.43%)</title><rect x="597.5" y="883.0" width="5.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="600.5" y="894.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (4 samples, 0.34%)</title><rect x="598.5" y="867.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="601.5" y="878.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (3 samples, 0.26%)</title><rect x="599.5" y="851.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="602.5" y="862.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.09%)</title><rect x="599.5" y="835.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="602.5" y="846.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.09%)</title><rect x="600.5" y="835.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="603.5" y="846.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.09%)</title><rect x="601.5" y="835.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="604.5" y="846.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.09%)</title><rect x="602.5" y="883.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="605.5" y="894.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (10 samples, 0.85%)</title><rect x="603.5" y="883.0" width="10.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="606.5" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (7 samples, 0.60%)</title><rect x="605.5" y="867.0" width="7.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="608.5" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (4 samples, 0.34%)</title><rect x="606.5" y="851.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="609.5" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (2 samples, 0.17%)</title><rect x="608.6" y="835.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="611.6" y="846.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (2 samples, 0.17%)</title><rect x="608.6" y="819.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="611.6" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (2 samples, 0.17%)</title><rect x="608.6" y="803.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="611.6" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (2 samples, 0.17%)</title><rect x="608.6" y="787.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="611.6" y="798.0"></text>
</g>
<g>
<title>Monitor::owned_by_self() const (1 samples, 0.09%)</title><rect x="609.6" y="771.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="612.6" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::max_tlab_size() const (1 samples, 0.09%)</title><rect x="610.6" y="851.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="613.6" y="862.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="611.6" y="851.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="614.6" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="612.6" y="867.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="615.6" y="878.0"></text>
</g>
<g>
<title>nmethod::get_deopt_original_pc(frame const*) (1 samples, 0.09%)</title><rect x="613.6" y="883.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="616.6" y="894.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="614.6" y="899.0" width="1.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="617.6" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="614.6" y="883.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="617.6" y="894.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.34%)</title><rect x="615.6" y="947.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="618.6" y="958.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="619.6" y="947.0" width="1.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="622.6" y="958.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.09%)</title><rect x="620.7" y="947.0" width="1.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="623.7" y="958.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.09%)</title><rect x="621.7" y="963.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="624.7" y="974.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (10 samples, 0.85%)</title><rect x="622.7" y="963.0" width="10.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="625.7" y="974.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.34%)</title><rect x="632.7" y="979.0" width="4.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="635.7" y="990.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (8 samples, 0.68%)</title><rect x="636.8" y="995.0" width="8.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="639.8" y="1006.0"></text>
</g>
<g>
<title>java/lang/Long.toString (8 samples, 0.68%)</title><rect x="636.8" y="979.0" width="8.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="639.8" y="990.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (8 samples, 0.68%)</title><rect x="636.8" y="963.0" width="8.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="639.8" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 0.34%)</title><rect x="640.8" y="947.0" width="4.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="643.8" y="958.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (73 samples, 6.23%)</title><rect x="644.8" y="995.0" width="73.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="647.8" y="1006.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (71 samples, 6.06%)</title><rect x="646.9" y="979.0" width="71.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="649.9" y="990.0">ch/qos/l..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="646.9" y="963.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="649.9" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="646.9" y="947.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="649.9" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="646.9" y="931.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="649.9" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.09%)</title><rect x="646.9" y="915.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="649.9" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (70 samples, 5.98%)</title><rect x="647.9" y="963.0" width="70.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="650.9" y="974.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.put (64 samples, 5.47%)</title><rect x="653.9" y="947.0" width="64.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="656.9" y="958.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.putVal (35 samples, 2.99%)</title><rect x="683.1" y="931.0" width="35.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="686.1" y="942.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.26%)</title><rect x="699.3" y="915.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="702.3" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (12 samples, 1.02%)</title><rect x="702.3" y="915.0" width="12.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="705.3" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="713.4" y="899.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="716.4" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="713.4" y="883.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="716.4" y="894.0"></text>
</g>
<g>
<title>vtable stub (4 samples, 0.34%)</title><rect x="714.4" y="915.0" width="4.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="717.4" y="926.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="718.4" y="995.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="721.4" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (46 samples, 3.93%)</title><rect x="719.4" y="1027.0" width="46.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="722.4" y="1038.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (45 samples, 3.84%)</title><rect x="719.4" y="1011.0" width="45.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="722.4" y="1022.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$207/1399142726.process (17 samples, 1.45%)</title><rect x="723.4" y="995.0" width="17.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="726.4" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (17 samples, 1.45%)</title><rect x="723.4" y="979.0" width="17.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="726.4" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (13 samples, 1.11%)</title><rect x="725.5" y="963.0" width="13.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="728.5" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (7 samples, 0.60%)</title><rect x="731.5" y="947.0" width="7.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="734.5" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="731.5" y="931.0" width="1.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="734.5" y="942.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="731.5" y="915.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="734.5" y="926.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.51%)</title><rect x="732.5" y="931.0" width="6.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="735.5" y="942.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.51%)</title><rect x="732.5" y="915.0" width="6.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="735.5" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.17%)</title><rect x="738.6" y="963.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="741.6" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.17%)</title><rect x="738.6" y="947.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="741.6" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="739.6" y="931.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="742.6" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="739.6" y="915.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="742.6" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (3 samples, 0.26%)</title><rect x="740.6" y="995.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="743.6" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$291/1993211668.complete (2 samples, 0.17%)</title><rect x="743.6" y="995.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="746.6" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$78 (2 samples, 0.17%)</title><rect x="743.6" y="979.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="746.6" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.09%)</title><rect x="745.6" y="995.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="748.6" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (14 samples, 1.20%)</title><rect x="746.6" y="995.0" width="14.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="749.6" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (12 samples, 1.02%)</title><rect x="748.6" y="979.0" width="12.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="751.6" y="990.0"></text>
</g>
<g>
<title>itable stub (6 samples, 0.51%)</title><rect x="748.6" y="963.0" width="6.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="751.6" y="974.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (6 samples, 0.51%)</title><rect x="754.7" y="963.0" width="6.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="757.7" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.17%)</title><rect x="760.7" y="995.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="763.7" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.17%)</title><rect x="762.7" y="995.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="765.7" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="762.7" y="979.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="765.7" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="762.7" y="963.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="765.7" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="762.7" y="947.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="765.7" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="762.7" y="931.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="765.7" y="942.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="762.7" y="915.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="765.7" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.09%)</title><rect x="762.7" y="899.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="765.7" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.09%)</title><rect x="763.7" y="979.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="766.7" y="990.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.09%)</title><rect x="764.8" y="1011.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="767.8" y="1022.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1715183153.linkToTargetMethod (1 samples, 0.09%)</title><rect x="765.8" y="1027.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="768.8" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/399931359.invokeStatic_L3_L (1 samples, 0.09%)</title><rect x="765.8" y="1011.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="768.8" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$292/1810453648.get$Lambda (1 samples, 0.09%)</title><rect x="765.8" y="995.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="768.8" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="765.8" y="979.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="768.8" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="765.8" y="963.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="768.8" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="765.8" y="947.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="768.8" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (17 samples, 1.45%)</title><rect x="766.8" y="1027.0" width="17.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="769.8" y="1038.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.34%)</title><rect x="772.8" y="1011.0" width="4.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="775.8" y="1022.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.34%)</title><rect x="772.8" y="995.0" width="4.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="775.8" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (7 samples, 0.60%)</title><rect x="776.8" y="1011.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="779.8" y="1022.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.34%)</title><rect x="778.9" y="995.0" width="4.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="781.9" y="1006.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.34%)</title><rect x="778.9" y="979.0" width="4.0" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="781.9" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.09%)</title><rect x="782.9" y="995.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="785.9" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$295/1876352309.accept (1 samples, 0.09%)</title><rect x="782.9" y="979.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="785.9" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$61 (1 samples, 0.09%)</title><rect x="782.9" y="963.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="785.9" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$283/1671330511.complete (1 samples, 0.09%)</title><rect x="782.9" y="947.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="785.9" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$38 (1 samples, 0.09%)</title><rect x="782.9" y="931.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="785.9" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$282/1929224699.complete (1 samples, 0.09%)</title><rect x="782.9" y="915.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="785.9" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$68 (1 samples, 0.09%)</title><rect x="782.9" y="899.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="785.9" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (1 samples, 0.09%)</title><rect x="782.9" y="883.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="785.9" y="894.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.09%)</title><rect x="782.9" y="867.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="785.9" y="878.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.09%)</title><rect x="782.9" y="851.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="785.9" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (24 samples, 2.05%)</title><rect x="783.9" y="1043.0" width="24.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="786.9" y="1054.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (1 samples, 0.09%)</title><rect x="787.9" y="1027.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="790.9" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (19 samples, 1.62%)</title><rect x="788.9" y="1027.0" width="19.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="791.9" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (15 samples, 1.28%)</title><rect x="793.0" y="1011.0" width="15.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="796.0" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$295/1876352309.accept (15 samples, 1.28%)</title><rect x="793.0" y="995.0" width="15.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="796.0" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$61 (15 samples, 1.28%)</title><rect x="793.0" y="979.0" width="15.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="796.0" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$283/1671330511.complete (15 samples, 1.28%)</title><rect x="793.0" y="963.0" width="15.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="796.0" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$38 (15 samples, 1.28%)</title><rect x="793.0" y="947.0" width="15.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="796.0" y="958.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.09%)</title><rect x="793.0" y="931.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="796.0" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$282/1929224699.complete (14 samples, 1.20%)</title><rect x="794.0" y="931.0" width="14.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="797.0" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$68 (14 samples, 1.20%)</title><rect x="794.0" y="915.0" width="14.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="797.0" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (14 samples, 1.20%)</title><rect x="794.0" y="899.0" width="14.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="797.0" y="910.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (14 samples, 1.20%)</title><rect x="794.0" y="883.0" width="14.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="797.0" y="894.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (14 samples, 1.20%)</title><rect x="794.0" y="867.0" width="14.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="797.0" y="878.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.26%)</title><rect x="808.1" y="1043.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="811.1" y="1054.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.26%)</title><rect x="808.1" y="1027.0" width="3.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="811.1" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (2 samples, 0.17%)</title><rect x="811.1" y="1059.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="814.1" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (16 samples, 1.37%)</title><rect x="813.1" y="1107.0" width="16.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="816.1" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (16 samples, 1.37%)</title><rect x="813.1" y="1091.0" width="16.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="816.1" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (16 samples, 1.37%)</title><rect x="813.1" y="1075.0" width="16.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="816.1" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (16 samples, 1.37%)</title><rect x="813.1" y="1059.0" width="16.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="816.1" y="1070.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.34%)</title><rect x="824.2" y="1043.0" width="4.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="827.2" y="1054.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.34%)</title><rect x="824.2" y="1027.0" width="4.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="827.2" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (1 samples, 0.09%)</title><rect x="828.2" y="1043.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="831.2" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (206 samples, 17.59%)</title><rect x="829.2" y="1107.0" width="207.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="832.2" y="1118.0">java/util/concurrent/Thread..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (200 samples, 17.08%)</title><rect x="835.3" y="1091.0" width="201.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="838.3" y="1102.0">java/util/concurrent/Linke..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (178 samples, 15.20%)</title><rect x="838.3" y="1075.0" width="179.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="841.3" y="1086.0">java/util/concurrent/lo..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1 samples, 0.09%)</title><rect x="846.4" y="1059.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="849.4" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="846.4" y="1043.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="849.4" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.checkInterruptWhileWaiting (3 samples, 0.26%)</title><rect x="847.4" y="1059.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="850.4" y="1070.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (3 samples, 0.26%)</title><rect x="847.4" y="1043.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="850.4" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.26%)</title><rect x="847.4" y="1027.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="850.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (24 samples, 2.05%)</title><rect x="850.4" y="1059.0" width="24.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="853.4" y="1070.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (10 samples, 0.85%)</title><rect x="874.6" y="1059.0" width="10.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="877.6" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 0.85%)</title><rect x="874.6" y="1043.0" width="10.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="877.6" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 0.85%)</title><rect x="874.6" y="1027.0" width="10.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="877.6" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 0.85%)</title><rect x="874.6" y="1011.0" width="10.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="877.6" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (132 samples, 11.27%)</title><rect x="884.7" y="1059.0" width="133.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="887.7" y="1070.0">java/util/concurr..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (132 samples, 11.27%)</title><rect x="884.7" y="1043.0" width="133.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="887.7" y="1054.0">sun/misc/Unsafe.p..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.09%)</title><rect x="888.7" y="1027.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="891.7" y="1038.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (2 samples, 0.17%)</title><rect x="889.7" y="1027.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="892.7" y="1038.0"></text>
</g>
<g>
<title>Unsafe_Park (123 samples, 10.50%)</title><rect x="891.7" y="1027.0" width="124.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="894.7" y="1038.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="892.7" y="1011.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="895.7" y="1022.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.09%)</title><rect x="893.7" y="1011.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="896.7" y="1022.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (21 samples, 1.79%)</title><rect x="894.7" y="1011.0" width="21.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="897.7" y="1022.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (11 samples, 0.94%)</title><rect x="900.8" y="995.0" width="11.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="903.8" y="1006.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (6 samples, 0.51%)</title><rect x="903.8" y="979.0" width="6.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="906.8" y="990.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (5 samples, 0.43%)</title><rect x="904.8" y="963.0" width="5.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="907.8" y="974.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="909.9" y="979.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="912.9" y="990.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="910.9" y="979.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="913.9" y="990.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="911.9" y="995.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="914.9" y="1006.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (3 samples, 0.26%)</title><rect x="912.9" y="995.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="915.9" y="1006.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="915.9" y="1011.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="918.9" y="1022.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.17%)</title><rect x="916.9" y="1011.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="919.9" y="1022.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.17%)</title><rect x="918.9" y="1011.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="921.9" y="1022.0"></text>
</g>
<g>
<title>_L_cond_lock_847 (1 samples, 0.09%)</title><rect x="920.9" y="1011.0" width="1.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="923.9" y="1022.0"></text>
</g>
<g>
<title>__lll_lock_wait (4 samples, 0.34%)</title><rect x="922.0" y="1011.0" width="4.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="925.0" y="1022.0"></text>
</g>
<g>
<title>__lll_unlock_wake (31 samples, 2.65%)</title><rect x="926.0" y="1011.0" width="31.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="929.0" y="1022.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (44 samples, 3.76%)</title><rect x="957.2" y="1011.0" width="44.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="960.2" y="1022.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.43%)</title><rect x="1001.6" y="1011.0" width="5.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1004.6" y="1022.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.09%)</title><rect x="1006.6" y="1011.0" width="1.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1009.6" y="1022.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.09%)</title><rect x="1007.6" y="1011.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1010.6" y="1022.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.26%)</title><rect x="1008.6" y="1011.0" width="3.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1011.6" y="1022.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.09%)</title><rect x="1011.6" y="1011.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1014.6" y="1022.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.09%)</title><rect x="1012.6" y="1011.0" width="1.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1015.6" y="1022.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.09%)</title><rect x="1013.7" y="1011.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1016.7" y="1022.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1014.7" y="1011.0" width="1.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1017.7" y="1022.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.17%)</title><rect x="1015.7" y="1027.0" width="2.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1018.7" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (19 samples, 1.62%)</title><rect x="1017.7" y="1075.0" width="19.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1020.7" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (19 samples, 1.62%)</title><rect x="1017.7" y="1059.0" width="19.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1020.7" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (19 samples, 1.62%)</title><rect x="1017.7" y="1043.0" width="19.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1020.7" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (19 samples, 1.62%)</title><rect x="1017.7" y="1027.0" width="19.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1020.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.09%)</title><rect x="1036.8" y="1155.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1039.8" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.09%)</title><rect x="1036.8" y="1139.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1039.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="1036.8" y="1123.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1039.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.09%)</title><rect x="1036.8" y="1107.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1039.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.09%)</title><rect x="1036.8" y="1091.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1039.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="1036.8" y="1075.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1039.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="1036.8" y="1059.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1039.8" y="1070.0"></text>
</g>
<g>
<title>start_thread (151 samples, 12.89%)</title><rect x="1037.8" y="1155.0" width="152.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1040.8" y="1166.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (151 samples, 12.89%)</title><rect x="1037.8" y="1139.0" width="152.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1040.8" y="1150.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (26 samples, 2.22%)</title><rect x="1037.8" y="1123.0" width="26.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1040.8" y="1134.0">G..</text>
</g>
<g>
<title>G1ParCleanupCTTask::work(unsigned int) (1 samples, 0.09%)</title><rect x="1037.8" y="1107.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1040.8" y="1118.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1037.8" y="1091.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1040.8" y="1102.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (5 samples, 0.43%)</title><rect x="1038.8" y="1107.0" width="5.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1041.8" y="1118.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.43%)</title><rect x="1038.8" y="1091.0" width="5.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1041.8" y="1102.0"></text>
</g>
<g>
<title>SpinPause (5 samples, 0.43%)</title><rect x="1038.8" y="1075.0" width="5.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1041.8" y="1086.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (20 samples, 1.71%)</title><rect x="1043.9" y="1107.0" width="20.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1046.9" y="1118.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 0.60%)</title><rect x="1043.9" y="1091.0" width="7.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1046.9" y="1102.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.09%)</title><rect x="1043.9" y="1075.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1046.9" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.09%)</title><rect x="1043.9" y="1059.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1046.9" y="1070.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.09%)</title><rect x="1043.9" y="1043.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1046.9" y="1054.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 0.17%)</title><rect x="1044.9" y="1075.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1047.9" y="1086.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.09%)</title><rect x="1044.9" y="1059.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1047.9" y="1070.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.09%)</title><rect x="1045.9" y="1059.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1048.9" y="1070.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.09%)</title><rect x="1046.9" y="1075.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1049.9" y="1086.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.26%)</title><rect x="1047.9" y="1075.0" width="3.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1050.9" y="1086.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (8 samples, 0.68%)</title><rect x="1050.9" y="1091.0" width="8.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1053.9" y="1102.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.17%)</title><rect x="1050.9" y="1075.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1053.9" y="1086.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.09%)</title><rect x="1050.9" y="1059.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1053.9" y="1070.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.09%)</title><rect x="1050.9" y="1043.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1053.9" y="1054.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.09%)</title><rect x="1050.9" y="1027.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1053.9" y="1038.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1051.9" y="1059.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1054.9" y="1070.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1051.9" y="1043.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1054.9" y="1054.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, CLDClosure*, RegisterMap const*, bool) (1 samples, 0.09%)</title><rect x="1051.9" y="1027.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1054.9" y="1038.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (6 samples, 0.51%)</title><rect x="1053.0" y="1075.0" width="6.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1056.0" y="1086.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (5 samples, 0.43%)</title><rect x="1053.0" y="1059.0" width="5.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1056.0" y="1070.0"></text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.09%)</title><rect x="1058.0" y="1059.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1061.0" y="1070.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.09%)</title><rect x="1058.0" y="1043.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1061.0" y="1054.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (5 samples, 0.43%)</title><rect x="1059.0" y="1091.0" width="5.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1062.0" y="1102.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (5 samples, 0.43%)</title><rect x="1059.0" y="1075.0" width="5.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1062.0" y="1086.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (4 samples, 0.34%)</title><rect x="1059.0" y="1059.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1062.0" y="1070.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (4 samples, 0.34%)</title><rect x="1059.0" y="1043.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1062.0" y="1054.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (3 samples, 0.26%)</title><rect x="1060.0" y="1027.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1063.0" y="1038.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (2 samples, 0.17%)</title><rect x="1061.0" y="1011.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1064.0" y="1022.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.09%)</title><rect x="1063.0" y="1059.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1066.0" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.09%)</title><rect x="1063.0" y="1043.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1066.0" y="1054.0"></text>
</g>
<g>
<title>HeapRegionRemSet::iter_is_complete() (1 samples, 0.09%)</title><rect x="1063.0" y="1027.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1066.0" y="1038.0"></text>
</g>
<g>
<title>JavaThread::run() (123 samples, 10.50%)</title><rect x="1064.0" y="1123.0" width="124.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1067.0" y="1134.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (123 samples, 10.50%)</title><rect x="1064.0" y="1107.0" width="124.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1067.0" y="1118.0">JavaThread::thr..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (122 samples, 10.42%)</title><rect x="1064.0" y="1091.0" width="123.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1067.0" y="1102.0">CompileBroker::..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (120 samples, 10.25%)</title><rect x="1064.0" y="1075.0" width="121.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1067.0" y="1086.0">CompileBroker::..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (120 samples, 10.25%)</title><rect x="1064.0" y="1059.0" width="121.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1067.0" y="1070.0">C2Compiler::com..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (120 samples, 10.25%)</title><rect x="1064.0" y="1043.0" width="121.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1067.0" y="1054.0">Compile::Compil..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.09%)</title><rect x="1064.0" y="1027.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1067.0" y="1038.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.09%)</title><rect x="1064.0" y="1011.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1067.0" y="1022.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1064.0" y="995.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1067.0" y="1006.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1064.0" y="979.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1067.0" y="990.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1064.0" y="963.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1067.0" y="974.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1064.0" y="947.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1067.0" y="958.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1064.0" y="931.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1067.0" y="942.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1064.0" y="915.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1067.0" y="926.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1064.0" y="899.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1067.0" y="910.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.09%)</title><rect x="1064.0" y="883.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1067.0" y="894.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1064.0" y="867.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1067.0" y="878.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (58 samples, 4.95%)</title><rect x="1065.0" y="1027.0" width="58.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1068.0" y="1038.0">Compil..</text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.26%)</title><rect x="1065.0" y="1011.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1068.0" y="1022.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.17%)</title><rect x="1065.0" y="995.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1068.0" y="1006.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.09%)</title><rect x="1066.1" y="979.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1069.1" y="990.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.09%)</title><rect x="1067.1" y="995.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1070.1" y="1006.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.09%)</title><rect x="1067.1" y="979.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1070.1" y="990.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.09%)</title><rect x="1067.1" y="963.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1070.1" y="974.0"></text>
</g>
<g>
<title>decodeHeapOop_not_nullNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.09%)</title><rect x="1067.1" y="947.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1070.1" y="958.0"></text>
</g>
<g>
<title>MacroAssembler::decode_heap_oop_not_null(RegisterImpl*) (1 samples, 0.09%)</title><rect x="1067.1" y="931.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1070.1" y="942.0"></text>
</g>
<g>
<title>Assembler::shlq(RegisterImpl*, int) (1 samples, 0.09%)</title><rect x="1067.1" y="915.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1070.1" y="926.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.26%)</title><rect x="1068.1" y="1011.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1071.1" y="1022.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.09%)</title><rect x="1068.1" y="995.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1071.1" y="1006.0"></text>
</g>
<g>
<title>Label::patch_instructions(MacroAssembler*) (1 samples, 0.09%)</title><rect x="1069.1" y="995.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1072.1" y="1006.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.09%)</title><rect x="1070.1" y="995.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1073.1" y="1006.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.09%)</title><rect x="1070.1" y="979.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1073.1" y="990.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.09%)</title><rect x="1070.1" y="963.0" width="1.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1073.1" y="974.0"></text>
</g>
<g>
<title>Matcher::match() (7 samples, 0.60%)</title><rect x="1071.1" y="1011.0" width="7.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1074.1" y="1022.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (7 samples, 0.60%)</title><rect x="1071.1" y="995.0" width="7.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1074.1" y="1006.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.09%)</title><rect x="1072.1" y="979.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1075.1" y="990.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.09%)</title><rect x="1073.1" y="979.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1076.1" y="990.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.09%)</title><rect x="1073.1" y="963.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1076.1" y="974.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.09%)</title><rect x="1073.1" y="947.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1076.1" y="958.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 0.26%)</title><rect x="1074.1" y="979.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1077.1" y="990.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.17%)</title><rect x="1075.1" y="963.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1078.1" y="974.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1075.1" y="947.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1078.1" y="958.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1075.1" y="931.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1078.1" y="942.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1075.1" y="915.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1078.1" y="926.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.09%)</title><rect x="1075.1" y="899.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1078.1" y="910.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.09%)</title><rect x="1076.1" y="947.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1079.1" y="958.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.09%)</title><rect x="1076.1" y="931.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1079.1" y="942.0"></text>
</g>
<g>
<title>State::_sub_Op_AddP(Node const*) (1 samples, 0.09%)</title><rect x="1076.1" y="915.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1079.1" y="926.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.09%)</title><rect x="1077.1" y="979.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1080.1" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.26%)</title><rect x="1078.1" y="1011.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1081.1" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.26%)</title><rect x="1078.1" y="995.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1081.1" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (3 samples, 0.26%)</title><rect x="1078.1" y="979.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1081.1" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.09%)</title><rect x="1079.2" y="963.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1082.2" y="974.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.09%)</title><rect x="1080.2" y="963.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1083.2" y="974.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.09%)</title><rect x="1080.2" y="947.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1083.2" y="958.0"></text>
</g>
<g>
<title>MachNode::get_base_and_disp(long&amp;, TypePtr const*&amp;) const (1 samples, 0.09%)</title><rect x="1080.2" y="931.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1083.2" y="942.0"></text>
</g>
<g>
<title>MachOper::num_edges() const (1 samples, 0.09%)</title><rect x="1080.2" y="915.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1083.2" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (42 samples, 3.59%)</title><rect x="1081.2" y="1011.0" width="42.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1084.2" y="1022.0">Phas..</text>
</g>
<g>
<title>Node::cisc_operand() const (1 samples, 0.09%)</title><rect x="1081.2" y="995.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1084.2" y="1006.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.17%)</title><rect x="1082.2" y="995.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1085.2" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (4 samples, 0.34%)</title><rect x="1084.2" y="995.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1087.2" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.09%)</title><rect x="1085.2" y="979.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1088.2" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.17%)</title><rect x="1086.2" y="979.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1089.2" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (5 samples, 0.43%)</title><rect x="1088.2" y="995.0" width="5.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1091.2" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.17%)</title><rect x="1089.2" y="979.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1092.2" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.17%)</title><rect x="1091.2" y="979.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1094.2" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.17%)</title><rect x="1091.2" y="963.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1094.2" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 0.34%)</title><rect x="1093.3" y="995.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1096.3" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 0.51%)</title><rect x="1097.3" y="995.0" width="6.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1100.3" y="1006.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.09%)</title><rect x="1100.3" y="979.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1103.3" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1101.3" y="979.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1104.3" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.09%)</title><rect x="1102.3" y="979.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1105.3" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.09%)</title><rect x="1103.3" y="995.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1106.3" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.09%)</title><rect x="1103.3" y="979.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1106.3" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (5 samples, 0.43%)</title><rect x="1104.3" y="995.0" width="5.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1107.3" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.17%)</title><rect x="1109.4" y="995.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1112.4" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 0.34%)</title><rect x="1111.4" y="995.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1114.4" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.17%)</title><rect x="1112.4" y="979.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1115.4" y="990.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.09%)</title><rect x="1114.4" y="979.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1117.4" y="990.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.17%)</title><rect x="1115.4" y="995.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1118.4" y="1006.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.09%)</title><rect x="1115.4" y="979.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1118.4" y="990.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.09%)</title><rect x="1116.4" y="979.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1119.4" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.17%)</title><rect x="1117.4" y="995.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1120.4" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.09%)</title><rect x="1117.4" y="979.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1120.4" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1118.5" y="979.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1121.5" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.09%)</title><rect x="1119.5" y="995.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1122.5" y="1006.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.09%)</title><rect x="1119.5" y="979.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1122.5" y="990.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.26%)</title><rect x="1120.5" y="995.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1123.5" y="1006.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.17%)</title><rect x="1121.5" y="979.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1124.5" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1122.5" y="963.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1125.5" y="974.0"></text>
</g>
<g>
<title>Compile::Optimize() (52 samples, 4.44%)</title><rect x="1123.5" y="1027.0" width="52.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1126.5" y="1038.0">Compi..</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.09%)</title><rect x="1123.5" y="1011.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1126.5" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (3 samples, 0.26%)</title><rect x="1124.5" y="1011.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1127.5" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (3 samples, 0.26%)</title><rect x="1124.5" y="995.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1127.5" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.09%)</title><rect x="1124.5" y="979.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1127.5" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1125.5" y="979.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1128.5" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_init_values(JavaObjectNode*, PointsToNode*, PhaseTransform*) (1 samples, 0.09%)</title><rect x="1125.5" y="963.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1128.5" y="974.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1125.5" y="947.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1128.5" y="958.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1125.5" y="931.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1128.5" y="942.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1125.5" y="915.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1128.5" y="926.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1125.5" y="899.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1128.5" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1126.5" y="979.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1129.5" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1126.5" y="963.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1129.5" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1126.5" y="947.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1129.5" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1126.5" y="931.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1129.5" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1126.5" y="915.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1129.5" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1126.5" y="899.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1129.5" y="910.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.09%)</title><rect x="1126.5" y="883.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1129.5" y="894.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.09%)</title><rect x="1126.5" y="867.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1129.5" y="878.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.09%)</title><rect x="1127.5" y="1011.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1130.5" y="1022.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1127.5" y="995.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1130.5" y="1006.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1127.5" y="979.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1130.5" y="990.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.09%)</title><rect x="1127.5" y="963.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1130.5" y="974.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.09%)</title><rect x="1127.5" y="947.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1130.5" y="958.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1127.5" y="931.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1130.5" y="942.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_instance_klass() const (1 samples, 0.09%)</title><rect x="1127.5" y="915.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1130.5" y="926.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.09%)</title><rect x="1128.5" y="1011.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1131.5" y="1022.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1128.5" y="995.0" width="1.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1131.5" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (35 samples, 2.99%)</title><rect x="1129.5" y="1011.0" width="35.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1132.5" y="1022.0">Pha..</text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.09%)</title><rect x="1129.5" y="995.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1132.5" y="1006.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.09%)</title><rect x="1129.5" y="979.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1132.5" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_counted_loop(Node*, IdealLoopTree*) (1 samples, 0.09%)</title><rect x="1129.5" y="963.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1132.5" y="974.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.09%)</title><rect x="1130.5" y="995.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1133.5" y="1006.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.09%)</title><rect x="1130.5" y="979.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1133.5" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.09%)</title><rect x="1130.5" y="963.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1133.5" y="974.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1130.5" y="947.0" width="1.1" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1133.5" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.17%)</title><rect x="1131.6" y="995.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1134.6" y="1006.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.09%)</title><rect x="1132.6" y="979.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1135.6" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.26%)</title><rect x="1133.6" y="995.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1136.6" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.09%)</title><rect x="1135.6" y="979.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1138.6" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (25 samples, 2.13%)</title><rect x="1136.6" y="995.0" width="25.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1139.6" y="1006.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (23 samples, 1.96%)</title><rect x="1138.6" y="979.0" width="23.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1141.6" y="990.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (21 samples, 1.79%)</title><rect x="1139.6" y="963.0" width="21.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1142.6" y="974.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.09%)</title><rect x="1153.7" y="947.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1156.7" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (6 samples, 0.51%)</title><rect x="1154.7" y="947.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1157.7" y="958.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1160.8" y="963.0" width="1.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1163.8" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.17%)</title><rect x="1161.8" y="995.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.8" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.09%)</title><rect x="1162.8" y="979.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.8" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1163.8" y="995.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.8" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1163.8" y="979.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.8" y="990.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1163.8" y="963.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.8" y="974.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.09%)</title><rect x="1163.8" y="947.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.8" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (10 samples, 0.85%)</title><rect x="1164.8" y="1011.0" width="10.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.8" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (8 samples, 0.68%)</title><rect x="1165.8" y="995.0" width="8.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.8" y="1006.0"></text>
</g>
<g>
<title>ConINode::Opcode() const (1 samples, 0.09%)</title><rect x="1165.8" y="979.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.8" y="990.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1166.8" y="979.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.8" y="990.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1166.8" y="963.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.8" y="974.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1166.8" y="947.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.8" y="958.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1166.8" y="931.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.8" y="942.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1167.8" y="979.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.8" y="990.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.09%)</title><rect x="1167.8" y="963.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.8" y="974.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.09%)</title><rect x="1167.8" y="947.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.8" y="958.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.09%)</title><rect x="1167.8" y="931.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.8" y="942.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.17%)</title><rect x="1168.8" y="979.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.8" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1168.8" y="963.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.8" y="974.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.09%)</title><rect x="1168.8" y="947.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.8" y="958.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.09%)</title><rect x="1169.8" y="963.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.8" y="974.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.17%)</title><rect x="1170.9" y="979.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.9" y="990.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.17%)</title><rect x="1170.9" y="963.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.9" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1170.9" y="947.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.9" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1170.9" y="931.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.9" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1170.9" y="915.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1173.9" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1170.9" y="899.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.9" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1170.9" y="883.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.9" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1170.9" y="867.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.9" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1170.9" y="851.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.9" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1170.9" y="835.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.9" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1170.9" y="819.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.9" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1170.9" y="803.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.9" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1170.9" y="787.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1173.9" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1170.9" y="771.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1173.9" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1170.9" y="755.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.9" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1170.9" y="739.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.9" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1170.9" y="723.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.9" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1170.9" y="707.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.9" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1170.9" y="691.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1173.9" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1170.9" y="675.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.9" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1170.9" y="659.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.9" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1170.9" y="643.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.9" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1170.9" y="627.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.9" y="638.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1170.9" y="611.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.9" y="622.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1170.9" y="595.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.9" y="606.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1171.9" y="899.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.9" y="910.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1171.9" y="883.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.9" y="894.0"></text>
</g>
<g>
<title>StoreNode::Identity(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1172.9" y="979.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.9" y="990.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1172.9" y="963.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.9" y="974.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1172.9" y="947.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.9" y="958.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1172.9" y="931.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.9" y="942.0"></text>
</g>
<g>
<title>StoreNode::hash() const (1 samples, 0.09%)</title><rect x="1173.9" y="995.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.9" y="1006.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.09%)</title><rect x="1174.9" y="1011.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.9" y="1022.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.09%)</title><rect x="1174.9" y="995.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.9" y="1006.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1174.9" y="979.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.9" y="990.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.09%)</title><rect x="1174.9" y="963.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.9" y="974.0"></text>
</g>
<g>
<title>VectorSet::VectorSet(Arena*) (1 samples, 0.09%)</title><rect x="1174.9" y="947.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.9" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.77%)</title><rect x="1175.9" y="1027.0" width="9.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.9" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.77%)</title><rect x="1175.9" y="1011.0" width="9.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.9" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 0.77%)</title><rect x="1175.9" y="995.0" width="9.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.9" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 0.77%)</title><rect x="1175.9" y="979.0" width="9.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.9" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 0.77%)</title><rect x="1175.9" y="963.0" width="9.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.9" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (9 samples, 0.77%)</title><rect x="1175.9" y="947.0" width="9.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.9" y="958.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1175.9" y="931.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.9" y="942.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1175.9" y="915.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.9" y="926.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1175.9" y="899.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.9" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1175.9" y="883.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.9" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1175.9" y="867.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.9" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1175.9" y="851.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.9" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1175.9" y="835.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.9" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1175.9" y="819.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.9" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.09%)</title><rect x="1175.9" y="803.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.9" y="814.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1175.9" y="787.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.9" y="798.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1175.9" y="771.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.9" y="782.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1175.9" y="755.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.9" y="766.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1175.9" y="739.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.9" y="750.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1175.9" y="723.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.9" y="734.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1175.9" y="707.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.9" y="718.0"></text>
</g>
<g>
<title>Monitor::lock() (1 samples, 0.09%)</title><rect x="1175.9" y="691.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.9" y="702.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.09%)</title><rect x="1176.9" y="931.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.9" y="942.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.09%)</title><rect x="1176.9" y="915.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.9" y="926.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.09%)</title><rect x="1176.9" y="899.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.9" y="910.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1176.9" y="883.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.9" y="894.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1176.9" y="867.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.9" y="878.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.09%)</title><rect x="1176.9" y="851.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.9" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.43%)</title><rect x="1177.9" y="931.0" width="5.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.9" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.43%)</title><rect x="1177.9" y="915.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.9" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.43%)</title><rect x="1177.9" y="899.0" width="5.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.9" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.43%)</title><rect x="1177.9" y="883.0" width="5.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.9" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.43%)</title><rect x="1177.9" y="867.0" width="5.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.9" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.43%)</title><rect x="1177.9" y="851.0" width="5.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.9" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1177.9" y="835.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.9" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1177.9" y="819.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.9" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1177.9" y="803.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.9" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1177.9" y="787.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.9" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1177.9" y="771.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1177.9" y="755.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.9" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1177.9" y="739.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.9" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1177.9" y="723.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1177.9" y="707.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1177.9" y="691.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1177.9" y="675.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1177.9" y="659.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.9" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1177.9" y="643.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.9" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1177.9" y="627.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1177.9" y="611.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.9" y="622.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.09%)</title><rect x="1177.9" y="595.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.9" y="606.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.09%)</title><rect x="1177.9" y="579.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.9" y="590.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1177.9" y="563.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.9" y="574.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.09%)</title><rect x="1177.9" y="547.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1178.9" y="659.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1178.9" y="643.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.9" y="654.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.09%)</title><rect x="1178.9" y="627.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.9" y="638.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.09%)</title><rect x="1178.9" y="611.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.9" y="622.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1178.9" y="595.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.9" y="606.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1178.9" y="579.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.9" y="590.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1178.9" y="563.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.9" y="574.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1178.9" y="547.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.9" y="558.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1178.9" y="531.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.9" y="542.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1178.9" y="515.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.9" y="526.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1178.9" y="499.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.9" y="510.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1179.9" y="835.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.9" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1179.9" y="819.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.9" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.26%)</title><rect x="1179.9" y="803.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.9" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.26%)</title><rect x="1179.9" y="787.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.9" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.26%)</title><rect x="1179.9" y="771.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.26%)</title><rect x="1179.9" y="755.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.26%)</title><rect x="1179.9" y="739.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.9" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1179.9" y="723.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.9" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.26%)</title><rect x="1179.9" y="707.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.26%)</title><rect x="1179.9" y="691.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.26%)</title><rect x="1179.9" y="675.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.26%)</title><rect x="1179.9" y="659.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.26%)</title><rect x="1179.9" y="643.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.9" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1179.9" y="627.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.9" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1179.9" y="611.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1179.9" y="595.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1179.9" y="579.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1179.9" y="563.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1179.9" y="547.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.9" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1179.9" y="531.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.9" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1179.9" y="515.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1179.9" y="499.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1179.9" y="483.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1179.9" y="467.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1179.9" y="451.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.9" y="462.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1179.9" y="435.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.9" y="446.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1179.9" y="419.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.9" y="430.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.9" y="435.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.9" y="446.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.9" y="419.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.9" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.9" y="403.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.9" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.9" y="387.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.9" y="371.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.9" y="355.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.9" y="339.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.9" y="323.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.9" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.9" y="307.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.9" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.9" y="291.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.9" y="275.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.9" y="259.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.9" y="243.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.9" y="227.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.9" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.9" y="211.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.9" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.9" y="195.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.9" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.9" y="179.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.9" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.9" y="163.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.9" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.9" y="147.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.9" y="158.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.9" y="131.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.9" y="142.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1180.9" y="115.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.9" y="126.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1180.9" y="99.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.9" y="110.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1180.9" y="83.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.9" y="94.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1180.9" y="67.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.9" y="78.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1180.9" y="51.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.9" y="62.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1180.9" y="35.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.9" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.9" y="627.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.9" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.9" y="611.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.9" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.9" y="595.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.9" y="579.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.9" y="563.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.9" y="547.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1181.9" y="531.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.9" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.9" y="515.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.9" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.9" y="499.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.9" y="483.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.9" y="467.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.9" y="451.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1181.9" y="435.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1181.9" y="419.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.9" y="430.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.09%)</title><rect x="1181.9" y="403.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.9" y="414.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.09%)</title><rect x="1181.9" y="387.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.9" y="398.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.09%)</title><rect x="1181.9" y="371.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.9" y="382.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.09%)</title><rect x="1181.9" y="355.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.9" y="366.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.09%)</title><rect x="1181.9" y="339.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.9" y="350.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1182.9" y="931.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.9" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1182.9" y="915.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.9" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1182.9" y="899.0" width="2.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.9" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1182.9" y="883.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.9" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1182.9" y="867.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.9" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1182.9" y="851.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.9" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1182.9" y="835.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.9" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1182.9" y="819.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.9" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1182.9" y="803.0" width="2.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.9" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1182.9" y="787.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.9" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1182.9" y="771.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1182.9" y="755.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1182.9" y="739.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.9" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.9" y="723.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.9" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.9" y="707.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.9" y="691.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.9" y="675.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.9" y="659.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1182.9" y="643.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.9" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.9" y="627.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.9" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.9" y="611.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.9" y="595.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.9" y="579.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.9" y="563.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1182.9" y="547.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.9" y="558.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.9" y="531.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.9" y="542.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.9" y="515.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.9" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.9" y="499.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.9" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.9" y="483.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.9" y="467.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.9" y="451.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.9" y="435.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1182.9" y="419.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.9" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.9" y="403.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.9" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.9" y="387.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.9" y="371.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.9" y="355.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.9" y="339.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1182.9" y="323.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.9" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.9" y="307.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.9" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.9" y="291.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.9" y="275.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.9" y="259.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.9" y="243.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1182.9" y="227.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.9" y="238.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.9" y="211.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.9" y="222.0"></text>
</g>
<g>
<title>GraphKit::set_edges_for_java_call(CallJavaNode*, bool, bool) (1 samples, 0.09%)</title><rect x="1182.9" y="195.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.9" y="206.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.0" y="723.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.0" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.0" y="707.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.0" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1184.0" y="691.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1184.0" y="675.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1184.0" y="659.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1184.0" y="643.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1184.0" y="627.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.0" y="638.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.0" y="611.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.0" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.0" y="595.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.0" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1184.0" y="579.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1184.0" y="563.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1184.0" y="547.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1184.0" y="531.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1184.0" y="515.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.0" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.0" y="499.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.0" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1184.0" y="483.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1184.0" y="467.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1184.0" y="451.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1184.0" y="435.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1184.0" y="419.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.0" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.0" y="403.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.0" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1184.0" y="387.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1184.0" y="371.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1184.0" y="355.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1184.0" y="339.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1184.0" y="323.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.0" y="334.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.0" y="307.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.0" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.0" y="291.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.0" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1184.0" y="275.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.0" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1184.0" y="259.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.0" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1184.0" y="243.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1184.0" y="227.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.0" y="238.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.09%)</title><rect x="1184.0" y="211.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.0" y="222.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.09%)</title><rect x="1184.0" y="195.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.0" y="206.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.09%)</title><rect x="1184.0" y="179.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.0" y="190.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.09%)</title><rect x="1184.0" y="163.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.0" y="174.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.09%)</title><rect x="1184.0" y="147.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.0" y="158.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::compute_gen_kill_single(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1184.0" y="131.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.0" y="142.0"></text>
</g>
<g>
<title>CompileQueue::get() (2 samples, 0.17%)</title><rect x="1185.0" y="1075.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.0" y="1086.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (2 samples, 0.17%)</title><rect x="1185.0" y="1059.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.0" y="1070.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (2 samples, 0.17%)</title><rect x="1185.0" y="1043.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.0" y="1054.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (2 samples, 0.17%)</title><rect x="1185.0" y="1027.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.0" y="1038.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (2 samples, 0.17%)</title><rect x="1185.0" y="1011.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.0" y="1022.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (2 samples, 0.17%)</title><rect x="1185.0" y="995.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.0" y="1006.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.09%)</title><rect x="1187.0" y="1091.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.0" y="1102.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.09%)</title><rect x="1187.0" y="1075.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.0" y="1086.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.09%)</title><rect x="1187.0" y="1059.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.0" y="1070.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.09%)</title><rect x="1187.0" y="1043.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1190.0" y="1054.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.09%)</title><rect x="1187.0" y="1027.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.0" y="1038.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.09%)</title><rect x="1187.0" y="1011.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.0" y="1022.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.17%)</title><rect x="1188.0" y="1123.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.0" y="1134.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.17%)</title><rect x="1188.0" y="1107.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.0" y="1118.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.17%)</title><rect x="1188.0" y="1091.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.0" y="1102.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.17%)</title><rect x="1188.0" y="1075.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.0" y="1086.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.17%)</title><rect x="1188.0" y="1059.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.0" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.17%)</title><rect x="1188.0" y="1043.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.0" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (2 samples, 0.17%)</title><rect x="1188.0" y="1027.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.0" y="1038.0"></text>
</g>
<g>
<title>DerivedPointerTable::update_pointers() (1 samples, 0.09%)</title><rect x="1188.0" y="1011.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.0" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::process_discovered_references(unsigned int) (1 samples, 0.09%)</title><rect x="1189.0" y="1011.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1192.0" y="1022.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_discovered_references(BoolObjectClosure*, OopClosure*, VoidClosure*, AbstractRefProcTaskExecutor*, GCTimer*, GCId) (1 samples, 0.09%)</title><rect x="1189.0" y="995.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1192.0" y="1006.0"></text>
</g>
<g>
<title>JNIHandles::weak_oops_do(BoolObjectClosure*, OopClosure*) (1 samples, 0.09%)</title><rect x="1189.0" y="979.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1192.0" y="990.0"></text>
</g>
</g>
</svg>
