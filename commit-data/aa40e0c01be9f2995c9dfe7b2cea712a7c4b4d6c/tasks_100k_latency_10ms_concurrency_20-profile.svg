<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="822" onload="init(evt)" viewBox="0 0 1200 822" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="805"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="805"> </text>
<g id="frames">
<g>
<title>all (279 samples, 100.00%)</title><rect x="10.0" y="771.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="782.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (29 samples, 10.39%)</title><rect x="10.0" y="755.0" width="122.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="766.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.36%)</title><rect x="10.0" y="739.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (1 samples, 0.36%)</title><rect x="10.0" y="723.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.36%)</title><rect x="10.0" y="707.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.36%)</title><rect x="10.0" y="691.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.doCommitOffsetsAsync (1 samples, 0.36%)</title><rect x="10.0" y="675.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (28 samples, 10.04%)</title><rect x="14.2" y="739.0" width="118.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.2" y="750.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.36%)</title><rect x="14.2" y="723.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.2" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pause (1 samples, 0.36%)</title><rect x="14.2" y="707.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="17.2" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.release (1 samples, 0.36%)</title><rect x="14.2" y="691.0" width="4.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="17.2" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.36%)</title><rect x="18.5" y="723.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.resume (1 samples, 0.36%)</title><rect x="18.5" y="707.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="21.5" y="718.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.36%)</title><rect x="18.5" y="691.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.5" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (1 samples, 0.36%)</title><rect x="22.7" y="723.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="25.7" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (1 samples, 0.36%)</title><rect x="22.7" y="707.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="25.7" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.36%)</title><rect x="22.7" y="691.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="25.7" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$266/1160134218.accept (1 samples, 0.36%)</title><rect x="22.7" y="675.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="25.7" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (1 samples, 0.36%)</title><rect x="22.7" y="659.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.7" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.36%)</title><rect x="22.7" y="643.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.7" y="654.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.36%)</title><rect x="22.7" y="627.0" width="4.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="25.7" y="638.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (11 samples, 3.94%)</title><rect x="26.9" y="723.0" width="46.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="29.9" y="734.0">java..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$265/205208390.accept (11 samples, 3.94%)</title><rect x="26.9" y="707.0" width="46.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="29.9" y="718.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (11 samples, 3.94%)</title><rect x="26.9" y="691.0" width="46.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="29.9" y="702.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (5 samples, 1.79%)</title><rect x="35.4" y="675.0" width="21.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="38.4" y="686.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (5 samples, 1.79%)</title><rect x="35.4" y="659.0" width="21.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="38.4" y="670.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (5 samples, 1.79%)</title><rect x="35.4" y="643.0" width="21.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="38.4" y="654.0">c..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (5 samples, 1.79%)</title><rect x="35.4" y="627.0" width="21.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="38.4" y="638.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (5 samples, 1.79%)</title><rect x="35.4" y="611.0" width="21.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="38.4" y="622.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (5 samples, 1.79%)</title><rect x="35.4" y="595.0" width="21.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="38.4" y="606.0">j..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.36%)</title><rect x="52.3" y="579.0" width="4.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="55.3" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/TaskRequest.&lt;init&gt; (3 samples, 1.08%)</title><rect x="56.5" y="675.0" width="12.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="59.5" y="686.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.08%)</title><rect x="56.5" y="659.0" width="12.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="59.5" y="670.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.36%)</title><rect x="69.2" y="675.0" width="4.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="72.2" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (14 samples, 5.02%)</title><rect x="73.4" y="723.0" width="59.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="76.4" y="734.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (14 samples, 5.02%)</title><rect x="73.4" y="707.0" width="59.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="76.4" y="718.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (11 samples, 3.94%)</title><rect x="73.4" y="691.0" width="46.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="76.4" y="702.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (6 samples, 2.15%)</title><rect x="73.4" y="675.0" width="25.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="76.4" y="686.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (6 samples, 2.15%)</title><rect x="73.4" y="659.0" width="25.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="76.4" y="670.0">o..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.36%)</title><rect x="73.4" y="643.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="76.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.36%)</title><rect x="73.4" y="627.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="76.4" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.36%)</title><rect x="73.4" y="611.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="76.4" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.36%)</title><rect x="73.4" y="595.0" width="4.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="76.4" y="606.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (1 samples, 0.36%)</title><rect x="73.4" y="579.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="76.4" y="590.0"></text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.36%)</title><rect x="73.4" y="563.0" width="4.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="76.4" y="574.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.36%)</title><rect x="73.4" y="547.0" width="4.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="76.4" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 1.43%)</title><rect x="77.7" y="643.0" width="16.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="80.7" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (2 samples, 0.72%)</title><rect x="77.7" y="627.0" width="8.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="80.7" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.maybeThrottle (1 samples, 0.36%)</title><rect x="77.7" y="611.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="80.7" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/OffsetCommitResponse.throttleTimeMs (1 samples, 0.36%)</title><rect x="77.7" y="595.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="80.7" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.36%)</title><rect x="81.9" y="611.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="84.9" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.36%)</title><rect x="81.9" y="595.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="84.9" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.36%)</title><rect x="81.9" y="579.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="84.9" y="590.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.36%)</title><rect x="81.9" y="563.0" width="4.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="84.9" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.72%)</title><rect x="86.1" y="627.0" width="8.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="89.1" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.36%)</title><rect x="86.1" y="611.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="89.1" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.36%)</title><rect x="86.1" y="595.0" width="4.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="89.1" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.36%)</title><rect x="86.1" y="579.0" width="4.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="89.1" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.36%)</title><rect x="86.1" y="563.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="89.1" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.36%)</title><rect x="90.4" y="611.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="93.4" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.36%)</title><rect x="90.4" y="595.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="93.4" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.36%)</title><rect x="90.4" y="579.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="93.4" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.36%)</title><rect x="90.4" y="563.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="93.4" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.36%)</title><rect x="90.4" y="547.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="93.4" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.36%)</title><rect x="90.4" y="531.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="93.4" y="542.0"></text>
</g>
<g>
<title>__GI_epoll_wait (1 samples, 0.36%)</title><rect x="90.4" y="515.0" width="4.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="93.4" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.36%)</title><rect x="94.6" y="643.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="97.6" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.ready (1 samples, 0.36%)</title><rect x="94.6" y="627.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="97.6" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.isReady (1 samples, 0.36%)</title><rect x="94.6" y="611.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="97.6" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient$DefaultMetadataUpdater.isUpdateDue (1 samples, 0.36%)</title><rect x="94.6" y="595.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="97.6" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (4 samples, 1.43%)</title><rect x="98.8" y="675.0" width="16.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="101.8" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 1.43%)</title><rect x="98.8" y="659.0" width="16.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="101.8" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 1.08%)</title><rect x="98.8" y="643.0" width="12.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="101.8" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 1.08%)</title><rect x="98.8" y="627.0" width="12.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="101.8" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.36%)</title><rect x="98.8" y="611.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="101.8" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.36%)</title><rect x="98.8" y="595.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="101.8" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.record (1 samples, 0.36%)</title><rect x="98.8" y="579.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="101.8" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (2 samples, 0.72%)</title><rect x="103.0" y="611.0" width="8.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="106.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 0.72%)</title><rect x="103.0" y="595.0" width="8.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="106.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (2 samples, 0.72%)</title><rect x="103.0" y="579.0" width="8.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="106.0" y="590.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (2 samples, 0.72%)</title><rect x="103.0" y="563.0" width="8.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="106.0" y="574.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (1 samples, 0.36%)</title><rect x="107.3" y="547.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="110.3" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.36%)</title><rect x="107.3" y="531.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="110.3" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (1 samples, 0.36%)</title><rect x="107.3" y="515.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="110.3" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.36%)</title><rect x="107.3" y="499.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="110.3" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.36%)</title><rect x="111.5" y="643.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="114.5" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.36%)</title><rect x="111.5" y="627.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="114.5" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.36%)</title><rect x="111.5" y="611.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="114.5" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.36%)</title><rect x="111.5" y="595.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="114.5" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.36%)</title><rect x="115.7" y="675.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="118.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.36%)</title><rect x="115.7" y="659.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="118.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.36%)</title><rect x="120.0" y="691.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="123.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.36%)</title><rect x="120.0" y="675.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="123.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.36%)</title><rect x="120.0" y="659.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="123.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.36%)</title><rect x="120.0" y="643.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="123.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 0.72%)</title><rect x="124.2" y="691.0" width="8.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="127.2" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.72%)</title><rect x="124.2" y="675.0" width="8.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="127.2" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.36%)</title><rect x="124.2" y="659.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="127.2" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.36%)</title><rect x="124.2" y="643.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="127.2" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.parse (1 samples, 0.36%)</title><rect x="124.2" y="627.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="127.2" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.getOrElse (1 samples, 0.36%)</title><rect x="124.2" y="611.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="127.2" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.hasField (1 samples, 0.36%)</title><rect x="124.2" y="595.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="127.2" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.36%)</title><rect x="124.2" y="579.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="127.2" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.36%)</title><rect x="128.4" y="659.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="131.4" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.36%)</title><rect x="128.4" y="643.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="131.4" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.36%)</title><rect x="128.4" y="627.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="131.4" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.36%)</title><rect x="128.4" y="611.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="131.4" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.36%)</title><rect x="128.4" y="595.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="131.4" y="606.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.36%)</title><rect x="128.4" y="579.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="131.4" y="590.0"></text>
</g>
<g>
<title>java/lang/Thread.run (205 samples, 73.48%)</title><rect x="132.7" y="755.0" width="867.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="135.7" y="766.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (205 samples, 73.48%)</title><rect x="132.7" y="739.0" width="867.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="135.7" y="750.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (205 samples, 73.48%)</title><rect x="132.7" y="723.0" width="867.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="135.7" y="734.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$285/1282455814.run (197 samples, 70.61%)</title><rect x="132.7" y="707.0" width="833.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="135.7" y="718.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$285/1282455814.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$70 (197 samples, 70.61%)</title><rect x="132.7" y="691.0" width="833.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="135.7" y="702.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$70</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (197 samples, 70.61%)</title><rect x="132.7" y="675.0" width="833.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="135.7" y="686.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (195 samples, 69.89%)</title><rect x="132.7" y="659.0" width="824.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="135.7" y="670.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.36%)</title><rect x="149.6" y="643.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="152.6" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (37 samples, 13.26%)</title><rect x="153.8" y="643.0" width="156.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="156.8" y="654.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$42/815674463.extract (37 samples, 13.26%)</title><rect x="153.8" y="627.0" width="156.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="156.8" y="638.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (37 samples, 13.26%)</title><rect x="153.8" y="611.0" width="156.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="156.8" y="622.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (37 samples, 13.26%)</title><rect x="153.8" y="595.0" width="156.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="156.8" y="606.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (37 samples, 13.26%)</title><rect x="153.8" y="579.0" width="156.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="156.8" y="590.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (37 samples, 13.26%)</title><rect x="153.8" y="563.0" width="156.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="156.8" y="574.0">com/fasterxml/jackso..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (6 samples, 2.15%)</title><rect x="166.5" y="547.0" width="25.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="169.5" y="558.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (6 samples, 2.15%)</title><rect x="166.5" y="531.0" width="25.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="169.5" y="542.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (6 samples, 2.15%)</title><rect x="166.5" y="515.0" width="25.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="169.5" y="526.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (6 samples, 2.15%)</title><rect x="166.5" y="499.0" width="25.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="169.5" y="510.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (6 samples, 2.15%)</title><rect x="166.5" y="483.0" width="25.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="169.5" y="494.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (26 samples, 9.32%)</title><rect x="191.9" y="547.0" width="109.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="194.9" y="558.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (3 samples, 1.08%)</title><rect x="191.9" y="531.0" width="12.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="194.9" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (3 samples, 1.08%)</title><rect x="204.6" y="531.0" width="12.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="207.6" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.08%)</title><rect x="204.6" y="515.0" width="12.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="207.6" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.36%)</title><rect x="213.0" y="499.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="216.0" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.36%)</title><rect x="213.0" y="483.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="216.0" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (4 samples, 1.43%)</title><rect x="217.2" y="531.0" width="17.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="220.2" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.36%)</title><rect x="217.2" y="515.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="220.2" y="526.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.36%)</title><rect x="217.2" y="499.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="220.2" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.36%)</title><rect x="217.2" y="483.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="220.2" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.36%)</title><rect x="217.2" y="467.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="220.2" y="478.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.36%)</title><rect x="217.2" y="451.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="220.2" y="462.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.36%)</title><rect x="217.2" y="435.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="220.2" y="446.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.36%)</title><rect x="217.2" y="419.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="220.2" y="430.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_eden_size() (1 samples, 0.36%)</title><rect x="217.2" y="403.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="220.2" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 1.08%)</title><rect x="221.5" y="515.0" width="12.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="224.5" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (15 samples, 5.38%)</title><rect x="234.2" y="531.0" width="63.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="237.2" y="542.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (7 samples, 2.51%)</title><rect x="234.2" y="515.0" width="29.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="237.2" y="526.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.36%)</title><rect x="234.2" y="499.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="237.2" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (6 samples, 2.15%)</title><rect x="238.4" y="499.0" width="25.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="241.4" y="510.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (8 samples, 2.87%)</title><rect x="263.8" y="515.0" width="33.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="266.8" y="526.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (8 samples, 2.87%)</title><rect x="263.8" y="499.0" width="33.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="266.8" y="510.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (8 samples, 2.87%)</title><rect x="263.8" y="483.0" width="33.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="266.8" y="494.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.43%)</title><rect x="263.8" y="467.0" width="16.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="266.8" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 1.08%)</title><rect x="268.0" y="451.0" width="12.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="271.0" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 1.08%)</title><rect x="268.0" y="435.0" width="12.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="271.0" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 1.08%)</title><rect x="268.0" y="419.0" width="12.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="271.0" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.72%)</title><rect x="272.2" y="403.0" width="8.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="275.2" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (2 samples, 0.72%)</title><rect x="280.7" y="467.0" width="8.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="283.7" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.72%)</title><rect x="280.7" y="451.0" width="8.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="283.7" y="462.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.36%)</title><rect x="280.7" y="435.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="283.7" y="446.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.36%)</title><rect x="280.7" y="419.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="283.7" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.36%)</title><rect x="280.7" y="403.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="283.7" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.36%)</title><rect x="280.7" y="387.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="283.7" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.36%)</title><rect x="284.9" y="435.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="287.9" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.36%)</title><rect x="284.9" y="419.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="287.9" y="430.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.36%)</title><rect x="284.9" y="403.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="287.9" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.36%)</title><rect x="289.1" y="467.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="292.1" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.36%)</title><rect x="289.1" y="451.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="292.1" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.36%)</title><rect x="289.1" y="435.0" width="4.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="292.1" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.36%)</title><rect x="289.1" y="419.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="292.1" y="430.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.36%)</title><rect x="289.1" y="403.0" width="4.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="292.1" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.36%)</title><rect x="293.4" y="467.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="296.4" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.36%)</title><rect x="293.4" y="451.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="296.4" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.36%)</title><rect x="293.4" y="435.0" width="4.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="296.4" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.checkUnresolvedObjectId (1 samples, 0.36%)</title><rect x="297.6" y="531.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="300.6" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.72%)</title><rect x="301.8" y="547.0" width="8.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="304.8" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.72%)</title><rect x="301.8" y="531.0" width="8.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="304.8" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.72%)</title><rect x="301.8" y="515.0" width="8.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="304.8" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.72%)</title><rect x="301.8" y="499.0" width="8.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="304.8" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.72%)</title><rect x="301.8" y="483.0" width="8.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="304.8" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (143 samples, 51.25%)</title><rect x="310.3" y="643.0" width="604.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="313.3" y="654.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (21 samples, 7.53%)</title><rect x="310.3" y="627.0" width="88.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="313.3" y="638.0">com/lineco..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (21 samples, 7.53%)</title><rect x="310.3" y="611.0" width="88.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="313.3" y="622.0">org/slf4j/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (21 samples, 7.53%)</title><rect x="310.3" y="595.0" width="88.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="313.3" y="606.0">ch/qos/log..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 1.43%)</title><rect x="310.3" y="579.0" width="16.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="313.3" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 1.43%)</title><rect x="310.3" y="563.0" width="16.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="313.3" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 1.43%)</title><rect x="310.3" y="547.0" width="16.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="313.3" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 1.43%)</title><rect x="310.3" y="531.0" width="16.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="313.3" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (4 samples, 1.43%)</title><rect x="310.3" y="515.0" width="16.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="313.3" y="526.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.wasLastOpReadOrNull (4 samples, 1.43%)</title><rect x="327.2" y="579.0" width="16.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="330.2" y="590.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 1.43%)</title><rect x="327.2" y="563.0" width="16.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="330.2" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 1.08%)</title><rect x="344.1" y="579.0" width="12.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="347.1" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.72%)</title><rect x="348.4" y="563.0" width="8.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="351.4" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.72%)</title><rect x="348.4" y="547.0" width="8.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="351.4" y="558.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (10 samples, 3.58%)</title><rect x="356.8" y="579.0" width="42.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="359.8" y="590.0">java..</text>
</g>
<g>
<title>java/util/HashMap.remove (6 samples, 2.15%)</title><rect x="373.7" y="563.0" width="25.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="376.7" y="574.0">j..</text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.72%)</title><rect x="373.7" y="547.0" width="8.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="376.7" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 1.43%)</title><rect x="382.2" y="547.0" width="16.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="385.2" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 1.08%)</title><rect x="399.1" y="627.0" width="12.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="402.1" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 1.08%)</title><rect x="399.1" y="611.0" width="12.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="402.1" y="622.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 1.08%)</title><rect x="399.1" y="595.0" width="12.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="402.1" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (26 samples, 9.32%)</title><rect x="411.8" y="627.0" width="110.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="414.8" y="638.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (26 samples, 9.32%)</title><rect x="411.8" y="611.0" width="110.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="414.8" y="622.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (10 samples, 3.58%)</title><rect x="411.8" y="595.0" width="42.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="414.8" y="606.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (6 samples, 2.15%)</title><rect x="428.7" y="579.0" width="25.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="431.7" y="590.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 1.79%)</title><rect x="432.9" y="563.0" width="21.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="435.9" y="574.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 1.08%)</title><rect x="437.2" y="547.0" width="12.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="440.2" y="558.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (3 samples, 1.08%)</title><rect x="437.2" y="531.0" width="12.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="440.2" y="542.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 1.08%)</title><rect x="437.2" y="515.0" width="12.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="440.2" y="526.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 1.08%)</title><rect x="437.2" y="499.0" width="12.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="440.2" y="510.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.72%)</title><rect x="437.2" y="483.0" width="8.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="440.2" y="494.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.36%)</title><rect x="437.2" y="467.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="440.2" y="478.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.36%)</title><rect x="441.4" y="467.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="444.4" y="478.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.36%)</title><rect x="445.6" y="483.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="448.6" y="494.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.36%)</title><rect x="449.9" y="547.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="452.9" y="558.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (16 samples, 5.73%)</title><rect x="454.1" y="595.0" width="67.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="457.1" y="606.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (16 samples, 5.73%)</title><rect x="454.1" y="579.0" width="67.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="457.1" y="590.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.72%)</title><rect x="466.8" y="563.0" width="8.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="469.8" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.72%)</title><rect x="466.8" y="547.0" width="8.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="469.8" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.72%)</title><rect x="466.8" y="531.0" width="8.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="469.8" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.72%)</title><rect x="466.8" y="515.0" width="8.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="469.8" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.72%)</title><rect x="466.8" y="499.0" width="8.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="469.8" y="510.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (11 samples, 3.94%)</title><rect x="475.2" y="563.0" width="46.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="478.2" y="574.0">java..</text>
</g>
<g>
<title>java/util/HashMap.put (11 samples, 3.94%)</title><rect x="475.2" y="547.0" width="46.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="478.2" y="558.0">java..</text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.36%)</title><rect x="475.2" y="531.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="478.2" y="542.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.36%)</title><rect x="475.2" y="515.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="478.2" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (10 samples, 3.58%)</title><rect x="479.5" y="531.0" width="42.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="482.5" y="542.0">java..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.36%)</title><rect x="500.6" y="515.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="503.6" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (3 samples, 1.08%)</title><rect x="504.8" y="515.0" width="12.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="507.8" y="526.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.36%)</title><rect x="517.5" y="515.0" width="4.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="520.5" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (81 samples, 29.03%)</title><rect x="521.8" y="627.0" width="342.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="524.8" y="638.0">com/linecorp/decaton/processor/runtime/interna..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (78 samples, 27.96%)</title><rect x="534.4" y="611.0" width="329.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="537.4" y="622.0">com/linecorp/decaton/processor/runtime/intern..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$207/595264677.process (76 samples, 27.24%)</title><rect x="534.4" y="595.0" width="321.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="537.4" y="606.0">com/linecorp/decaton/benchmark/DecatonRunne..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (76 samples, 27.24%)</title><rect x="534.4" y="579.0" width="321.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="537.4" y="590.0">com/linecorp/decaton/benchmark/DecatonRunne..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (65 samples, 23.30%)</title><rect x="534.4" y="563.0" width="275.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="537.4" y="574.0">com/linecorp/decaton/benchmark/Record..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.36%)</title><rect x="538.7" y="547.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="541.7" y="558.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.36%)</title><rect x="538.7" y="531.0" width="4.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="541.7" y="542.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.36%)</title><rect x="538.7" y="515.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="541.7" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (61 samples, 21.86%)</title><rect x="542.9" y="547.0" width="258.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="545.9" y="558.0">com/linecorp/decaton/benchmark/Rec..</text>
</g>
<g>
<title>java/lang/Thread.sleep (60 samples, 21.51%)</title><rect x="547.1" y="531.0" width="253.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="550.1" y="542.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (52 samples, 18.64%)</title><rect x="572.5" y="515.0" width="219.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="575.5" y="526.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (4 samples, 1.43%)</title><rect x="581.0" y="499.0" width="16.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="584.0" y="510.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.36%)</title><rect x="597.9" y="499.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="600.9" y="510.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.36%)</title><rect x="602.1" y="499.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="605.1" y="510.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 1.08%)</title><rect x="606.3" y="499.0" width="12.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="609.3" y="510.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.72%)</title><rect x="610.6" y="483.0" width="8.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="613.6" y="494.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.72%)</title><rect x="619.0" y="499.0" width="8.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="622.0" y="510.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (39 samples, 13.98%)</title><rect x="627.5" y="499.0" width="164.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="630.5" y="510.0">os::sleep(Thread*, lo..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 1.08%)</title><rect x="661.3" y="483.0" width="12.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="664.3" y="494.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.36%)</title><rect x="669.8" y="467.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="672.8" y="478.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.36%)</title><rect x="674.0" y="483.0" width="4.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="677.0" y="494.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.36%)</title><rect x="674.0" y="467.0" width="4.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="677.0" y="478.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 1.08%)</title><rect x="678.2" y="483.0" width="12.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="681.2" y="494.0"></text>
</g>
<g>
<title>__pthread_cond_init (2 samples, 0.72%)</title><rect x="690.9" y="483.0" width="8.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="693.9" y="494.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (14 samples, 5.02%)</title><rect x="699.4" y="483.0" width="59.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="702.4" y="494.0">__pthr..</text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.36%)</title><rect x="758.6" y="483.0" width="4.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="761.6" y="494.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (5 samples, 1.79%)</title><rect x="762.8" y="483.0" width="21.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="765.8" y="494.0">o..</text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.72%)</title><rect x="784.0" y="483.0" width="8.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="787.0" y="494.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.36%)</title><rect x="792.4" y="515.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="795.4" y="526.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.36%)</title><rect x="796.7" y="515.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="799.7" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.72%)</title><rect x="800.9" y="547.0" width="8.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="803.9" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.36%)</title><rect x="805.1" y="531.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="808.1" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.36%)</title><rect x="805.1" y="515.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="808.1" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.36%)</title><rect x="805.1" y="499.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="808.1" y="510.0"></text>
</g>
<g>
<title>java/lang/Thread.sleep (1 samples, 0.36%)</title><rect x="805.1" y="483.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="808.1" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (11 samples, 3.94%)</title><rect x="809.4" y="563.0" width="46.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="812.4" y="574.0">com/..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (11 samples, 3.94%)</title><rect x="809.4" y="547.0" width="46.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="812.4" y="558.0">java..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (11 samples, 3.94%)</title><rect x="809.4" y="531.0" width="46.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="812.4" y="542.0">java..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (11 samples, 3.94%)</title><rect x="809.4" y="515.0" width="46.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="812.4" y="526.0">java..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (11 samples, 3.94%)</title><rect x="809.4" y="499.0" width="46.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="812.4" y="510.0">java..</text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.72%)</title><rect x="855.9" y="595.0" width="8.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="858.9" y="606.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.36%)</title><rect x="860.1" y="579.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="863.1" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (4 samples, 1.43%)</title><rect x="864.3" y="627.0" width="17.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="867.3" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.elapsedNanos (2 samples, 0.72%)</title><rect x="864.3" y="611.0" width="8.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="867.3" y="622.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.36%)</title><rect x="868.6" y="595.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="871.6" y="606.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.72%)</title><rect x="872.8" y="611.0" width="8.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="875.8" y="622.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.36%)</title><rect x="877.0" y="595.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="880.0" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.36%)</title><rect x="877.0" y="579.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="880.0" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.36%)</title><rect x="877.0" y="563.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="880.0" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.36%)</title><rect x="877.0" y="547.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="880.0" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.36%)</title><rect x="877.0" y="531.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="880.0" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.36%)</title><rect x="877.0" y="515.0" width="4.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="880.0" y="526.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.36%)</title><rect x="877.0" y="499.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="880.0" y="510.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.36%)</title><rect x="877.0" y="483.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="880.0" y="494.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.36%)</title><rect x="877.0" y="467.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="880.0" y="478.0"></text>
</g>
<g>
<title>MasterFreeRegionListMtSafeChecker::check() (1 samples, 0.36%)</title><rect x="877.0" y="451.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="880.0" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (1 samples, 0.36%)</title><rect x="881.3" y="627.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="884.3" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.&lt;init&gt; (1 samples, 0.36%)</title><rect x="881.3" y="611.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="884.3" y="622.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/Counter.increment (2 samples, 0.72%)</title><rect x="885.5" y="627.0" width="8.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="888.5" y="638.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeCounter.increment (2 samples, 0.72%)</title><rect x="885.5" y="611.0" width="8.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="888.5" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/193363688.linkToTargetMethod (2 samples, 0.72%)</title><rect x="885.5" y="595.0" width="8.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="888.5" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1562218841.invokeStatic_D_L (2 samples, 0.72%)</title><rect x="885.5" y="579.0" width="8.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="888.5" y="590.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeCounter$$Lambda$284/107874565.get$Lambda (2 samples, 0.72%)</title><rect x="885.5" y="563.0" width="8.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="888.5" y="574.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/264720932.linkToTargetMethod (1 samples, 0.36%)</title><rect x="893.9" y="627.0" width="4.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="896.9" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/399931359.invokeStatic_L3_L (1 samples, 0.36%)</title><rect x="893.9" y="611.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="896.9" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$296/1547963656.get$Lambda (1 samples, 0.36%)</title><rect x="893.9" y="595.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="896.9" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 1.43%)</title><rect x="898.2" y="627.0" width="16.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="901.2" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 1.43%)</title><rect x="898.2" y="611.0" width="16.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="901.2" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 1.43%)</title><rect x="898.2" y="595.0" width="16.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="901.2" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$296/1547963656.accept (4 samples, 1.43%)</title><rect x="898.2" y="579.0" width="16.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="901.2" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$62 (4 samples, 1.43%)</title><rect x="898.2" y="563.0" width="16.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="901.2" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.36%)</title><rect x="898.2" y="547.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="901.2" y="558.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.36%)</title><rect x="898.2" y="531.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="901.2" y="542.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.36%)</title><rect x="898.2" y="515.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="901.2" y="526.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (3 samples, 1.08%)</title><rect x="902.4" y="547.0" width="12.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="905.4" y="558.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (3 samples, 1.08%)</title><rect x="902.4" y="531.0" width="12.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="905.4" y="542.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.72%)</title><rect x="906.6" y="515.0" width="8.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="909.6" y="526.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.36%)</title><rect x="910.9" y="499.0" width="4.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="913.9" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (9 samples, 3.23%)</title><rect x="915.1" y="643.0" width="38.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="918.1" y="654.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (9 samples, 3.23%)</title><rect x="915.1" y="627.0" width="38.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="918.1" y="638.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 2.87%)</title><rect x="919.3" y="611.0" width="33.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="922.3" y="622.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$298/952576751.accept (8 samples, 2.87%)</title><rect x="919.3" y="595.0" width="33.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="922.3" y="606.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$61 (8 samples, 2.87%)</title><rect x="919.3" y="579.0" width="33.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="922.3" y="590.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$283/1396109953.complete (8 samples, 2.87%)</title><rect x="919.3" y="563.0" width="33.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="922.3" y="574.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$38 (8 samples, 2.87%)</title><rect x="919.3" y="547.0" width="33.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="922.3" y="558.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$282/805185768.complete (8 samples, 2.87%)</title><rect x="919.3" y="531.0" width="33.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="922.3" y="542.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$68 (8 samples, 2.87%)</title><rect x="919.3" y="515.0" width="33.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="922.3" y="526.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (8 samples, 2.87%)</title><rect x="919.3" y="499.0" width="33.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="922.3" y="510.0">co..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (8 samples, 2.87%)</title><rect x="919.3" y="483.0" width="33.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="922.3" y="494.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (8 samples, 2.87%)</title><rect x="919.3" y="467.0" width="33.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="922.3" y="478.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (8 samples, 2.87%)</title><rect x="919.3" y="451.0" width="33.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="922.3" y="462.0">ch..</text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.36%)</title><rect x="953.2" y="643.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="956.2" y="654.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.36%)</title><rect x="953.2" y="627.0" width="4.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="956.2" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (2 samples, 0.72%)</title><rect x="957.4" y="659.0" width="8.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="960.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.36%)</title><rect x="965.8" y="707.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="968.8" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.36%)</title><rect x="965.8" y="691.0" width="4.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="968.8" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.36%)</title><rect x="965.8" y="675.0" width="4.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="968.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.36%)</title><rect x="965.8" y="659.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="968.8" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (7 samples, 2.51%)</title><rect x="970.1" y="707.0" width="29.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="973.1" y="718.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (5 samples, 1.79%)</title><rect x="978.5" y="691.0" width="21.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="981.5" y="702.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.36%)</title><rect x="995.4" y="675.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="998.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.36%)</title><rect x="995.4" y="659.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="998.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.36%)</title><rect x="995.4" y="643.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="998.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.36%)</title><rect x="995.4" y="627.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="998.4" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.72%)</title><rect x="999.7" y="755.0" width="8.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1002.7" y="766.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.36%)</title><rect x="999.7" y="739.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1002.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.access$500 (1 samples, 0.36%)</title><rect x="1003.9" y="739.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1006.9" y="750.0"></text>
</g>
<g>
<title>start_thread (43 samples, 15.41%)</title><rect x="1008.1" y="755.0" width="181.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1011.1" y="766.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (43 samples, 15.41%)</title><rect x="1008.1" y="739.0" width="181.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1011.1" y="750.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (12 samples, 4.30%)</title><rect x="1008.1" y="723.0" width="50.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1011.1" y="734.0">GangW..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (12 samples, 4.30%)</title><rect x="1008.1" y="707.0" width="50.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1011.1" y="718.0">G1Par..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (12 samples, 4.30%)</title><rect x="1008.1" y="691.0" width="50.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1011.1" y="702.0">G1Par..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (12 samples, 4.30%)</title><rect x="1008.1" y="675.0" width="50.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1011.1" y="686.0">G1Par..</text>
</g>
<g>
<title>G1DefaultParGCAllocator::alloc_buffer(InCSetState, unsigned char) (1 samples, 0.36%)</title><rect x="1012.4" y="659.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1015.4" y="670.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (7 samples, 2.51%)</title><rect x="1016.6" y="659.0" width="29.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1019.6" y="670.0">G1..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (3 samples, 1.08%)</title><rect x="1033.5" y="643.0" width="12.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1036.5" y="654.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.36%)</title><rect x="1042.0" y="627.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1045.0" y="638.0"></text>
</g>
<g>
<title>Klass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.36%)</title><rect x="1046.2" y="659.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1049.2" y="670.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (2 samples, 0.72%)</title><rect x="1050.4" y="659.0" width="8.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1053.4" y="670.0"></text>
</g>
<g>
<title>JavaThread::run() (30 samples, 10.75%)</title><rect x="1058.9" y="723.0" width="126.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1061.9" y="734.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (30 samples, 10.75%)</title><rect x="1058.9" y="707.0" width="126.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1061.9" y="718.0">JavaThread::thre..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (30 samples, 10.75%)</title><rect x="1058.9" y="691.0" width="126.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1061.9" y="702.0">CompileBroker::c..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (30 samples, 10.75%)</title><rect x="1058.9" y="675.0" width="126.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1061.9" y="686.0">CompileBroker::i..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (26 samples, 9.32%)</title><rect x="1058.9" y="659.0" width="110.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1061.9" y="670.0">C2Compiler::c..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (26 samples, 9.32%)</title><rect x="1058.9" y="643.0" width="110.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1061.9" y="654.0">Compile::Comp..</text>
</g>
<g>
<title>Compile::Code_Gen() (14 samples, 5.02%)</title><rect x="1058.9" y="627.0" width="59.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1061.9" y="638.0">Compil..</text>
</g>
<g>
<title>MachNode::is_TrapBasedCheckNode() const (1 samples, 0.36%)</title><rect x="1058.9" y="611.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1061.9" y="622.0"></text>
</g>
<g>
<title>Matcher::match() (1 samples, 0.36%)</title><rect x="1063.1" y="611.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1066.1" y="622.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.36%)</title><rect x="1063.1" y="595.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1066.1" y="606.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.36%)</title><rect x="1063.1" y="579.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1066.1" y="590.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.36%)</title><rect x="1063.1" y="563.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1066.1" y="574.0"></text>
</g>
<g>
<title>State::_sub_Op_StoreLConditional(Node const*) (1 samples, 0.36%)</title><rect x="1063.1" y="547.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1066.1" y="558.0"></text>
</g>
<g>
<title>PhaseCFG::fixup_flow() (1 samples, 0.36%)</title><rect x="1067.3" y="611.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1070.3" y="622.0"></text>
</g>
<g>
<title>PhaseCFG::insert_goto_at(unsigned int, unsigned int) (1 samples, 0.36%)</title><rect x="1067.3" y="595.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1070.3" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (11 samples, 3.94%)</title><rect x="1071.6" y="611.0" width="46.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1074.6" y="622.0">Phas..</text>
</g>
<g>
<title>MachNode::Opcode() const (1 samples, 0.36%)</title><rect x="1071.6" y="595.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1074.6" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.36%)</title><rect x="1075.8" y="595.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1078.8" y="606.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.36%)</title><rect x="1075.8" y="579.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1078.8" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 1.08%)</title><rect x="1080.0" y="595.0" width="12.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1083.0" y="606.0"></text>
</g>
<g>
<title>MachSpillCopyNode::MachSpillCopyNode(Node*, RegMask const&amp;, RegMask const&amp;) (1 samples, 0.36%)</title><rect x="1088.5" y="579.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1091.5" y="590.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.36%)</title><rect x="1088.5" y="563.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1091.5" y="574.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.36%)</title><rect x="1088.5" y="547.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1091.5" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (2 samples, 0.72%)</title><rect x="1092.7" y="595.0" width="8.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1095.7" y="606.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.36%)</title><rect x="1097.0" y="579.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1100.0" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.36%)</title><rect x="1101.2" y="595.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1104.2" y="606.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 1.08%)</title><rect x="1105.4" y="595.0" width="12.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1108.4" y="606.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.72%)</title><rect x="1109.6" y="579.0" width="8.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1112.6" y="590.0"></text>
</g>
<g>
<title>Compile::Optimize() (10 samples, 3.58%)</title><rect x="1118.1" y="627.0" width="42.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1121.1" y="638.0">Comp..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.36%)</title><rect x="1118.1" y="611.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1121.1" y="622.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.36%)</title><rect x="1118.1" y="595.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1121.1" y="606.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.36%)</title><rect x="1118.1" y="579.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1121.1" y="590.0"></text>
</g>
<g>
<title>Node::disconnect_inputs(Node*, Compile*) (1 samples, 0.36%)</title><rect x="1118.1" y="563.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1121.1" y="574.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.36%)</title><rect x="1122.3" y="611.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1125.3" y="622.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.36%)</title><rect x="1122.3" y="595.0" width="4.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1125.3" y="606.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.36%)</title><rect x="1122.3" y="579.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1125.3" y="590.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.36%)</title><rect x="1122.3" y="563.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1125.3" y="574.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.36%)</title><rect x="1122.3" y="547.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1125.3" y="558.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.36%)</title><rect x="1122.3" y="531.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1125.3" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (6 samples, 2.15%)</title><rect x="1126.6" y="611.0" width="25.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1129.6" y="622.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 1.08%)</title><rect x="1126.6" y="595.0" width="12.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1129.6" y="606.0"></text>
</g>
<g>
<title>CProjNode::is_CFG() const (1 samples, 0.36%)</title><rect x="1130.8" y="579.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1133.8" y="590.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.36%)</title><rect x="1135.0" y="579.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1138.0" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.08%)</title><rect x="1139.2" y="595.0" width="12.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.2" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (3 samples, 1.08%)</title><rect x="1139.2" y="579.0" width="12.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1142.2" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (3 samples, 1.08%)</title><rect x="1139.2" y="563.0" width="12.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1142.2" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.36%)</title><rect x="1147.7" y="547.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1150.7" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.36%)</title><rect x="1147.7" y="531.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1150.7" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.36%)</title><rect x="1147.7" y="515.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1150.7" y="526.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.72%)</title><rect x="1151.9" y="611.0" width="8.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1154.9" y="622.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.72%)</title><rect x="1151.9" y="595.0" width="8.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.9" y="606.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.36%)</title><rect x="1151.9" y="579.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1154.9" y="590.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.36%)</title><rect x="1151.9" y="563.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1154.9" y="574.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.36%)</title><rect x="1151.9" y="547.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.9" y="558.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.36%)</title><rect x="1156.2" y="579.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.2" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.72%)</title><rect x="1160.4" y="627.0" width="8.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.4" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.72%)</title><rect x="1160.4" y="611.0" width="8.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.72%)</title><rect x="1160.4" y="595.0" width="8.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1163.4" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.72%)</title><rect x="1160.4" y="579.0" width="8.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1163.4" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.72%)</title><rect x="1160.4" y="563.0" width="8.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.72%)</title><rect x="1160.4" y="547.0" width="8.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.4" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.72%)</title><rect x="1160.4" y="531.0" width="8.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.4" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.72%)</title><rect x="1160.4" y="515.0" width="8.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.72%)</title><rect x="1160.4" y="499.0" width="8.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.72%)</title><rect x="1160.4" y="483.0" width="8.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.72%)</title><rect x="1160.4" y="467.0" width="8.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.72%)</title><rect x="1160.4" y="451.0" width="8.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1163.4" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.72%)</title><rect x="1160.4" y="435.0" width="8.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.4" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.72%)</title><rect x="1160.4" y="419.0" width="8.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1163.4" y="430.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.36%)</title><rect x="1160.4" y="403.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1163.4" y="414.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.36%)</title><rect x="1160.4" y="387.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.4" y="398.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.36%)</title><rect x="1160.4" y="371.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.4" y="382.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.36%)</title><rect x="1160.4" y="355.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.4" y="366.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.36%)</title><rect x="1160.4" y="339.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.4" y="350.0"></text>
</g>
<g>
<title>Node::add_req_batch(Node*, unsigned int) (1 samples, 0.36%)</title><rect x="1160.4" y="323.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.4" y="334.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.36%)</title><rect x="1160.4" y="307.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1163.4" y="318.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.36%)</title><rect x="1160.4" y="291.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1163.4" y="302.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.36%)</title><rect x="1160.4" y="275.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.4" y="286.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.36%)</title><rect x="1160.4" y="259.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1163.4" y="270.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.36%)</title><rect x="1160.4" y="243.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.4" y="254.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.36%)</title><rect x="1160.4" y="227.0" width="4.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1163.4" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1164.6" y="403.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1164.6" y="387.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1164.6" y="371.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1164.6" y="355.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.6" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1164.6" y="339.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.6" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1164.6" y="323.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1164.6" y="307.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1164.6" y="291.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1164.6" y="275.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1164.6" y="259.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.6" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1164.6" y="243.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1167.6" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1164.6" y="227.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.6" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1164.6" y="211.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.6" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1164.6" y="195.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.6" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1164.6" y="179.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.6" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.36%)</title><rect x="1164.6" y="163.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.6" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.36%)</title><rect x="1164.6" y="147.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.6" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.36%)</title><rect x="1164.6" y="131.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.6" y="142.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.36%)</title><rect x="1164.6" y="115.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.6" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.36%)</title><rect x="1164.6" y="99.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.6" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.36%)</title><rect x="1164.6" y="83.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.6" y="94.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.36%)</title><rect x="1164.6" y="67.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.6" y="78.0"></text>
</g>
<g>
<title>Parse::call_register_finalizer() (1 samples, 0.36%)</title><rect x="1164.6" y="51.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.6" y="62.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.36%)</title><rect x="1164.6" y="35.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.6" y="46.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (4 samples, 1.43%)</title><rect x="1168.9" y="659.0" width="16.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.9" y="670.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (4 samples, 1.43%)</title><rect x="1168.9" y="643.0" width="16.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.9" y="654.0"></text>
</g>
<g>
<title>Compilation::compile_method() (4 samples, 1.43%)</title><rect x="1168.9" y="627.0" width="16.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.9" y="638.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.08%)</title><rect x="1168.9" y="611.0" width="12.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.9" y="622.0"></text>
</g>
<g>
<title>Compilation::build_hir() (2 samples, 0.72%)</title><rect x="1168.9" y="595.0" width="8.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.9" y="606.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (2 samples, 0.72%)</title><rect x="1168.9" y="579.0" width="8.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.9" y="590.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (2 samples, 0.72%)</title><rect x="1168.9" y="563.0" width="8.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.9" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (2 samples, 0.72%)</title><rect x="1168.9" y="547.0" width="8.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.9" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.72%)</title><rect x="1168.9" y="531.0" width="8.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.9" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.72%)</title><rect x="1168.9" y="515.0" width="8.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.9" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.72%)</title><rect x="1168.9" y="499.0" width="8.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.9" y="510.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (2 samples, 0.72%)</title><rect x="1168.9" y="483.0" width="8.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.9" y="494.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (2 samples, 0.72%)</title><rect x="1168.9" y="467.0" width="8.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.9" y="478.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.72%)</title><rect x="1168.9" y="451.0" width="8.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.9" y="462.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.72%)</title><rect x="1168.9" y="435.0" width="8.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.9" y="446.0"></text>
</g>
<g>
<title>BlockBegin::try_merge(ValueStack*) (1 samples, 0.36%)</title><rect x="1168.9" y="419.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.9" y="430.0"></text>
</g>
<g>
<title>ValueStack::copy(ValueStack::Kind, int) (1 samples, 0.36%)</title><rect x="1168.9" y="403.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.9" y="414.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.36%)</title><rect x="1168.9" y="387.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.9" y="398.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.36%)</title><rect x="1173.1" y="419.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.1" y="430.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.36%)</title><rect x="1173.1" y="403.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.1" y="414.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.36%)</title><rect x="1173.1" y="387.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.1" y="398.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.36%)</title><rect x="1173.1" y="371.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.1" y="382.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.36%)</title><rect x="1173.1" y="355.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.1" y="366.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_interface_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.36%)</title><rect x="1173.1" y="339.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.1" y="350.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.36%)</title><rect x="1173.1" y="323.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.1" y="334.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.36%)</title><rect x="1173.1" y="307.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.1" y="318.0"></text>
</g>
<g>
<title>SystemDictionary::add_loader_constraint(Symbol*, Handle, Handle, Thread*) (1 samples, 0.36%)</title><rect x="1173.1" y="291.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.1" y="302.0"></text>
</g>
<g>
<title>Dictionary::find_class(int, unsigned int, Symbol*, ClassLoaderData*) (1 samples, 0.36%)</title><rect x="1173.1" y="275.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.1" y="286.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.36%)</title><rect x="1177.3" y="595.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.3" y="606.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.36%)</title><rect x="1177.3" y="579.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.3" y="590.0"></text>
</g>
<g>
<title>LIR_Assembler::process_debug_info(LIR_Op*) (1 samples, 0.36%)</title><rect x="1177.3" y="563.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.3" y="574.0"></text>
</g>
<g>
<title>LIR_Assembler::record_non_safepoint_debug_info() (1 samples, 0.36%)</title><rect x="1177.3" y="547.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.3" y="558.0"></text>
</g>
<g>
<title>ValueRecorder&lt;Metadata*&gt;::maybe_find_index(Metadata*) (1 samples, 0.36%)</title><rect x="1177.3" y="531.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.3" y="542.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.36%)</title><rect x="1181.5" y="611.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.5" y="622.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.36%)</title><rect x="1181.5" y="595.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.5" y="606.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.36%)</title><rect x="1181.5" y="579.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.5" y="590.0"></text>
</g>
<g>
<title>CodeBuffer::finalize_oop_references(methodHandle) (1 samples, 0.36%)</title><rect x="1181.5" y="563.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.5" y="574.0"></text>
</g>
<g>
<title>metadata_Relocation::metadata_value() (1 samples, 0.36%)</title><rect x="1181.5" y="547.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.5" y="558.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.36%)</title><rect x="1185.8" y="723.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.8" y="734.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (1 samples, 0.36%)</title><rect x="1185.8" y="707.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.8" y="718.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.36%)</title><rect x="1185.8" y="691.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.8" y="702.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.36%)</title><rect x="1185.8" y="675.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.8" y="686.0"></text>
</g>
</g>
</svg>
