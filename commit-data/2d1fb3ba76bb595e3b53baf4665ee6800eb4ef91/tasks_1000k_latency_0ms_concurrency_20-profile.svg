<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="693"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="693"> </text>
<g id="frames">
<g>
<title>all (1,087 samples, 100.00%)</title><rect x="10.0" y="659.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="670.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (264 samples, 24.29%)</title><rect x="10.0" y="643.0" width="286.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="654.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (264 samples, 24.29%)</title><rect x="10.0" y="627.0" width="286.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="638.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.09%)</title><rect x="10.0" y="611.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (1 samples, 0.09%)</title><rect x="10.0" y="595.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="10.0" y="579.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="10.0" y="563.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="10.0" y="547.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="10.0" y="531.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="10.0" y="515.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.09%)</title><rect x="10.0" y="499.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (4 samples, 0.37%)</title><rect x="11.1" y="611.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="14.1" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (4 samples, 0.37%)</title><rect x="11.1" y="595.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.1" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="14.3" y="579.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.3" y="590.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="14.3" y="563.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.3" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="14.3" y="547.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.3" y="558.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="14.3" y="531.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.3" y="542.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="14.3" y="515.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.3" y="526.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="14.3" y="499.0" width="1.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="17.3" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (7 samples, 0.64%)</title><rect x="15.4" y="611.0" width="7.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.4" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (7 samples, 0.64%)</title><rect x="15.4" y="595.0" width="7.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="18.4" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (7 samples, 0.64%)</title><rect x="15.4" y="579.0" width="7.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.4" y="590.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.09%)</title><rect x="15.4" y="563.0" width="1.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="18.4" y="574.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="15.4" y="547.0" width="1.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="18.4" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$266/1411575187.accept (6 samples, 0.55%)</title><rect x="16.5" y="563.0" width="6.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.5" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (6 samples, 0.55%)</title><rect x="16.5" y="547.0" width="6.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="19.5" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (5 samples, 0.46%)</title><rect x="17.6" y="531.0" width="5.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.6" y="542.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (5 samples, 0.46%)</title><rect x="17.6" y="515.0" width="5.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.6" y="526.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (179 samples, 16.47%)</title><rect x="23.0" y="611.0" width="194.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="26.0" y="622.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$265/1408882291.accept (173 samples, 15.92%)</title><rect x="23.0" y="595.0" width="187.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="26.0" y="606.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (172 samples, 15.82%)</title><rect x="24.1" y="579.0" width="186.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.1" y="590.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (165 samples, 15.18%)</title><rect x="24.1" y="563.0" width="179.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="27.1" y="574.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (165 samples, 15.18%)</title><rect x="24.1" y="547.0" width="179.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="27.1" y="558.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (165 samples, 15.18%)</title><rect x="24.1" y="531.0" width="179.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="27.1" y="542.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (165 samples, 15.18%)</title><rect x="24.1" y="515.0" width="179.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="27.1" y="526.0">java/util/concurrent/Ex..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (165 samples, 15.18%)</title><rect x="24.1" y="499.0" width="179.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.1" y="510.0">java/util/concurrent/Th..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (165 samples, 15.18%)</title><rect x="24.1" y="483.0" width="179.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="27.1" y="494.0">java/util/concurrent/Li..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="89.2" y="467.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="92.2" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="89.2" y="451.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="92.2" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.09%)</title><rect x="89.2" y="435.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="92.2" y="446.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::write_region_work(MemRegion) (1 samples, 0.09%)</title><rect x="89.2" y="419.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="92.2" y="430.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::invalidate(MemRegion, bool) (1 samples, 0.09%)</title><rect x="89.2" y="403.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="92.2" y="414.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.09%)</title><rect x="89.2" y="387.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="92.2" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (104 samples, 9.57%)</title><rect x="90.3" y="467.0" width="112.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="93.3" y="478.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (33 samples, 3.04%)</title><rect x="90.3" y="451.0" width="35.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="93.3" y="462.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (33 samples, 3.04%)</title><rect x="90.3" y="435.0" width="35.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="93.3" y="446.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (33 samples, 3.04%)</title><rect x="90.3" y="419.0" width="35.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="93.3" y="430.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.37%)</title><rect x="126.2" y="451.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="129.2" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (4 samples, 0.37%)</title><rect x="126.2" y="435.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="129.2" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.28%)</title><rect x="127.2" y="419.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="130.2" y="430.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (3 samples, 0.28%)</title><rect x="127.2" y="403.0" width="3.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="130.2" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (67 samples, 6.16%)</title><rect x="130.5" y="451.0" width="72.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="133.5" y="462.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (67 samples, 6.16%)</title><rect x="130.5" y="435.0" width="72.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="133.5" y="446.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (66 samples, 6.07%)</title><rect x="131.6" y="419.0" width="71.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="134.6" y="430.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (66 samples, 6.07%)</title><rect x="131.6" y="403.0" width="71.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="134.6" y="414.0">java/uti..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (63 samples, 5.80%)</title><rect x="134.8" y="387.0" width="68.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="137.8" y="398.0">sun/mis..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.09%)</title><rect x="135.9" y="371.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="138.9" y="382.0"></text>
</g>
<g>
<title>Unsafe_Unpark (56 samples, 5.15%)</title><rect x="137.0" y="371.0" width="60.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="140.0" y="382.0">Unsafe..</text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="140.3" y="355.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="143.3" y="366.0"></text>
</g>
<g>
<title>__pthread_cond_signal (32 samples, 2.94%)</title><rect x="141.4" y="355.0" width="34.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="144.4" y="366.0">__..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (5 samples, 0.46%)</title><rect x="176.1" y="355.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="179.1" y="366.0"></text>
</g>
<g>
<title>pthread_mutex_lock (15 samples, 1.38%)</title><rect x="181.5" y="355.0" width="16.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="184.5" y="366.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.09%)</title><rect x="197.8" y="371.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="200.8" y="382.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.28%)</title><rect x="198.9" y="371.0" width="3.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="201.9" y="382.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.09%)</title><rect x="202.1" y="371.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="205.1" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (5 samples, 0.46%)</title><rect x="203.2" y="563.0" width="5.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="206.2" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (5 samples, 0.46%)</title><rect x="203.2" y="547.0" width="5.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="206.2" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (2 samples, 0.18%)</title><rect x="208.7" y="563.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="211.7" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.18%)</title><rect x="208.7" y="547.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="211.7" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.18%)</title><rect x="208.7" y="531.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="211.7" y="542.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="210.8" y="595.0" width="1.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="213.8" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.09%)</title><rect x="211.9" y="595.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="214.9" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.09%)</title><rect x="211.9" y="579.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="214.9" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.09%)</title><rect x="211.9" y="563.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="214.9" y="574.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.09%)</title><rect x="213.0" y="595.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="216.0" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.09%)</title><rect x="213.0" y="579.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="216.0" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.09%)</title><rect x="213.0" y="563.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="216.0" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.09%)</title><rect x="213.0" y="547.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="216.0" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.09%)</title><rect x="213.0" y="531.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="216.0" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.18%)</title><rect x="214.1" y="595.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="217.1" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (2 samples, 0.18%)</title><rect x="214.1" y="579.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="217.1" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.18%)</title><rect x="214.1" y="563.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="217.1" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.18%)</title><rect x="214.1" y="547.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="217.1" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.09%)</title><rect x="216.3" y="595.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="219.3" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (73 samples, 6.72%)</title><rect x="217.3" y="611.0" width="79.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="220.3" y="622.0">org/apach..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (72 samples, 6.62%)</title><rect x="218.4" y="595.0" width="78.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="221.4" y="606.0">org/apach..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (57 samples, 5.24%)</title><rect x="218.4" y="579.0" width="61.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="221.4" y="590.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (3 samples, 0.28%)</title><rect x="218.4" y="563.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="221.4" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (3 samples, 0.28%)</title><rect x="218.4" y="547.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="221.4" y="558.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (3 samples, 0.28%)</title><rect x="218.4" y="531.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="221.4" y="542.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.09%)</title><rect x="220.6" y="515.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="223.6" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (54 samples, 4.97%)</title><rect x="221.7" y="563.0" width="58.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="224.7" y="574.0">org/ap..</text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="222.8" y="547.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="225.8" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="222.8" y="531.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="225.8" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (52 samples, 4.78%)</title><rect x="223.9" y="547.0" width="56.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="226.9" y="558.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (49 samples, 4.51%)</title><rect x="223.9" y="531.0" width="53.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="226.9" y="542.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (49 samples, 4.51%)</title><rect x="223.9" y="515.0" width="53.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="226.9" y="526.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (28 samples, 2.58%)</title><rect x="227.1" y="499.0" width="30.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="230.1" y="510.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (14 samples, 1.29%)</title><rect x="238.0" y="483.0" width="15.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="241.0" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (14 samples, 1.29%)</title><rect x="238.0" y="467.0" width="15.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="241.0" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (14 samples, 1.29%)</title><rect x="238.0" y="451.0" width="15.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="241.0" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (14 samples, 1.29%)</title><rect x="238.0" y="435.0" width="15.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="241.0" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (14 samples, 1.29%)</title><rect x="238.0" y="419.0" width="15.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="241.0" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (14 samples, 1.29%)</title><rect x="238.0" y="403.0" width="15.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="241.0" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (14 samples, 1.29%)</title><rect x="238.0" y="387.0" width="15.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="241.0" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.09%)</title><rect x="253.2" y="483.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="256.2" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.09%)</title><rect x="253.2" y="467.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="256.2" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (1 samples, 0.09%)</title><rect x="253.2" y="451.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="256.2" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.09%)</title><rect x="253.2" y="435.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="256.2" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.09%)</title><rect x="253.2" y="419.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="256.2" y="430.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="253.2" y="403.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="256.2" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="253.2" y="387.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="256.2" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.09%)</title><rect x="253.2" y="371.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="256.2" y="382.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::write_region_work(MemRegion) (1 samples, 0.09%)</title><rect x="253.2" y="355.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="256.2" y="366.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::invalidate(MemRegion, bool) (1 samples, 0.09%)</title><rect x="253.2" y="339.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="256.2" y="350.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.09%)</title><rect x="253.2" y="323.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="256.2" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.streamingIterator (2 samples, 0.18%)</title><rect x="254.3" y="483.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="257.3" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.09%)</title><rect x="256.4" y="483.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="259.4" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.09%)</title><rect x="256.4" y="467.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="259.4" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.09%)</title><rect x="256.4" y="451.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="259.4" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.09%)</title><rect x="256.4" y="435.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="259.4" y="446.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.09%)</title><rect x="256.4" y="419.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="259.4" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (18 samples, 1.66%)</title><rect x="257.5" y="499.0" width="19.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="260.5" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (17 samples, 1.56%)</title><rect x="258.6" y="483.0" width="18.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="261.6" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (10 samples, 0.92%)</title><rect x="258.6" y="467.0" width="10.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="261.6" y="478.0"></text>
</g>
<g>
<title>java/util/Optional.of (10 samples, 0.92%)</title><rect x="258.6" y="451.0" width="10.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="261.6" y="462.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.18%)</title><rect x="267.3" y="435.0" width="2.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="270.3" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (7 samples, 0.64%)</title><rect x="269.4" y="467.0" width="7.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="272.4" y="478.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (7 samples, 0.64%)</title><rect x="269.4" y="451.0" width="7.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="272.4" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.09%)</title><rect x="277.0" y="531.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="280.0" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.09%)</title><rect x="277.0" y="515.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="280.0" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.09%)</title><rect x="277.0" y="499.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="280.0" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.09%)</title><rect x="277.0" y="483.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="280.0" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.09%)</title><rect x="278.1" y="531.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="281.1" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.09%)</title><rect x="278.1" y="515.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="281.1" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.09%)</title><rect x="278.1" y="499.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="281.1" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.09%)</title><rect x="278.1" y="483.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="281.1" y="494.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="278.1" y="467.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="281.1" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionLag (1 samples, 0.09%)</title><rect x="279.2" y="531.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="282.2" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (7 samples, 0.64%)</title><rect x="280.3" y="579.0" width="7.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="283.3" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (7 samples, 0.64%)</title><rect x="280.3" y="563.0" width="7.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="283.3" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (5 samples, 0.46%)</title><rect x="280.3" y="547.0" width="5.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="283.3" y="558.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.09%)</title><rect x="281.4" y="531.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="284.4" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$233/1062472048.accept (1 samples, 0.09%)</title><rect x="281.4" y="515.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="284.4" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.09%)</title><rect x="281.4" y="499.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="284.4" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.09%)</title><rect x="281.4" y="483.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="284.4" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.09%)</title><rect x="281.4" y="467.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="284.4" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.09%)</title><rect x="281.4" y="451.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="284.4" y="462.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.09%)</title><rect x="281.4" y="435.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="284.4" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="281.4" y="419.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="284.4" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.09%)</title><rect x="282.5" y="531.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="285.5" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.09%)</title><rect x="282.5" y="515.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="285.5" y="526.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.groupingBy (1 samples, 0.09%)</title><rect x="282.5" y="499.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="285.5" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.18%)</title><rect x="283.6" y="531.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="286.6" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.09%)</title><rect x="284.6" y="515.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="287.6" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.09%)</title><rect x="284.6" y="499.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="287.6" y="510.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.09%)</title><rect x="284.6" y="483.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="287.6" y="494.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.09%)</title><rect x="284.6" y="467.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="287.6" y="478.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.09%)</title><rect x="284.6" y="451.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="287.6" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.18%)</title><rect x="285.7" y="547.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="288.7" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 0.18%)</title><rect x="285.7" y="531.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="288.7" y="542.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.18%)</title><rect x="285.7" y="515.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="288.7" y="526.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.09%)</title><rect x="286.8" y="499.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="289.8" y="510.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.09%)</title><rect x="286.8" y="483.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="289.8" y="494.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$$Lambda$49/1791045777.get (1 samples, 0.09%)</title><rect x="286.8" y="467.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="289.8" y="478.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps.lambda$makeRef$237 (1 samples, 0.09%)</title><rect x="286.8" y="451.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="289.8" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 0.28%)</title><rect x="287.9" y="579.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="290.9" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.18%)</title><rect x="287.9" y="563.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="290.9" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.09%)</title><rect x="287.9" y="547.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="290.9" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.09%)</title><rect x="287.9" y="531.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="290.9" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/ResponseHeader.parse (1 samples, 0.09%)</title><rect x="287.9" y="515.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="290.9" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/ResponseHeaderData.&lt;init&gt; (1 samples, 0.09%)</title><rect x="287.9" y="499.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="290.9" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/ResponseHeaderData.read (1 samples, 0.09%)</title><rect x="287.9" y="483.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="290.9" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ByteBufferAccessor.readUnsignedVarint (1 samples, 0.09%)</title><rect x="287.9" y="467.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="290.9" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.09%)</title><rect x="289.0" y="547.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="292.0" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.09%)</title><rect x="289.0" y="531.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="292.0" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.09%)</title><rect x="289.0" y="515.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="292.0" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.09%)</title><rect x="289.0" y="499.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="292.0" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.09%)</title><rect x="289.0" y="483.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="292.0" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.09%)</title><rect x="289.0" y="467.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="292.0" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.09%)</title><rect x="289.0" y="451.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="292.0" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.09%)</title><rect x="289.0" y="435.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="292.0" y="446.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="289.0" y="419.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="292.0" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.09%)</title><rect x="290.1" y="563.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="293.1" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (5 samples, 0.46%)</title><rect x="291.2" y="579.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="294.2" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (5 samples, 0.46%)</title><rect x="291.2" y="563.0" width="5.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="294.2" y="574.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.09%)</title><rect x="291.2" y="547.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="294.2" y="558.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.09%)</title><rect x="291.2" y="531.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="294.2" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (4 samples, 0.37%)</title><rect x="292.2" y="547.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="295.2" y="558.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="293.3" y="531.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="296.3" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.next (1 samples, 0.09%)</title><rect x="294.4" y="531.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="297.4" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.09%)</title><rect x="295.5" y="531.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="298.5" y="542.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="295.5" y="515.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="298.5" y="526.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="295.5" y="499.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="298.5" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="295.5" y="483.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="298.5" y="494.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="295.5" y="467.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="298.5" y="478.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="295.5" y="451.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="298.5" y="462.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="295.5" y="435.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="298.5" y="446.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.09%)</title><rect x="295.5" y="419.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="298.5" y="430.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="295.5" y="403.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="298.5" y="414.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="295.5" y="387.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="298.5" y="398.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="295.5" y="371.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="298.5" y="382.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.accept (1 samples, 0.09%)</title><rect x="295.5" y="355.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="298.5" y="366.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$183/849083531.accept (1 samples, 0.09%)</title><rect x="295.5" y="339.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="298.5" y="350.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.09%)</title><rect x="295.5" y="323.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="298.5" y="334.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureCapacityInternal (1 samples, 0.09%)</title><rect x="295.5" y="307.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="298.5" y="318.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureExplicitCapacity (1 samples, 0.09%)</title><rect x="295.5" y="291.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="298.5" y="302.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.09%)</title><rect x="295.5" y="275.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="298.5" y="286.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.09%)</title><rect x="295.5" y="259.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="298.5" y="270.0"></text>
</g>
<g>
<title>java/lang/Thread.run (745 samples, 68.54%)</title><rect x="296.6" y="643.0" width="808.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="299.6" y="654.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (745 samples, 68.54%)</title><rect x="296.6" y="627.0" width="808.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="299.6" y="638.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (745 samples, 68.54%)</title><rect x="296.6" y="611.0" width="808.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="299.6" y="622.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$285/1638183899.run (506 samples, 46.55%)</title><rect x="305.3" y="595.0" width="549.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="308.3" y="606.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$285/16..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$69 (506 samples, 46.55%)</title><rect x="305.3" y="579.0" width="549.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="308.3" y="590.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (506 samples, 46.55%)</title><rect x="305.3" y="563.0" width="549.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="308.3" y="574.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (496 samples, 45.63%)</title><rect x="305.3" y="547.0" width="538.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="308.3" y="558.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleTh..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="319.4" y="531.0" width="1.1" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="322.4" y="542.0"></text>
</g>
<g>
<title>__clock_gettime (8 samples, 0.74%)</title><rect x="320.5" y="531.0" width="8.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="323.5" y="542.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.37%)</title><rect x="324.8" y="515.0" width="4.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="327.8" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (153 samples, 14.08%)</title><rect x="329.2" y="531.0" width="166.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="332.2" y="542.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$43/416153648.extract (152 samples, 13.98%)</title><rect x="330.2" y="515.0" width="165.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="333.2" y="526.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (152 samples, 13.98%)</title><rect x="330.2" y="499.0" width="165.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="333.2" y="510.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (152 samples, 13.98%)</title><rect x="330.2" y="483.0" width="165.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="333.2" y="494.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (152 samples, 13.98%)</title><rect x="330.2" y="467.0" width="165.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="333.2" y="478.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (152 samples, 13.98%)</title><rect x="330.2" y="451.0" width="165.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="333.2" y="462.0">com/fasterxml/jackson..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (42 samples, 3.86%)</title><rect x="330.2" y="435.0" width="45.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="333.2" y="446.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (10 samples, 0.92%)</title><rect x="330.2" y="419.0" width="10.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="333.2" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (10 samples, 0.92%)</title><rect x="330.2" y="403.0" width="10.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="333.2" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (10 samples, 0.92%)</title><rect x="330.2" y="387.0" width="10.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="333.2" y="398.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (10 samples, 0.92%)</title><rect x="330.2" y="371.0" width="10.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="333.2" y="382.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="338.9" y="355.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="341.9" y="366.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="338.9" y="339.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="341.9" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.09%)</title><rect x="338.9" y="323.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="341.9" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.09%)</title><rect x="340.0" y="355.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="343.0" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (32 samples, 2.94%)</title><rect x="341.1" y="419.0" width="34.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="344.1" y="430.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (32 samples, 2.94%)</title><rect x="341.1" y="403.0" width="34.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="344.1" y="414.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (14 samples, 1.29%)</title><rect x="345.4" y="387.0" width="15.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="348.4" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (14 samples, 1.29%)</title><rect x="345.4" y="371.0" width="15.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="348.4" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (1 samples, 0.09%)</title><rect x="359.5" y="355.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="362.5" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (8 samples, 0.74%)</title><rect x="360.6" y="387.0" width="8.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="363.6" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (8 samples, 0.74%)</title><rect x="360.6" y="371.0" width="8.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="363.6" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (7 samples, 0.64%)</title><rect x="360.6" y="355.0" width="7.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="363.6" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.09%)</title><rect x="368.2" y="355.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="371.2" y="366.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="368.2" y="339.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="371.2" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (4 samples, 0.37%)</title><rect x="369.3" y="387.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="372.3" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (4 samples, 0.37%)</title><rect x="369.3" y="371.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="372.3" y="382.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.18%)</title><rect x="373.7" y="387.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="376.7" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (99 samples, 9.11%)</title><rect x="375.8" y="435.0" width="107.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="378.8" y="446.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.18%)</title><rect x="375.8" y="419.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="378.8" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (2 samples, 0.18%)</title><rect x="375.8" y="403.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="378.8" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (2 samples, 0.18%)</title><rect x="375.8" y="387.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="378.8" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (2 samples, 0.18%)</title><rect x="375.8" y="371.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="378.8" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 0.18%)</title><rect x="375.8" y="355.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="378.8" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (7 samples, 0.64%)</title><rect x="378.0" y="419.0" width="7.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="381.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (7 samples, 0.64%)</title><rect x="378.0" y="403.0" width="7.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="381.0" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.09%)</title><rect x="384.5" y="387.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="387.5" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (12 samples, 1.10%)</title><rect x="385.6" y="419.0" width="13.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="388.6" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (10 samples, 0.92%)</title><rect x="387.8" y="403.0" width="10.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="390.8" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (10 samples, 0.92%)</title><rect x="387.8" y="387.0" width="10.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="390.8" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (8 samples, 0.74%)</title><rect x="389.9" y="371.0" width="8.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="392.9" y="382.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.09%)</title><rect x="394.3" y="355.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="397.3" y="366.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="395.4" y="355.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="398.4" y="366.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="395.4" y="339.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="398.4" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="395.4" y="323.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="398.4" y="334.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="395.4" y="307.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="398.4" y="318.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="395.4" y="291.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="398.4" y="302.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.09%)</title><rect x="395.4" y="275.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="398.4" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.18%)</title><rect x="396.5" y="355.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="399.5" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (10 samples, 0.92%)</title><rect x="398.6" y="419.0" width="10.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="401.6" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (10 samples, 0.92%)</title><rect x="398.6" y="403.0" width="10.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="401.6" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="398.6" y="387.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="401.6" y="398.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="398.6" y="371.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="401.6" y="382.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="398.6" y="355.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="401.6" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="398.6" y="339.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="401.6" y="350.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.09%)</title><rect x="398.6" y="323.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="401.6" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (9 samples, 0.83%)</title><rect x="399.7" y="387.0" width="9.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="402.7" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (9 samples, 0.83%)</title><rect x="399.7" y="371.0" width="9.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="402.7" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (7 samples, 0.64%)</title><rect x="401.9" y="355.0" width="7.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="404.9" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (68 samples, 6.26%)</title><rect x="409.5" y="419.0" width="73.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="412.5" y="430.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (13 samples, 1.20%)</title><rect x="412.7" y="403.0" width="14.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="415.7" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.09%)</title><rect x="414.9" y="387.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="417.9" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.28%)</title><rect x="416.0" y="387.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="419.0" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.28%)</title><rect x="416.0" y="371.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="419.0" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.28%)</title><rect x="416.0" y="355.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="419.0" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (6 samples, 0.55%)</title><rect x="419.3" y="387.0" width="6.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="422.3" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.09%)</title><rect x="425.8" y="387.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="428.8" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.09%)</title><rect x="425.8" y="371.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="428.8" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (52 samples, 4.78%)</title><rect x="426.9" y="403.0" width="56.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="429.9" y="414.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (52 samples, 4.78%)</title><rect x="426.9" y="387.0" width="56.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="429.9" y="398.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (52 samples, 4.78%)</title><rect x="426.9" y="371.0" width="56.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="429.9" y="382.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (18 samples, 1.66%)</title><rect x="435.5" y="355.0" width="19.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="438.5" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.18%)</title><rect x="438.8" y="339.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="441.8" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (8 samples, 0.74%)</title><rect x="441.0" y="339.0" width="8.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="444.0" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (8 samples, 0.74%)</title><rect x="441.0" y="323.0" width="8.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="444.0" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (8 samples, 0.74%)</title><rect x="441.0" y="307.0" width="8.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="444.0" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (5 samples, 0.46%)</title><rect x="444.2" y="291.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="447.2" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 0.28%)</title><rect x="449.7" y="339.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="452.7" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.18%)</title><rect x="452.9" y="339.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="455.9" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.18%)</title><rect x="452.9" y="323.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="455.9" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.09%)</title><rect x="454.0" y="307.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="457.0" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (10 samples, 0.92%)</title><rect x="455.1" y="355.0" width="10.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="458.1" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (7 samples, 0.64%)</title><rect x="458.3" y="339.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="461.3" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (7 samples, 0.64%)</title><rect x="458.3" y="323.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="461.3" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (7 samples, 0.64%)</title><rect x="458.3" y="307.0" width="7.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="461.3" y="318.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (7 samples, 0.64%)</title><rect x="458.3" y="291.0" width="7.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="461.3" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (7 samples, 0.64%)</title><rect x="465.9" y="355.0" width="7.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="468.9" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (7 samples, 0.64%)</title><rect x="465.9" y="339.0" width="7.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="468.9" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (7 samples, 0.64%)</title><rect x="465.9" y="323.0" width="7.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="468.9" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (7 samples, 0.64%)</title><rect x="465.9" y="307.0" width="7.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="468.9" y="318.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (7 samples, 0.64%)</title><rect x="465.9" y="291.0" width="7.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="468.9" y="302.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="465.9" y="275.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="468.9" y="286.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="465.9" y="259.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="468.9" y="270.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="465.9" y="243.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="468.9" y="254.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="465.9" y="227.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="468.9" y="238.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.09%)</title><rect x="465.9" y="211.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="468.9" y="222.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (6 samples, 0.55%)</title><rect x="467.0" y="275.0" width="6.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="470.0" y="286.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (6 samples, 0.55%)</title><rect x="467.0" y="259.0" width="6.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="470.0" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (7 samples, 0.64%)</title><rect x="473.5" y="355.0" width="7.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="476.5" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.64%)</title><rect x="473.5" y="339.0" width="7.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="476.5" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.64%)</title><rect x="473.5" y="323.0" width="7.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="476.5" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.09%)</title><rect x="480.0" y="307.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="483.0" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (2 samples, 0.18%)</title><rect x="481.1" y="355.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="484.1" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (2 samples, 0.18%)</title><rect x="481.1" y="339.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="484.1" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (11 samples, 1.01%)</title><rect x="483.3" y="435.0" width="11.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="486.3" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (11 samples, 1.01%)</title><rect x="483.3" y="419.0" width="11.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="486.3" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (11 samples, 1.01%)</title><rect x="483.3" y="403.0" width="11.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="486.3" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (11 samples, 1.01%)</title><rect x="483.3" y="387.0" width="11.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="486.3" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (11 samples, 1.01%)</title><rect x="483.3" y="371.0" width="11.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="486.3" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.18%)</title><rect x="493.1" y="355.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="496.1" y="366.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (294 samples, 27.05%)</title><rect x="495.2" y="531.0" width="319.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="498.2" y="542.0">com/linecorp/decaton/processor/runtime/inte..</text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.46%)</title><rect x="502.8" y="515.0" width="5.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="505.8" y="526.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.37%)</title><rect x="503.9" y="499.0" width="4.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="506.9" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (46 samples, 4.23%)</title><rect x="508.3" y="515.0" width="49.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="511.3" y="526.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (5 samples, 0.46%)</title><rect x="508.3" y="499.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="511.3" y="510.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (41 samples, 3.77%)</title><rect x="513.7" y="499.0" width="44.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="516.7" y="510.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (40 samples, 3.68%)</title><rect x="514.8" y="483.0" width="43.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="517.8" y="494.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.18%)</title><rect x="517.0" y="467.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="520.0" y="478.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (1 samples, 0.09%)</title><rect x="518.0" y="451.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="521.0" y="462.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.wasLastOpReadOrNull (1 samples, 0.09%)</title><rect x="519.1" y="467.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="522.1" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (14 samples, 1.29%)</title><rect x="520.2" y="467.0" width="15.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="523.2" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 0.37%)</title><rect x="530.0" y="451.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="533.0" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.37%)</title><rect x="530.0" y="435.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="533.0" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.09%)</title><rect x="533.2" y="419.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="536.2" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.09%)</title><rect x="534.3" y="451.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="537.3" y="462.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (21 samples, 1.93%)</title><rect x="535.4" y="467.0" width="22.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="538.4" y="478.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (7 samples, 0.64%)</title><rect x="548.4" y="451.0" width="7.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="551.4" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.18%)</title><rect x="548.4" y="435.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="551.4" y="446.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.09%)</title><rect x="549.5" y="419.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="552.5" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (5 samples, 0.46%)</title><rect x="550.6" y="435.0" width="5.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="553.6" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.18%)</title><rect x="556.0" y="451.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="559.0" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (11 samples, 1.01%)</title><rect x="558.2" y="515.0" width="11.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="561.2" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (10 samples, 0.92%)</title><rect x="559.3" y="499.0" width="10.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="562.3" y="510.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="559.3" y="483.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="562.3" y="494.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="559.3" y="467.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="562.3" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="559.3" y="451.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="562.3" y="462.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (9 samples, 0.83%)</title><rect x="560.4" y="483.0" width="9.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="563.4" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (147 samples, 13.52%)</title><rect x="570.1" y="515.0" width="159.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="573.1" y="526.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (138 samples, 12.70%)</title><rect x="570.1" y="499.0" width="149.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="573.1" y="510.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (55 samples, 5.06%)</title><rect x="575.6" y="483.0" width="59.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="578.6" y="494.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="591.9" y="467.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="594.9" y="478.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="591.9" y="451.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="594.9" y="462.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="591.9" y="435.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="594.9" y="446.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="591.9" y="419.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="594.9" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="591.9" y="403.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="594.9" y="414.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (32 samples, 2.94%)</title><rect x="592.9" y="467.0" width="34.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="595.9" y="478.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (32 samples, 2.94%)</title><rect x="592.9" y="451.0" width="34.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="595.9" y="462.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (6 samples, 0.55%)</title><rect x="607.1" y="435.0" width="6.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="610.1" y="446.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (6 samples, 0.55%)</title><rect x="607.1" y="419.0" width="6.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="610.1" y="430.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (6 samples, 0.55%)</title><rect x="607.1" y="403.0" width="6.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="610.1" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (5 samples, 0.46%)</title><rect x="607.1" y="387.0" width="5.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="610.1" y="398.0"></text>
</g>
<g>
<title>CodeBlob::is_nmethod() const (1 samples, 0.09%)</title><rect x="608.1" y="371.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="611.1" y="382.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.09%)</title><rect x="609.2" y="371.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="612.2" y="382.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="609.2" y="355.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="612.2" y="366.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.09%)</title><rect x="609.2" y="339.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="612.2" y="350.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.18%)</title><rect x="610.3" y="371.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="613.3" y="382.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.18%)</title><rect x="610.3" y="355.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="613.3" y="366.0"></text>
</g>
<g>
<title>_new_array_nozero_Java (1 samples, 0.09%)</title><rect x="612.5" y="387.0" width="1.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="615.5" y="398.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (9 samples, 0.83%)</title><rect x="613.6" y="435.0" width="9.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="616.6" y="446.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.37%)</title><rect x="623.3" y="435.0" width="4.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="626.3" y="446.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.09%)</title><rect x="627.7" y="467.0" width="1.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="630.7" y="478.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.55%)</title><rect x="628.8" y="467.0" width="6.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="631.8" y="478.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (9 samples, 0.83%)</title><rect x="635.3" y="483.0" width="9.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="638.3" y="494.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (3 samples, 0.28%)</title><rect x="635.3" y="467.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="638.3" y="478.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="635.3" y="451.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="638.3" y="462.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="635.3" y="435.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="638.3" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="635.3" y="419.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="638.3" y="430.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (2 samples, 0.18%)</title><rect x="636.4" y="451.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="639.4" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.18%)</title><rect x="636.4" y="435.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="639.4" y="446.0"></text>
</g>
<g>
<title>java/lang/Long.toString (6 samples, 0.55%)</title><rect x="638.5" y="467.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="641.5" y="478.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.09%)</title><rect x="638.5" y="451.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="641.5" y="462.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.46%)</title><rect x="639.6" y="451.0" width="5.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="642.6" y="462.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (69 samples, 6.35%)</title><rect x="645.1" y="483.0" width="74.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="648.1" y="494.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (67 samples, 6.16%)</title><rect x="647.2" y="467.0" width="72.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="650.2" y="478.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.18%)</title><rect x="647.2" y="451.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="650.2" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.18%)</title><rect x="647.2" y="435.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="650.2" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.18%)</title><rect x="647.2" y="419.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="650.2" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.18%)</title><rect x="647.2" y="403.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="650.2" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="649.4" y="451.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="652.4" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="649.4" y="435.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="652.4" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="649.4" y="419.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="652.4" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.09%)</title><rect x="649.4" y="403.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="652.4" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="649.4" y="387.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="652.4" y="398.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (64 samples, 5.89%)</title><rect x="650.5" y="451.0" width="69.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="653.5" y="462.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.put (59 samples, 5.43%)</title><rect x="655.9" y="435.0" width="64.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="658.9" y="446.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.putVal (35 samples, 3.22%)</title><rect x="682.0" y="419.0" width="38.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="685.0" y="430.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.09%)</title><rect x="701.5" y="403.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="704.5" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (12 samples, 1.10%)</title><rect x="702.6" y="403.0" width="13.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="705.6" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.18%)</title><rect x="713.4" y="387.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="716.4" y="398.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.18%)</title><rect x="713.4" y="371.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="716.4" y="382.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.18%)</title><rect x="713.4" y="355.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="716.4" y="366.0"></text>
</g>
<g>
<title>vtable stub (4 samples, 0.37%)</title><rect x="715.6" y="403.0" width="4.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="718.6" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (9 samples, 0.83%)</title><rect x="720.0" y="499.0" width="9.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="723.0" y="510.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (9 samples, 0.83%)</title><rect x="720.0" y="483.0" width="9.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="723.0" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.get (9 samples, 0.83%)</title><rect x="720.0" y="467.0" width="9.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="723.0" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (9 samples, 0.83%)</title><rect x="720.0" y="451.0" width="9.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="723.0" y="462.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.37%)</title><rect x="724.3" y="435.0" width="4.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="727.3" y="446.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.37%)</title><rect x="724.3" y="419.0" width="4.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="727.3" y="430.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="728.6" y="435.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="731.6" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (68 samples, 6.26%)</title><rect x="729.7" y="515.0" width="73.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="732.7" y="526.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (68 samples, 6.26%)</title><rect x="729.7" y="499.0" width="73.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="732.7" y="510.0">com/line..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="730.8" y="483.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="733.8" y="494.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="730.8" y="467.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="733.8" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="730.8" y="451.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="733.8" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="730.8" y="435.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="733.8" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$207/843249385.process (36 samples, 3.31%)</title><rect x="731.9" y="483.0" width="39.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="734.9" y="494.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (36 samples, 3.31%)</title><rect x="731.9" y="467.0" width="39.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="734.9" y="478.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (33 samples, 3.04%)</title><rect x="733.0" y="451.0" width="35.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="736.0" y="462.0">com..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (4 samples, 0.37%)</title><rect x="734.1" y="435.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="737.1" y="446.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (4 samples, 0.37%)</title><rect x="734.1" y="419.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="737.1" y="430.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (4 samples, 0.37%)</title><rect x="734.1" y="403.0" width="4.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="737.1" y="414.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (4 samples, 0.37%)</title><rect x="734.1" y="387.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="737.1" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.18%)</title><rect x="736.2" y="371.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="739.2" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (10 samples, 0.92%)</title><rect x="738.4" y="435.0" width="10.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="741.4" y="446.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (9 samples, 0.83%)</title><rect x="739.5" y="419.0" width="9.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="742.5" y="430.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.64%)</title><rect x="741.7" y="403.0" width="7.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="744.7" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.09%)</title><rect x="749.3" y="435.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="752.3" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (17 samples, 1.56%)</title><rect x="750.3" y="435.0" width="18.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="753.3" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.18%)</title><rect x="768.8" y="451.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="771.8" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.18%)</title><rect x="768.8" y="435.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="771.8" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.18%)</title><rect x="768.8" y="419.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="771.8" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.18%)</title><rect x="768.8" y="403.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="771.8" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.18%)</title><rect x="768.8" y="387.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="771.8" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (6 samples, 0.55%)</title><rect x="771.0" y="483.0" width="6.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="774.0" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.55%)</title><rect x="777.5" y="483.0" width="6.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="780.5" y="494.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (6 samples, 0.55%)</title><rect x="777.5" y="467.0" width="6.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="780.5" y="478.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="782.9" y="451.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="785.9" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.loggingExceptions (1 samples, 0.09%)</title><rect x="784.0" y="483.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="787.0" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$288/1790469670.get (1 samples, 0.09%)</title><rect x="784.0" y="467.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="787.0" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$71 (1 samples, 0.09%)</title><rect x="784.0" y="451.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="787.0" y="462.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1318180415.linkToTargetMethod (1 samples, 0.09%)</title><rect x="785.1" y="483.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="788.1" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (1 samples, 0.09%)</title><rect x="785.1" y="467.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="788.1" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$292/898110528.get$Lambda (1 samples, 0.09%)</title><rect x="785.1" y="451.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="788.1" y="462.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (7 samples, 0.64%)</title><rect x="786.2" y="483.0" width="7.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="789.2" y="494.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (7 samples, 0.64%)</title><rect x="786.2" y="467.0" width="7.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="789.2" y="478.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.37%)</title><rect x="786.2" y="451.0" width="4.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="789.2" y="462.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (3 samples, 0.28%)</title><rect x="790.5" y="451.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="793.5" y="462.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (3 samples, 0.28%)</title><rect x="793.8" y="483.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="796.8" y="494.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.18%)</title><rect x="794.9" y="467.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="797.9" y="478.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (6 samples, 0.55%)</title><rect x="797.0" y="483.0" width="6.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="800.0" y="494.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.18%)</title><rect x="801.4" y="467.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="804.4" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (1 samples, 0.09%)</title><rect x="803.5" y="515.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="806.5" y="526.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="803.5" y="499.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="806.5" y="510.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="803.5" y="483.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="806.5" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="803.5" y="467.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="806.5" y="478.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/74688104.linkToTargetMethod (1 samples, 0.09%)</title><rect x="804.6" y="515.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="807.6" y="526.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/399931359.invokeStatic_L3_L (1 samples, 0.09%)</title><rect x="804.6" y="499.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="807.6" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$294/1276545119.get$Lambda (1 samples, 0.09%)</title><rect x="804.6" y="483.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="807.6" y="494.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.09%)</title><rect x="804.6" y="467.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="807.6" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 0.64%)</title><rect x="805.7" y="515.0" width="7.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="808.7" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (7 samples, 0.64%)</title><rect x="805.7" y="499.0" width="7.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="808.7" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 0.64%)</title><rect x="805.7" y="483.0" width="7.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="808.7" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$294/1276545119.accept (7 samples, 0.64%)</title><rect x="805.7" y="467.0" width="7.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="808.7" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$64 (7 samples, 0.64%)</title><rect x="805.7" y="451.0" width="7.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="808.7" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.09%)</title><rect x="805.7" y="435.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="808.7" y="446.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.09%)</title><rect x="805.7" y="419.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="808.7" y="430.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.09%)</title><rect x="805.7" y="403.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="808.7" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="805.7" y="387.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="808.7" y="398.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="805.7" y="371.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="808.7" y="382.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="805.7" y="355.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="808.7" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="805.7" y="339.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="808.7" y="350.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="805.7" y="323.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="808.7" y="334.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="805.7" y="307.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="808.7" y="318.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="805.7" y="291.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="808.7" y="302.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.09%)</title><rect x="805.7" y="275.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="808.7" y="286.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.09%)</title><rect x="805.7" y="259.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="808.7" y="270.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.09%)</title><rect x="805.7" y="243.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="808.7" y="254.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.09%)</title><rect x="805.7" y="227.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="808.7" y="238.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (6 samples, 0.55%)</title><rect x="806.8" y="435.0" width="6.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="809.8" y="446.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (6 samples, 0.55%)</title><rect x="806.8" y="419.0" width="6.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="809.8" y="430.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.18%)</title><rect x="807.9" y="403.0" width="2.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="810.9" y="414.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.18%)</title><rect x="810.1" y="403.0" width="2.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="813.1" y="414.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.18%)</title><rect x="810.1" y="387.0" width="2.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="813.1" y="398.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="812.2" y="403.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="815.2" y="414.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="813.3" y="515.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="816.3" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (23 samples, 2.12%)</title><rect x="814.4" y="531.0" width="25.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="817.4" y="542.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (23 samples, 2.12%)</title><rect x="814.4" y="515.0" width="25.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="817.4" y="526.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (20 samples, 1.84%)</title><rect x="817.7" y="499.0" width="21.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="820.7" y="510.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$295/1210651909.accept (20 samples, 1.84%)</title><rect x="817.7" y="483.0" width="21.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="820.7" y="494.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$63 (20 samples, 1.84%)</title><rect x="817.7" y="467.0" width="21.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="820.7" y="478.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$283/471797108.complete (20 samples, 1.84%)</title><rect x="817.7" y="451.0" width="21.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="820.7" y="462.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$73 (20 samples, 1.84%)</title><rect x="817.7" y="435.0" width="21.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="820.7" y="446.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$282/1362923141.complete (20 samples, 1.84%)</title><rect x="817.7" y="419.0" width="21.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="820.7" y="430.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$49 (20 samples, 1.84%)</title><rect x="817.7" y="403.0" width="21.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="820.7" y="414.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (20 samples, 1.84%)</title><rect x="817.7" y="387.0" width="21.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="820.7" y="398.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (20 samples, 1.84%)</title><rect x="817.7" y="371.0" width="21.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="820.7" y="382.0">c..</text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.37%)</title><rect x="839.4" y="531.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="842.4" y="542.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.28%)</title><rect x="840.5" y="515.0" width="3.2" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="843.5" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (10 samples, 0.92%)</title><rect x="843.7" y="547.0" width="10.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="846.7" y="558.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.37%)</title><rect x="850.2" y="531.0" width="4.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="853.2" y="542.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.37%)</title><rect x="850.2" y="515.0" width="4.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="853.2" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.09%)</title><rect x="854.6" y="595.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="857.6" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.09%)</title><rect x="854.6" y="579.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="857.6" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="854.6" y="563.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="857.6" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.09%)</title><rect x="854.6" y="547.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="857.6" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (230 samples, 21.16%)</title><rect x="855.6" y="595.0" width="249.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="858.6" y="606.0">java/util/concurrent/ThreadPoolEx..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (229 samples, 21.07%)</title><rect x="856.7" y="579.0" width="248.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="859.7" y="590.0">java/util/concurrent/LinkedBlocki..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (205 samples, 18.86%)</title><rect x="882.8" y="563.0" width="222.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="885.8" y="574.0">java/util/concurrent/locks/Ab..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (10 samples, 0.92%)</title><rect x="888.2" y="547.0" width="10.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="891.2" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (10 samples, 0.92%)</title><rect x="888.2" y="531.0" width="10.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="891.2" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (189 samples, 17.39%)</title><rect x="899.1" y="547.0" width="205.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="902.1" y="558.0">java/util/concurrent/locks/..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (170 samples, 15.64%)</title><rect x="919.7" y="531.0" width="184.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="922.7" y="542.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="923.0" y="515.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="926.0" y="526.0"></text>
</g>
<g>
<title>Unsafe_Park (158 samples, 14.54%)</title><rect x="924.0" y="515.0" width="171.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="927.0" y="526.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (5 samples, 0.46%)</title><rect x="930.6" y="499.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="933.6" y="510.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (28 samples, 2.58%)</title><rect x="936.0" y="499.0" width="30.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="939.0" y="510.0">Pa..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (9 samples, 0.83%)</title><rect x="947.9" y="483.0" width="9.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="950.9" y="494.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.18%)</title><rect x="952.3" y="467.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="955.3" y="478.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.09%)</title><rect x="953.3" y="451.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="956.3" y="462.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="954.4" y="467.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="957.4" y="478.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.18%)</title><rect x="955.5" y="467.0" width="2.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="958.5" y="478.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (8 samples, 0.74%)</title><rect x="957.7" y="483.0" width="8.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="960.7" y="494.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="966.4" y="499.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="969.4" y="510.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.09%)</title><rect x="967.5" y="499.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="970.5" y="510.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.18%)</title><rect x="968.5" y="499.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="971.5" y="510.0"></text>
</g>
<g>
<title>__lll_lock_wait (7 samples, 0.64%)</title><rect x="970.7" y="499.0" width="7.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="973.7" y="510.0"></text>
</g>
<g>
<title>__lll_unlock_wake (30 samples, 2.76%)</title><rect x="978.3" y="499.0" width="32.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="981.3" y="510.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (50 samples, 4.60%)</title><rect x="1010.9" y="499.0" width="54.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1013.9" y="510.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.46%)</title><rect x="1065.2" y="499.0" width="5.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1068.2" y="510.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.09%)</title><rect x="1070.6" y="499.0" width="1.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1073.6" y="510.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (4 samples, 0.37%)</title><rect x="1071.7" y="499.0" width="4.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1074.7" y="510.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (6 samples, 0.55%)</title><rect x="1076.0" y="499.0" width="6.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1079.0" y="510.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.46%)</title><rect x="1082.5" y="499.0" width="5.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1085.5" y="510.0"></text>
</g>
<g>
<title>_init (1 samples, 0.09%)</title><rect x="1088.0" y="499.0" width="1.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1091.0" y="510.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.18%)</title><rect x="1089.0" y="499.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1092.0" y="510.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (3 samples, 0.28%)</title><rect x="1091.2" y="499.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1094.2" y="510.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1094.5" y="499.0" width="1.1" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1097.5" y="510.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (6 samples, 0.55%)</title><rect x="1095.6" y="515.0" width="6.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1098.6" y="526.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.18%)</title><rect x="1102.1" y="515.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1105.1" y="526.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.09%)</title><rect x="1104.2" y="547.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1107.2" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.09%)</title><rect x="1105.3" y="643.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1108.3" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.09%)</title><rect x="1105.3" y="627.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1108.3" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="1105.3" y="611.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1108.3" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.09%)</title><rect x="1105.3" y="595.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1108.3" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.09%)</title><rect x="1105.3" y="579.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1108.3" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.09%)</title><rect x="1105.3" y="563.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1108.3" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.09%)</title><rect x="1105.3" y="547.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1108.3" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.09%)</title><rect x="1105.3" y="531.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1108.3" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.09%)</title><rect x="1105.3" y="515.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1108.3" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.updateSelectedKeys (1 samples, 0.09%)</title><rect x="1105.3" y="499.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1108.3" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="1105.3" y="483.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1108.3" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="1105.3" y="467.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1108.3" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.09%)</title><rect x="1105.3" y="451.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1108.3" y="462.0"></text>
</g>
<g>
<title>start_thread (77 samples, 7.08%)</title><rect x="1106.4" y="643.0" width="83.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1109.4" y="654.0">start_thr..</text>
</g>
<g>
<title>java_start(Thread*) (77 samples, 7.08%)</title><rect x="1106.4" y="627.0" width="83.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1109.4" y="638.0">java_star..</text>
</g>
<g>
<title>GangWorker::loop() (21 samples, 1.93%)</title><rect x="1106.4" y="611.0" width="22.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1109.4" y="622.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (8 samples, 0.74%)</title><rect x="1106.4" y="595.0" width="8.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1109.4" y="606.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 0.64%)</title><rect x="1106.4" y="579.0" width="7.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1109.4" y="590.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 0.28%)</title><rect x="1106.4" y="563.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1109.4" y="574.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.37%)</title><rect x="1109.7" y="563.0" width="4.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1112.7" y="574.0"></text>
</g>
<g>
<title>G1ParScanThreadState::G1ParScanThreadState(G1CollectedHeap*, unsigned int, ReferenceProcessor*) (1 samples, 0.09%)</title><rect x="1114.0" y="579.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1117.0" y="590.0"></text>
</g>
<g>
<title>G1ParGCAllocator::create_allocator(G1CollectedHeap*) (1 samples, 0.09%)</title><rect x="1114.0" y="563.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1117.0" y="574.0"></text>
</g>
<g>
<title>CHeapObj&lt;(MemoryType)5&gt;::operator new(unsigned long) (1 samples, 0.09%)</title><rect x="1114.0" y="547.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1117.0" y="558.0"></text>
</g>
<g>
<title>CHeapObj&lt;(MemoryType)5&gt;::operator new(unsigned long, NativeCallStack const&amp;) (1 samples, 0.09%)</title><rect x="1114.0" y="531.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1117.0" y="542.0"></text>
</g>
<g>
<title>_init (1 samples, 0.09%)</title><rect x="1114.0" y="515.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1117.0" y="526.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (13 samples, 1.20%)</title><rect x="1115.1" y="595.0" width="14.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1118.1" y="606.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.28%)</title><rect x="1115.1" y="579.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1118.1" y="590.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.18%)</title><rect x="1115.1" y="563.0" width="2.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1118.1" y="574.0"></text>
</g>
<g>
<title>__sched_yield (1 samples, 0.09%)</title><rect x="1117.3" y="563.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1120.3" y="574.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (5 samples, 0.46%)</title><rect x="1118.4" y="579.0" width="5.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1121.4" y="590.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.18%)</title><rect x="1118.4" y="563.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1121.4" y="574.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.18%)</title><rect x="1118.4" y="547.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1121.4" y="558.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.09%)</title><rect x="1119.4" y="531.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1122.4" y="542.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.09%)</title><rect x="1119.4" y="515.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1122.4" y="526.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.28%)</title><rect x="1120.5" y="563.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1123.5" y="574.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (3 samples, 0.28%)</title><rect x="1120.5" y="547.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1123.5" y="558.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (5 samples, 0.46%)</title><rect x="1123.8" y="579.0" width="5.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1126.8" y="590.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (5 samples, 0.46%)</title><rect x="1123.8" y="563.0" width="5.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1126.8" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (5 samples, 0.46%)</title><rect x="1123.8" y="547.0" width="5.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1126.8" y="558.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (5 samples, 0.46%)</title><rect x="1123.8" y="531.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1126.8" y="542.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (5 samples, 0.46%)</title><rect x="1123.8" y="515.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1126.8" y="526.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (5 samples, 0.46%)</title><rect x="1123.8" y="499.0" width="5.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1126.8" y="510.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (3 samples, 0.28%)</title><rect x="1126.0" y="483.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1129.0" y="494.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (2 samples, 0.18%)</title><rect x="1126.0" y="467.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1129.0" y="478.0"></text>
</g>
<g>
<title>InstanceRefKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.09%)</title><rect x="1128.1" y="467.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1131.1" y="478.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.09%)</title><rect x="1128.1" y="451.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1131.1" y="462.0"></text>
</g>
<g>
<title>JavaThread::run() (54 samples, 4.97%)</title><rect x="1129.2" y="611.0" width="58.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1132.2" y="622.0">JavaTh..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (54 samples, 4.97%)</title><rect x="1129.2" y="595.0" width="58.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1132.2" y="606.0">JavaTh..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (54 samples, 4.97%)</title><rect x="1129.2" y="579.0" width="58.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1132.2" y="590.0">Compil..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (54 samples, 4.97%)</title><rect x="1129.2" y="563.0" width="58.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1132.2" y="574.0">Compil..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (53 samples, 4.88%)</title><rect x="1129.2" y="547.0" width="57.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1132.2" y="558.0">C2Comp..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (53 samples, 4.88%)</title><rect x="1129.2" y="531.0" width="57.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1132.2" y="542.0">Compil..</text>
</g>
<g>
<title>Compile::Code_Gen() (35 samples, 3.22%)</title><rect x="1129.2" y="515.0" width="38.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1132.2" y="526.0">Com..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.18%)</title><rect x="1129.2" y="499.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1132.2" y="510.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.18%)</title><rect x="1129.2" y="483.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1132.2" y="494.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.09%)</title><rect x="1129.2" y="467.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1132.2" y="478.0"></text>
</g>
<g>
<title>MachNode::size(PhaseRegAlloc*) const (1 samples, 0.09%)</title><rect x="1130.3" y="467.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1133.3" y="478.0"></text>
</g>
<g>
<title>Matcher::match() (1 samples, 0.09%)</title><rect x="1131.4" y="499.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1134.4" y="510.0"></text>
</g>
<g>
<title>Matcher::is_bmi_pattern(Node*, Node*) (1 samples, 0.09%)</title><rect x="1131.4" y="483.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.4" y="494.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (5 samples, 0.46%)</title><rect x="1132.5" y="499.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1135.5" y="510.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (5 samples, 0.46%)</title><rect x="1132.5" y="483.0" width="5.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1135.5" y="494.0"></text>
</g>
<g>
<title>PhaseCFG::call_catch_cleanup(Block*) (1 samples, 0.09%)</title><rect x="1132.5" y="467.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1135.5" y="478.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1133.6" y="467.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1136.6" y="478.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.18%)</title><rect x="1134.6" y="467.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1137.6" y="478.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.09%)</title><rect x="1135.7" y="451.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.7" y="462.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.09%)</title><rect x="1135.7" y="435.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1138.7" y="446.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1135.7" y="419.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1138.7" y="430.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1135.7" y="403.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1138.7" y="414.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1135.7" y="387.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.7" y="398.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1136.8" y="467.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1139.8" y="478.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1136.8" y="451.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1139.8" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (27 samples, 2.48%)</title><rect x="1137.9" y="499.0" width="29.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1140.9" y="510.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.09%)</title><rect x="1139.0" y="483.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.0" y="494.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.09%)</title><rect x="1139.0" y="467.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1142.0" y="478.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.09%)</title><rect x="1140.1" y="483.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1143.1" y="494.0"></text>
</g>
<g>
<title>PhaseChaitin::split_DEF(Node*, Block*, int, unsigned int, Node**, Node**, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.09%)</title><rect x="1140.1" y="467.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1143.1" y="478.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.09%)</title><rect x="1140.1" y="451.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1143.1" y="462.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.09%)</title><rect x="1140.1" y="435.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1143.1" y="446.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.09%)</title><rect x="1140.1" y="419.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1143.1" y="430.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 0.74%)</title><rect x="1141.1" y="483.0" width="8.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1144.1" y="494.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1144.4" y="467.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1147.4" y="478.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.28%)</title><rect x="1145.5" y="467.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1148.5" y="478.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.18%)</title><rect x="1146.6" y="451.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1149.6" y="462.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.09%)</title><rect x="1148.7" y="467.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1151.7" y="478.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.28%)</title><rect x="1149.8" y="483.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.8" y="494.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.09%)</title><rect x="1150.9" y="467.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.9" y="478.0"></text>
</g>
<g>
<title>loadConINode::bottom_type() const (1 samples, 0.09%)</title><rect x="1152.0" y="467.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.0" y="478.0"></text>
</g>
<g>
<title>TypeInt::make(int) (1 samples, 0.09%)</title><rect x="1152.0" y="451.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.0" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.18%)</title><rect x="1153.1" y="483.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.1" y="494.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.18%)</title><rect x="1155.3" y="483.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.3" y="494.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.09%)</title><rect x="1156.3" y="467.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.3" y="478.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="1156.3" y="451.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.3" y="462.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="1156.3" y="435.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1159.3" y="446.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.09%)</title><rect x="1156.3" y="419.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.3" y="430.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="1156.3" y="403.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1159.3" y="414.0"></text>
</g>
<g>
<title>pthread_self (1 samples, 0.09%)</title><rect x="1156.3" y="387.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1159.3" y="398.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.18%)</title><rect x="1157.4" y="483.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1160.4" y="494.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.18%)</title><rect x="1157.4" y="467.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1160.4" y="478.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 0.18%)</title><rect x="1157.4" y="451.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1160.4" y="462.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.09%)</title><rect x="1157.4" y="435.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.4" y="446.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.09%)</title><rect x="1158.5" y="435.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1161.5" y="446.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1158.5" y="419.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1161.5" y="430.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.09%)</title><rect x="1159.6" y="483.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.6" y="494.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.28%)</title><rect x="1160.7" y="483.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.7" y="494.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1162.9" y="467.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.9" y="478.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.09%)</title><rect x="1163.9" y="483.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.9" y="494.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1165.0" y="483.0" width="1.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1168.0" y="494.0"></text>
</g>
<g>
<title>loadNNode::oper_input_base() const (1 samples, 0.09%)</title><rect x="1166.1" y="483.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.1" y="494.0"></text>
</g>
<g>
<title>Compile::Optimize() (13 samples, 1.20%)</title><rect x="1167.2" y="515.0" width="14.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.2" y="526.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.09%)</title><rect x="1167.2" y="499.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.2" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.09%)</title><rect x="1168.3" y="499.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.3" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.09%)</title><rect x="1168.3" y="483.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.3" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::add_call_node(CallNode*) (1 samples, 0.09%)</title><rect x="1168.3" y="467.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.3" y="478.0"></text>
</g>
<g>
<title>ciMethod::is_boxing_method() const (1 samples, 0.09%)</title><rect x="1168.3" y="451.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.3" y="462.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.09%)</title><rect x="1169.4" y="499.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.4" y="510.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.09%)</title><rect x="1170.5" y="499.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.5" y="510.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.09%)</title><rect x="1170.5" y="483.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1173.5" y="494.0"></text>
</g>
<g>
<title>TypePtr::singleton() const (1 samples, 0.09%)</title><rect x="1170.5" y="467.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.5" y="478.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (7 samples, 0.64%)</title><rect x="1171.5" y="499.0" width="7.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.5" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.18%)</title><rect x="1171.5" y="483.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.5" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 0.18%)</title><rect x="1171.5" y="467.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.5" y="478.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.09%)</title><rect x="1171.5" y="451.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.5" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1171.5" y="435.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.5" y="446.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1172.6" y="451.0" width="1.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1175.6" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (3 samples, 0.28%)</title><rect x="1173.7" y="483.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.7" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (2 samples, 0.18%)</title><rect x="1174.8" y="467.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.8" y="478.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1177.0" y="483.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.0" y="494.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1177.0" y="467.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.0" y="478.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.09%)</title><rect x="1177.0" y="451.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.0" y="462.0"></text>
</g>
<g>
<title>SafePointNode::pinned() const (1 samples, 0.09%)</title><rect x="1178.1" y="483.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.1" y="494.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.18%)</title><rect x="1179.1" y="499.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.1" y="510.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.18%)</title><rect x="1179.1" y="483.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.1" y="494.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1179.1" y="467.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.1" y="478.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.09%)</title><rect x="1179.1" y="451.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.1" y="462.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1179.1" y="435.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.1" y="446.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="1179.1" y="419.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.1" y="430.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.09%)</title><rect x="1179.1" y="403.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.1" y="414.0"></text>
</g>
<g>
<title>TypePtr::make(Type::TYPES, TypePtr::PTR, int) (1 samples, 0.09%)</title><rect x="1179.1" y="387.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.1" y="398.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1179.1" y="371.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1182.1" y="382.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1180.2" y="467.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.2" y="478.0"></text>
</g>
<g>
<title>ProjNode::hash() const (1 samples, 0.09%)</title><rect x="1180.2" y="451.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.2" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.37%)</title><rect x="1181.3" y="515.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.3" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.37%)</title><rect x="1181.3" y="499.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.37%)</title><rect x="1181.3" y="483.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.37%)</title><rect x="1181.3" y="467.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.37%)</title><rect x="1181.3" y="451.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.37%)</title><rect x="1181.3" y="435.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.3" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1181.3" y="419.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.3" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1181.3" y="403.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1181.3" y="387.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1181.3" y="371.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1181.3" y="355.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.3" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1181.3" y="339.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.3" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1181.3" y="323.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.3" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1181.3" y="307.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.3" y="318.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.09%)</title><rect x="1181.3" y="291.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.3" y="302.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.09%)</title><rect x="1181.3" y="275.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.3" y="286.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1181.3" y="259.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.3" y="270.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="1181.3" y="243.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.3" y="254.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.09%)</title><rect x="1181.3" y="227.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.3" y="238.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1181.3" y="211.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.3" y="222.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="1181.3" y="195.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.3" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.4" y="291.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.4" y="275.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.4" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.4" y="259.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.4" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1182.4" y="243.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.4" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.4" y="227.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.4" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.4" y="211.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.4" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.4" y="195.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.4" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.4" y="179.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.4" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.4" y="163.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.4" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1182.4" y="147.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.4" y="158.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1182.4" y="131.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.4" y="142.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1182.4" y="115.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.4" y="126.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1182.4" y="99.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.4" y="110.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.09%)</title><rect x="1182.4" y="83.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.4" y="94.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.09%)</title><rect x="1182.4" y="67.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.4" y="78.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle, Thread*) (1 samples, 0.09%)</title><rect x="1182.4" y="51.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.4" y="62.0"></text>
</g>
<g>
<title>SymbolTable::lookup_only(char const*, int, unsigned int&amp;) (1 samples, 0.09%)</title><rect x="1182.4" y="35.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.4" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1183.5" y="419.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.5" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1183.5" y="403.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.5" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1183.5" y="387.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1183.5" y="371.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1183.5" y="355.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1183.5" y="339.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.5" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1183.5" y="323.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.5" y="334.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.18%)</title><rect x="1183.5" y="307.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.5" y="318.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.18%)</title><rect x="1183.5" y="291.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.5" y="302.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.18%)</title><rect x="1183.5" y="275.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.5" y="286.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 0.18%)</title><rect x="1183.5" y="259.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.5" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (2 samples, 0.18%)</title><rect x="1183.5" y="243.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.5" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (2 samples, 0.18%)</title><rect x="1183.5" y="227.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.5" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.18%)</title><rect x="1183.5" y="211.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.5" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.18%)</title><rect x="1183.5" y="195.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.5" y="206.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (2 samples, 0.18%)</title><rect x="1183.5" y="179.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.5" y="190.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (2 samples, 0.18%)</title><rect x="1183.5" y="163.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.5" y="174.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (2 samples, 0.18%)</title><rect x="1183.5" y="147.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.5" y="158.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (2 samples, 0.18%)</title><rect x="1183.5" y="131.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.5" y="142.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (2 samples, 0.18%)</title><rect x="1183.5" y="115.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.5" y="126.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1183.5" y="99.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.5" y="110.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1183.5" y="83.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.5" y="94.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1183.5" y="67.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.5" y="78.0"></text>
</g>
<g>
<title>Reflection::verify_class_access(Klass*, Klass*, bool) (1 samples, 0.09%)</title><rect x="1183.5" y="51.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.5" y="62.0"></text>
</g>
<g>
<title>ciInstanceKlass::field_cache() (1 samples, 0.09%)</title><rect x="1184.6" y="99.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.6" y="110.0"></text>
</g>
<g>
<title>ciConstantPoolCache::ciConstantPoolCache(Arena*, int) (1 samples, 0.09%)</title><rect x="1184.6" y="83.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.6" y="94.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.09%)</title><rect x="1185.7" y="515.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.7" y="526.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.09%)</title><rect x="1185.7" y="499.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.7" y="510.0"></text>
</g>
<g>
<title>InstanceKlass::add_dependent_nmethod(nmethod*) (1 samples, 0.09%)</title><rect x="1185.7" y="483.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.7" y="494.0"></text>
</g>
<g>
<title>CompileBroker::collect_statistics(CompilerThread*, elapsedTimer, CompileTask*) (1 samples, 0.09%)</title><rect x="1186.7" y="547.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.7" y="558.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.18%)</title><rect x="1187.8" y="611.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.8" y="622.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.18%)</title><rect x="1187.8" y="595.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.8" y="606.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.09%)</title><rect x="1187.8" y="579.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.8" y="590.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.09%)</title><rect x="1188.9" y="579.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.9" y="590.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.09%)</title><rect x="1188.9" y="563.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.9" y="574.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.09%)</title><rect x="1188.9" y="547.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.9" y="558.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.09%)</title><rect x="1188.9" y="531.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.9" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.09%)</title><rect x="1188.9" y="515.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.9" y="526.0"></text>
</g>
<g>
<title>OtherRegionsTable::occupied() const (1 samples, 0.09%)</title><rect x="1188.9" y="499.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.9" y="510.0"></text>
</g>
</g>
</svg>
