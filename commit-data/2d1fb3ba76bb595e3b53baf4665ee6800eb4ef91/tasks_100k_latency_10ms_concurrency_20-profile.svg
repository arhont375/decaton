<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1046" onload="init(evt)" viewBox="0 0 1200 1046" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1029"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1029"> </text>
<g id="frames">
<g>
<title>all (370 samples, 100.00%)</title><rect x="10.0" y="995.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1006.0">all</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.27%)</title><rect x="10.0" y="979.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.27%)</title><rect x="10.0" y="963.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.27%)</title><rect x="10.0" y="947.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.27%)</title><rect x="10.0" y="931.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.27%)</title><rect x="10.0" y="915.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (23 samples, 6.22%)</title><rect x="13.2" y="979.0" width="73.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.2" y="990.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (23 samples, 6.22%)</title><rect x="13.2" y="963.0" width="73.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.2" y="974.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.27%)</title><rect x="13.2" y="947.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pause (1 samples, 0.27%)</title><rect x="13.2" y="931.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/LogContext$LocationAwareKafkaLogger.debug (1 samples, 0.27%)</title><rect x="13.2" y="915.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.2" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.27%)</title><rect x="16.4" y="947.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.resume (1 samples, 0.27%)</title><rect x="16.4" y="931.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.resume (1 samples, 0.27%)</title><rect x="16.4" y="915.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.27%)</title><rect x="16.4" y="899.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.27%)</title><rect x="16.4" y="883.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.4" y="894.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.27%)</title><rect x="16.4" y="867.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.4" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.27%)</title><rect x="16.4" y="851.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.4" y="862.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (8 samples, 2.16%)</title><rect x="19.6" y="947.0" width="25.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.6" y="958.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$265/215853891.accept (7 samples, 1.89%)</title><rect x="19.6" y="931.0" width="22.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.6" y="942.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (7 samples, 1.89%)</title><rect x="19.6" y="915.0" width="22.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="22.6" y="926.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (5 samples, 1.35%)</title><rect x="19.6" y="899.0" width="15.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="22.6" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (5 samples, 1.35%)</title><rect x="19.6" y="883.0" width="15.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.6" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (5 samples, 1.35%)</title><rect x="19.6" y="867.0" width="15.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="22.6" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (3 samples, 0.81%)</title><rect x="25.9" y="851.0" width="9.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="28.9" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 0.81%)</title><rect x="25.9" y="835.0" width="9.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="28.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (3 samples, 0.81%)</title><rect x="25.9" y="819.0" width="9.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="28.9" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (1 samples, 0.27%)</title><rect x="35.5" y="899.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="38.5" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.27%)</title><rect x="35.5" y="883.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="38.5" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (1 samples, 0.27%)</title><rect x="38.7" y="899.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="41.7" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.27%)</title><rect x="38.7" y="883.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="41.7" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.27%)</title><rect x="38.7" y="867.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="41.7" y="878.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.27%)</title><rect x="41.9" y="931.0" width="3.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="44.9" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (13 samples, 3.51%)</title><rect x="45.1" y="947.0" width="41.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="48.1" y="958.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (13 samples, 3.51%)</title><rect x="45.1" y="931.0" width="41.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="48.1" y="942.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (8 samples, 2.16%)</title><rect x="45.1" y="915.0" width="25.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="48.1" y="926.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 0.81%)</title><rect x="45.1" y="899.0" width="9.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="48.1" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 0.81%)</title><rect x="45.1" y="883.0" width="9.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="48.1" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.81%)</title><rect x="45.1" y="867.0" width="9.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="48.1" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.81%)</title><rect x="45.1" y="851.0" width="9.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="48.1" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (3 samples, 0.81%)</title><rect x="45.1" y="835.0" width="9.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="48.1" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (3 samples, 0.81%)</title><rect x="45.1" y="819.0" width="9.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="48.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (3 samples, 0.81%)</title><rect x="45.1" y="803.0" width="9.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="48.1" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (3 samples, 0.81%)</title><rect x="45.1" y="787.0" width="9.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="48.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (3 samples, 0.81%)</title><rect x="45.1" y="771.0" width="9.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="48.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (3 samples, 0.81%)</title><rect x="45.1" y="755.0" width="9.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="48.1" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (3 samples, 0.81%)</title><rect x="45.1" y="739.0" width="9.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="48.1" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (3 samples, 0.81%)</title><rect x="45.1" y="723.0" width="9.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="48.1" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (3 samples, 0.81%)</title><rect x="45.1" y="707.0" width="9.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="48.1" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (3 samples, 0.81%)</title><rect x="45.1" y="691.0" width="9.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="48.1" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (3 samples, 0.81%)</title><rect x="45.1" y="675.0" width="9.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="48.1" y="686.0"></text>
</g>
<g>
<title>__read (2 samples, 0.54%)</title><rect x="45.1" y="659.0" width="6.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="48.1" y="670.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.27%)</title><rect x="51.5" y="659.0" width="3.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="54.5" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (4 samples, 1.08%)</title><rect x="54.6" y="899.0" width="12.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="57.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 1.08%)</title><rect x="54.6" y="883.0" width="12.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="57.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 0.81%)</title><rect x="54.6" y="867.0" width="9.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="57.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 0.81%)</title><rect x="54.6" y="851.0" width="9.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="57.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (3 samples, 0.81%)</title><rect x="54.6" y="835.0" width="9.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="57.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (2 samples, 0.54%)</title><rect x="54.6" y="819.0" width="6.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="57.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.27%)</title><rect x="57.8" y="803.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="60.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.27%)</title><rect x="57.8" y="787.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="60.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.27%)</title><rect x="57.8" y="771.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="60.8" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.27%)</title><rect x="57.8" y="755.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="60.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.27%)</title><rect x="57.8" y="739.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="60.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.27%)</title><rect x="57.8" y="723.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="60.8" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.27%)</title><rect x="61.0" y="819.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="64.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.27%)</title><rect x="61.0" y="803.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="64.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.27%)</title><rect x="64.2" y="867.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="67.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.27%)</title><rect x="64.2" y="851.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="67.2" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.27%)</title><rect x="64.2" y="835.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="67.2" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.27%)</title><rect x="64.2" y="819.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="67.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.27%)</title><rect x="64.2" y="803.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="67.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.27%)</title><rect x="64.2" y="787.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="67.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.27%)</title><rect x="67.4" y="899.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="70.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.27%)</title><rect x="67.4" y="883.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="70.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.27%)</title><rect x="67.4" y="867.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="70.4" y="878.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.27%)</title><rect x="67.4" y="851.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="70.4" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.27%)</title><rect x="67.4" y="835.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="70.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (1 samples, 0.27%)</title><rect x="67.4" y="819.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="70.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (3 samples, 0.81%)</title><rect x="70.6" y="915.0" width="9.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="73.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (3 samples, 0.81%)</title><rect x="70.6" y="899.0" width="9.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="73.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.54%)</title><rect x="70.6" y="883.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="73.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.54%)</title><rect x="70.6" y="867.0" width="6.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="73.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.27%)</title><rect x="73.8" y="851.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="76.8" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.27%)</title><rect x="73.8" y="835.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="76.8" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.27%)</title><rect x="73.8" y="819.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="76.8" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.27%)</title><rect x="73.8" y="803.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="76.8" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.27%)</title><rect x="73.8" y="787.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="76.8" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.27%)</title><rect x="73.8" y="771.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="76.8" y="782.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.27%)</title><rect x="73.8" y="755.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="76.8" y="766.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.estimateSize (1 samples, 0.27%)</title><rect x="73.8" y="739.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="76.8" y="750.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (1 samples, 0.27%)</title><rect x="73.8" y="723.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="76.8" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.27%)</title><rect x="77.0" y="883.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="80.0" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.27%)</title><rect x="77.0" y="867.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="80.0" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.27%)</title><rect x="77.0" y="851.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="80.0" y="862.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.27%)</title><rect x="77.0" y="835.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="80.0" y="846.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.27%)</title><rect x="77.0" y="819.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="80.0" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.27%)</title><rect x="77.0" y="803.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="80.0" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.27%)</title><rect x="77.0" y="787.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="80.0" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.27%)</title><rect x="77.0" y="771.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="80.0" y="782.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.27%)</title><rect x="77.0" y="755.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="80.0" y="766.0"></text>
</g>
<g>
<title>java/util/stream/Sink.begin (1 samples, 0.27%)</title><rect x="77.0" y="739.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="80.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 0.54%)</title><rect x="80.2" y="915.0" width="6.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="83.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.54%)</title><rect x="80.2" y="899.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="83.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.54%)</title><rect x="80.2" y="883.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="83.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.54%)</title><rect x="80.2" y="867.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="83.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.27%)</title><rect x="80.2" y="851.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="83.2" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.27%)</title><rect x="80.2" y="835.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="83.2" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.27%)</title><rect x="80.2" y="819.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="83.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.27%)</title><rect x="80.2" y="803.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="83.2" y="814.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.27%)</title><rect x="80.2" y="787.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="83.2" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.27%)</title><rect x="80.2" y="771.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="83.2" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.27%)</title><rect x="80.2" y="755.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="83.2" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/IOVecWrapper.putBase (1 samples, 0.27%)</title><rect x="80.2" y="739.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="83.2" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.27%)</title><rect x="83.4" y="851.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="86.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.27%)</title><rect x="83.4" y="835.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="86.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.27%)</title><rect x="83.4" y="819.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="86.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.27%)</title><rect x="83.4" y="803.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="86.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.27%)</title><rect x="83.4" y="787.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="86.4" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.27%)</title><rect x="83.4" y="771.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="86.4" y="782.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.27%)</title><rect x="83.4" y="755.0" width="3.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="86.4" y="766.0"></text>
</g>
<g>
<title>java/lang/Thread.run (251 samples, 67.84%)</title><rect x="86.5" y="979.0" width="800.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="89.5" y="990.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (251 samples, 67.84%)</title><rect x="86.5" y="963.0" width="800.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="89.5" y="974.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (251 samples, 67.84%)</title><rect x="86.5" y="947.0" width="800.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="89.5" y="958.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$285/1070983087.run (243 samples, 65.68%)</title><rect x="86.5" y="931.0" width="775.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="89.5" y="942.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$285/1070983087.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$69 (243 samples, 65.68%)</title><rect x="86.5" y="915.0" width="775.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="89.5" y="926.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$69</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (243 samples, 65.68%)</title><rect x="86.5" y="899.0" width="775.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="89.5" y="910.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (239 samples, 64.59%)</title><rect x="86.5" y="883.0" width="762.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="89.5" y="894.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (55 samples, 14.86%)</title><rect x="108.9" y="867.0" width="175.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="111.9" y="878.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$43/416153648.extract (55 samples, 14.86%)</title><rect x="108.9" y="851.0" width="175.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="111.9" y="862.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (55 samples, 14.86%)</title><rect x="108.9" y="835.0" width="175.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="111.9" y="846.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (55 samples, 14.86%)</title><rect x="108.9" y="819.0" width="175.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="111.9" y="830.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (55 samples, 14.86%)</title><rect x="108.9" y="803.0" width="175.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="111.9" y="814.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (55 samples, 14.86%)</title><rect x="108.9" y="787.0" width="175.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="111.9" y="798.0">com/fasterxml/jackson/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (22 samples, 5.95%)</title><rect x="108.9" y="771.0" width="70.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="111.9" y="782.0">com/fast..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.27%)</title><rect x="134.4" y="755.0" width="3.2" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="137.4" y="766.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.27%)</title><rect x="134.4" y="739.0" width="3.2" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="137.4" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (2 samples, 0.54%)</title><rect x="137.6" y="755.0" width="6.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="140.6" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (2 samples, 0.54%)</title><rect x="137.6" y="739.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="140.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.54%)</title><rect x="137.6" y="723.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="140.6" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.54%)</title><rect x="137.6" y="707.0" width="6.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="140.6" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.54%)</title><rect x="137.6" y="691.0" width="6.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="140.6" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.54%)</title><rect x="137.6" y="675.0" width="6.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="140.6" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.54%)</title><rect x="137.6" y="659.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="140.6" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (11 samples, 2.97%)</title><rect x="143.9" y="755.0" width="35.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="146.9" y="766.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (9 samples, 2.43%)</title><rect x="150.3" y="739.0" width="28.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="153.3" y="750.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (9 samples, 2.43%)</title><rect x="150.3" y="723.0" width="28.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="153.3" y="734.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (32 samples, 8.65%)</title><rect x="179.0" y="771.0" width="102.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="182.0" y="782.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (4 samples, 1.08%)</title><rect x="179.0" y="755.0" width="12.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="182.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.54%)</title><rect x="185.4" y="739.0" width="6.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="188.4" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.54%)</title><rect x="191.8" y="755.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="194.8" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.54%)</title><rect x="191.8" y="739.0" width="6.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="194.8" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.54%)</title><rect x="191.8" y="723.0" width="6.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="194.8" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.54%)</title><rect x="191.8" y="707.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="194.8" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.54%)</title><rect x="198.2" y="755.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="201.2" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.54%)</title><rect x="198.2" y="739.0" width="6.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="201.2" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (22 samples, 5.95%)</title><rect x="204.5" y="755.0" width="70.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="207.5" y="766.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (7 samples, 1.89%)</title><rect x="204.5" y="739.0" width="22.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="207.5" y="750.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.27%)</title><rect x="204.5" y="723.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="207.5" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.27%)</title><rect x="204.5" y="707.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="207.5" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.27%)</title><rect x="204.5" y="691.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="207.5" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.27%)</title><rect x="204.5" y="675.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="207.5" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.27%)</title><rect x="204.5" y="659.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="207.5" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (4 samples, 1.08%)</title><rect x="207.7" y="723.0" width="12.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="210.7" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (4 samples, 1.08%)</title><rect x="207.7" y="707.0" width="12.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="210.7" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.27%)</title><rect x="217.3" y="691.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="220.3" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.54%)</title><rect x="220.5" y="723.0" width="6.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="223.5" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.54%)</title><rect x="220.5" y="707.0" width="6.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="223.5" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (15 samples, 4.05%)</title><rect x="226.9" y="739.0" width="47.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="229.9" y="750.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (15 samples, 4.05%)</title><rect x="226.9" y="723.0" width="47.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="229.9" y="734.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (15 samples, 4.05%)</title><rect x="226.9" y="707.0" width="47.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="229.9" y="718.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.54%)</title><rect x="236.4" y="691.0" width="6.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="239.4" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.54%)</title><rect x="236.4" y="675.0" width="6.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="239.4" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.54%)</title><rect x="236.4" y="659.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="239.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.27%)</title><rect x="239.6" y="643.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="242.6" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (5 samples, 1.35%)</title><rect x="242.8" y="691.0" width="16.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="245.8" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (5 samples, 1.35%)</title><rect x="242.8" y="675.0" width="16.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="245.8" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 1.35%)</title><rect x="242.8" y="659.0" width="16.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="245.8" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 1.35%)</title><rect x="242.8" y="643.0" width="16.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="245.8" y="654.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (5 samples, 1.35%)</title><rect x="242.8" y="627.0" width="16.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="245.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.27%)</title><rect x="258.8" y="691.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="261.8" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 0.54%)</title><rect x="261.9" y="691.0" width="6.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="264.9" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 0.54%)</title><rect x="261.9" y="675.0" width="6.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="264.9" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 0.54%)</title><rect x="261.9" y="659.0" width="6.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="264.9" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (2 samples, 0.54%)</title><rect x="261.9" y="643.0" width="6.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="264.9" y="654.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 0.54%)</title><rect x="261.9" y="627.0" width="6.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="264.9" y="638.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.27%)</title><rect x="265.1" y="611.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="268.1" y="622.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (1 samples, 0.27%)</title><rect x="265.1" y="595.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="268.1" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.54%)</title><rect x="268.3" y="691.0" width="6.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="271.3" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.54%)</title><rect x="268.3" y="675.0" width="6.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="271.3" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.54%)</title><rect x="268.3" y="659.0" width="6.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="271.3" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.checkUnresolvedObjectId (1 samples, 0.27%)</title><rect x="274.7" y="755.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="277.7" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.27%)</title><rect x="277.9" y="755.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="280.9" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.27%)</title><rect x="281.1" y="771.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="284.1" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.27%)</title><rect x="281.1" y="755.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="284.1" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.27%)</title><rect x="281.1" y="739.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="284.1" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.27%)</title><rect x="281.1" y="723.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="284.1" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.27%)</title><rect x="281.1" y="707.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="284.1" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (160 samples, 43.24%)</title><rect x="284.3" y="867.0" width="510.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="287.3" y="878.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (29 samples, 7.84%)</title><rect x="284.3" y="851.0" width="92.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="287.3" y="862.0">com/linecor..</text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 0.54%)</title><rect x="290.6" y="835.0" width="6.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="293.6" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.54%)</title><rect x="290.6" y="819.0" width="6.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="293.6" y="830.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (25 samples, 6.76%)</title><rect x="297.0" y="835.0" width="79.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="300.0" y="846.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (22 samples, 5.95%)</title><rect x="306.6" y="819.0" width="70.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="309.6" y="830.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 1.08%)</title><rect x="309.8" y="803.0" width="12.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="312.8" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 1.08%)</title><rect x="309.8" y="787.0" width="12.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="312.8" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 1.08%)</title><rect x="309.8" y="771.0" width="12.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="312.8" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 1.08%)</title><rect x="309.8" y="755.0" width="12.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="312.8" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (4 samples, 1.08%)</title><rect x="309.8" y="739.0" width="12.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="312.8" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 1.62%)</title><rect x="322.5" y="803.0" width="19.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="325.5" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (5 samples, 1.35%)</title><rect x="325.7" y="787.0" width="16.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="328.7" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 1.35%)</title><rect x="325.7" y="771.0" width="16.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="328.7" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (11 samples, 2.97%)</title><rect x="341.7" y="803.0" width="35.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="344.7" y="814.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (7 samples, 1.89%)</title><rect x="354.4" y="787.0" width="22.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="357.4" y="798.0">j..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (7 samples, 1.89%)</title><rect x="354.4" y="771.0" width="22.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="357.4" y="782.0">j..</text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.81%)</title><rect x="367.2" y="755.0" width="9.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="370.2" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.27%)</title><rect x="376.8" y="851.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="379.8" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.27%)</title><rect x="376.8" y="835.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="379.8" y="846.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.27%)</title><rect x="376.8" y="819.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="379.8" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (31 samples, 8.38%)</title><rect x="379.9" y="851.0" width="98.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="382.9" y="862.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (30 samples, 8.11%)</title><rect x="379.9" y="835.0" width="95.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="382.9" y="846.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (13 samples, 3.51%)</title><rect x="395.9" y="819.0" width="41.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="398.9" y="830.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (7 samples, 1.89%)</title><rect x="399.1" y="803.0" width="22.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="402.1" y="814.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (7 samples, 1.89%)</title><rect x="399.1" y="787.0" width="22.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="402.1" y="798.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (5 samples, 1.35%)</title><rect x="399.1" y="771.0" width="15.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="402.1" y="782.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (5 samples, 1.35%)</title><rect x="399.1" y="755.0" width="15.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="402.1" y="766.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 1.35%)</title><rect x="399.1" y="739.0" width="15.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="402.1" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (5 samples, 1.35%)</title><rect x="399.1" y="723.0" width="15.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="402.1" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.54%)</title><rect x="399.1" y="707.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="402.1" y="718.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.54%)</title><rect x="399.1" y="691.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="402.1" y="702.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.54%)</title><rect x="399.1" y="675.0" width="6.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="402.1" y="686.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (2 samples, 0.54%)</title><rect x="399.1" y="659.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="402.1" y="670.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.81%)</title><rect x="405.5" y="707.0" width="9.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="408.5" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.54%)</title><rect x="408.6" y="691.0" width="6.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="411.6" y="702.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.27%)</title><rect x="408.6" y="675.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="411.6" y="686.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.27%)</title><rect x="411.8" y="675.0" width="3.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="414.8" y="686.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.27%)</title><rect x="415.0" y="771.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="418.0" y="782.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.27%)</title><rect x="418.2" y="771.0" width="3.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="421.2" y="782.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 1.35%)</title><rect x="421.4" y="803.0" width="16.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="424.4" y="814.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.27%)</title><rect x="437.4" y="819.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="440.4" y="830.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.27%)</title><rect x="437.4" y="803.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="440.4" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.27%)</title><rect x="437.4" y="787.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="440.4" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.27%)</title><rect x="437.4" y="771.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="440.4" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.27%)</title><rect x="437.4" y="755.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="440.4" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.27%)</title><rect x="437.4" y="739.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="440.4" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.27%)</title><rect x="437.4" y="723.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="440.4" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.27%)</title><rect x="437.4" y="707.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="440.4" y="718.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.27%)</title><rect x="437.4" y="691.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="440.4" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.27%)</title><rect x="437.4" y="675.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="440.4" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.27%)</title><rect x="437.4" y="659.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="440.4" y="670.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (11 samples, 2.97%)</title><rect x="440.5" y="819.0" width="35.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="443.5" y="830.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (11 samples, 2.97%)</title><rect x="440.5" y="803.0" width="35.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="443.5" y="814.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 0.81%)</title><rect x="443.7" y="787.0" width="9.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="446.7" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.81%)</title><rect x="443.7" y="771.0" width="9.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="446.7" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.81%)</title><rect x="443.7" y="755.0" width="9.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="446.7" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.81%)</title><rect x="443.7" y="739.0" width="9.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="446.7" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.81%)</title><rect x="443.7" y="723.0" width="9.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="446.7" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.27%)</title><rect x="453.3" y="787.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="456.3" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.27%)</title><rect x="453.3" y="771.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="456.3" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.27%)</title><rect x="453.3" y="755.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="456.3" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.27%)</title><rect x="453.3" y="739.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="456.3" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.27%)</title><rect x="453.3" y="723.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="456.3" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (6 samples, 1.62%)</title><rect x="456.5" y="787.0" width="19.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="459.5" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.put (5 samples, 1.35%)</title><rect x="459.7" y="771.0" width="15.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="462.7" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.27%)</title><rect x="462.9" y="755.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="465.9" y="766.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.27%)</title><rect x="462.9" y="739.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="465.9" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.81%)</title><rect x="466.1" y="755.0" width="9.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="469.1" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.54%)</title><rect x="466.1" y="739.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="469.1" y="750.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.27%)</title><rect x="472.4" y="739.0" width="3.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="475.4" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (1 samples, 0.27%)</title><rect x="475.6" y="835.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="478.6" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.27%)</title><rect x="475.6" y="819.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="478.6" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.27%)</title><rect x="475.6" y="803.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="478.6" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.27%)</title><rect x="475.6" y="787.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="478.6" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (85 samples, 22.97%)</title><rect x="478.8" y="851.0" width="271.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="481.8" y="862.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (85 samples, 22.97%)</title><rect x="478.8" y="835.0" width="271.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="481.8" y="846.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$207/1526599671.process (73 samples, 19.73%)</title><rect x="491.6" y="819.0" width="232.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="494.6" y="830.0">com/linecorp/decaton/benchmark/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (73 samples, 19.73%)</title><rect x="491.6" y="803.0" width="232.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="494.6" y="814.0">com/linecorp/decaton/benchmark/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (73 samples, 19.73%)</title><rect x="491.6" y="787.0" width="232.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="494.6" y="798.0">com/linecorp/decaton/benchmark/..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.27%)</title><rect x="504.3" y="771.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="507.3" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.27%)</title><rect x="504.3" y="755.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="507.3" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.27%)</title><rect x="504.3" y="739.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="507.3" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.27%)</title><rect x="504.3" y="723.0" width="3.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="507.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.27%)</title><rect x="504.3" y="707.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="507.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.27%)</title><rect x="504.3" y="691.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="507.3" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (67 samples, 18.11%)</title><rect x="507.5" y="771.0" width="213.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="510.5" y="782.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>java/lang/Thread.sleep (67 samples, 18.11%)</title><rect x="507.5" y="755.0" width="213.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="510.5" y="766.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (54 samples, 14.59%)</title><rect x="533.0" y="739.0" width="172.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="536.0" y="750.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (4 samples, 1.08%)</title><rect x="552.2" y="723.0" width="12.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="555.2" y="734.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.54%)</title><rect x="564.9" y="723.0" width="6.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="567.9" y="734.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.81%)</title><rect x="571.3" y="723.0" width="9.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="574.3" y="734.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.54%)</title><rect x="580.9" y="723.0" width="6.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="583.9" y="734.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.27%)</title><rect x="584.1" y="707.0" width="3.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="587.1" y="718.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.27%)</title><rect x="587.2" y="723.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="590.2" y="734.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (36 samples, 9.73%)</title><rect x="590.4" y="723.0" width="114.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="593.4" y="734.0">os::sleep(Thre..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.54%)</title><rect x="609.6" y="707.0" width="6.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="612.6" y="718.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.54%)</title><rect x="609.6" y="691.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="612.6" y="702.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.27%)</title><rect x="615.9" y="707.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="618.9" y="718.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.27%)</title><rect x="619.1" y="707.0" width="3.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="622.1" y="718.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.27%)</title><rect x="619.1" y="691.0" width="3.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="622.1" y="702.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 1.08%)</title><rect x="622.3" y="707.0" width="12.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="625.3" y="718.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (18 samples, 4.86%)</title><rect x="635.1" y="707.0" width="57.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="638.1" y="718.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.27%)</title><rect x="692.5" y="707.0" width="3.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="695.5" y="718.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.27%)</title><rect x="695.7" y="707.0" width="3.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="698.7" y="718.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.54%)</title><rect x="698.9" y="707.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="701.9" y="718.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.27%)</title><rect x="705.2" y="739.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="708.2" y="750.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.27%)</title><rect x="708.4" y="739.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="711.4" y="750.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.27%)</title><rect x="711.6" y="739.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="714.6" y="750.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.27%)</title><rect x="714.8" y="739.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="717.8" y="750.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.27%)</title><rect x="718.0" y="739.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="721.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.incrementAndGet (1 samples, 0.27%)</title><rect x="721.2" y="771.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="724.2" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.54%)</title><rect x="724.4" y="819.0" width="6.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="727.4" y="830.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.54%)</title><rect x="724.4" y="803.0" width="6.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="727.4" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1318180415.linkToTargetMethod (1 samples, 0.27%)</title><rect x="730.8" y="819.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="733.8" y="830.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (1 samples, 0.27%)</title><rect x="730.8" y="803.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="733.8" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$291/82496522.get$Lambda (1 samples, 0.27%)</title><rect x="730.8" y="787.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="733.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (5 samples, 1.35%)</title><rect x="733.9" y="819.0" width="16.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="736.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (14 samples, 3.78%)</title><rect x="749.9" y="851.0" width="44.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="752.9" y="862.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (14 samples, 3.78%)</title><rect x="749.9" y="835.0" width="44.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="752.9" y="846.0">java..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.27%)</title><rect x="775.4" y="819.0" width="3.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="778.4" y="830.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.27%)</title><rect x="775.4" y="803.0" width="3.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="778.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 1.08%)</title><rect x="778.6" y="819.0" width="12.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="781.6" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$297/1017170475.accept (4 samples, 1.08%)</title><rect x="778.6" y="803.0" width="12.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="781.6" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$64 (4 samples, 1.08%)</title><rect x="778.6" y="787.0" width="12.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="781.6" y="798.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (4 samples, 1.08%)</title><rect x="778.6" y="771.0" width="12.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="781.6" y="782.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (4 samples, 1.08%)</title><rect x="778.6" y="755.0" width="12.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="781.6" y="766.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.27%)</title><rect x="788.2" y="739.0" width="3.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="791.2" y="750.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.27%)</title><rect x="788.2" y="723.0" width="3.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="791.2" y="734.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.27%)</title><rect x="791.4" y="819.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="794.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (17 samples, 4.59%)</title><rect x="794.5" y="867.0" width="54.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="797.5" y="878.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (17 samples, 4.59%)</title><rect x="794.5" y="851.0" width="54.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="797.5" y="862.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (15 samples, 4.05%)</title><rect x="800.9" y="835.0" width="47.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="803.9" y="846.0">java..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$297/1017170475.accept (1 samples, 0.27%)</title><rect x="800.9" y="819.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="803.9" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$64 (1 samples, 0.27%)</title><rect x="800.9" y="803.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="803.9" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.27%)</title><rect x="800.9" y="787.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="803.9" y="798.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.27%)</title><rect x="800.9" y="771.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="803.9" y="782.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.27%)</title><rect x="800.9" y="755.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="803.9" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.27%)</title><rect x="800.9" y="739.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="803.9" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$300/845620175.accept (14 samples, 3.78%)</title><rect x="804.1" y="819.0" width="44.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="807.1" y="830.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$63 (14 samples, 3.78%)</title><rect x="804.1" y="803.0" width="44.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="807.1" y="814.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$283/1949859158.complete (14 samples, 3.78%)</title><rect x="804.1" y="787.0" width="44.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="807.1" y="798.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$73 (14 samples, 3.78%)</title><rect x="804.1" y="771.0" width="44.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="807.1" y="782.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$282/1401753578.complete (14 samples, 3.78%)</title><rect x="804.1" y="755.0" width="44.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="807.1" y="766.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$49 (14 samples, 3.78%)</title><rect x="804.1" y="739.0" width="44.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="807.1" y="750.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (14 samples, 3.78%)</title><rect x="804.1" y="723.0" width="44.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="807.1" y="734.0">com/..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (14 samples, 3.78%)</title><rect x="804.1" y="707.0" width="44.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="807.1" y="718.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (14 samples, 3.78%)</title><rect x="804.1" y="691.0" width="44.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="807.1" y="702.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (14 samples, 3.78%)</title><rect x="804.1" y="675.0" width="44.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="807.1" y="686.0">ch/q..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (4 samples, 1.08%)</title><rect x="848.8" y="883.0" width="12.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="851.8" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (8 samples, 2.16%)</title><rect x="861.5" y="931.0" width="25.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="864.5" y="942.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (7 samples, 1.89%)</title><rect x="864.7" y="915.0" width="22.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="867.7" y="926.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.27%)</title><rect x="874.3" y="899.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="877.3" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.27%)</title><rect x="874.3" y="883.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="877.3" y="894.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.27%)</title><rect x="874.3" y="867.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="877.3" y="878.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.27%)</title><rect x="874.3" y="851.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="877.3" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.81%)</title><rect x="877.5" y="899.0" width="9.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="880.5" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.81%)</title><rect x="877.5" y="883.0" width="9.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="880.5" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.81%)</title><rect x="877.5" y="867.0" width="9.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="880.5" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.81%)</title><rect x="877.5" y="851.0" width="9.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="880.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.54%)</title><rect x="887.0" y="979.0" width="6.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="890.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (2 samples, 0.54%)</title><rect x="887.0" y="963.0" width="6.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="890.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.27%)</title><rect x="890.2" y="947.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="893.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.27%)</title><rect x="890.2" y="931.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="893.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.27%)</title><rect x="890.2" y="915.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="893.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.27%)</title><rect x="890.2" y="899.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="893.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.maybeRegisterConnectionMetrics (1 samples, 0.27%)</title><rect x="890.2" y="883.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="893.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.27%)</title><rect x="890.2" y="867.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="893.2" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.27%)</title><rect x="890.2" y="851.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="893.2" y="862.0"></text>
</g>
<g>
<title>start_thread (93 samples, 25.14%)</title><rect x="893.4" y="979.0" width="296.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="896.4" y="990.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (93 samples, 25.14%)</title><rect x="893.4" y="963.0" width="296.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="896.4" y="974.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (12 samples, 3.24%)</title><rect x="893.4" y="947.0" width="38.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="896.4" y="958.0">Gan..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (11 samples, 2.97%)</title><rect x="893.4" y="931.0" width="35.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="896.4" y="942.0">G1P..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 2.16%)</title><rect x="893.4" y="915.0" width="25.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="896.4" y="926.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (8 samples, 2.16%)</title><rect x="893.4" y="899.0" width="25.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="896.4" y="910.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (4 samples, 1.08%)</title><rect x="899.8" y="883.0" width="12.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="902.8" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (3 samples, 0.81%)</title><rect x="903.0" y="867.0" width="9.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="906.0" y="878.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (2 samples, 0.54%)</title><rect x="912.5" y="883.0" width="6.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="915.5" y="894.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (2 samples, 0.54%)</title><rect x="918.9" y="915.0" width="6.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="921.9" y="926.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.27%)</title><rect x="918.9" y="899.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="921.9" y="910.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.27%)</title><rect x="918.9" y="883.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="921.9" y="894.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.27%)</title><rect x="918.9" y="867.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="921.9" y="878.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.27%)</title><rect x="918.9" y="851.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="921.9" y="862.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.27%)</title><rect x="918.9" y="835.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="921.9" y="846.0"></text>
</g>
<g>
<title>HeapRegionRemSet::add_strong_code_root(nmethod*) (1 samples, 0.27%)</title><rect x="918.9" y="819.0" width="3.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="921.9" y="830.0"></text>
</g>
<g>
<title>G1CodeRootSet::contains(nmethod*) (1 samples, 0.27%)</title><rect x="918.9" y="803.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="921.9" y="814.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.27%)</title><rect x="922.1" y="899.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="925.1" y="910.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.27%)</title><rect x="922.1" y="883.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="925.1" y="894.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.27%)</title><rect x="925.3" y="915.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="928.3" y="926.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.27%)</title><rect x="925.3" y="899.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="928.3" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (1 samples, 0.27%)</title><rect x="925.3" y="883.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="928.3" y="894.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (1 samples, 0.27%)</title><rect x="925.3" y="867.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="928.3" y="878.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.27%)</title><rect x="925.3" y="851.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="928.3" y="862.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (1 samples, 0.27%)</title><rect x="925.3" y="835.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="928.3" y="846.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.27%)</title><rect x="928.5" y="931.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="931.5" y="942.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.27%)</title><rect x="928.5" y="915.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="931.5" y="926.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.27%)</title><rect x="928.5" y="899.0" width="3.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="931.5" y="910.0"></text>
</g>
<g>
<title>JavaThread::run() (81 samples, 21.89%)</title><rect x="931.7" y="947.0" width="258.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="934.7" y="958.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (81 samples, 21.89%)</title><rect x="931.7" y="931.0" width="258.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="934.7" y="942.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (81 samples, 21.89%)</title><rect x="931.7" y="915.0" width="258.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="934.7" y="926.0">CompileBroker::compiler_thread_loo..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (81 samples, 21.89%)</title><rect x="931.7" y="899.0" width="258.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="934.7" y="910.0">CompileBroker::invoke_compiler_on_..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (78 samples, 21.08%)</title><rect x="931.7" y="883.0" width="248.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="934.7" y="894.0">C2Compiler::compile_method(ciEnv*..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (78 samples, 21.08%)</title><rect x="931.7" y="867.0" width="248.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="934.7" y="878.0">Compile::Compile(ciEnv*, C2Compil..</text>
</g>
<g>
<title>Compile::Code_Gen() (40 samples, 10.81%)</title><rect x="931.7" y="851.0" width="127.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="934.7" y="862.0">Compile::Code_Ge..</text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.81%)</title><rect x="931.7" y="835.0" width="9.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="934.7" y="846.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.54%)</title><rect x="931.7" y="819.0" width="6.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="934.7" y="830.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.27%)</title><rect x="938.1" y="819.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="941.1" y="830.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 1.08%)</title><rect x="941.2" y="835.0" width="12.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="944.2" y="846.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 1.08%)</title><rect x="941.2" y="819.0" width="12.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="944.2" y="830.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.27%)</title><rect x="944.4" y="803.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="947.4" y="814.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.54%)</title><rect x="947.6" y="803.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="950.6" y="814.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.27%)</title><rect x="947.6" y="787.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="950.6" y="798.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.27%)</title><rect x="947.6" y="771.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="950.6" y="782.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.27%)</title><rect x="947.6" y="755.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="950.6" y="766.0"></text>
</g>
<g>
<title>State::_sub_Op_AddP(Node const*) (1 samples, 0.27%)</title><rect x="947.6" y="739.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="950.6" y="750.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.27%)</title><rect x="950.8" y="787.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="953.8" y="798.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.27%)</title><rect x="950.8" y="771.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="953.8" y="782.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.27%)</title><rect x="950.8" y="755.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="953.8" y="766.0"></text>
</g>
<g>
<title>cmpFastUnlockNode::Expand(State*, Node_List&amp;, Node*) (1 samples, 0.27%)</title><rect x="950.8" y="739.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="953.8" y="750.0"></text>
</g>
<g>
<title>State::MachOperGenerator(int, Compile*) (1 samples, 0.27%)</title><rect x="950.8" y="723.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="953.8" y="734.0"></text>
</g>
<g>
<title>MachOper::operator new(unsigned long, Compile*) (1 samples, 0.27%)</title><rect x="950.8" y="707.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="953.8" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.81%)</title><rect x="954.0" y="835.0" width="9.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="957.0" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.81%)</title><rect x="954.0" y="819.0" width="9.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="957.0" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.27%)</title><rect x="954.0" y="803.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="957.0" y="814.0"></text>
</g>
<g>
<title>MachNode::get_base_and_disp(long&amp;, TypePtr const*&amp;) const (1 samples, 0.27%)</title><rect x="954.0" y="787.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="957.0" y="798.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.27%)</title><rect x="954.0" y="771.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="957.0" y="782.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.27%)</title><rect x="954.0" y="755.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="957.0" y="766.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.27%)</title><rect x="954.0" y="739.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="957.0" y="750.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.27%)</title><rect x="954.0" y="723.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="957.0" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.27%)</title><rect x="957.2" y="803.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="960.2" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.27%)</title><rect x="960.4" y="803.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="963.4" y="814.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.27%)</title><rect x="960.4" y="787.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="963.4" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (29 samples, 7.84%)</title><rect x="963.6" y="835.0" width="92.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="966.6" y="846.0">PhaseChaiti..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.27%)</title><rect x="966.8" y="819.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="969.8" y="830.0"></text>
</g>
<g>
<title>Node::cisc_operand() const (1 samples, 0.27%)</title><rect x="969.9" y="819.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="972.9" y="830.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.54%)</title><rect x="973.1" y="819.0" width="6.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="976.1" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.27%)</title><rect x="979.5" y="819.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="982.5" y="830.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.27%)</title><rect x="979.5" y="803.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="982.5" y="814.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.27%)</title><rect x="979.5" y="787.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="982.5" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 1.62%)</title><rect x="982.7" y="819.0" width="19.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="985.7" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 1.62%)</title><rect x="1001.8" y="819.0" width="19.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1004.8" y="830.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.54%)</title><rect x="1008.2" y="803.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1011.2" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.54%)</title><rect x="1014.6" y="803.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1017.6" y="814.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.27%)</title><rect x="1017.8" y="787.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1020.8" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.27%)</title><rect x="1021.0" y="819.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1024.0" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::possibly_merge_multidef(Node*, unsigned int, Block*, GrowableArray&lt;PhaseChaitin::RegDefUse&gt;&amp;) (1 samples, 0.27%)</title><rect x="1021.0" y="803.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1024.0" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 1.08%)</title><rect x="1024.2" y="819.0" width="12.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1027.2" y="830.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.27%)</title><rect x="1036.9" y="819.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1039.9" y="830.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.27%)</title><rect x="1036.9" y="803.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1039.9" y="814.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.27%)</title><rect x="1040.1" y="819.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1043.1" y="830.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.27%)</title><rect x="1043.3" y="819.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1046.3" y="830.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.27%)</title><rect x="1043.3" y="803.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1046.3" y="814.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.54%)</title><rect x="1046.5" y="819.0" width="6.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1049.5" y="830.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.27%)</title><rect x="1052.9" y="819.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1055.9" y="830.0"></text>
</g>
<g>
<title>compI_rReg_immNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.27%)</title><rect x="1056.1" y="835.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1059.1" y="846.0"></text>
</g>
<g>
<title>Compile::Optimize() (26 samples, 7.03%)</title><rect x="1059.2" y="851.0" width="83.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1062.2" y="862.0">Compile::..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.27%)</title><rect x="1059.2" y="835.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1062.2" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.27%)</title><rect x="1059.2" y="819.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1062.2" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.27%)</title><rect x="1059.2" y="803.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1062.2" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::add_call_node(CallNode*) (1 samples, 0.27%)</title><rect x="1059.2" y="787.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1062.2" y="798.0"></text>
</g>
<g>
<title>ciKlass::is_subclass_of(ciKlass*) (1 samples, 0.27%)</title><rect x="1059.2" y="771.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1062.2" y="782.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.54%)</title><rect x="1062.4" y="835.0" width="6.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1065.4" y="846.0"></text>
</g>
<g>
<title>AddINode::add_ring(Type const*, Type const*) const (1 samples, 0.27%)</title><rect x="1065.6" y="819.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1068.6" y="830.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.27%)</title><rect x="1065.6" y="803.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1068.6" y="814.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.27%)</title><rect x="1065.6" y="787.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1068.6" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (20 samples, 5.41%)</title><rect x="1068.8" y="835.0" width="63.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1071.8" y="846.0">PhaseId..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.27%)</title><rect x="1068.8" y="819.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1071.8" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_pre_post_loops(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.27%)</title><rect x="1068.8" y="803.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1071.8" y="814.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.27%)</title><rect x="1072.0" y="819.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1075.0" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.27%)</title><rect x="1075.2" y="819.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1078.2" y="830.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.27%)</title><rect x="1075.2" y="803.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1078.2" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.81%)</title><rect x="1078.4" y="819.0" width="9.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1081.4" y="830.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (2 samples, 0.54%)</title><rect x="1078.4" y="803.0" width="6.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1081.4" y="814.0"></text>
</g>
<g>
<title>SafePointNode::pinned() const (1 samples, 0.27%)</title><rect x="1084.8" y="803.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1087.8" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (13 samples, 3.51%)</title><rect x="1087.9" y="819.0" width="41.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1090.9" y="830.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (11 samples, 2.97%)</title><rect x="1094.3" y="803.0" width="35.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1097.3" y="814.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (10 samples, 2.70%)</title><rect x="1097.5" y="787.0" width="31.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1100.5" y="798.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 0.81%)</title><rect x="1119.8" y="771.0" width="9.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1122.8" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.27%)</title><rect x="1129.4" y="819.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1132.4" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.27%)</title><rect x="1129.4" y="803.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1132.4" y="814.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.27%)</title><rect x="1129.4" y="787.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1132.4" y="798.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.27%)</title><rect x="1129.4" y="771.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1132.4" y="782.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.27%)</title><rect x="1129.4" y="755.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1132.4" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.81%)</title><rect x="1132.6" y="835.0" width="9.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1135.6" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.27%)</title><rect x="1132.6" y="819.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1135.6" y="830.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.27%)</title><rect x="1132.6" y="803.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1135.6" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.54%)</title><rect x="1135.8" y="819.0" width="6.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1138.8" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.27%)</title><rect x="1135.8" y="803.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1138.8" y="814.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.27%)</title><rect x="1139.0" y="803.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1142.0" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.27%)</title><rect x="1139.0" y="787.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1142.0" y="798.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.27%)</title><rect x="1139.0" y="771.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.0" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 2.97%)</title><rect x="1142.2" y="851.0" width="35.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1145.2" y="862.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 2.97%)</title><rect x="1142.2" y="835.0" width="35.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.2" y="846.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 2.97%)</title><rect x="1142.2" y="819.0" width="35.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1145.2" y="830.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 2.97%)</title><rect x="1142.2" y="803.0" width="35.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1145.2" y="814.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (11 samples, 2.97%)</title><rect x="1142.2" y="787.0" width="35.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1145.2" y="798.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (11 samples, 2.97%)</title><rect x="1142.2" y="771.0" width="35.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.2" y="782.0">Par..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 2.70%)</title><rect x="1142.2" y="755.0" width="31.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1145.2" y="766.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 2.70%)</title><rect x="1142.2" y="739.0" width="31.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1145.2" y="750.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 2.70%)</title><rect x="1142.2" y="723.0" width="31.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.2" y="734.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 2.70%)</title><rect x="1142.2" y="707.0" width="31.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1145.2" y="718.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 2.70%)</title><rect x="1142.2" y="691.0" width="31.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1145.2" y="702.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (10 samples, 2.70%)</title><rect x="1142.2" y="675.0" width="31.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1145.2" y="686.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 1.62%)</title><rect x="1142.2" y="659.0" width="19.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1145.2" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.35%)</title><rect x="1142.2" y="643.0" width="15.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1145.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.35%)</title><rect x="1142.2" y="627.0" width="15.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.35%)</title><rect x="1142.2" y="611.0" width="15.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1145.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.35%)</title><rect x="1142.2" y="595.0" width="15.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1145.2" y="606.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.27%)</title><rect x="1142.2" y="579.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1145.2" y="590.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const**) (1 samples, 0.27%)</title><rect x="1142.2" y="563.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1145.2" y="574.0"></text>
</g>
<g>
<title>GraphKit::array_element_address(Node*, Node*, BasicType, TypeInt const*) (1 samples, 0.27%)</title><rect x="1142.2" y="547.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1145.2" y="558.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.27%)</title><rect x="1142.2" y="531.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1145.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.08%)</title><rect x="1145.4" y="579.0" width="12.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1148.4" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.08%)</title><rect x="1145.4" y="563.0" width="12.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.4" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.08%)</title><rect x="1145.4" y="547.0" width="12.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1148.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.08%)</title><rect x="1145.4" y="531.0" width="12.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1148.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.08%)</title><rect x="1145.4" y="515.0" width="12.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.08%)</title><rect x="1145.4" y="499.0" width="12.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1148.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.81%)</title><rect x="1145.4" y="483.0" width="9.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1148.4" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.81%)</title><rect x="1145.4" y="467.0" width="9.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1148.4" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.81%)</title><rect x="1145.4" y="451.0" width="9.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.4" y="462.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.27%)</title><rect x="1145.4" y="435.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1148.4" y="446.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.27%)</title><rect x="1145.4" y="419.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.4" y="430.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.27%)</title><rect x="1145.4" y="403.0" width="3.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1148.4" y="414.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.27%)</title><rect x="1145.4" y="387.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1148.4" y="398.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.27%)</title><rect x="1145.4" y="371.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1148.4" y="382.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.27%)</title><rect x="1145.4" y="355.0" width="3.1" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1148.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.54%)</title><rect x="1148.5" y="435.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.54%)</title><rect x="1148.5" y="419.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.54%)</title><rect x="1148.5" y="403.0" width="6.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1151.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1148.5" y="387.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.5" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1148.5" y="371.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.5" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1148.5" y="355.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1151.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1148.5" y="339.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.5" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1148.5" y="323.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1151.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1148.5" y="307.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.5" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1148.5" y="291.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.5" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1148.5" y="275.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1151.5" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1148.5" y="259.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1151.5" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1148.5" y="243.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.5" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1148.5" y="227.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1151.5" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1148.5" y="211.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.5" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1148.5" y="195.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.5" y="206.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1148.5" y="179.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.5" y="190.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_string_equals() (1 samples, 0.27%)</title><rect x="1148.5" y="163.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1151.5" y="174.0"></text>
</g>
<g>
<title>LibraryCallKit::generate_guard(Node*, RegionNode*, float) (1 samples, 0.27%)</title><rect x="1148.5" y="147.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1151.5" y="158.0"></text>
</g>
<g>
<title>Type::singleton() const (1 samples, 0.27%)</title><rect x="1148.5" y="131.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.5" y="142.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.27%)</title><rect x="1151.7" y="387.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1154.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.27%)</title><rect x="1151.7" y="371.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1154.7" y="382.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.27%)</title><rect x="1151.7" y="355.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.7" y="366.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.27%)</title><rect x="1151.7" y="339.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.7" y="350.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.27%)</title><rect x="1151.7" y="323.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.7" y="334.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.27%)</title><rect x="1151.7" y="307.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1154.7" y="318.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.27%)</title><rect x="1151.7" y="291.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.7" y="302.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.27%)</title><rect x="1151.7" y="275.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.7" y="286.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.27%)</title><rect x="1151.7" y="259.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1154.7" y="270.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.27%)</title><rect x="1151.7" y="243.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.7" y="254.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.27%)</title><rect x="1151.7" y="227.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.7" y="238.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.27%)</title><rect x="1151.7" y="211.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.7" y="222.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.27%)</title><rect x="1151.7" y="195.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1154.7" y="206.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.27%)</title><rect x="1151.7" y="179.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1154.7" y="190.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.27%)</title><rect x="1151.7" y="163.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.7" y="174.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.27%)</title><rect x="1151.7" y="147.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.7" y="158.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.27%)</title><rect x="1151.7" y="131.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.7" y="142.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.27%)</title><rect x="1151.7" y="115.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1154.7" y="126.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.27%)</title><rect x="1151.7" y="99.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1154.7" y="110.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.27%)</title><rect x="1151.7" y="83.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.7" y="94.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.27%)</title><rect x="1151.7" y="67.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.7" y="78.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.27%)</title><rect x="1151.7" y="51.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.7" y="62.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.27%)</title><rect x="1151.7" y="35.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1154.7" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.27%)</title><rect x="1154.9" y="483.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1157.9" y="494.0"></text>
</g>
<g>
<title>CmpNode::CmpNode(Node*, Node*) (1 samples, 0.27%)</title><rect x="1154.9" y="467.0" width="3.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1157.9" y="478.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.27%)</title><rect x="1158.1" y="643.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1161.1" y="654.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 1.08%)</title><rect x="1161.3" y="659.0" width="12.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1164.3" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.08%)</title><rect x="1161.3" y="643.0" width="12.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.3" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.08%)</title><rect x="1161.3" y="627.0" width="12.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.08%)</title><rect x="1161.3" y="611.0" width="12.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.08%)</title><rect x="1161.3" y="595.0" width="12.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.08%)</title><rect x="1161.3" y="579.0" width="12.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.08%)</title><rect x="1161.3" y="563.0" width="12.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.3" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.81%)</title><rect x="1161.3" y="547.0" width="9.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.3" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.81%)</title><rect x="1161.3" y="531.0" width="9.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.81%)</title><rect x="1161.3" y="515.0" width="9.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.81%)</title><rect x="1161.3" y="499.0" width="9.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.81%)</title><rect x="1161.3" y="483.0" width="9.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.81%)</title><rect x="1161.3" y="467.0" width="9.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.3" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.54%)</title><rect x="1161.3" y="451.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.3" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.54%)</title><rect x="1161.3" y="435.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.54%)</title><rect x="1161.3" y="419.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.54%)</title><rect x="1161.3" y="403.0" width="6.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.54%)</title><rect x="1161.3" y="387.0" width="6.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.54%)</title><rect x="1161.3" y="371.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.3" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1161.3" y="355.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.3" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1161.3" y="339.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.3" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1161.3" y="323.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.3" y="334.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.27%)</title><rect x="1161.3" y="307.0" width="3.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1164.3" y="318.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.27%)</title><rect x="1161.3" y="291.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.3" y="302.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.27%)</title><rect x="1161.3" y="275.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.3" y="286.0"></text>
</g>
<g>
<title>TypeInt::filter_helper(Type const*, bool) const (1 samples, 0.27%)</title><rect x="1161.3" y="259.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.3" y="270.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.27%)</title><rect x="1161.3" y="243.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.3" y="254.0"></text>
</g>
<g>
<title>TypeInt::xmeet(Type const*) const (1 samples, 0.27%)</title><rect x="1161.3" y="227.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.3" y="238.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.27%)</title><rect x="1161.3" y="211.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.3" y="222.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1164.5" y="355.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.5" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1164.5" y="339.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.5" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1164.5" y="323.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1164.5" y="307.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.5" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1164.5" y="291.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.5" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1164.5" y="275.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1164.5" y="259.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.5" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1164.5" y="243.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.5" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1164.5" y="227.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.5" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1164.5" y="211.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.5" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1164.5" y="195.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.5" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1164.5" y="179.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.5" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1164.5" y="163.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.5" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1164.5" y="147.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.5" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1164.5" y="131.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.5" y="142.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1164.5" y="115.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.5" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1164.5" y="99.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.5" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1164.5" y="83.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.5" y="94.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.27%)</title><rect x="1164.5" y="67.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.5" y="78.0"></text>
</g>
<g>
<title>AddLNode::bottom_type() const (1 samples, 0.27%)</title><rect x="1164.5" y="51.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.5" y="62.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1167.7" y="451.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.7" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1167.7" y="435.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.7" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1167.7" y="419.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1167.7" y="403.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1167.7" y="387.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1167.7" y="371.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1167.7" y="355.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.7" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1167.7" y="339.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.7" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1167.7" y="323.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1167.7" y="307.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1167.7" y="291.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1167.7" y="275.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.27%)</title><rect x="1167.7" y="259.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.7" y="270.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.27%)</title><rect x="1167.7" y="243.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.7" y="254.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.27%)</title><rect x="1167.7" y="227.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.7" y="238.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.27%)</title><rect x="1167.7" y="211.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.7" y="222.0"></text>
</g>
<g>
<title>ciEnv::get_instance_klass_for_declared_method_holder(ciKlass*) (1 samples, 0.27%)</title><rect x="1170.9" y="547.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.9" y="558.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_instance_klass() const (1 samples, 0.27%)</title><rect x="1170.9" y="531.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.9" y="542.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1174.1" y="755.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.1" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1174.1" y="739.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.1" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1174.1" y="723.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1174.1" y="707.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1174.1" y="691.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1174.1" y="675.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.1" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1174.1" y="659.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.1" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1174.1" y="643.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.1" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1174.1" y="627.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1174.1" y="611.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1174.1" y="595.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1174.1" y="579.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1174.1" y="563.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.1" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1174.1" y="547.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.1" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1174.1" y="531.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1174.1" y="515.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1174.1" y="499.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1174.1" y="483.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1174.1" y="467.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.1" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1174.1" y="451.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.1" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1174.1" y="435.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1174.1" y="419.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1174.1" y="403.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1174.1" y="387.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1174.1" y="371.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.1" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1174.1" y="355.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.1" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1174.1" y="339.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1174.1" y="323.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1174.1" y="307.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1174.1" y="291.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.27%)</title><rect x="1174.1" y="275.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.27%)</title><rect x="1174.1" y="259.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.1" y="270.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.27%)</title><rect x="1174.1" y="243.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.1" y="254.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.27%)</title><rect x="1174.1" y="227.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.1" y="238.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.27%)</title><rect x="1174.1" y="211.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.1" y="222.0"></text>
</g>
<g>
<title>SubLNode::Ideal(PhaseGVN*, bool) (1 samples, 0.27%)</title><rect x="1174.1" y="195.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.1" y="206.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.27%)</title><rect x="1177.2" y="851.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.2" y="862.0"></text>
</g>
<g>
<title>Node::has_special_unique_user() const (1 samples, 0.27%)</title><rect x="1177.2" y="835.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.2" y="846.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 0.81%)</title><rect x="1180.4" y="883.0" width="9.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.4" y="894.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 0.81%)</title><rect x="1180.4" y="867.0" width="9.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.4" y="878.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.81%)</title><rect x="1180.4" y="851.0" width="9.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.4" y="862.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.81%)</title><rect x="1180.4" y="835.0" width="9.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.4" y="846.0"></text>
</g>
<g>
<title>Compilation::build_hir() (2 samples, 0.54%)</title><rect x="1180.4" y="819.0" width="6.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.4" y="830.0"></text>
</g>
<g>
<title>GlobalValueNumbering::GlobalValueNumbering(IR*) (1 samples, 0.27%)</title><rect x="1180.4" y="803.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.4" y="814.0"></text>
</g>
<g>
<title>ValueMap::find_insert(Instruction*) (1 samples, 0.27%)</title><rect x="1180.4" y="787.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.4" y="798.0"></text>
</g>
<g>
<title>IR::split_critical_edges() (1 samples, 0.27%)</title><rect x="1183.6" y="803.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.6" y="814.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(BlockClosure*) (1 samples, 0.27%)</title><rect x="1183.6" y="787.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.6" y="798.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(boolArray&amp;, BlockClosure*) (1 samples, 0.27%)</title><rect x="1183.6" y="771.0" width="3.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.6" y="782.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.27%)</title><rect x="1186.8" y="819.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.8" y="830.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.27%)</title><rect x="1186.8" y="803.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.8" y="814.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.27%)</title><rect x="1186.8" y="787.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.8" y="798.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.27%)</title><rect x="1186.8" y="771.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.8" y="782.0"></text>
</g>
<g>
<title>IntervalWalker::interval_moved(Interval*, IntervalKind, IntervalState, IntervalState) (1 samples, 0.27%)</title><rect x="1186.8" y="755.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.8" y="766.0"></text>
</g>
</g>
</svg>
