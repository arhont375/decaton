<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1030" onload="init(evt)" viewBox="0 0 1200 1030" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1013"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1013"> </text>
<g id="frames">
<g>
<title>all (1,279 samples, 100.00%)</title><rect x="10.0" y="979.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="990.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="10.0" y="963.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>malloc_consolidate (1 samples, 0.08%)</title><rect x="10.0" y="947.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (275 samples, 21.50%)</title><rect x="10.9" y="963.0" width="253.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.9" y="974.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.08%)</title><rect x="10.9" y="947.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="13.9" y="958.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="10.9" y="931.0" width="0.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="13.9" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (274 samples, 21.42%)</title><rect x="11.8" y="947.0" width="252.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.8" y="958.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (2 samples, 0.16%)</title><rect x="11.8" y="931.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.8" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (2 samples, 0.16%)</title><rect x="11.8" y="915.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.8" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="12.8" y="899.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.8" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="12.8" y="883.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.8" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="12.8" y="867.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.8" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="12.8" y="851.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.8" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="12.8" y="835.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.8" y="846.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.08%)</title><rect x="12.8" y="819.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.8" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap$HashMapSpliterator.estimateSize (1 samples, 0.08%)</title><rect x="12.8" y="803.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.8" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.08%)</title><rect x="13.7" y="931.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.7" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.08%)</title><rect x="13.7" y="915.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.7" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (3 samples, 0.23%)</title><rect x="14.6" y="931.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.6" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (3 samples, 0.23%)</title><rect x="14.6" y="915.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.6" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (3 samples, 0.23%)</title><rect x="14.6" y="899.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="17.6" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$268/107739349.accept (3 samples, 0.23%)</title><rect x="14.6" y="883.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.6" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (3 samples, 0.23%)</title><rect x="14.6" y="867.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.6" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (3 samples, 0.23%)</title><rect x="14.6" y="851.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="17.6" y="862.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (3 samples, 0.23%)</title><rect x="14.6" y="835.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.6" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.08%)</title><rect x="17.4" y="931.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.4" y="942.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (193 samples, 15.09%)</title><rect x="18.3" y="931.0" width="178.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.3" y="942.0">java/lang/Iterable.forE..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$267/839385844.accept (183 samples, 14.31%)</title><rect x="18.3" y="915.0" width="168.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.3" y="926.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (183 samples, 14.31%)</title><rect x="18.3" y="899.0" width="168.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.3" y="910.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (157 samples, 12.28%)</title><rect x="18.3" y="883.0" width="144.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="21.3" y="894.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (157 samples, 12.28%)</title><rect x="18.3" y="867.0" width="144.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.3" y="878.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (157 samples, 12.28%)</title><rect x="18.3" y="851.0" width="144.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="21.3" y="862.0">com/linecorp/decat..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (157 samples, 12.28%)</title><rect x="18.3" y="835.0" width="144.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.3" y="846.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (157 samples, 12.28%)</title><rect x="18.3" y="819.0" width="144.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.3" y="830.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (157 samples, 12.28%)</title><rect x="18.3" y="803.0" width="144.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.3" y="814.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (105 samples, 8.21%)</title><rect x="58.9" y="787.0" width="96.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="61.9" y="798.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (24 samples, 1.88%)</title><rect x="58.9" y="771.0" width="22.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="61.9" y="782.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (24 samples, 1.88%)</title><rect x="58.9" y="755.0" width="22.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="61.9" y="766.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (24 samples, 1.88%)</title><rect x="58.9" y="739.0" width="22.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="61.9" y="750.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (13 samples, 1.02%)</title><rect x="81.0" y="771.0" width="12.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="84.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (13 samples, 1.02%)</title><rect x="81.0" y="755.0" width="12.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="84.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.08%)</title><rect x="84.7" y="739.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="87.7" y="750.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.08%)</title><rect x="84.7" y="723.0" width="1.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="87.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (8 samples, 0.63%)</title><rect x="85.7" y="739.0" width="7.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="88.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (68 samples, 5.32%)</title><rect x="93.0" y="771.0" width="62.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="96.0" y="782.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (68 samples, 5.32%)</title><rect x="93.0" y="755.0" width="62.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="96.0" y="766.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (68 samples, 5.32%)</title><rect x="93.0" y="739.0" width="62.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="96.0" y="750.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (68 samples, 5.32%)</title><rect x="93.0" y="723.0" width="62.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="96.0" y="734.0">java/u..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (68 samples, 5.32%)</title><rect x="93.0" y="707.0" width="62.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="96.0" y="718.0">sun/mi..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.16%)</title><rect x="93.0" y="691.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="96.0" y="702.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.08%)</title><rect x="94.9" y="691.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="97.9" y="702.0"></text>
</g>
<g>
<title>Unsafe_Unpark (57 samples, 4.46%)</title><rect x="95.8" y="691.0" width="52.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="98.8" y="702.0">Unsaf..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.16%)</title><rect x="97.6" y="675.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="100.6" y="686.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.16%)</title><rect x="99.5" y="675.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="102.5" y="686.0"></text>
</g>
<g>
<title>__pthread_cond_signal (33 samples, 2.58%)</title><rect x="101.3" y="675.0" width="30.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="104.3" y="686.0">__..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (4 samples, 0.31%)</title><rect x="131.8" y="675.0" width="3.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="134.8" y="686.0"></text>
</g>
<g>
<title>pthread_mutex_lock (14 samples, 1.09%)</title><rect x="135.5" y="675.0" width="12.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="138.5" y="686.0"></text>
</g>
<g>
<title>__lll_unlock_wake (6 samples, 0.47%)</title><rect x="148.4" y="691.0" width="5.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="151.4" y="702.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.16%)</title><rect x="153.9" y="691.0" width="1.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="156.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.08%)</title><rect x="155.8" y="787.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="158.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.08%)</title><rect x="155.8" y="771.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="158.8" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.08%)</title><rect x="155.8" y="755.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="158.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 0.55%)</title><rect x="156.7" y="787.0" width="6.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="159.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.55%)</title><rect x="156.7" y="771.0" width="6.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="159.7" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.08%)</title><rect x="156.7" y="755.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="159.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.08%)</title><rect x="156.7" y="739.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="159.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (6 samples, 0.47%)</title><rect x="157.6" y="755.0" width="5.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="160.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.16%)</title><rect x="159.5" y="739.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="162.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.08%)</title><rect x="161.3" y="739.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="164.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.08%)</title><rect x="162.2" y="739.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="165.2" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (19 samples, 1.49%)</title><rect x="163.2" y="883.0" width="17.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="166.2" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (19 samples, 1.49%)</title><rect x="163.2" y="867.0" width="17.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="166.2" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (18 samples, 1.41%)</title><rect x="164.1" y="851.0" width="16.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="167.1" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (18 samples, 1.41%)</title><rect x="164.1" y="835.0" width="16.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="167.1" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.23%)</title><rect x="177.9" y="819.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="180.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.23%)</title><rect x="177.9" y="803.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="180.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.23%)</title><rect x="177.9" y="787.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="180.9" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (5 samples, 0.39%)</title><rect x="180.7" y="883.0" width="4.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="183.7" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.39%)</title><rect x="180.7" y="867.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="183.7" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.39%)</title><rect x="180.7" y="851.0" width="4.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="183.7" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.16%)</title><rect x="185.3" y="883.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="188.3" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.16%)</title><rect x="185.3" y="867.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="188.3" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.08%)</title><rect x="186.2" y="851.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="189.2" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.08%)</title><rect x="186.2" y="835.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="189.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.08%)</title><rect x="186.2" y="819.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="189.2" y="830.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.08%)</title><rect x="187.1" y="915.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="190.1" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.08%)</title><rect x="187.1" y="899.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="190.1" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="187.1" y="883.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="190.1" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="187.1" y="867.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="190.1" y="878.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="187.1" y="851.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="190.1" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (2 samples, 0.16%)</title><rect x="188.1" y="915.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="191.1" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (2 samples, 0.16%)</title><rect x="188.1" y="899.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="191.1" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (2 samples, 0.16%)</title><rect x="188.1" y="883.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="191.1" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.08%)</title><rect x="188.1" y="867.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="191.1" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.values (1 samples, 0.08%)</title><rect x="189.0" y="867.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="192.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (6 samples, 0.47%)</title><rect x="189.9" y="915.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="192.9" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (6 samples, 0.47%)</title><rect x="189.9" y="899.0" width="5.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="192.9" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (6 samples, 0.47%)</title><rect x="189.9" y="883.0" width="5.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="192.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (6 samples, 0.47%)</title><rect x="189.9" y="867.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="192.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.08%)</title><rect x="195.4" y="915.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="198.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.08%)</title><rect x="195.4" y="899.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="198.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (74 samples, 5.79%)</title><rect x="196.4" y="931.0" width="68.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="199.4" y="942.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (74 samples, 5.79%)</title><rect x="196.4" y="915.0" width="68.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="199.4" y="926.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (40 samples, 3.13%)</title><rect x="196.4" y="899.0" width="36.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="199.4" y="910.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (40 samples, 3.13%)</title><rect x="196.4" y="883.0" width="36.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="199.4" y="894.0">org..</text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="196.4" y="867.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="199.4" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="196.4" y="851.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="199.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (39 samples, 3.05%)</title><rect x="197.3" y="867.0" width="36.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="200.3" y="878.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (36 samples, 2.81%)</title><rect x="197.3" y="851.0" width="33.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="200.3" y="862.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (36 samples, 2.81%)</title><rect x="197.3" y="835.0" width="33.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="200.3" y="846.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (16 samples, 1.25%)</title><rect x="198.2" y="819.0" width="14.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="201.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (6 samples, 0.47%)</title><rect x="198.2" y="803.0" width="5.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="201.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (6 samples, 0.47%)</title><rect x="198.2" y="787.0" width="5.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="201.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (6 samples, 0.47%)</title><rect x="198.2" y="771.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="201.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (6 samples, 0.47%)</title><rect x="198.2" y="755.0" width="5.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="201.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (6 samples, 0.47%)</title><rect x="198.2" y="739.0" width="5.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="201.2" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (6 samples, 0.47%)</title><rect x="198.2" y="723.0" width="5.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="201.2" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (6 samples, 0.47%)</title><rect x="198.2" y="707.0" width="5.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="201.2" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (10 samples, 0.78%)</title><rect x="203.7" y="803.0" width="9.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="206.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (10 samples, 0.78%)</title><rect x="203.7" y="787.0" width="9.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="206.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.ensureNoneRemaining (10 samples, 0.78%)</title><rect x="203.7" y="771.0" width="9.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="206.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (19 samples, 1.49%)</title><rect x="213.0" y="819.0" width="17.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="216.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (19 samples, 1.49%)</title><rect x="213.0" y="803.0" width="17.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="216.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (9 samples, 0.70%)</title><rect x="213.0" y="787.0" width="8.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="216.0" y="798.0"></text>
</g>
<g>
<title>java/util/Optional.of (9 samples, 0.70%)</title><rect x="213.0" y="771.0" width="8.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="216.0" y="782.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="220.4" y="755.0" width="0.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="223.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (10 samples, 0.78%)</title><rect x="221.3" y="787.0" width="9.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="224.3" y="798.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (10 samples, 0.78%)</title><rect x="221.3" y="771.0" width="9.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="224.3" y="782.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="229.6" y="755.0" width="0.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="232.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.16%)</title><rect x="230.5" y="851.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="233.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.16%)</title><rect x="230.5" y="835.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="233.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.08%)</title><rect x="230.5" y="819.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="233.5" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.08%)</title><rect x="230.5" y="803.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="233.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="231.4" y="819.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="234.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="231.4" y="803.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="234.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.08%)</title><rect x="232.3" y="851.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="235.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.08%)</title><rect x="232.3" y="835.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="235.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="232.3" y="819.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="235.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="232.3" y="803.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="235.3" y="814.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.08%)</title><rect x="232.3" y="787.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="235.3" y="798.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="232.3" y="771.0" width="1.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="235.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (10 samples, 0.78%)</title><rect x="233.3" y="899.0" width="9.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="236.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (8 samples, 0.63%)</title><rect x="233.3" y="883.0" width="7.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="236.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (6 samples, 0.47%)</title><rect x="233.3" y="867.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="236.3" y="878.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.16%)</title><rect x="233.3" y="851.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="236.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$235/2026171539.accept (2 samples, 0.16%)</title><rect x="233.3" y="835.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="236.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (2 samples, 0.16%)</title><rect x="233.3" y="819.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="236.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (2 samples, 0.16%)</title><rect x="233.3" y="803.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="236.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (2 samples, 0.16%)</title><rect x="235.1" y="851.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="238.1" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (2 samples, 0.16%)</title><rect x="235.1" y="835.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="238.1" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.16%)</title><rect x="235.1" y="819.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="238.1" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.16%)</title><rect x="235.1" y="803.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="238.1" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.16%)</title><rect x="235.1" y="787.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="238.1" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.16%)</title><rect x="235.1" y="771.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="238.1" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.16%)</title><rect x="235.1" y="755.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="238.1" y="766.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="235.1" y="739.0" width="0.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="238.1" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="236.0" y="739.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="239.0" y="750.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$246/1153248730.get (1 samples, 0.08%)</title><rect x="236.0" y="723.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="239.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.08%)</title><rect x="237.0" y="851.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="240.0" y="862.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.08%)</title><rect x="237.0" y="835.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="240.0" y="846.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.08%)</title><rect x="237.0" y="819.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="240.0" y="830.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.08%)</title><rect x="237.0" y="803.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="240.0" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.08%)</title><rect x="237.0" y="787.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="240.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.08%)</title><rect x="237.9" y="851.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="240.9" y="862.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.08%)</title><rect x="237.9" y="835.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="240.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.16%)</title><rect x="238.8" y="867.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="241.8" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 0.16%)</title><rect x="238.8" y="851.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="241.8" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.16%)</title><rect x="238.8" y="835.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="241.8" y="846.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.16%)</title><rect x="238.8" y="819.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="241.8" y="830.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.16%)</title><rect x="238.8" y="803.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="241.8" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.16%)</title><rect x="238.8" y="787.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="241.8" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.16%)</title><rect x="238.8" y="771.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="241.8" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (2 samples, 0.16%)</title><rect x="238.8" y="755.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="241.8" y="766.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.08%)</title><rect x="238.8" y="739.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="241.8" y="750.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.estimateSize (1 samples, 0.08%)</title><rect x="238.8" y="723.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="241.8" y="734.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (1 samples, 0.08%)</title><rect x="238.8" y="707.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="241.8" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.08%)</title><rect x="239.7" y="739.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="242.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (2 samples, 0.16%)</title><rect x="240.6" y="883.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="243.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.pollHeartbeat (1 samples, 0.08%)</title><rect x="240.6" y="867.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="243.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsAutoAssigned (1 samples, 0.08%)</title><rect x="241.6" y="867.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="244.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (3 samples, 0.23%)</title><rect x="242.5" y="899.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="245.5" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.16%)</title><rect x="242.5" y="883.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="245.5" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.16%)</title><rect x="242.5" y="867.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="245.5" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.16%)</title><rect x="242.5" y="851.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="245.5" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.16%)</title><rect x="242.5" y="835.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="245.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (1 samples, 0.08%)</title><rect x="244.3" y="883.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="247.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.maybeTriggerWakeup (1 samples, 0.08%)</title><rect x="245.3" y="899.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="248.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (7 samples, 0.55%)</title><rect x="246.2" y="899.0" width="6.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="249.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (5 samples, 0.39%)</title><rect x="246.2" y="883.0" width="4.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="249.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.08%)</title><rect x="246.2" y="867.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="249.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.08%)</title><rect x="246.2" y="851.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="249.2" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.parse (1 samples, 0.08%)</title><rect x="246.2" y="835.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="249.2" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.getOrElse (1 samples, 0.08%)</title><rect x="246.2" y="819.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="249.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.hasField (1 samples, 0.08%)</title><rect x="246.2" y="803.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="249.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.08%)</title><rect x="246.2" y="787.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="249.2" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="246.2" y="771.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="249.2" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="246.2" y="755.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="249.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleTimedOutRequests (1 samples, 0.08%)</title><rect x="247.1" y="867.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="250.1" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.nodesWithTimedOutRequests (1 samples, 0.08%)</title><rect x="247.1" y="851.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="250.1" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.23%)</title><rect x="248.0" y="867.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="251.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.08%)</title><rect x="249.0" y="851.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="252.0" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.08%)</title><rect x="249.0" y="835.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="252.0" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.08%)</title><rect x="249.0" y="819.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="252.0" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="249.0" y="803.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="252.0" y="814.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="249.0" y="787.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="252.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.08%)</title><rect x="249.9" y="851.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="252.9" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.08%)</title><rect x="249.9" y="835.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="252.9" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.08%)</title><rect x="249.9" y="819.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="252.9" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.08%)</title><rect x="249.9" y="803.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="252.9" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.08%)</title><rect x="249.9" y="787.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="252.9" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.08%)</title><rect x="249.9" y="771.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="252.9" y="782.0"></text>
</g>
<g>
<title>__GI_epoll_wait (1 samples, 0.08%)</title><rect x="249.9" y="755.0" width="0.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="252.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.16%)</title><rect x="250.8" y="883.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="253.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (2 samples, 0.16%)</title><rect x="250.8" y="867.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="253.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.16%)</title><rect x="250.8" y="851.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="253.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.16%)</title><rect x="250.8" y="835.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="253.8" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.send (1 samples, 0.08%)</title><rect x="250.8" y="819.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="253.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.setSend (1 samples, 0.08%)</title><rect x="250.8" y="803.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="253.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.addInterestOps (1 samples, 0.08%)</title><rect x="250.8" y="787.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="253.8" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.interestOps (1 samples, 0.08%)</title><rect x="250.8" y="771.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="253.8" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.nioInterestOps (1 samples, 0.08%)</title><rect x="250.8" y="755.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="253.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.08%)</title><rect x="251.7" y="819.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="254.7" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.08%)</title><rect x="251.7" y="803.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="254.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.08%)</title><rect x="251.7" y="787.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="254.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.sizeOf (1 samples, 0.08%)</title><rect x="251.7" y="771.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="254.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.sizeOf (1 samples, 0.08%)</title><rect x="251.7" y="755.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="254.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$10.sizeOf (1 samples, 0.08%)</title><rect x="251.7" y="739.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="254.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8Length (1 samples, 0.08%)</title><rect x="251.7" y="723.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="254.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (12 samples, 0.94%)</title><rect x="252.6" y="899.0" width="11.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="255.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (12 samples, 0.94%)</title><rect x="252.6" y="883.0" width="11.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="255.6" y="894.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.16%)</title><rect x="253.6" y="867.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="256.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$259/274469547.accept (2 samples, 0.16%)</title><rect x="253.6" y="851.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="256.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (2 samples, 0.16%)</title><rect x="253.6" y="835.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="256.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.08%)</title><rect x="253.6" y="819.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="256.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.08%)</title><rect x="253.6" y="803.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="256.6" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="253.6" y="787.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="256.6" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="253.6" y="771.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="256.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.08%)</title><rect x="254.5" y="819.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="257.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.08%)</title><rect x="254.5" y="803.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="257.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.08%)</title><rect x="254.5" y="787.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="257.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$LeaderAndEpoch.equals (1 samples, 0.08%)</title><rect x="254.5" y="771.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="257.5" y="782.0"></text>
</g>
<g>
<title>java/util/Optional.equals (1 samples, 0.08%)</title><rect x="254.5" y="755.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="257.5" y="766.0"></text>
</g>
<g>
<title>java/util/Objects.equals (1 samples, 0.08%)</title><rect x="254.5" y="739.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="257.5" y="750.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.08%)</title><rect x="255.4" y="867.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="258.4" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.08%)</title><rect x="255.4" y="851.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="258.4" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="255.4" y="835.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="258.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (6 samples, 0.47%)</title><rect x="256.3" y="867.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="259.3" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.iterator (1 samples, 0.08%)</title><rect x="257.3" y="851.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="260.3" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.&lt;init&gt; (1 samples, 0.08%)</title><rect x="257.3" y="835.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="260.3" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.advance (1 samples, 0.08%)</title><rect x="257.3" y="819.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="260.3" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.first (1 samples, 0.08%)</title><rect x="257.3" y="803.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="260.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (4 samples, 0.31%)</title><rect x="258.2" y="851.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="261.2" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (4 samples, 0.31%)</title><rect x="258.2" y="835.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="261.2" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.31%)</title><rect x="258.2" y="819.0" width="3.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="261.2" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.23%)</title><rect x="259.1" y="803.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="262.1" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.16%)</title><rect x="260.0" y="787.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="263.0" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.16%)</title><rect x="260.0" y="771.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="263.0" y="782.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (2 samples, 0.16%)</title><rect x="260.0" y="755.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="263.0" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="260.9" y="739.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="263.9" y="750.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="260.9" y="723.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="263.9" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="260.9" y="707.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="263.9" y="718.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="260.9" y="691.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="263.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.selectReadReplica (1 samples, 0.08%)</title><rect x="261.9" y="867.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="264.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.preferredReadReplica (1 samples, 0.08%)</title><rect x="261.9" y="851.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="264.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$1700 (1 samples, 0.08%)</title><rect x="261.9" y="835.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="264.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.preferredReadReplica (1 samples, 0.08%)</title><rect x="261.9" y="819.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="264.9" y="830.0"></text>
</g>
<g>
<title>java/util/Optional.ofNullable (1 samples, 0.08%)</title><rect x="261.9" y="803.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="264.9" y="814.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.08%)</title><rect x="261.9" y="787.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="264.9" y="798.0"></text>
</g>
<g>
<title>java/util/Optional.&lt;init&gt; (1 samples, 0.08%)</title><rect x="261.9" y="771.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="264.9" y="782.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.08%)</title><rect x="261.9" y="755.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="264.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.08%)</title><rect x="262.8" y="867.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="265.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.08%)</title><rect x="263.7" y="899.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="266.7" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="263.7" y="883.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="266.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="263.7" y="867.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="266.7" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="263.7" y="851.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="266.7" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.08%)</title><rect x="263.7" y="835.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="266.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.08%)</title><rect x="263.7" y="819.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="266.7" y="830.0"></text>
</g>
<g>
<title>java/lang/Thread.run (847 samples, 66.22%)</title><rect x="264.6" y="963.0" width="781.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="267.6" y="974.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (847 samples, 66.22%)</title><rect x="264.6" y="947.0" width="781.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="267.6" y="958.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (847 samples, 66.22%)</title><rect x="264.6" y="931.0" width="781.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="267.6" y="942.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$287/2065299251.run (597 samples, 46.68%)</title><rect x="265.6" y="915.0" width="550.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="268.6" y="926.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$287/20..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62 (597 samples, 46.68%)</title><rect x="265.6" y="899.0" width="550.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="268.6" y="910.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (597 samples, 46.68%)</title><rect x="265.6" y="883.0" width="550.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="268.6" y="894.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (595 samples, 46.52%)</title><rect x="265.6" y="867.0" width="548.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="268.6" y="878.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThen..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="274.8" y="851.0" width="0.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="277.8" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.release (1 samples, 0.08%)</title><rect x="275.7" y="851.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="278.7" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (1 samples, 0.08%)</title><rect x="276.6" y="851.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="279.6" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.08%)</title><rect x="276.6" y="835.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="279.6" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="276.6" y="819.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="279.6" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="276.6" y="803.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="279.6" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (38 samples, 2.97%)</title><rect x="277.6" y="851.0" width="35.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="280.6" y="862.0">com..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (38 samples, 2.97%)</title><rect x="277.6" y="835.0" width="35.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="280.6" y="846.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (38 samples, 2.97%)</title><rect x="277.6" y="819.0" width="35.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="280.6" y="830.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (2 samples, 0.16%)</title><rect x="289.5" y="803.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="292.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (23 samples, 1.80%)</title><rect x="291.4" y="803.0" width="21.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="294.4" y="814.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.16%)</title><rect x="291.4" y="787.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="294.4" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.16%)</title><rect x="291.4" y="771.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="294.4" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 0.16%)</title><rect x="291.4" y="755.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="294.4" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$298/2114508352.accept (1 samples, 0.08%)</title><rect x="292.3" y="739.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="295.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (21 samples, 1.64%)</title><rect x="293.2" y="787.0" width="19.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="296.2" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$298/2114508352.accept (21 samples, 1.64%)</title><rect x="293.2" y="771.0" width="19.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="296.2" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (21 samples, 1.64%)</title><rect x="293.2" y="755.0" width="19.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="296.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (21 samples, 1.64%)</title><rect x="293.2" y="739.0" width="19.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="296.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (21 samples, 1.64%)</title><rect x="293.2" y="723.0" width="19.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="296.2" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (21 samples, 1.64%)</title><rect x="293.2" y="707.0" width="19.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="296.2" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (5 samples, 0.39%)</title><rect x="293.2" y="691.0" width="4.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="296.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (5 samples, 0.39%)</title><rect x="293.2" y="675.0" width="4.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="296.2" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$285/1677787800.accept (1 samples, 0.08%)</title><rect x="296.0" y="659.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="299.0" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$284/1006069012.accept (1 samples, 0.08%)</title><rect x="296.9" y="659.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="299.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (16 samples, 1.25%)</title><rect x="297.8" y="691.0" width="14.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="300.8" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (195 samples, 15.25%)</title><rect x="312.6" y="851.0" width="179.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="315.6" y="862.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$44/158199555.extract (195 samples, 15.25%)</title><rect x="312.6" y="835.0" width="179.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="315.6" y="846.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (195 samples, 15.25%)</title><rect x="312.6" y="819.0" width="179.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="315.6" y="830.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="312.6" y="803.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="315.6" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="312.6" y="787.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="315.6" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="312.6" y="771.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="315.6" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="312.6" y="755.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="315.6" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="312.6" y="739.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="315.6" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (194 samples, 15.17%)</title><rect x="313.5" y="803.0" width="179.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="316.5" y="814.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (194 samples, 15.17%)</title><rect x="313.5" y="787.0" width="179.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="316.5" y="798.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (194 samples, 15.17%)</title><rect x="313.5" y="771.0" width="179.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="316.5" y="782.0">com/fasterxml/jackson/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (74 samples, 5.79%)</title><rect x="313.5" y="755.0" width="68.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="316.5" y="766.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (38 samples, 2.97%)</title><rect x="313.5" y="739.0" width="35.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="316.5" y="750.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (36 samples, 2.81%)</title><rect x="313.5" y="723.0" width="33.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="316.5" y="734.0">co..</text>
</g>
<g>
<title>[unknown] (2 samples, 0.16%)</title><rect x="328.3" y="707.0" width="1.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="331.3" y="718.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="328.3" y="691.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="331.3" y="702.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="328.3" y="675.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="331.3" y="686.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="329.2" y="691.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="332.2" y="702.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.16%)</title><rect x="330.1" y="707.0" width="1.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="333.1" y="718.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.55%)</title><rect x="332.0" y="707.0" width="6.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="335.0" y="718.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.55%)</title><rect x="332.0" y="691.0" width="6.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="335.0" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (6 samples, 0.47%)</title><rect x="338.4" y="707.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="341.4" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.47%)</title><rect x="338.4" y="691.0" width="5.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="341.4" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (6 samples, 0.47%)</title><rect x="338.4" y="675.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="341.4" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (6 samples, 0.47%)</title><rect x="338.4" y="659.0" width="5.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="341.4" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (6 samples, 0.47%)</title><rect x="338.4" y="643.0" width="5.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="341.4" y="654.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (3 samples, 0.23%)</title><rect x="344.0" y="707.0" width="2.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="347.0" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.&lt;init&gt; (2 samples, 0.16%)</title><rect x="346.7" y="723.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="349.7" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.16%)</title><rect x="346.7" y="707.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="349.7" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (36 samples, 2.81%)</title><rect x="348.6" y="739.0" width="33.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="351.6" y="750.0">co..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="348.6" y="723.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="351.6" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="348.6" y="707.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="351.6" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="348.6" y="691.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="351.6" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="348.6" y="675.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="351.6" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.&lt;init&gt; (4 samples, 0.31%)</title><rect x="349.5" y="723.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="352.5" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (31 samples, 2.42%)</title><rect x="353.2" y="723.0" width="28.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="356.2" y="734.0">co..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="359.7" y="707.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="362.7" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="359.7" y="691.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="362.7" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="359.7" y="675.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="362.7" y="686.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.08%)</title><rect x="359.7" y="659.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="362.7" y="670.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="360.6" y="707.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="363.6" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="360.6" y="691.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="363.6" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.08%)</title><rect x="361.5" y="707.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="364.5" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.08%)</title><rect x="362.4" y="707.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="365.4" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (6 samples, 0.47%)</title><rect x="363.4" y="707.0" width="5.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="366.4" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (6 samples, 0.47%)</title><rect x="363.4" y="691.0" width="5.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="366.4" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (5 samples, 0.39%)</title><rect x="363.4" y="675.0" width="4.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="366.4" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.08%)</title><rect x="368.0" y="675.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="371.0" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="368.0" y="659.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="371.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (14 samples, 1.09%)</title><rect x="368.9" y="707.0" width="12.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="371.9" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.08%)</title><rect x="380.9" y="691.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="383.9" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="380.9" y="675.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="383.9" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="380.9" y="659.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="383.9" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="380.9" y="643.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="383.9" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="380.9" y="627.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="383.9" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="380.9" y="611.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="383.9" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="380.9" y="595.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="383.9" y="606.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.08%)</title><rect x="380.9" y="579.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="383.9" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.08%)</title><rect x="380.9" y="563.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="383.9" y="574.0"></text>
</g>
<g>
<title>SurvRateGroup::next_age_index() (1 samples, 0.08%)</title><rect x="380.9" y="547.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="383.9" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (112 samples, 8.76%)</title><rect x="381.8" y="755.0" width="103.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="384.8" y="766.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (10 samples, 0.78%)</title><rect x="381.8" y="739.0" width="9.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="384.8" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (10 samples, 0.78%)</title><rect x="381.8" y="723.0" width="9.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="384.8" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (10 samples, 0.78%)</title><rect x="381.8" y="707.0" width="9.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="384.8" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (8 samples, 0.63%)</title><rect x="383.7" y="691.0" width="7.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="386.7" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (19 samples, 1.49%)</title><rect x="391.0" y="739.0" width="17.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="394.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (19 samples, 1.49%)</title><rect x="391.0" y="723.0" width="17.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="394.0" y="734.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="402.1" y="707.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="405.1" y="718.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.23%)</title><rect x="403.0" y="707.0" width="2.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="406.0" y="718.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.23%)</title><rect x="403.0" y="691.0" width="2.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="406.0" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.08%)</title><rect x="405.8" y="707.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="408.8" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (2 samples, 0.16%)</title><rect x="406.7" y="707.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="409.7" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (11 samples, 0.86%)</title><rect x="408.6" y="739.0" width="10.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="411.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 0.47%)</title><rect x="411.3" y="723.0" width="5.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="414.3" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.08%)</title><rect x="411.3" y="707.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="414.3" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (5 samples, 0.39%)</title><rect x="412.3" y="707.0" width="4.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="415.3" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (4 samples, 0.31%)</title><rect x="413.2" y="691.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="416.2" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="415.9" y="675.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="418.9" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="415.9" y="659.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="418.9" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="415.9" y="643.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="418.9" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="415.9" y="627.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="418.9" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="415.9" y="611.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="418.9" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="415.9" y="595.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="418.9" y="606.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.08%)</title><rect x="415.9" y="579.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="418.9" y="590.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.08%)</title><rect x="415.9" y="563.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="418.9" y="574.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.08%)</title><rect x="415.9" y="547.0" width="1.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="418.9" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.16%)</title><rect x="416.9" y="723.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="419.9" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (5 samples, 0.39%)</title><rect x="418.7" y="739.0" width="4.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="421.7" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (5 samples, 0.39%)</title><rect x="418.7" y="723.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="421.7" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (67 samples, 5.24%)</title><rect x="423.3" y="739.0" width="61.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="426.3" y="750.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (1 samples, 0.08%)</title><rect x="423.3" y="723.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="426.3" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (66 samples, 5.16%)</title><rect x="424.2" y="723.0" width="60.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="427.2" y="734.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.isExpectedStartObjectToken (1 samples, 0.08%)</title><rect x="426.1" y="707.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="429.1" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (21 samples, 1.64%)</title><rect x="427.0" y="707.0" width="19.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="430.0" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (8 samples, 0.63%)</title><rect x="430.7" y="691.0" width="7.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="433.7" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (8 samples, 0.63%)</title><rect x="430.7" y="675.0" width="7.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="433.7" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (8 samples, 0.63%)</title><rect x="430.7" y="659.0" width="7.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="433.7" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (8 samples, 0.63%)</title><rect x="430.7" y="643.0" width="7.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="433.7" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (4 samples, 0.31%)</title><rect x="434.4" y="627.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="437.4" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (9 samples, 0.70%)</title><rect x="438.1" y="691.0" width="8.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="441.1" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (5 samples, 0.39%)</title><rect x="438.1" y="675.0" width="4.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="441.1" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (2 samples, 0.16%)</title><rect x="440.9" y="659.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="443.9" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (4 samples, 0.31%)</title><rect x="442.7" y="675.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="445.7" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (4 samples, 0.31%)</title><rect x="442.7" y="659.0" width="3.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="445.7" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (4 samples, 0.31%)</title><rect x="442.7" y="643.0" width="3.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="445.7" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (4 samples, 0.31%)</title><rect x="442.7" y="627.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="445.7" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (2 samples, 0.16%)</title><rect x="446.4" y="707.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="449.4" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (40 samples, 3.13%)</title><rect x="448.2" y="707.0" width="36.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="451.2" y="718.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (40 samples, 3.13%)</title><rect x="448.2" y="691.0" width="36.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="451.2" y="702.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (40 samples, 3.13%)</title><rect x="448.2" y="675.0" width="36.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="451.2" y="686.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (12 samples, 0.94%)</title><rect x="452.8" y="659.0" width="11.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="455.8" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (3 samples, 0.23%)</title><rect x="454.7" y="643.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="457.7" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.31%)</title><rect x="457.5" y="643.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="460.5" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.31%)</title><rect x="457.5" y="627.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="460.5" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.31%)</title><rect x="457.5" y="611.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="460.5" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.16%)</title><rect x="457.5" y="595.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="460.5" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.16%)</title><rect x="459.3" y="595.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="462.3" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.23%)</title><rect x="461.1" y="643.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="464.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.23%)</title><rect x="461.1" y="627.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="464.1" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (11 samples, 0.86%)</title><rect x="463.9" y="659.0" width="10.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="466.9" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (9 samples, 0.70%)</title><rect x="465.8" y="643.0" width="8.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="468.8" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (9 samples, 0.70%)</title><rect x="465.8" y="627.0" width="8.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="468.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (9 samples, 0.70%)</title><rect x="465.8" y="611.0" width="8.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="468.8" y="622.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (9 samples, 0.70%)</title><rect x="465.8" y="595.0" width="8.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="468.8" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.08%)</title><rect x="474.1" y="659.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="477.1" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (4 samples, 0.31%)</title><rect x="475.0" y="659.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="478.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (4 samples, 0.31%)</title><rect x="475.0" y="643.0" width="3.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="478.0" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (4 samples, 0.31%)</title><rect x="475.0" y="627.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="478.0" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (4 samples, 0.31%)</title><rect x="475.0" y="611.0" width="3.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="478.0" y="622.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (4 samples, 0.31%)</title><rect x="475.0" y="595.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="478.0" y="606.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (4 samples, 0.31%)</title><rect x="475.0" y="579.0" width="3.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="478.0" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.08%)</title><rect x="477.8" y="563.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="480.8" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (3 samples, 0.23%)</title><rect x="478.7" y="659.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="481.7" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.23%)</title><rect x="478.7" y="643.0" width="2.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="481.7" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.23%)</title><rect x="478.7" y="627.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="481.7" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (4 samples, 0.31%)</title><rect x="481.4" y="659.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="484.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (3 samples, 0.23%)</title><rect x="482.4" y="643.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="485.4" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="482.4" y="627.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="485.4" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.08%)</title><rect x="482.4" y="611.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="485.4" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.16%)</title><rect x="483.3" y="627.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="486.3" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.16%)</title><rect x="483.3" y="611.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="486.3" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.16%)</title><rect x="483.3" y="595.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="486.3" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.16%)</title><rect x="483.3" y="579.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="486.3" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="483.3" y="563.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="486.3" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="483.3" y="547.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="486.3" y="558.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="483.3" y="531.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="486.3" y="542.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_eden_size() (1 samples, 0.08%)</title><rect x="483.3" y="515.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="486.3" y="526.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="484.2" y="563.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="487.2" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (8 samples, 0.63%)</title><rect x="485.1" y="755.0" width="7.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="488.1" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (8 samples, 0.63%)</title><rect x="485.1" y="739.0" width="7.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="488.1" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (8 samples, 0.63%)</title><rect x="485.1" y="723.0" width="7.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="488.1" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBindings.isEmpty (2 samples, 0.16%)</title><rect x="487.0" y="707.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="490.0" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._findWellKnownSimple (1 samples, 0.08%)</title><rect x="488.8" y="707.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="491.8" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (3 samples, 0.23%)</title><rect x="489.7" y="707.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="492.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.23%)</title><rect x="489.7" y="691.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="492.7" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (346 samples, 27.05%)</title><rect x="492.5" y="851.0" width="319.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="495.5" y="862.0">com/linecorp/decaton/processor/runtime/inte..</text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.23%)</title><rect x="493.4" y="835.0" width="2.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="496.4" y="846.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.23%)</title><rect x="493.4" y="819.0" width="2.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="496.4" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (55 samples, 4.30%)</title><rect x="496.2" y="835.0" width="50.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="499.2" y="846.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (3 samples, 0.23%)</title><rect x="496.2" y="819.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="499.2" y="830.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (52 samples, 4.07%)</title><rect x="499.0" y="819.0" width="48.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="502.0" y="830.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (49 samples, 3.83%)</title><rect x="501.7" y="803.0" width="45.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="504.7" y="814.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (10 samples, 0.78%)</title><rect x="501.7" y="787.0" width="9.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="504.7" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.39%)</title><rect x="502.7" y="771.0" width="4.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="505.7" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 0.31%)</title><rect x="503.6" y="755.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="506.6" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.31%)</title><rect x="503.6" y="739.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="506.6" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.access$400 (1 samples, 0.08%)</title><rect x="506.4" y="723.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="509.4" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 0.31%)</title><rect x="507.3" y="771.0" width="3.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="510.3" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (4 samples, 0.31%)</title><rect x="507.3" y="755.0" width="3.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="510.3" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 0.31%)</title><rect x="507.3" y="739.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="510.3" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.wasLastOpReadOrNull (1 samples, 0.08%)</title><rect x="511.0" y="787.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="514.0" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (13 samples, 1.02%)</title><rect x="511.9" y="787.0" width="12.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="514.9" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.23%)</title><rect x="520.2" y="771.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="523.2" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.23%)</title><rect x="520.2" y="755.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="523.2" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.08%)</title><rect x="523.0" y="771.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="526.0" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (25 samples, 1.95%)</title><rect x="523.9" y="787.0" width="23.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="526.9" y="798.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (6 samples, 0.47%)</title><rect x="537.7" y="771.0" width="5.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="540.7" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.08%)</title><rect x="538.6" y="755.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="541.6" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 0.31%)</title><rect x="539.6" y="755.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="542.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (4 samples, 0.31%)</title><rect x="539.6" y="739.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="542.6" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 0.31%)</title><rect x="543.3" y="771.0" width="3.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="546.3" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.47%)</title><rect x="547.0" y="835.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="550.0" y="846.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (6 samples, 0.47%)</title><rect x="547.0" y="819.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="550.0" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (176 samples, 13.76%)</title><rect x="552.5" y="835.0" width="162.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="555.5" y="846.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (158 samples, 12.35%)</title><rect x="560.8" y="819.0" width="145.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="563.8" y="830.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (46 samples, 3.60%)</title><rect x="572.8" y="803.0" width="42.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="575.8" y="814.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (46 samples, 3.60%)</title><rect x="572.8" y="787.0" width="42.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="575.8" y="798.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (24 samples, 1.88%)</title><rect x="583.9" y="771.0" width="22.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="586.9" y="782.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (19 samples, 1.49%)</title><rect x="584.8" y="755.0" width="17.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="587.8" y="766.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (19 samples, 1.49%)</title><rect x="584.8" y="739.0" width="17.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="587.8" y="750.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (19 samples, 1.49%)</title><rect x="584.8" y="723.0" width="17.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="587.8" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="584.8" y="707.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="587.8" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (16 samples, 1.25%)</title><rect x="585.7" y="707.0" width="14.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="588.7" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (9 samples, 0.70%)</title><rect x="586.6" y="691.0" width="8.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="589.6" y="702.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.08%)</title><rect x="587.5" y="675.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="590.5" y="686.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.16%)</title><rect x="588.5" y="675.0" width="1.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="591.5" y="686.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (2 samples, 0.16%)</title><rect x="588.5" y="659.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="591.5" y="670.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (5 samples, 0.39%)</title><rect x="590.3" y="675.0" width="4.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="593.3" y="686.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (5 samples, 0.39%)</title><rect x="590.3" y="659.0" width="4.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="593.3" y="670.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="590.3" y="643.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="593.3" y="654.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="590.3" y="627.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="593.3" y="638.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (2 samples, 0.16%)</title><rect x="591.2" y="643.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="594.2" y="654.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (2 samples, 0.16%)</title><rect x="593.1" y="643.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="596.1" y="654.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.08%)</title><rect x="594.9" y="691.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="597.9" y="702.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.39%)</title><rect x="595.8" y="691.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="598.8" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (5 samples, 0.39%)</title><rect x="595.8" y="675.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="598.8" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (3 samples, 0.23%)</title><rect x="596.8" y="659.0" width="2.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="599.8" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (3 samples, 0.23%)</title><rect x="596.8" y="643.0" width="2.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="599.8" y="654.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.08%)</title><rect x="596.8" y="627.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="599.8" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.08%)</title><rect x="596.8" y="611.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="599.8" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.08%)</title><rect x="596.8" y="595.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="599.8" y="606.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_eden_size() (1 samples, 0.08%)</title><rect x="597.7" y="627.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="600.7" y="638.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.08%)</title><rect x="598.6" y="627.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="601.6" y="638.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.08%)</title><rect x="599.5" y="659.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="602.5" y="670.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.16%)</title><rect x="600.5" y="707.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="603.5" y="718.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.31%)</title><rect x="602.3" y="755.0" width="3.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="605.3" y="766.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.16%)</title><rect x="606.0" y="771.0" width="1.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="609.0" y="782.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (8 samples, 0.63%)</title><rect x="607.8" y="771.0" width="7.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="610.8" y="782.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (14 samples, 1.09%)</title><rect x="615.2" y="803.0" width="12.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="618.2" y="814.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (7 samples, 0.55%)</title><rect x="615.2" y="787.0" width="6.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="618.2" y="798.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (7 samples, 0.55%)</title><rect x="615.2" y="771.0" width="6.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="618.2" y="782.0"></text>
</g>
<g>
<title>java/lang/Long.toString (7 samples, 0.55%)</title><rect x="621.7" y="787.0" width="6.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="624.7" y="798.0"></text>
</g>
<g>
<title>_new_array_Java (1 samples, 0.08%)</title><rect x="621.7" y="771.0" width="0.9" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="624.7" y="782.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (6 samples, 0.47%)</title><rect x="622.6" y="771.0" width="5.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="625.6" y="782.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.16%)</title><rect x="628.1" y="803.0" width="1.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="631.1" y="814.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="630.0" y="803.0" width="0.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="633.0" y="814.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (82 samples, 6.41%)</title><rect x="630.9" y="803.0" width="75.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="633.9" y="814.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (80 samples, 6.25%)</title><rect x="632.8" y="787.0" width="73.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="635.8" y="798.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 0.23%)</title><rect x="632.8" y="771.0" width="2.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="635.8" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 0.23%)</title><rect x="632.8" y="755.0" width="2.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="635.8" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 0.23%)</title><rect x="632.8" y="739.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="635.8" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 0.23%)</title><rect x="632.8" y="723.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="635.8" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="635.5" y="771.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="638.5" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="635.5" y="755.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="638.5" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="635.5" y="739.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="638.5" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.08%)</title><rect x="635.5" y="723.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="638.5" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="635.5" y="707.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="638.5" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (76 samples, 5.94%)</title><rect x="636.4" y="771.0" width="70.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="639.4" y="782.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.put (67 samples, 5.24%)</title><rect x="644.7" y="755.0" width="61.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="647.7" y="766.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.putVal (34 samples, 2.66%)</title><rect x="675.2" y="739.0" width="31.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="678.2" y="750.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (5 samples, 0.39%)</title><rect x="690.9" y="723.0" width="4.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="693.9" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (12 samples, 0.94%)</title><rect x="695.5" y="723.0" width="11.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="698.5" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="705.6" y="707.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="708.6" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="705.6" y="691.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="708.6" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="705.6" y="675.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="708.6" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="705.6" y="659.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="708.6" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="705.6" y="643.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="708.6" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="705.6" y="627.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="708.6" y="638.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="705.6" y="611.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="708.6" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.08%)</title><rect x="705.6" y="595.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="708.6" y="606.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.08%)</title><rect x="705.6" y="579.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="708.6" y="590.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.08%)</title><rect x="705.6" y="563.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="708.6" y="574.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_bytes_to_copy(HeapRegion*) (1 samples, 0.08%)</title><rect x="705.6" y="547.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="708.6" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (5 samples, 0.39%)</title><rect x="706.6" y="819.0" width="4.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="709.6" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (5 samples, 0.39%)</title><rect x="706.6" y="803.0" width="4.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="709.6" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.39%)</title><rect x="706.6" y="787.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="709.6" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.39%)</title><rect x="706.6" y="771.0" width="4.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="709.6" y="782.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.31%)</title><rect x="711.2" y="819.0" width="3.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="714.2" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (86 samples, 6.72%)</title><rect x="714.9" y="835.0" width="79.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="717.9" y="846.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (85 samples, 6.65%)</title><rect x="715.8" y="819.0" width="78.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="718.8" y="830.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$208/99045767.process (34 samples, 2.66%)</title><rect x="716.7" y="803.0" width="31.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="719.7" y="814.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (33 samples, 2.58%)</title><rect x="716.7" y="787.0" width="30.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="719.7" y="798.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (29 samples, 2.27%)</title><rect x="718.6" y="771.0" width="26.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="721.6" y="782.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (12 samples, 0.94%)</title><rect x="732.4" y="755.0" width="11.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="735.4" y="766.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="734.2" y="739.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="737.2" y="750.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (9 samples, 0.70%)</title><rect x="735.2" y="739.0" width="8.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="738.2" y="750.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.63%)</title><rect x="736.1" y="723.0" width="7.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="739.1" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.08%)</title><rect x="743.5" y="755.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="746.5" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="744.4" y="755.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="747.4" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.16%)</title><rect x="745.3" y="771.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="748.3" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.16%)</title><rect x="745.3" y="755.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="748.3" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.16%)</title><rect x="745.3" y="739.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="748.3" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.16%)</title><rect x="745.3" y="723.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="748.3" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.16%)</title><rect x="745.3" y="707.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="748.3" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.08%)</title><rect x="747.2" y="787.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="750.2" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (2 samples, 0.16%)</title><rect x="748.1" y="803.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="751.1" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="749.0" y="787.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="752.0" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (12 samples, 0.94%)</title><rect x="749.9" y="803.0" width="11.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="752.9" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (8 samples, 0.63%)</title><rect x="752.7" y="787.0" width="7.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="755.7" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (1 samples, 0.08%)</title><rect x="760.1" y="787.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="763.1" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="760.1" y="771.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="763.1" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="760.1" y="755.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="763.1" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="760.1" y="739.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="763.1" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="760.1" y="723.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="763.1" y="734.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.08%)</title><rect x="760.1" y="707.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="763.1" y="718.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.08%)</title><rect x="760.1" y="691.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="763.1" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.23%)</title><rect x="761.0" y="803.0" width="2.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="764.0" y="814.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.23%)</title><rect x="761.0" y="787.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="764.0" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.loggingExceptions (1 samples, 0.08%)</title><rect x="763.8" y="803.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="766.8" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$292/1842458429.get (1 samples, 0.08%)</title><rect x="763.8" y="787.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="766.8" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$75 (1 samples, 0.08%)</title><rect x="763.8" y="771.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="766.8" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/260840925.linkToTargetMethod (3 samples, 0.23%)</title><rect x="764.7" y="803.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="767.7" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/205962452.invokeStatic_L_L (3 samples, 0.23%)</title><rect x="764.7" y="787.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="767.7" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$294/1529199631.get$Lambda (3 samples, 0.23%)</title><rect x="764.7" y="771.0" width="2.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="767.7" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.16%)</title><rect x="767.5" y="803.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="770.5" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (7 samples, 0.55%)</title><rect x="769.3" y="803.0" width="6.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="772.3" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.39%)</title><rect x="771.1" y="787.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="774.1" y="798.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (5 samples, 0.39%)</title><rect x="771.1" y="771.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="774.1" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (4 samples, 0.31%)</title><rect x="775.8" y="803.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="778.8" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (3 samples, 0.23%)</title><rect x="776.7" y="787.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="779.7" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (6 samples, 0.47%)</title><rect x="779.4" y="803.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="782.4" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (5 samples, 0.39%)</title><rect x="780.4" y="787.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="783.4" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="784.1" y="771.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="787.1" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="784.1" y="755.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="787.1" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="784.1" y="739.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="787.1" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="784.1" y="723.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="787.1" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 0.78%)</title><rect x="785.0" y="803.0" width="9.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="788.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 0.78%)</title><rect x="785.0" y="787.0" width="9.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="788.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (10 samples, 0.78%)</title><rect x="785.0" y="771.0" width="9.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="788.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (8 samples, 0.63%)</title><rect x="785.0" y="755.0" width="7.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="788.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (7 samples, 0.55%)</title><rect x="785.0" y="739.0" width="6.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="788.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (7 samples, 0.55%)</title><rect x="785.0" y="723.0" width="6.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="788.0" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$294/1529199631.accept (3 samples, 0.23%)</title><rect x="787.7" y="707.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="790.7" y="718.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="790.5" y="707.0" width="0.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="793.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.08%)</title><rect x="791.4" y="739.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="794.4" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.16%)</title><rect x="792.4" y="755.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="795.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (19 samples, 1.49%)</title><rect x="794.2" y="835.0" width="17.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="797.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (19 samples, 1.49%)</title><rect x="794.2" y="819.0" width="17.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="797.2" y="830.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="797.9" y="803.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="800.9" y="814.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.31%)</title><rect x="798.8" y="803.0" width="3.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="801.8" y="814.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.23%)</title><rect x="799.7" y="787.0" width="2.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="802.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (9 samples, 0.70%)</title><rect x="802.5" y="803.0" width="8.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="805.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.23%)</title><rect x="802.5" y="787.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="805.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (3 samples, 0.23%)</title><rect x="802.5" y="771.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="805.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (3 samples, 0.23%)</title><rect x="802.5" y="755.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="805.5" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$296/804517651.accept (1 samples, 0.08%)</title><rect x="804.4" y="739.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="807.4" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 0.47%)</title><rect x="805.3" y="787.0" width="5.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="808.3" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$296/804517651.accept (6 samples, 0.47%)</title><rect x="805.3" y="771.0" width="5.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="808.3" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$57 (6 samples, 0.47%)</title><rect x="805.3" y="755.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="808.3" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (6 samples, 0.47%)</title><rect x="805.3" y="739.0" width="5.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="808.3" y="750.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (6 samples, 0.47%)</title><rect x="805.3" y="723.0" width="5.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="808.3" y="734.0"></text>
</g>
<g>
<title>java/time/Duration.create (6 samples, 0.47%)</title><rect x="805.3" y="707.0" width="5.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="808.3" y="718.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.23%)</title><rect x="808.0" y="691.0" width="2.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="811.0" y="702.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.23%)</title><rect x="808.0" y="675.0" width="2.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="811.0" y="686.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="810.8" y="803.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="813.8" y="814.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.23%)</title><rect x="811.7" y="851.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="814.7" y="862.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.23%)</title><rect x="811.7" y="835.0" width="2.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="814.7" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (2 samples, 0.16%)</title><rect x="814.5" y="867.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="817.5" y="878.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.16%)</title><rect x="814.5" y="851.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="817.5" y="862.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.16%)</title><rect x="814.5" y="835.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="817.5" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.16%)</title><rect x="814.5" y="819.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="817.5" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.16%)</title><rect x="814.5" y="803.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="817.5" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.16%)</title><rect x="814.5" y="787.0" width="1.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="817.5" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.16%)</title><rect x="814.5" y="771.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="817.5" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="815.4" y="755.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="818.4" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="815.4" y="739.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="818.4" y="750.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.08%)</title><rect x="815.4" y="723.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="818.4" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.08%)</title><rect x="815.4" y="707.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="818.4" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.08%)</title><rect x="815.4" y="691.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="818.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (7 samples, 0.55%)</title><rect x="816.3" y="915.0" width="6.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="819.3" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.55%)</title><rect x="816.3" y="899.0" width="6.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="819.3" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.55%)</title><rect x="816.3" y="883.0" width="6.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="819.3" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.55%)</title><rect x="816.3" y="867.0" width="6.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="819.3" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (2 samples, 0.16%)</title><rect x="821.0" y="851.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="824.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (242 samples, 18.92%)</title><rect x="822.8" y="915.0" width="223.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="825.8" y="926.0">java/util/concurrent/ThreadPo..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (242 samples, 18.92%)</title><rect x="822.8" y="899.0" width="223.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="825.8" y="910.0">java/util/concurrent/LinkedBl..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (199 samples, 15.56%)</title><rect x="859.7" y="883.0" width="183.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="862.7" y="894.0">java/util/concurrent/loc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (19 samples, 1.49%)</title><rect x="867.1" y="867.0" width="17.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="870.1" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (19 samples, 1.49%)</title><rect x="867.1" y="851.0" width="17.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="870.1" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (19 samples, 1.49%)</title><rect x="867.1" y="835.0" width="17.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="870.1" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (19 samples, 1.49%)</title><rect x="867.1" y="819.0" width="17.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="870.1" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (172 samples, 13.45%)</title><rect x="884.6" y="867.0" width="158.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="887.6" y="878.0">java/util/concurrent..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (168 samples, 13.14%)</title><rect x="888.3" y="851.0" width="155.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="891.3" y="862.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (3 samples, 0.23%)</title><rect x="893.8" y="835.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="896.8" y="846.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (3 samples, 0.23%)</title><rect x="896.6" y="835.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="899.6" y="846.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="899.4" y="835.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="902.4" y="846.0"></text>
</g>
<g>
<title>Unsafe_Park (149 samples, 11.65%)</title><rect x="900.3" y="835.0" width="137.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="903.3" y="846.0">Unsafe_Park</text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.08%)</title><rect x="904.0" y="819.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="907.0" y="830.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (28 samples, 2.19%)</title><rect x="904.9" y="819.0" width="25.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="907.9" y="830.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (4 samples, 0.31%)</title><rect x="913.2" y="803.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="916.2" y="814.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.08%)</title><rect x="915.1" y="787.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="918.1" y="798.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.08%)</title><rect x="915.1" y="771.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="918.1" y="782.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="916.0" y="787.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="919.0" y="798.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.16%)</title><rect x="916.9" y="803.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="919.9" y="814.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (13 samples, 1.02%)</title><rect x="918.8" y="803.0" width="12.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="921.8" y="814.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (2 samples, 0.16%)</title><rect x="930.8" y="819.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="933.8" y="830.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.16%)</title><rect x="932.6" y="819.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="935.6" y="830.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.23%)</title><rect x="934.4" y="819.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="937.4" y="830.0"></text>
</g>
<g>
<title>__lll_lock_wait (6 samples, 0.47%)</title><rect x="937.2" y="819.0" width="5.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="940.2" y="830.0"></text>
</g>
<g>
<title>__lll_unlock_wake (22 samples, 1.72%)</title><rect x="942.7" y="819.0" width="20.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="945.7" y="830.0"></text>
</g>
<g>
<title>__pthread_cond_wait (58 samples, 4.53%)</title><rect x="963.0" y="819.0" width="53.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="966.0" y="830.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (7 samples, 0.55%)</title><rect x="1016.6" y="819.0" width="6.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1019.6" y="830.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (4 samples, 0.31%)</title><rect x="1023.0" y="819.0" width="3.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1026.0" y="830.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.23%)</title><rect x="1026.7" y="819.0" width="2.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1029.7" y="830.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.31%)</title><rect x="1029.5" y="819.0" width="3.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1032.5" y="830.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (4 samples, 0.31%)</title><rect x="1033.2" y="819.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1036.2" y="830.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="1036.8" y="819.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1039.8" y="830.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (5 samples, 0.39%)</title><rect x="1037.8" y="835.0" width="4.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1040.8" y="846.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.08%)</title><rect x="1042.4" y="835.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1045.4" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.23%)</title><rect x="1043.3" y="883.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1046.3" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.23%)</title><rect x="1043.3" y="867.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1046.3" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.23%)</title><rect x="1043.3" y="851.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1046.3" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.23%)</title><rect x="1043.3" y="835.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1046.3" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.08%)</title><rect x="1045.2" y="819.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1048.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.08%)</title><rect x="1046.1" y="963.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1049.1" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.08%)</title><rect x="1046.1" y="947.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1049.1" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="1046.1" y="931.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1049.1" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.08%)</title><rect x="1046.1" y="915.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1049.1" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.08%)</title><rect x="1046.1" y="899.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1049.1" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.08%)</title><rect x="1046.1" y="883.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1049.1" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.08%)</title><rect x="1046.1" y="867.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1049.1" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.08%)</title><rect x="1046.1" y="851.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1049.1" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.08%)</title><rect x="1046.1" y="835.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1049.1" y="846.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (1 samples, 0.08%)</title><rect x="1046.1" y="819.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1049.1" y="830.0"></text>
</g>
<g>
<title>start_thread (155 samples, 12.12%)</title><rect x="1047.0" y="963.0" width="143.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1050.0" y="974.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (155 samples, 12.12%)</title><rect x="1047.0" y="947.0" width="143.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1050.0" y="958.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (20 samples, 1.56%)</title><rect x="1047.0" y="931.0" width="18.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1050.0" y="942.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (3 samples, 0.23%)</title><rect x="1047.0" y="915.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1050.0" y="926.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.23%)</title><rect x="1047.0" y="899.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1050.0" y="910.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.23%)</title><rect x="1047.0" y="883.0" width="2.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1050.0" y="894.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (17 samples, 1.33%)</title><rect x="1049.8" y="915.0" width="15.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1052.8" y="926.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.23%)</title><rect x="1050.7" y="899.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1053.7" y="910.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.08%)</title><rect x="1050.7" y="883.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1053.7" y="894.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.08%)</title><rect x="1050.7" y="867.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1053.7" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.08%)</title><rect x="1050.7" y="851.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1053.7" y="862.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.16%)</title><rect x="1051.6" y="883.0" width="1.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1054.6" y="894.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (4 samples, 0.31%)</title><rect x="1053.5" y="899.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1056.5" y="910.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.16%)</title><rect x="1053.5" y="883.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1056.5" y="894.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.08%)</title><rect x="1053.5" y="867.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1056.5" y="878.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.08%)</title><rect x="1053.5" y="851.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1056.5" y="862.0"></text>
</g>
<g>
<title>JNIHandleBlock::oops_do(OopClosure*) (1 samples, 0.08%)</title><rect x="1053.5" y="835.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1056.5" y="846.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="1054.4" y="867.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1057.4" y="878.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="1054.4" y="851.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1057.4" y="862.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="1054.4" y="835.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1057.4" y="846.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.08%)</title><rect x="1054.4" y="819.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1057.4" y="830.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.08%)</title><rect x="1054.4" y="803.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1057.4" y="814.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.08%)</title><rect x="1054.4" y="787.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1057.4" y="798.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.16%)</title><rect x="1055.3" y="883.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1058.3" y="894.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.08%)</title><rect x="1055.3" y="867.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1058.3" y="878.0"></text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.08%)</title><rect x="1056.2" y="867.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1059.2" y="878.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.08%)</title><rect x="1056.2" y="851.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1059.2" y="862.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (9 samples, 0.70%)</title><rect x="1057.1" y="899.0" width="8.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1060.1" y="910.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (9 samples, 0.70%)</title><rect x="1057.1" y="883.0" width="8.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1060.1" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (8 samples, 0.63%)</title><rect x="1057.1" y="867.0" width="7.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1060.1" y="878.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (8 samples, 0.63%)</title><rect x="1057.1" y="851.0" width="7.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1060.1" y="862.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (8 samples, 0.63%)</title><rect x="1057.1" y="835.0" width="7.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1060.1" y="846.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (8 samples, 0.63%)</title><rect x="1057.1" y="819.0" width="7.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1060.1" y="830.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (5 samples, 0.39%)</title><rect x="1059.9" y="803.0" width="4.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1062.9" y="814.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (3 samples, 0.23%)</title><rect x="1060.8" y="787.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1063.8" y="798.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.08%)</title><rect x="1062.7" y="771.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1065.7" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.08%)</title><rect x="1063.6" y="787.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1066.6" y="798.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.08%)</title><rect x="1064.5" y="867.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1067.5" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.08%)</title><rect x="1064.5" y="851.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1067.5" y="862.0"></text>
</g>
<g>
<title>JavaThread::run() (135 samples, 10.56%)</title><rect x="1065.4" y="931.0" width="124.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1068.4" y="942.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (135 samples, 10.56%)</title><rect x="1065.4" y="915.0" width="124.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1068.4" y="926.0">JavaThread::thr..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (135 samples, 10.56%)</title><rect x="1065.4" y="899.0" width="124.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1068.4" y="910.0">CompileBroker::..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (134 samples, 10.48%)</title><rect x="1065.4" y="883.0" width="123.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1068.4" y="894.0">CompileBroker::..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (131 samples, 10.24%)</title><rect x="1066.4" y="867.0" width="120.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1069.4" y="878.0">C2Compiler::com..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (131 samples, 10.24%)</title><rect x="1066.4" y="851.0" width="120.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1069.4" y="862.0">Compile::Compil..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.08%)</title><rect x="1066.4" y="835.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1069.4" y="846.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.08%)</title><rect x="1066.4" y="819.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1069.4" y="830.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1066.4" y="803.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1069.4" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1066.4" y="787.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1069.4" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1066.4" y="771.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1069.4" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1066.4" y="755.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1069.4" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1066.4" y="739.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1069.4" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1066.4" y="723.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1069.4" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.08%)</title><rect x="1066.4" y="707.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1069.4" y="718.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1066.4" y="691.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1069.4" y="702.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1066.4" y="675.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1069.4" y="686.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1066.4" y="659.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1069.4" y="670.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1066.4" y="643.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1069.4" y="654.0"></text>
</g>
<g>
<title>GrowableArray&lt;ciMetadata*&gt;::grow(int) (1 samples, 0.08%)</title><rect x="1066.4" y="627.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1069.4" y="638.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (66 samples, 5.16%)</title><rect x="1067.3" y="835.0" width="60.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1070.3" y="846.0">Compil..</text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.23%)</title><rect x="1067.3" y="819.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1070.3" y="830.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.16%)</title><rect x="1067.3" y="803.0" width="1.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1070.3" y="814.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.08%)</title><rect x="1069.1" y="803.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1072.1" y="814.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.08%)</title><rect x="1069.1" y="787.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1072.1" y="798.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.08%)</title><rect x="1069.1" y="771.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1072.1" y="782.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (4 samples, 0.31%)</title><rect x="1070.1" y="819.0" width="3.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1073.1" y="830.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (3 samples, 0.23%)</title><rect x="1070.1" y="803.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1073.1" y="814.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.08%)</title><rect x="1070.1" y="787.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1073.1" y="798.0"></text>
</g>
<g>
<title>DebugInformationRecorder::add_safepoint(int, OopMap*) (1 samples, 0.08%)</title><rect x="1071.0" y="787.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1074.0" y="798.0"></text>
</g>
<g>
<title>OopMapSet::add_gc_map(int, OopMap*) (1 samples, 0.08%)</title><rect x="1071.0" y="771.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1074.0" y="782.0"></text>
</g>
<g>
<title>DebugInformationRecorder::dump_object_pool(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.08%)</title><rect x="1071.9" y="787.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1074.9" y="798.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.08%)</title><rect x="1071.9" y="771.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1074.9" y="782.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.08%)</title><rect x="1072.8" y="803.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1075.8" y="814.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.08%)</title><rect x="1072.8" y="787.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1075.8" y="798.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 0.47%)</title><rect x="1073.8" y="819.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1076.8" y="830.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (6 samples, 0.47%)</title><rect x="1073.8" y="803.0" width="5.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1076.8" y="814.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.08%)</title><rect x="1073.8" y="787.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1076.8" y="798.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.16%)</title><rect x="1074.7" y="787.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1077.7" y="798.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.08%)</title><rect x="1074.7" y="771.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1077.7" y="782.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.08%)</title><rect x="1074.7" y="755.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1077.7" y="766.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.08%)</title><rect x="1074.7" y="739.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1077.7" y="750.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.08%)</title><rect x="1074.7" y="723.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1077.7" y="734.0"></text>
</g>
<g>
<title>State::_sub_Op_DecodeN(Node const*) (1 samples, 0.08%)</title><rect x="1074.7" y="707.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1077.7" y="718.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.08%)</title><rect x="1075.6" y="771.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1078.6" y="782.0"></text>
</g>
<g>
<title>State::MachOperGenerator(int, Compile*) (1 samples, 0.08%)</title><rect x="1075.6" y="755.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1078.6" y="766.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.08%)</title><rect x="1076.5" y="787.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1079.5" y="798.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1077.4" y="787.0" width="1.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1080.4" y="798.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="1078.4" y="787.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1081.4" y="798.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.08%)</title><rect x="1079.3" y="819.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1082.3" y="830.0"></text>
</g>
<g>
<title>PhaseBlockLayout::merge_traces(bool) (1 samples, 0.08%)</title><rect x="1079.3" y="803.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1082.3" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 0.31%)</title><rect x="1080.2" y="819.0" width="3.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1083.2" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 0.31%)</title><rect x="1080.2" y="803.0" width="3.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1083.2" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1080.2" y="787.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1083.2" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.08%)</title><rect x="1081.1" y="787.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1084.1" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int) (1 samples, 0.08%)</title><rect x="1081.1" y="771.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1084.1" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (2 samples, 0.16%)</title><rect x="1082.1" y="787.0" width="1.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1085.1" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.08%)</title><rect x="1083.0" y="771.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1086.0" y="782.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.08%)</title><rect x="1083.0" y="755.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1086.0" y="766.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.08%)</title><rect x="1083.0" y="739.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1086.0" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (48 samples, 3.75%)</title><rect x="1083.9" y="819.0" width="44.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1086.9" y="830.0">Phas..</text>
</g>
<g>
<title>MachNode::Opcode() const (2 samples, 0.16%)</title><rect x="1083.9" y="803.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1086.9" y="814.0"></text>
</g>
<g>
<title>MachNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1085.7" y="803.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1088.7" y="814.0"></text>
</g>
<g>
<title>MachNode::oper_input_base() const (1 samples, 0.08%)</title><rect x="1086.7" y="803.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1089.7" y="814.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.08%)</title><rect x="1087.6" y="803.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1090.6" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.23%)</title><rect x="1088.5" y="803.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1091.5" y="814.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1090.4" y="787.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1093.4" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (4 samples, 0.31%)</title><rect x="1091.3" y="803.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1094.3" y="814.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1092.2" y="787.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1095.2" y="798.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.16%)</title><rect x="1093.1" y="787.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1096.1" y="798.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.16%)</title><rect x="1093.1" y="771.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1096.1" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 0.47%)</title><rect x="1095.0" y="803.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1098.0" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (10 samples, 0.78%)</title><rect x="1100.5" y="803.0" width="9.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1103.5" y="814.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.08%)</title><rect x="1105.1" y="787.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1108.1" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 0.31%)</title><rect x="1106.0" y="787.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1109.0" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (1 samples, 0.08%)</title><rect x="1109.7" y="803.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1112.7" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (7 samples, 0.55%)</title><rect x="1110.7" y="803.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1113.7" y="814.0"></text>
</g>
<g>
<title>MachNode::operand_index(unsigned int) const (1 samples, 0.08%)</title><rect x="1112.5" y="787.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1115.5" y="798.0"></text>
</g>
<g>
<title>MachProjNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1113.4" y="787.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1116.4" y="798.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.08%)</title><rect x="1114.3" y="787.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1117.3" y="798.0"></text>
</g>
<g>
<title>jmpConNode::oper_input_base() const (1 samples, 0.08%)</title><rect x="1115.3" y="787.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1118.3" y="798.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="1116.2" y="787.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1119.2" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.08%)</title><rect x="1117.1" y="803.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1120.1" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.16%)</title><rect x="1118.0" y="803.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1121.0" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.08%)</title><rect x="1118.0" y="787.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1121.0" y="798.0"></text>
</g>
<g>
<title>rRegLOper::type() const (1 samples, 0.08%)</title><rect x="1119.0" y="787.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1122.0" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.08%)</title><rect x="1119.9" y="803.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1122.9" y="814.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="1119.9" y="787.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1122.9" y="798.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.08%)</title><rect x="1120.8" y="803.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1123.8" y="814.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.08%)</title><rect x="1120.8" y="787.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1123.8" y="798.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (6 samples, 0.47%)</title><rect x="1121.7" y="803.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1124.7" y="814.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.08%)</title><rect x="1125.4" y="787.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1128.4" y="798.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.08%)</title><rect x="1126.3" y="787.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1129.3" y="798.0"></text>
</g>
<g>
<title>loadNNode::out_RegMask() const (1 samples, 0.08%)</title><rect x="1127.3" y="803.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1130.3" y="814.0"></text>
</g>
<g>
<title>Compile::Optimize() (53 samples, 4.14%)</title><rect x="1128.2" y="835.0" width="48.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.2" y="846.0">Comp..</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.08%)</title><rect x="1128.2" y="819.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1131.2" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.08%)</title><rect x="1129.1" y="819.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1132.1" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.08%)</title><rect x="1129.1" y="803.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1132.1" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1129.1" y="787.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1132.1" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_non_escaped_objects(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1129.1" y="771.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1132.1" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (29 samples, 2.27%)</title><rect x="1130.0" y="819.0" width="26.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1133.0" y="830.0">P..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1130.0" y="803.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1133.0" y="814.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1130.0" y="787.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1133.0" y="798.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1130.0" y="771.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1133.0" y="782.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1130.0" y="755.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1133.0" y="766.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1130.0" y="739.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1133.0" y="750.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1130.0" y="723.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1133.0" y="734.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1130.0" y="707.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1133.0" y="718.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1130.0" y="691.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1133.0" y="702.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1130.0" y="675.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1133.0" y="686.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1130.0" y="659.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1133.0" y="670.0"></text>
</g>
<g>
<title>IdealLoopTree::adjust_loop_exit_prob(PhaseIdealLoop*) (1 samples, 0.08%)</title><rect x="1130.0" y="643.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1133.0" y="654.0"></text>
</g>
<g>
<title>MultiNode::proj_out(unsigned int) const (1 samples, 0.08%)</title><rect x="1130.0" y="627.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1133.0" y="638.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.08%)</title><rect x="1131.0" y="803.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1134.0" y="814.0"></text>
</g>
<g>
<title>Node::pinned() const (2 samples, 0.16%)</title><rect x="1131.9" y="803.0" width="1.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1134.9" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.23%)</title><rect x="1133.7" y="803.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1136.7" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.16%)</title><rect x="1136.5" y="803.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1139.5" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.08%)</title><rect x="1137.4" y="787.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1140.4" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (17 samples, 1.33%)</title><rect x="1138.3" y="803.0" width="15.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1141.3" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (14 samples, 1.09%)</title><rect x="1141.1" y="787.0" width="12.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1144.1" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (14 samples, 1.09%)</title><rect x="1141.1" y="771.0" width="12.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1144.1" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.16%)</title><rect x="1152.2" y="755.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1155.2" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.08%)</title><rect x="1154.0" y="803.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1157.0" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.08%)</title><rect x="1154.9" y="803.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.9" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.08%)</title><rect x="1154.9" y="787.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1157.9" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.08%)</title><rect x="1155.9" y="803.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1158.9" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.08%)</title><rect x="1155.9" y="787.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1158.9" y="798.0"></text>
</g>
<g>
<title>ConvI2LNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1155.9" y="771.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.9" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (14 samples, 1.09%)</title><rect x="1156.8" y="819.0" width="12.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.8" y="830.0"></text>
</g>
<g>
<title>MemBarNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1156.8" y="803.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.8" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (13 samples, 1.02%)</title><rect x="1157.7" y="803.0" width="12.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.7" y="814.0"></text>
</g>
<g>
<title>BoolNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1158.6" y="787.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.6" y="798.0"></text>
</g>
<g>
<title>CmpPNode::Opcode() const (1 samples, 0.08%)</title><rect x="1159.6" y="787.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.6" y="798.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1160.5" y="787.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.5" y="798.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1160.5" y="771.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.5" y="782.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1161.4" y="787.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.4" y="798.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1161.4" y="771.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.4" y="782.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.08%)</title><rect x="1161.4" y="755.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.4" y="766.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1161.4" y="739.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.4" y="750.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1161.4" y="723.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.4" y="734.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1161.4" y="707.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.4" y="718.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.08%)</title><rect x="1161.4" y="691.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.4" y="702.0"></text>
</g>
<g>
<title>MemBarNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1162.3" y="787.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.3" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1163.2" y="787.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.2" y="798.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.08%)</title><rect x="1163.2" y="771.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.2" y="782.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.08%)</title><rect x="1163.2" y="755.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1166.2" y="766.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1164.2" y="787.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1167.2" y="798.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (3 samples, 0.23%)</title><rect x="1165.1" y="787.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.1" y="798.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (3 samples, 0.23%)</title><rect x="1165.1" y="771.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1168.1" y="782.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1167.9" y="787.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.9" y="798.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.08%)</title><rect x="1167.9" y="771.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.9" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1167.9" y="755.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.9" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1167.9" y="739.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.9" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1167.9" y="723.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.9" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1167.9" y="707.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.9" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1167.9" y="691.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.9" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1167.9" y="675.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.9" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1167.9" y="659.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.9" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1167.9" y="643.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.9" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1167.9" y="627.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.9" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1167.9" y="611.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.9" y="622.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1167.9" y="595.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.9" y="606.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1167.9" y="579.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.9" y="590.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1167.9" y="563.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.9" y="574.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1167.9" y="547.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.9" y="558.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1167.9" y="531.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.9" y="542.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1167.9" y="515.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.9" y="526.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1167.9" y="499.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.9" y="510.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1167.9" y="483.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.9" y="494.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1167.9" y="467.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.9" y="478.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1167.9" y="451.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.9" y="462.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1167.9" y="435.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.9" y="446.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1167.9" y="419.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.9" y="430.0"></text>
</g>
<g>
<title>StoreNode::Identity(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1168.8" y="787.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.8" y="798.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (4 samples, 0.31%)</title><rect x="1169.7" y="819.0" width="3.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.7" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.16%)</title><rect x="1169.7" y="803.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.7" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.16%)</title><rect x="1169.7" y="787.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.7" y="798.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1169.7" y="771.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.7" y="782.0"></text>
</g>
<g>
<title>ProjNode::hash() const (1 samples, 0.08%)</title><rect x="1170.6" y="771.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.6" y="782.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.08%)</title><rect x="1171.5" y="803.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.5" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1171.5" y="787.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.5" y="798.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.08%)</title><rect x="1171.5" y="771.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.5" y="782.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_unlock_node(UnlockNode*) (1 samples, 0.08%)</title><rect x="1172.5" y="803.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.5" y="814.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1173.4" y="819.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.4" y="830.0"></text>
</g>
<g>
<title>RegionNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1174.3" y="819.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.3" y="830.0"></text>
</g>
<g>
<title>StoreNNode::Opcode() const (1 samples, 0.08%)</title><rect x="1175.2" y="819.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.2" y="830.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1176.2" y="819.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1179.2" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.78%)</title><rect x="1177.1" y="835.0" width="9.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.1" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.78%)</title><rect x="1177.1" y="819.0" width="9.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.1" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.78%)</title><rect x="1177.1" y="803.0" width="9.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.1" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.78%)</title><rect x="1177.1" y="787.0" width="9.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.1" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 0.78%)</title><rect x="1177.1" y="771.0" width="9.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.1" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.78%)</title><rect x="1177.1" y="755.0" width="9.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.1" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.63%)</title><rect x="1177.1" y="739.0" width="7.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.1" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.63%)</title><rect x="1177.1" y="723.0" width="7.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.55%)</title><rect x="1177.1" y="707.0" width="6.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.55%)</title><rect x="1177.1" y="691.0" width="6.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.55%)</title><rect x="1177.1" y="675.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.1" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.39%)</title><rect x="1177.1" y="659.0" width="4.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.1" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.39%)</title><rect x="1177.1" y="643.0" width="4.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.1" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.39%)</title><rect x="1177.1" y="627.0" width="4.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.39%)</title><rect x="1177.1" y="611.0" width="4.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.39%)</title><rect x="1177.1" y="595.0" width="4.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.39%)</title><rect x="1177.1" y="579.0" width="4.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.31%)</title><rect x="1177.1" y="563.0" width="3.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.1" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.31%)</title><rect x="1177.1" y="547.0" width="3.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.1" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.31%)</title><rect x="1177.1" y="531.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.31%)</title><rect x="1177.1" y="515.0" width="3.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.31%)</title><rect x="1177.1" y="499.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.31%)</title><rect x="1177.1" y="483.0" width="3.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.23%)</title><rect x="1177.1" y="467.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.1" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.23%)</title><rect x="1177.1" y="451.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.1" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.23%)</title><rect x="1177.1" y="435.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1177.1" y="419.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1177.1" y="403.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1177.1" y="387.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1177.1" y="371.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.1" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1177.1" y="355.0" width="1.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.1" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1177.1" y="339.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1177.1" y="323.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1177.1" y="307.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1177.1" y="291.0" width="1.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1177.1" y="275.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.1" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.1" y="259.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.1" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1177.1" y="243.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1177.1" y="227.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1177.1" y="211.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.1" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1177.1" y="195.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.1" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1177.1" y="179.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.1" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.1" y="163.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.1" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1177.1" y="147.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.1" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1177.1" y="131.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.1" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1177.1" y="115.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.1" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1177.1" y="99.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.1" y="110.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1177.1" y="83.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.1" y="94.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.1" y="67.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.1" y="78.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1177.1" y="51.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.1" y="62.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.08%)</title><rect x="1177.1" y="35.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.1" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1178.0" y="275.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.0" y="286.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1178.0" y="259.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.0" y="270.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.08%)</title><rect x="1178.0" y="243.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.0" y="254.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1178.0" y="227.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.0" y="238.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1178.0" y="211.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.0" y="222.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.08%)</title><rect x="1178.0" y="195.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.0" y="206.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1178.0" y="179.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.0" y="190.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1178.0" y="163.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.0" y="174.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1178.0" y="147.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.0" y="158.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1178.0" y="131.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.0" y="142.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1178.0" y="115.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.0" y="126.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1178.0" y="99.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.0" y="110.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1178.0" y="83.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.0" y="94.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1178.0" y="67.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.0" y="78.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.08%)</title><rect x="1178.9" y="419.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.08%)</title><rect x="1179.9" y="467.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.9" y="478.0"></text>
</g>
<g>
<title>Parse::sharpen_type_after_if(BoolTest::mask, Node*, Type const*, Node*, Type const*) (1 samples, 0.08%)</title><rect x="1179.9" y="451.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.9" y="462.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1179.9" y="435.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.9" y="446.0"></text>
</g>
<g>
<title>TypeInstPtr::remove_speculative() const (1 samples, 0.08%)</title><rect x="1179.9" y="419.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.9" y="430.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1179.9" y="403.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.9" y="414.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.08%)</title><rect x="1179.9" y="387.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.08%)</title><rect x="1180.8" y="563.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.8" y="574.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.08%)</title><rect x="1180.8" y="547.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.8" y="558.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.08%)</title><rect x="1180.8" y="531.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.8" y="542.0"></text>
</g>
<g>
<title>ConINode::Opcode() const (1 samples, 0.08%)</title><rect x="1180.8" y="515.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1181.7" y="659.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1181.7" y="643.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.7" y="654.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.08%)</title><rect x="1181.7" y="627.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.7" y="638.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.08%)</title><rect x="1181.7" y="611.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.7" y="622.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1181.7" y="595.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.7" y="606.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1181.7" y="579.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.7" y="590.0"></text>
</g>
<g>
<title>AddPNode::Ideal_base_and_offset(Node*, PhaseTransform*, long&amp;) (1 samples, 0.08%)</title><rect x="1181.7" y="563.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.08%)</title><rect x="1182.6" y="659.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.6" y="670.0"></text>
</g>
<g>
<title>TypeTuple::singleton() const (1 samples, 0.08%)</title><rect x="1182.6" y="643.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.6" y="654.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.08%)</title><rect x="1183.5" y="707.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.5" y="718.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1183.5" y="691.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.5" y="702.0"></text>
</g>
<g>
<title>ciMethodData::ciMethodData(MethodData*) (1 samples, 0.08%)</title><rect x="1183.5" y="675.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.5" y="686.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1184.5" y="739.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.5" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1184.5" y="723.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.5" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1184.5" y="707.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.5" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1184.5" y="691.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1184.5" y="675.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.5" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1184.5" y="659.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.5" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1184.5" y="643.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.5" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.5" y="627.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.5" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1184.5" y="611.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1184.5" y="595.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1184.5" y="579.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1184.5" y="563.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1184.5" y="547.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.5" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.5" y="531.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.5" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1184.5" y="515.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1184.5" y="499.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1184.5" y="483.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1184.5" y="467.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1184.5" y="451.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.5" y="462.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1184.5" y="435.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.5" y="446.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1184.5" y="419.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.5" y="430.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1184.5" y="403.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.5" y="414.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1184.5" y="387.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.5" y="398.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.08%)</title><rect x="1184.5" y="371.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.5" y="382.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.08%)</title><rect x="1184.5" y="355.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.5" y="366.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle, Thread*) (1 samples, 0.08%)</title><rect x="1184.5" y="339.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.5" y="350.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol_or_null() (1 samples, 0.08%)</title><rect x="1184.5" y="323.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.5" y="334.0"></text>
</g>
<g>
<title>SymbolTable::lookup_only(char const*, int, unsigned int&amp;) (1 samples, 0.08%)</title><rect x="1184.5" y="307.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.5" y="318.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.08%)</title><rect x="1185.4" y="691.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.4" y="702.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.08%)</title><rect x="1185.4" y="675.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.4" y="686.0"></text>
</g>
<g>
<title>ciCallTypeData::translate_from(ProfileData const*) (1 samples, 0.08%)</title><rect x="1185.4" y="659.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.4" y="670.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1185.4" y="643.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.4" y="654.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1185.4" y="627.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.4" y="638.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.08%)</title><rect x="1185.4" y="611.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.4" y="622.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.08%)</title><rect x="1186.3" y="835.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.3" y="846.0"></text>
</g>
<g>
<title>Node::rm_prec(unsigned int) (1 samples, 0.08%)</title><rect x="1186.3" y="819.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.3" y="830.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.16%)</title><rect x="1187.2" y="867.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.2" y="878.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.16%)</title><rect x="1187.2" y="851.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.2" y="862.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.16%)</title><rect x="1187.2" y="835.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.2" y="846.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.16%)</title><rect x="1187.2" y="819.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.2" y="830.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.08%)</title><rect x="1187.2" y="803.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.2" y="814.0"></text>
</g>
<g>
<title>GlobalValueNumbering::GlobalValueNumbering(IR*) (1 samples, 0.08%)</title><rect x="1187.2" y="787.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.2" y="798.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.08%)</title><rect x="1188.2" y="803.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.2" y="814.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.08%)</title><rect x="1188.2" y="787.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.2" y="798.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_call(LIR_OpJavaCall*) (1 samples, 0.08%)</title><rect x="1188.2" y="771.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.2" y="782.0"></text>
</g>
<g>
<title>LIR_Assembler::call(LIR_OpJavaCall*, relocInfo::relocType) (1 samples, 0.08%)</title><rect x="1188.2" y="755.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.2" y="766.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.08%)</title><rect x="1189.1" y="883.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1192.1" y="894.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.08%)</title><rect x="1189.1" y="867.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1192.1" y="878.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.08%)</title><rect x="1189.1" y="851.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1192.1" y="862.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.08%)</title><rect x="1189.1" y="835.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.1" y="846.0"></text>
</g>
<g>
<title>NMethodSweeper::release_nmethod(nmethod*) (1 samples, 0.08%)</title><rect x="1189.1" y="819.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.1" y="830.0"></text>
</g>
<g>
<title>CodeHeap::deallocate(void*) (1 samples, 0.08%)</title><rect x="1189.1" y="803.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1192.1" y="814.0"></text>
</g>
</g>
</svg>
