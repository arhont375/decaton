<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="597"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="597"> </text>
<g id="frames">
<g>
<title>all (305 samples, 100.00%)</title><rect x="10.0" y="563.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="574.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (27 samples, 8.85%)</title><rect x="10.0" y="547.0" width="104.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="558.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.33%)</title><rect x="10.0" y="531.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (1 samples, 0.33%)</title><rect x="10.0" y="515.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.33%)</title><rect x="10.0" y="499.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.33%)</title><rect x="10.0" y="483.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (26 samples, 8.52%)</title><rect x="13.9" y="531.0" width="100.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.9" y="542.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (2 samples, 0.66%)</title><rect x="13.9" y="515.0" width="7.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.9" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (2 samples, 0.66%)</title><rect x="13.9" y="499.0" width="7.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.9" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.33%)</title><rect x="17.7" y="483.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="20.7" y="494.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.33%)</title><rect x="17.7" y="467.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="20.7" y="478.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.33%)</title><rect x="17.7" y="451.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.7" y="462.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.33%)</title><rect x="17.7" y="435.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.7" y="446.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.33%)</title><rect x="17.7" y="419.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.7" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.33%)</title><rect x="17.7" y="403.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="20.7" y="414.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.33%)</title><rect x="17.7" y="387.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.7" y="398.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.33%)</title><rect x="17.7" y="371.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.7" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$276/1557383517.test (1 samples, 0.33%)</title><rect x="17.7" y="355.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="20.7" y="366.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (2 samples, 0.66%)</title><rect x="21.6" y="515.0" width="7.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.6" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (2 samples, 0.66%)</title><rect x="21.6" y="499.0" width="7.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="24.6" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 0.66%)</title><rect x="21.6" y="483.0" width="7.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="24.6" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$272/1029624210.accept (2 samples, 0.66%)</title><rect x="21.6" y="467.0" width="7.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="24.6" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (2 samples, 0.66%)</title><rect x="21.6" y="451.0" width="7.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.6" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.66%)</title><rect x="21.6" y="435.0" width="7.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="24.6" y="446.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.66%)</title><rect x="21.6" y="419.0" width="7.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.6" y="430.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (11 samples, 3.61%)</title><rect x="29.3" y="515.0" width="42.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="32.3" y="526.0">java..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$271/1676727645.accept (10 samples, 3.28%)</title><rect x="29.3" y="499.0" width="38.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="32.3" y="510.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (10 samples, 3.28%)</title><rect x="29.3" y="483.0" width="38.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="32.3" y="494.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/BlacklistedKeysFilter.shouldTake (1 samples, 0.33%)</title><rect x="29.3" y="467.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="32.3" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (5 samples, 1.64%)</title><rect x="33.2" y="467.0" width="19.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="36.2" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (5 samples, 1.64%)</title><rect x="33.2" y="451.0" width="19.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="36.2" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (5 samples, 1.64%)</title><rect x="33.2" y="435.0" width="19.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="36.2" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (5 samples, 1.64%)</title><rect x="33.2" y="419.0" width="19.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="36.2" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (5 samples, 1.64%)</title><rect x="33.2" y="403.0" width="19.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="36.2" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (5 samples, 1.64%)</title><rect x="33.2" y="387.0" width="19.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="36.2" y="398.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.33%)</title><rect x="48.7" y="371.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="51.7" y="382.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.33%)</title><rect x="48.7" y="355.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="51.7" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.33%)</title><rect x="48.7" y="339.0" width="3.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="51.7" y="350.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::write_region_work(MemRegion) (1 samples, 0.33%)</title><rect x="48.7" y="323.0" width="3.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="51.7" y="334.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::invalidate(MemRegion, bool) (1 samples, 0.33%)</title><rect x="48.7" y="307.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="51.7" y="318.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.33%)</title><rect x="48.7" y="291.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="51.7" y="302.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (1 samples, 0.33%)</title><rect x="52.6" y="467.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="55.6" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.33%)</title><rect x="52.6" y="451.0" width="3.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="55.6" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (1 samples, 0.33%)</title><rect x="56.4" y="467.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="59.4" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.33%)</title><rect x="56.4" y="451.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="59.4" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.33%)</title><rect x="56.4" y="435.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="59.4" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.66%)</title><rect x="60.3" y="467.0" width="7.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="63.3" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.66%)</title><rect x="60.3" y="451.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="63.3" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.66%)</title><rect x="60.3" y="435.0" width="7.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="63.3" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.66%)</title><rect x="60.3" y="419.0" width="7.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="63.3" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.66%)</title><rect x="60.3" y="403.0" width="7.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="63.3" y="414.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.33%)</title><rect x="68.0" y="499.0" width="3.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="71.0" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 3.61%)</title><rect x="71.9" y="515.0" width="42.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="74.9" y="526.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 3.61%)</title><rect x="71.9" y="499.0" width="42.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="74.9" y="510.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (8 samples, 2.62%)</title><rect x="71.9" y="483.0" width="31.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="74.9" y="494.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.66%)</title><rect x="71.9" y="467.0" width="7.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="74.9" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.66%)</title><rect x="71.9" y="451.0" width="7.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="74.9" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.66%)</title><rect x="71.9" y="435.0" width="7.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="74.9" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.66%)</title><rect x="71.9" y="419.0" width="7.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="74.9" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.33%)</title><rect x="71.9" y="403.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="74.9" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.33%)</title><rect x="75.8" y="403.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="78.8" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.33%)</title><rect x="75.8" y="387.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="78.8" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.33%)</title><rect x="75.8" y="371.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="78.8" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.33%)</title><rect x="75.8" y="355.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="78.8" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.33%)</title><rect x="75.8" y="339.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="78.8" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.updateRegistrations (1 samples, 0.33%)</title><rect x="75.8" y="323.0" width="3.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="78.8" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (6 samples, 1.97%)</title><rect x="79.6" y="467.0" width="23.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="82.6" y="478.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (6 samples, 1.97%)</title><rect x="79.6" y="451.0" width="23.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="82.6" y="462.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (4 samples, 1.31%)</title><rect x="79.6" y="435.0" width="15.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="82.6" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 1.31%)</title><rect x="79.6" y="419.0" width="15.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="82.6" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.33%)</title><rect x="79.6" y="403.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="82.6" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (3 samples, 0.98%)</title><rect x="83.5" y="403.0" width="11.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="86.5" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 0.66%)</title><rect x="87.4" y="387.0" width="7.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="90.4" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.33%)</title><rect x="87.4" y="371.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="90.4" y="382.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.33%)</title><rect x="87.4" y="355.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="90.4" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.33%)</title><rect x="91.2" y="371.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="94.2" y="382.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.33%)</title><rect x="91.2" y="355.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="94.2" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.33%)</title><rect x="95.1" y="435.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="98.1" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.33%)</title><rect x="95.1" y="419.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="98.1" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.33%)</title><rect x="95.1" y="403.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="98.1" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.33%)</title><rect x="95.1" y="387.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="98.1" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.33%)</title><rect x="95.1" y="371.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="98.1" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.33%)</title><rect x="95.1" y="355.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="98.1" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isAssigned (1 samples, 0.33%)</title><rect x="99.0" y="435.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="102.0" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.contains (1 samples, 0.33%)</title><rect x="99.0" y="419.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="102.0" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.33%)</title><rect x="99.0" y="403.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="102.0" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.33%)</title><rect x="99.0" y="387.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="102.0" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.66%)</title><rect x="102.9" y="483.0" width="7.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="105.9" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.33%)</title><rect x="102.9" y="467.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="105.9" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.33%)</title><rect x="102.9" y="451.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="105.9" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.33%)</title><rect x="102.9" y="435.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="105.9" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.33%)</title><rect x="106.7" y="467.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="109.7" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.33%)</title><rect x="106.7" y="451.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="109.7" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsAutoAssigned (1 samples, 0.33%)</title><rect x="106.7" y="435.0" width="3.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="109.7" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.33%)</title><rect x="110.6" y="483.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="113.6" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.33%)</title><rect x="110.6" y="467.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="113.6" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.33%)</title><rect x="110.6" y="451.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="113.6" y="462.0"></text>
</g>
<g>
<title>java/lang/Thread.run (242 samples, 79.34%)</title><rect x="114.5" y="547.0" width="936.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="117.5" y="558.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (242 samples, 79.34%)</title><rect x="114.5" y="531.0" width="936.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="117.5" y="542.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (242 samples, 79.34%)</title><rect x="114.5" y="515.0" width="936.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="117.5" y="526.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$287/394748295.run (221 samples, 72.46%)</title><rect x="114.5" y="499.0" width="855.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="117.5" y="510.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$287/394748295.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62 (221 samples, 72.46%)</title><rect x="114.5" y="483.0" width="855.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="117.5" y="494.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (221 samples, 72.46%)</title><rect x="114.5" y="467.0" width="855.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="117.5" y="478.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.33%)</title><rect x="114.5" y="451.0" width="3.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="117.5" y="462.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.33%)</title><rect x="114.5" y="435.0" width="3.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="117.5" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (219 samples, 71.80%)</title><rect x="118.3" y="451.0" width="847.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="121.3" y="462.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (1 samples, 0.33%)</title><rect x="129.9" y="435.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="132.9" y="446.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.33%)</title><rect x="129.9" y="419.0" width="3.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="132.9" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.33%)</title><rect x="129.9" y="403.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="132.9" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.33%)</title><rect x="129.9" y="387.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="132.9" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (16 samples, 5.25%)</title><rect x="133.8" y="435.0" width="61.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="136.8" y="446.0">com/li..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 2.62%)</title><rect x="164.8" y="419.0" width="30.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="167.8" y="430.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 2.62%)</title><rect x="164.8" y="403.0" width="30.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="167.8" y="414.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (8 samples, 2.62%)</title><rect x="164.8" y="387.0" width="30.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="167.8" y="398.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.33%)</title><rect x="164.8" y="371.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="167.8" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.33%)</title><rect x="164.8" y="355.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="167.8" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.33%)</title><rect x="164.8" y="339.0" width="3.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="167.8" y="350.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$303/1326617958.accept (1 samples, 0.33%)</title><rect x="164.8" y="323.0" width="3.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="167.8" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 2.30%)</title><rect x="168.6" y="371.0" width="27.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="171.6" y="382.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$303/1326617958.accept (7 samples, 2.30%)</title><rect x="168.6" y="355.0" width="27.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="171.6" y="366.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (7 samples, 2.30%)</title><rect x="168.6" y="339.0" width="27.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="171.6" y="350.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (7 samples, 2.30%)</title><rect x="168.6" y="323.0" width="27.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="171.6" y="334.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (7 samples, 2.30%)</title><rect x="168.6" y="307.0" width="27.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="171.6" y="318.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (7 samples, 2.30%)</title><rect x="168.6" y="291.0" width="27.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="171.6" y="302.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.66%)</title><rect x="168.6" y="275.0" width="7.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="171.6" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 0.66%)</title><rect x="168.6" y="259.0" width="7.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="171.6" y="270.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$285/1009161637.accept (2 samples, 0.66%)</title><rect x="168.6" y="243.0" width="7.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="171.6" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 1.64%)</title><rect x="176.4" y="275.0" width="19.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="179.4" y="286.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ExecutionScheduler.schedule (1 samples, 0.33%)</title><rect x="195.7" y="435.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="198.7" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ExecutionScheduler.waitOnScheduledTime (1 samples, 0.33%)</title><rect x="195.7" y="419.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="198.7" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ExecutionScheduler$$Lambda$202/849299303.get (1 samples, 0.33%)</title><rect x="195.7" y="403.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="198.7" y="414.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.33%)</title><rect x="195.7" y="387.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="198.7" y="398.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.33%)</title><rect x="195.7" y="371.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="198.7" y="382.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.33%)</title><rect x="195.7" y="355.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="198.7" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.33%)</title><rect x="195.7" y="339.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="198.7" y="350.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (34 samples, 11.15%)</title><rect x="199.6" y="435.0" width="131.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="202.6" y="446.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$44/158199555.extract (34 samples, 11.15%)</title><rect x="199.6" y="419.0" width="131.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="202.6" y="430.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (34 samples, 11.15%)</title><rect x="199.6" y="403.0" width="131.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="202.6" y="414.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (34 samples, 11.15%)</title><rect x="199.6" y="387.0" width="131.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="202.6" y="398.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (34 samples, 11.15%)</title><rect x="199.6" y="371.0" width="131.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="202.6" y="382.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (34 samples, 11.15%)</title><rect x="199.6" y="355.0" width="131.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="202.6" y="366.0">com/fasterxml/ja..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (18 samples, 5.90%)</title><rect x="199.6" y="339.0" width="69.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="202.6" y="350.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 1.31%)</title><rect x="199.6" y="323.0" width="15.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="202.6" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (4 samples, 1.31%)</title><rect x="199.6" y="307.0" width="15.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="202.6" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (2 samples, 0.66%)</title><rect x="199.6" y="291.0" width="7.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="202.6" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.66%)</title><rect x="207.3" y="291.0" width="7.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="210.3" y="302.0"></text>
</g>
<g>
<title>java/lang/ref/SoftReference.get (1 samples, 0.33%)</title><rect x="211.2" y="275.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="214.2" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (14 samples, 4.59%)</title><rect x="215.0" y="323.0" width="54.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="218.0" y="334.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (14 samples, 4.59%)</title><rect x="215.0" y="307.0" width="54.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="218.0" y="318.0">com/f..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.33%)</title><rect x="215.0" y="291.0" width="3.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="218.0" y="302.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.33%)</title><rect x="215.0" y="275.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="218.0" y="286.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.33%)</title><rect x="215.0" y="259.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="218.0" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.33%)</title><rect x="218.9" y="291.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="221.9" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.setEncoding (1 samples, 0.33%)</title><rect x="218.9" y="275.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="221.9" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (5 samples, 1.64%)</title><rect x="222.8" y="291.0" width="19.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="225.8" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (3 samples, 0.98%)</title><rect x="226.7" y="275.0" width="11.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="229.7" y="286.0"></text>
</g>
<g>
<title>java/lang/ref/SoftReference.get (1 samples, 0.33%)</title><rect x="238.3" y="275.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="241.3" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (6 samples, 1.97%)</title><rect x="242.1" y="291.0" width="23.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="245.1" y="302.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (4 samples, 1.31%)</title><rect x="249.9" y="275.0" width="15.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="252.9" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (3 samples, 0.98%)</title><rect x="249.9" y="259.0" width="11.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="252.9" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.33%)</title><rect x="261.5" y="259.0" width="3.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="264.5" y="270.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.33%)</title><rect x="261.5" y="243.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="264.5" y="254.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.33%)</title><rect x="261.5" y="227.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="264.5" y="238.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.33%)</title><rect x="261.5" y="211.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="264.5" y="222.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.33%)</title><rect x="261.5" y="195.0" width="3.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="264.5" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.33%)</title><rect x="265.3" y="291.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="268.3" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (13 samples, 4.26%)</title><rect x="269.2" y="339.0" width="50.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="272.2" y="350.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.33%)</title><rect x="269.2" y="323.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="272.2" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (1 samples, 0.33%)</title><rect x="269.2" y="307.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="272.2" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.release (1 samples, 0.33%)</title><rect x="269.2" y="291.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="272.2" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.33%)</title><rect x="269.2" y="275.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="272.2" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.33%)</title><rect x="273.1" y="323.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="276.1" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.33%)</title><rect x="273.1" y="307.0" width="3.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="276.1" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.33%)</title><rect x="273.1" y="291.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="276.1" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (11 samples, 3.61%)</title><rect x="277.0" y="323.0" width="42.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="280.0" y="334.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (11 samples, 3.61%)</title><rect x="277.0" y="307.0" width="42.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="280.0" y="318.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.98%)</title><rect x="277.0" y="291.0" width="11.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="280.0" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.66%)</title><rect x="280.8" y="275.0" width="7.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="283.8" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (8 samples, 2.62%)</title><rect x="288.6" y="291.0" width="30.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="291.6" y="302.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (8 samples, 2.62%)</title><rect x="288.6" y="275.0" width="30.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="291.6" y="286.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (8 samples, 2.62%)</title><rect x="288.6" y="259.0" width="30.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="291.6" y="270.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.98%)</title><rect x="288.6" y="243.0" width="11.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="291.6" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.66%)</title><rect x="292.4" y="227.0" width="7.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="295.4" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.66%)</title><rect x="292.4" y="211.0" width="7.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="295.4" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.66%)</title><rect x="292.4" y="195.0" width="7.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="295.4" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.66%)</title><rect x="292.4" y="179.0" width="7.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="295.4" y="190.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.66%)</title><rect x="292.4" y="163.0" width="7.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="295.4" y="174.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.33%)</title><rect x="296.3" y="147.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="299.3" y="158.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (1 samples, 0.33%)</title><rect x="296.3" y="131.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="299.3" y="142.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (2 samples, 0.66%)</title><rect x="300.2" y="243.0" width="7.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="303.2" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.33%)</title><rect x="304.0" y="227.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="307.0" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.33%)</title><rect x="304.0" y="211.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="307.0" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.33%)</title><rect x="304.0" y="195.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="307.0" y="206.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.33%)</title><rect x="304.0" y="179.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="307.0" y="190.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.33%)</title><rect x="307.9" y="243.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="310.9" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.33%)</title><rect x="307.9" y="227.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="310.9" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.33%)</title><rect x="307.9" y="211.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="310.9" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.33%)</title><rect x="307.9" y="195.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="310.9" y="206.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.33%)</title><rect x="307.9" y="179.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="310.9" y="190.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.33%)</title><rect x="307.9" y="163.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="310.9" y="174.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.66%)</title><rect x="311.8" y="243.0" width="7.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="314.8" y="254.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.66%)</title><rect x="311.8" y="227.0" width="7.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="314.8" y="238.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.66%)</title><rect x="311.8" y="211.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="314.8" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.33%)</title><rect x="315.6" y="195.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="318.6" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (3 samples, 0.98%)</title><rect x="319.5" y="339.0" width="11.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="322.5" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (3 samples, 0.98%)</title><rect x="319.5" y="323.0" width="11.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="322.5" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (3 samples, 0.98%)</title><rect x="319.5" y="307.0" width="11.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="322.5" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (3 samples, 0.98%)</title><rect x="319.5" y="291.0" width="11.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="322.5" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.66%)</title><rect x="323.4" y="275.0" width="7.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="326.4" y="286.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (164 samples, 53.77%)</title><rect x="331.1" y="435.0" width="634.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="334.1" y="446.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.33%)</title><rect x="373.7" y="419.0" width="3.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="376.7" y="430.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.33%)</title><rect x="373.7" y="403.0" width="3.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="376.7" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (20 samples, 6.56%)</title><rect x="377.5" y="419.0" width="77.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="380.5" y="430.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (1 samples, 0.33%)</title><rect x="396.9" y="403.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="399.9" y="414.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (14 samples, 4.59%)</title><rect x="400.8" y="403.0" width="54.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="403.8" y="414.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (14 samples, 4.59%)</title><rect x="400.8" y="387.0" width="54.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="403.8" y="398.0">ch/qo..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.33%)</title><rect x="400.8" y="371.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="403.8" y="382.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.33%)</title><rect x="400.8" y="355.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="403.8" y="366.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.33%)</title><rect x="400.8" y="339.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="403.8" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.33%)</title><rect x="400.8" y="323.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="403.8" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.33%)</title><rect x="400.8" y="307.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="403.8" y="318.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (13 samples, 4.26%)</title><rect x="404.6" y="371.0" width="50.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="407.6" y="382.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.remove (9 samples, 2.95%)</title><rect x="420.1" y="355.0" width="34.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="423.1" y="366.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.33%)</title><rect x="420.1" y="339.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="423.1" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.33%)</title><rect x="420.1" y="323.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="423.1" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (8 samples, 2.62%)</title><rect x="424.0" y="339.0" width="30.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="427.0" y="350.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.66%)</title><rect x="454.9" y="419.0" width="7.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="457.9" y="430.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.66%)</title><rect x="454.9" y="403.0" width="7.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="457.9" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (29 samples, 9.51%)</title><rect x="462.7" y="419.0" width="112.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="465.7" y="430.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (29 samples, 9.51%)</title><rect x="462.7" y="403.0" width="112.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="465.7" y="414.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (18 samples, 5.90%)</title><rect x="470.4" y="387.0" width="69.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="473.4" y="398.0">com/lin..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (9 samples, 2.95%)</title><rect x="485.9" y="371.0" width="34.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="488.9" y="382.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (8 samples, 2.62%)</title><rect x="489.7" y="355.0" width="31.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="492.7" y="366.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.66%)</title><rect x="497.5" y="339.0" width="7.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="500.5" y="350.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.66%)</title><rect x="497.5" y="323.0" width="7.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="500.5" y="334.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.66%)</title><rect x="497.5" y="307.0" width="7.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="500.5" y="318.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.66%)</title><rect x="497.5" y="291.0" width="7.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="500.5" y="302.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.66%)</title><rect x="497.5" y="275.0" width="7.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="500.5" y="286.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.33%)</title><rect x="497.5" y="259.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="500.5" y="270.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.33%)</title><rect x="501.3" y="259.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="504.3" y="270.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.33%)</title><rect x="501.3" y="243.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="504.3" y="254.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.33%)</title><rect x="501.3" y="227.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="504.3" y="238.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 1.31%)</title><rect x="505.2" y="339.0" width="15.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="508.2" y="350.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.33%)</title><rect x="520.7" y="371.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="523.7" y="382.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.33%)</title><rect x="520.7" y="355.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="523.7" y="366.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.33%)</title><rect x="520.7" y="339.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="523.7" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.33%)</title><rect x="520.7" y="323.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="523.7" y="334.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 1.31%)</title><rect x="524.6" y="371.0" width="15.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="527.6" y="382.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.33%)</title><rect x="540.0" y="387.0" width="3.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="543.0" y="398.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.33%)</title><rect x="540.0" y="371.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="543.0" y="382.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.33%)</title><rect x="540.0" y="355.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="543.0" y="366.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.33%)</title><rect x="540.0" y="339.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="543.0" y="350.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (8 samples, 2.62%)</title><rect x="543.9" y="387.0" width="31.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="546.9" y="398.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (8 samples, 2.62%)</title><rect x="543.9" y="371.0" width="31.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="546.9" y="382.0">ch..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (8 samples, 2.62%)</title><rect x="543.9" y="355.0" width="31.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="546.9" y="366.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (7 samples, 2.30%)</title><rect x="547.8" y="339.0" width="27.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="550.8" y="350.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 1.64%)</title><rect x="555.5" y="323.0" width="19.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="558.5" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (4 samples, 1.31%)</title><rect x="559.4" y="307.0" width="15.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="562.4" y="318.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (96 samples, 31.48%)</title><rect x="574.9" y="419.0" width="371.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="577.9" y="430.0">com/linecorp/decaton/processor/runtime/internal/Pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (96 samples, 31.48%)</title><rect x="574.9" y="403.0" width="371.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="577.9" y="414.0">com/linecorp/decaton/processor/runtime/internal/Pro..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$208/252542782.process (81 samples, 26.56%)</title><rect x="578.7" y="387.0" width="313.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="581.7" y="398.0">com/linecorp/decaton/benchmark/DecatonRunn..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (81 samples, 26.56%)</title><rect x="578.7" y="371.0" width="313.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="581.7" y="382.0">com/linecorp/decaton/benchmark/DecatonRunn..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (79 samples, 25.90%)</title><rect x="578.7" y="355.0" width="305.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="581.7" y="366.0">com/linecorp/decaton/benchmark/Recording...</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (5 samples, 1.64%)</title><rect x="586.5" y="339.0" width="19.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="589.5" y="350.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (5 samples, 1.64%)</title><rect x="586.5" y="323.0" width="19.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="589.5" y="334.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (5 samples, 1.64%)</title><rect x="586.5" y="307.0" width="19.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="589.5" y="318.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (5 samples, 1.64%)</title><rect x="586.5" y="291.0" width="19.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="589.5" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (3 samples, 0.98%)</title><rect x="594.2" y="275.0" width="11.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="597.2" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.33%)</title><rect x="601.9" y="259.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="604.9" y="270.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (72 samples, 23.61%)</title><rect x="605.8" y="339.0" width="278.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="608.8" y="350.0">com/linecorp/decaton/benchmark/Record..</text>
</g>
<g>
<title>java/lang/Thread.sleep (69 samples, 22.62%)</title><rect x="613.5" y="323.0" width="267.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="616.5" y="334.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (64 samples, 20.98%)</title><rect x="625.1" y="307.0" width="247.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="628.1" y="318.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (5 samples, 1.64%)</title><rect x="644.5" y="291.0" width="19.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="647.5" y="302.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.33%)</title><rect x="663.8" y="291.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="666.8" y="302.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.33%)</title><rect x="667.7" y="291.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="670.7" y="302.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.66%)</title><rect x="671.6" y="291.0" width="7.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="674.6" y="302.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 1.31%)</title><rect x="679.3" y="291.0" width="15.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="682.3" y="302.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 1.31%)</title><rect x="679.3" y="275.0" width="15.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="682.3" y="286.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.66%)</title><rect x="694.8" y="291.0" width="7.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="697.8" y="302.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (44 samples, 14.43%)</title><rect x="702.5" y="291.0" width="170.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="705.5" y="302.0">os::sleep(Thread*, lon..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.66%)</title><rect x="741.2" y="275.0" width="7.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="744.2" y="286.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.33%)</title><rect x="745.1" y="259.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="748.1" y="270.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.33%)</title><rect x="749.0" y="275.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="752.0" y="286.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.66%)</title><rect x="752.8" y="275.0" width="7.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="755.8" y="286.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.66%)</title><rect x="752.8" y="259.0" width="7.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="755.8" y="270.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.98%)</title><rect x="760.6" y="275.0" width="11.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="763.6" y="286.0"></text>
</g>
<g>
<title>__pthread_cond_init (2 samples, 0.66%)</title><rect x="772.2" y="275.0" width="7.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="775.2" y="286.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (10 samples, 3.28%)</title><rect x="779.9" y="275.0" width="38.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="782.9" y="286.0">__p..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.33%)</title><rect x="818.6" y="275.0" width="3.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="821.6" y="286.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.33%)</title><rect x="822.5" y="275.0" width="3.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="825.5" y="286.0"></text>
</g>
<g>
<title>_init (1 samples, 0.33%)</title><rect x="826.3" y="275.0" width="3.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="829.3" y="286.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (6 samples, 1.97%)</title><rect x="830.2" y="275.0" width="23.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="833.2" y="286.0">o..</text>
</g>
<g>
<title>pthread_cond_destroy@@GLIBC_2.3.2 (2 samples, 0.66%)</title><rect x="853.4" y="275.0" width="7.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="856.4" y="286.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.66%)</title><rect x="861.1" y="275.0" width="7.8" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="864.1" y="286.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.33%)</title><rect x="868.9" y="275.0" width="3.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="871.9" y="286.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.33%)</title><rect x="872.8" y="307.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="875.8" y="318.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.33%)</title><rect x="876.6" y="307.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="879.6" y="318.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.33%)</title><rect x="880.5" y="323.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="883.5" y="334.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.66%)</title><rect x="884.4" y="355.0" width="7.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="887.4" y="366.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (5 samples, 1.64%)</title><rect x="892.1" y="387.0" width="19.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="895.1" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (5 samples, 1.64%)</title><rect x="892.1" y="371.0" width="19.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="895.1" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (5 samples, 1.64%)</title><rect x="892.1" y="355.0" width="19.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="895.1" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (5 samples, 1.64%)</title><rect x="892.1" y="339.0" width="19.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="895.1" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (5 samples, 1.64%)</title><rect x="892.1" y="323.0" width="19.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="895.1" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 1.64%)</title><rect x="892.1" y="307.0" width="19.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="895.1" y="318.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.33%)</title><rect x="911.4" y="387.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="914.4" y="398.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.33%)</title><rect x="911.4" y="371.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="914.4" y="382.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/260840925.linkToTargetMethod (1 samples, 0.33%)</title><rect x="915.3" y="387.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="918.3" y="398.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/205962452.invokeStatic_L_L (1 samples, 0.33%)</title><rect x="915.3" y="371.0" width="3.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="918.3" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$293/836520084.get$Lambda (1 samples, 0.33%)</title><rect x="915.3" y="355.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="918.3" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.33%)</title><rect x="915.3" y="339.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="918.3" y="350.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 0.98%)</title><rect x="919.2" y="387.0" width="11.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="922.2" y="398.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.33%)</title><rect x="930.8" y="387.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="933.8" y="398.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.33%)</title><rect x="930.8" y="371.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="933.8" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.98%)</title><rect x="934.7" y="387.0" width="11.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="937.7" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.66%)</title><rect x="938.5" y="371.0" width="7.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="941.5" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.66%)</title><rect x="938.5" y="355.0" width="7.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="941.5" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.66%)</title><rect x="938.5" y="339.0" width="7.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="941.5" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.66%)</title><rect x="938.5" y="323.0" width="7.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="941.5" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 0.66%)</title><rect x="938.5" y="307.0" width="7.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="941.5" y="318.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$293/836520084.accept (1 samples, 0.33%)</title><rect x="942.4" y="291.0" width="3.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="945.4" y="302.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.33%)</title><rect x="946.3" y="419.0" width="3.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="949.3" y="430.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.33%)</title><rect x="946.3" y="403.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="949.3" y="414.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.33%)</title><rect x="946.3" y="387.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="949.3" y="398.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.33%)</title><rect x="946.3" y="371.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="949.3" y="382.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.33%)</title><rect x="946.3" y="355.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="949.3" y="366.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.33%)</title><rect x="946.3" y="339.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="949.3" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 1.31%)</title><rect x="950.1" y="419.0" width="15.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="953.1" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 1.31%)</title><rect x="950.1" y="403.0" width="15.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="953.1" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 1.31%)</title><rect x="950.1" y="387.0" width="15.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="953.1" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.66%)</title><rect x="950.1" y="371.0" width="7.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="953.1" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.66%)</title><rect x="950.1" y="355.0" width="7.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="953.1" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 0.66%)</title><rect x="950.1" y="339.0" width="7.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="953.1" y="350.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.66%)</title><rect x="950.1" y="323.0" width="7.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="953.1" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.66%)</title><rect x="957.9" y="371.0" width="7.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="960.9" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$302/2116463332.accept (2 samples, 0.66%)</title><rect x="957.9" y="355.0" width="7.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="960.9" y="366.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.33%)</title><rect x="957.9" y="339.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="960.9" y="350.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.33%)</title><rect x="957.9" y="323.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="960.9" y="334.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.33%)</title><rect x="957.9" y="307.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="960.9" y="318.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.33%)</title><rect x="957.9" y="291.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="960.9" y="302.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.33%)</title><rect x="957.9" y="275.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="960.9" y="286.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$57 (1 samples, 0.33%)</title><rect x="961.7" y="339.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="964.7" y="350.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.33%)</title><rect x="961.7" y="323.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="964.7" y="334.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.33%)</title><rect x="961.7" y="307.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="964.7" y="318.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.33%)</title><rect x="961.7" y="291.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="964.7" y="302.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.33%)</title><rect x="961.7" y="275.0" width="3.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="964.7" y="286.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.33%)</title><rect x="961.7" y="259.0" width="3.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="964.7" y="270.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (1 samples, 0.33%)</title><rect x="965.6" y="451.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="968.6" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.33%)</title><rect x="965.6" y="435.0" width="3.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="968.6" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (6 samples, 1.97%)</title><rect x="969.5" y="499.0" width="23.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="972.5" y="510.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 1.97%)</title><rect x="969.5" y="483.0" width="23.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="972.5" y="494.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 1.97%)</title><rect x="969.5" y="467.0" width="23.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="972.5" y="478.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 1.97%)</title><rect x="969.5" y="451.0" width="23.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="972.5" y="462.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (15 samples, 4.92%)</title><rect x="992.7" y="499.0" width="58.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="995.7" y="510.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (15 samples, 4.92%)</title><rect x="992.7" y="483.0" width="58.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="995.7" y="494.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.33%)</title><rect x="992.7" y="467.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="995.7" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.33%)</title><rect x="992.7" y="451.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="995.7" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.33%)</title><rect x="992.7" y="435.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="995.7" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.33%)</title><rect x="992.7" y="419.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="995.7" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.33%)</title><rect x="992.7" y="403.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="995.7" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (14 samples, 4.59%)</title><rect x="996.6" y="467.0" width="54.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="999.6" y="478.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (14 samples, 4.59%)</title><rect x="996.6" y="451.0" width="54.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="999.6" y="462.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (14 samples, 4.59%)</title><rect x="996.6" y="435.0" width="54.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="999.6" y="446.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (14 samples, 4.59%)</title><rect x="996.6" y="419.0" width="54.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="999.6" y="430.0">java/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.33%)</title><rect x="1050.7" y="547.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1053.7" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.33%)</title><rect x="1050.7" y="531.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1053.7" y="542.0"></text>
</g>
<g>
<title>start_thread (35 samples, 11.48%)</title><rect x="1054.6" y="547.0" width="135.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1057.6" y="558.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (35 samples, 11.48%)</title><rect x="1054.6" y="531.0" width="135.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1057.6" y="542.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (14 samples, 4.59%)</title><rect x="1054.6" y="515.0" width="54.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1057.6" y="526.0">GangW..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (14 samples, 4.59%)</title><rect x="1054.6" y="499.0" width="54.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1057.6" y="510.0">G1Par..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (14 samples, 4.59%)</title><rect x="1054.6" y="483.0" width="54.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1057.6" y="494.0">G1Par..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (14 samples, 4.59%)</title><rect x="1054.6" y="467.0" width="54.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1057.6" y="478.0">G1Par..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (11 samples, 3.61%)</title><rect x="1058.5" y="451.0" width="42.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1061.5" y="462.0">G1Pa..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (4 samples, 1.31%)</title><rect x="1081.7" y="435.0" width="15.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1084.7" y="446.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (2 samples, 0.66%)</title><rect x="1089.4" y="419.0" width="7.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1092.4" y="430.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.33%)</title><rect x="1097.1" y="435.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1100.1" y="446.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (2 samples, 0.66%)</title><rect x="1101.0" y="451.0" width="7.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1104.0" y="462.0"></text>
</g>
<g>
<title>JavaThread::run() (21 samples, 6.89%)</title><rect x="1108.8" y="515.0" width="81.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1111.8" y="526.0">JavaThrea..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (21 samples, 6.89%)</title><rect x="1108.8" y="499.0" width="81.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1111.8" y="510.0">JavaThrea..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (21 samples, 6.89%)</title><rect x="1108.8" y="483.0" width="81.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1111.8" y="494.0">CompileBr..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (20 samples, 6.56%)</title><rect x="1108.8" y="467.0" width="77.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1111.8" y="478.0">CompileBr..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (18 samples, 5.90%)</title><rect x="1108.8" y="451.0" width="69.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1111.8" y="462.0">C2Compi..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (18 samples, 5.90%)</title><rect x="1108.8" y="435.0" width="69.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1111.8" y="446.0">Compile..</text>
</g>
<g>
<title>Compile::Code_Gen() (10 samples, 3.28%)</title><rect x="1108.8" y="419.0" width="38.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1111.8" y="430.0">Com..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.33%)</title><rect x="1108.8" y="403.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1111.8" y="414.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.33%)</title><rect x="1108.8" y="387.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1111.8" y="398.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.33%)</title><rect x="1108.8" y="371.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1111.8" y="382.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.33%)</title><rect x="1112.6" y="403.0" width="3.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1115.6" y="414.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.33%)</title><rect x="1116.5" y="403.0" width="3.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1119.5" y="414.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.33%)</title><rect x="1116.5" y="387.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1119.5" y="398.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.33%)</title><rect x="1116.5" y="371.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1119.5" y="382.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (7 samples, 2.30%)</title><rect x="1120.4" y="403.0" width="27.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1123.4" y="414.0">P..</text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.33%)</title><rect x="1120.4" y="387.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1123.4" y="398.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.33%)</title><rect x="1124.2" y="387.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1127.2" y="398.0"></text>
</g>
<g>
<title>loadNNode::rule() const (1 samples, 0.33%)</title><rect x="1124.2" y="371.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1127.2" y="382.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 0.98%)</title><rect x="1128.1" y="387.0" width="11.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1131.1" y="398.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.33%)</title><rect x="1135.8" y="371.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1138.8" y="382.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.33%)</title><rect x="1135.8" y="355.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.8" y="366.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.33%)</title><rect x="1139.7" y="387.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1142.7" y="398.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.33%)</title><rect x="1143.6" y="387.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1146.6" y="398.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.33%)</title><rect x="1143.6" y="371.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1146.6" y="382.0"></text>
</g>
<g>
<title>Compile::Optimize() (6 samples, 1.97%)</title><rect x="1147.4" y="419.0" width="23.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.4" y="430.0">C..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.33%)</title><rect x="1147.4" y="403.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.4" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.33%)</title><rect x="1147.4" y="387.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1150.4" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::add_objload_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.33%)</title><rect x="1147.4" y="371.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.4" y="382.0"></text>
</g>
<g>
<title>PointsToNode::PointsToNode(ConnectionGraph*, Node*, PointsToNode::EscapeState, PointsToNode::NodeType) (1 samples, 0.33%)</title><rect x="1147.4" y="355.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1150.4" y="366.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.33%)</title><rect x="1147.4" y="339.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.4" y="350.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (4 samples, 1.31%)</title><rect x="1151.3" y="403.0" width="15.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.3" y="414.0"></text>
</g>
<g>
<title>ParmNode::is_CFG() const (1 samples, 0.33%)</title><rect x="1151.3" y="387.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.3" y="398.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.66%)</title><rect x="1155.2" y="387.0" width="7.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.2" y="398.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.33%)</title><rect x="1159.0" y="371.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.0" y="382.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.33%)</title><rect x="1162.9" y="387.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.9" y="398.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.33%)</title><rect x="1162.9" y="371.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.9" y="382.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.33%)</title><rect x="1162.9" y="355.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.9" y="366.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.33%)</title><rect x="1166.8" y="403.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.8" y="414.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.33%)</title><rect x="1166.8" y="387.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.8" y="398.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.33%)</title><rect x="1166.8" y="371.0" width="3.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.8" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.66%)</title><rect x="1170.7" y="419.0" width="7.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.7" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.66%)</title><rect x="1170.7" y="403.0" width="7.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.66%)</title><rect x="1170.7" y="387.0" width="7.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.66%)</title><rect x="1170.7" y="371.0" width="7.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.66%)</title><rect x="1170.7" y="355.0" width="7.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.66%)</title><rect x="1170.7" y="339.0" width="7.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.7" y="350.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.33%)</title><rect x="1170.7" y="323.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.7" y="334.0"></text>
</g>
<g>
<title>ciMethodData::bci_to_data(int, ciMethod*) (1 samples, 0.33%)</title><rect x="1170.7" y="307.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.7" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.33%)</title><rect x="1174.5" y="323.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.5" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.33%)</title><rect x="1174.5" y="307.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.5" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.33%)</title><rect x="1174.5" y="291.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.5" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.33%)</title><rect x="1174.5" y="275.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.33%)</title><rect x="1174.5" y="259.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.5" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.33%)</title><rect x="1174.5" y="243.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.5" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.33%)</title><rect x="1174.5" y="227.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.5" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.33%)</title><rect x="1174.5" y="211.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.5" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.33%)</title><rect x="1174.5" y="195.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.5" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.33%)</title><rect x="1174.5" y="179.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.5" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.33%)</title><rect x="1174.5" y="163.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.5" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.33%)</title><rect x="1174.5" y="147.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.5" y="158.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.33%)</title><rect x="1174.5" y="131.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.5" y="142.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.33%)</title><rect x="1174.5" y="115.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.5" y="126.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.33%)</title><rect x="1174.5" y="99.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.5" y="110.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.33%)</title><rect x="1174.5" y="83.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.5" y="94.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.33%)</title><rect x="1174.5" y="67.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.5" y="78.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle, Thread*) (1 samples, 0.33%)</title><rect x="1174.5" y="51.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.5" y="62.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.33%)</title><rect x="1174.5" y="35.0" width="3.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.5" y="46.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.66%)</title><rect x="1178.4" y="451.0" width="7.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.4" y="462.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.66%)</title><rect x="1178.4" y="435.0" width="7.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.4" y="446.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.66%)</title><rect x="1178.4" y="419.0" width="7.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.4" y="430.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.66%)</title><rect x="1178.4" y="403.0" width="7.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.4" y="414.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.33%)</title><rect x="1178.4" y="387.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.4" y="398.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.33%)</title><rect x="1178.4" y="371.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.4" y="382.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.33%)</title><rect x="1178.4" y="355.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.4" y="366.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.33%)</title><rect x="1178.4" y="339.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.4" y="350.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.33%)</title><rect x="1178.4" y="323.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.4" y="334.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.33%)</title><rect x="1178.4" y="307.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.4" y="318.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.33%)</title><rect x="1178.4" y="291.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.4" y="302.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.33%)</title><rect x="1178.4" y="275.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.4" y="286.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.33%)</title><rect x="1178.4" y="259.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.4" y="270.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.33%)</title><rect x="1178.4" y="243.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.4" y="254.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.33%)</title><rect x="1178.4" y="227.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.4" y="238.0"></text>
</g>
<g>
<title>GraphBuilder::if_zero(ValueType*, Instruction::Condition) (1 samples, 0.33%)</title><rect x="1178.4" y="211.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.4" y="222.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.33%)</title><rect x="1178.4" y="195.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.4" y="206.0"></text>
</g>
<g>
<title>ValueMap::find_insert(Instruction*) (1 samples, 0.33%)</title><rect x="1178.4" y="179.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.4" y="190.0"></text>
</g>
<g>
<title>Constant::hash() const (1 samples, 0.33%)</title><rect x="1178.4" y="163.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.4" y="174.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.33%)</title><rect x="1182.3" y="387.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.3" y="398.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.33%)</title><rect x="1182.3" y="371.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.3" y="382.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (1 samples, 0.33%)</title><rect x="1182.3" y="355.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.3" y="366.0"></text>
</g>
<g>
<title>LIRGenerator::do_ProfileInvoke(ProfileInvoke*) (1 samples, 0.33%)</title><rect x="1182.3" y="339.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.3" y="350.0"></text>
</g>
<g>
<title>ciMethod::is_accessor() const (1 samples, 0.33%)</title><rect x="1182.3" y="323.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.3" y="334.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.33%)</title><rect x="1186.1" y="467.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.1" y="478.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.33%)</title><rect x="1186.1" y="451.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.1" y="462.0"></text>
</g>
</g>
</svg>
