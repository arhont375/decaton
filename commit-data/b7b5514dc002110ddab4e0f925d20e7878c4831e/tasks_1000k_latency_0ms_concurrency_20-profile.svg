<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="501"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="501"> </text>
<g id="frames">
<g>
<title>all (1,100 samples, 100.00%)</title><rect x="10.0" y="467.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="478.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (271 samples, 24.64%)</title><rect x="10.0" y="451.0" width="290.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="462.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (271 samples, 24.64%)</title><rect x="10.0" y="435.0" width="290.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="446.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (2 samples, 0.18%)</title><rect x="10.0" y="419.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (2 samples, 0.18%)</title><rect x="10.0" y="403.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (2 samples, 0.18%)</title><rect x="10.0" y="387.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (2 samples, 0.18%)</title><rect x="10.0" y="371.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (2 samples, 0.18%)</title><rect x="10.0" y="355.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.18%)</title><rect x="10.0" y="339.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.09%)</title><rect x="10.0" y="323.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.09%)</title><rect x="10.0" y="307.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.09%)</title><rect x="10.0" y="291.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesSent (1 samples, 0.09%)</title><rect x="10.0" y="275.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="10.0" y="259.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="10.0" y="243.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="10.0" y="227.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.09%)</title><rect x="11.1" y="323.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="14.1" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.09%)</title><rect x="11.1" y="307.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="14.1" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="11.1" y="291.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="14.1" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="11.1" y="275.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="14.1" y="286.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.09%)</title><rect x="11.1" y="259.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="14.1" y="270.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.09%)</title><rect x="11.1" y="243.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="14.1" y="254.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestHeader.toStruct (1 samples, 0.09%)</title><rect x="11.1" y="227.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="14.1" y="238.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/RequestHeaderData.toStruct (1 samples, 0.09%)</title><rect x="11.1" y="211.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="14.1" y="222.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.set (1 samples, 0.09%)</title><rect x="11.1" y="195.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="14.1" y="206.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.09%)</title><rect x="11.1" y="179.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="14.1" y="190.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="11.1" y="163.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="14.1" y="174.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="11.1" y="147.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="14.1" y="158.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (269 samples, 24.45%)</title><rect x="12.1" y="419.0" width="288.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="15.1" y="430.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (7 samples, 0.64%)</title><rect x="12.1" y="403.0" width="7.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="15.1" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.09%)</title><rect x="13.2" y="387.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.2" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (5 samples, 0.45%)</title><rect x="14.3" y="387.0" width="5.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="17.3" y="398.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.09%)</title><rect x="14.3" y="371.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.3" y="382.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.09%)</title><rect x="14.3" y="355.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.3" y="366.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.09%)</title><rect x="14.3" y="339.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.3" y="350.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (4 samples, 0.36%)</title><rect x="15.4" y="371.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.4" y="382.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.36%)</title><rect x="15.4" y="355.0" width="4.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="18.4" y="366.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (4 samples, 0.36%)</title><rect x="15.4" y="339.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="18.4" y="350.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (4 samples, 0.36%)</title><rect x="15.4" y="323.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="18.4" y="334.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (4 samples, 0.36%)</title><rect x="15.4" y="307.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.4" y="318.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.09%)</title><rect x="15.4" y="291.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.4" y="302.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (3 samples, 0.27%)</title><rect x="16.4" y="291.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.4" y="302.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (2 samples, 0.18%)</title><rect x="16.4" y="275.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="19.4" y="286.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (2 samples, 0.18%)</title><rect x="16.4" y="259.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="19.4" y="270.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (2 samples, 0.18%)</title><rect x="16.4" y="243.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.4" y="254.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$185/2029540231.get (2 samples, 0.18%)</title><rect x="16.4" y="227.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.4" y="238.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.09%)</title><rect x="18.6" y="275.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="21.6" y="286.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.09%)</title><rect x="18.6" y="259.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="21.6" y="270.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.09%)</title><rect x="19.7" y="403.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="22.7" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.09%)</title><rect x="19.7" y="387.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="22.7" y="398.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="19.7" y="371.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.7" y="382.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="19.7" y="355.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="22.7" y="366.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="19.7" y="339.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="22.7" y="350.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="19.7" y="323.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.7" y="334.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="19.7" y="307.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="22.7" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="19.7" y="291.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="22.7" y="302.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="19.7" y="275.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="22.7" y="286.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$278/1550239565.test (1 samples, 0.09%)</title><rect x="19.7" y="259.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="22.7" y="270.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (4 samples, 0.36%)</title><rect x="20.7" y="403.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="23.7" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (4 samples, 0.36%)</title><rect x="20.7" y="387.0" width="4.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="23.7" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (4 samples, 0.36%)</title><rect x="20.7" y="371.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="23.7" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$274/514871419.accept (4 samples, 0.36%)</title><rect x="20.7" y="355.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.7" y="366.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (4 samples, 0.36%)</title><rect x="20.7" y="339.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="23.7" y="350.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (4 samples, 0.36%)</title><rect x="20.7" y="323.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="23.7" y="334.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (4 samples, 0.36%)</title><rect x="20.7" y="307.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="23.7" y="318.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (204 samples, 18.55%)</title><rect x="25.0" y="403.0" width="218.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="28.0" y="414.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$273/1303615289.accept (194 samples, 17.64%)</title><rect x="25.0" y="387.0" width="208.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="28.0" y="398.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (193 samples, 17.55%)</title><rect x="26.1" y="371.0" width="207.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="29.1" y="382.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (170 samples, 15.45%)</title><rect x="27.2" y="355.0" width="182.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="30.2" y="366.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (170 samples, 15.45%)</title><rect x="27.2" y="339.0" width="182.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="30.2" y="350.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (170 samples, 15.45%)</title><rect x="27.2" y="323.0" width="182.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="30.2" y="334.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (170 samples, 15.45%)</title><rect x="27.2" y="307.0" width="182.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="30.2" y="318.0">java/util/concurrent/Exe..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (170 samples, 15.45%)</title><rect x="27.2" y="291.0" width="182.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="30.2" y="302.0">java/util/concurrent/Thr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (152 samples, 13.82%)</title><rect x="46.5" y="275.0" width="163.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="49.5" y="286.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (127 samples, 11.55%)</title><rect x="69.0" y="259.0" width="136.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="72.0" y="270.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (28 samples, 2.55%)</title><rect x="87.2" y="243.0" width="30.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="90.2" y="254.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (28 samples, 2.55%)</title><rect x="87.2" y="227.0" width="30.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="90.2" y="238.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (28 samples, 2.55%)</title><rect x="87.2" y="211.0" width="30.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="90.2" y="222.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (82 samples, 7.45%)</title><rect x="117.3" y="243.0" width="87.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="120.3" y="254.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (82 samples, 7.45%)</title><rect x="117.3" y="227.0" width="87.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="120.3" y="238.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (82 samples, 7.45%)</title><rect x="117.3" y="211.0" width="87.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="120.3" y="222.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (82 samples, 7.45%)</title><rect x="117.3" y="195.0" width="87.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="120.3" y="206.0">java/util/..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (80 samples, 7.27%)</title><rect x="119.4" y="179.0" width="85.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="122.4" y="190.0">sun/misc/U..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.09%)</title><rect x="119.4" y="163.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="122.4" y="174.0"></text>
</g>
<g>
<title>Unsafe_Unpark (72 samples, 6.55%)</title><rect x="120.5" y="163.0" width="77.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="123.5" y="174.0">Unsafe_Un..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="122.6" y="147.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="125.6" y="158.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.09%)</title><rect x="123.7" y="147.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="126.7" y="158.0"></text>
</g>
<g>
<title>__pthread_cond_signal (47 samples, 4.27%)</title><rect x="124.8" y="147.0" width="50.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="127.8" y="158.0">__pth..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (8 samples, 0.73%)</title><rect x="175.2" y="147.0" width="8.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="178.2" y="158.0"></text>
</g>
<g>
<title>pthread_mutex_lock (13 samples, 1.18%)</title><rect x="183.8" y="147.0" width="13.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="186.8" y="158.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 0.36%)</title><rect x="197.7" y="163.0" width="4.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="200.7" y="174.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.27%)</title><rect x="202.0" y="163.0" width="3.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="205.0" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.36%)</title><rect x="205.2" y="259.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="208.2" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.36%)</title><rect x="205.2" y="243.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="208.2" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.36%)</title><rect x="205.2" y="227.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="208.2" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.36%)</title><rect x="205.2" y="211.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="208.2" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.09%)</title><rect x="208.5" y="195.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="211.5" y="206.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (14 samples, 1.27%)</title><rect x="209.5" y="355.0" width="15.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="212.5" y="366.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (14 samples, 1.27%)</title><rect x="209.5" y="339.0" width="15.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="212.5" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.18%)</title><rect x="222.4" y="323.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="225.4" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.18%)</title><rect x="222.4" y="307.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="225.4" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.18%)</title><rect x="222.4" y="291.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="225.4" y="302.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="222.4" y="275.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="225.4" y="286.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="222.4" y="259.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="225.4" y="270.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.09%)</title><rect x="222.4" y="243.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="225.4" y="254.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::write_region_work(MemRegion) (1 samples, 0.09%)</title><rect x="222.4" y="227.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="225.4" y="238.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::invalidate(MemRegion, bool) (1 samples, 0.09%)</title><rect x="222.4" y="211.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="225.4" y="222.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.09%)</title><rect x="222.4" y="195.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="225.4" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.09%)</title><rect x="223.5" y="275.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="226.5" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.09%)</title><rect x="223.5" y="259.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="226.5" y="270.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (3 samples, 0.27%)</title><rect x="224.5" y="355.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="227.5" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.27%)</title><rect x="224.5" y="339.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="227.5" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.27%)</title><rect x="224.5" y="323.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="227.5" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 0.45%)</title><rect x="227.8" y="355.0" width="5.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="230.8" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 0.45%)</title><rect x="227.8" y="339.0" width="5.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="230.8" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 0.45%)</title><rect x="227.8" y="323.0" width="5.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="230.8" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (5 samples, 0.45%)</title><rect x="227.8" y="307.0" width="5.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="230.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 0.45%)</title><rect x="227.8" y="291.0" width="5.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="230.8" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.09%)</title><rect x="233.1" y="387.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="236.1" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.09%)</title><rect x="233.1" y="371.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="236.1" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.09%)</title><rect x="233.1" y="355.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="236.1" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.09%)</title><rect x="234.2" y="387.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="237.2" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.09%)</title><rect x="234.2" y="371.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="237.2" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.09%)</title><rect x="234.2" y="355.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="237.2" y="366.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="234.2" y="339.0" width="1.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="237.2" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (8 samples, 0.73%)</title><rect x="235.3" y="387.0" width="8.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="238.3" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (8 samples, 0.73%)</title><rect x="235.3" y="371.0" width="8.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="238.3" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (8 samples, 0.73%)</title><rect x="235.3" y="355.0" width="8.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="238.3" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (8 samples, 0.73%)</title><rect x="235.3" y="339.0" width="8.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="238.3" y="350.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (6 samples, 0.55%)</title><rect x="236.3" y="323.0" width="6.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="239.3" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.09%)</title><rect x="242.8" y="323.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="245.8" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.09%)</title><rect x="242.8" y="307.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="245.8" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (53 samples, 4.82%)</title><rect x="243.9" y="403.0" width="56.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="246.9" y="414.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (53 samples, 4.82%)</title><rect x="243.9" y="387.0" width="56.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="246.9" y="398.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (36 samples, 3.27%)</title><rect x="243.9" y="371.0" width="38.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="246.9" y="382.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.09%)</title><rect x="243.9" y="355.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="246.9" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.09%)</title><rect x="243.9" y="339.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="246.9" y="350.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.09%)</title><rect x="243.9" y="323.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="246.9" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (35 samples, 3.18%)</title><rect x="244.9" y="355.0" width="37.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="247.9" y="366.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (35 samples, 3.18%)</title><rect x="244.9" y="339.0" width="37.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="247.9" y="350.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (30 samples, 2.73%)</title><rect x="244.9" y="323.0" width="32.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="247.9" y="334.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (30 samples, 2.73%)</title><rect x="244.9" y="307.0" width="32.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="247.9" y="318.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (13 samples, 1.18%)</title><rect x="249.2" y="291.0" width="14.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="252.2" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (10 samples, 0.91%)</title><rect x="252.4" y="275.0" width="10.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="255.4" y="286.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (10 samples, 0.91%)</title><rect x="252.4" y="259.0" width="10.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="255.4" y="270.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (10 samples, 0.91%)</title><rect x="252.4" y="243.0" width="10.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="255.4" y="254.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (10 samples, 0.91%)</title><rect x="252.4" y="227.0" width="10.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="255.4" y="238.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (10 samples, 0.91%)</title><rect x="252.4" y="211.0" width="10.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="255.4" y="222.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (10 samples, 0.91%)</title><rect x="252.4" y="195.0" width="10.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="255.4" y="206.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (10 samples, 0.91%)</title><rect x="252.4" y="179.0" width="10.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="255.4" y="190.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (11 samples, 1.00%)</title><rect x="263.2" y="291.0" width="11.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="266.2" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (11 samples, 1.00%)</title><rect x="263.2" y="275.0" width="11.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="266.2" y="286.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (4 samples, 0.36%)</title><rect x="263.2" y="259.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="266.2" y="270.0"></text>
</g>
<g>
<title>java/util/Optional.of (4 samples, 0.36%)</title><rect x="263.2" y="243.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="266.2" y="254.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (7 samples, 0.64%)</title><rect x="267.5" y="259.0" width="7.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="270.5" y="270.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (7 samples, 0.64%)</title><rect x="267.5" y="243.0" width="7.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="270.5" y="254.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 0.18%)</title><rect x="275.0" y="291.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="278.0" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.18%)</title><rect x="277.1" y="323.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="280.1" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.18%)</title><rect x="277.1" y="307.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="280.1" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.09%)</title><rect x="277.1" y="291.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="280.1" y="302.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.09%)</title><rect x="277.1" y="275.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="280.1" y="286.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.09%)</title><rect x="277.1" y="259.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="280.1" y="270.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.toString (1 samples, 0.09%)</title><rect x="277.1" y="243.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="280.1" y="254.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.09%)</title><rect x="278.2" y="291.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="281.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.09%)</title><rect x="278.2" y="275.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="281.2" y="286.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="278.2" y="259.0" width="1.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="281.2" y="270.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (2 samples, 0.18%)</title><rect x="279.3" y="323.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="282.3" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (2 samples, 0.18%)</title><rect x="279.3" y="307.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="282.3" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLeadMetricName (1 samples, 0.09%)</title><rect x="279.3" y="291.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="282.3" y="302.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="279.3" y="275.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="282.3" y="286.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="279.3" y="259.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="282.3" y="270.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="280.3" y="291.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="283.3" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="280.3" y="275.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="283.3" y="286.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="280.3" y="259.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="283.3" y="270.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.09%)</title><rect x="280.3" y="243.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="283.3" y="254.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionLag (1 samples, 0.09%)</title><rect x="281.4" y="323.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="284.4" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (6 samples, 0.55%)</title><rect x="282.5" y="371.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="285.5" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (6 samples, 0.55%)</title><rect x="282.5" y="355.0" width="6.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="285.5" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (4 samples, 0.36%)</title><rect x="282.5" y="339.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="285.5" y="350.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.18%)</title><rect x="283.5" y="323.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="286.5" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$237/1143908672.accept (2 samples, 0.18%)</title><rect x="283.5" y="307.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="286.5" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (2 samples, 0.18%)</title><rect x="283.5" y="291.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="286.5" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (2 samples, 0.18%)</title><rect x="283.5" y="275.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="286.5" y="286.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (2 samples, 0.18%)</title><rect x="283.5" y="259.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="286.5" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.18%)</title><rect x="283.5" y="243.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="286.5" y="254.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.18%)</title><rect x="283.5" y="227.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="286.5" y="238.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.09%)</title><rect x="285.7" y="323.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="288.7" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.09%)</title><rect x="285.7" y="307.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="288.7" y="318.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="285.7" y="291.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="288.7" y="302.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="285.7" y="275.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="288.7" y="286.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="285.7" y="259.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="288.7" y="270.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="285.7" y="243.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="288.7" y="254.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="285.7" y="227.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="288.7" y="238.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.18%)</title><rect x="286.8" y="339.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="289.8" y="350.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 0.18%)</title><rect x="286.8" y="323.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="289.8" y="334.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.18%)</title><rect x="286.8" y="307.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="289.8" y="318.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.18%)</title><rect x="286.8" y="291.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="289.8" y="302.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.18%)</title><rect x="286.8" y="275.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="289.8" y="286.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="286.8" y="259.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="289.8" y="270.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="286.8" y="243.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="289.8" y="254.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.09%)</title><rect x="286.8" y="227.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="289.8" y="238.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.09%)</title><rect x="286.8" y="211.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="289.8" y="222.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$$Lambda$51/1794717576.get (1 samples, 0.09%)</title><rect x="287.8" y="259.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="290.8" y="270.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (4 samples, 0.36%)</title><rect x="288.9" y="371.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="291.9" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.27%)</title><rect x="288.9" y="355.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="291.9" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.09%)</title><rect x="288.9" y="339.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="291.9" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.18%)</title><rect x="290.0" y="339.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="293.0" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.09%)</title><rect x="290.0" y="323.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="293.0" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.09%)</title><rect x="290.0" y="307.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="293.0" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.09%)</title><rect x="290.0" y="291.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="293.0" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.09%)</title><rect x="290.0" y="275.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="293.0" y="286.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.09%)</title><rect x="290.0" y="259.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="293.0" y="270.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.09%)</title><rect x="290.0" y="243.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="293.0" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.09%)</title><rect x="290.0" y="227.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="293.0" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.09%)</title><rect x="290.0" y="211.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="293.0" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.09%)</title><rect x="290.0" y="195.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="293.0" y="206.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="290.0" y="179.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="293.0" y="190.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="290.0" y="163.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="293.0" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="290.0" y="147.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="293.0" y="158.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.09%)</title><rect x="290.0" y="131.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="293.0" y="142.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.09%)</title><rect x="291.1" y="323.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="294.1" y="334.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.09%)</title><rect x="291.1" y="307.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="294.1" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.09%)</title><rect x="292.1" y="355.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="295.1" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.ready (1 samples, 0.09%)</title><rect x="292.1" y="339.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="295.1" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.isReady (1 samples, 0.09%)</title><rect x="292.1" y="323.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="295.1" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient$DefaultMetadataUpdater.isUpdateDue (1 samples, 0.09%)</title><rect x="292.1" y="307.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="295.1" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (7 samples, 0.64%)</title><rect x="293.2" y="371.0" width="7.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="296.2" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (7 samples, 0.64%)</title><rect x="293.2" y="355.0" width="7.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="296.2" y="366.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.09%)</title><rect x="293.2" y="339.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="296.2" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$262/380638059.accept (1 samples, 0.09%)</title><rect x="293.2" y="323.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="296.2" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.09%)</title><rect x="293.2" y="307.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="296.2" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.09%)</title><rect x="293.2" y="291.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="296.2" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.09%)</title><rect x="293.2" y="275.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="296.2" y="286.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.09%)</title><rect x="293.2" y="259.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="296.2" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="293.2" y="243.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="296.2" y="254.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="293.2" y="227.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="296.2" y="238.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 0.18%)</title><rect x="294.3" y="339.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="297.3" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.next (1 samples, 0.09%)</title><rect x="294.3" y="323.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="297.3" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.advance (1 samples, 0.09%)</title><rect x="294.3" y="307.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="297.3" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.09%)</title><rect x="295.3" y="323.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="298.3" y="334.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="295.3" y="307.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="298.3" y="318.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="295.3" y="291.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="298.3" y="302.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="295.3" y="275.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="298.3" y="286.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="295.3" y="259.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="298.3" y="270.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="295.3" y="243.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="298.3" y="254.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.09%)</title><rect x="295.3" y="227.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="298.3" y="238.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.09%)</title><rect x="295.3" y="211.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="298.3" y="222.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.09%)</title><rect x="295.3" y="195.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="298.3" y="206.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.09%)</title><rect x="295.3" y="179.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="298.3" y="190.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="295.3" y="163.0" width="1.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="298.3" y="174.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (3 samples, 0.27%)</title><rect x="296.4" y="339.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="299.4" y="350.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.09%)</title><rect x="298.6" y="323.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="301.6" y="334.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.09%)</title><rect x="298.6" y="307.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="301.6" y="318.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="298.6" y="291.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="301.6" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="298.6" y="275.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="301.6" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="298.6" y="259.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="301.6" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.09%)</title><rect x="298.6" y="243.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="301.6" y="254.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.09%)</title><rect x="299.6" y="339.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="302.6" y="350.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.next (1 samples, 0.09%)</title><rect x="299.6" y="323.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="302.6" y="334.0"></text>
</g>
<g>
<title>java/lang/Thread.run (766 samples, 69.64%)</title><rect x="300.7" y="451.0" width="821.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="303.7" y="462.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (766 samples, 69.64%)</title><rect x="300.7" y="435.0" width="821.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="303.7" y="446.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (766 samples, 69.64%)</title><rect x="300.7" y="419.0" width="821.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="303.7" y="430.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="300.7" y="403.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="303.7" y="414.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="300.7" y="387.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="303.7" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="300.7" y="371.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="303.7" y="382.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="300.7" y="355.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="303.7" y="366.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="300.7" y="339.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="303.7" y="350.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$289/1979684964.run (529 samples, 48.09%)</title><rect x="301.8" y="403.0" width="567.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="304.8" y="414.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$289/19796..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62 (529 samples, 48.09%)</title><rect x="301.8" y="387.0" width="567.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="304.8" y="398.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (529 samples, 48.09%)</title><rect x="301.8" y="371.0" width="567.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="304.8" y="382.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>__clock_gettime (12 samples, 1.09%)</title><rect x="308.2" y="355.0" width="12.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="311.2" y="366.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.82%)</title><rect x="311.4" y="339.0" width="9.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="314.4" y="350.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (507 samples, 46.09%)</title><rect x="321.1" y="355.0" width="543.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="324.1" y="366.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThe..</text>
</g>
<g>
<title>[unknown] (2 samples, 0.18%)</title><rect x="328.6" y="339.0" width="2.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="331.6" y="350.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.18%)</title><rect x="328.6" y="323.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="331.6" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.maybeDirty (3 samples, 0.27%)</title><rect x="330.7" y="339.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="333.7" y="350.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (1 samples, 0.09%)</title><rect x="334.0" y="339.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="337.0" y="350.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.09%)</title><rect x="334.0" y="323.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="337.0" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="334.0" y="307.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="337.0" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="334.0" y="291.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="337.0" y="302.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (38 samples, 3.45%)</title><rect x="335.0" y="339.0" width="40.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="338.0" y="350.0">com..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (28 samples, 2.55%)</title><rect x="345.8" y="323.0" width="30.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="348.8" y="334.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (28 samples, 2.55%)</title><rect x="345.8" y="307.0" width="30.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="348.8" y="318.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (28 samples, 2.55%)</title><rect x="345.8" y="291.0" width="30.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="348.8" y="302.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.18%)</title><rect x="345.8" y="275.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="348.8" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.18%)</title><rect x="345.8" y="259.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="348.8" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 0.18%)</title><rect x="345.8" y="243.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="348.8" y="254.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="346.8" y="227.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="349.8" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (26 samples, 2.36%)</title><rect x="347.9" y="275.0" width="27.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="350.9" y="286.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$304/877830578.accept (26 samples, 2.36%)</title><rect x="347.9" y="259.0" width="27.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="350.9" y="270.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (26 samples, 2.36%)</title><rect x="347.9" y="243.0" width="27.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="350.9" y="254.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (26 samples, 2.36%)</title><rect x="347.9" y="227.0" width="27.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="350.9" y="238.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (26 samples, 2.36%)</title><rect x="347.9" y="211.0" width="27.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="350.9" y="222.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (25 samples, 2.27%)</title><rect x="349.0" y="195.0" width="26.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="352.0" y="206.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (6 samples, 0.55%)</title><rect x="349.0" y="179.0" width="6.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="352.0" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (6 samples, 0.55%)</title><rect x="349.0" y="163.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="352.0" y="174.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$286/844450424.accept (2 samples, 0.18%)</title><rect x="352.2" y="147.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="355.2" y="158.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="354.3" y="147.0" width="1.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="357.3" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (19 samples, 1.73%)</title><rect x="355.4" y="179.0" width="20.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="358.4" y="190.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (152 samples, 13.82%)</title><rect x="375.8" y="339.0" width="163.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="378.8" y="350.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$45/1556995360.extract (152 samples, 13.82%)</title><rect x="375.8" y="323.0" width="163.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="378.8" y="334.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (152 samples, 13.82%)</title><rect x="375.8" y="307.0" width="163.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="378.8" y="318.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="375.8" y="291.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="378.8" y="302.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="375.8" y="275.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="378.8" y="286.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (151 samples, 13.73%)</title><rect x="376.9" y="291.0" width="162.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="379.9" y="302.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (151 samples, 13.73%)</title><rect x="376.9" y="275.0" width="162.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="379.9" y="286.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (151 samples, 13.73%)</title><rect x="376.9" y="259.0" width="162.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="379.9" y="270.0">com/fasterxml/jackson..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (56 samples, 5.09%)</title><rect x="376.9" y="243.0" width="60.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="379.9" y="254.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (20 samples, 1.82%)</title><rect x="376.9" y="227.0" width="21.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="379.9" y="238.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (20 samples, 1.82%)</title><rect x="376.9" y="211.0" width="21.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="379.9" y="222.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (13 samples, 1.18%)</title><rect x="376.9" y="195.0" width="13.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="379.9" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.getMask (3 samples, 0.27%)</title><rect x="387.6" y="179.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="390.6" y="190.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (7 samples, 0.64%)</title><rect x="390.8" y="195.0" width="7.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="393.8" y="206.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.27%)</title><rect x="394.0" y="179.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="397.0" y="190.0"></text>
</g>
<g>
<title>java/lang/ref/SoftReference.get (1 samples, 0.09%)</title><rect x="397.3" y="179.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="400.3" y="190.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (36 samples, 3.27%)</title><rect x="398.3" y="227.0" width="38.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="401.3" y="238.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (36 samples, 3.27%)</title><rect x="398.3" y="211.0" width="38.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="401.3" y="222.0">com..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="398.3" y="195.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="401.3" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.09%)</title><rect x="399.4" y="195.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="402.4" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.setEncoding (1 samples, 0.09%)</title><rect x="399.4" y="179.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="402.4" y="190.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (14 samples, 1.27%)</title><rect x="400.5" y="195.0" width="15.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="403.5" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.setEncoding (4 samples, 0.36%)</title><rect x="408.0" y="179.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="411.0" y="190.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (4 samples, 0.36%)</title><rect x="408.0" y="163.0" width="4.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="411.0" y="174.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.ensureLoaded (2 samples, 0.18%)</title><rect x="412.3" y="179.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="415.3" y="190.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.09%)</title><rect x="414.4" y="179.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="417.4" y="190.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (10 samples, 0.91%)</title><rect x="415.5" y="195.0" width="10.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="418.5" y="206.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="419.8" y="179.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="422.8" y="190.0"></text>
</g>
<g>
<title>_new_instance_Java (1 samples, 0.09%)</title><rect x="420.9" y="179.0" width="1.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="423.9" y="190.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (4 samples, 0.36%)</title><rect x="421.9" y="179.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="424.9" y="190.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (1 samples, 0.09%)</title><rect x="421.9" y="163.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="424.9" y="174.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="421.9" y="147.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="424.9" y="158.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="421.9" y="131.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="424.9" y="142.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="421.9" y="115.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="424.9" y="126.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="421.9" y="99.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="424.9" y="110.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="421.9" y="83.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="424.9" y="94.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="421.9" y="67.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="424.9" y="78.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.09%)</title><rect x="421.9" y="51.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="424.9" y="62.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (3 samples, 0.27%)</title><rect x="423.0" y="163.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="426.0" y="174.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (10 samples, 0.91%)</title><rect x="426.2" y="195.0" width="10.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="429.2" y="206.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="433.7" y="179.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="436.7" y="190.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="433.7" y="163.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="436.7" y="174.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="433.7" y="147.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="436.7" y="158.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.09%)</title><rect x="434.8" y="179.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="437.8" y="190.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (1 samples, 0.09%)</title><rect x="435.9" y="179.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="438.9" y="190.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (82 samples, 7.45%)</title><rect x="436.9" y="243.0" width="88.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="439.9" y="254.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (3 samples, 0.27%)</title><rect x="436.9" y="227.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="439.9" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (3 samples, 0.27%)</title><rect x="436.9" y="211.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="439.9" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (2 samples, 0.18%)</title><rect x="436.9" y="195.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="439.9" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (2 samples, 0.18%)</title><rect x="436.9" y="179.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="439.9" y="190.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.release (1 samples, 0.09%)</title><rect x="439.1" y="195.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="442.1" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.09%)</title><rect x="439.1" y="179.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="442.1" y="190.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.18%)</title><rect x="440.2" y="227.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="443.2" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.18%)</title><rect x="440.2" y="211.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="443.2" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (8 samples, 0.73%)</title><rect x="442.3" y="227.0" width="8.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="445.3" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (8 samples, 0.73%)</title><rect x="442.3" y="211.0" width="8.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="445.3" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (5 samples, 0.45%)</title><rect x="443.4" y="195.0" width="5.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="446.4" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (4 samples, 0.36%)</title><rect x="444.5" y="179.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="447.5" y="190.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.18%)</title><rect x="446.6" y="163.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="449.6" y="174.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.18%)</title><rect x="448.7" y="195.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="451.7" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.18%)</title><rect x="448.7" y="179.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="451.7" y="190.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (4 samples, 0.36%)</title><rect x="450.9" y="227.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="453.9" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 0.27%)</title><rect x="450.9" y="211.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="453.9" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.09%)</title><rect x="453.0" y="195.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="456.0" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.09%)</title><rect x="453.0" y="179.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="456.0" y="190.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.09%)</title><rect x="453.0" y="163.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="456.0" y="174.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="453.0" y="147.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="456.0" y="158.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="453.0" y="131.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="456.0" y="142.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="453.0" y="115.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="456.0" y="126.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="453.0" y="99.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="456.0" y="110.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="453.0" y="83.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="456.0" y="94.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="453.0" y="67.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="456.0" y="78.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.09%)</title><rect x="454.1" y="211.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="457.1" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (65 samples, 5.91%)</title><rect x="455.2" y="227.0" width="69.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="458.2" y="238.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (65 samples, 5.91%)</title><rect x="455.2" y="211.0" width="69.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="458.2" y="222.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (17 samples, 1.55%)</title><rect x="455.2" y="195.0" width="18.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="458.2" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.36%)</title><rect x="461.6" y="179.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="464.6" y="190.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.36%)</title><rect x="461.6" y="163.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="464.6" y="174.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.36%)</title><rect x="461.6" y="147.0" width="4.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="464.6" y="158.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (6 samples, 0.55%)</title><rect x="465.9" y="179.0" width="6.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="468.9" y="190.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.09%)</title><rect x="472.3" y="179.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="475.3" y="190.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.09%)</title><rect x="472.3" y="163.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="475.3" y="174.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (48 samples, 4.36%)</title><rect x="473.4" y="195.0" width="51.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="476.4" y="206.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.09%)</title><rect x="475.6" y="179.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="478.6" y="190.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.09%)</title><rect x="475.6" y="163.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="478.6" y="174.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.09%)</title><rect x="475.6" y="147.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="478.6" y="158.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.09%)</title><rect x="475.6" y="131.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="478.6" y="142.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (45 samples, 4.09%)</title><rect x="476.6" y="179.0" width="48.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="479.6" y="190.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (44 samples, 4.00%)</title><rect x="477.7" y="163.0" width="47.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="480.7" y="174.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (23 samples, 2.09%)</title><rect x="483.1" y="147.0" width="24.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="486.1" y="158.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (9 samples, 0.82%)</title><rect x="491.7" y="131.0" width="9.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="494.7" y="142.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (9 samples, 0.82%)</title><rect x="491.7" y="115.0" width="9.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="494.7" y="126.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (9 samples, 0.82%)</title><rect x="491.7" y="99.0" width="9.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="494.7" y="110.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (8 samples, 0.73%)</title><rect x="492.7" y="83.0" width="8.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="495.7" y="94.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (8 samples, 0.73%)</title><rect x="492.7" y="67.0" width="8.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="495.7" y="78.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.18%)</title><rect x="499.2" y="51.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="502.2" y="62.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (2 samples, 0.18%)</title><rect x="499.2" y="35.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="502.2" y="46.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (4 samples, 0.36%)</title><rect x="501.3" y="131.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="504.3" y="142.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.09%)</title><rect x="505.6" y="131.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="508.6" y="142.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.09%)</title><rect x="505.6" y="115.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="508.6" y="126.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.09%)</title><rect x="506.7" y="131.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="509.7" y="142.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (6 samples, 0.55%)</title><rect x="507.7" y="147.0" width="6.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="510.7" y="158.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (5 samples, 0.45%)</title><rect x="508.8" y="131.0" width="5.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="511.8" y="142.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 0.45%)</title><rect x="508.8" y="115.0" width="5.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="511.8" y="126.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 0.45%)</title><rect x="508.8" y="99.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="511.8" y="110.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (5 samples, 0.45%)</title><rect x="508.8" y="83.0" width="5.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="511.8" y="94.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (5 samples, 0.45%)</title><rect x="514.2" y="147.0" width="5.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="517.2" y="158.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (5 samples, 0.45%)</title><rect x="514.2" y="131.0" width="5.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="517.2" y="142.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (5 samples, 0.45%)</title><rect x="514.2" y="115.0" width="5.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="517.2" y="126.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (5 samples, 0.45%)</title><rect x="514.2" y="99.0" width="5.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="517.2" y="110.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (5 samples, 0.45%)</title><rect x="514.2" y="83.0" width="5.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="517.2" y="94.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (5 samples, 0.45%)</title><rect x="514.2" y="67.0" width="5.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="517.2" y="78.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (5 samples, 0.45%)</title><rect x="514.2" y="51.0" width="5.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="517.2" y="62.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (3 samples, 0.27%)</title><rect x="519.5" y="147.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="522.5" y="158.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.27%)</title><rect x="519.5" y="131.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="522.5" y="142.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.27%)</title><rect x="519.5" y="115.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="522.5" y="126.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (2 samples, 0.18%)</title><rect x="522.8" y="147.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="525.8" y="158.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 0.18%)</title><rect x="522.8" y="131.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="525.8" y="142.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (13 samples, 1.18%)</title><rect x="524.9" y="243.0" width="14.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="527.9" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (13 samples, 1.18%)</title><rect x="524.9" y="227.0" width="14.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="527.9" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (13 samples, 1.18%)</title><rect x="524.9" y="211.0" width="14.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="527.9" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (13 samples, 1.18%)</title><rect x="524.9" y="195.0" width="14.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="527.9" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.55%)</title><rect x="532.4" y="179.0" width="6.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="535.4" y="190.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (300 samples, 27.27%)</title><rect x="538.9" y="339.0" width="321.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="541.9" y="350.0">com/linecorp/decaton/processor/runtime/inte..</text>
</g>
<g>
<title>__clock_gettime (8 samples, 0.73%)</title><rect x="546.4" y="323.0" width="8.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="549.4" y="334.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.73%)</title><rect x="546.4" y="307.0" width="8.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="549.4" y="318.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (47 samples, 4.27%)</title><rect x="554.9" y="323.0" width="50.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="557.9" y="334.0">com/l..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (46 samples, 4.18%)</title><rect x="556.0" y="307.0" width="49.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="559.0" y="318.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (43 samples, 3.91%)</title><rect x="559.2" y="291.0" width="46.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="562.2" y="302.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (6 samples, 0.55%)</title><rect x="560.3" y="275.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="563.3" y="286.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (6 samples, 0.55%)</title><rect x="560.3" y="259.0" width="6.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="563.3" y="270.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (6 samples, 0.55%)</title><rect x="560.3" y="243.0" width="6.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="563.3" y="254.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (6 samples, 0.55%)</title><rect x="560.3" y="227.0" width="6.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="563.3" y="238.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (29 samples, 2.64%)</title><rect x="566.7" y="275.0" width="31.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="569.7" y="286.0">ja..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (29 samples, 2.64%)</title><rect x="566.7" y="259.0" width="31.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="569.7" y="270.0">ja..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (29 samples, 2.64%)</title><rect x="566.7" y="243.0" width="31.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="569.7" y="254.0">ja..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (29 samples, 2.64%)</title><rect x="566.7" y="227.0" width="31.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="569.7" y="238.0">ja..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (7 samples, 0.64%)</title><rect x="597.9" y="275.0" width="7.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="600.9" y="286.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.64%)</title><rect x="605.4" y="323.0" width="7.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="608.4" y="334.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="605.4" y="307.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="608.4" y="318.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="605.4" y="291.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="608.4" y="302.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="605.4" y="275.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="608.4" y="286.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="605.4" y="259.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="608.4" y="270.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="605.4" y="243.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="608.4" y="254.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (6 samples, 0.55%)</title><rect x="606.4" y="307.0" width="6.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="609.4" y="318.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (178 samples, 16.18%)</title><rect x="612.9" y="323.0" width="190.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="615.9" y="334.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="613.9" y="307.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="616.9" y="318.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="613.9" y="291.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="616.9" y="302.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="613.9" y="275.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="616.9" y="286.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="613.9" y="259.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="616.9" y="270.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.09%)</title><rect x="613.9" y="243.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="616.9" y="254.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (172 samples, 15.64%)</title><rect x="615.0" y="307.0" width="184.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="618.0" y="318.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (54 samples, 4.91%)</title><rect x="630.0" y="291.0" width="58.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="633.0" y="302.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (54 samples, 4.91%)</title><rect x="630.0" y="275.0" width="58.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="633.0" y="286.0">java/l..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (36 samples, 3.27%)</title><rect x="640.8" y="259.0" width="38.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="643.8" y="270.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (32 samples, 2.91%)</title><rect x="641.8" y="243.0" width="34.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="644.8" y="254.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (32 samples, 2.91%)</title><rect x="641.8" y="227.0" width="34.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="644.8" y="238.0">ja..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (32 samples, 2.91%)</title><rect x="641.8" y="211.0" width="34.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="644.8" y="222.0">ja..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (13 samples, 1.18%)</title><rect x="655.8" y="195.0" width="13.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="658.8" y="206.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (4 samples, 0.36%)</title><rect x="656.9" y="179.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="659.9" y="190.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (4 samples, 0.36%)</title><rect x="656.9" y="163.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="659.9" y="174.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (3 samples, 0.27%)</title><rect x="656.9" y="147.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="659.9" y="158.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (2 samples, 0.18%)</title><rect x="656.9" y="131.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="659.9" y="142.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="657.9" y="115.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="660.9" y="126.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.09%)</title><rect x="659.0" y="131.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="662.0" y="142.0"></text>
</g>
<g>
<title>nmethod::is_nmethod() const (1 samples, 0.09%)</title><rect x="660.1" y="147.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="663.1" y="158.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (7 samples, 0.64%)</title><rect x="661.1" y="179.0" width="7.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="664.1" y="190.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (4 samples, 0.36%)</title><rect x="664.4" y="163.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="667.4" y="174.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="664.4" y="147.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="667.4" y="158.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.09%)</title><rect x="665.4" y="147.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="668.4" y="158.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="666.5" y="147.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="669.5" y="158.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.09%)</title><rect x="666.5" y="131.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="669.5" y="142.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.09%)</title><rect x="667.6" y="147.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="670.6" y="158.0"></text>
</g>
<g>
<title>nmethod::get_deopt_original_pc(frame const*) (1 samples, 0.09%)</title><rect x="668.7" y="179.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="671.7" y="190.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.55%)</title><rect x="669.7" y="195.0" width="6.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="672.7" y="206.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.27%)</title><rect x="676.2" y="243.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="679.2" y="254.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.18%)</title><rect x="679.4" y="259.0" width="2.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="682.4" y="270.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.55%)</title><rect x="681.5" y="259.0" width="6.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="684.5" y="270.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (19 samples, 1.73%)</title><rect x="688.0" y="291.0" width="20.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="691.0" y="302.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (10 samples, 0.91%)</title><rect x="688.0" y="275.0" width="10.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="691.0" y="286.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="688.0" y="259.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="691.0" y="270.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="688.0" y="243.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="691.0" y="254.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (9 samples, 0.82%)</title><rect x="689.0" y="259.0" width="9.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="692.0" y="270.0"></text>
</g>
<g>
<title>java/lang/Long.toString (9 samples, 0.82%)</title><rect x="698.7" y="275.0" width="9.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="701.7" y="286.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (9 samples, 0.82%)</title><rect x="698.7" y="259.0" width="9.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="701.7" y="270.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="708.3" y="291.0" width="1.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="711.3" y="302.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (84 samples, 7.64%)</title><rect x="709.4" y="291.0" width="90.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="712.4" y="302.0">org/slf4j/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (82 samples, 7.45%)</title><rect x="711.6" y="275.0" width="87.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="714.6" y="286.0">ch/qos/log..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 0.45%)</title><rect x="711.6" y="259.0" width="5.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="714.6" y="270.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.45%)</title><rect x="711.6" y="243.0" width="5.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="714.6" y="254.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 0.45%)</title><rect x="711.6" y="227.0" width="5.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="714.6" y="238.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.45%)</title><rect x="711.6" y="211.0" width="5.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="714.6" y="222.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="716.9" y="259.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="719.9" y="270.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="716.9" y="243.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="719.9" y="254.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="716.9" y="227.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="719.9" y="238.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.09%)</title><rect x="716.9" y="211.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="719.9" y="222.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (76 samples, 6.91%)</title><rect x="718.0" y="259.0" width="81.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="721.0" y="270.0">java/util..</text>
</g>
<g>
<title>java/util/HashMap.put (71 samples, 6.45%)</title><rect x="723.4" y="243.0" width="76.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="726.4" y="254.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.putVal (41 samples, 3.73%)</title><rect x="755.5" y="227.0" width="44.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="758.5" y="238.0">java..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (6 samples, 0.55%)</title><rect x="773.8" y="211.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="776.8" y="222.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (12 samples, 1.09%)</title><rect x="780.2" y="211.0" width="12.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="783.2" y="222.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="792.0" y="195.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="795.0" y="206.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="792.0" y="179.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="795.0" y="190.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="792.0" y="163.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="795.0" y="174.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="792.0" y="147.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="795.0" y="158.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="792.0" y="131.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="795.0" y="142.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="792.0" y="115.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="795.0" y="126.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="792.0" y="99.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="795.0" y="110.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.09%)</title><rect x="792.0" y="83.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="795.0" y="94.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.09%)</title><rect x="792.0" y="67.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="795.0" y="78.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.09%)</title><rect x="792.0" y="51.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="795.0" y="62.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.09%)</title><rect x="792.0" y="35.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="795.0" y="46.0"></text>
</g>
<g>
<title>vtable stub (6 samples, 0.55%)</title><rect x="793.1" y="211.0" width="6.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="796.1" y="222.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (4 samples, 0.36%)</title><rect x="799.5" y="307.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="802.5" y="318.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (4 samples, 0.36%)</title><rect x="799.5" y="291.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="802.5" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.36%)</title><rect x="799.5" y="275.0" width="4.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="802.5" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.36%)</title><rect x="799.5" y="259.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="802.5" y="270.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.18%)</title><rect x="800.6" y="243.0" width="2.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="803.6" y="254.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.18%)</title><rect x="800.6" y="227.0" width="2.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="803.6" y="238.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.09%)</title><rect x="802.7" y="243.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="805.7" y="254.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (42 samples, 3.82%)</title><rect x="803.8" y="323.0" width="45.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="806.8" y="334.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (42 samples, 3.82%)</title><rect x="803.8" y="307.0" width="45.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="806.8" y="318.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$210/1433986946.process (16 samples, 1.45%)</title><rect x="807.0" y="291.0" width="17.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="810.0" y="302.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (16 samples, 1.45%)</title><rect x="807.0" y="275.0" width="17.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="810.0" y="286.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (13 samples, 1.18%)</title><rect x="807.0" y="259.0" width="14.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="810.0" y="270.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (4 samples, 0.36%)</title><rect x="808.1" y="243.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="811.1" y="254.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (4 samples, 0.36%)</title><rect x="808.1" y="227.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="811.1" y="238.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (4 samples, 0.36%)</title><rect x="808.1" y="211.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="811.1" y="222.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (4 samples, 0.36%)</title><rect x="808.1" y="195.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="811.1" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (3 samples, 0.27%)</title><rect x="809.2" y="179.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="812.2" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.09%)</title><rect x="811.3" y="163.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="814.3" y="174.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (3 samples, 0.27%)</title><rect x="812.4" y="243.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="815.4" y="254.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.27%)</title><rect x="812.4" y="227.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="815.4" y="238.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.27%)</title><rect x="812.4" y="211.0" width="3.2" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="815.4" y="222.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.45%)</title><rect x="815.6" y="243.0" width="5.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="818.6" y="254.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.27%)</title><rect x="821.0" y="259.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="824.0" y="270.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.27%)</title><rect x="821.0" y="243.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="824.0" y="254.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.27%)</title><rect x="821.0" y="227.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="824.0" y="238.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.27%)</title><rect x="821.0" y="211.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="824.0" y="222.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.27%)</title><rect x="821.0" y="195.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="824.0" y="206.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (4 samples, 0.36%)</title><rect x="824.2" y="291.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="827.2" y="302.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (4 samples, 0.36%)</title><rect x="824.2" y="275.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="827.2" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (4 samples, 0.36%)</title><rect x="824.2" y="259.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="827.2" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (4 samples, 0.36%)</title><rect x="824.2" y="243.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="827.2" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (4 samples, 0.36%)</title><rect x="824.2" y="227.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="827.2" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 0.36%)</title><rect x="824.2" y="211.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="827.2" y="222.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$210/1433986946.process (1 samples, 0.09%)</title><rect x="827.4" y="195.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="830.4" y="206.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.45%)</title><rect x="828.5" y="291.0" width="5.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="831.5" y="302.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.45%)</title><rect x="828.5" y="275.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="831.5" y="286.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.09%)</title><rect x="833.9" y="291.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="836.9" y="302.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.09%)</title><rect x="833.9" y="275.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="836.9" y="286.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (1 samples, 0.09%)</title><rect x="833.9" y="259.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="836.9" y="270.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (8 samples, 0.73%)</title><rect x="834.9" y="291.0" width="8.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="837.9" y="302.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.55%)</title><rect x="837.1" y="275.0" width="6.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="840.1" y="286.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.18%)</title><rect x="838.1" y="259.0" width="2.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="841.1" y="270.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (3 samples, 0.27%)</title><rect x="840.3" y="259.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="843.3" y="270.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (4 samples, 0.36%)</title><rect x="843.5" y="291.0" width="4.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="846.5" y="302.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (4 samples, 0.36%)</title><rect x="843.5" y="275.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="846.5" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.09%)</title><rect x="847.8" y="291.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="850.8" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.09%)</title><rect x="847.8" y="275.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="850.8" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.09%)</title><rect x="847.8" y="259.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="850.8" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.09%)</title><rect x="847.8" y="243.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="850.8" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.09%)</title><rect x="847.8" y="227.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="850.8" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.09%)</title><rect x="847.8" y="211.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="850.8" y="222.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$297/745661547.accept (1 samples, 0.09%)</title><rect x="847.8" y="195.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="850.8" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1473219850.linkToTargetMethod (1 samples, 0.09%)</title><rect x="848.9" y="323.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="851.9" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/263025902.invokeStatic_L3_L (1 samples, 0.09%)</title><rect x="848.9" y="307.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="851.9" y="318.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$298/1281235748.get$Lambda (1 samples, 0.09%)</title><rect x="848.9" y="291.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="851.9" y="302.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="848.9" y="275.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="851.9" y="286.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="848.9" y="259.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="851.9" y="270.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.09%)</title><rect x="848.9" y="243.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="851.9" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 0.91%)</title><rect x="849.9" y="323.0" width="10.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="852.9" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 0.91%)</title><rect x="849.9" y="307.0" width="10.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="852.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (10 samples, 0.91%)</title><rect x="849.9" y="291.0" width="10.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="852.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (4 samples, 0.36%)</title><rect x="849.9" y="275.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="852.9" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.18%)</title><rect x="849.9" y="259.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="852.9" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 0.18%)</title><rect x="849.9" y="243.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="852.9" y="254.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$298/1281235748.accept (2 samples, 0.18%)</title><rect x="849.9" y="227.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="852.9" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.18%)</title><rect x="852.1" y="259.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="855.1" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 0.55%)</title><rect x="854.2" y="275.0" width="6.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="857.2" y="286.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$298/1281235748.accept (5 samples, 0.45%)</title><rect x="855.3" y="259.0" width="5.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="858.3" y="270.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$57 (5 samples, 0.45%)</title><rect x="855.3" y="243.0" width="5.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="858.3" y="254.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (5 samples, 0.45%)</title><rect x="855.3" y="227.0" width="5.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="858.3" y="238.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (5 samples, 0.45%)</title><rect x="855.3" y="211.0" width="5.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="858.3" y="222.0"></text>
</g>
<g>
<title>java/time/Duration.create (5 samples, 0.45%)</title><rect x="855.3" y="195.0" width="5.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="858.3" y="206.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.27%)</title><rect x="857.5" y="179.0" width="3.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="860.5" y="190.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.27%)</title><rect x="857.5" y="163.0" width="3.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="860.5" y="174.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.36%)</title><rect x="860.7" y="339.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="863.7" y="350.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.36%)</title><rect x="860.7" y="323.0" width="4.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="863.7" y="334.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (4 samples, 0.36%)</title><rect x="865.0" y="355.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="868.0" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (3 samples, 0.27%)</title><rect x="866.0" y="339.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="869.0" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (14 samples, 1.27%)</title><rect x="869.3" y="403.0" width="15.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="872.3" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (14 samples, 1.27%)</title><rect x="869.3" y="387.0" width="15.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="872.3" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (14 samples, 1.27%)</title><rect x="869.3" y="371.0" width="15.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="872.3" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (14 samples, 1.27%)</title><rect x="869.3" y="355.0" width="15.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="872.3" y="366.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="875.7" y="339.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="878.7" y="350.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="875.7" y="323.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="878.7" y="334.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.36%)</title><rect x="876.8" y="339.0" width="4.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="879.8" y="350.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.36%)</title><rect x="876.8" y="323.0" width="4.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="879.8" y="334.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (2 samples, 0.18%)</title><rect x="881.1" y="339.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="884.1" y="350.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="883.2" y="339.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="886.2" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (222 samples, 20.18%)</title><rect x="884.3" y="403.0" width="238.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="887.3" y="414.0">java/util/concurrent/ThreadPoolE..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (222 samples, 20.18%)</title><rect x="884.3" y="387.0" width="238.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="887.3" y="398.0">java/util/concurrent/LinkedBlock..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (198 samples, 18.00%)</title><rect x="890.7" y="371.0" width="212.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="893.7" y="382.0">java/util/concurrent/locks/A..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.checkInterruptWhileWaiting (21 samples, 1.91%)</title><rect x="897.1" y="355.0" width="22.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="900.1" y="366.0">j..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (21 samples, 1.91%)</title><rect x="897.1" y="339.0" width="22.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="900.1" y="350.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (5 samples, 0.45%)</title><rect x="919.7" y="355.0" width="5.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="922.7" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.45%)</title><rect x="919.7" y="339.0" width="5.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="922.7" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.45%)</title><rect x="919.7" y="323.0" width="5.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="922.7" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.45%)</title><rect x="919.7" y="307.0" width="5.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="922.7" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (166 samples, 15.09%)</title><rect x="925.0" y="355.0" width="178.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="928.0" y="366.0">java/util/concurrent/lo..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (166 samples, 15.09%)</title><rect x="925.0" y="339.0" width="178.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="928.0" y="350.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (3 samples, 0.27%)</title><rect x="934.7" y="323.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="937.7" y="334.0"></text>
</g>
<g>
<title>Unsafe_Park (147 samples, 13.36%)</title><rect x="937.9" y="323.0" width="157.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="940.9" y="334.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="941.1" y="307.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="944.1" y="318.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (2 samples, 0.18%)</title><rect x="942.2" y="307.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="945.2" y="318.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (27 samples, 2.45%)</title><rect x="944.3" y="307.0" width="29.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="947.3" y="318.0">Pa..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (6 samples, 0.55%)</title><rect x="952.9" y="291.0" width="6.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="955.9" y="302.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.18%)</title><rect x="955.1" y="275.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="958.1" y="286.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.18%)</title><rect x="957.2" y="275.0" width="2.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="960.2" y="286.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (12 samples, 1.09%)</title><rect x="959.4" y="291.0" width="12.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="962.4" y="302.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="972.2" y="291.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="975.2" y="302.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="973.3" y="307.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="976.3" y="318.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.09%)</title><rect x="974.4" y="307.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="977.4" y="318.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.27%)</title><rect x="975.5" y="307.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="978.5" y="318.0"></text>
</g>
<g>
<title>__lll_lock_wait (3 samples, 0.27%)</title><rect x="978.7" y="307.0" width="3.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="981.7" y="318.0"></text>
</g>
<g>
<title>__lll_unlock_wake (30 samples, 2.73%)</title><rect x="981.9" y="307.0" width="32.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="984.9" y="318.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (53 samples, 4.82%)</title><rect x="1014.1" y="307.0" width="56.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1017.1" y="318.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (9 samples, 0.82%)</title><rect x="1070.9" y="307.0" width="9.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1073.9" y="318.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (3 samples, 0.27%)</title><rect x="1080.6" y="307.0" width="3.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1083.6" y="318.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.09%)</title><rect x="1083.8" y="307.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1086.8" y="318.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.45%)</title><rect x="1084.9" y="307.0" width="5.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1087.9" y="318.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.09%)</title><rect x="1090.2" y="307.0" width="1.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1093.2" y="318.0"></text>
</g>
<g>
<title>_init (1 samples, 0.09%)</title><rect x="1091.3" y="307.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1094.3" y="318.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.09%)</title><rect x="1092.4" y="307.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1095.4" y="318.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="1093.5" y="307.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1096.5" y="318.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1094.5" y="307.0" width="1.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1097.5" y="318.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (5 samples, 0.45%)</title><rect x="1095.6" y="323.0" width="5.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1098.6" y="334.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.18%)</title><rect x="1101.0" y="323.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1104.0" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (18 samples, 1.64%)</title><rect x="1103.1" y="371.0" width="19.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1106.1" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (18 samples, 1.64%)</title><rect x="1103.1" y="355.0" width="19.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1106.1" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (18 samples, 1.64%)</title><rect x="1103.1" y="339.0" width="19.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1106.1" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (18 samples, 1.64%)</title><rect x="1103.1" y="323.0" width="19.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1106.1" y="334.0"></text>
</g>
<g>
<title>msort_with_tmp.part.0 (1 samples, 0.09%)</title><rect x="1122.4" y="451.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1125.4" y="462.0"></text>
</g>
<g>
<title>start_thread (62 samples, 5.64%)</title><rect x="1123.5" y="451.0" width="66.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1126.5" y="462.0">start_t..</text>
</g>
<g>
<title>java_start(Thread*) (62 samples, 5.64%)</title><rect x="1123.5" y="435.0" width="66.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1126.5" y="446.0">java_st..</text>
</g>
<g>
<title>GangWorker::loop() (20 samples, 1.82%)</title><rect x="1123.5" y="419.0" width="21.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1126.5" y="430.0">G..</text>
</g>
<g>
<title>G1ParCleanupCTTask::work(unsigned int) (1 samples, 0.09%)</title><rect x="1123.5" y="403.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1126.5" y="414.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1123.5" y="387.0" width="1.1" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1126.5" y="398.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (4 samples, 0.36%)</title><rect x="1124.6" y="403.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1127.6" y="414.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 0.36%)</title><rect x="1124.6" y="387.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1127.6" y="398.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.36%)</title><rect x="1124.6" y="371.0" width="4.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1127.6" y="382.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (14 samples, 1.27%)</title><rect x="1128.9" y="403.0" width="15.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1131.9" y="414.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.27%)</title><rect x="1128.9" y="387.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1131.9" y="398.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.18%)</title><rect x="1128.9" y="371.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1131.9" y="382.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.09%)</title><rect x="1131.0" y="371.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1134.0" y="382.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (4 samples, 0.36%)</title><rect x="1132.1" y="387.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1135.1" y="398.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.09%)</title><rect x="1132.1" y="371.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1135.1" y="382.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.09%)</title><rect x="1133.1" y="371.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1136.1" y="382.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1133.1" y="355.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1136.1" y="366.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1133.1" y="339.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.1" y="350.0"></text>
</g>
<g>
<title>RelocIterator::advance_over_prefix() (1 samples, 0.09%)</title><rect x="1133.1" y="323.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1136.1" y="334.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.18%)</title><rect x="1134.2" y="371.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1137.2" y="382.0"></text>
</g>
<g>
<title>Management::oops_do(OopClosure*) (1 samples, 0.09%)</title><rect x="1134.2" y="355.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1137.2" y="366.0"></text>
</g>
<g>
<title>MemoryService::oops_do(OopClosure*) (1 samples, 0.09%)</title><rect x="1134.2" y="339.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1137.2" y="350.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.09%)</title><rect x="1134.2" y="323.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1137.2" y="334.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.09%)</title><rect x="1134.2" y="307.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1137.2" y="318.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.09%)</title><rect x="1134.2" y="291.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1137.2" y="302.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.09%)</title><rect x="1134.2" y="275.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.2" y="286.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.09%)</title><rect x="1135.3" y="355.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1138.3" y="366.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (7 samples, 0.64%)</title><rect x="1136.4" y="387.0" width="7.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1139.4" y="398.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (7 samples, 0.64%)</title><rect x="1136.4" y="371.0" width="7.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1139.4" y="382.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (6 samples, 0.55%)</title><rect x="1136.4" y="355.0" width="6.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1139.4" y="366.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (6 samples, 0.55%)</title><rect x="1136.4" y="339.0" width="6.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1139.4" y="350.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (6 samples, 0.55%)</title><rect x="1136.4" y="323.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1139.4" y="334.0"></text>
</g>
<g>
<title>FilterOutOfRegionClosure::FilterOutOfRegionClosure(HeapRegion*, OopClosure*) (1 samples, 0.09%)</title><rect x="1137.4" y="307.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1140.4" y="318.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (4 samples, 0.36%)</title><rect x="1138.5" y="307.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1141.5" y="318.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.09%)</title><rect x="1141.7" y="291.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1144.7" y="302.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.09%)</title><rect x="1141.7" y="275.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1144.7" y="286.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.09%)</title><rect x="1142.8" y="355.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1145.8" y="366.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.09%)</title><rect x="1142.8" y="339.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.8" y="350.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.09%)</title><rect x="1142.8" y="323.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1145.8" y="334.0"></text>
</g>
<g>
<title>HeapRegionRemSetIterator::has_next(unsigned long&amp;) (1 samples, 0.09%)</title><rect x="1142.8" y="307.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1145.8" y="318.0"></text>
</g>
<g>
<title>RSHashTableIter::has_next(unsigned long&amp;) (1 samples, 0.09%)</title><rect x="1142.8" y="291.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1145.8" y="302.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.09%)</title><rect x="1143.9" y="403.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1146.9" y="414.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.09%)</title><rect x="1143.9" y="387.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1146.9" y="398.0"></text>
</g>
<g>
<title>JavaThread::run() (41 samples, 3.73%)</title><rect x="1144.9" y="419.0" width="44.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1147.9" y="430.0">Java..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (41 samples, 3.73%)</title><rect x="1144.9" y="403.0" width="44.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1147.9" y="414.0">Java..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (41 samples, 3.73%)</title><rect x="1144.9" y="387.0" width="44.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1147.9" y="398.0">Comp..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (40 samples, 3.64%)</title><rect x="1144.9" y="371.0" width="43.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1147.9" y="382.0">Comp..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (40 samples, 3.64%)</title><rect x="1144.9" y="355.0" width="43.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.9" y="366.0">C2Co..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (40 samples, 3.64%)</title><rect x="1144.9" y="339.0" width="43.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1147.9" y="350.0">Comp..</text>
</g>
<g>
<title>Compile::Code_Gen() (16 samples, 1.45%)</title><rect x="1144.9" y="323.0" width="17.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1147.9" y="334.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.09%)</title><rect x="1144.9" y="307.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1147.9" y="318.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.09%)</title><rect x="1144.9" y="291.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.9" y="302.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.09%)</title><rect x="1144.9" y="275.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1147.9" y="286.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.09%)</title><rect x="1144.9" y="259.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1147.9" y="270.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.18%)</title><rect x="1146.0" y="307.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1149.0" y="318.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.18%)</title><rect x="1146.0" y="291.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.0" y="302.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.09%)</title><rect x="1147.1" y="275.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1150.1" y="286.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.09%)</title><rect x="1147.1" y="259.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1150.1" y="270.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1147.1" y="243.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.1" y="254.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1147.1" y="227.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.1" y="238.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1147.1" y="211.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1150.1" y="222.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1147.1" y="195.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1150.1" y="206.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.18%)</title><rect x="1148.2" y="307.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.2" y="318.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.18%)</title><rect x="1148.2" y="291.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.2" y="302.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1148.2" y="275.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.2" y="286.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.09%)</title><rect x="1148.2" y="259.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1151.2" y="270.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="1148.2" y="243.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1151.2" y="254.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.09%)</title><rect x="1148.2" y="227.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1151.2" y="238.0"></text>
</g>
<g>
<title>loadLNode::ideal_Opcode() const (1 samples, 0.09%)</title><rect x="1149.2" y="275.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.2" y="286.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (11 samples, 1.00%)</title><rect x="1150.3" y="307.0" width="11.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1153.3" y="318.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.09%)</title><rect x="1150.3" y="291.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.3" y="302.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1150.3" y="275.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.3" y="286.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.09%)</title><rect x="1151.4" y="291.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.4" y="302.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.09%)</title><rect x="1151.4" y="275.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.4" y="286.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 0.18%)</title><rect x="1152.5" y="291.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1155.5" y="302.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.09%)</title><rect x="1153.5" y="275.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.5" y="286.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.09%)</title><rect x="1153.5" y="259.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1156.5" y="270.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 0.27%)</title><rect x="1154.6" y="291.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1157.6" y="302.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.27%)</title><rect x="1154.6" y="275.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.6" y="286.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.09%)</title><rect x="1155.7" y="259.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.7" y="270.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1156.7" y="259.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.7" y="270.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.09%)</title><rect x="1157.8" y="291.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1160.8" y="302.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.09%)</title><rect x="1157.8" y="275.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.8" y="286.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (2 samples, 0.18%)</title><rect x="1158.9" y="291.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.9" y="302.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.09%)</title><rect x="1160.0" y="275.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.0" y="286.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.09%)</title><rect x="1161.0" y="291.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.0" y="302.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1161.0" y="275.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.0" y="286.0"></text>
</g>
<g>
<title>Compile::Optimize() (18 samples, 1.64%)</title><rect x="1162.1" y="323.0" width="19.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.1" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.09%)</title><rect x="1162.1" y="307.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.1" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.09%)</title><rect x="1162.1" y="291.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.1" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.09%)</title><rect x="1162.1" y="275.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.1" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field(Node*, PointsToNode::EscapeState, int) (1 samples, 0.09%)</title><rect x="1162.1" y="259.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.1" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::is_oop_field(Node*, int, bool*) (1 samples, 0.09%)</title><rect x="1162.1" y="243.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.1" y="254.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1162.1" y="227.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.1" y="238.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1162.1" y="211.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.1" y="222.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1162.1" y="195.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.1" y="206.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1162.1" y="179.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1165.1" y="190.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.09%)</title><rect x="1162.1" y="163.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.1" y="174.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (13 samples, 1.18%)</title><rect x="1163.2" y="307.0" width="13.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.2" y="318.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.18%)</title><rect x="1163.2" y="291.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.2" y="302.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.36%)</title><rect x="1165.3" y="291.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.3" y="302.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.09%)</title><rect x="1168.5" y="275.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.5" y="286.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.09%)</title><rect x="1168.5" y="259.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1171.5" y="270.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 0.55%)</title><rect x="1169.6" y="291.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.6" y="302.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (4 samples, 0.36%)</title><rect x="1171.8" y="275.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.8" y="286.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (3 samples, 0.27%)</title><rect x="1171.8" y="259.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.8" y="270.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1173.9" y="243.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.9" y="254.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.09%)</title><rect x="1175.0" y="259.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.0" y="270.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1176.1" y="291.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.1" y="302.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1176.1" y="275.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.1" y="286.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1176.1" y="259.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.1" y="270.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1176.1" y="243.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.1" y="254.0"></text>
</g>
<g>
<title>TypeAry::ary_must_be_exact() const (1 samples, 0.09%)</title><rect x="1176.1" y="227.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.1" y="238.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.36%)</title><rect x="1177.1" y="307.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.1" y="318.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 0.36%)</title><rect x="1177.1" y="291.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.1" y="302.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1177.1" y="275.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.1" y="286.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (1 samples, 0.09%)</title><rect x="1177.1" y="259.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.1" y="270.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1177.1" y="243.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.1" y="254.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1177.1" y="227.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.1" y="238.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1178.2" y="275.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.2" y="286.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.09%)</title><rect x="1178.2" y="259.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.2" y="270.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1179.3" y="275.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.3" y="286.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.09%)</title><rect x="1179.3" y="259.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.3" y="270.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1180.3" y="275.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.3" y="286.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.09%)</title><rect x="1180.3" y="259.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.3" y="270.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1180.3" y="243.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.3" y="254.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1180.3" y="227.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.3" y="238.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1180.3" y="211.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.3" y="222.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1180.3" y="195.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.3" y="206.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1180.3" y="179.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.3" y="190.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1180.3" y="163.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.3" y="174.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1180.3" y="147.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.3" y="158.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1180.3" y="131.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.3" y="142.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1180.3" y="115.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.3" y="126.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1180.3" y="99.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.3" y="110.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1180.3" y="83.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.3" y="94.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.36%)</title><rect x="1181.4" y="323.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.4" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.36%)</title><rect x="1181.4" y="307.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.36%)</title><rect x="1181.4" y="291.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.36%)</title><rect x="1181.4" y="275.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.4" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.36%)</title><rect x="1181.4" y="259.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.4" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.27%)</title><rect x="1181.4" y="243.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.4" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.27%)</title><rect x="1181.4" y="227.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.4" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.27%)</title><rect x="1181.4" y="211.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.4" y="222.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.09%)</title><rect x="1181.4" y="195.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.4" y="206.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.09%)</title><rect x="1181.4" y="179.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.4" y="190.0"></text>
</g>
<g>
<title>JVMState::clone_shallow(Compile*) const (1 samples, 0.09%)</title><rect x="1181.4" y="163.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.4" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1182.5" y="195.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.5" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1182.5" y="179.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.5" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1182.5" y="163.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.5" y="174.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.09%)</title><rect x="1182.5" y="147.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.5" y="158.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1182.5" y="131.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.5" y="142.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1182.5" y="115.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.5" y="126.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.09%)</title><rect x="1183.6" y="147.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.6" y="158.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.09%)</title><rect x="1183.6" y="131.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.6" y="142.0"></text>
</g>
<g>
<title>Node::operator new(unsigned long, Compile*) (1 samples, 0.09%)</title><rect x="1183.6" y="115.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.6" y="126.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="1183.6" y="99.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.6" y="110.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.09%)</title><rect x="1183.6" y="83.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.6" y="94.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="1183.6" y="67.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.6" y="78.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1184.6" y="243.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.6" y="254.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1184.6" y="227.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.6" y="238.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.09%)</title><rect x="1184.6" y="211.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.6" y="222.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1184.6" y="195.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.6" y="206.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1184.6" y="179.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.6" y="190.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1184.6" y="163.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.6" y="174.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.09%)</title><rect x="1184.6" y="147.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.6" y="158.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields() (1 samples, 0.09%)</title><rect x="1184.6" y="131.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.6" y="142.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields_impl(GrowableArray&lt;ciField*&gt;*) (1 samples, 0.09%)</title><rect x="1184.6" y="115.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.6" y="126.0"></text>
</g>
<g>
<title>ciField::ciField(fieldDescriptor*) (1 samples, 0.09%)</title><rect x="1184.6" y="99.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.6" y="110.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.09%)</title><rect x="1184.6" y="83.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.6" y="94.0"></text>
</g>
<g>
<title>Type::Initialize(Compile*) (1 samples, 0.09%)</title><rect x="1185.7" y="323.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.7" y="334.0"></text>
</g>
<g>
<title>TypeAry::hash() const (1 samples, 0.09%)</title><rect x="1185.7" y="307.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.7" y="318.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.09%)</title><rect x="1186.8" y="323.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.8" y="334.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.09%)</title><rect x="1186.8" y="307.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.8" y="318.0"></text>
</g>
<g>
<title>CodeBuffer::finalize_oop_references(methodHandle) (1 samples, 0.09%)</title><rect x="1186.8" y="291.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.8" y="302.0"></text>
</g>
<g>
<title>Universe::non_oop_word() (1 samples, 0.09%)</title><rect x="1186.8" y="275.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.8" y="286.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.09%)</title><rect x="1187.9" y="371.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.9" y="382.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.09%)</title><rect x="1187.9" y="355.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.9" y="366.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.09%)</title><rect x="1187.9" y="339.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.9" y="350.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.09%)</title><rect x="1187.9" y="323.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.9" y="334.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.09%)</title><rect x="1187.9" y="307.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.9" y="318.0"></text>
</g>
<g>
<title>NativeCall::destination() const (1 samples, 0.09%)</title><rect x="1187.9" y="291.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.9" y="302.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.09%)</title><rect x="1188.9" y="419.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.9" y="430.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.09%)</title><rect x="1188.9" y="403.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.9" y="414.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.09%)</title><rect x="1188.9" y="387.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.9" y="398.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.09%)</title><rect x="1188.9" y="371.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.9" y="382.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.09%)</title><rect x="1188.9" y="355.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.9" y="366.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.09%)</title><rect x="1188.9" y="339.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.9" y="350.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.09%)</title><rect x="1188.9" y="323.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.9" y="334.0"></text>
</g>
<g>
<title>G1CollectedHeap::process_discovered_references(unsigned int) (1 samples, 0.09%)</title><rect x="1188.9" y="307.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.9" y="318.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_discovered_references(BoolObjectClosure*, OopClosure*, VoidClosure*, AbstractRefProcTaskExecutor*, GCTimer*, GCId) (1 samples, 0.09%)</title><rect x="1188.9" y="291.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.9" y="302.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_discovered_reflist(DiscoveredList*, ReferencePolicy*, bool, BoolObjectClosure*, OopClosure*, VoidClosure*, AbstractRefProcTaskExecutor*) (1 samples, 0.09%)</title><rect x="1188.9" y="275.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.9" y="286.0"></text>
</g>
<g>
<title>ReferenceProcessor::pp2_work(DiscoveredList&amp;, BoolObjectClosure*, OopClosure*) (1 samples, 0.09%)</title><rect x="1188.9" y="259.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.9" y="270.0"></text>
</g>
<g>
<title>G1STWIsAliveClosure::do_object_b(oopDesc*) (1 samples, 0.09%)</title><rect x="1188.9" y="243.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.9" y="254.0"></text>
</g>
</g>
</svg>
