<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1254" onload="init(evt)" viewBox="0 0 1200 1254" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1237"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1237"> </text>
<g id="frames">
<g>
<title>all (396 samples, 100.00%)</title><rect x="10.0" y="1203.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1214.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (26 samples, 6.57%)</title><rect x="10.0" y="1187.0" width="77.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1198.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (26 samples, 6.57%)</title><rect x="10.0" y="1171.0" width="77.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1182.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.25%)</title><rect x="10.0" y="1155.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (1 samples, 0.25%)</title><rect x="10.0" y="1139.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.25%)</title><rect x="10.0" y="1123.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.25%)</title><rect x="10.0" y="1107.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.invokeCompletedOffsetCommitCallbacks (1 samples, 0.25%)</title><rect x="10.0" y="1091.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (25 samples, 6.31%)</title><rect x="13.0" y="1155.0" width="74.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.0" y="1166.0">com/line..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.25%)</title><rect x="13.0" y="1139.0" width="3.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="16.0" y="1150.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.25%)</title><rect x="13.0" y="1123.0" width="3.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="16.0" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.25%)</title><rect x="16.0" y="1139.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.0" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (1 samples, 0.25%)</title><rect x="16.0" y="1123.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.0" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.25%)</title><rect x="16.0" y="1107.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.0" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.25%)</title><rect x="16.0" y="1091.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.0" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.25%)</title><rect x="16.0" y="1075.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.0" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.25%)</title><rect x="18.9" y="1139.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.9" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.25%)</title><rect x="18.9" y="1123.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="21.9" y="1134.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/529609269.linkToTargetMethod (1 samples, 0.25%)</title><rect x="18.9" y="1107.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.9" y="1118.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/480198303.invokeStatic_LI_L (1 samples, 0.25%)</title><rect x="18.9" y="1091.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.9" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$279/2065945397.get$Lambda (1 samples, 0.25%)</title><rect x="18.9" y="1075.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="21.9" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.25%)</title><rect x="18.9" y="1059.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="21.9" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.25%)</title><rect x="18.9" y="1043.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="21.9" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.25%)</title><rect x="18.9" y="1027.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="21.9" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (1 samples, 0.25%)</title><rect x="21.9" y="1139.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.9" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (1 samples, 0.25%)</title><rect x="21.9" y="1123.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="24.9" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.25%)</title><rect x="21.9" y="1107.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="24.9" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$274/740128677.accept (1 samples, 0.25%)</title><rect x="21.9" y="1091.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="24.9" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (1 samples, 0.25%)</title><rect x="21.9" y="1075.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="24.9" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.25%)</title><rect x="21.9" y="1059.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="24.9" y="1070.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (5 samples, 1.26%)</title><rect x="24.9" y="1139.0" width="14.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.9" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$273/2140476004.accept (5 samples, 1.26%)</title><rect x="24.9" y="1123.0" width="14.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="27.9" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (5 samples, 1.26%)</title><rect x="24.9" y="1107.0" width="14.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="27.9" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (1 samples, 0.25%)</title><rect x="24.9" y="1091.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="27.9" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (1 samples, 0.25%)</title><rect x="24.9" y="1075.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="27.9" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (1 samples, 0.25%)</title><rect x="24.9" y="1059.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.9" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (1 samples, 0.25%)</title><rect x="24.9" y="1043.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="27.9" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.25%)</title><rect x="24.9" y="1027.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="27.9" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.25%)</title><rect x="24.9" y="1011.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="27.9" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (2 samples, 0.51%)</title><rect x="27.9" y="1091.0" width="5.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="30.9" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 0.51%)</title><rect x="27.9" y="1075.0" width="5.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="30.9" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.25%)</title><rect x="30.9" y="1059.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="33.9" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.25%)</title><rect x="30.9" y="1043.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="33.9" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.25%)</title><rect x="30.9" y="1027.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="33.9" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.25%)</title><rect x="30.9" y="1011.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="33.9" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.25%)</title><rect x="30.9" y="995.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="33.9" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (1 samples, 0.25%)</title><rect x="33.8" y="1091.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="36.8" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.25%)</title><rect x="33.8" y="1075.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="36.8" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.25%)</title><rect x="33.8" y="1059.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="36.8" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.25%)</title><rect x="36.8" y="1091.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="39.8" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.25%)</title><rect x="36.8" y="1075.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="39.8" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.25%)</title><rect x="36.8" y="1059.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="39.8" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.25%)</title><rect x="36.8" y="1043.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="39.8" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.25%)</title><rect x="36.8" y="1027.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="39.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (16 samples, 4.04%)</title><rect x="39.8" y="1139.0" width="47.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="42.8" y="1150.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (16 samples, 4.04%)</title><rect x="39.8" y="1123.0" width="47.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="42.8" y="1134.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (12 samples, 3.03%)</title><rect x="39.8" y="1107.0" width="35.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="42.8" y="1118.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 0.76%)</title><rect x="39.8" y="1091.0" width="8.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="42.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 0.76%)</title><rect x="39.8" y="1075.0" width="8.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="42.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.51%)</title><rect x="42.8" y="1059.0" width="5.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="45.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.51%)</title><rect x="42.8" y="1043.0" width="5.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="45.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.25%)</title><rect x="42.8" y="1027.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="45.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.25%)</title><rect x="42.8" y="1011.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="45.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesReceived (1 samples, 0.25%)</title><rect x="42.8" y="995.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="45.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.25%)</title><rect x="42.8" y="979.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="45.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.25%)</title><rect x="42.8" y="963.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="45.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.25%)</title><rect x="45.8" y="1027.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="48.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.25%)</title><rect x="45.8" y="1011.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="48.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.25%)</title><rect x="45.8" y="995.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="48.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.removeInterestOps (1 samples, 0.25%)</title><rect x="45.8" y="979.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="48.8" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.interestOps (1 samples, 0.25%)</title><rect x="45.8" y="963.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="48.8" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.nioInterestOps (1 samples, 0.25%)</title><rect x="45.8" y="947.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="48.8" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.translateAndSetInterestOps (1 samples, 0.25%)</title><rect x="45.8" y="931.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="48.8" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.putEventOps (1 samples, 0.25%)</title><rect x="45.8" y="915.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="48.8" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.setInterest (1 samples, 0.25%)</title><rect x="45.8" y="899.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="48.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (7 samples, 1.77%)</title><rect x="48.7" y="1091.0" width="20.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="51.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (7 samples, 1.77%)</title><rect x="48.7" y="1075.0" width="20.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="51.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (6 samples, 1.52%)</title><rect x="48.7" y="1059.0" width="17.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="51.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (6 samples, 1.52%)</title><rect x="48.7" y="1043.0" width="17.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="51.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.51%)</title><rect x="48.7" y="1027.0" width="6.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="51.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (2 samples, 0.51%)</title><rect x="48.7" y="1011.0" width="6.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="51.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (2 samples, 0.51%)</title><rect x="48.7" y="995.0" width="6.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="51.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.ensureNoneRemaining (2 samples, 0.51%)</title><rect x="48.7" y="979.0" width="6.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="51.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (4 samples, 1.01%)</title><rect x="54.7" y="1027.0" width="11.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="57.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (4 samples, 1.01%)</title><rect x="54.7" y="1011.0" width="11.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="57.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (4 samples, 1.01%)</title><rect x="54.7" y="995.0" width="11.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="57.7" y="1006.0"></text>
</g>
<g>
<title>java/util/Optional.of (4 samples, 1.01%)</title><rect x="54.7" y="979.0" width="11.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="57.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.25%)</title><rect x="66.6" y="1059.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="69.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.25%)</title><rect x="66.6" y="1043.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="69.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.25%)</title><rect x="66.6" y="1027.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="69.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.25%)</title><rect x="66.6" y="1011.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="69.6" y="1022.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.25%)</title><rect x="66.6" y="995.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="69.6" y="1006.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.25%)</title><rect x="66.6" y="979.0" width="3.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="69.6" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.51%)</title><rect x="69.6" y="1091.0" width="6.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="72.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 0.51%)</title><rect x="69.6" y="1075.0" width="6.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="72.6" y="1086.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.25%)</title><rect x="69.6" y="1059.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="72.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$261/669981004.accept (1 samples, 0.25%)</title><rect x="69.6" y="1043.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="72.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.25%)</title><rect x="69.6" y="1027.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="72.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.25%)</title><rect x="69.6" y="1011.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="72.6" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.25%)</title><rect x="69.6" y="995.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="72.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.25%)</title><rect x="69.6" y="979.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="72.6" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.25%)</title><rect x="69.6" y="963.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="72.6" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.25%)</title><rect x="69.6" y="947.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="72.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.25%)</title><rect x="72.6" y="1059.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="75.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.25%)</title><rect x="72.6" y="1043.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="75.6" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.25%)</title><rect x="72.6" y="1027.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="75.6" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.25%)</title><rect x="72.6" y="1011.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="75.6" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.25%)</title><rect x="72.6" y="995.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="75.6" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.25%)</title><rect x="72.6" y="979.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="75.6" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.25%)</title><rect x="72.6" y="963.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="75.6" y="974.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.25%)</title><rect x="72.6" y="947.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="75.6" y="958.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.25%)</title><rect x="72.6" y="931.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="75.6" y="942.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.25%)</title><rect x="72.6" y="915.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="75.6" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.25%)</title><rect x="72.6" y="899.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="75.6" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.25%)</title><rect x="72.6" y="883.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="75.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$263/751772631.test (1 samples, 0.25%)</title><rect x="72.6" y="867.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="75.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (3 samples, 0.76%)</title><rect x="75.6" y="1107.0" width="8.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="78.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.51%)</title><rect x="75.6" y="1091.0" width="5.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="78.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.51%)</title><rect x="75.6" y="1075.0" width="5.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="78.6" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 0.51%)</title><rect x="75.6" y="1059.0" width="5.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="78.6" y="1070.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (2 samples, 0.51%)</title><rect x="75.6" y="1043.0" width="5.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="78.6" y="1054.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (2 samples, 0.51%)</title><rect x="75.6" y="1027.0" width="5.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="78.6" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.next (2 samples, 0.51%)</title><rect x="75.6" y="1011.0" width="5.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="78.6" y="1022.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (2 samples, 0.51%)</title><rect x="75.6" y="995.0" width="5.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="78.6" y="1006.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (2 samples, 0.51%)</title><rect x="75.6" y="979.0" width="5.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="78.6" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.25%)</title><rect x="81.5" y="1091.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="84.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.25%)</title><rect x="84.5" y="1107.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="87.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.25%)</title><rect x="84.5" y="1091.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="87.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.25%)</title><rect x="84.5" y="1075.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="87.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.25%)</title><rect x="84.5" y="1059.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="87.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.25%)</title><rect x="84.5" y="1043.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="87.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.25%)</title><rect x="84.5" y="1027.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="87.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.25%)</title><rect x="84.5" y="1011.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="87.5" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.25%)</title><rect x="84.5" y="995.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="87.5" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest$TopicAndPartitionData.batchByTopic (1 samples, 0.25%)</title><rect x="84.5" y="979.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="87.5" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.25%)</title><rect x="84.5" y="963.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="87.5" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.25%)</title><rect x="84.5" y="947.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="87.5" y="958.0"></text>
</g>
<g>
<title>java/lang/Thread.run (261 samples, 65.91%)</title><rect x="87.5" y="1187.0" width="777.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="90.5" y="1198.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (261 samples, 65.91%)</title><rect x="87.5" y="1171.0" width="777.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="90.5" y="1182.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (261 samples, 65.91%)</title><rect x="87.5" y="1155.0" width="777.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="90.5" y="1166.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$289/1704756326.run (249 samples, 62.88%)</title><rect x="87.5" y="1139.0" width="741.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="90.5" y="1150.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$289/1704756326.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62 (249 samples, 62.88%)</title><rect x="87.5" y="1123.0" width="741.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="90.5" y="1134.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (249 samples, 62.88%)</title><rect x="87.5" y="1107.0" width="741.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="90.5" y="1118.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (249 samples, 62.88%)</title><rect x="87.5" y="1091.0" width="741.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="90.5" y="1102.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>[unknown] (2 samples, 0.51%)</title><rect x="114.3" y="1075.0" width="6.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="117.3" y="1086.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.51%)</title><rect x="114.3" y="1059.0" width="6.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="117.3" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (5 samples, 1.26%)</title><rect x="120.3" y="1075.0" width="14.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="123.3" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (5 samples, 1.26%)</title><rect x="120.3" y="1059.0" width="14.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="123.3" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 1.26%)</title><rect x="120.3" y="1043.0" width="14.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="123.3" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 1.26%)</title><rect x="120.3" y="1027.0" width="14.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="123.3" y="1038.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.25%)</title><rect x="132.2" y="1011.0" width="3.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="135.2" y="1022.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.25%)</title><rect x="132.2" y="995.0" width="3.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="135.2" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (18 samples, 4.55%)</title><rect x="135.2" y="1075.0" width="53.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="138.2" y="1086.0">com/l..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 1.77%)</title><rect x="167.9" y="1059.0" width="20.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="170.9" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 1.77%)</title><rect x="167.9" y="1043.0" width="20.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="170.9" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (7 samples, 1.77%)</title><rect x="167.9" y="1027.0" width="20.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="170.9" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 1.77%)</title><rect x="167.9" y="1011.0" width="20.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="170.9" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$297/988588597.accept (7 samples, 1.77%)</title><rect x="167.9" y="995.0" width="20.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="170.9" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (7 samples, 1.77%)</title><rect x="167.9" y="979.0" width="20.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="170.9" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (7 samples, 1.77%)</title><rect x="167.9" y="963.0" width="20.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="170.9" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (7 samples, 1.77%)</title><rect x="167.9" y="947.0" width="20.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="170.9" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (7 samples, 1.77%)</title><rect x="167.9" y="931.0" width="20.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="170.9" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.51%)</title><rect x="167.9" y="915.0" width="6.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="170.9" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 0.51%)</title><rect x="167.9" y="899.0" width="6.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="170.9" y="910.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.51%)</title><rect x="167.9" y="883.0" width="6.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="170.9" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 1.26%)</title><rect x="173.9" y="915.0" width="14.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="176.9" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (38 samples, 9.60%)</title><rect x="188.8" y="1075.0" width="113.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="191.8" y="1086.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$45/1556995360.extract (38 samples, 9.60%)</title><rect x="188.8" y="1059.0" width="113.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="191.8" y="1070.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (38 samples, 9.60%)</title><rect x="188.8" y="1043.0" width="113.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="191.8" y="1054.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (38 samples, 9.60%)</title><rect x="188.8" y="1027.0" width="113.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="191.8" y="1038.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (38 samples, 9.60%)</title><rect x="188.8" y="1011.0" width="113.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="191.8" y="1022.0">com/linecorp/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (38 samples, 9.60%)</title><rect x="188.8" y="995.0" width="113.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="191.8" y="1006.0">com/fasterxml/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (14 samples, 3.54%)</title><rect x="188.8" y="979.0" width="41.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="191.8" y="990.0">com..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.25%)</title><rect x="194.7" y="963.0" width="3.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="197.7" y="974.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.25%)</title><rect x="194.7" y="947.0" width="3.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="197.7" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 1.01%)</title><rect x="197.7" y="963.0" width="11.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="200.7" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (4 samples, 1.01%)</title><rect x="197.7" y="947.0" width="11.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="200.7" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (4 samples, 1.01%)</title><rect x="197.7" y="931.0" width="11.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="200.7" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.25%)</title><rect x="197.7" y="915.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="200.7" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.25%)</title><rect x="197.7" y="899.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="200.7" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.25%)</title><rect x="197.7" y="883.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="200.7" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.25%)</title><rect x="197.7" y="867.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="200.7" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.76%)</title><rect x="200.7" y="915.0" width="8.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="203.7" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.76%)</title><rect x="200.7" y="899.0" width="8.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="203.7" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.76%)</title><rect x="200.7" y="883.0" width="8.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="203.7" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.76%)</title><rect x="200.7" y="867.0" width="8.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="203.7" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (7 samples, 1.77%)</title><rect x="209.6" y="963.0" width="20.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="212.6" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (2 samples, 0.51%)</title><rect x="224.5" y="947.0" width="6.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="227.5" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.51%)</title><rect x="224.5" y="931.0" width="6.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="227.5" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 0.51%)</title><rect x="224.5" y="915.0" width="6.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="227.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 0.51%)</title><rect x="224.5" y="899.0" width="6.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="227.5" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.51%)</title><rect x="224.5" y="883.0" width="6.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="227.5" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.51%)</title><rect x="224.5" y="867.0" width="6.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="227.5" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.51%)</title><rect x="224.5" y="851.0" width="6.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="227.5" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (22 samples, 5.56%)</title><rect x="230.5" y="979.0" width="65.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="233.5" y="990.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.51%)</title><rect x="236.5" y="963.0" width="5.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="239.5" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.51%)</title><rect x="236.5" y="947.0" width="5.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="239.5" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.51%)</title><rect x="242.4" y="963.0" width="6.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="245.4" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.51%)</title><rect x="242.4" y="947.0" width="6.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="245.4" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.51%)</title><rect x="242.4" y="931.0" width="6.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="245.4" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.51%)</title><rect x="242.4" y="915.0" width="6.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="245.4" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.25%)</title><rect x="245.4" y="899.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="248.4" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.25%)</title><rect x="248.4" y="963.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="251.4" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.25%)</title><rect x="248.4" y="947.0" width="3.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="251.4" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.25%)</title><rect x="248.4" y="931.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="251.4" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.25%)</title><rect x="248.4" y="915.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="251.4" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.25%)</title><rect x="248.4" y="899.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="251.4" y="910.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.25%)</title><rect x="248.4" y="883.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="251.4" y="894.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.25%)</title><rect x="248.4" y="867.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="251.4" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (15 samples, 3.79%)</title><rect x="251.4" y="963.0" width="44.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="254.4" y="974.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.25%)</title><rect x="251.4" y="947.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="254.4" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (14 samples, 3.54%)</title><rect x="254.3" y="947.0" width="41.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="257.3" y="958.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.01%)</title><rect x="254.3" y="931.0" width="12.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="257.3" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 0.76%)</title><rect x="254.3" y="915.0" width="9.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="257.3" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.25%)</title><rect x="263.3" y="915.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="266.3" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.25%)</title><rect x="263.3" y="899.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="266.3" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (10 samples, 2.53%)</title><rect x="266.3" y="931.0" width="29.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="269.3" y="942.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (10 samples, 2.53%)</title><rect x="266.3" y="915.0" width="29.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="269.3" y="926.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (10 samples, 2.53%)</title><rect x="266.3" y="899.0" width="29.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="269.3" y="910.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.51%)</title><rect x="269.2" y="883.0" width="6.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="272.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.25%)</title><rect x="269.2" y="867.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="272.2" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.25%)</title><rect x="269.2" y="851.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="272.2" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.25%)</title><rect x="269.2" y="835.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="272.2" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.25%)</title><rect x="272.2" y="867.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="275.2" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.25%)</title><rect x="272.2" y="851.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="275.2" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.25%)</title><rect x="272.2" y="835.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="275.2" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (4 samples, 1.01%)</title><rect x="275.2" y="883.0" width="11.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="278.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 0.76%)</title><rect x="278.2" y="867.0" width="8.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="281.2" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.76%)</title><rect x="278.2" y="851.0" width="8.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="281.2" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.76%)</title><rect x="278.2" y="835.0" width="8.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="281.2" y="846.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 0.76%)</title><rect x="278.2" y="819.0" width="8.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="281.2" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 0.51%)</title><rect x="287.1" y="883.0" width="6.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="290.1" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 0.51%)</title><rect x="287.1" y="867.0" width="6.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="290.1" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 0.51%)</title><rect x="287.1" y="851.0" width="6.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="290.1" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (2 samples, 0.51%)</title><rect x="287.1" y="835.0" width="6.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="290.1" y="846.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 0.51%)</title><rect x="287.1" y="819.0" width="6.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="290.1" y="830.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (2 samples, 0.51%)</title><rect x="287.1" y="803.0" width="6.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="290.1" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.25%)</title><rect x="293.1" y="883.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="296.1" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.25%)</title><rect x="293.1" y="867.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="296.1" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.25%)</title><rect x="293.1" y="851.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="296.1" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.25%)</title><rect x="293.1" y="835.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="296.1" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.25%)</title><rect x="293.1" y="819.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="296.1" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.25%)</title><rect x="293.1" y="803.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="296.1" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.25%)</title><rect x="293.1" y="787.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="296.1" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.25%)</title><rect x="293.1" y="771.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="296.1" y="782.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.25%)</title><rect x="293.1" y="755.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="296.1" y="766.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.25%)</title><rect x="293.1" y="739.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="296.1" y="750.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.25%)</title><rect x="293.1" y="723.0" width="3.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="296.1" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.51%)</title><rect x="296.1" y="979.0" width="5.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="299.1" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.51%)</title><rect x="296.1" y="963.0" width="5.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="299.1" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.51%)</title><rect x="296.1" y="947.0" width="5.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="299.1" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.51%)</title><rect x="296.1" y="931.0" width="5.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="299.1" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.51%)</title><rect x="296.1" y="915.0" width="5.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="299.1" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (176 samples, 44.44%)</title><rect x="302.0" y="1075.0" width="524.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="305.0" y="1086.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (31 samples, 7.83%)</title><rect x="334.8" y="1059.0" width="92.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="337.8" y="1070.0">com/linecor..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (30 samples, 7.58%)</title><rect x="337.8" y="1043.0" width="89.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="340.8" y="1054.0">org/slf4j/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (29 samples, 7.32%)</title><rect x="340.8" y="1027.0" width="86.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="343.8" y="1038.0">ch/qos/log..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 0.76%)</title><rect x="340.8" y="1011.0" width="8.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="343.8" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 0.76%)</title><rect x="340.8" y="995.0" width="8.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="343.8" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 0.76%)</title><rect x="340.8" y="979.0" width="8.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="343.8" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 0.76%)</title><rect x="340.8" y="963.0" width="8.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="343.8" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (26 samples, 6.57%)</title><rect x="349.7" y="1011.0" width="77.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="352.7" y="1022.0">java/util..</text>
</g>
<g>
<title>java/util/HashMap.remove (14 samples, 3.54%)</title><rect x="385.5" y="995.0" width="41.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="388.5" y="1006.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (14 samples, 3.54%)</title><rect x="385.5" y="979.0" width="41.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="388.5" y="990.0">jav..</text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.51%)</title><rect x="421.2" y="963.0" width="6.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="424.2" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (4 samples, 1.01%)</title><rect x="427.2" y="1059.0" width="11.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="430.2" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 1.01%)</title><rect x="427.2" y="1043.0" width="11.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="430.2" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (30 samples, 7.58%)</title><rect x="439.1" y="1059.0" width="89.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="442.1" y="1070.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (30 samples, 7.58%)</title><rect x="439.1" y="1043.0" width="89.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="442.1" y="1054.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (15 samples, 3.79%)</title><rect x="442.1" y="1027.0" width="44.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="445.1" y="1038.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (10 samples, 2.53%)</title><rect x="457.0" y="1011.0" width="29.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="460.0" y="1022.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 1.26%)</title><rect x="465.9" y="995.0" width="14.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="468.9" y="1006.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.25%)</title><rect x="465.9" y="979.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="468.9" y="990.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.25%)</title><rect x="465.9" y="963.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="468.9" y="974.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.25%)</title><rect x="465.9" y="947.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="468.9" y="958.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.25%)</title><rect x="465.9" y="931.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="468.9" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.25%)</title><rect x="465.9" y="915.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="468.9" y="926.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.25%)</title><rect x="465.9" y="899.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="468.9" y="910.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.25%)</title><rect x="465.9" y="883.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="468.9" y="894.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 1.01%)</title><rect x="468.9" y="979.0" width="11.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="471.9" y="990.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.51%)</title><rect x="480.8" y="995.0" width="6.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="483.8" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.25%)</title><rect x="486.8" y="1027.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="489.8" y="1038.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.25%)</title><rect x="486.8" y="1011.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="489.8" y="1022.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.25%)</title><rect x="486.8" y="995.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="489.8" y="1006.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (13 samples, 3.28%)</title><rect x="489.7" y="1027.0" width="38.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="492.7" y="1038.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (13 samples, 3.28%)</title><rect x="489.7" y="1011.0" width="38.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="492.7" y="1022.0">ch/..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (13 samples, 3.28%)</title><rect x="489.7" y="995.0" width="38.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="492.7" y="1006.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.put (12 samples, 3.03%)</title><rect x="492.7" y="979.0" width="35.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="495.7" y="990.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.putVal (9 samples, 2.27%)</title><rect x="501.7" y="963.0" width="26.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="504.7" y="974.0">j..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.25%)</title><rect x="507.6" y="947.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="510.6" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (4 samples, 1.01%)</title><rect x="510.6" y="947.0" width="11.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="513.6" y="958.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.25%)</title><rect x="519.5" y="931.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="522.5" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.25%)</title><rect x="519.5" y="915.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="522.5" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.25%)</title><rect x="519.5" y="899.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="522.5" y="910.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.51%)</title><rect x="522.5" y="947.0" width="6.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="525.5" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (99 samples, 25.00%)</title><rect x="528.5" y="1059.0" width="295.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="531.5" y="1070.0">com/linecorp/decaton/processor/runtime/i..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.25%)</title><rect x="528.5" y="1043.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="531.5" y="1054.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.25%)</title><rect x="528.5" y="1027.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="531.5" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.25%)</title><rect x="528.5" y="1011.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="531.5" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.25%)</title><rect x="528.5" y="995.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="531.5" y="1006.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.25%)</title><rect x="528.5" y="979.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="531.5" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (2 samples, 0.51%)</title><rect x="531.5" y="1043.0" width="5.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="534.5" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (96 samples, 24.24%)</title><rect x="537.4" y="1043.0" width="286.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="540.4" y="1054.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$210/983517944.process (66 samples, 16.67%)</title><rect x="543.4" y="1027.0" width="196.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="546.4" y="1038.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (66 samples, 16.67%)</title><rect x="543.4" y="1011.0" width="196.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="546.4" y="1022.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (66 samples, 16.67%)</title><rect x="543.4" y="995.0" width="196.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="546.4" y="1006.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.25%)</title><rect x="543.4" y="979.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="546.4" y="990.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.25%)</title><rect x="543.4" y="963.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="546.4" y="974.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.25%)</title><rect x="543.4" y="947.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="546.4" y="958.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.25%)</title><rect x="543.4" y="931.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="546.4" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.25%)</title><rect x="543.4" y="915.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="546.4" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.25%)</title><rect x="543.4" y="899.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="546.4" y="910.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.trace (1 samples, 0.25%)</title><rect x="546.4" y="979.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="549.4" y="990.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.25%)</title><rect x="546.4" y="963.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="549.4" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (64 samples, 16.16%)</title><rect x="549.3" y="979.0" width="190.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="552.3" y="990.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task.getProducedTime (1 samples, 0.25%)</title><rect x="549.3" y="963.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="552.3" y="974.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.25%)</title><rect x="549.3" y="947.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="552.3" y="958.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.25%)</title><rect x="549.3" y="931.0" width="3.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="552.3" y="942.0"></text>
</g>
<g>
<title>java/lang/Thread.sleep (63 samples, 15.91%)</title><rect x="552.3" y="963.0" width="187.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="555.3" y="974.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (54 samples, 13.64%)</title><rect x="576.2" y="947.0" width="160.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="579.2" y="958.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (5 samples, 1.26%)</title><rect x="588.1" y="931.0" width="14.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="591.1" y="942.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.25%)</title><rect x="603.0" y="931.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="606.0" y="942.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.25%)</title><rect x="606.0" y="931.0" width="2.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="609.0" y="942.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (4 samples, 1.01%)</title><rect x="608.9" y="931.0" width="12.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="611.9" y="942.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (39 samples, 9.85%)</title><rect x="620.9" y="931.0" width="116.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="623.9" y="942.0">os::sleep(Thre..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.51%)</title><rect x="638.7" y="915.0" width="6.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="641.7" y="926.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.25%)</title><rect x="641.7" y="899.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="644.7" y="910.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.25%)</title><rect x="644.7" y="915.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="647.7" y="926.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 1.26%)</title><rect x="647.7" y="915.0" width="14.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="650.7" y="926.0"></text>
</g>
<g>
<title>__pthread_cond_init (2 samples, 0.51%)</title><rect x="662.6" y="915.0" width="5.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="665.6" y="926.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (14 samples, 3.54%)</title><rect x="668.5" y="915.0" width="41.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="671.5" y="926.0">__p..</text>
</g>
<g>
<title>os::PlatformEvent::park(long) (6 samples, 1.52%)</title><rect x="710.3" y="915.0" width="17.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="713.3" y="926.0"></text>
</g>
<g>
<title>pthread_cond_destroy@@GLIBC_2.3.2 (2 samples, 0.51%)</title><rect x="728.1" y="915.0" width="6.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="731.1" y="926.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.25%)</title><rect x="734.1" y="915.0" width="3.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="737.1" y="926.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.25%)</title><rect x="737.1" y="947.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="740.1" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (2 samples, 0.51%)</title><rect x="740.1" y="1027.0" width="5.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="743.1" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (2 samples, 0.51%)</title><rect x="740.1" y="1011.0" width="5.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="743.1" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (4 samples, 1.01%)</title><rect x="746.0" y="1027.0" width="11.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="749.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (4 samples, 1.01%)</title><rect x="746.0" y="1011.0" width="11.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="749.0" y="1022.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/260840925.linkToTargetMethod (5 samples, 1.26%)</title><rect x="757.9" y="1027.0" width="14.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="760.9" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/205962452.invokeStatic_L_L (5 samples, 1.26%)</title><rect x="757.9" y="1011.0" width="14.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="760.9" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$294/838030806.get$Lambda (5 samples, 1.26%)</title><rect x="757.9" y="995.0" width="14.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="760.9" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.25%)</title><rect x="766.9" y="979.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="769.9" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.25%)</title><rect x="766.9" y="963.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="769.9" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.25%)</title><rect x="766.9" y="947.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="769.9" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.25%)</title><rect x="766.9" y="931.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="769.9" y="942.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.25%)</title><rect x="766.9" y="915.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="769.9" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$294/838030806.&lt;init&gt; (1 samples, 0.25%)</title><rect x="769.8" y="979.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="772.8" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.51%)</title><rect x="772.8" y="1027.0" width="6.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="775.8" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.51%)</title><rect x="772.8" y="1011.0" width="6.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="775.8" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 0.76%)</title><rect x="778.8" y="1027.0" width="8.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="781.8" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.51%)</title><rect x="781.8" y="1011.0" width="5.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="784.8" y="1022.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.25%)</title><rect x="781.8" y="995.0" width="2.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="784.8" y="1006.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.25%)</title><rect x="784.7" y="995.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="787.7" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.25%)</title><rect x="787.7" y="1027.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="790.7" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.25%)</title><rect x="790.7" y="1027.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="793.7" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.25%)</title><rect x="790.7" y="1011.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="793.7" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 1.26%)</title><rect x="793.7" y="1027.0" width="14.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="796.7" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 1.26%)</title><rect x="793.7" y="1011.0" width="14.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="796.7" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 1.26%)</title><rect x="793.7" y="995.0" width="14.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="796.7" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (5 samples, 1.26%)</title><rect x="793.7" y="979.0" width="14.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="796.7" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (5 samples, 1.26%)</title><rect x="793.7" y="963.0" width="14.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="796.7" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (5 samples, 1.26%)</title><rect x="793.7" y="947.0" width="14.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="796.7" y="958.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.25%)</title><rect x="805.6" y="931.0" width="3.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="808.6" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReference.get (5 samples, 1.26%)</title><rect x="808.6" y="1027.0" width="14.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="811.6" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.25%)</title><rect x="823.5" y="1059.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="826.5" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.25%)</title><rect x="823.5" y="1043.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="826.5" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.25%)</title><rect x="823.5" y="1027.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="826.5" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.25%)</title><rect x="823.5" y="1011.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="826.5" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$295/2077335566.accept (1 samples, 0.25%)</title><rect x="823.5" y="995.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="826.5" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$57 (1 samples, 0.25%)</title><rect x="823.5" y="979.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="826.5" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.25%)</title><rect x="823.5" y="963.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="826.5" y="974.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.25%)</title><rect x="823.5" y="947.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="826.5" y="958.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.25%)</title><rect x="823.5" y="931.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="826.5" y="942.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.25%)</title><rect x="826.5" y="1075.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="829.5" y="1086.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.25%)</title><rect x="826.5" y="1059.0" width="2.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="829.5" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.25%)</title><rect x="829.4" y="1139.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="832.4" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.25%)</title><rect x="829.4" y="1123.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="832.4" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.25%)</title><rect x="829.4" y="1107.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="832.4" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.25%)</title><rect x="829.4" y="1091.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="832.4" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (11 samples, 2.78%)</title><rect x="832.4" y="1139.0" width="32.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="835.4" y="1150.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (10 samples, 2.53%)</title><rect x="835.4" y="1123.0" width="29.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="838.4" y="1134.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (10 samples, 2.53%)</title><rect x="835.4" y="1107.0" width="29.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="838.4" y="1118.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 2.53%)</title><rect x="835.4" y="1091.0" width="29.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="838.4" y="1102.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 2.53%)</title><rect x="835.4" y="1075.0" width="29.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="838.4" y="1086.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 2.53%)</title><rect x="835.4" y="1059.0" width="29.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="838.4" y="1070.0">ja..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.51%)</title><rect x="865.2" y="1187.0" width="6.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="868.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (2 samples, 0.51%)</title><rect x="865.2" y="1171.0" width="6.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="868.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.51%)</title><rect x="865.2" y="1155.0" width="6.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="868.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.25%)</title><rect x="865.2" y="1139.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="868.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.25%)</title><rect x="865.2" y="1123.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="868.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.25%)</title><rect x="865.2" y="1107.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="868.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.25%)</title><rect x="865.2" y="1091.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="868.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.25%)</title><rect x="868.2" y="1139.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="871.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.25%)</title><rect x="868.2" y="1123.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="871.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.25%)</title><rect x="868.2" y="1107.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="871.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.25%)</title><rect x="868.2" y="1091.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="871.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.25%)</title><rect x="868.2" y="1075.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="871.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.25%)</title><rect x="868.2" y="1059.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="871.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.25%)</title><rect x="868.2" y="1043.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="871.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.25%)</title><rect x="868.2" y="1027.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="871.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.25%)</title><rect x="868.2" y="1011.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="871.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$10.write (1 samples, 0.25%)</title><rect x="868.2" y="995.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="871.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.25%)</title><rect x="868.2" y="979.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="871.2" y="990.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.25%)</title><rect x="868.2" y="963.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="871.2" y="974.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.25%)</title><rect x="868.2" y="947.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="871.2" y="958.0"></text>
</g>
<g>
<title>start_thread (107 samples, 27.02%)</title><rect x="871.2" y="1187.0" width="318.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="874.2" y="1198.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (107 samples, 27.02%)</title><rect x="871.2" y="1171.0" width="318.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="874.2" y="1182.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (14 samples, 3.54%)</title><rect x="871.2" y="1155.0" width="41.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="874.2" y="1166.0">Gan..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (14 samples, 3.54%)</title><rect x="871.2" y="1139.0" width="41.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="874.2" y="1150.0">G1P..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (14 samples, 3.54%)</title><rect x="871.2" y="1123.0" width="41.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="874.2" y="1134.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.25%)</title><rect x="871.2" y="1107.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="874.2" y="1118.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (13 samples, 3.28%)</title><rect x="874.1" y="1107.0" width="38.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="877.1" y="1118.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (6 samples, 1.52%)</title><rect x="892.0" y="1091.0" width="17.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="895.0" y="1102.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.25%)</title><rect x="906.9" y="1075.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="909.9" y="1086.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.25%)</title><rect x="909.9" y="1091.0" width="3.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="912.9" y="1102.0"></text>
</g>
<g>
<title>JavaThread::run() (92 samples, 23.23%)</title><rect x="912.9" y="1155.0" width="274.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="915.9" y="1166.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (92 samples, 23.23%)</title><rect x="912.9" y="1139.0" width="274.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="915.9" y="1150.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (91 samples, 22.98%)</title><rect x="912.9" y="1123.0" width="271.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="915.9" y="1134.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (88 samples, 22.22%)</title><rect x="912.9" y="1107.0" width="262.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="915.9" y="1118.0">CompileBroker::invoke_compiler_on_m..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (85 samples, 21.46%)</title><rect x="912.9" y="1091.0" width="253.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="915.9" y="1102.0">C2Compiler::compile_method(ciEnv*,..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (85 samples, 21.46%)</title><rect x="912.9" y="1075.0" width="253.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="915.9" y="1086.0">Compile::Compile(ciEnv*, C2Compile..</text>
</g>
<g>
<title>Compile::Code_Gen() (50 samples, 12.63%)</title><rect x="912.9" y="1059.0" width="149.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="915.9" y="1070.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.25%)</title><rect x="912.9" y="1043.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="915.9" y="1054.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.25%)</title><rect x="912.9" y="1027.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="915.9" y="1038.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (5 samples, 1.26%)</title><rect x="915.9" y="1043.0" width="14.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="918.9" y="1054.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.25%)</title><rect x="918.8" y="1027.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="921.8" y="1038.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.25%)</title><rect x="918.8" y="1011.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="921.8" y="1022.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (3 samples, 0.76%)</title><rect x="921.8" y="1027.0" width="9.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="924.8" y="1038.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.51%)</title><rect x="924.8" y="1011.0" width="6.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="927.8" y="1022.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 1.52%)</title><rect x="930.8" y="1043.0" width="17.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="933.8" y="1054.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.25%)</title><rect x="930.8" y="1027.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="933.8" y="1038.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 1.01%)</title><rect x="933.7" y="1027.0" width="12.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="936.7" y="1038.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.51%)</title><rect x="939.7" y="1011.0" width="6.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="942.7" y="1022.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.25%)</title><rect x="945.7" y="1027.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="948.7" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.76%)</title><rect x="948.6" y="1043.0" width="9.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="951.6" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.76%)</title><rect x="948.6" y="1027.0" width="9.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="951.6" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (2 samples, 0.51%)</title><rect x="948.6" y="1011.0" width="6.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="951.6" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.25%)</title><rect x="954.6" y="1011.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="957.6" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.25%)</title><rect x="954.6" y="995.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="957.6" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (35 samples, 8.84%)</title><rect x="957.6" y="1043.0" width="104.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="960.6" y="1054.0">PhaseChaitin..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.25%)</title><rect x="957.6" y="1027.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="960.6" y="1038.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.25%)</title><rect x="960.6" y="1027.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="963.6" y="1038.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.25%)</title><rect x="963.5" y="1027.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="966.5" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (4 samples, 1.01%)</title><rect x="966.5" y="1027.0" width="11.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="969.5" y="1038.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (4 samples, 1.01%)</title><rect x="966.5" y="1011.0" width="11.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="969.5" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.25%)</title><rect x="972.5" y="995.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="975.5" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.25%)</title><rect x="975.5" y="995.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="978.5" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.25%)</title><rect x="978.4" y="1027.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="981.4" y="1038.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.25%)</title><rect x="978.4" y="1011.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="981.4" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.25%)</title><rect x="978.4" y="995.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="981.4" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 1.26%)</title><rect x="981.4" y="1027.0" width="14.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="984.4" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 1.77%)</title><rect x="996.3" y="1027.0" width="20.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="999.3" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.51%)</title><rect x="1011.2" y="1011.0" width="6.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1014.2" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.25%)</title><rect x="1014.2" y="995.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1017.2" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.51%)</title><rect x="1017.2" y="1027.0" width="5.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1020.2" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.25%)</title><rect x="1023.1" y="1027.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1026.1" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.25%)</title><rect x="1026.1" y="1027.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1029.1" y="1038.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.25%)</title><rect x="1026.1" y="1011.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1029.1" y="1022.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (4 samples, 1.01%)</title><rect x="1029.1" y="1027.0" width="11.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1032.1" y="1038.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (4 samples, 1.01%)</title><rect x="1029.1" y="1011.0" width="11.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1032.1" y="1022.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (4 samples, 1.01%)</title><rect x="1029.1" y="995.0" width="11.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1032.1" y="1006.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.25%)</title><rect x="1029.1" y="979.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1032.1" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.25%)</title><rect x="1029.1" y="963.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1032.1" y="974.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.25%)</title><rect x="1032.1" y="979.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1035.1" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (2 samples, 0.51%)</title><rect x="1035.1" y="979.0" width="5.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1038.1" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.25%)</title><rect x="1038.0" y="963.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1041.0" y="974.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.51%)</title><rect x="1041.0" y="1027.0" width="6.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1044.0" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.25%)</title><rect x="1044.0" y="1011.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1047.0" y="1022.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.51%)</title><rect x="1047.0" y="1027.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1050.0" y="1038.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 0.51%)</title><rect x="1047.0" y="1011.0" width="5.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1050.0" y="1022.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.51%)</title><rect x="1052.9" y="1027.0" width="6.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1055.9" y="1038.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.25%)</title><rect x="1055.9" y="1011.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1058.9" y="1022.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.25%)</title><rect x="1058.9" y="1027.0" width="3.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1061.9" y="1038.0"></text>
</g>
<g>
<title>Compile::Optimize() (28 samples, 7.07%)</title><rect x="1061.9" y="1059.0" width="83.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1064.9" y="1070.0">Compile::..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.51%)</title><rect x="1061.9" y="1043.0" width="5.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1064.9" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::ConnectionGraph(Compile*, PhaseIterGVN*) (1 samples, 0.25%)</title><rect x="1061.9" y="1027.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1064.9" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.25%)</title><rect x="1064.8" y="1027.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1067.8" y="1038.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.25%)</title><rect x="1067.8" y="1043.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1070.8" y="1054.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.25%)</title><rect x="1070.8" y="1043.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1073.8" y="1054.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.25%)</title><rect x="1070.8" y="1027.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1073.8" y="1038.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.25%)</title><rect x="1070.8" y="1011.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1073.8" y="1022.0"></text>
</g>
<g>
<title>ProjNode::bottom_type() const (1 samples, 0.25%)</title><rect x="1070.8" y="995.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1073.8" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (19 samples, 4.80%)</title><rect x="1073.8" y="1043.0" width="56.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1076.8" y="1054.0">PhaseI..</text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.25%)</title><rect x="1073.8" y="1027.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1076.8" y="1038.0"></text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.25%)</title><rect x="1073.8" y="1011.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1076.8" y="1022.0"></text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.25%)</title><rect x="1073.8" y="995.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1076.8" y="1006.0"></text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.25%)</title><rect x="1073.8" y="979.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1076.8" y="990.0"></text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.25%)</title><rect x="1073.8" y="963.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1076.8" y="974.0"></text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.25%)</title><rect x="1073.8" y="947.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1076.8" y="958.0"></text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.25%)</title><rect x="1073.8" y="931.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1076.8" y="942.0"></text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.25%)</title><rect x="1073.8" y="915.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1076.8" y="926.0"></text>
</g>
<g>
<title>IdealLoopTree::merge_many_backedges(PhaseIdealLoop*) (1 samples, 0.25%)</title><rect x="1073.8" y="899.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1076.8" y="910.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.25%)</title><rect x="1073.8" y="883.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1076.8" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.25%)</title><rect x="1076.8" y="1027.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1079.8" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.25%)</title><rect x="1079.7" y="1027.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1082.7" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.25%)</title><rect x="1079.7" y="1011.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1082.7" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (11 samples, 2.78%)</title><rect x="1082.7" y="1027.0" width="32.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1085.7" y="1038.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (11 samples, 2.78%)</title><rect x="1082.7" y="1011.0" width="32.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1085.7" y="1022.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (11 samples, 2.78%)</title><rect x="1082.7" y="995.0" width="32.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1085.7" y="1006.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.25%)</title><rect x="1103.6" y="979.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1106.6" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 0.76%)</title><rect x="1106.6" y="979.0" width="8.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1109.6" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (3 samples, 0.76%)</title><rect x="1115.5" y="1027.0" width="8.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1118.5" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.25%)</title><rect x="1121.5" y="1011.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1124.5" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.51%)</title><rect x="1124.4" y="1027.0" width="6.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1127.4" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.25%)</title><rect x="1124.4" y="1011.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1127.4" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.25%)</title><rect x="1124.4" y="995.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1127.4" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.25%)</title><rect x="1124.4" y="979.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1127.4" y="990.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.25%)</title><rect x="1124.4" y="963.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1127.4" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.25%)</title><rect x="1127.4" y="1011.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1130.4" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.25%)</title><rect x="1127.4" y="995.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1130.4" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 1.01%)</title><rect x="1130.4" y="1043.0" width="11.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1133.4" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.76%)</title><rect x="1130.4" y="1027.0" width="8.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1133.4" y="1038.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.25%)</title><rect x="1130.4" y="1011.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1133.4" y="1022.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.25%)</title><rect x="1130.4" y="995.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1133.4" y="1006.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.25%)</title><rect x="1130.4" y="979.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1133.4" y="990.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.25%)</title><rect x="1130.4" y="963.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1133.4" y="974.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.25%)</title><rect x="1130.4" y="947.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1133.4" y="958.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.25%)</title><rect x="1130.4" y="931.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1133.4" y="942.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.25%)</title><rect x="1130.4" y="915.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1133.4" y="926.0"></text>
</g>
<g>
<title>PhiNode::Identity(PhaseTransform*) (1 samples, 0.25%)</title><rect x="1133.4" y="1011.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.4" y="1022.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.25%)</title><rect x="1136.4" y="1011.0" width="2.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1139.4" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.25%)</title><rect x="1136.4" y="995.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1139.4" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.25%)</title><rect x="1136.4" y="979.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1139.4" y="990.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.25%)</title><rect x="1136.4" y="963.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1139.4" y="974.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.25%)</title><rect x="1139.3" y="1027.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.3" y="1038.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.25%)</title><rect x="1142.3" y="1043.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.3" y="1054.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.25%)</title><rect x="1142.3" y="1027.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1145.3" y="1038.0"></text>
</g>
<g>
<title>AllocateNode::initialization() (1 samples, 0.25%)</title><rect x="1142.3" y="1011.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1145.3" y="1022.0"></text>
</g>
<g>
<title>MultiNode::proj_out(unsigned int) const (1 samples, 0.25%)</title><rect x="1142.3" y="995.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1145.3" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 1.77%)</title><rect x="1145.3" y="1059.0" width="20.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1148.3" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 1.77%)</title><rect x="1145.3" y="1043.0" width="20.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1148.3" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 1.77%)</title><rect x="1145.3" y="1027.0" width="20.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.3" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 1.77%)</title><rect x="1145.3" y="1011.0" width="20.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1148.3" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 1.77%)</title><rect x="1145.3" y="995.0" width="20.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1148.3" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 1.77%)</title><rect x="1145.3" y="979.0" width="20.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1148.3" y="990.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.25%)</title><rect x="1145.3" y="963.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.3" y="974.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.25%)</title><rect x="1145.3" y="947.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.3" y="958.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.25%)</title><rect x="1145.3" y="931.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1148.3" y="942.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.25%)</title><rect x="1145.3" y="915.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1148.3" y="926.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.25%)</title><rect x="1145.3" y="899.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1148.3" y="910.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.25%)</title><rect x="1145.3" y="883.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.3" y="894.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle, Thread*) (1 samples, 0.25%)</title><rect x="1145.3" y="867.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1148.3" y="878.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol_or_null() (1 samples, 0.25%)</title><rect x="1145.3" y="851.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1148.3" y="862.0"></text>
</g>
<g>
<title>SymbolTable::lookup_only(char const*, int, unsigned int&amp;) (1 samples, 0.25%)</title><rect x="1145.3" y="835.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1148.3" y="846.0"></text>
</g>
<g>
<title>Symbol::equals(char const*, int) const (1 samples, 0.25%)</title><rect x="1145.3" y="819.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1148.3" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 1.52%)</title><rect x="1148.3" y="963.0" width="17.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1151.3" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 1.52%)</title><rect x="1148.3" y="947.0" width="17.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1151.3" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 1.52%)</title><rect x="1148.3" y="931.0" width="17.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.3" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 1.52%)</title><rect x="1148.3" y="915.0" width="17.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1151.3" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 1.52%)</title><rect x="1148.3" y="899.0" width="17.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1151.3" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 1.52%)</title><rect x="1148.3" y="883.0" width="17.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1151.3" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.51%)</title><rect x="1148.3" y="867.0" width="5.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1151.3" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.51%)</title><rect x="1148.3" y="851.0" width="5.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1151.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.51%)</title><rect x="1148.3" y="835.0" width="5.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.51%)</title><rect x="1148.3" y="819.0" width="5.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1151.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.51%)</title><rect x="1148.3" y="803.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.3" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.51%)</title><rect x="1148.3" y="787.0" width="5.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1151.3" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.51%)</title><rect x="1148.3" y="771.0" width="5.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1151.3" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.51%)</title><rect x="1148.3" y="755.0" width="5.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1151.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.51%)</title><rect x="1148.3" y="739.0" width="5.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1151.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.51%)</title><rect x="1148.3" y="723.0" width="5.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1151.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.51%)</title><rect x="1148.3" y="707.0" width="5.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1151.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.51%)</title><rect x="1148.3" y="691.0" width="5.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1151.3" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.51%)</title><rect x="1148.3" y="675.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.3" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.51%)</title><rect x="1148.3" y="659.0" width="5.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.51%)</title><rect x="1148.3" y="643.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.51%)</title><rect x="1148.3" y="627.0" width="5.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1151.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.51%)</title><rect x="1148.3" y="611.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1151.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.51%)</title><rect x="1148.3" y="595.0" width="5.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1151.3" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.51%)</title><rect x="1148.3" y="579.0" width="5.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1151.3" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.51%)</title><rect x="1148.3" y="563.0" width="5.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1151.3" y="574.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.25%)</title><rect x="1148.3" y="547.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.25%)</title><rect x="1151.3" y="547.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.25%)</title><rect x="1151.3" y="531.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1154.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.25%)</title><rect x="1151.3" y="515.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1154.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.25%)</title><rect x="1151.3" y="499.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.3" y="510.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.25%)</title><rect x="1151.3" y="483.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.3" y="494.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.25%)</title><rect x="1151.3" y="467.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1154.3" y="478.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 1.01%)</title><rect x="1154.2" y="867.0" width="12.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1157.2" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.01%)</title><rect x="1154.2" y="851.0" width="12.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1157.2" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.01%)</title><rect x="1154.2" y="835.0" width="12.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1157.2" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.01%)</title><rect x="1154.2" y="819.0" width="12.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1157.2" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.01%)</title><rect x="1154.2" y="803.0" width="12.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1157.2" y="814.0"></text>
</g>
<g>
<title>GraphKit::stopped() (1 samples, 0.25%)</title><rect x="1154.2" y="787.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.2" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.76%)</title><rect x="1157.2" y="787.0" width="9.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.2" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.76%)</title><rect x="1157.2" y="771.0" width="9.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.2" y="782.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.25%)</title><rect x="1157.2" y="755.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.2" y="766.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.25%)</title><rect x="1157.2" y="739.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.2" y="750.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.25%)</title><rect x="1157.2" y="723.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1160.2" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.25%)</title><rect x="1157.2" y="707.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.2" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.25%)</title><rect x="1157.2" y="691.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.2" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.25%)</title><rect x="1157.2" y="675.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.2" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.25%)</title><rect x="1157.2" y="659.0" width="3.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1160.2" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.25%)</title><rect x="1157.2" y="643.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.2" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.25%)</title><rect x="1157.2" y="627.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.2" y="638.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.25%)</title><rect x="1157.2" y="611.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.2" y="622.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.25%)</title><rect x="1157.2" y="595.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1160.2" y="606.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.25%)</title><rect x="1157.2" y="579.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.2" y="590.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.25%)</title><rect x="1157.2" y="563.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.2" y="574.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.25%)</title><rect x="1157.2" y="547.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1160.2" y="558.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.25%)</title><rect x="1157.2" y="531.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.2" y="542.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.25%)</title><rect x="1157.2" y="515.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.2" y="526.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.25%)</title><rect x="1157.2" y="499.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.2" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.51%)</title><rect x="1160.2" y="755.0" width="6.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.2" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.51%)</title><rect x="1160.2" y="739.0" width="6.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.51%)</title><rect x="1160.2" y="723.0" width="6.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.51%)</title><rect x="1160.2" y="707.0" width="6.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.51%)</title><rect x="1160.2" y="691.0" width="6.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.51%)</title><rect x="1160.2" y="675.0" width="6.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1163.2" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.51%)</title><rect x="1160.2" y="659.0" width="6.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.2" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.51%)</title><rect x="1160.2" y="643.0" width="6.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.51%)</title><rect x="1160.2" y="627.0" width="6.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.51%)</title><rect x="1160.2" y="611.0" width="6.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.51%)</title><rect x="1160.2" y="595.0" width="6.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1163.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.51%)</title><rect x="1160.2" y="579.0" width="6.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1163.2" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.51%)</title><rect x="1160.2" y="563.0" width="6.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1163.2" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.51%)</title><rect x="1160.2" y="547.0" width="6.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.51%)</title><rect x="1160.2" y="531.0" width="6.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.51%)</title><rect x="1160.2" y="515.0" width="6.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.51%)</title><rect x="1160.2" y="499.0" width="6.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.51%)</title><rect x="1160.2" y="483.0" width="6.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.2" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.51%)</title><rect x="1160.2" y="467.0" width="6.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.2" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.51%)</title><rect x="1160.2" y="451.0" width="6.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.51%)</title><rect x="1160.2" y="435.0" width="6.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.51%)</title><rect x="1160.2" y="419.0" width="6.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1163.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.51%)</title><rect x="1160.2" y="403.0" width="6.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.51%)</title><rect x="1160.2" y="387.0" width="6.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1163.2" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.51%)</title><rect x="1160.2" y="371.0" width="6.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.2" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.51%)</title><rect x="1160.2" y="355.0" width="6.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.2" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.51%)</title><rect x="1160.2" y="339.0" width="6.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.2" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.51%)</title><rect x="1160.2" y="323.0" width="6.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.51%)</title><rect x="1160.2" y="307.0" width="6.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.51%)</title><rect x="1160.2" y="291.0" width="6.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.2" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1160.2" y="275.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.2" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.25%)</title><rect x="1160.2" y="259.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.2" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.25%)</title><rect x="1160.2" y="243.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.2" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.25%)</title><rect x="1160.2" y="227.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.2" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.25%)</title><rect x="1160.2" y="211.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.2" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.25%)</title><rect x="1160.2" y="195.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.2" y="206.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1160.2" y="179.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.2" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1160.2" y="163.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1163.2" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.25%)</title><rect x="1160.2" y="147.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.2" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.25%)</title><rect x="1160.2" y="131.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1163.2" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.25%)</title><rect x="1160.2" y="115.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.2" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.25%)</title><rect x="1160.2" y="99.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.2" y="110.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.25%)</title><rect x="1160.2" y="83.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.2" y="94.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.25%)</title><rect x="1160.2" y="67.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1163.2" y="78.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.25%)</title><rect x="1160.2" y="51.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.2" y="62.0"></text>
</g>
<g>
<title>ciEnv::comp_level() (1 samples, 0.25%)</title><rect x="1160.2" y="35.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1163.2" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1163.2" y="275.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.2" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1163.2" y="259.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.2" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.25%)</title><rect x="1163.2" y="243.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.2" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.25%)</title><rect x="1163.2" y="227.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.2" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.25%)</title><rect x="1163.2" y="211.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.2" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.25%)</title><rect x="1163.2" y="195.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.2" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.25%)</title><rect x="1163.2" y="179.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.2" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1163.2" y="163.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.2" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.25%)</title><rect x="1163.2" y="147.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.2" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.25%)</title><rect x="1163.2" y="131.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.2" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.25%)</title><rect x="1163.2" y="115.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.2" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.25%)</title><rect x="1163.2" y="99.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.2" y="110.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.25%)</title><rect x="1163.2" y="83.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.2" y="94.0"></text>
</g>
<g>
<title>GraphKit::record_profile_for_speculation(Node*, ciKlass*) (1 samples, 0.25%)</title><rect x="1163.2" y="67.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.2" y="78.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 0.76%)</title><rect x="1166.2" y="1091.0" width="8.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.2" y="1102.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 0.76%)</title><rect x="1166.2" y="1075.0" width="8.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.2" y="1086.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.76%)</title><rect x="1166.2" y="1059.0" width="8.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.2" y="1070.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.76%)</title><rect x="1166.2" y="1043.0" width="8.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.2" y="1054.0"></text>
</g>
<g>
<title>Compilation::build_hir() (2 samples, 0.51%)</title><rect x="1166.2" y="1027.0" width="5.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.2" y="1038.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (2 samples, 0.51%)</title><rect x="1166.2" y="1011.0" width="5.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.2" y="1022.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (2 samples, 0.51%)</title><rect x="1166.2" y="995.0" width="5.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.2" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (2 samples, 0.51%)</title><rect x="1166.2" y="979.0" width="5.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.2" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.51%)</title><rect x="1166.2" y="963.0" width="5.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1169.2" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.51%)</title><rect x="1166.2" y="947.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.2" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.51%)</title><rect x="1166.2" y="931.0" width="5.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.2" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.25%)</title><rect x="1166.2" y="915.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.2" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.25%)</title><rect x="1166.2" y="899.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.2" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.25%)</title><rect x="1166.2" y="883.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.2" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.25%)</title><rect x="1166.2" y="867.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.2" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.25%)</title><rect x="1166.2" y="851.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.2" y="862.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.25%)</title><rect x="1166.2" y="835.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.2" y="846.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.25%)</title><rect x="1166.2" y="819.0" width="2.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.2" y="830.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.25%)</title><rect x="1166.2" y="803.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.2" y="814.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.25%)</title><rect x="1166.2" y="787.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.2" y="798.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_interface_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.25%)</title><rect x="1166.2" y="771.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.2" y="782.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.25%)</title><rect x="1166.2" y="755.0" width="2.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1169.2" y="766.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.25%)</title><rect x="1166.2" y="739.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.2" y="750.0"></text>
</g>
<g>
<title>SystemDictionary::add_loader_constraint(Symbol*, Handle, Handle, Thread*) (1 samples, 0.25%)</title><rect x="1166.2" y="723.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.2" y="734.0"></text>
</g>
<g>
<title>LoaderConstraintTable::add_entry(Symbol*, Klass*, Handle, Klass*, Handle) (1 samples, 0.25%)</title><rect x="1166.2" y="707.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.2" y="718.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.25%)</title><rect x="1169.1" y="915.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.1" y="926.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.25%)</title><rect x="1169.1" y="899.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.1" y="910.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.25%)</title><rect x="1169.1" y="883.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.1" y="894.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.25%)</title><rect x="1169.1" y="867.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.1" y="878.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.25%)</title><rect x="1169.1" y="851.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.1" y="862.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.25%)</title><rect x="1169.1" y="835.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.1" y="846.0"></text>
</g>
<g>
<title>Dependencies::check_evol_method(Method*) (1 samples, 0.25%)</title><rect x="1169.1" y="819.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.1" y="830.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.25%)</title><rect x="1172.1" y="1027.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.1" y="1038.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.25%)</title><rect x="1172.1" y="1011.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.1" y="1022.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (1 samples, 0.25%)</title><rect x="1172.1" y="995.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.1" y="1006.0"></text>
</g>
<g>
<title>LIRGenerator::do_LoadField(LoadField*) (1 samples, 0.25%)</title><rect x="1172.1" y="979.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.1" y="990.0"></text>
</g>
<g>
<title>LIRGenerator::state_for(Instruction*, ValueStack*, bool) (1 samples, 0.25%)</title><rect x="1172.1" y="963.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.1" y="974.0"></text>
</g>
<g>
<title>CompileQueue::get() (3 samples, 0.76%)</title><rect x="1175.1" y="1107.0" width="8.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.1" y="1118.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.25%)</title><rect x="1175.1" y="1091.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.1" y="1102.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.25%)</title><rect x="1175.1" y="1075.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.1" y="1086.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (1 samples, 0.25%)</title><rect x="1175.1" y="1059.0" width="3.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1178.1" y="1070.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (2 samples, 0.51%)</title><rect x="1178.1" y="1091.0" width="5.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.1" y="1102.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (2 samples, 0.51%)</title><rect x="1178.1" y="1075.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.1" y="1086.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (2 samples, 0.51%)</title><rect x="1178.1" y="1059.0" width="5.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.1" y="1070.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.25%)</title><rect x="1181.1" y="1043.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.1" y="1054.0"></text>
</g>
<g>
<title>NativeCall::destination() const (1 samples, 0.25%)</title><rect x="1181.1" y="1027.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.1" y="1038.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.25%)</title><rect x="1184.0" y="1123.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.0" y="1134.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.25%)</title><rect x="1184.0" y="1107.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.0" y="1118.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.25%)</title><rect x="1184.0" y="1091.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.0" y="1102.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.25%)</title><rect x="1184.0" y="1075.0" width="3.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1187.0" y="1086.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.25%)</title><rect x="1184.0" y="1059.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.0" y="1070.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.25%)</title><rect x="1184.0" y="1043.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.0" y="1054.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.25%)</title><rect x="1187.0" y="1155.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.0" y="1166.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (1 samples, 0.25%)</title><rect x="1187.0" y="1139.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.0" y="1150.0"></text>
</g>
<g>
<title>StatSamplerTask::task() (1 samples, 0.25%)</title><rect x="1187.0" y="1123.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.0" y="1134.0"></text>
</g>
</g>
</svg>
