<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1254" onload="init(evt)" viewBox="0 0 1200 1254" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1237"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1237"> </text>
<g id="frames">
<g>
<title>all (352 samples, 100.00%)</title><rect x="10.0" y="1203.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1214.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.28%)</title><rect x="10.0" y="1187.0" width="3.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.28%)</title><rect x="10.0" y="1171.0" width="3.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (33 samples, 9.38%)</title><rect x="13.4" y="1187.0" width="110.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.4" y="1198.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (2 samples, 0.57%)</title><rect x="13.4" y="1171.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.4" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (2 samples, 0.57%)</title><rect x="13.4" y="1155.0" width="6.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="16.4" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (2 samples, 0.57%)</title><rect x="13.4" y="1139.0" width="6.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (2 samples, 0.57%)</title><rect x="13.4" y="1123.0" width="6.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (2 samples, 0.57%)</title><rect x="13.4" y="1107.0" width="6.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.4" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.57%)</title><rect x="13.4" y="1091.0" width="6.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.57%)</title><rect x="13.4" y="1075.0" width="6.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (2 samples, 0.57%)</title><rect x="13.4" y="1059.0" width="6.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.57%)</title><rect x="13.4" y="1043.0" width="6.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.57%)</title><rect x="13.4" y="1027.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (2 samples, 0.57%)</title><rect x="13.4" y="1011.0" width="6.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (2 samples, 0.57%)</title><rect x="13.4" y="995.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/OffsetCommitRequest.toStruct (1 samples, 0.28%)</title><rect x="13.4" y="979.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitRequestData.toStruct (1 samples, 0.28%)</title><rect x="13.4" y="963.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitRequestData$OffsetCommitRequestTopic.toStruct (1 samples, 0.28%)</title><rect x="13.4" y="947.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.28%)</title><rect x="16.7" y="979.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.28%)</title><rect x="16.7" y="963.0" width="3.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.7" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.28%)</title><rect x="16.7" y="947.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="19.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/CompactArrayOf.write (1 samples, 0.28%)</title><rect x="16.7" y="931.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.7" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.28%)</title><rect x="16.7" y="915.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="19.7" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/CompactArrayOf.write (1 samples, 0.28%)</title><rect x="16.7" y="899.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.7" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (31 samples, 8.81%)</title><rect x="20.1" y="1171.0" width="103.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="23.1" y="1182.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (3 samples, 0.85%)</title><rect x="20.1" y="1155.0" width="10.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.1" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (1 samples, 0.28%)</title><rect x="20.1" y="1139.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.1" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.28%)</title><rect x="20.1" y="1123.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.1" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.28%)</title><rect x="20.1" y="1107.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="23.1" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.28%)</title><rect x="20.1" y="1091.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.1" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.28%)</title><rect x="20.1" y="1075.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="23.1" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.28%)</title><rect x="20.1" y="1059.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="23.1" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.28%)</title><rect x="20.1" y="1043.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.1" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.28%)</title><rect x="20.1" y="1027.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="23.1" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$271/1736590293.test (1 samples, 0.28%)</title><rect x="20.1" y="1011.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pause (2 samples, 0.57%)</title><rect x="23.4" y="1139.0" width="6.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="26.4" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.28%)</title><rect x="30.1" y="1155.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="33.1" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.resume (1 samples, 0.28%)</title><rect x="30.1" y="1139.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="33.1" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (1 samples, 0.28%)</title><rect x="33.5" y="1155.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="36.5" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (1 samples, 0.28%)</title><rect x="33.5" y="1139.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="36.5" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.28%)</title><rect x="33.5" y="1123.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="36.5" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$270/1998490631.accept (1 samples, 0.28%)</title><rect x="33.5" y="1107.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="36.5" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (1 samples, 0.28%)</title><rect x="33.5" y="1091.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="36.5" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.28%)</title><rect x="33.5" y="1075.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="36.5" y="1086.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.28%)</title><rect x="33.5" y="1059.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="36.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (12 samples, 3.41%)</title><rect x="36.8" y="1155.0" width="40.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="39.8" y="1166.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$269/741324657.accept (12 samples, 3.41%)</title><rect x="36.8" y="1139.0" width="40.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="39.8" y="1150.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (12 samples, 3.41%)</title><rect x="36.8" y="1123.0" width="40.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="39.8" y="1134.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (2 samples, 0.57%)</title><rect x="46.9" y="1107.0" width="6.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="49.9" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (2 samples, 0.57%)</title><rect x="46.9" y="1091.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="49.9" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (2 samples, 0.57%)</title><rect x="46.9" y="1075.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="49.9" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (2 samples, 0.57%)</title><rect x="46.9" y="1059.0" width="6.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="49.9" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.57%)</title><rect x="46.9" y="1043.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="49.9" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (2 samples, 0.57%)</title><rect x="46.9" y="1027.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="49.9" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/TaskRequest.&lt;init&gt; (6 samples, 1.70%)</title><rect x="53.6" y="1107.0" width="20.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="56.6" y="1118.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (6 samples, 1.70%)</title><rect x="53.6" y="1091.0" width="20.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="56.6" y="1102.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.28%)</title><rect x="73.7" y="1107.0" width="3.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="76.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (14 samples, 3.98%)</title><rect x="77.0" y="1155.0" width="47.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="80.0" y="1166.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (14 samples, 3.98%)</title><rect x="77.0" y="1139.0" width="47.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="80.0" y="1150.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (11 samples, 3.13%)</title><rect x="77.0" y="1123.0" width="36.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="80.0" y="1134.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.28%)</title><rect x="77.0" y="1107.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="80.0" y="1118.0"></text>
</g>
<g>
<title>java/util/AbstractSet.equals (1 samples, 0.28%)</title><rect x="77.0" y="1091.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="80.0" y="1102.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.28%)</title><rect x="77.0" y="1075.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="80.0" y="1086.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.28%)</title><rect x="77.0" y="1059.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="80.0" y="1070.0"></text>
</g>
<g>
<title>ObjectMonitor::UnlinkAfterAcquire(Thread*, ObjectWaiter*) (1 samples, 0.28%)</title><rect x="77.0" y="1043.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="80.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.14%)</title><rect x="80.4" y="1107.0" width="13.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="83.4" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.14%)</title><rect x="80.4" y="1091.0" width="13.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="83.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.85%)</title><rect x="80.4" y="1075.0" width="10.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="83.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.85%)</title><rect x="80.4" y="1059.0" width="10.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="83.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.57%)</title><rect x="83.8" y="1043.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="86.8" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.28%)</title><rect x="83.8" y="1027.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="86.8" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.28%)</title><rect x="83.8" y="1011.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="86.8" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.28%)</title><rect x="83.8" y="995.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="86.8" y="1006.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.28%)</title><rect x="83.8" y="979.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="86.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.28%)</title><rect x="87.1" y="1027.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="90.1" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.28%)</title><rect x="87.1" y="1011.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="90.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.28%)</title><rect x="87.1" y="995.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="90.1" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.28%)</title><rect x="87.1" y="979.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="90.1" y="990.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.28%)</title><rect x="87.1" y="963.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="90.1" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.28%)</title><rect x="87.1" y="947.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="90.1" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.28%)</title><rect x="90.5" y="1075.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="93.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.28%)</title><rect x="90.5" y="1059.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="93.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.28%)</title><rect x="90.5" y="1043.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="93.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NodeApiVersions.latestUsableVersion (1 samples, 0.28%)</title><rect x="90.5" y="1027.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="93.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (6 samples, 1.70%)</title><rect x="93.8" y="1107.0" width="20.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="96.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (6 samples, 1.70%)</title><rect x="93.8" y="1091.0" width="20.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="96.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (6 samples, 1.70%)</title><rect x="93.8" y="1075.0" width="20.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="96.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (6 samples, 1.70%)</title><rect x="93.8" y="1059.0" width="20.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="96.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (4 samples, 1.14%)</title><rect x="93.8" y="1043.0" width="13.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="96.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.28%)</title><rect x="103.9" y="1027.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="106.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.28%)</title><rect x="103.9" y="1011.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="106.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.28%)</title><rect x="103.9" y="995.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="106.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.28%)</title><rect x="103.9" y="979.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="106.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.28%)</title><rect x="103.9" y="963.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="106.9" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.28%)</title><rect x="103.9" y="947.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="106.9" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.28%)</title><rect x="103.9" y="931.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="106.9" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (2 samples, 0.57%)</title><rect x="107.2" y="1043.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="110.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 0.57%)</title><rect x="107.2" y="1027.0" width="6.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="110.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.28%)</title><rect x="107.2" y="1011.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="110.2" y="1022.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.28%)</title><rect x="107.2" y="995.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="110.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.28%)</title><rect x="110.6" y="1011.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="113.6" y="1022.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.28%)</title><rect x="110.6" y="995.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="113.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.57%)</title><rect x="113.9" y="1123.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="116.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.57%)</title><rect x="113.9" y="1107.0" width="6.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="116.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.57%)</title><rect x="113.9" y="1091.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="116.9" y="1102.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.28%)</title><rect x="113.9" y="1075.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="116.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$233/1137451621.accept (1 samples, 0.28%)</title><rect x="113.9" y="1059.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="116.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.28%)</title><rect x="113.9" y="1043.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="116.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.28%)</title><rect x="113.9" y="1027.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="116.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.28%)</title><rect x="117.3" y="1075.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="120.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.28%)</title><rect x="117.3" y="1059.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="120.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.28%)</title><rect x="120.6" y="1123.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="123.6" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.28%)</title><rect x="120.6" y="1107.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="123.6" y="1118.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.28%)</title><rect x="120.6" y="1091.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="123.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/Node.hashCode (1 samples, 0.28%)</title><rect x="120.6" y="1075.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="123.6" y="1086.0"></text>
</g>
<g>
<title>java/lang/Thread.run (214 samples, 60.80%)</title><rect x="124.0" y="1187.0" width="717.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="127.0" y="1198.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (214 samples, 60.80%)</title><rect x="124.0" y="1171.0" width="717.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="127.0" y="1182.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (214 samples, 60.80%)</title><rect x="124.0" y="1155.0" width="717.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="127.0" y="1166.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$285/1944859532.run (202 samples, 57.39%)</title><rect x="127.3" y="1139.0" width="677.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="130.3" y="1150.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$285/1944859532.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$70 (202 samples, 57.39%)</title><rect x="127.3" y="1123.0" width="677.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="130.3" y="1134.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$70</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (202 samples, 57.39%)</title><rect x="127.3" y="1107.0" width="677.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="130.3" y="1118.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (199 samples, 56.53%)</title><rect x="127.3" y="1091.0" width="667.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="130.3" y="1102.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (33 samples, 9.38%)</title><rect x="147.4" y="1075.0" width="110.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="150.4" y="1086.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$42/815674463.extract (33 samples, 9.38%)</title><rect x="147.4" y="1059.0" width="110.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="150.4" y="1070.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (33 samples, 9.38%)</title><rect x="147.4" y="1043.0" width="110.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="150.4" y="1054.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (33 samples, 9.38%)</title><rect x="147.4" y="1027.0" width="110.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="150.4" y="1038.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (33 samples, 9.38%)</title><rect x="147.4" y="1011.0" width="110.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="150.4" y="1022.0">com/linecorp/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (33 samples, 9.38%)</title><rect x="147.4" y="995.0" width="110.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="150.4" y="1006.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (16 samples, 4.55%)</title><rect x="147.4" y="979.0" width="53.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="150.4" y="990.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (2 samples, 0.57%)</title><rect x="147.4" y="963.0" width="6.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="150.4" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (2 samples, 0.57%)</title><rect x="147.4" y="947.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="150.4" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.57%)</title><rect x="147.4" y="931.0" width="6.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="150.4" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.57%)</title><rect x="147.4" y="915.0" width="6.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="150.4" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (14 samples, 3.98%)</title><rect x="154.1" y="963.0" width="47.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="157.1" y="974.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (14 samples, 3.98%)</title><rect x="154.1" y="947.0" width="47.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="157.1" y="958.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (3 samples, 0.85%)</title><rect x="154.1" y="931.0" width="10.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="157.1" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (3 samples, 0.85%)</title><rect x="154.1" y="915.0" width="10.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="157.1" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (10 samples, 2.84%)</title><rect x="164.2" y="931.0" width="33.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="167.2" y="942.0">co..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.28%)</title><rect x="164.2" y="915.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="167.2" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.28%)</title><rect x="164.2" y="899.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="167.2" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.28%)</title><rect x="164.2" y="883.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="167.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (9 samples, 2.56%)</title><rect x="167.6" y="915.0" width="30.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="170.6" y="926.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (1 samples, 0.28%)</title><rect x="184.3" y="899.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="187.3" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.28%)</title><rect x="187.7" y="899.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="190.7" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (2 samples, 0.57%)</title><rect x="191.0" y="899.0" width="6.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="194.0" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.28%)</title><rect x="197.7" y="931.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="200.7" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.28%)</title><rect x="197.7" y="915.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="200.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (16 samples, 4.55%)</title><rect x="201.1" y="979.0" width="53.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="204.1" y="990.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.28%)</title><rect x="201.1" y="963.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="204.1" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.28%)</title><rect x="201.1" y="947.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="204.1" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.57%)</title><rect x="204.4" y="963.0" width="6.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="207.4" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.28%)</title><rect x="207.8" y="947.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="210.8" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.28%)</title><rect x="207.8" y="931.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="210.8" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (3 samples, 0.85%)</title><rect x="211.1" y="963.0" width="10.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="214.1" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 0.85%)</title><rect x="211.1" y="947.0" width="10.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="214.1" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (3 samples, 0.85%)</title><rect x="211.1" y="931.0" width="10.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="214.1" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (3 samples, 0.85%)</title><rect x="211.1" y="915.0" width="10.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="214.1" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (3 samples, 0.85%)</title><rect x="211.1" y="899.0" width="10.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="214.1" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.28%)</title><rect x="211.1" y="883.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="214.1" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.57%)</title><rect x="214.5" y="883.0" width="6.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="217.5" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.57%)</title><rect x="214.5" y="867.0" width="6.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="217.5" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.57%)</title><rect x="214.5" y="851.0" width="6.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="217.5" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.28%)</title><rect x="217.8" y="835.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="220.8" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.28%)</title><rect x="217.8" y="819.0" width="3.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="220.8" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (10 samples, 2.84%)</title><rect x="221.2" y="963.0" width="33.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="224.2" y="974.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.28%)</title><rect x="224.5" y="947.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="227.5" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.28%)</title><rect x="224.5" y="931.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="227.5" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.28%)</title><rect x="224.5" y="915.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="227.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.28%)</title><rect x="224.5" y="899.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="227.5" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.28%)</title><rect x="224.5" y="883.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="227.5" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (1 samples, 0.28%)</title><rect x="224.5" y="867.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="227.5" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (8 samples, 2.27%)</title><rect x="227.9" y="947.0" width="26.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="230.9" y="958.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (8 samples, 2.27%)</title><rect x="227.9" y="931.0" width="26.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="230.9" y="942.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (8 samples, 2.27%)</title><rect x="227.9" y="915.0" width="26.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="230.9" y="926.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.57%)</title><rect x="227.9" y="899.0" width="6.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="230.9" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.28%)</title><rect x="227.9" y="883.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="230.9" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.28%)</title><rect x="227.9" y="867.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="230.9" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.28%)</title><rect x="227.9" y="851.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="230.9" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.28%)</title><rect x="227.9" y="835.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="230.9" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.28%)</title><rect x="231.2" y="883.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="234.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.28%)</title><rect x="231.2" y="867.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="234.2" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.28%)</title><rect x="234.6" y="899.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="237.6" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.28%)</title><rect x="234.6" y="883.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="237.6" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.28%)</title><rect x="234.6" y="867.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="237.6" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.28%)</title><rect x="234.6" y="851.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="237.6" y="862.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.28%)</title><rect x="234.6" y="835.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="237.6" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.28%)</title><rect x="238.0" y="899.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="241.0" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.28%)</title><rect x="241.3" y="899.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="244.3" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.28%)</title><rect x="241.3" y="883.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="244.3" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.28%)</title><rect x="241.3" y="867.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="244.3" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.28%)</title><rect x="241.3" y="851.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="244.3" y="862.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.28%)</title><rect x="241.3" y="835.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="244.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.28%)</title><rect x="244.7" y="899.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="247.7" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.28%)</title><rect x="244.7" y="883.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="247.7" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.28%)</title><rect x="244.7" y="867.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="247.7" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (2 samples, 0.57%)</title><rect x="248.0" y="899.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="251.0" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (2 samples, 0.57%)</title><rect x="248.0" y="883.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="251.0" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.28%)</title><rect x="248.0" y="867.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="251.0" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.28%)</title><rect x="248.0" y="851.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="251.0" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.28%)</title><rect x="248.0" y="835.0" width="3.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="251.0" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.28%)</title><rect x="248.0" y="819.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="251.0" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.28%)</title><rect x="248.0" y="803.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="251.0" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.28%)</title><rect x="251.4" y="867.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="254.4" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.28%)</title><rect x="251.4" y="851.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="254.4" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.28%)</title><rect x="251.4" y="835.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="254.4" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.28%)</title><rect x="251.4" y="819.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="254.4" y="830.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.28%)</title><rect x="251.4" y="803.0" width="3.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="254.4" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.28%)</title><rect x="254.7" y="979.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="257.7" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.28%)</title><rect x="254.7" y="963.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="257.7" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.28%)</title><rect x="254.7" y="947.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="257.7" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.28%)</title><rect x="254.7" y="931.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="257.7" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.28%)</title><rect x="254.7" y="915.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="257.7" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (141 samples, 40.06%)</title><rect x="258.1" y="1075.0" width="472.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="261.1" y="1086.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.p..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.28%)</title><rect x="294.9" y="1059.0" width="3.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="297.9" y="1070.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.28%)</title><rect x="294.9" y="1043.0" width="3.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="297.9" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (24 samples, 6.82%)</title><rect x="298.3" y="1059.0" width="80.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="301.3" y="1070.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (1 samples, 0.28%)</title><rect x="305.0" y="1043.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="308.0" y="1054.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (21 samples, 5.97%)</title><rect x="308.4" y="1043.0" width="70.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="311.4" y="1054.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (19 samples, 5.40%)</title><rect x="315.1" y="1027.0" width="63.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="318.1" y="1038.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.28%)</title><rect x="315.1" y="1011.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="318.1" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.28%)</title><rect x="315.1" y="995.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="318.1" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.28%)</title><rect x="315.1" y="979.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="318.1" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.28%)</title><rect x="315.1" y="963.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="318.1" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (18 samples, 5.11%)</title><rect x="318.4" y="1011.0" width="60.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="321.4" y="1022.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.remove (11 samples, 3.13%)</title><rect x="341.9" y="995.0" width="36.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="344.9" y="1006.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (9 samples, 2.56%)</title><rect x="345.2" y="979.0" width="30.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="348.2" y="990.0">ja..</text>
</g>
<g>
<title>vtable stub (1 samples, 0.28%)</title><rect x="375.4" y="979.0" width="3.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="378.4" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (5 samples, 1.42%)</title><rect x="378.8" y="1059.0" width="16.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="381.8" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (4 samples, 1.14%)</title><rect x="382.1" y="1043.0" width="13.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="385.1" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.28%)</title><rect x="382.1" y="1027.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="385.1" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.28%)</title><rect x="382.1" y="1011.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="385.1" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.28%)</title><rect x="382.1" y="995.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="385.1" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.85%)</title><rect x="385.5" y="1027.0" width="10.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="388.5" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (28 samples, 7.95%)</title><rect x="395.5" y="1059.0" width="93.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="398.5" y="1070.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (28 samples, 7.95%)</title><rect x="395.5" y="1043.0" width="93.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="398.5" y="1054.0">com/linecor..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.28%)</title><rect x="398.9" y="1027.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="401.9" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.28%)</title><rect x="398.9" y="1011.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="401.9" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.28%)</title><rect x="398.9" y="995.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="401.9" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.28%)</title><rect x="398.9" y="979.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="401.9" y="990.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.28%)</title><rect x="398.9" y="963.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="401.9" y="974.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.28%)</title><rect x="402.2" y="1027.0" width="3.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="405.2" y="1038.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.28%)</title><rect x="402.2" y="1011.0" width="3.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="405.2" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (14 samples, 3.98%)</title><rect x="405.6" y="1027.0" width="46.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="408.6" y="1038.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 1.14%)</title><rect x="429.0" y="1011.0" width="13.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="432.0" y="1022.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 1.14%)</title><rect x="429.0" y="995.0" width="13.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="432.0" y="1006.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.57%)</title><rect x="432.4" y="979.0" width="6.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="435.4" y="990.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.57%)</title><rect x="432.4" y="963.0" width="6.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="435.4" y="974.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.57%)</title><rect x="432.4" y="947.0" width="6.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="435.4" y="958.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.57%)</title><rect x="432.4" y="931.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="435.4" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.28%)</title><rect x="432.4" y="915.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="435.4" y="926.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.28%)</title><rect x="432.4" y="899.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="435.4" y="910.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.28%)</title><rect x="432.4" y="883.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="435.4" y="894.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.28%)</title><rect x="432.4" y="867.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="435.4" y="878.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.28%)</title><rect x="435.7" y="915.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="438.7" y="926.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.28%)</title><rect x="439.1" y="979.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="442.1" y="990.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (2 samples, 0.57%)</title><rect x="442.4" y="1011.0" width="6.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="445.4" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.28%)</title><rect x="442.4" y="995.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="445.4" y="1006.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.28%)</title><rect x="442.4" y="979.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="445.4" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.28%)</title><rect x="442.4" y="963.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="445.4" y="974.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.28%)</title><rect x="445.8" y="995.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="448.8" y="1006.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.28%)</title><rect x="445.8" y="979.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="448.8" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.28%)</title><rect x="445.8" y="963.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="448.8" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.28%)</title><rect x="445.8" y="947.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="448.8" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.28%)</title><rect x="445.8" y="931.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="448.8" y="942.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.28%)</title><rect x="449.1" y="1011.0" width="3.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="452.1" y="1022.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (11 samples, 3.13%)</title><rect x="452.5" y="1027.0" width="36.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="455.5" y="1038.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (11 samples, 3.13%)</title><rect x="452.5" y="1011.0" width="36.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="455.5" y="1022.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.28%)</title><rect x="452.5" y="995.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="455.5" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.28%)</title><rect x="452.5" y="979.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="455.5" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.28%)</title><rect x="452.5" y="963.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="455.5" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.28%)</title><rect x="452.5" y="947.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="455.5" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (10 samples, 2.84%)</title><rect x="455.9" y="995.0" width="33.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="458.9" y="1006.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (10 samples, 2.84%)</title><rect x="455.9" y="979.0" width="33.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="458.9" y="990.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.putVal (7 samples, 1.99%)</title><rect x="465.9" y="963.0" width="23.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="468.9" y="974.0">j..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.28%)</title><rect x="465.9" y="947.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="468.9" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (5 samples, 1.42%)</title><rect x="469.3" y="947.0" width="16.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="472.3" y="958.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.28%)</title><rect x="482.7" y="931.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="485.7" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.28%)</title><rect x="482.7" y="915.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="485.7" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.28%)</title><rect x="482.7" y="899.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="485.7" y="910.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.28%)</title><rect x="486.0" y="947.0" width="3.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="489.0" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (67 samples, 19.03%)</title><rect x="489.4" y="1059.0" width="224.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="492.4" y="1070.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (67 samples, 19.03%)</title><rect x="489.4" y="1043.0" width="224.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="492.4" y="1054.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$207/1989100193.process (59 samples, 16.76%)</title><rect x="492.7" y="1027.0" width="197.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="495.7" y="1038.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (59 samples, 16.76%)</title><rect x="492.7" y="1011.0" width="197.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="495.7" y="1022.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (57 samples, 16.19%)</title><rect x="492.7" y="995.0" width="191.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="495.7" y="1006.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.85%)</title><rect x="496.1" y="979.0" width="10.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="499.1" y="990.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.85%)</title><rect x="496.1" y="963.0" width="10.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="499.1" y="974.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 0.85%)</title><rect x="496.1" y="947.0" width="10.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="499.1" y="958.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (3 samples, 0.85%)</title><rect x="496.1" y="931.0" width="10.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="499.1" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (3 samples, 0.85%)</title><rect x="496.1" y="915.0" width="10.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="499.1" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (3 samples, 0.85%)</title><rect x="496.1" y="899.0" width="10.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="499.1" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (50 samples, 14.20%)</title><rect x="506.1" y="979.0" width="167.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="509.1" y="990.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>java/lang/Thread.sleep (50 samples, 14.20%)</title><rect x="506.1" y="963.0" width="167.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="509.1" y="974.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (42 samples, 11.93%)</title><rect x="526.2" y="947.0" width="140.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="529.2" y="958.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.57%)</title><rect x="539.7" y="931.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="542.7" y="942.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.28%)</title><rect x="546.4" y="931.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="549.4" y="942.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.28%)</title><rect x="549.7" y="931.0" width="3.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="552.7" y="942.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.28%)</title><rect x="553.1" y="931.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="556.1" y="942.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (33 samples, 9.38%)</title><rect x="556.4" y="931.0" width="110.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="559.4" y="942.0">os::sleep(Thr..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.28%)</title><rect x="569.8" y="915.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="572.8" y="926.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.28%)</title><rect x="569.8" y="899.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="572.8" y="910.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.85%)</title><rect x="573.2" y="915.0" width="10.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="576.2" y="926.0"></text>
</g>
<g>
<title>__pthread_cond_init (2 samples, 0.57%)</title><rect x="583.2" y="915.0" width="6.7" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="586.2" y="926.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (15 samples, 4.26%)</title><rect x="589.9" y="915.0" width="50.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="592.9" y="926.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.28%)</title><rect x="640.2" y="915.0" width="3.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="643.2" y="926.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.28%)</title><rect x="643.6" y="915.0" width="3.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="646.6" y="926.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.28%)</title><rect x="646.9" y="915.0" width="3.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="649.9" y="926.0"></text>
</g>
<g>
<title>_init (1 samples, 0.28%)</title><rect x="650.3" y="915.0" width="3.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="653.3" y="926.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.85%)</title><rect x="653.6" y="915.0" width="10.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="656.6" y="926.0"></text>
</g>
<g>
<title>pthread_cond_destroy@@GLIBC_2.3.2 (1 samples, 0.28%)</title><rect x="663.7" y="915.0" width="3.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="666.7" y="926.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.28%)</title><rect x="667.0" y="947.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="670.0" y="958.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.28%)</title><rect x="670.4" y="947.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="673.4" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.85%)</title><rect x="673.8" y="979.0" width="10.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="676.8" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.57%)</title><rect x="677.1" y="963.0" width="6.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="680.1" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.57%)</title><rect x="677.1" y="947.0" width="6.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="680.1" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.57%)</title><rect x="683.8" y="995.0" width="6.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="686.8" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.57%)</title><rect x="683.8" y="979.0" width="6.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="686.8" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.57%)</title><rect x="683.8" y="963.0" width="6.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="686.8" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.57%)</title><rect x="683.8" y="947.0" width="6.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="686.8" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (1 samples, 0.28%)</title><rect x="690.5" y="1027.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="693.5" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.28%)</title><rect x="690.5" y="1011.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="693.5" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.28%)</title><rect x="690.5" y="995.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="693.5" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.28%)</title><rect x="690.5" y="979.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="693.5" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.28%)</title><rect x="693.9" y="1027.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="696.9" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.28%)</title><rect x="693.9" y="1011.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="696.9" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.28%)</title><rect x="697.2" y="1027.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="700.2" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.28%)</title><rect x="697.2" y="1011.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="700.2" y="1022.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.28%)</title><rect x="697.2" y="995.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="700.2" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.57%)</title><rect x="700.6" y="1027.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="703.6" y="1038.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.28%)</title><rect x="703.9" y="1011.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="706.9" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.28%)</title><rect x="703.9" y="995.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="706.9" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.28%)</title><rect x="703.9" y="979.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="706.9" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.28%)</title><rect x="703.9" y="963.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="706.9" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (2 samples, 0.57%)</title><rect x="707.3" y="1027.0" width="6.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="710.3" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (1 samples, 0.28%)</title><rect x="714.0" y="1059.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="717.0" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.28%)</title><rect x="714.0" y="1043.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="717.0" y="1054.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.28%)</title><rect x="714.0" y="1027.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="717.0" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.28%)</title><rect x="714.0" y="1011.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="717.0" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.28%)</title><rect x="714.0" y="995.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="717.0" y="1006.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.28%)</title><rect x="714.0" y="979.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="717.0" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 1.14%)</title><rect x="717.3" y="1059.0" width="13.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="720.3" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 1.14%)</title><rect x="717.3" y="1043.0" width="13.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="720.3" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 1.14%)</title><rect x="717.3" y="1027.0" width="13.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="720.3" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$289/868802186.accept (4 samples, 1.14%)</title><rect x="717.3" y="1011.0" width="13.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="720.3" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$62 (4 samples, 1.14%)</title><rect x="717.3" y="995.0" width="13.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="720.3" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.28%)</title><rect x="717.3" y="979.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="720.3" y="990.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.28%)</title><rect x="717.3" y="963.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="720.3" y="974.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.28%)</title><rect x="717.3" y="947.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="720.3" y="958.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.28%)</title><rect x="717.3" y="931.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="720.3" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.28%)</title><rect x="717.3" y="915.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="720.3" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.28%)</title><rect x="717.3" y="899.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="720.3" y="910.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (3 samples, 0.85%)</title><rect x="720.7" y="979.0" width="10.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="723.7" y="990.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (3 samples, 0.85%)</title><rect x="720.7" y="963.0" width="10.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="723.7" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (19 samples, 5.40%)</title><rect x="730.7" y="1075.0" width="63.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="733.7" y="1086.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (19 samples, 5.40%)</title><rect x="730.7" y="1059.0" width="63.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="733.7" y="1070.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (17 samples, 4.83%)</title><rect x="737.4" y="1043.0" width="57.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="740.4" y="1054.0">java/u..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$289/868802186.accept (1 samples, 0.28%)</title><rect x="737.4" y="1027.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="740.4" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$62 (1 samples, 0.28%)</title><rect x="737.4" y="1011.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="740.4" y="1022.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.28%)</title><rect x="737.4" y="995.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="740.4" y="1006.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.28%)</title><rect x="737.4" y="979.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="740.4" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$290/1634811482.accept (16 samples, 4.55%)</title><rect x="740.8" y="1027.0" width="53.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="743.8" y="1038.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$61 (16 samples, 4.55%)</title><rect x="740.8" y="1011.0" width="53.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="743.8" y="1022.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$283/394369473.complete (16 samples, 4.55%)</title><rect x="740.8" y="995.0" width="53.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="743.8" y="1006.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$38 (16 samples, 4.55%)</title><rect x="740.8" y="979.0" width="53.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="743.8" y="990.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$282/1820496208.complete (16 samples, 4.55%)</title><rect x="740.8" y="963.0" width="53.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="743.8" y="974.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$68 (16 samples, 4.55%)</title><rect x="740.8" y="947.0" width="53.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="743.8" y="958.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (16 samples, 4.55%)</title><rect x="740.8" y="931.0" width="53.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="743.8" y="942.0">com/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (16 samples, 4.55%)</title><rect x="740.8" y="915.0" width="53.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="743.8" y="926.0">ch/qo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (3 samples, 0.85%)</title><rect x="794.4" y="1091.0" width="10.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="797.4" y="1102.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.28%)</title><rect x="801.1" y="1075.0" width="3.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="804.1" y="1086.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.28%)</title><rect x="801.1" y="1059.0" width="3.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="804.1" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (11 samples, 3.13%)</title><rect x="804.5" y="1139.0" width="36.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="807.5" y="1150.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (11 samples, 3.13%)</title><rect x="804.5" y="1123.0" width="36.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="807.5" y="1134.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (9 samples, 2.56%)</title><rect x="811.2" y="1107.0" width="30.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="814.2" y="1118.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 2.56%)</title><rect x="811.2" y="1091.0" width="30.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="814.2" y="1102.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 2.56%)</title><rect x="811.2" y="1075.0" width="30.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="814.2" y="1086.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 2.56%)</title><rect x="811.2" y="1059.0" width="30.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="814.2" y="1070.0">ja..</text>
</g>
<g>
<title>msort_with_tmp.part.0 (1 samples, 0.28%)</title><rect x="841.4" y="1187.0" width="3.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="844.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.28%)</title><rect x="844.7" y="1187.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="847.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.28%)</title><rect x="844.7" y="1171.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="847.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.28%)</title><rect x="844.7" y="1155.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="847.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.handlePendingDisconnects (1 samples, 0.28%)</title><rect x="844.7" y="1139.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="847.7" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.28%)</title><rect x="844.7" y="1123.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="847.7" y="1134.0"></text>
</g>
<g>
<title>start_thread (102 samples, 28.98%)</title><rect x="848.1" y="1187.0" width="341.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="851.1" y="1198.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (102 samples, 28.98%)</title><rect x="848.1" y="1171.0" width="341.9" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="851.1" y="1182.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (13 samples, 3.69%)</title><rect x="848.1" y="1155.0" width="43.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="851.1" y="1166.0">Gang..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (13 samples, 3.69%)</title><rect x="848.1" y="1139.0" width="43.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="851.1" y="1150.0">G1Pa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (12 samples, 3.41%)</title><rect x="848.1" y="1123.0" width="40.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="851.1" y="1134.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (12 samples, 3.41%)</title><rect x="848.1" y="1107.0" width="40.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="851.1" y="1118.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (7 samples, 1.99%)</title><rect x="854.8" y="1091.0" width="23.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="857.8" y="1102.0">G..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (3 samples, 0.85%)</title><rect x="864.8" y="1075.0" width="10.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="867.8" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::vtable_length() const (1 samples, 0.28%)</title><rect x="874.9" y="1075.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="877.9" y="1086.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (3 samples, 0.85%)</title><rect x="878.2" y="1091.0" width="10.1" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="881.2" y="1102.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.28%)</title><rect x="888.3" y="1123.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="891.3" y="1134.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.28%)</title><rect x="888.3" y="1107.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="891.3" y="1118.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.28%)</title><rect x="888.3" y="1091.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="891.3" y="1102.0"></text>
</g>
<g>
<title>G1ParGCAllocator::allocate_direct_or_new_plab(InCSetState, unsigned long, unsigned char) (1 samples, 0.28%)</title><rect x="888.3" y="1075.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="891.3" y="1086.0"></text>
</g>
<g>
<title>G1CollectedHeap::par_allocate_during_gc(InCSetState, unsigned long, unsigned char) (1 samples, 0.28%)</title><rect x="888.3" y="1059.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="891.3" y="1070.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.28%)</title><rect x="888.3" y="1043.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="891.3" y="1054.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.28%)</title><rect x="888.3" y="1027.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="891.3" y="1038.0"></text>
</g>
<g>
<title>os::random() (1 samples, 0.28%)</title><rect x="888.3" y="1011.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="891.3" y="1022.0"></text>
</g>
<g>
<title>JavaThread::run() (89 samples, 25.28%)</title><rect x="891.6" y="1155.0" width="298.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="894.6" y="1166.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (89 samples, 25.28%)</title><rect x="891.6" y="1139.0" width="298.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="894.6" y="1150.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (89 samples, 25.28%)</title><rect x="891.6" y="1123.0" width="298.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="894.6" y="1134.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (89 samples, 25.28%)</title><rect x="891.6" y="1107.0" width="298.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="894.6" y="1118.0">CompileBroker::invoke_compiler_on_method..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (87 samples, 24.72%)</title><rect x="891.6" y="1091.0" width="291.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="894.6" y="1102.0">C2Compiler::compile_method(ciEnv*, ciMe..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (87 samples, 24.72%)</title><rect x="891.6" y="1075.0" width="291.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="894.6" y="1086.0">Compile::Compile(ciEnv*, C2Compiler*, c..</text>
</g>
<g>
<title>Compile::Code_Gen() (44 samples, 12.50%)</title><rect x="891.6" y="1059.0" width="147.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="894.6" y="1070.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.85%)</title><rect x="891.6" y="1043.0" width="10.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="894.6" y="1054.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.28%)</title><rect x="895.0" y="1027.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="898.0" y="1038.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.28%)</title><rect x="895.0" y="1011.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="898.0" y="1022.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.28%)</title><rect x="895.0" y="995.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="898.0" y="1006.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.28%)</title><rect x="898.4" y="1027.0" width="3.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="901.4" y="1038.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.57%)</title><rect x="901.7" y="1043.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="904.7" y="1054.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.28%)</title><rect x="901.7" y="1027.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="904.7" y="1038.0"></text>
</g>
<g>
<title>ResourceObj::operator new(unsigned long) (1 samples, 0.28%)</title><rect x="901.7" y="1011.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="904.7" y="1022.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.28%)</title><rect x="905.1" y="1027.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="908.1" y="1038.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.28%)</title><rect x="905.1" y="1011.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="908.1" y="1022.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 1.14%)</title><rect x="908.4" y="1043.0" width="13.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="911.4" y="1054.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.28%)</title><rect x="908.4" y="1027.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="911.4" y="1038.0"></text>
</g>
<g>
<title>ConNode::Opcode() const (1 samples, 0.28%)</title><rect x="911.8" y="1027.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="914.8" y="1038.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.57%)</title><rect x="915.1" y="1027.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="918.1" y="1038.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.57%)</title><rect x="915.1" y="1011.0" width="6.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="918.1" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.28%)</title><rect x="921.8" y="1043.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="924.8" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.28%)</title><rect x="921.8" y="1027.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="924.8" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.57%)</title><rect x="925.2" y="1043.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="928.2" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.57%)</title><rect x="925.2" y="1027.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="928.2" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.28%)</title><rect x="925.2" y="1011.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="928.2" y="1022.0"></text>
</g>
<g>
<title>MachNode::get_base_and_disp(long&amp;, TypePtr const*&amp;) const (1 samples, 0.28%)</title><rect x="925.2" y="995.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="928.2" y="1006.0"></text>
</g>
<g>
<title>MachNode::memory_inputs(Node*&amp;, Node*&amp;) const (1 samples, 0.28%)</title><rect x="925.2" y="979.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="928.2" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.28%)</title><rect x="928.5" y="1011.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="931.5" y="1022.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.28%)</title><rect x="928.5" y="995.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="931.5" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (32 samples, 9.09%)</title><rect x="931.9" y="1043.0" width="107.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="934.9" y="1054.0">PhaseChaitin:..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.28%)</title><rect x="931.9" y="1027.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="934.9" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.28%)</title><rect x="935.2" y="1027.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="938.2" y="1038.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.28%)</title><rect x="938.6" y="1027.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="941.6" y="1038.0"></text>
</g>
<g>
<title>Node::rematerialize() const (2 samples, 0.57%)</title><rect x="941.9" y="1027.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="944.9" y="1038.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.28%)</title><rect x="948.6" y="1027.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="951.6" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.28%)</title><rect x="952.0" y="1027.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="955.0" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.28%)</title><rect x="955.3" y="1027.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="958.3" y="1038.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.28%)</title><rect x="955.3" y="1011.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="958.3" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 0.57%)</title><rect x="958.7" y="1027.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="961.7" y="1038.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.28%)</title><rect x="962.0" y="1011.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="965.0" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 1.99%)</title><rect x="965.4" y="1027.0" width="23.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="968.4" y="1038.0">P..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.28%)</title><rect x="968.8" y="1011.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="971.8" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.28%)</title><rect x="972.1" y="1011.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="975.1" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 1.14%)</title><rect x="975.5" y="1011.0" width="13.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="978.5" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.85%)</title><rect x="978.8" y="995.0" width="10.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="981.8" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.28%)</title><rect x="988.9" y="1027.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="991.9" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.28%)</title><rect x="988.9" y="1011.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="991.9" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.57%)</title><rect x="992.2" y="1027.0" width="6.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="995.2" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.28%)</title><rect x="995.6" y="1011.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="998.6" y="1022.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (6 samples, 1.70%)</title><rect x="998.9" y="1027.0" width="20.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1001.9" y="1038.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (6 samples, 1.70%)</title><rect x="998.9" y="1011.0" width="20.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1001.9" y="1022.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (6 samples, 1.70%)</title><rect x="998.9" y="995.0" width="20.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1001.9" y="1006.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 0.57%)</title><rect x="998.9" y="979.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1001.9" y="990.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (4 samples, 1.14%)</title><rect x="1005.6" y="979.0" width="13.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1008.6" y="990.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 1.42%)</title><rect x="1019.0" y="1027.0" width="16.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1022.0" y="1038.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.57%)</title><rect x="1029.1" y="1011.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1032.1" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.28%)</title><rect x="1032.4" y="995.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1035.4" y="1006.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.28%)</title><rect x="1035.8" y="1027.0" width="3.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1038.8" y="1038.0"></text>
</g>
<g>
<title>Compile::Optimize() (37 samples, 10.51%)</title><rect x="1039.1" y="1059.0" width="124.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1042.1" y="1070.0">Compile::Optimi..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.57%)</title><rect x="1039.1" y="1043.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1042.1" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.57%)</title><rect x="1039.1" y="1027.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1042.1" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::add_final_edges(Node*) (1 samples, 0.28%)</title><rect x="1039.1" y="1011.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1042.1" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.28%)</title><rect x="1039.1" y="995.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1042.1" y="1006.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.28%)</title><rect x="1039.1" y="979.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1042.1" y="990.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.28%)</title><rect x="1039.1" y="963.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1042.1" y="974.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.28%)</title><rect x="1039.1" y="947.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1042.1" y="958.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.28%)</title><rect x="1039.1" y="931.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1042.1" y="942.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.28%)</title><rect x="1039.1" y="915.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1042.1" y="926.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::invoke(BCEscapeAnalyzer::StateInfo&amp;, Bytecodes::Code, ciMethod*, ciKlass*) (1 samples, 0.28%)</title><rect x="1039.1" y="899.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1042.1" y="910.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.28%)</title><rect x="1039.1" y="883.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1042.1" y="894.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.28%)</title><rect x="1039.1" y="867.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1042.1" y="878.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.28%)</title><rect x="1039.1" y="851.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1042.1" y="862.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.28%)</title><rect x="1039.1" y="835.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1042.1" y="846.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.28%)</title><rect x="1039.1" y="819.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1042.1" y="830.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.28%)</title><rect x="1039.1" y="803.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1042.1" y="814.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.28%)</title><rect x="1039.1" y="787.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1042.1" y="798.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.28%)</title><rect x="1039.1" y="771.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1042.1" y="782.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.28%)</title><rect x="1039.1" y="755.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1042.1" y="766.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.28%)</title><rect x="1039.1" y="739.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1042.1" y="750.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.28%)</title><rect x="1039.1" y="723.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1042.1" y="734.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.28%)</title><rect x="1039.1" y="707.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1042.1" y="718.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.28%)</title><rect x="1039.1" y="691.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1042.1" y="702.0"></text>
</g>
<g>
<title>SystemDictionary::find_instance_or_array_klass(Symbol*, Handle, Handle, Thread*) (1 samples, 0.28%)</title><rect x="1039.1" y="675.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1042.1" y="686.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.28%)</title><rect x="1039.1" y="659.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1042.1" y="670.0"></text>
</g>
<g>
<title>Dictionary::find(int, unsigned int, Symbol*, ClassLoaderData*, Handle, Thread*) (1 samples, 0.28%)</title><rect x="1039.1" y="643.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1042.1" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.28%)</title><rect x="1042.5" y="1011.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1045.5" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="1042.5" y="995.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1045.5" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="1042.5" y="979.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1045.5" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="1042.5" y="963.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1045.5" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="1042.5" y="947.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1045.5" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="1042.5" y="931.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1045.5" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="1042.5" y="915.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1045.5" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="1042.5" y="899.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1045.5" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="1042.5" y="883.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1045.5" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="1042.5" y="867.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1045.5" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="1042.5" y="851.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1045.5" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="1042.5" y="835.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1045.5" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="1042.5" y="819.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1045.5" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="1042.5" y="803.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1045.5" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="1042.5" y="787.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1045.5" y="798.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.28%)</title><rect x="1042.5" y="771.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1045.5" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (28 samples, 7.95%)</title><rect x="1045.9" y="1043.0" width="93.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1048.9" y="1054.0">PhaseIdealL..</text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.28%)</title><rect x="1045.9" y="1027.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1048.9" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.28%)</title><rect x="1045.9" y="1011.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1048.9" y="1022.0"></text>
</g>
<g>
<title>Invariance::is_invariant(Node*) (1 samples, 0.28%)</title><rect x="1045.9" y="995.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1048.9" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.28%)</title><rect x="1049.2" y="1027.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1052.2" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.85%)</title><rect x="1052.6" y="1027.0" width="10.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1055.6" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (18 samples, 5.11%)</title><rect x="1062.6" y="1027.0" width="60.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1065.6" y="1038.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (18 samples, 5.11%)</title><rect x="1062.6" y="1011.0" width="60.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1065.6" y="1022.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.28%)</title><rect x="1062.6" y="995.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1065.6" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (17 samples, 4.83%)</title><rect x="1066.0" y="995.0" width="57.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1069.0" y="1006.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.28%)</title><rect x="1119.6" y="979.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1122.6" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.57%)</title><rect x="1123.0" y="1027.0" width="6.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1126.0" y="1038.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.28%)</title><rect x="1126.3" y="1011.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1129.3" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.85%)</title><rect x="1129.7" y="1027.0" width="10.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1132.7" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.57%)</title><rect x="1133.0" y="1011.0" width="6.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1136.0" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.28%)</title><rect x="1133.0" y="995.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.0" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.28%)</title><rect x="1133.0" y="979.0" width="3.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1136.0" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.28%)</title><rect x="1136.4" y="995.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1139.4" y="1006.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.28%)</title><rect x="1136.4" y="979.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1139.4" y="990.0"></text>
</g>
<g>
<title>Compile::set_node_notes_at(int, Node_Notes*) (1 samples, 0.28%)</title><rect x="1136.4" y="963.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1139.4" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 1.42%)</title><rect x="1139.7" y="1043.0" width="16.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.7" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 1.42%)</title><rect x="1139.7" y="1027.0" width="16.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.7" y="1038.0"></text>
</g>
<g>
<title>IfTrueNode::Opcode() const (1 samples, 0.28%)</title><rect x="1139.7" y="1011.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1142.7" y="1022.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.28%)</title><rect x="1143.1" y="1011.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1146.1" y="1022.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.28%)</title><rect x="1143.1" y="995.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1146.1" y="1006.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.28%)</title><rect x="1143.1" y="979.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1146.1" y="990.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.28%)</title><rect x="1143.1" y="963.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1146.1" y="974.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.28%)</title><rect x="1143.1" y="947.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1146.1" y="958.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.28%)</title><rect x="1143.1" y="931.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1146.1" y="942.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.28%)</title><rect x="1143.1" y="915.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1146.1" y="926.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.28%)</title><rect x="1146.4" y="1011.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1149.4" y="1022.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.28%)</title><rect x="1146.4" y="995.0" width="3.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1149.4" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.57%)</title><rect x="1149.8" y="1011.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.8" y="1022.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.28%)</title><rect x="1153.1" y="995.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1156.1" y="1006.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.28%)</title><rect x="1156.5" y="1043.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.5" y="1054.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.28%)</title><rect x="1156.5" y="1027.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.5" y="1038.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="1156.5" y="1011.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.5" y="1022.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.28%)</title><rect x="1156.5" y="995.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.5" y="1006.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.28%)</title><rect x="1156.5" y="979.0" width="3.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1159.5" y="990.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.28%)</title><rect x="1159.8" y="1043.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.8" y="1054.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.28%)</title><rect x="1159.8" y="1027.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.8" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.42%)</title><rect x="1163.2" y="1059.0" width="16.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.2" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.42%)</title><rect x="1163.2" y="1043.0" width="16.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.2" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.42%)</title><rect x="1163.2" y="1027.0" width="16.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.2" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.42%)</title><rect x="1163.2" y="1011.0" width="16.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.2" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.42%)</title><rect x="1163.2" y="995.0" width="16.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.2" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.14%)</title><rect x="1163.2" y="979.0" width="13.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.2" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.14%)</title><rect x="1163.2" y="963.0" width="13.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.2" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.14%)</title><rect x="1163.2" y="947.0" width="13.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.2" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.14%)</title><rect x="1163.2" y="931.0" width="13.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.2" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.14%)</title><rect x="1163.2" y="915.0" width="13.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.2" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.14%)</title><rect x="1163.2" y="899.0" width="13.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.2" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.14%)</title><rect x="1163.2" y="883.0" width="13.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.2" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.57%)</title><rect x="1163.2" y="867.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.2" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.57%)</title><rect x="1163.2" y="851.0" width="6.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1166.2" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.57%)</title><rect x="1163.2" y="835.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.2" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.57%)</title><rect x="1163.2" y="819.0" width="6.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1166.2" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.57%)</title><rect x="1163.2" y="803.0" width="6.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.2" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.57%)</title><rect x="1163.2" y="787.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.2" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.57%)</title><rect x="1163.2" y="771.0" width="6.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.2" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.57%)</title><rect x="1163.2" y="755.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.57%)</title><rect x="1163.2" y="739.0" width="6.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.57%)</title><rect x="1163.2" y="723.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.57%)</title><rect x="1163.2" y="707.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.57%)</title><rect x="1163.2" y="691.0" width="6.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1166.2" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.57%)</title><rect x="1163.2" y="675.0" width="6.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.2" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.57%)</title><rect x="1163.2" y="659.0" width="6.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1166.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.57%)</title><rect x="1163.2" y="643.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.57%)</title><rect x="1163.2" y="627.0" width="6.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.57%)</title><rect x="1163.2" y="611.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.57%)</title><rect x="1163.2" y="595.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.2" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.57%)</title><rect x="1163.2" y="579.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.2" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.57%)</title><rect x="1163.2" y="563.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.57%)</title><rect x="1163.2" y="547.0" width="6.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.57%)</title><rect x="1163.2" y="531.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.57%)</title><rect x="1163.2" y="515.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.57%)</title><rect x="1163.2" y="499.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.2" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.57%)</title><rect x="1163.2" y="483.0" width="6.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.2" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.57%)</title><rect x="1163.2" y="467.0" width="6.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.57%)</title><rect x="1163.2" y="451.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.57%)</title><rect x="1163.2" y="435.0" width="6.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.57%)</title><rect x="1163.2" y="419.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.57%)</title><rect x="1163.2" y="403.0" width="6.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.2" y="414.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.28%)</title><rect x="1163.2" y="387.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.2" y="398.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.28%)</title><rect x="1163.2" y="371.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.2" y="382.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.28%)</title><rect x="1163.2" y="355.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.2" y="366.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.28%)</title><rect x="1163.2" y="339.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.2" y="350.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.28%)</title><rect x="1163.2" y="323.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.2" y="334.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.28%)</title><rect x="1163.2" y="307.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1166.2" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1166.5" y="387.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.5" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1166.5" y="371.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1166.5" y="355.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1166.5" y="339.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.5" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1166.5" y="323.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1166.5" y="307.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.5" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1166.5" y="291.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.5" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1166.5" y="275.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1166.5" y="259.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.5" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1166.5" y="243.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.5" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1166.5" y="227.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.5" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1166.5" y="211.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.5" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1166.5" y="195.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.5" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1166.5" y="179.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.5" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1166.5" y="163.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.5" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1166.5" y="147.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.5" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1166.5" y="131.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.5" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1166.5" y="115.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.5" y="126.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.28%)</title><rect x="1166.5" y="99.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.5" y="110.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.28%)</title><rect x="1166.5" y="83.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.5" y="94.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.28%)</title><rect x="1166.5" y="67.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.5" y="78.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.28%)</title><rect x="1166.5" y="51.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.5" y="62.0"></text>
</g>
<g>
<title>ciMethod::should_inline() (1 samples, 0.28%)</title><rect x="1166.5" y="35.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1169.5" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.57%)</title><rect x="1169.9" y="867.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.9" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.57%)</title><rect x="1169.9" y="851.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.9" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.57%)</title><rect x="1169.9" y="835.0" width="6.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.9" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.57%)</title><rect x="1169.9" y="819.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.9" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.57%)</title><rect x="1169.9" y="803.0" width="6.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.9" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.57%)</title><rect x="1169.9" y="787.0" width="6.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.9" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.57%)</title><rect x="1169.9" y="771.0" width="6.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.9" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.57%)</title><rect x="1169.9" y="755.0" width="6.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.9" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.57%)</title><rect x="1169.9" y="739.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.57%)</title><rect x="1169.9" y="723.0" width="6.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.57%)</title><rect x="1169.9" y="707.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.57%)</title><rect x="1169.9" y="691.0" width="6.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.57%)</title><rect x="1169.9" y="675.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.9" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.57%)</title><rect x="1169.9" y="659.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.9" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.57%)</title><rect x="1169.9" y="643.0" width="6.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.57%)</title><rect x="1169.9" y="627.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.57%)</title><rect x="1169.9" y="611.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.57%)</title><rect x="1169.9" y="595.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.57%)</title><rect x="1169.9" y="579.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.9" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.57%)</title><rect x="1169.9" y="563.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.9" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.57%)</title><rect x="1169.9" y="547.0" width="6.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.57%)</title><rect x="1169.9" y="531.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.57%)</title><rect x="1169.9" y="515.0" width="6.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.57%)</title><rect x="1169.9" y="499.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.57%)</title><rect x="1169.9" y="483.0" width="6.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.9" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.57%)</title><rect x="1169.9" y="467.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.9" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.57%)</title><rect x="1169.9" y="451.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.57%)</title><rect x="1169.9" y="435.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.57%)</title><rect x="1169.9" y="419.0" width="6.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.57%)</title><rect x="1169.9" y="403.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.57%)</title><rect x="1169.9" y="387.0" width="6.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.9" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.57%)</title><rect x="1169.9" y="371.0" width="6.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.9" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.57%)</title><rect x="1169.9" y="355.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.57%)</title><rect x="1169.9" y="339.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1172.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.57%)</title><rect x="1169.9" y="323.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.57%)</title><rect x="1169.9" y="307.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1172.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1169.9" y="291.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.9" y="302.0"></text>
</g>
<g>
<title>TypeOopPtr::would_improve_type(ciKlass*, int) const (1 samples, 0.28%)</title><rect x="1169.9" y="275.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.28%)</title><rect x="1173.2" y="291.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.2" y="302.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_klass(bool&amp;) (1 samples, 0.28%)</title><rect x="1173.2" y="275.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.2" y="286.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.28%)</title><rect x="1173.2" y="259.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.2" y="270.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.28%)</title><rect x="1173.2" y="243.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.2" y="254.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.28%)</title><rect x="1173.2" y="227.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.2" y="238.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.28%)</title><rect x="1176.6" y="979.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.6" y="990.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.28%)</title><rect x="1176.6" y="963.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.6" y="974.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.28%)</title><rect x="1176.6" y="947.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.6" y="958.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.28%)</title><rect x="1176.6" y="931.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.6" y="942.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.28%)</title><rect x="1176.6" y="915.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.6" y="926.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.28%)</title><rect x="1176.6" y="899.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.6" y="910.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.28%)</title><rect x="1176.6" y="883.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.6" y="894.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.28%)</title><rect x="1176.6" y="867.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.6" y="878.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.28%)</title><rect x="1176.6" y="851.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.6" y="862.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.28%)</title><rect x="1179.9" y="1059.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.9" y="1070.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.28%)</title><rect x="1179.9" y="1043.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.9" y="1054.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.28%)</title><rect x="1179.9" y="1027.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.9" y="1038.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.57%)</title><rect x="1183.3" y="1091.0" width="6.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.3" y="1102.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.57%)</title><rect x="1183.3" y="1075.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.3" y="1086.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.57%)</title><rect x="1183.3" y="1059.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.3" y="1070.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.28%)</title><rect x="1183.3" y="1043.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.3" y="1054.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.28%)</title><rect x="1183.3" y="1027.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.3" y="1038.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.28%)</title><rect x="1183.3" y="1011.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.3" y="1022.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.28%)</title><rect x="1183.3" y="995.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.3" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.28%)</title><rect x="1183.3" y="979.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.3" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.28%)</title><rect x="1183.3" y="963.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.3" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.28%)</title><rect x="1183.3" y="947.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.3" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.28%)</title><rect x="1183.3" y="931.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.3" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.28%)</title><rect x="1183.3" y="915.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.3" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.28%)</title><rect x="1183.3" y="899.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.3" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.28%)</title><rect x="1183.3" y="883.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.3" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.28%)</title><rect x="1183.3" y="867.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.3" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.28%)</title><rect x="1183.3" y="851.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.3" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.28%)</title><rect x="1183.3" y="835.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.3" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.28%)</title><rect x="1183.3" y="819.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.3" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.28%)</title><rect x="1183.3" y="803.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.3" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.28%)</title><rect x="1183.3" y="787.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.3" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.28%)</title><rect x="1183.3" y="771.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.3" y="782.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.28%)</title><rect x="1183.3" y="755.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.3" y="766.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.28%)</title><rect x="1183.3" y="739.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.3" y="750.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.28%)</title><rect x="1183.3" y="723.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.3" y="734.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.28%)</title><rect x="1183.3" y="707.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.3" y="718.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.28%)</title><rect x="1186.6" y="1043.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.6" y="1054.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.28%)</title><rect x="1186.6" y="1027.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.6" y="1038.0"></text>
</g>
<g>
<title>nmethod::post_compiled_method_load_event() (1 samples, 0.28%)</title><rect x="1186.6" y="1011.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.6" y="1022.0"></text>
</g>
<g>
<title>nmethod::get_and_cache_jmethod_id() (1 samples, 0.28%)</title><rect x="1186.6" y="995.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.6" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::get_jmethod_id(instanceKlassHandle, methodHandle) (1 samples, 0.28%)</title><rect x="1186.6" y="979.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.6" y="990.0"></text>
</g>
</g>
</svg>
