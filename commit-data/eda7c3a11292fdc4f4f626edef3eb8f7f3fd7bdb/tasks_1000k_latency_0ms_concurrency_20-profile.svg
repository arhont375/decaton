<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1158" onload="init(evt)" viewBox="0 0 1200 1158" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1141"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1141"> </text>
<g id="frames">
<g>
<title>all (1,169 samples, 100.00%)</title><rect x="10.0" y="1107.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1118.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (274 samples, 23.44%)</title><rect x="10.0" y="1091.0" width="276.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1102.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (273 samples, 23.35%)</title><rect x="11.0" y="1075.0" width="275.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.0" y="1086.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (4 samples, 0.34%)</title><rect x="11.0" y="1059.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.0" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (4 samples, 0.34%)</title><rect x="11.0" y="1043.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.0" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.26%)</title><rect x="12.0" y="1027.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.0" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.26%)</title><rect x="12.0" y="1011.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.0" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.09%)</title><rect x="12.0" y="995.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.0" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.09%)</title><rect x="12.0" y="979.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.0" y="990.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.09%)</title><rect x="12.0" y="963.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.0" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.09%)</title><rect x="12.0" y="947.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.0" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="12.0" y="931.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.0" y="942.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.17%)</title><rect x="13.0" y="995.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.0" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.17%)</title><rect x="13.0" y="979.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.0" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.17%)</title><rect x="13.0" y="963.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.0" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="13.0" y="947.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.0" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="13.0" y="931.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.0" y="942.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="13.0" y="915.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.0" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$268/2077449929.test (1 samples, 0.09%)</title><rect x="13.0" y="899.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.0" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.09%)</title><rect x="14.0" y="947.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.0" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.09%)</title><rect x="14.0" y="931.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="17.0" y="942.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.09%)</title><rect x="14.0" y="915.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.0" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.09%)</title><rect x="14.0" y="899.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.0" y="910.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="14.0" y="883.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="17.0" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (2 samples, 0.17%)</title><rect x="15.0" y="1059.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.0" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (2 samples, 0.17%)</title><rect x="15.0" y="1043.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="18.0" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.17%)</title><rect x="15.0" y="1027.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.0" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.17%)</title><rect x="15.0" y="1011.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.0" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.17%)</title><rect x="15.0" y="995.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="18.0" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.17%)</title><rect x="15.0" y="979.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="18.0" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.17%)</title><rect x="15.0" y="963.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.0" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (2 samples, 0.17%)</title><rect x="15.0" y="947.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="18.0" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.17%)</title><rect x="15.0" y="931.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.0" y="942.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.17%)</title><rect x="15.0" y="915.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="18.0" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$270/1548960097.test (2 samples, 0.17%)</title><rect x="15.0" y="899.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.0" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (4 samples, 0.34%)</title><rect x="17.1" y="1059.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.1" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (4 samples, 0.34%)</title><rect x="17.1" y="1043.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="20.1" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (4 samples, 0.34%)</title><rect x="17.1" y="1027.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.1" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$266/2116365521.accept (4 samples, 0.34%)</title><rect x="17.1" y="1011.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.1" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (4 samples, 0.34%)</title><rect x="17.1" y="995.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="20.1" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (4 samples, 0.34%)</title><rect x="17.1" y="979.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.1" y="990.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (4 samples, 0.34%)</title><rect x="17.1" y="963.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="20.1" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.09%)</title><rect x="21.1" y="1059.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="24.1" y="1070.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (201 samples, 17.19%)</title><rect x="22.1" y="1059.0" width="202.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="25.1" y="1070.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$265/39629991.accept (190 samples, 16.25%)</title><rect x="22.1" y="1043.0" width="191.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="25.1" y="1054.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (189 samples, 16.17%)</title><rect x="23.1" y="1027.0" width="190.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="26.1" y="1038.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (159 samples, 13.60%)</title><rect x="30.2" y="1011.0" width="160.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="33.2" y="1022.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (159 samples, 13.60%)</title><rect x="30.2" y="995.0" width="160.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="33.2" y="1006.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (159 samples, 13.60%)</title><rect x="30.2" y="979.0" width="160.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="33.2" y="990.0">com/linecorp/decaton..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (159 samples, 13.60%)</title><rect x="30.2" y="963.0" width="160.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="33.2" y="974.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (159 samples, 13.60%)</title><rect x="30.2" y="947.0" width="160.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="33.2" y="958.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (159 samples, 13.60%)</title><rect x="30.2" y="931.0" width="160.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="33.2" y="942.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (115 samples, 9.84%)</title><rect x="70.6" y="915.0" width="116.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="73.6" y="926.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (21 samples, 1.80%)</title><rect x="71.6" y="899.0" width="21.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="74.6" y="910.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (21 samples, 1.80%)</title><rect x="71.6" y="883.0" width="21.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="74.6" y="894.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (21 samples, 1.80%)</title><rect x="71.6" y="867.0" width="21.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="74.6" y="878.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.43%)</title><rect x="92.8" y="899.0" width="5.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="95.8" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (5 samples, 0.43%)</title><rect x="92.8" y="883.0" width="5.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="95.8" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.09%)</title><rect x="94.8" y="867.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="97.8" y="878.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.09%)</title><rect x="94.8" y="851.0" width="1.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="97.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.17%)</title><rect x="95.8" y="867.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="98.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (88 samples, 7.53%)</title><rect x="97.8" y="899.0" width="88.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="100.8" y="910.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (88 samples, 7.53%)</title><rect x="97.8" y="883.0" width="88.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="100.8" y="894.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (86 samples, 7.36%)</title><rect x="97.8" y="867.0" width="86.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="100.8" y="878.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (86 samples, 7.36%)</title><rect x="97.8" y="851.0" width="86.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="100.8" y="862.0">java/util/..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (85 samples, 7.27%)</title><rect x="98.8" y="835.0" width="85.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="101.8" y="846.0">sun/misc/U..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.09%)</title><rect x="98.8" y="819.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="101.8" y="830.0"></text>
</g>
<g>
<title>Unsafe_Unpark (69 samples, 5.90%)</title><rect x="99.8" y="819.0" width="69.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="102.8" y="830.0">Unsafe_..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="100.8" y="803.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="103.8" y="814.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.17%)</title><rect x="101.9" y="803.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="104.9" y="814.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="103.9" y="803.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="106.9" y="814.0"></text>
</g>
<g>
<title>__pthread_cond_signal (42 samples, 3.59%)</title><rect x="104.9" y="803.0" width="42.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="107.9" y="814.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (4 samples, 0.34%)</title><rect x="147.3" y="803.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="150.3" y="814.0"></text>
</g>
<g>
<title>pthread_mutex_lock (18 samples, 1.54%)</title><rect x="151.3" y="803.0" width="18.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="154.3" y="814.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 0.34%)</title><rect x="169.5" y="819.0" width="4.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="172.5" y="830.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (11 samples, 0.94%)</title><rect x="173.5" y="819.0" width="11.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="176.5" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.17%)</title><rect x="184.6" y="867.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="187.6" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.17%)</title><rect x="186.6" y="915.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="189.6" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (2 samples, 0.17%)</title><rect x="186.6" y="899.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="189.6" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.17%)</title><rect x="186.6" y="883.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="189.6" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.17%)</title><rect x="188.7" y="915.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="191.7" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.17%)</title><rect x="188.7" y="899.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="191.7" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.17%)</title><rect x="188.7" y="883.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="191.7" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (2 samples, 0.17%)</title><rect x="188.7" y="867.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="191.7" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (1 samples, 0.09%)</title><rect x="190.7" y="1011.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="193.7" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.09%)</title><rect x="190.7" y="995.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="193.7" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (5 samples, 0.43%)</title><rect x="191.7" y="1011.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="194.7" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.43%)</title><rect x="191.7" y="995.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="194.7" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.43%)</title><rect x="191.7" y="979.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="194.7" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/TaskRequest.&lt;init&gt; (16 samples, 1.37%)</title><rect x="196.7" y="1011.0" width="16.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="199.7" y="1022.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="196.7" y="995.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="199.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="196.7" y="979.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="199.7" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="196.7" y="963.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="199.7" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="196.7" y="947.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="199.7" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="196.7" y="931.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="199.7" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="196.7" y="915.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="199.7" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="196.7" y="899.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="199.7" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="196.7" y="883.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="199.7" y="894.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (14 samples, 1.20%)</title><rect x="197.8" y="995.0" width="14.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="200.8" y="1006.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.09%)</title><rect x="206.8" y="979.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="209.8" y="990.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.09%)</title><rect x="206.8" y="963.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="209.8" y="974.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.09%)</title><rect x="206.8" y="947.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="209.8" y="958.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.09%)</title><rect x="206.8" y="931.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="209.8" y="942.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.34%)</title><rect x="207.8" y="979.0" width="4.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="210.8" y="990.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="211.9" y="995.0" width="1.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="214.9" y="1006.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="212.9" y="1011.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="215.9" y="1022.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="213.9" y="1043.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="216.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.09%)</title><rect x="214.9" y="1043.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="217.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.09%)</title><rect x="214.9" y="1027.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="217.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.09%)</title><rect x="214.9" y="1011.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="217.9" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.values (1 samples, 0.09%)</title><rect x="214.9" y="995.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="217.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (7 samples, 0.60%)</title><rect x="215.9" y="1043.0" width="7.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="218.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (7 samples, 0.60%)</title><rect x="215.9" y="1027.0" width="7.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="218.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.60%)</title><rect x="215.9" y="1011.0" width="7.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="218.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.60%)</title><rect x="215.9" y="995.0" width="7.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="218.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (2 samples, 0.17%)</title><rect x="223.0" y="1043.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="226.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.09%)</title><rect x="224.0" y="1027.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="227.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (60 samples, 5.13%)</title><rect x="225.0" y="1059.0" width="60.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="228.0" y="1070.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (60 samples, 5.13%)</title><rect x="225.0" y="1043.0" width="60.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="228.0" y="1054.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquireAndEnsureOpen (1 samples, 0.09%)</title><rect x="225.0" y="1027.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="228.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (37 samples, 3.17%)</title><rect x="226.0" y="1027.0" width="37.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="229.0" y="1038.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.09%)</title><rect x="226.0" y="1011.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="229.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.09%)</title><rect x="226.0" y="995.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="229.0" y="1006.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.09%)</title><rect x="226.0" y="979.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="229.0" y="990.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.09%)</title><rect x="226.0" y="963.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="229.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="227.0" y="1011.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="230.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="227.0" y="995.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="230.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.09%)</title><rect x="227.0" y="979.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="230.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.09%)</title><rect x="227.0" y="963.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="230.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.09%)</title><rect x="227.0" y="947.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="230.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.09%)</title><rect x="227.0" y="931.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="230.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.09%)</title><rect x="227.0" y="915.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="230.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.09%)</title><rect x="227.0" y="899.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="230.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (35 samples, 2.99%)</title><rect x="228.0" y="1011.0" width="35.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="231.0" y="1022.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (35 samples, 2.99%)</title><rect x="228.0" y="995.0" width="35.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="231.0" y="1006.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (28 samples, 2.40%)</title><rect x="228.0" y="979.0" width="28.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="231.0" y="990.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (28 samples, 2.40%)</title><rect x="228.0" y="963.0" width="28.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="231.0" y="974.0">or..</text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="231.1" y="947.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="234.1" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (10 samples, 0.86%)</title><rect x="232.1" y="947.0" width="10.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="235.1" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (3 samples, 0.26%)</title><rect x="239.1" y="931.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="242.1" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (3 samples, 0.26%)</title><rect x="239.1" y="915.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="242.1" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (3 samples, 0.26%)</title><rect x="239.1" y="899.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="242.1" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (3 samples, 0.26%)</title><rect x="239.1" y="883.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="242.1" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (3 samples, 0.26%)</title><rect x="239.1" y="867.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="242.1" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (3 samples, 0.26%)</title><rect x="239.1" y="851.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="242.1" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (3 samples, 0.26%)</title><rect x="239.1" y="835.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="242.1" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (14 samples, 1.20%)</title><rect x="242.2" y="947.0" width="14.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="245.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (14 samples, 1.20%)</title><rect x="242.2" y="931.0" width="14.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="245.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (14 samples, 1.20%)</title><rect x="242.2" y="915.0" width="14.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="245.2" y="926.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (14 samples, 1.20%)</title><rect x="242.2" y="899.0" width="14.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="245.2" y="910.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (8 samples, 0.68%)</title><rect x="248.2" y="883.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="251.2" y="894.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.17%)</title><rect x="254.3" y="867.0" width="2.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="257.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (4 samples, 0.34%)</title><rect x="256.3" y="979.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="259.3" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (4 samples, 0.34%)</title><rect x="256.3" y="963.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="259.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (2 samples, 0.17%)</title><rect x="256.3" y="947.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="259.3" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.17%)</title><rect x="256.3" y="931.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="259.3" y="942.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="257.3" y="915.0" width="1.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="260.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="258.3" y="947.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="261.3" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="258.3" y="931.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="261.3" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="258.3" y="915.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="261.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="259.3" y="899.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="262.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.09%)</title><rect x="260.3" y="979.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="263.3" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.09%)</title><rect x="260.3" y="963.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="263.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="260.3" y="947.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="263.3" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="260.3" y="931.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="263.3" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="260.3" y="915.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="263.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.09%)</title><rect x="260.3" y="899.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="263.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (2 samples, 0.17%)</title><rect x="261.3" y="979.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="264.3" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (9 samples, 0.77%)</title><rect x="263.4" y="1027.0" width="9.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="266.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (9 samples, 0.77%)</title><rect x="263.4" y="1011.0" width="9.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="266.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (9 samples, 0.77%)</title><rect x="263.4" y="995.0" width="9.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="266.4" y="1006.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 0.26%)</title><rect x="264.4" y="979.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="267.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$233/1278850598.accept (3 samples, 0.26%)</title><rect x="264.4" y="963.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="267.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (3 samples, 0.26%)</title><rect x="264.4" y="947.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="267.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (3 samples, 0.26%)</title><rect x="264.4" y="931.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="267.4" y="942.0"></text>
</g>
<g>
<title>java/util/Optional.map (1 samples, 0.09%)</title><rect x="264.4" y="915.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="267.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$$Lambda$235/164855042.apply (1 samples, 0.09%)</title><rect x="264.4" y="899.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="267.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lambda$leaderAndEpoch$6 (1 samples, 0.09%)</title><rect x="264.4" y="883.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="267.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (2 samples, 0.17%)</title><rect x="265.4" y="915.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="268.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (2 samples, 0.17%)</title><rect x="265.4" y="899.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="268.4" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.17%)</title><rect x="265.4" y="883.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="268.4" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.17%)</title><rect x="265.4" y="867.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="268.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.09%)</title><rect x="267.4" y="979.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="270.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.09%)</title><rect x="267.4" y="963.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="270.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (4 samples, 0.34%)</title><rect x="268.4" y="979.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="271.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (4 samples, 0.34%)</title><rect x="268.4" y="963.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="271.4" y="974.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.26%)</title><rect x="269.4" y="947.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="272.4" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.26%)</title><rect x="269.4" y="931.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="272.4" y="942.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.26%)</title><rect x="269.4" y="915.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="272.4" y="926.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.26%)</title><rect x="269.4" y="899.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="272.4" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.26%)</title><rect x="269.4" y="883.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="272.4" y="894.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.09%)</title><rect x="269.4" y="867.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="272.4" y="878.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.estimateSize (1 samples, 0.09%)</title><rect x="269.4" y="851.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="272.4" y="862.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (1 samples, 0.09%)</title><rect x="269.4" y="835.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="272.4" y="846.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="270.4" y="867.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="273.4" y="878.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.09%)</title><rect x="270.4" y="851.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="273.4" y="862.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (1 samples, 0.09%)</title><rect x="270.4" y="835.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="273.4" y="846.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (1 samples, 0.09%)</title><rect x="270.4" y="819.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="273.4" y="830.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.09%)</title><rect x="270.4" y="803.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="273.4" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="270.4" y="787.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="273.4" y="798.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.09%)</title><rect x="271.4" y="867.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="274.4" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.09%)</title><rect x="271.4" y="851.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="274.4" y="862.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.09%)</title><rect x="271.4" y="835.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="274.4" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.09%)</title><rect x="271.4" y="819.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="274.4" y="830.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="271.4" y="803.0" width="1.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="274.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (6 samples, 0.51%)</title><rect x="272.4" y="1027.0" width="6.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="275.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (6 samples, 0.51%)</title><rect x="272.4" y="1011.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="275.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (6 samples, 0.51%)</title><rect x="272.4" y="995.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="275.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (5 samples, 0.43%)</title><rect x="272.4" y="979.0" width="5.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="275.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.09%)</title><rect x="272.4" y="963.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="275.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.09%)</title><rect x="272.4" y="947.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="275.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.09%)</title><rect x="272.4" y="931.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="275.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.09%)</title><rect x="272.4" y="915.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="275.4" y="926.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.09%)</title><rect x="272.4" y="899.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="275.4" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.09%)</title><rect x="272.4" y="883.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="275.4" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.09%)</title><rect x="272.4" y="867.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="275.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (4 samples, 0.34%)</title><rect x="273.5" y="963.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="276.5" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (4 samples, 0.34%)</title><rect x="273.5" y="947.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="276.5" y="958.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.17%)</title><rect x="273.5" y="931.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="276.5" y="942.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.17%)</title><rect x="273.5" y="915.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="276.5" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 0.17%)</title><rect x="275.5" y="931.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="278.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 0.17%)</title><rect x="275.5" y="915.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="278.5" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (2 samples, 0.17%)</title><rect x="275.5" y="899.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="278.5" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.17%)</title><rect x="275.5" y="883.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="278.5" y="894.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.17%)</title><rect x="275.5" y="867.0" width="2.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="278.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.09%)</title><rect x="277.5" y="979.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="280.5" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.09%)</title><rect x="277.5" y="963.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="280.5" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.09%)</title><rect x="277.5" y="947.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="280.5" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.09%)</title><rect x="277.5" y="931.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="280.5" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.09%)</title><rect x="277.5" y="915.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="280.5" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (5 samples, 0.43%)</title><rect x="278.5" y="1027.0" width="5.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="281.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (5 samples, 0.43%)</title><rect x="278.5" y="1011.0" width="5.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="281.5" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 0.17%)</title><rect x="279.5" y="995.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="282.5" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.iterator (1 samples, 0.09%)</title><rect x="279.5" y="979.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="282.5" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.&lt;init&gt; (1 samples, 0.09%)</title><rect x="279.5" y="963.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="282.5" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.advance (1 samples, 0.09%)</title><rect x="279.5" y="947.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="282.5" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.first (1 samples, 0.09%)</title><rect x="279.5" y="931.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="282.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.09%)</title><rect x="280.5" y="979.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="283.5" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="280.5" y="963.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="283.5" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="280.5" y="947.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="283.5" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="280.5" y="931.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="283.5" y="942.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="280.5" y="915.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="283.5" y="926.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="280.5" y="899.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="283.5" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 0.17%)</title><rect x="281.5" y="995.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="284.5" y="1006.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (2 samples, 0.17%)</title><rect x="281.5" y="979.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="284.5" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.17%)</title><rect x="281.5" y="963.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="284.5" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (2 samples, 0.17%)</title><rect x="283.6" y="1027.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="286.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="283.6" y="1011.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="286.6" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerInterceptors.onConsume (1 samples, 0.09%)</title><rect x="283.6" y="995.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="286.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="284.6" y="995.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="287.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/SystemTime.milliseconds (1 samples, 0.09%)</title><rect x="284.6" y="979.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="287.6" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="285.6" y="1059.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="288.6" y="1070.0"></text>
</g>
<g>
<title>java/lang/Thread.run (758 samples, 64.84%)</title><rect x="286.6" y="1091.0" width="765.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="289.6" y="1102.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (757 samples, 64.76%)</title><rect x="287.6" y="1075.0" width="764.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="290.6" y="1086.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (757 samples, 64.76%)</title><rect x="287.6" y="1059.0" width="764.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="290.6" y="1070.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$285/347748798.run (531 samples, 45.42%)</title><rect x="291.6" y="1043.0" width="536.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="294.6" y="1054.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$285/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$70 (531 samples, 45.42%)</title><rect x="291.6" y="1027.0" width="536.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="294.6" y="1038.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTa..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (529 samples, 45.25%)</title><rect x="293.6" y="1011.0" width="534.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="296.6" y="1022.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (529 samples, 45.25%)</title><rect x="293.6" y="995.0" width="534.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="296.6" y="1006.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleTh..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (187 samples, 16.00%)</title><rect x="306.8" y="979.0" width="188.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="309.8" y="990.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$42/815674463.extract (187 samples, 16.00%)</title><rect x="306.8" y="963.0" width="188.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="309.8" y="974.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (187 samples, 16.00%)</title><rect x="306.8" y="947.0" width="188.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="309.8" y="958.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="306.8" y="931.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="309.8" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="306.8" y="915.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="309.8" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="306.8" y="899.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="309.8" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="306.8" y="883.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="309.8" y="894.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="306.8" y="867.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="309.8" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.09%)</title><rect x="306.8" y="851.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="309.8" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (186 samples, 15.91%)</title><rect x="307.8" y="931.0" width="187.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="310.8" y="942.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (186 samples, 15.91%)</title><rect x="307.8" y="915.0" width="187.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="310.8" y="926.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (186 samples, 15.91%)</title><rect x="307.8" y="899.0" width="187.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="310.8" y="910.0">com/fasterxml/jackson/da..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (51 samples, 4.36%)</title><rect x="307.8" y="883.0" width="51.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="310.8" y="894.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (37 samples, 3.17%)</title><rect x="307.8" y="867.0" width="37.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="310.8" y="878.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (35 samples, 2.99%)</title><rect x="307.8" y="851.0" width="35.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="310.8" y="862.0">com..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="330.0" y="835.0" width="1.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="333.0" y="846.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.51%)</title><rect x="331.0" y="835.0" width="6.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="334.0" y="846.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.17%)</title><rect x="335.0" y="819.0" width="2.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="338.0" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (6 samples, 0.51%)</title><rect x="337.0" y="835.0" width="6.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="340.0" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.51%)</title><rect x="337.0" y="819.0" width="6.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="340.0" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (6 samples, 0.51%)</title><rect x="337.0" y="803.0" width="6.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="340.0" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (6 samples, 0.51%)</title><rect x="337.0" y="787.0" width="6.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="340.0" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (6 samples, 0.51%)</title><rect x="337.0" y="771.0" width="6.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="340.0" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.&lt;init&gt; (2 samples, 0.17%)</title><rect x="343.1" y="851.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="346.1" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.17%)</title><rect x="343.1" y="835.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="346.1" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (14 samples, 1.20%)</title><rect x="345.1" y="867.0" width="14.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="348.1" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.&lt;init&gt; (1 samples, 0.09%)</title><rect x="345.1" y="851.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="348.1" y="862.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.09%)</title><rect x="345.1" y="835.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="348.1" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (13 samples, 1.11%)</title><rect x="346.1" y="851.0" width="13.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="349.1" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.17%)</title><rect x="348.2" y="835.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="351.2" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (5 samples, 0.43%)</title><rect x="350.2" y="835.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="353.2" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (5 samples, 0.43%)</title><rect x="350.2" y="819.0" width="5.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="353.2" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (1 samples, 0.09%)</title><rect x="350.2" y="803.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="353.2" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="350.2" y="787.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="353.2" y="798.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="350.2" y="771.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="353.2" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (4 samples, 0.34%)</title><rect x="351.2" y="803.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="354.2" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (4 samples, 0.34%)</title><rect x="355.2" y="835.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="358.2" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (123 samples, 10.52%)</title><rect x="359.3" y="883.0" width="124.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="362.3" y="894.0">com/fasterxml/j..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (9 samples, 0.77%)</title><rect x="359.3" y="867.0" width="9.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="362.3" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (9 samples, 0.77%)</title><rect x="359.3" y="851.0" width="9.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="362.3" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (6 samples, 0.51%)</title><rect x="360.3" y="835.0" width="6.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="363.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (4 samples, 0.34%)</title><rect x="362.3" y="819.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="365.3" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.release (1 samples, 0.09%)</title><rect x="366.3" y="835.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="369.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (1 samples, 0.09%)</title><rect x="367.3" y="835.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="370.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (16 samples, 1.37%)</title><rect x="368.3" y="867.0" width="16.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="371.3" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (16 samples, 1.37%)</title><rect x="368.3" y="851.0" width="16.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="371.3" y="862.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.26%)</title><rect x="374.4" y="835.0" width="3.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="377.4" y="846.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.26%)</title><rect x="374.4" y="819.0" width="3.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="377.4" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.09%)</title><rect x="377.4" y="835.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="380.4" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (4 samples, 0.34%)</title><rect x="378.4" y="835.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="381.4" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (2 samples, 0.17%)</title><rect x="382.5" y="835.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="385.5" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (12 samples, 1.03%)</title><rect x="384.5" y="867.0" width="12.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="387.5" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (10 samples, 0.86%)</title><rect x="385.5" y="851.0" width="10.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="388.5" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (9 samples, 0.77%)</title><rect x="386.5" y="835.0" width="9.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="389.5" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (4 samples, 0.34%)</title><rect x="391.6" y="819.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="394.6" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="394.6" y="803.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="397.6" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="394.6" y="787.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="397.6" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="394.6" y="771.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="397.6" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="394.6" y="755.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="397.6" y="766.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="394.6" y="739.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="397.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.09%)</title><rect x="395.6" y="851.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="398.6" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (6 samples, 0.51%)</title><rect x="396.6" y="867.0" width="6.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="399.6" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (6 samples, 0.51%)</title><rect x="396.6" y="851.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="399.6" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.26%)</title><rect x="399.6" y="835.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="402.6" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (80 samples, 6.84%)</title><rect x="402.7" y="867.0" width="80.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="405.7" y="878.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (23 samples, 1.97%)</title><rect x="404.7" y="851.0" width="23.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="407.7" y="862.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (9 samples, 0.77%)</title><rect x="404.7" y="835.0" width="9.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="407.7" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (9 samples, 0.77%)</title><rect x="404.7" y="819.0" width="9.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="407.7" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (9 samples, 0.77%)</title><rect x="404.7" y="803.0" width="9.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="407.7" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (9 samples, 0.77%)</title><rect x="404.7" y="787.0" width="9.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="407.7" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (3 samples, 0.26%)</title><rect x="410.7" y="771.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="413.7" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (9 samples, 0.77%)</title><rect x="413.8" y="835.0" width="9.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="416.8" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (5 samples, 0.43%)</title><rect x="413.8" y="819.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="416.8" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.09%)</title><rect x="417.8" y="803.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="420.8" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (4 samples, 0.34%)</title><rect x="418.8" y="819.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="421.8" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (4 samples, 0.34%)</title><rect x="418.8" y="803.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="421.8" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (2 samples, 0.17%)</title><rect x="420.8" y="787.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="423.8" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (2 samples, 0.17%)</title><rect x="420.8" y="771.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="423.8" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (4 samples, 0.34%)</title><rect x="422.8" y="835.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="425.8" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (4 samples, 0.34%)</title><rect x="422.8" y="819.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="425.8" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.09%)</title><rect x="426.9" y="835.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="429.9" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (55 samples, 4.70%)</title><rect x="427.9" y="851.0" width="55.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="430.9" y="862.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (55 samples, 4.70%)</title><rect x="427.9" y="835.0" width="55.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="430.9" y="846.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (55 samples, 4.70%)</title><rect x="427.9" y="819.0" width="55.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="430.9" y="830.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (19 samples, 1.63%)</title><rect x="436.0" y="803.0" width="19.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="439.0" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (2 samples, 0.17%)</title><rect x="437.0" y="787.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="440.0" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (8 samples, 0.68%)</title><rect x="439.0" y="787.0" width="8.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="442.0" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (8 samples, 0.68%)</title><rect x="439.0" y="771.0" width="8.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="442.0" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (8 samples, 0.68%)</title><rect x="439.0" y="755.0" width="8.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="442.0" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.09%)</title><rect x="439.0" y="739.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="442.0" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (7 samples, 0.60%)</title><rect x="440.0" y="739.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="443.0" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (5 samples, 0.43%)</title><rect x="447.1" y="787.0" width="5.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="450.1" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (3 samples, 0.26%)</title><rect x="447.1" y="771.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="450.1" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (2 samples, 0.17%)</title><rect x="450.1" y="771.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="453.1" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (2 samples, 0.17%)</title><rect x="450.1" y="755.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="453.1" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.26%)</title><rect x="452.1" y="787.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="455.1" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.26%)</title><rect x="452.1" y="771.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="455.1" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.09%)</title><rect x="454.1" y="755.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="457.1" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (6 samples, 0.51%)</title><rect x="455.1" y="803.0" width="6.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="458.1" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 0.26%)</title><rect x="458.2" y="787.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="461.2" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.26%)</title><rect x="458.2" y="771.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="461.2" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.26%)</title><rect x="458.2" y="755.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="461.2" y="766.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 0.26%)</title><rect x="458.2" y="739.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="461.2" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.17%)</title><rect x="461.2" y="803.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="464.2" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (10 samples, 0.86%)</title><rect x="463.2" y="803.0" width="10.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="466.2" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (10 samples, 0.86%)</title><rect x="463.2" y="787.0" width="10.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="466.2" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (10 samples, 0.86%)</title><rect x="463.2" y="771.0" width="10.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="466.2" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (10 samples, 0.86%)</title><rect x="463.2" y="755.0" width="10.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="466.2" y="766.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (10 samples, 0.86%)</title><rect x="463.2" y="739.0" width="10.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="466.2" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (7 samples, 0.60%)</title><rect x="473.3" y="803.0" width="7.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="476.3" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.60%)</title><rect x="473.3" y="787.0" width="7.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="476.3" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.60%)</title><rect x="473.3" y="771.0" width="7.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="476.3" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (3 samples, 0.26%)</title><rect x="480.4" y="803.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="483.4" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.09%)</title><rect x="481.4" y="787.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="484.4" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.09%)</title><rect x="482.4" y="787.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="485.4" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="482.4" y="771.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="485.4" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="482.4" y="755.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="485.4" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.09%)</title><rect x="482.4" y="739.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="485.4" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (12 samples, 1.03%)</title><rect x="483.4" y="883.0" width="12.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="486.4" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (12 samples, 1.03%)</title><rect x="483.4" y="867.0" width="12.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="486.4" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (12 samples, 1.03%)</title><rect x="483.4" y="851.0" width="12.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="486.4" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBindings.isEmpty (5 samples, 0.43%)</title><rect x="485.4" y="835.0" width="5.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="488.4" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._findWellKnownSimple (4 samples, 0.34%)</title><rect x="490.5" y="835.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="493.5" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.09%)</title><rect x="494.5" y="835.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="497.5" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.09%)</title><rect x="494.5" y="819.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="497.5" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (295 samples, 25.24%)</title><rect x="495.5" y="979.0" width="297.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="498.5" y="990.0">com/linecorp/decaton/processor/runtime/i..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (49 samples, 4.19%)</title><rect x="497.5" y="963.0" width="49.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="500.5" y="974.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (2 samples, 0.17%)</title><rect x="497.5" y="947.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="500.5" y="958.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (47 samples, 4.02%)</title><rect x="499.6" y="947.0" width="47.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="502.6" y="958.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (46 samples, 3.93%)</title><rect x="500.6" y="931.0" width="46.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="503.6" y="942.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (9 samples, 0.77%)</title><rect x="503.6" y="915.0" width="9.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="506.6" y="926.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (1 samples, 0.09%)</title><rect x="504.6" y="899.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="507.6" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (7 samples, 0.60%)</title><rect x="505.6" y="899.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="508.6" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (7 samples, 0.60%)</title><rect x="505.6" y="883.0" width="7.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="508.6" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (7 samples, 0.60%)</title><rect x="505.6" y="867.0" width="7.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="508.6" y="878.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.wasLastOpReadOrNull (1 samples, 0.09%)</title><rect x="512.7" y="915.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="515.7" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (12 samples, 1.03%)</title><rect x="513.7" y="915.0" width="12.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="516.7" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (6 samples, 0.51%)</title><rect x="519.8" y="899.0" width="6.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="522.8" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (6 samples, 0.51%)</title><rect x="519.8" y="883.0" width="6.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="522.8" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.09%)</title><rect x="524.8" y="867.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="527.8" y="878.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (18 samples, 1.54%)</title><rect x="525.8" y="915.0" width="18.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="528.8" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (11 samples, 0.94%)</title><rect x="532.9" y="899.0" width="11.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="535.9" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.09%)</title><rect x="532.9" y="883.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="535.9" y="894.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.09%)</title><rect x="532.9" y="867.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="535.9" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (10 samples, 0.86%)</title><rect x="533.9" y="883.0" width="10.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="536.9" y="894.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.17%)</title><rect x="540.9" y="867.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="543.9" y="878.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.09%)</title><rect x="543.0" y="867.0" width="1.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="546.0" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (3 samples, 0.26%)</title><rect x="544.0" y="915.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="547.0" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (9 samples, 0.77%)</title><rect x="547.0" y="963.0" width="9.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="550.0" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.60%)</title><rect x="549.0" y="947.0" width="7.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="552.0" y="958.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="549.0" y="931.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="552.0" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="549.0" y="915.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="552.0" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="549.0" y="899.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="552.0" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="549.0" y="883.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="552.0" y="894.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (6 samples, 0.51%)</title><rect x="550.0" y="931.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="553.0" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (145 samples, 12.40%)</title><rect x="556.1" y="963.0" width="146.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="559.1" y="974.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (145 samples, 12.40%)</title><rect x="556.1" y="947.0" width="146.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="559.1" y="958.0">com/linecorp/decat..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="566.2" y="931.0" width="1.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="569.2" y="942.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="566.2" y="915.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="569.2" y="926.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.34%)</title><rect x="567.2" y="931.0" width="4.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="570.2" y="942.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.34%)</title><rect x="567.2" y="915.0" width="4.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="570.2" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (35 samples, 2.99%)</title><rect x="571.2" y="931.0" width="35.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="574.2" y="942.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (19 samples, 1.63%)</title><rect x="580.3" y="915.0" width="19.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="583.3" y="926.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (19 samples, 1.63%)</title><rect x="580.3" y="899.0" width="19.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="583.3" y="910.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (8 samples, 0.68%)</title><rect x="588.4" y="883.0" width="8.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="591.4" y="894.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (8 samples, 0.68%)</title><rect x="588.4" y="867.0" width="8.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="591.4" y="878.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (8 samples, 0.68%)</title><rect x="588.4" y="851.0" width="8.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="591.4" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (8 samples, 0.68%)</title><rect x="588.4" y="835.0" width="8.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="591.4" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.26%)</title><rect x="588.4" y="819.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="591.4" y="830.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.26%)</title><rect x="588.4" y="803.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="591.4" y="814.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (3 samples, 0.26%)</title><rect x="588.4" y="787.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="591.4" y="798.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (2 samples, 0.17%)</title><rect x="588.4" y="771.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="591.4" y="782.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.09%)</title><rect x="590.4" y="771.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="593.4" y="782.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.43%)</title><rect x="591.4" y="819.0" width="5.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="594.4" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.17%)</title><rect x="593.4" y="803.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="596.4" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (2 samples, 0.17%)</title><rect x="593.4" y="787.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="596.4" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="594.4" y="771.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="597.4" y="782.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.09%)</title><rect x="594.4" y="755.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="597.4" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.09%)</title><rect x="594.4" y="739.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="597.4" y="750.0"></text>
</g>
<g>
<title>AbsSeq::davg() const (1 samples, 0.09%)</title><rect x="594.4" y="723.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="597.4" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.09%)</title><rect x="595.5" y="803.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="598.5" y="814.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.09%)</title><rect x="596.5" y="883.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="599.5" y="894.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="597.5" y="883.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="600.5" y="894.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.09%)</title><rect x="598.5" y="883.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="601.5" y="894.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.09%)</title><rect x="599.5" y="915.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="602.5" y="926.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.09%)</title><rect x="599.5" y="899.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="602.5" y="910.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.09%)</title><rect x="599.5" y="883.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="602.5" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="599.5" y="867.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="602.5" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="599.5" y="851.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="602.5" y="862.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.51%)</title><rect x="600.5" y="915.0" width="6.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="603.5" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.17%)</title><rect x="606.6" y="931.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="609.6" y="942.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (7 samples, 0.60%)</title><rect x="608.6" y="931.0" width="7.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="611.6" y="942.0"></text>
</g>
<g>
<title>java/lang/Long.toString (7 samples, 0.60%)</title><rect x="608.6" y="915.0" width="7.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="611.6" y="926.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (7 samples, 0.60%)</title><rect x="608.6" y="899.0" width="7.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="611.6" y="910.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (86 samples, 7.36%)</title><rect x="615.6" y="931.0" width="86.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="618.6" y="942.0">org/slf4j/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (84 samples, 7.19%)</title><rect x="617.7" y="915.0" width="84.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="620.7" y="926.0">ch/qos/log..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (10 samples, 0.86%)</title><rect x="617.7" y="899.0" width="10.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="620.7" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (10 samples, 0.86%)</title><rect x="617.7" y="883.0" width="10.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="620.7" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (10 samples, 0.86%)</title><rect x="617.7" y="867.0" width="10.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="620.7" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (10 samples, 0.86%)</title><rect x="617.7" y="851.0" width="10.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="620.7" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.17%)</title><rect x="627.8" y="899.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="630.8" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.17%)</title><rect x="627.8" y="883.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="630.8" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.17%)</title><rect x="627.8" y="867.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="630.8" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.17%)</title><rect x="627.8" y="851.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="630.8" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.17%)</title><rect x="627.8" y="835.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="630.8" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (72 samples, 6.16%)</title><rect x="629.8" y="899.0" width="72.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="632.8" y="910.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.put (58 samples, 4.96%)</title><rect x="643.9" y="883.0" width="58.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="646.9" y="894.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.putVal (30 samples, 2.57%)</title><rect x="672.2" y="867.0" width="30.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="675.2" y="878.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.17%)</title><rect x="688.3" y="851.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="691.3" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (9 samples, 0.77%)</title><rect x="690.3" y="851.0" width="9.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="693.3" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="698.4" y="835.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="701.4" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="698.4" y="819.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="701.4" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="698.4" y="803.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="701.4" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="698.4" y="787.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="701.4" y="798.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="698.4" y="771.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="701.4" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.09%)</title><rect x="698.4" y="755.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="701.4" y="766.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.26%)</title><rect x="699.4" y="851.0" width="3.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="702.4" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (66 samples, 5.65%)</title><rect x="702.5" y="963.0" width="66.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="705.5" y="974.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (65 samples, 5.56%)</title><rect x="703.5" y="947.0" width="65.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="706.5" y="958.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$207/1600290593.process (36 samples, 3.08%)</title><rect x="711.5" y="931.0" width="36.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="714.5" y="942.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (35 samples, 2.99%)</title><rect x="712.5" y="915.0" width="35.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="715.5" y="926.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (25 samples, 2.14%)</title><rect x="720.6" y="899.0" width="25.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="723.6" y="910.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (9 samples, 0.77%)</title><rect x="724.7" y="883.0" width="9.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="727.7" y="894.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.68%)</title><rect x="725.7" y="867.0" width="8.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="728.7" y="878.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.68%)</title><rect x="725.7" y="851.0" width="8.0" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="728.7" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (12 samples, 1.03%)</title><rect x="733.7" y="883.0" width="12.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="736.7" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="744.9" y="867.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="747.9" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="744.9" y="851.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="747.9" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.17%)</title><rect x="745.9" y="899.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="748.9" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.17%)</title><rect x="745.9" y="883.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="748.9" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.17%)</title><rect x="745.9" y="867.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="748.9" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.17%)</title><rect x="745.9" y="851.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="748.9" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.17%)</title><rect x="745.9" y="835.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="748.9" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (2 samples, 0.17%)</title><rect x="745.9" y="819.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="748.9" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.60%)</title><rect x="747.9" y="931.0" width="7.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="750.9" y="942.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.43%)</title><rect x="749.9" y="915.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="752.9" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (10 samples, 0.86%)</title><rect x="754.9" y="931.0" width="10.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="757.9" y="942.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.43%)</title><rect x="760.0" y="915.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="763.0" y="926.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.26%)</title><rect x="760.0" y="899.0" width="3.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="763.0" y="910.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.17%)</title><rect x="763.0" y="899.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="766.0" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.09%)</title><rect x="765.0" y="931.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="768.0" y="942.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.09%)</title><rect x="765.0" y="915.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="768.0" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.26%)</title><rect x="766.0" y="931.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="769.0" y="942.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.09%)</title><rect x="768.1" y="915.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="771.1" y="926.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.09%)</title><rect x="768.1" y="899.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="771.1" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="768.1" y="883.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="771.1" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (1 samples, 0.09%)</title><rect x="769.1" y="963.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="772.1" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="769.1" y="947.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="772.1" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="769.1" y="931.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="772.1" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="769.1" y="915.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="772.1" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="769.1" y="899.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="772.1" y="910.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="769.1" y="883.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="772.1" y="894.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.09%)</title><rect x="769.1" y="867.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="772.1" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (23 samples, 1.97%)</title><rect x="770.1" y="963.0" width="23.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="773.1" y="974.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (23 samples, 1.97%)</title><rect x="770.1" y="947.0" width="23.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="773.1" y="958.0">j..</text>
</g>
<g>
<title>__clock_gettime (8 samples, 0.68%)</title><rect x="774.1" y="931.0" width="8.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="777.1" y="942.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.68%)</title><rect x="774.1" y="915.0" width="8.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="777.1" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (11 samples, 0.94%)</title><rect x="782.2" y="931.0" width="11.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="785.2" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$296/675555925.accept (11 samples, 0.94%)</title><rect x="782.2" y="915.0" width="11.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="785.2" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$62 (11 samples, 0.94%)</title><rect x="782.2" y="899.0" width="11.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="785.2" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.09%)</title><rect x="782.2" y="883.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="785.2" y="894.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.09%)</title><rect x="782.2" y="867.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="785.2" y="878.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.09%)</title><rect x="782.2" y="851.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="785.2" y="862.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (10 samples, 0.86%)</title><rect x="783.2" y="883.0" width="10.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="786.2" y="894.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (10 samples, 0.86%)</title><rect x="783.2" y="867.0" width="10.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="786.2" y="878.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="787.2" y="851.0" width="1.1" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="790.2" y="862.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.43%)</title><rect x="788.3" y="851.0" width="5.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="791.3" y="862.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.43%)</title><rect x="788.3" y="835.0" width="5.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="791.3" y="846.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/789653861.linkToTargetMethod (1 samples, 0.09%)</title><rect x="793.3" y="979.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="796.3" y="990.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (1 samples, 0.09%)</title><rect x="793.3" y="963.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="796.3" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$300/111733563.get$Lambda (1 samples, 0.09%)</title><rect x="793.3" y="947.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="796.3" y="958.0"></text>
</g>
<g>
<title>_new_instance_Java (1 samples, 0.09%)</title><rect x="793.3" y="931.0" width="1.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="796.3" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (24 samples, 2.05%)</title><rect x="794.3" y="979.0" width="24.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="797.3" y="990.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (24 samples, 2.05%)</title><rect x="794.3" y="963.0" width="24.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="797.3" y="974.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (1 samples, 0.09%)</title><rect x="798.3" y="947.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="801.3" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (19 samples, 1.63%)</title><rect x="799.4" y="947.0" width="19.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="802.4" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$296/675555925.accept (1 samples, 0.09%)</title><rect x="799.4" y="931.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="802.4" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$62 (1 samples, 0.09%)</title><rect x="799.4" y="915.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="802.4" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.09%)</title><rect x="799.4" y="899.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="802.4" y="910.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.09%)</title><rect x="799.4" y="883.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="802.4" y="894.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.09%)</title><rect x="799.4" y="867.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="802.4" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$300/111733563.accept (18 samples, 1.54%)</title><rect x="800.4" y="931.0" width="18.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="803.4" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$61 (18 samples, 1.54%)</title><rect x="800.4" y="915.0" width="18.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="803.4" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$283/1430819384.complete (18 samples, 1.54%)</title><rect x="800.4" y="899.0" width="18.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="803.4" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$38 (18 samples, 1.54%)</title><rect x="800.4" y="883.0" width="18.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="803.4" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$282/1678820809.complete (18 samples, 1.54%)</title><rect x="800.4" y="867.0" width="18.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="803.4" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$68 (18 samples, 1.54%)</title><rect x="800.4" y="851.0" width="18.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="803.4" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (18 samples, 1.54%)</title><rect x="800.4" y="835.0" width="18.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="803.4" y="846.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (18 samples, 1.54%)</title><rect x="800.4" y="819.0" width="18.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="803.4" y="830.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (18 samples, 1.54%)</title><rect x="800.4" y="803.0" width="18.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="803.4" y="814.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (18 samples, 1.54%)</title><rect x="800.4" y="787.0" width="18.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="803.4" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.09%)</title><rect x="817.5" y="771.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="820.5" y="782.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (9 samples, 0.77%)</title><rect x="818.5" y="979.0" width="9.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="821.5" y="990.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.77%)</title><rect x="818.5" y="963.0" width="9.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="821.5" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (5 samples, 0.43%)</title><rect x="827.6" y="1043.0" width="5.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="830.6" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.09%)</title><rect x="832.7" y="1043.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="835.7" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.09%)</title><rect x="832.7" y="1027.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="835.7" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="832.7" y="1011.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="835.7" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.09%)</title><rect x="832.7" y="995.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="835.7" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (216 samples, 18.48%)</title><rect x="833.7" y="1043.0" width="218.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="836.7" y="1054.0">java/util/concurrent/ThreadPo..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (211 samples, 18.05%)</title><rect x="838.7" y="1027.0" width="213.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="841.7" y="1038.0">java/util/concurrent/LinkedB..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.dequeue (2 samples, 0.17%)</title><rect x="856.9" y="1011.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="859.9" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (179 samples, 15.31%)</title><rect x="858.9" y="1011.0" width="180.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="861.9" y="1022.0">java/util/concurrent/lo..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.17%)</title><rect x="864.0" y="995.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="867.0" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 0.17%)</title><rect x="866.0" y="995.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="869.0" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="866.0" y="979.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="869.0" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.09%)</title><rect x="867.0" y="979.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="870.0" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="867.0" y="963.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="870.0" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.09%)</title><rect x="867.0" y="947.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="870.0" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (4 samples, 0.34%)</title><rect x="868.0" y="995.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="871.0" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (4 samples, 0.34%)</title><rect x="868.0" y="979.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="871.0" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (166 samples, 14.20%)</title><rect x="872.0" y="995.0" width="167.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="875.0" y="1006.0">java/util/concurrent/..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (155 samples, 13.26%)</title><rect x="883.1" y="979.0" width="156.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="886.1" y="990.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.17%)</title><rect x="884.1" y="963.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="887.1" y="974.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.17%)</title><rect x="886.2" y="963.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="889.2" y="974.0"></text>
</g>
<g>
<title>Unsafe_Park (145 samples, 12.40%)</title><rect x="888.2" y="963.0" width="146.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="891.2" y="974.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (4 samples, 0.34%)</title><rect x="890.2" y="947.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="893.2" y="958.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (23 samples, 1.97%)</title><rect x="894.2" y="947.0" width="23.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="897.2" y="958.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (7 samples, 0.60%)</title><rect x="901.3" y="931.0" width="7.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="904.3" y="942.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.34%)</title><rect x="901.3" y="915.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="904.3" y="926.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.09%)</title><rect x="904.3" y="899.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="907.3" y="910.0"></text>
</g>
<g>
<title>pthread_getspecific (3 samples, 0.26%)</title><rect x="905.3" y="915.0" width="3.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="908.3" y="926.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.09%)</title><rect x="908.4" y="931.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="911.4" y="942.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="909.4" y="931.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="912.4" y="942.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (7 samples, 0.60%)</title><rect x="910.4" y="931.0" width="7.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="913.4" y="942.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (3 samples, 0.26%)</title><rect x="917.5" y="947.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="920.5" y="958.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.26%)</title><rect x="920.5" y="947.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="923.5" y="958.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.09%)</title><rect x="923.5" y="947.0" width="1.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="926.5" y="958.0"></text>
</g>
<g>
<title>__lll_lock_wait (8 samples, 0.68%)</title><rect x="924.5" y="947.0" width="8.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="927.5" y="958.0"></text>
</g>
<g>
<title>__lll_unlock_wake (33 samples, 2.82%)</title><rect x="932.6" y="947.0" width="33.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="935.6" y="958.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (47 samples, 4.02%)</title><rect x="965.9" y="947.0" width="47.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="968.9" y="958.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (7 samples, 0.60%)</title><rect x="1013.4" y="947.0" width="7.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1016.4" y="958.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.09%)</title><rect x="1020.4" y="947.0" width="1.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1023.4" y="958.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 0.26%)</title><rect x="1021.4" y="947.0" width="3.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1024.4" y="958.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.09%)</title><rect x="1024.5" y="947.0" width="1.0" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1027.5" y="958.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.26%)</title><rect x="1025.5" y="947.0" width="3.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1028.5" y="958.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.17%)</title><rect x="1028.5" y="947.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1031.5" y="958.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.17%)</title><rect x="1030.5" y="947.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1033.5" y="958.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.17%)</title><rect x="1032.5" y="947.0" width="2.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1035.5" y="958.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.26%)</title><rect x="1034.6" y="963.0" width="3.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1037.6" y="974.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.17%)</title><rect x="1037.6" y="963.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1040.6" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.09%)</title><rect x="1039.6" y="1011.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1042.6" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.09%)</title><rect x="1039.6" y="995.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1042.6" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="1039.6" y="979.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1042.6" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="1039.6" y="963.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1042.6" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="1039.6" y="947.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1042.6" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="1039.6" y="931.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1042.6" y="942.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="1039.6" y="915.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1042.6" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (11 samples, 0.94%)</title><rect x="1040.6" y="1011.0" width="11.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1043.6" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (11 samples, 0.94%)</title><rect x="1040.6" y="995.0" width="11.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1043.6" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (11 samples, 0.94%)</title><rect x="1040.6" y="979.0" width="11.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1043.6" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (11 samples, 0.94%)</title><rect x="1040.6" y="963.0" width="11.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1043.6" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.09%)</title><rect x="1051.7" y="1091.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1054.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.09%)</title><rect x="1051.7" y="1075.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1054.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="1051.7" y="1059.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1054.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.09%)</title><rect x="1051.7" y="1043.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1054.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.09%)</title><rect x="1051.7" y="1027.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1054.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.09%)</title><rect x="1051.7" y="1011.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1054.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.09%)</title><rect x="1051.7" y="995.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1054.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.09%)</title><rect x="1051.7" y="979.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1054.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.09%)</title><rect x="1051.7" y="963.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1054.7" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.&lt;init&gt; (1 samples, 0.09%)</title><rect x="1051.7" y="947.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1054.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.&lt;init&gt; (1 samples, 0.09%)</title><rect x="1051.7" y="931.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1054.7" y="942.0"></text>
</g>
<g>
<title>start_thread (136 samples, 11.63%)</title><rect x="1052.7" y="1091.0" width="137.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1055.7" y="1102.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (136 samples, 11.63%)</title><rect x="1052.7" y="1075.0" width="137.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1055.7" y="1086.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (23 samples, 1.97%)</title><rect x="1052.7" y="1059.0" width="23.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1055.7" y="1070.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (4 samples, 0.34%)</title><rect x="1052.7" y="1043.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1055.7" y="1054.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 0.34%)</title><rect x="1052.7" y="1027.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1055.7" y="1038.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.09%)</title><rect x="1052.7" y="1011.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1055.7" y="1022.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.17%)</title><rect x="1053.7" y="1011.0" width="2.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1056.7" y="1022.0"></text>
</g>
<g>
<title>__sched_yield (1 samples, 0.09%)</title><rect x="1055.7" y="1011.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1058.7" y="1022.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (18 samples, 1.54%)</title><rect x="1056.8" y="1043.0" width="18.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1059.8" y="1054.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 0.34%)</title><rect x="1056.8" y="1027.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1059.8" y="1038.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.09%)</title><rect x="1056.8" y="1011.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1059.8" y="1022.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.17%)</title><rect x="1057.8" y="1011.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1060.8" y="1022.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.09%)</title><rect x="1059.8" y="1011.0" width="1.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1062.8" y="1022.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (6 samples, 0.51%)</title><rect x="1060.8" y="1027.0" width="6.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1063.8" y="1038.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.17%)</title><rect x="1060.8" y="1011.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1063.8" y="1022.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.09%)</title><rect x="1060.8" y="995.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1063.8" y="1006.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.09%)</title><rect x="1060.8" y="979.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1063.8" y="990.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.09%)</title><rect x="1060.8" y="963.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1063.8" y="974.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1061.8" y="995.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1064.8" y="1006.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1061.8" y="979.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1064.8" y="990.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CLDClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.09%)</title><rect x="1061.8" y="963.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1064.8" y="974.0"></text>
</g>
<g>
<title>OopMapSet::all_do(frame const*, RegisterMap const*, OopClosure*, void (*)(oopDesc**, oopDesc**), OopClosure*) (1 samples, 0.09%)</title><rect x="1061.8" y="947.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1064.8" y="958.0"></text>
</g>
<g>
<title>frame::oopmapreg_to_location(VMRegImpl*, RegisterMap const*) const (1 samples, 0.09%)</title><rect x="1061.8" y="931.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1064.8" y="942.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.34%)</title><rect x="1062.8" y="1011.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1065.8" y="1022.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (4 samples, 0.34%)</title><rect x="1062.8" y="995.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1065.8" y="1006.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (8 samples, 0.68%)</title><rect x="1066.9" y="1027.0" width="8.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1069.9" y="1038.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (8 samples, 0.68%)</title><rect x="1066.9" y="1011.0" width="8.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1069.9" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (8 samples, 0.68%)</title><rect x="1066.9" y="995.0" width="8.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1069.9" y="1006.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (8 samples, 0.68%)</title><rect x="1066.9" y="979.0" width="8.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1069.9" y="990.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (8 samples, 0.68%)</title><rect x="1066.9" y="963.0" width="8.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1069.9" y="974.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (7 samples, 0.60%)</title><rect x="1067.9" y="947.0" width="7.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1070.9" y="958.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (3 samples, 0.26%)</title><rect x="1071.9" y="931.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1074.9" y="942.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.09%)</title><rect x="1072.9" y="915.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1075.9" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.09%)</title><rect x="1073.9" y="915.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1076.9" y="926.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, int) (1 samples, 0.09%)</title><rect x="1073.9" y="899.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1076.9" y="910.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.09%)</title><rect x="1074.9" y="1043.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1077.9" y="1054.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.09%)</title><rect x="1074.9" y="1027.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1077.9" y="1038.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.09%)</title><rect x="1074.9" y="1011.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1077.9" y="1022.0"></text>
</g>
<g>
<title>JavaThread::run() (110 samples, 9.41%)</title><rect x="1075.9" y="1059.0" width="111.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1078.9" y="1070.0">JavaThread::r..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (110 samples, 9.41%)</title><rect x="1075.9" y="1043.0" width="111.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1078.9" y="1054.0">JavaThread::t..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (110 samples, 9.41%)</title><rect x="1075.9" y="1027.0" width="111.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1078.9" y="1038.0">CompileBroker..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (110 samples, 9.41%)</title><rect x="1075.9" y="1011.0" width="111.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1078.9" y="1022.0">CompileBroker..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (109 samples, 9.32%)</title><rect x="1075.9" y="995.0" width="110.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1078.9" y="1006.0">C2Compiler::c..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (109 samples, 9.32%)</title><rect x="1075.9" y="979.0" width="110.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1078.9" y="990.0">Compile::Comp..</text>
</g>
<g>
<title>Compile::Code_Gen() (53 samples, 4.53%)</title><rect x="1075.9" y="963.0" width="53.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1078.9" y="974.0">Compi..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.17%)</title><rect x="1075.9" y="947.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1078.9" y="958.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.17%)</title><rect x="1075.9" y="931.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1078.9" y="942.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.17%)</title><rect x="1075.9" y="915.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1078.9" y="926.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.09%)</title><rect x="1076.9" y="899.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1079.9" y="910.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.09%)</title><rect x="1076.9" y="883.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1079.9" y="894.0"></text>
</g>
<g>
<title>Assembler::movq(RegisterImpl*, RegisterImpl*) (1 samples, 0.09%)</title><rect x="1076.9" y="867.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1079.9" y="878.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.26%)</title><rect x="1078.0" y="947.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1081.0" y="958.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.17%)</title><rect x="1079.0" y="931.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1082.0" y="942.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.17%)</title><rect x="1079.0" y="915.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1082.0" y="926.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.09%)</title><rect x="1081.0" y="947.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1084.0" y="958.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 0.43%)</title><rect x="1082.0" y="947.0" width="5.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1085.0" y="958.0"></text>
</g>
<g>
<title>DecodeNNode::Opcode() const (1 samples, 0.09%)</title><rect x="1082.0" y="931.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1085.0" y="942.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.09%)</title><rect x="1083.0" y="931.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1086.0" y="942.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.26%)</title><rect x="1084.0" y="931.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1087.0" y="942.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.17%)</title><rect x="1084.0" y="915.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1087.0" y="926.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.09%)</title><rect x="1086.0" y="915.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1089.0" y="926.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.09%)</title><rect x="1086.0" y="899.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1089.0" y="910.0"></text>
</g>
<g>
<title>AddPNode::match_edge(unsigned int) const (1 samples, 0.09%)</title><rect x="1086.0" y="883.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1089.0" y="894.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.09%)</title><rect x="1087.0" y="947.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1090.0" y="958.0"></text>
</g>
<g>
<title>PhaseBlockLayout::reorder_traces(int) (1 samples, 0.09%)</title><rect x="1087.0" y="931.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1090.0" y="942.0"></text>
</g>
<g>
<title>Trace::fixup_blocks(PhaseCFG&amp;) (1 samples, 0.09%)</title><rect x="1087.0" y="915.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1090.0" y="926.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.17%)</title><rect x="1088.0" y="947.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1091.0" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.17%)</title><rect x="1088.0" y="931.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1091.0" y="942.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.17%)</title><rect x="1088.0" y="915.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1091.0" y="926.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.09%)</title><rect x="1088.0" y="899.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1091.0" y="910.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.09%)</title><rect x="1089.1" y="899.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1092.1" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (39 samples, 3.34%)</title><rect x="1090.1" y="947.0" width="39.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1093.1" y="958.0">Pha..</text>
</g>
<g>
<title>JVMState::debug_end() const (2 samples, 0.17%)</title><rect x="1090.1" y="931.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1093.1" y="942.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.09%)</title><rect x="1092.1" y="931.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1095.1" y="942.0"></text>
</g>
<g>
<title>MachNode::Opcode() const (1 samples, 0.09%)</title><rect x="1093.1" y="931.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1096.1" y="942.0"></text>
</g>
<g>
<title>MachNode::oper_input_base() const (1 samples, 0.09%)</title><rect x="1094.1" y="931.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1097.1" y="942.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.09%)</title><rect x="1095.1" y="931.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1098.1" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.26%)</title><rect x="1096.1" y="931.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1099.1" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.09%)</title><rect x="1097.1" y="915.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1100.1" y="926.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.09%)</title><rect x="1098.1" y="915.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1101.1" y="926.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.09%)</title><rect x="1098.1" y="899.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1101.1" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.09%)</title><rect x="1099.2" y="931.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1102.2" y="942.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1099.2" y="915.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1102.2" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 0.26%)</title><rect x="1100.2" y="931.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1103.2" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (1 samples, 0.09%)</title><rect x="1102.2" y="915.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1105.2" y="926.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.09%)</title><rect x="1102.2" y="899.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1105.2" y="910.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.09%)</title><rect x="1102.2" y="883.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1105.2" y="894.0"></text>
</g>
<g>
<title>Compile::set_node_notes_at(int, Node_Notes*) (1 samples, 0.09%)</title><rect x="1102.2" y="867.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1105.2" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (9 samples, 0.77%)</title><rect x="1103.2" y="931.0" width="9.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1106.2" y="942.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.09%)</title><rect x="1107.2" y="915.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1110.2" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.26%)</title><rect x="1108.2" y="915.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1111.2" y="926.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1110.3" y="899.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1113.3" y="910.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.09%)</title><rect x="1111.3" y="915.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1114.3" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.26%)</title><rect x="1112.3" y="931.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1115.3" y="942.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.09%)</title><rect x="1114.3" y="915.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1117.3" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.09%)</title><rect x="1115.3" y="931.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1118.3" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.09%)</title><rect x="1115.3" y="915.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1118.3" y="926.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.09%)</title><rect x="1116.3" y="931.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1119.3" y="942.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.09%)</title><rect x="1116.3" y="915.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1119.3" y="926.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.09%)</title><rect x="1116.3" y="899.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1119.3" y="910.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.09%)</title><rect x="1116.3" y="883.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1119.3" y="894.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1116.3" y="867.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1119.3" y="878.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.09%)</title><rect x="1117.3" y="931.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1120.3" y="942.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.09%)</title><rect x="1118.3" y="931.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1121.3" y="942.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.09%)</title><rect x="1118.3" y="915.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1121.3" y="926.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (3 samples, 0.26%)</title><rect x="1119.3" y="931.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1122.3" y="942.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 0.17%)</title><rect x="1120.4" y="915.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1123.4" y="926.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (6 samples, 0.51%)</title><rect x="1122.4" y="931.0" width="6.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1125.4" y="942.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.17%)</title><rect x="1125.4" y="915.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1128.4" y="926.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1127.4" y="915.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1130.4" y="926.0"></text>
</g>
<g>
<title>indirectOper::in_RegMask(int) const (1 samples, 0.09%)</title><rect x="1128.4" y="931.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1131.4" y="942.0"></text>
</g>
<g>
<title>Compile::Optimize() (46 samples, 3.93%)</title><rect x="1129.4" y="963.0" width="46.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1132.4" y="974.0">Comp..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.09%)</title><rect x="1129.4" y="947.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1132.4" y="958.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.09%)</title><rect x="1129.4" y="931.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1132.4" y="942.0"></text>
</g>
<g>
<title>JVMState::interpreter_frame_size() const (1 samples, 0.09%)</title><rect x="1129.4" y="915.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1132.4" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (3 samples, 0.26%)</title><rect x="1130.4" y="947.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1133.4" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (3 samples, 0.26%)</title><rect x="1130.4" y="931.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1133.4" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::add_call_node(CallNode*) (1 samples, 0.09%)</title><rect x="1130.4" y="915.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1133.4" y="926.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.09%)</title><rect x="1130.4" y="899.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1133.4" y="910.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.09%)</title><rect x="1130.4" y="883.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1133.4" y="894.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.09%)</title><rect x="1130.4" y="867.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1133.4" y="878.0"></text>
</g>
<g>
<title>ciMethodData::data_at(int) (1 samples, 0.09%)</title><rect x="1130.4" y="851.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1133.4" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1131.5" y="915.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1134.5" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.09%)</title><rect x="1131.5" y="899.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1134.5" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1132.5" y="915.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1135.5" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1132.5" y="899.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1135.5" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1132.5" y="883.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1135.5" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1132.5" y="867.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1135.5" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1132.5" y="851.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1135.5" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1132.5" y="835.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1135.5" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1132.5" y="819.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1135.5" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1132.5" y="803.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1135.5" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1132.5" y="787.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1135.5" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1132.5" y="771.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1135.5" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1132.5" y="755.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1135.5" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1132.5" y="739.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1135.5" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1132.5" y="723.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1135.5" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1132.5" y="707.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1135.5" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1132.5" y="691.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1135.5" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1132.5" y="675.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1135.5" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1132.5" y="659.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1135.5" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1132.5" y="643.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1135.5" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1132.5" y="627.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1135.5" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1132.5" y="611.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1135.5" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1132.5" y="595.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1135.5" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1132.5" y="579.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1135.5" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1132.5" y="563.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1135.5" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1132.5" y="547.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1135.5" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1132.5" y="531.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1135.5" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1132.5" y="515.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1135.5" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1132.5" y="499.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1135.5" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1132.5" y="483.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1135.5" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1132.5" y="467.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1135.5" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1132.5" y="451.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1135.5" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.09%)</title><rect x="1132.5" y="435.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1135.5" y="446.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.09%)</title><rect x="1133.5" y="947.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1136.5" y="958.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.09%)</title><rect x="1133.5" y="931.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1136.5" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (31 samples, 2.65%)</title><rect x="1134.5" y="947.0" width="31.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1137.5" y="958.0">Ph..</text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.09%)</title><rect x="1134.5" y="931.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1137.5" y="942.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.09%)</title><rect x="1135.5" y="931.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1138.5" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.26%)</title><rect x="1136.5" y="931.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1139.5" y="942.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.17%)</title><rect x="1137.5" y="915.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1140.5" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.26%)</title><rect x="1139.5" y="931.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1142.5" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (19 samples, 1.63%)</title><rect x="1142.6" y="931.0" width="19.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1145.6" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (19 samples, 1.63%)</title><rect x="1142.6" y="915.0" width="19.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1145.6" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (17 samples, 1.45%)</title><rect x="1144.6" y="899.0" width="17.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1147.6" y="910.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.09%)</title><rect x="1159.7" y="883.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1162.7" y="894.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.09%)</title><rect x="1159.7" y="867.0" width="1.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1162.7" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.09%)</title><rect x="1160.7" y="883.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.7" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (3 samples, 0.26%)</title><rect x="1161.7" y="931.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.7" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (2 samples, 0.17%)</title><rect x="1162.7" y="915.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.7" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1164.8" y="931.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.8" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1164.8" y="915.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.8" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1164.8" y="899.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.8" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.09%)</title><rect x="1165.8" y="947.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.8" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.09%)</title><rect x="1165.8" y="931.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.8" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (9 samples, 0.77%)</title><rect x="1166.8" y="947.0" width="9.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.8" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (9 samples, 0.77%)</title><rect x="1166.8" y="931.0" width="9.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.8" y="942.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (3 samples, 0.26%)</title><rect x="1166.8" y="915.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.8" y="926.0"></text>
</g>
<g>
<title>Node::get_int() const (1 samples, 0.09%)</title><rect x="1166.8" y="899.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.8" y="910.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1167.8" y="899.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.8" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1168.8" y="899.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.8" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.09%)</title><rect x="1168.8" y="883.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.8" y="894.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1169.8" y="915.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.8" y="926.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1169.8" y="899.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.8" y="910.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1169.8" y="883.0" width="1.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1172.8" y="894.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (2 samples, 0.17%)</title><rect x="1170.8" y="915.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.8" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1172.8" y="915.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.8" y="926.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1173.8" y="915.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.8" y="926.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.09%)</title><rect x="1173.8" y="899.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.8" y="910.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1174.9" y="915.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.9" y="926.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.09%)</title><rect x="1174.9" y="899.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.9" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1174.9" y="883.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.9" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1174.9" y="867.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.9" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1174.9" y="851.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.9" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1174.9" y="835.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.9" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1174.9" y="819.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.9" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1174.9" y="803.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.9" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1174.9" y="787.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.9" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1174.9" y="771.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.9" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1174.9" y="755.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.9" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1174.9" y="739.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.9" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1174.9" y="723.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.9" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1174.9" y="707.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.9" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1174.9" y="691.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.9" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1174.9" y="675.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.9" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1174.9" y="659.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.9" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1174.9" y="643.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.9" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1174.9" y="627.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.9" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1174.9" y="611.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.9" y="622.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1174.9" y="595.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.9" y="606.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1174.9" y="579.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.9" y="590.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1174.9" y="563.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.9" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.77%)</title><rect x="1175.9" y="963.0" width="9.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.9" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.77%)</title><rect x="1175.9" y="947.0" width="9.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.9" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 0.77%)</title><rect x="1175.9" y="931.0" width="9.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.9" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 0.77%)</title><rect x="1175.9" y="915.0" width="9.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.9" y="926.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.09%)</title><rect x="1175.9" y="899.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.9" y="910.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.09%)</title><rect x="1175.9" y="883.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.9" y="894.0"></text>
</g>
<g>
<title>GraphKit::basic_plus_adr(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1175.9" y="867.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.9" y="878.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1175.9" y="851.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.9" y="862.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.09%)</title><rect x="1175.9" y="835.0" width="1.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1178.9" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.68%)</title><rect x="1176.9" y="899.0" width="8.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.9" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.68%)</title><rect x="1176.9" y="883.0" width="8.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.9" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.51%)</title><rect x="1176.9" y="867.0" width="6.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.9" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.51%)</title><rect x="1176.9" y="851.0" width="6.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.9" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.51%)</title><rect x="1176.9" y="835.0" width="6.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.9" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.51%)</title><rect x="1176.9" y="819.0" width="6.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.9" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.51%)</title><rect x="1176.9" y="803.0" width="6.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.9" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.51%)</title><rect x="1176.9" y="787.0" width="6.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.9" y="798.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1176.9" y="771.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.9" y="782.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1176.9" y="755.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.9" y="766.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1176.9" y="739.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.9" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1176.9" y="723.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.9" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1176.9" y="707.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.9" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1176.9" y="691.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.9" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1176.9" y="675.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.9" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1176.9" y="659.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.9" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.09%)</title><rect x="1176.9" y="643.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.9" y="654.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1176.9" y="627.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.9" y="638.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1176.9" y="611.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.9" y="622.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1176.9" y="595.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.9" y="606.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1176.9" y="579.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.9" y="590.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1176.9" y="563.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.9" y="574.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1176.9" y="547.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.9" y="558.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.09%)</title><rect x="1176.9" y="531.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.9" y="542.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.09%)</title><rect x="1176.9" y="515.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.9" y="526.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.09%)</title><rect x="1176.9" y="499.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.9" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1177.9" y="771.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.9" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.26%)</title><rect x="1177.9" y="755.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.26%)</title><rect x="1177.9" y="739.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.26%)</title><rect x="1177.9" y="723.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.26%)</title><rect x="1177.9" y="707.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.26%)</title><rect x="1177.9" y="691.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.9" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1177.9" y="675.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.9" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.26%)</title><rect x="1177.9" y="659.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1177.9" y="643.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1177.9" y="627.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1177.9" y="611.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1177.9" y="595.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.9" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1177.9" y="579.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.9" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1177.9" y="563.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1177.9" y="547.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1177.9" y="531.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1177.9" y="515.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.09%)</title><rect x="1177.9" y="499.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.9" y="510.0"></text>
</g>
<g>
<title>Parse::sharpen_type_after_if(BoolTest::mask, Node*, Type const*, Node*, Type const*) (1 samples, 0.09%)</title><rect x="1177.9" y="483.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.9" y="494.0"></text>
</g>
<g>
<title>ConstraintCastNode::ConstraintCastNode(Node*, Type const*) (1 samples, 0.09%)</title><rect x="1177.9" y="467.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.9" y="478.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1178.9" y="579.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.9" y="590.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1178.9" y="563.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.9" y="574.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1178.9" y="547.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.09%)</title><rect x="1179.9" y="643.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.9" y="654.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1179.9" y="627.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.9" y="638.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1179.9" y="611.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.9" y="622.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_interface() (1 samples, 0.09%)</title><rect x="1179.9" y="595.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.9" y="606.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1180.9" y="771.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.9" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.9" y="755.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.9" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.9" y="739.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.9" y="723.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.9" y="707.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.9" y="691.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.9" y="675.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.9" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.9" y="659.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.9" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.9" y="643.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.9" y="627.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.9" y="611.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.9" y="595.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.9" y="579.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.9" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.9" y="563.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.9" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.9" y="547.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.9" y="531.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.9" y="515.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.9" y="499.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.9" y="483.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.9" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.9" y="467.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.9" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.9" y="451.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.9" y="435.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.9" y="419.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.9" y="403.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.9" y="387.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.9" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.9" y="371.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.9" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.9" y="355.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.9" y="339.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.9" y="323.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.9" y="307.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.9" y="291.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.9" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.9" y="275.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.9" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.9" y="259.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.9" y="243.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.9" y="227.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.9" y="211.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.9" y="195.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.9" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.9" y="179.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.9" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.9" y="163.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.9" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.9" y="147.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.9" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.9" y="131.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.9" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.9" y="115.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.9" y="126.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1180.9" y="99.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.9" y="110.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1180.9" y="83.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.9" y="94.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.09%)</title><rect x="1180.9" y="67.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.9" y="78.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.09%)</title><rect x="1180.9" y="51.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.9" y="62.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.09%)</title><rect x="1180.9" y="35.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.9" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.9" y="755.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.9" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.9" y="739.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.9" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.9" y="723.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.9" y="707.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.9" y="691.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.9" y="675.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1181.9" y="659.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.9" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.9" y="643.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.9" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.9" y="627.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.9" y="611.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.9" y="595.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.9" y="579.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1181.9" y="563.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.9" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.9" y="547.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.9" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.9" y="531.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.9" y="515.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.9" y="499.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.9" y="483.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1181.9" y="467.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.9" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.9" y="451.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.9" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.9" y="435.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.9" y="419.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.9" y="403.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.9" y="387.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1181.9" y="371.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.9" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.9" y="355.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.9" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.9" y="339.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.9" y="323.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.9" y="334.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.09%)</title><rect x="1181.9" y="307.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.9" y="318.0"></text>
</g>
<g>
<title>Parse::merge_memory_edges(MergeMemNode*, int, bool) (1 samples, 0.09%)</title><rect x="1181.9" y="291.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.9" y="302.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1181.9" y="275.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.9" y="286.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1181.9" y="259.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.9" y="270.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1182.9" y="867.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.9" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1182.9" y="851.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.9" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1182.9" y="835.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.9" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1182.9" y="819.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.9" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1182.9" y="803.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.9" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1182.9" y="787.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.9" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1182.9" y="771.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.9" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1182.9" y="755.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.9" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1182.9" y="739.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1182.9" y="723.0" width="2.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1182.9" y="707.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1182.9" y="691.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1182.9" y="675.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.9" y="686.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1182.9" y="659.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.9" y="670.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1182.9" y="643.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.9" y="654.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1182.9" y="627.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.9" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1182.9" y="611.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.9" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1182.9" y="595.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.9" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1182.9" y="579.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.9" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1182.9" y="563.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.9" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::successors(ciBytecodeStream*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1182.9" y="547.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.9" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::get_block_for(int, ciTypeFlow::JsrSet*, ciTypeFlow::CreateOption) (1 samples, 0.09%)</title><rect x="1182.9" y="531.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.9" y="542.0"></text>
</g>
<g>
<title>GrowableArray&lt;ciTypeFlow::Block*&gt;::GrowableArray(Arena*, int, int, ciTypeFlow::Block* const&amp;) (1 samples, 0.09%)</title><rect x="1182.9" y="515.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.9" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.9" y="659.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.9" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1183.9" y="643.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1183.9" y="627.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1183.9" y="611.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1183.9" y="595.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1183.9" y="579.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.9" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.9" y="563.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.9" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1183.9" y="547.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1183.9" y="531.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1183.9" y="515.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1183.9" y="499.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1183.9" y="483.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.9" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.9" y="467.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.9" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1183.9" y="451.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1183.9" y="435.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1183.9" y="419.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1183.9" y="403.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1183.9" y="387.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.9" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.9" y="371.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.9" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1183.9" y="355.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.9" y="366.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.09%)</title><rect x="1183.9" y="339.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.9" y="350.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.09%)</title><rect x="1185.0" y="963.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.0" y="974.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1185.0" y="947.0" width="1.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1188.0" y="958.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1186.0" y="995.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.0" y="1006.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.09%)</title><rect x="1186.0" y="979.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.0" y="990.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.09%)</title><rect x="1186.0" y="963.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.0" y="974.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.09%)</title><rect x="1186.0" y="947.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.0" y="958.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.09%)</title><rect x="1186.0" y="931.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.0" y="942.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.09%)</title><rect x="1186.0" y="915.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.0" y="926.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_call(LIR_OpJavaCall*) (1 samples, 0.09%)</title><rect x="1186.0" y="899.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.0" y="910.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_static_call_stub() (1 samples, 0.09%)</title><rect x="1186.0" y="883.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.0" y="894.0"></text>
</g>
<g>
<title>MacroAssembler::jump(AddressLiteral) (1 samples, 0.09%)</title><rect x="1186.0" y="867.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.0" y="878.0"></text>
</g>
<g>
<title>Assembler::jmp_literal(unsigned char*, RelocationHolder const&amp;) (1 samples, 0.09%)</title><rect x="1186.0" y="851.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.0" y="862.0"></text>
</g>
<g>
<title>CodeSection::relocate(unsigned char*, RelocationHolder const&amp;, int) (1 samples, 0.09%)</title><rect x="1186.0" y="835.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.0" y="846.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.26%)</title><rect x="1187.0" y="1059.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.0" y="1070.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.26%)</title><rect x="1187.0" y="1043.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.0" y="1054.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.09%)</title><rect x="1187.0" y="1027.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.0" y="1038.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.17%)</title><rect x="1188.0" y="1027.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.0" y="1038.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.17%)</title><rect x="1188.0" y="1011.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.0" y="1022.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.17%)</title><rect x="1188.0" y="995.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.0" y="1006.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.17%)</title><rect x="1188.0" y="979.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.0" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.09%)</title><rect x="1188.0" y="963.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.0" y="974.0"></text>
</g>
<g>
<title>G1CollectorPolicy::record_collection_pause_end(double, EvacuationInfo&amp;) (1 samples, 0.09%)</title><rect x="1189.0" y="963.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1192.0" y="974.0"></text>
</g>
<g>
<title>G1CollectorPolicy::need_to_start_conc_mark(char const*, unsigned long) (1 samples, 0.09%)</title><rect x="1189.0" y="947.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.0" y="958.0"></text>
</g>
</g>
</svg>
