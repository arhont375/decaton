<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="597"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="597"> </text>
<g id="frames">
<g>
<title>all (305 samples, 100.00%)</title><rect x="10.0" y="563.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="574.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (26 samples, 8.52%)</title><rect x="10.0" y="547.0" width="100.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="558.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (2 samples, 0.66%)</title><rect x="10.0" y="531.0" width="7.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (2 samples, 0.66%)</title><rect x="10.0" y="515.0" width="7.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (2 samples, 0.66%)</title><rect x="10.0" y="499.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (2 samples, 0.66%)</title><rect x="10.0" y="483.0" width="7.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (2 samples, 0.66%)</title><rect x="10.0" y="467.0" width="7.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.66%)</title><rect x="10.0" y="451.0" width="7.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.66%)</title><rect x="10.0" y="435.0" width="7.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (2 samples, 0.66%)</title><rect x="10.0" y="419.0" width="7.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.66%)</title><rect x="10.0" y="403.0" width="7.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.33%)</title><rect x="10.0" y="387.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.33%)</title><rect x="10.0" y="371.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.33%)</title><rect x="10.0" y="355.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/OffsetCommitRequest.toStruct (1 samples, 0.33%)</title><rect x="10.0" y="339.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitRequestData.toStruct (1 samples, 0.33%)</title><rect x="10.0" y="323.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitRequestData$OffsetCommitRequestTopic.toStruct (1 samples, 0.33%)</title><rect x="10.0" y="307.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.set (1 samples, 0.33%)</title><rect x="10.0" y="291.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.33%)</title><rect x="10.0" y="275.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.33%)</title><rect x="10.0" y="259.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.33%)</title><rect x="10.0" y="243.0" width="3.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/OffsetCommitRequest$Builder.build (1 samples, 0.33%)</title><rect x="13.9" y="387.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="16.9" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/OffsetCommitRequest$Builder.build (1 samples, 0.33%)</title><rect x="13.9" y="371.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.9" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (24 samples, 7.87%)</title><rect x="17.7" y="531.0" width="92.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="20.7" y="542.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (1 samples, 0.33%)</title><rect x="17.7" y="515.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.7" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (1 samples, 0.33%)</title><rect x="17.7" y="499.0" width="3.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.7" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.33%)</title><rect x="17.7" y="483.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.7" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$260/1759467965.accept (1 samples, 0.33%)</title><rect x="17.7" y="467.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.7" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (1 samples, 0.33%)</title><rect x="17.7" y="451.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.7" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.33%)</title><rect x="17.7" y="435.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="20.7" y="446.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.33%)</title><rect x="17.7" y="419.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.7" y="430.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (6 samples, 1.97%)</title><rect x="21.6" y="515.0" width="23.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="24.6" y="526.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$259/1173836526.accept (6 samples, 1.97%)</title><rect x="21.6" y="499.0" width="23.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="24.6" y="510.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (6 samples, 1.97%)</title><rect x="21.6" y="483.0" width="23.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="24.6" y="494.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (2 samples, 0.66%)</title><rect x="21.6" y="467.0" width="7.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="24.6" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (2 samples, 0.66%)</title><rect x="21.6" y="451.0" width="7.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.6" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (2 samples, 0.66%)</title><rect x="21.6" y="435.0" width="7.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="24.6" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (2 samples, 0.66%)</title><rect x="21.6" y="419.0" width="7.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="24.6" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.66%)</title><rect x="21.6" y="403.0" width="7.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="24.6" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (2 samples, 0.66%)</title><rect x="21.6" y="387.0" width="7.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="24.6" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/TaskRequest.&lt;init&gt; (4 samples, 1.31%)</title><rect x="29.3" y="467.0" width="15.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="32.3" y="478.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 1.31%)</title><rect x="29.3" y="451.0" width="15.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="32.3" y="462.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.33%)</title><rect x="41.0" y="435.0" width="3.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="44.0" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (17 samples, 5.57%)</title><rect x="44.8" y="515.0" width="65.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="47.8" y="526.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (17 samples, 5.57%)</title><rect x="44.8" y="499.0" width="65.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="47.8" y="510.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (12 samples, 3.93%)</title><rect x="44.8" y="483.0" width="46.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="47.8" y="494.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (6 samples, 1.97%)</title><rect x="44.8" y="467.0" width="23.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="47.8" y="478.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (6 samples, 1.97%)</title><rect x="44.8" y="451.0" width="23.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="47.8" y="462.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (5 samples, 1.64%)</title><rect x="44.8" y="435.0" width="19.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="47.8" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.33%)</title><rect x="48.7" y="419.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="51.7" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.33%)</title><rect x="48.7" y="403.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="51.7" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.33%)</title><rect x="48.7" y="387.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="51.7" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.33%)</title><rect x="48.7" y="371.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="51.7" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/CompactArrayOf.read (1 samples, 0.33%)</title><rect x="48.7" y="355.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="51.7" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleTimedOutRequests (1 samples, 0.33%)</title><rect x="52.6" y="419.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="55.6" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.nodesWithTimedOutRequests (1 samples, 0.33%)</title><rect x="52.6" y="403.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="55.6" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySet.iterator (1 samples, 0.33%)</title><rect x="52.6" y="387.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="55.6" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap$EntryIterator.&lt;init&gt; (1 samples, 0.33%)</title><rect x="52.6" y="371.0" width="3.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="55.6" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.33%)</title><rect x="52.6" y="355.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="55.6" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.66%)</title><rect x="56.4" y="419.0" width="7.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="59.4" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.33%)</title><rect x="56.4" y="403.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="59.4" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.33%)</title><rect x="56.4" y="387.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="59.4" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.33%)</title><rect x="56.4" y="371.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="59.4" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.33%)</title><rect x="56.4" y="355.0" width="3.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="59.4" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.33%)</title><rect x="56.4" y="339.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="59.4" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.33%)</title><rect x="60.3" y="403.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="63.3" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesSent (1 samples, 0.33%)</title><rect x="60.3" y="387.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="63.3" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.33%)</title><rect x="60.3" y="371.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="63.3" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.33%)</title><rect x="60.3" y="355.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="63.3" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.33%)</title><rect x="60.3" y="339.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="63.3" y="350.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.33%)</title><rect x="60.3" y="323.0" width="3.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="63.3" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.clean (1 samples, 0.33%)</title><rect x="64.2" y="435.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="67.2" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$BaseIterator.hasNext (1 samples, 0.33%)</title><rect x="64.2" y="419.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="67.2" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (6 samples, 1.97%)</title><rect x="68.0" y="467.0" width="23.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="71.0" y="478.0">o..</text>
</g>
<g>
<title>java/util/ArrayDeque.addLast (1 samples, 0.33%)</title><rect x="68.0" y="451.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="71.0" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.addAll (1 samples, 0.33%)</title><rect x="71.9" y="451.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="74.9" y="462.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.iterator (1 samples, 0.33%)</title><rect x="71.9" y="435.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="74.9" y="446.0"></text>
</g>
<g>
<title>java/util/ArrayDeque$DeqIterator.&lt;init&gt; (1 samples, 0.33%)</title><rect x="71.9" y="419.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="74.9" y="430.0"></text>
</g>
<g>
<title>java/util/ArrayDeque$DeqIterator.&lt;init&gt; (1 samples, 0.33%)</title><rect x="71.9" y="403.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="74.9" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 1.31%)</title><rect x="75.8" y="451.0" width="15.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="78.8" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (4 samples, 1.31%)</title><rect x="75.8" y="435.0" width="15.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="78.8" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 1.31%)</title><rect x="75.8" y="419.0" width="15.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="78.8" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.66%)</title><rect x="75.8" y="403.0" width="7.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="78.8" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (2 samples, 0.66%)</title><rect x="83.5" y="403.0" width="7.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="86.5" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 0.66%)</title><rect x="83.5" y="387.0" width="7.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="86.5" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (2 samples, 0.66%)</title><rect x="83.5" y="371.0" width="7.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="86.5" y="382.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (2 samples, 0.66%)</title><rect x="83.5" y="355.0" width="7.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="86.5" y="366.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (2 samples, 0.66%)</title><rect x="83.5" y="339.0" width="7.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="86.5" y="350.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.33%)</title><rect x="87.4" y="323.0" width="3.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="90.4" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.66%)</title><rect x="91.2" y="483.0" width="7.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="94.2" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.66%)</title><rect x="91.2" y="467.0" width="7.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="94.2" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.66%)</title><rect x="91.2" y="451.0" width="7.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="94.2" y="462.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.66%)</title><rect x="91.2" y="435.0" width="7.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="94.2" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$227/1483986771.accept (1 samples, 0.33%)</title><rect x="95.1" y="419.0" width="3.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="98.1" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 0.66%)</title><rect x="99.0" y="483.0" width="7.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="102.0" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.33%)</title><rect x="99.0" y="467.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="102.0" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.33%)</title><rect x="99.0" y="451.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="102.0" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.33%)</title><rect x="99.0" y="435.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="102.0" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.33%)</title><rect x="99.0" y="419.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="102.0" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesReceived (1 samples, 0.33%)</title><rect x="99.0" y="403.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="102.0" y="414.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.33%)</title><rect x="99.0" y="387.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="102.0" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.33%)</title><rect x="102.9" y="467.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="105.9" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.33%)</title><rect x="102.9" y="451.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="105.9" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.33%)</title><rect x="102.9" y="435.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="105.9" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.33%)</title><rect x="102.9" y="419.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="105.9" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.33%)</title><rect x="102.9" y="403.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="105.9" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.33%)</title><rect x="102.9" y="387.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="105.9" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.33%)</title><rect x="102.9" y="371.0" width="3.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="105.9" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.33%)</title><rect x="102.9" y="355.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="105.9" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.33%)</title><rect x="102.9" y="339.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="105.9" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.validate (1 samples, 0.33%)</title><rect x="102.9" y="323.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="105.9" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.validate (1 samples, 0.33%)</title><rect x="102.9" y="307.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="105.9" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.validate (1 samples, 0.33%)</title><rect x="102.9" y="291.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="105.9" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.validate (1 samples, 0.33%)</title><rect x="102.9" y="275.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="105.9" y="286.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.validate (1 samples, 0.33%)</title><rect x="102.9" y="259.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="105.9" y="270.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.validate (1 samples, 0.33%)</title><rect x="102.9" y="243.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="105.9" y="254.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.validate (1 samples, 0.33%)</title><rect x="102.9" y="227.0" width="3.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="105.9" y="238.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.validate (1 samples, 0.33%)</title><rect x="102.9" y="211.0" width="3.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="105.9" y="222.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$6.validate (1 samples, 0.33%)</title><rect x="102.9" y="195.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="105.9" y="206.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.33%)</title><rect x="106.7" y="483.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="109.7" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.33%)</title><rect x="106.7" y="467.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="109.7" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.selectReadReplica (1 samples, 0.33%)</title><rect x="106.7" y="451.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="109.7" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.preferredReadReplica (1 samples, 0.33%)</title><rect x="106.7" y="435.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="109.7" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.33%)</title><rect x="106.7" y="419.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="109.7" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.33%)</title><rect x="106.7" y="403.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="109.7" y="414.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.33%)</title><rect x="106.7" y="387.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="109.7" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.33%)</title><rect x="106.7" y="371.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="109.7" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.33%)</title><rect x="106.7" y="355.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="109.7" y="366.0"></text>
</g>
<g>
<title>java/lang/Thread.run (227 samples, 74.43%)</title><rect x="110.6" y="547.0" width="878.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="113.6" y="558.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (227 samples, 74.43%)</title><rect x="110.6" y="531.0" width="878.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="113.6" y="542.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (227 samples, 74.43%)</title><rect x="110.6" y="515.0" width="878.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="113.6" y="526.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$279/1448771991.run (211 samples, 69.18%)</title><rect x="110.6" y="499.0" width="816.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="113.6" y="510.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$279/1448771991.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$66 (211 samples, 69.18%)</title><rect x="110.6" y="483.0" width="816.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="113.6" y="494.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$66</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (211 samples, 69.18%)</title><rect x="110.6" y="467.0" width="816.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="113.6" y="478.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (206 samples, 67.54%)</title><rect x="110.6" y="451.0" width="797.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="113.6" y="462.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (50 samples, 16.39%)</title><rect x="129.9" y="435.0" width="193.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="132.9" y="446.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (50 samples, 16.39%)</title><rect x="129.9" y="419.0" width="193.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="132.9" y="430.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (50 samples, 16.39%)</title><rect x="129.9" y="403.0" width="193.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="132.9" y="414.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (50 samples, 16.39%)</title><rect x="129.9" y="387.0" width="193.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="132.9" y="398.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (50 samples, 16.39%)</title><rect x="129.9" y="371.0" width="193.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="132.9" y="382.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (50 samples, 16.39%)</title><rect x="129.9" y="355.0" width="193.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="132.9" y="366.0">com/fasterxml/jackson/dat..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (10 samples, 3.28%)</title><rect x="129.9" y="339.0" width="38.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="132.9" y="350.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 1.31%)</title><rect x="145.4" y="323.0" width="15.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="148.4" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (4 samples, 1.31%)</title><rect x="145.4" y="307.0" width="15.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="148.4" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (4 samples, 1.31%)</title><rect x="145.4" y="291.0" width="15.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="148.4" y="302.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 1.31%)</title><rect x="145.4" y="275.0" width="15.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="148.4" y="286.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 1.31%)</title><rect x="145.4" y="259.0" width="15.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="148.4" y="270.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 1.31%)</title><rect x="145.4" y="243.0" width="15.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="148.4" y="254.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (4 samples, 1.31%)</title><rect x="145.4" y="227.0" width="15.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="148.4" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (2 samples, 0.66%)</title><rect x="160.9" y="323.0" width="7.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="163.9" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (2 samples, 0.66%)</title><rect x="160.9" y="307.0" width="7.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="163.9" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.66%)</title><rect x="160.9" y="291.0" width="7.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="163.9" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 0.66%)</title><rect x="160.9" y="275.0" width="7.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="163.9" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (2 samples, 0.66%)</title><rect x="160.9" y="259.0" width="7.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="163.9" y="270.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.66%)</title><rect x="160.9" y="243.0" width="7.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="163.9" y="254.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.66%)</title><rect x="160.9" y="227.0" width="7.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="163.9" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (38 samples, 12.46%)</title><rect x="168.6" y="339.0" width="147.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="171.6" y="350.0">com/fasterxml/jacks..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (2 samples, 0.66%)</title><rect x="168.6" y="323.0" width="7.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="171.6" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.33%)</title><rect x="176.4" y="323.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="179.4" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.33%)</title><rect x="176.4" y="307.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="179.4" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (4 samples, 1.31%)</title><rect x="180.2" y="323.0" width="15.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="183.2" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.31%)</title><rect x="180.2" y="307.0" width="15.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="183.2" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.66%)</title><rect x="184.1" y="291.0" width="7.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="187.1" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.33%)</title><rect x="188.0" y="275.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="191.0" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.33%)</title><rect x="191.8" y="291.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="194.8" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.33%)</title><rect x="191.8" y="275.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="194.8" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.66%)</title><rect x="195.7" y="323.0" width="7.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="198.7" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.66%)</title><rect x="195.7" y="307.0" width="7.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="198.7" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (28 samples, 9.18%)</title><rect x="203.4" y="323.0" width="108.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="206.4" y="334.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (11 samples, 3.61%)</title><rect x="203.4" y="307.0" width="42.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="206.4" y="318.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 1.31%)</title><rect x="211.2" y="291.0" width="15.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="214.2" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 1.31%)</title><rect x="211.2" y="275.0" width="15.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="214.2" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 1.31%)</title><rect x="211.2" y="259.0" width="15.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="214.2" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (5 samples, 1.64%)</title><rect x="226.7" y="291.0" width="19.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="229.7" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.33%)</title><rect x="246.0" y="307.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="249.0" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (16 samples, 5.25%)</title><rect x="249.9" y="307.0" width="61.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="252.9" y="318.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (16 samples, 5.25%)</title><rect x="249.9" y="291.0" width="61.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="252.9" y="302.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (16 samples, 5.25%)</title><rect x="249.9" y="275.0" width="61.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="252.9" y="286.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 1.64%)</title><rect x="257.6" y="259.0" width="19.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="260.6" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.98%)</title><rect x="265.3" y="243.0" width="11.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="268.3" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.98%)</title><rect x="265.3" y="227.0" width="11.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="268.3" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.98%)</title><rect x="265.3" y="211.0" width="11.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="268.3" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (3 samples, 0.98%)</title><rect x="265.3" y="195.0" width="11.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="268.3" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.66%)</title><rect x="265.3" y="179.0" width="7.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="268.3" y="190.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.66%)</title><rect x="265.3" y="163.0" width="7.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="268.3" y="174.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (1 samples, 0.33%)</title><rect x="269.2" y="147.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="272.2" y="158.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.33%)</title><rect x="273.1" y="179.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="276.1" y="190.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (2 samples, 0.66%)</title><rect x="277.0" y="259.0" width="7.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="280.0" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.33%)</title><rect x="280.8" y="243.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="283.8" y="254.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.33%)</title><rect x="280.8" y="227.0" width="3.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="283.8" y="238.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.33%)</title><rect x="280.8" y="211.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="283.8" y="222.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.33%)</title><rect x="280.8" y="195.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="283.8" y="206.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.33%)</title><rect x="280.8" y="179.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="283.8" y="190.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.33%)</title><rect x="280.8" y="163.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="283.8" y="174.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (3 samples, 0.98%)</title><rect x="284.7" y="259.0" width="11.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="287.7" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (3 samples, 0.98%)</title><rect x="284.7" y="243.0" width="11.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="287.7" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (3 samples, 0.98%)</title><rect x="284.7" y="227.0" width="11.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="287.7" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (3 samples, 0.98%)</title><rect x="284.7" y="211.0" width="11.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="287.7" y="222.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (3 samples, 0.98%)</title><rect x="284.7" y="195.0" width="11.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="287.7" y="206.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (3 samples, 0.98%)</title><rect x="284.7" y="179.0" width="11.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="287.7" y="190.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.33%)</title><rect x="296.3" y="259.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="299.3" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.33%)</title><rect x="296.3" y="243.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="299.3" y="254.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.33%)</title><rect x="296.3" y="227.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="299.3" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (3 samples, 0.98%)</title><rect x="300.2" y="259.0" width="11.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="303.2" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.33%)</title><rect x="307.9" y="243.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="310.9" y="254.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.33%)</title><rect x="307.9" y="227.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="310.9" y="238.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.33%)</title><rect x="307.9" y="211.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="310.9" y="222.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.33%)</title><rect x="307.9" y="195.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="310.9" y="206.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.33%)</title><rect x="307.9" y="179.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="310.9" y="190.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.33%)</title><rect x="307.9" y="163.0" width="3.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="310.9" y="174.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.checkUnresolvedObjectId (1 samples, 0.33%)</title><rect x="311.8" y="323.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="314.8" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.66%)</title><rect x="315.6" y="339.0" width="7.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="318.6" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.66%)</title><rect x="315.6" y="323.0" width="7.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="318.6" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.66%)</title><rect x="315.6" y="307.0" width="7.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="318.6" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.66%)</title><rect x="315.6" y="291.0" width="7.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="318.6" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.66%)</title><rect x="315.6" y="275.0" width="7.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="318.6" y="286.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (139 samples, 45.57%)</title><rect x="323.4" y="435.0" width="537.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="326.4" y="446.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (26 samples, 8.52%)</title><rect x="323.4" y="419.0" width="100.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="326.4" y="430.0">com/linecorp..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (16 samples, 5.25%)</title><rect x="362.1" y="403.0" width="61.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="365.1" y="414.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (13 samples, 4.26%)</title><rect x="373.7" y="387.0" width="50.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="376.7" y="398.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.33%)</title><rect x="381.4" y="371.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="384.4" y="382.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.33%)</title><rect x="381.4" y="355.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="384.4" y="366.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.33%)</title><rect x="381.4" y="339.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="384.4" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.33%)</title><rect x="381.4" y="323.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="384.4" y="334.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (10 samples, 3.28%)</title><rect x="385.3" y="371.0" width="38.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="388.3" y="382.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (5 samples, 1.64%)</title><rect x="404.6" y="355.0" width="19.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="407.6" y="366.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.33%)</title><rect x="404.6" y="339.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="407.6" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 1.31%)</title><rect x="408.5" y="339.0" width="15.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="411.5" y="350.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.33%)</title><rect x="424.0" y="419.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="427.0" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.33%)</title><rect x="424.0" y="403.0" width="3.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="427.0" y="414.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.33%)</title><rect x="424.0" y="387.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="427.0" y="398.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.33%)</title><rect x="424.0" y="371.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="427.0" y="382.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.33%)</title><rect x="424.0" y="355.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="427.0" y="366.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (29 samples, 9.51%)</title><rect x="427.8" y="419.0" width="112.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="430.8" y="430.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (29 samples, 9.51%)</title><rect x="427.8" y="403.0" width="112.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="430.8" y="414.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (12 samples, 3.93%)</title><rect x="439.4" y="387.0" width="46.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="442.4" y="398.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (8 samples, 2.62%)</title><rect x="443.3" y="371.0" width="31.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="446.3" y="382.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (8 samples, 2.62%)</title><rect x="443.3" y="355.0" width="31.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="446.3" y="366.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (8 samples, 2.62%)</title><rect x="443.3" y="339.0" width="31.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="446.3" y="350.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (8 samples, 2.62%)</title><rect x="443.3" y="323.0" width="31.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="446.3" y="334.0">ja..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (8 samples, 2.62%)</title><rect x="443.3" y="307.0" width="31.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="446.3" y="318.0">ja..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.98%)</title><rect x="451.0" y="291.0" width="11.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="454.0" y="302.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.33%)</title><rect x="451.0" y="275.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="454.0" y="286.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.33%)</title><rect x="451.0" y="259.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="454.0" y="270.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.33%)</title><rect x="451.0" y="243.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="454.0" y="254.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.66%)</title><rect x="454.9" y="275.0" width="7.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="457.9" y="286.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.66%)</title><rect x="454.9" y="259.0" width="7.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="457.9" y="270.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.33%)</title><rect x="458.8" y="243.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="461.8" y="254.0"></text>
</g>
<g>
<title>_new_array_nozero_Java (1 samples, 0.33%)</title><rect x="462.7" y="291.0" width="3.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="465.7" y="302.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.66%)</title><rect x="466.5" y="291.0" width="7.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="469.5" y="302.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.66%)</title><rect x="474.3" y="371.0" width="7.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="477.3" y="382.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.33%)</title><rect x="482.0" y="371.0" width="3.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="485.0" y="382.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (3 samples, 0.98%)</title><rect x="485.9" y="387.0" width="11.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="488.9" y="398.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (2 samples, 0.66%)</title><rect x="485.9" y="371.0" width="7.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="488.9" y="382.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (2 samples, 0.66%)</title><rect x="485.9" y="355.0" width="7.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="488.9" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.33%)</title><rect x="489.7" y="339.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="492.7" y="350.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.33%)</title><rect x="493.6" y="371.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="496.6" y="382.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.33%)</title><rect x="493.6" y="355.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="496.6" y="366.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (11 samples, 3.61%)</title><rect x="497.5" y="387.0" width="42.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="500.5" y="398.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (11 samples, 3.61%)</title><rect x="497.5" y="371.0" width="42.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="500.5" y="382.0">ch/q..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (11 samples, 3.61%)</title><rect x="497.5" y="355.0" width="42.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="500.5" y="366.0">java..</text>
</g>
<g>
<title>java/util/HashMap.put (10 samples, 3.28%)</title><rect x="501.3" y="339.0" width="38.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="504.3" y="350.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.putVal (9 samples, 2.95%)</title><rect x="505.2" y="323.0" width="34.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="508.2" y="334.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.33%)</title><rect x="509.1" y="307.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="512.1" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (7 samples, 2.30%)</title><rect x="513.0" y="307.0" width="27.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="516.0" y="318.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.33%)</title><rect x="536.2" y="291.0" width="3.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="539.2" y="302.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.33%)</title><rect x="536.2" y="275.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="539.2" y="286.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.33%)</title><rect x="536.2" y="259.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="539.2" y="270.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.33%)</title><rect x="536.2" y="243.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="539.2" y="254.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.33%)</title><rect x="536.2" y="227.0" width="3.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="539.2" y="238.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (77 samples, 25.25%)</title><rect x="540.0" y="419.0" width="297.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="543.0" y="430.0">com/linecorp/decaton/processor/runtime/i..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (77 samples, 25.25%)</title><rect x="540.0" y="403.0" width="297.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="543.0" y="414.0">com/linecorp/decaton/processor/runtime/i..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$206/1563401438.process (71 samples, 23.28%)</title><rect x="540.0" y="387.0" width="274.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="543.0" y="398.0">com/linecorp/decaton/benchmark/Decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (71 samples, 23.28%)</title><rect x="540.0" y="371.0" width="274.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="543.0" y="382.0">com/linecorp/decaton/benchmark/Decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (71 samples, 23.28%)</title><rect x="540.0" y="355.0" width="274.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="543.0" y="366.0">com/linecorp/decaton/benchmark/Record..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (67 samples, 21.97%)</title><rect x="543.9" y="339.0" width="259.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="546.9" y="350.0">com/linecorp/decaton/benchmark/Reco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task.getProducedTime (1 samples, 0.33%)</title><rect x="547.8" y="323.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="550.8" y="334.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.33%)</title><rect x="547.8" y="307.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="550.8" y="318.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.33%)</title><rect x="547.8" y="291.0" width="3.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="550.8" y="302.0"></text>
</g>
<g>
<title>java/lang/Thread.sleep (64 samples, 20.98%)</title><rect x="551.6" y="323.0" width="247.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="554.6" y="334.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (59 samples, 19.34%)</title><rect x="567.1" y="307.0" width="228.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="570.1" y="318.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (5 samples, 1.64%)</title><rect x="590.3" y="291.0" width="19.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="593.3" y="302.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.33%)</title><rect x="609.7" y="291.0" width="3.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="612.7" y="302.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 1.31%)</title><rect x="613.5" y="291.0" width="15.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="616.5" y="302.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.66%)</title><rect x="621.3" y="275.0" width="7.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="624.3" y="286.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.33%)</title><rect x="629.0" y="291.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="632.0" y="302.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (42 samples, 13.77%)</title><rect x="632.9" y="291.0" width="162.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="635.9" y="302.0">os::sleep(Thread*, lo..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.98%)</title><rect x="679.3" y="275.0" width="11.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="682.3" y="286.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.66%)</title><rect x="690.9" y="275.0" width="7.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="693.9" y="286.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.66%)</title><rect x="690.9" y="259.0" width="7.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="693.9" y="270.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 1.31%)</title><rect x="698.7" y="275.0" width="15.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="701.7" y="286.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (14 samples, 4.59%)</title><rect x="714.1" y="275.0" width="54.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="717.1" y="286.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.66%)</title><rect x="768.3" y="275.0" width="7.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="771.3" y="286.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.66%)</title><rect x="776.0" y="275.0" width="7.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="779.0" y="286.0"></text>
</g>
<g>
<title>pthread_cond_destroy@@GLIBC_2.3.2 (1 samples, 0.33%)</title><rect x="783.8" y="275.0" width="3.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="786.8" y="286.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.33%)</title><rect x="787.6" y="275.0" width="3.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="790.6" y="286.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.33%)</title><rect x="791.5" y="275.0" width="3.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="794.5" y="286.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.33%)</title><rect x="795.4" y="307.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="798.4" y="318.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.33%)</title><rect x="799.2" y="323.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="802.2" y="334.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.33%)</title><rect x="799.2" y="307.0" width="3.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="802.2" y="318.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.98%)</title><rect x="803.1" y="339.0" width="11.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="806.1" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.98%)</title><rect x="803.1" y="323.0" width="11.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="806.1" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.98%)</title><rect x="803.1" y="307.0" width="11.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="806.1" y="318.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.33%)</title><rect x="814.7" y="387.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="817.7" y="398.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.33%)</title><rect x="818.6" y="387.0" width="3.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="821.6" y="398.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 0.98%)</title><rect x="822.5" y="387.0" width="11.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="825.5" y="398.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.33%)</title><rect x="834.1" y="387.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="837.1" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 1.97%)</title><rect x="837.9" y="419.0" width="23.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="840.9" y="430.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 1.97%)</title><rect x="837.9" y="403.0" width="23.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="840.9" y="414.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.98%)</title><rect x="849.5" y="387.0" width="11.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="852.5" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$289/1867308393.accept (3 samples, 0.98%)</title><rect x="849.5" y="371.0" width="11.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="852.5" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$61 (3 samples, 0.98%)</title><rect x="849.5" y="355.0" width="11.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="852.5" y="366.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (3 samples, 0.98%)</title><rect x="849.5" y="339.0" width="11.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="852.5" y="350.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (3 samples, 0.98%)</title><rect x="849.5" y="323.0" width="11.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="852.5" y="334.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.33%)</title><rect x="857.3" y="307.0" width="3.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="860.3" y="318.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.33%)</title><rect x="857.3" y="291.0" width="3.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="860.3" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (11 samples, 3.61%)</title><rect x="861.1" y="435.0" width="42.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="864.1" y="446.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (11 samples, 3.61%)</title><rect x="861.1" y="419.0" width="42.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="864.1" y="430.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (10 samples, 3.28%)</title><rect x="865.0" y="403.0" width="38.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="868.0" y="414.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$294/2115290439.accept (10 samples, 3.28%)</title><rect x="865.0" y="387.0" width="38.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="868.0" y="398.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$60 (10 samples, 3.28%)</title><rect x="865.0" y="371.0" width="38.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="868.0" y="382.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$277/1602800084.complete (10 samples, 3.28%)</title><rect x="865.0" y="355.0" width="38.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="868.0" y="366.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$37 (10 samples, 3.28%)</title><rect x="865.0" y="339.0" width="38.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="868.0" y="350.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$276/831640027.complete (10 samples, 3.28%)</title><rect x="865.0" y="323.0" width="38.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="868.0" y="334.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$65 (10 samples, 3.28%)</title><rect x="865.0" y="307.0" width="38.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="868.0" y="318.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (10 samples, 3.28%)</title><rect x="865.0" y="291.0" width="38.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="868.0" y="302.0">com..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (10 samples, 3.28%)</title><rect x="865.0" y="275.0" width="38.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="868.0" y="286.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (10 samples, 3.28%)</title><rect x="865.0" y="259.0" width="38.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="868.0" y="270.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (10 samples, 3.28%)</title><rect x="865.0" y="243.0" width="38.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="868.0" y="254.0">ch/..</text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.33%)</title><rect x="903.7" y="435.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="906.7" y="446.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.33%)</title><rect x="903.7" y="419.0" width="3.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="906.7" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.33%)</title><rect x="907.6" y="451.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="910.6" y="462.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.33%)</title><rect x="907.6" y="435.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="910.6" y="446.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.33%)</title><rect x="907.6" y="419.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="910.6" y="430.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.33%)</title><rect x="907.6" y="403.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="910.6" y="414.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.33%)</title><rect x="907.6" y="387.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="910.6" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.33%)</title><rect x="907.6" y="371.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="910.6" y="382.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.33%)</title><rect x="907.6" y="355.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="910.6" y="366.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (4 samples, 1.31%)</title><rect x="911.4" y="451.0" width="15.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="914.4" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.33%)</title><rect x="926.9" y="499.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="929.9" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.33%)</title><rect x="926.9" y="483.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="929.9" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.33%)</title><rect x="926.9" y="467.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="929.9" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.33%)</title><rect x="926.9" y="451.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="929.9" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (15 samples, 4.92%)</title><rect x="930.8" y="499.0" width="58.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="933.8" y="510.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (9 samples, 2.95%)</title><rect x="930.8" y="483.0" width="34.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="933.8" y="494.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (4 samples, 1.31%)</title><rect x="930.8" y="467.0" width="15.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="933.8" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (4 samples, 1.31%)</title><rect x="930.8" y="451.0" width="15.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="933.8" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 1.31%)</title><rect x="930.8" y="435.0" width="15.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="933.8" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 1.31%)</title><rect x="930.8" y="419.0" width="15.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="933.8" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 1.31%)</title><rect x="930.8" y="403.0" width="15.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="933.8" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 1.64%)</title><rect x="946.3" y="467.0" width="19.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="949.3" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 1.64%)</title><rect x="946.3" y="451.0" width="19.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="949.3" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 1.64%)</title><rect x="946.3" y="435.0" width="19.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="949.3" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 1.64%)</title><rect x="946.3" y="419.0" width="19.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="949.3" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateOf (4 samples, 1.31%)</title><rect x="965.6" y="483.0" width="15.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="968.6" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (2 samples, 0.66%)</title><rect x="981.1" y="483.0" width="7.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="984.1" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.33%)</title><rect x="988.8" y="547.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="991.8" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.33%)</title><rect x="988.8" y="531.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="991.8" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.33%)</title><rect x="988.8" y="515.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="991.8" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.33%)</title><rect x="988.8" y="499.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="991.8" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.33%)</title><rect x="988.8" y="483.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="991.8" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.33%)</title><rect x="988.8" y="467.0" width="3.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="991.8" y="478.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.33%)</title><rect x="988.8" y="451.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="991.8" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.33%)</title><rect x="988.8" y="435.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="991.8" y="446.0"></text>
</g>
<g>
<title>start_thread (51 samples, 16.72%)</title><rect x="992.7" y="547.0" width="197.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="995.7" y="558.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (51 samples, 16.72%)</title><rect x="992.7" y="531.0" width="197.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="995.7" y="542.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (19 samples, 6.23%)</title><rect x="992.7" y="515.0" width="73.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="995.7" y="526.0">GangWork..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (19 samples, 6.23%)</title><rect x="992.7" y="499.0" width="73.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="995.7" y="510.0">G1ParTas..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (15 samples, 4.92%)</title><rect x="992.7" y="483.0" width="58.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="995.7" y="494.0">G1ParE..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (15 samples, 4.92%)</title><rect x="992.7" y="467.0" width="58.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="995.7" y="478.0">G1ParS..</text>
</g>
<g>
<title>G1DefaultParGCAllocator::alloc_buffer(InCSetState, unsigned char) (1 samples, 0.33%)</title><rect x="1023.6" y="451.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1026.6" y="462.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (6 samples, 1.97%)</title><rect x="1027.5" y="451.0" width="23.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1030.5" y="462.0">G..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (2 samples, 0.66%)</title><rect x="1043.0" y="435.0" width="7.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1046.0" y="446.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (2 samples, 0.66%)</title><rect x="1050.7" y="483.0" width="7.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1053.7" y="494.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.66%)</title><rect x="1050.7" y="467.0" width="7.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1053.7" y="478.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (2 samples, 0.66%)</title><rect x="1050.7" y="451.0" width="7.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1053.7" y="462.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (2 samples, 0.66%)</title><rect x="1058.5" y="483.0" width="7.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1061.5" y="494.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.66%)</title><rect x="1058.5" y="467.0" width="7.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1061.5" y="478.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (2 samples, 0.66%)</title><rect x="1058.5" y="451.0" width="7.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1061.5" y="462.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (2 samples, 0.66%)</title><rect x="1058.5" y="435.0" width="7.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1061.5" y="446.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (2 samples, 0.66%)</title><rect x="1058.5" y="419.0" width="7.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1061.5" y="430.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (2 samples, 0.66%)</title><rect x="1058.5" y="403.0" width="7.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1061.5" y="414.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.33%)</title><rect x="1062.3" y="387.0" width="3.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1065.3" y="398.0"></text>
</g>
<g>
<title>JavaThread::run() (31 samples, 10.16%)</title><rect x="1066.2" y="515.0" width="119.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1069.2" y="526.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (31 samples, 10.16%)</title><rect x="1066.2" y="499.0" width="119.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1069.2" y="510.0">JavaThread::thr..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (31 samples, 10.16%)</title><rect x="1066.2" y="483.0" width="119.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1069.2" y="494.0">CompileBroker::..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (31 samples, 10.16%)</title><rect x="1066.2" y="467.0" width="119.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1069.2" y="478.0">CompileBroker::..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (28 samples, 9.18%)</title><rect x="1066.2" y="451.0" width="108.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1069.2" y="462.0">C2Compiler::c..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (28 samples, 9.18%)</title><rect x="1066.2" y="435.0" width="108.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1069.2" y="446.0">Compile::Comp..</text>
</g>
<g>
<title>Compile::Code_Gen() (12 samples, 3.93%)</title><rect x="1066.2" y="419.0" width="46.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1069.2" y="430.0">Comp..</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.33%)</title><rect x="1066.2" y="403.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1069.2" y="414.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.33%)</title><rect x="1066.2" y="387.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1069.2" y="398.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.33%)</title><rect x="1066.2" y="371.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1069.2" y="382.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.33%)</title><rect x="1070.1" y="403.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1073.1" y="414.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.33%)</title><rect x="1070.1" y="387.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1073.1" y="398.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.33%)</title><rect x="1070.1" y="371.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1073.1" y="382.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.33%)</title><rect x="1070.1" y="355.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1073.1" y="366.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (10 samples, 3.28%)</title><rect x="1073.9" y="403.0" width="38.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1076.9" y="414.0">Pha..</text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.33%)</title><rect x="1073.9" y="387.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1076.9" y="398.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.33%)</title><rect x="1073.9" y="371.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1076.9" y="382.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.33%)</title><rect x="1077.8" y="387.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1080.8" y="398.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (1 samples, 0.33%)</title><rect x="1081.7" y="387.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1084.7" y="398.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.33%)</title><rect x="1081.7" y="371.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1084.7" y="382.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.98%)</title><rect x="1085.5" y="387.0" width="11.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1088.5" y="398.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.33%)</title><rect x="1089.4" y="371.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1092.4" y="382.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.33%)</title><rect x="1093.3" y="371.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1096.3" y="382.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.33%)</title><rect x="1097.1" y="387.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1100.1" y="398.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.33%)</title><rect x="1097.1" y="371.0" width="3.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1100.1" y="382.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.66%)</title><rect x="1101.0" y="387.0" width="7.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1104.0" y="398.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.66%)</title><rect x="1101.0" y="371.0" width="7.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1104.0" y="382.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.33%)</title><rect x="1108.8" y="387.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1111.8" y="398.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.33%)</title><rect x="1108.8" y="371.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1111.8" y="382.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.33%)</title><rect x="1108.8" y="355.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1111.8" y="366.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.33%)</title><rect x="1108.8" y="339.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1111.8" y="350.0"></text>
</g>
<g>
<title>Compile::Optimize() (14 samples, 4.59%)</title><rect x="1112.6" y="419.0" width="54.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1115.6" y="430.0">Compi..</text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.33%)</title><rect x="1112.6" y="403.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1115.6" y="414.0"></text>
</g>
<g>
<title>CallNode::Value(PhaseTransform*) const (1 samples, 0.33%)</title><rect x="1112.6" y="387.0" width="3.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1115.6" y="398.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (10 samples, 3.28%)</title><rect x="1116.5" y="403.0" width="38.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1119.5" y="414.0">Pha..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.66%)</title><rect x="1116.5" y="387.0" width="7.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1119.5" y="398.0"></text>
</g>
<g>
<title>IdealLoopTree::adjust_loop_exit_prob(PhaseIdealLoop*) (1 samples, 0.33%)</title><rect x="1116.5" y="371.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1119.5" y="382.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.33%)</title><rect x="1120.4" y="371.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1123.4" y="382.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.33%)</title><rect x="1120.4" y="355.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1123.4" y="366.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.33%)</title><rect x="1120.4" y="339.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1123.4" y="350.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.33%)</title><rect x="1120.4" y="323.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1123.4" y="334.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_pre_post_loops(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.33%)</title><rect x="1120.4" y="307.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1123.4" y="318.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.33%)</title><rect x="1120.4" y="291.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1123.4" y="302.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.33%)</title><rect x="1120.4" y="275.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1123.4" y="286.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.33%)</title><rect x="1120.4" y="259.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1123.4" y="270.0"></text>
</g>
<g>
<title>TypeAryPtr::hash() const (1 samples, 0.33%)</title><rect x="1120.4" y="243.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1123.4" y="254.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.33%)</title><rect x="1124.2" y="387.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1127.2" y="398.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.33%)</title><rect x="1128.1" y="387.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1131.1" y="398.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.98%)</title><rect x="1132.0" y="387.0" width="11.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1135.0" y="398.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 0.66%)</title><rect x="1135.8" y="371.0" width="7.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.8" y="382.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.33%)</title><rect x="1139.7" y="355.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1142.7" y="366.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.33%)</title><rect x="1143.6" y="387.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1146.6" y="398.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.33%)</title><rect x="1147.4" y="387.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1150.4" y="398.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.33%)</title><rect x="1151.3" y="387.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.3" y="398.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.33%)</title><rect x="1151.3" y="371.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.3" y="382.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.33%)</title><rect x="1151.3" y="355.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1154.3" y="366.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.98%)</title><rect x="1155.2" y="403.0" width="11.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1158.2" y="414.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.98%)</title><rect x="1155.2" y="387.0" width="11.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.2" y="398.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.33%)</title><rect x="1155.2" y="371.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1158.2" y="382.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.33%)</title><rect x="1155.2" y="355.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.2" y="366.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.33%)</title><rect x="1155.2" y="339.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1158.2" y="350.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.33%)</title><rect x="1155.2" y="323.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1158.2" y="334.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.33%)</title><rect x="1155.2" y="307.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.2" y="318.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.33%)</title><rect x="1155.2" y="291.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.2" y="302.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.33%)</title><rect x="1155.2" y="275.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1158.2" y="286.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.33%)</title><rect x="1159.0" y="371.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.0" y="382.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.33%)</title><rect x="1162.9" y="371.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.9" y="382.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.33%)</title><rect x="1162.9" y="355.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.9" y="366.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.33%)</title><rect x="1162.9" y="339.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.9" y="350.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.33%)</title><rect x="1162.9" y="323.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1165.9" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.33%)</title><rect x="1166.8" y="419.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1169.8" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.33%)</title><rect x="1166.8" y="403.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.33%)</title><rect x="1166.8" y="387.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.33%)</title><rect x="1166.8" y="371.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.33%)</title><rect x="1166.8" y="355.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.33%)</title><rect x="1166.8" y="339.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.8" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.33%)</title><rect x="1166.8" y="323.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.8" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.33%)</title><rect x="1166.8" y="307.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.33%)</title><rect x="1166.8" y="291.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.33%)</title><rect x="1166.8" y="275.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.33%)</title><rect x="1166.8" y="259.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.8" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.33%)</title><rect x="1166.8" y="243.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.8" y="254.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.33%)</title><rect x="1166.8" y="227.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.8" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.33%)</title><rect x="1166.8" y="211.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.8" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.33%)</title><rect x="1166.8" y="195.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.8" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.33%)</title><rect x="1166.8" y="179.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.8" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.33%)</title><rect x="1166.8" y="163.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.8" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.33%)</title><rect x="1166.8" y="147.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.8" y="158.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.33%)</title><rect x="1166.8" y="131.0" width="3.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.8" y="142.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.33%)</title><rect x="1166.8" y="115.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.8" y="126.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.33%)</title><rect x="1166.8" y="99.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.8" y="110.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.33%)</title><rect x="1166.8" y="83.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.8" y="94.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.33%)</title><rect x="1166.8" y="67.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.8" y="78.0"></text>
</g>
<g>
<title>ciMethod::is_unboxing_method() const (1 samples, 0.33%)</title><rect x="1166.8" y="51.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.8" y="62.0"></text>
</g>
<g>
<title>ciMetadata::is_loaded() const (1 samples, 0.33%)</title><rect x="1166.8" y="35.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.8" y="46.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.33%)</title><rect x="1170.7" y="419.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.7" y="430.0"></text>
</g>
<g>
<title>Unique_Node_List::remove_useless_nodes(VectorSet&amp;) (1 samples, 0.33%)</title><rect x="1170.7" y="403.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.7" y="414.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 0.98%)</title><rect x="1174.5" y="451.0" width="11.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.5" y="462.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 0.98%)</title><rect x="1174.5" y="435.0" width="11.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.5" y="446.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.98%)</title><rect x="1174.5" y="419.0" width="11.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.5" y="430.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.66%)</title><rect x="1174.5" y="403.0" width="7.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.5" y="414.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.66%)</title><rect x="1174.5" y="387.0" width="7.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.5" y="398.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.33%)</title><rect x="1174.5" y="371.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.5" y="382.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (1 samples, 0.33%)</title><rect x="1174.5" y="355.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.5" y="366.0"></text>
</g>
<g>
<title>LIRGenerator::do_LoadField(LoadField*) (1 samples, 0.33%)</title><rect x="1174.5" y="339.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.5" y="350.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.33%)</title><rect x="1178.4" y="371.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.4" y="382.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.33%)</title><rect x="1178.4" y="355.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.4" y="366.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.33%)</title><rect x="1178.4" y="339.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.4" y="350.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.33%)</title><rect x="1178.4" y="323.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.4" y="334.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_locked_reg(Interval*) (1 samples, 0.33%)</title><rect x="1178.4" y="307.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.4" y="318.0"></text>
</g>
<g>
<title>LinearScanWalker::split_for_spilling(Interval*) (1 samples, 0.33%)</title><rect x="1178.4" y="291.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.4" y="302.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.33%)</title><rect x="1182.3" y="403.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.3" y="414.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.33%)</title><rect x="1182.3" y="387.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.3" y="398.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.33%)</title><rect x="1182.3" y="371.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.3" y="382.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.33%)</title><rect x="1182.3" y="355.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.3" y="366.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.33%)</title><rect x="1182.3" y="339.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.3" y="350.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.33%)</title><rect x="1186.1" y="515.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.1" y="526.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.33%)</title><rect x="1186.1" y="499.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.1" y="510.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.33%)</title><rect x="1186.1" y="483.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.1" y="494.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.33%)</title><rect x="1186.1" y="467.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.1" y="478.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.33%)</title><rect x="1186.1" y="451.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.1" y="462.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.33%)</title><rect x="1186.1" y="435.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.1" y="446.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.33%)</title><rect x="1186.1" y="419.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.1" y="430.0"></text>
</g>
</g>
</svg>
