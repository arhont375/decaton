<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="934" onload="init(evt)" viewBox="0 0 1200 934" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="917"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="917"> </text>
<g id="frames">
<g>
<title>all (1,244 samples, 100.00%)</title><rect x="10.0" y="883.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="894.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="10.0" y="867.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.08%)</title><rect x="10.0" y="851.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (272 samples, 21.86%)</title><rect x="10.9" y="867.0" width="258.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.9" y="878.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.08%)</title><rect x="11.9" y="851.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.9" y="862.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.08%)</title><rect x="11.9" y="835.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="14.9" y="846.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="11.9" y="819.0" width="0.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="14.9" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (270 samples, 21.70%)</title><rect x="12.8" y="851.0" width="256.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.8" y="862.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.08%)</title><rect x="12.8" y="835.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="15.8" y="846.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="12.8" y="819.0" width="1.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="15.8" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.08%)</title><rect x="13.8" y="835.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.8" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (1 samples, 0.08%)</title><rect x="13.8" y="819.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.8" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="13.8" y="803.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.8" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="13.8" y="787.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.8" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="13.8" y="771.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.8" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="13.8" y="755.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.8" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.08%)</title><rect x="13.8" y="739.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.8" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.08%)</title><rect x="13.8" y="723.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.8" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.08%)</title><rect x="13.8" y="707.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.8" y="718.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.08%)</title><rect x="13.8" y="691.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.8" y="702.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.08%)</title><rect x="13.8" y="675.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="16.8" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.08%)</title><rect x="14.7" y="835.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.7" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.08%)</title><rect x="14.7" y="819.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.7" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (9 samples, 0.72%)</title><rect x="15.7" y="835.0" width="8.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="18.7" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (9 samples, 0.72%)</title><rect x="15.7" y="819.0" width="8.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.7" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (9 samples, 0.72%)</title><rect x="15.7" y="803.0" width="8.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="18.7" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$264/515261917.accept (9 samples, 0.72%)</title><rect x="15.7" y="787.0" width="8.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.7" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (9 samples, 0.72%)</title><rect x="15.7" y="771.0" width="8.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.7" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (9 samples, 0.72%)</title><rect x="15.7" y="755.0" width="8.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="18.7" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (7 samples, 0.56%)</title><rect x="16.6" y="739.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="19.6" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.08%)</title><rect x="23.3" y="739.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.3" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.08%)</title><rect x="23.3" y="723.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="26.3" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.08%)</title><rect x="23.3" y="707.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="26.3" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.08%)</title><rect x="23.3" y="691.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="26.3" y="702.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (206 samples, 16.56%)</title><rect x="24.2" y="835.0" width="195.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="27.2" y="846.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$263/877462330.accept (194 samples, 15.59%)</title><rect x="24.2" y="819.0" width="184.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.2" y="830.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (194 samples, 15.59%)</title><rect x="24.2" y="803.0" width="184.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="27.2" y="814.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (164 samples, 13.18%)</title><rect x="27.1" y="787.0" width="155.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="30.1" y="798.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (164 samples, 13.18%)</title><rect x="27.1" y="771.0" width="155.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="30.1" y="782.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (164 samples, 13.18%)</title><rect x="27.1" y="755.0" width="155.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="30.1" y="766.0">com/linecorp/decaton..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (164 samples, 13.18%)</title><rect x="27.1" y="739.0" width="155.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="30.1" y="750.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (164 samples, 13.18%)</title><rect x="27.1" y="723.0" width="155.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="30.1" y="734.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (164 samples, 13.18%)</title><rect x="27.1" y="707.0" width="155.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="30.1" y="718.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (120 samples, 9.65%)</title><rect x="27.1" y="691.0" width="113.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="30.1" y="702.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (27 samples, 2.17%)</title><rect x="27.1" y="675.0" width="25.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="30.1" y="686.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (27 samples, 2.17%)</title><rect x="27.1" y="659.0" width="25.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="30.1" y="670.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (15 samples, 1.21%)</title><rect x="38.5" y="643.0" width="14.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="41.5" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (15 samples, 1.21%)</title><rect x="38.5" y="627.0" width="14.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="41.5" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.32%)</title><rect x="52.7" y="675.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="55.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (4 samples, 0.32%)</title><rect x="52.7" y="659.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="55.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.08%)</title><rect x="52.7" y="643.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="55.7" y="654.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.08%)</title><rect x="52.7" y="627.0" width="0.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="55.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.24%)</title><rect x="53.6" y="643.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="56.6" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (89 samples, 7.15%)</title><rect x="56.5" y="675.0" width="84.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="59.5" y="686.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (89 samples, 7.15%)</title><rect x="56.5" y="659.0" width="84.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="59.5" y="670.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (88 samples, 7.07%)</title><rect x="56.5" y="643.0" width="83.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="59.5" y="654.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (88 samples, 7.07%)</title><rect x="56.5" y="627.0" width="83.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="59.5" y="638.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (87 samples, 6.99%)</title><rect x="57.4" y="611.0" width="82.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="60.4" y="622.0">sun/misc/..</text>
</g>
<g>
<title>Unsafe_Unpark (73 samples, 5.87%)</title><rect x="60.3" y="595.0" width="69.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="63.3" y="606.0">Unsafe_..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.16%)</title><rect x="62.2" y="579.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="65.2" y="590.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.08%)</title><rect x="64.1" y="579.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="67.1" y="590.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.24%)</title><rect x="65.0" y="579.0" width="2.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="68.0" y="590.0"></text>
</g>
<g>
<title>__pthread_cond_signal (40 samples, 3.22%)</title><rect x="67.9" y="579.0" width="37.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="70.9" y="590.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (7 samples, 0.56%)</title><rect x="105.8" y="579.0" width="6.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="108.8" y="590.0"></text>
</g>
<g>
<title>pthread_mutex_lock (18 samples, 1.45%)</title><rect x="112.4" y="579.0" width="17.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="115.4" y="590.0"></text>
</g>
<g>
<title>__lll_unlock_wake (9 samples, 0.72%)</title><rect x="129.5" y="595.0" width="8.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="132.5" y="606.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.16%)</title><rect x="138.1" y="595.0" width="1.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="141.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.08%)</title><rect x="140.0" y="643.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="143.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (37 samples, 2.97%)</title><rect x="140.9" y="691.0" width="35.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="143.9" y="702.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (37 samples, 2.97%)</title><rect x="140.9" y="675.0" width="35.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="143.9" y="686.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (37 samples, 2.97%)</title><rect x="140.9" y="659.0" width="35.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="143.9" y="670.0">jav..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.08%)</title><rect x="173.2" y="643.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="176.2" y="654.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.16%)</title><rect x="174.1" y="643.0" width="1.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="177.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.32%)</title><rect x="176.0" y="691.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="179.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (4 samples, 0.32%)</title><rect x="176.0" y="675.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="179.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.32%)</title><rect x="176.0" y="659.0" width="3.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="179.0" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="178.8" y="643.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="181.8" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.08%)</title><rect x="178.8" y="627.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="181.8" y="638.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="178.8" y="611.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="181.8" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.24%)</title><rect x="179.8" y="691.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="182.8" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.24%)</title><rect x="179.8" y="675.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="182.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (3 samples, 0.24%)</title><rect x="179.8" y="659.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="182.8" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (2 samples, 0.16%)</title><rect x="180.7" y="643.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="183.7" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (3 samples, 0.24%)</title><rect x="182.6" y="787.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="185.6" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.24%)</title><rect x="182.6" y="771.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="185.6" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.24%)</title><rect x="182.6" y="755.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="185.6" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/TaskRequest.&lt;init&gt; (24 samples, 1.93%)</title><rect x="185.5" y="787.0" width="22.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="188.5" y="798.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (24 samples, 1.93%)</title><rect x="185.5" y="771.0" width="22.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="188.5" y="782.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (6 samples, 0.48%)</title><rect x="200.7" y="755.0" width="5.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="203.7" y="766.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.16%)</title><rect x="201.6" y="739.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="204.6" y="750.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.16%)</title><rect x="201.6" y="723.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="204.6" y="734.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.16%)</title><rect x="201.6" y="707.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="204.6" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="202.6" y="691.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="205.6" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.08%)</title><rect x="202.6" y="675.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="205.6" y="686.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="202.6" y="659.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="205.6" y="670.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.08%)</title><rect x="202.6" y="643.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="205.6" y="654.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.08%)</title><rect x="202.6" y="627.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="205.6" y="638.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (3 samples, 0.24%)</title><rect x="203.5" y="739.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="206.5" y="750.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.08%)</title><rect x="206.4" y="755.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="209.4" y="766.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="207.3" y="755.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="210.3" y="766.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.32%)</title><rect x="208.2" y="819.0" width="3.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="211.2" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.08%)</title><rect x="212.0" y="819.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="215.0" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.08%)</title><rect x="212.0" y="803.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="215.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.08%)</title><rect x="212.0" y="787.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="215.0" y="798.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.08%)</title><rect x="213.0" y="819.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="216.0" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.08%)</title><rect x="213.0" y="803.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="216.0" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="213.0" y="787.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="216.0" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="213.0" y="771.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="216.0" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.08%)</title><rect x="213.0" y="755.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="216.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.08%)</title><rect x="213.9" y="819.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="216.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.08%)</title><rect x="213.9" y="803.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="216.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.08%)</title><rect x="213.9" y="787.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="216.9" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.values (1 samples, 0.08%)</title><rect x="213.9" y="771.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="216.9" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (4 samples, 0.32%)</title><rect x="214.9" y="819.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="217.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (4 samples, 0.32%)</title><rect x="214.9" y="803.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="217.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.32%)</title><rect x="214.9" y="787.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="217.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.32%)</title><rect x="214.9" y="771.0" width="3.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="217.9" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.08%)</title><rect x="218.7" y="819.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="221.7" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.08%)</title><rect x="218.7" y="803.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="221.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.08%)</title><rect x="218.7" y="787.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="221.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.08%)</title><rect x="218.7" y="771.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="221.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.08%)</title><rect x="218.7" y="755.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="221.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (52 samples, 4.18%)</title><rect x="219.6" y="835.0" width="49.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="222.6" y="846.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (50 samples, 4.02%)</title><rect x="219.6" y="819.0" width="47.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="222.6" y="830.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (30 samples, 2.41%)</title><rect x="219.6" y="803.0" width="28.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="222.6" y="814.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (30 samples, 2.41%)</title><rect x="219.6" y="787.0" width="28.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="222.6" y="798.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (30 samples, 2.41%)</title><rect x="219.6" y="771.0" width="28.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="222.6" y="782.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (26 samples, 2.09%)</title><rect x="219.6" y="755.0" width="24.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="222.6" y="766.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (26 samples, 2.09%)</title><rect x="219.6" y="739.0" width="24.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="222.6" y="750.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (12 samples, 0.96%)</title><rect x="219.6" y="723.0" width="11.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="222.6" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (7 samples, 0.56%)</title><rect x="224.4" y="707.0" width="6.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="227.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (7 samples, 0.56%)</title><rect x="224.4" y="691.0" width="6.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="227.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (7 samples, 0.56%)</title><rect x="224.4" y="675.0" width="6.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="227.4" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (7 samples, 0.56%)</title><rect x="224.4" y="659.0" width="6.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="227.4" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (7 samples, 0.56%)</title><rect x="224.4" y="643.0" width="6.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="227.4" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (7 samples, 0.56%)</title><rect x="224.4" y="627.0" width="6.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="227.4" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (7 samples, 0.56%)</title><rect x="224.4" y="611.0" width="6.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="227.4" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (13 samples, 1.05%)</title><rect x="231.0" y="723.0" width="12.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="234.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.08%)</title><rect x="231.0" y="707.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="234.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (12 samples, 0.96%)</title><rect x="232.0" y="707.0" width="11.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="235.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (12 samples, 0.96%)</title><rect x="232.0" y="691.0" width="11.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="235.0" y="702.0"></text>
</g>
<g>
<title>java/util/Optional.of (12 samples, 0.96%)</title><rect x="232.0" y="675.0" width="11.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="235.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.08%)</title><rect x="243.3" y="723.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="246.3" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.16%)</title><rect x="244.3" y="755.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="247.3" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.16%)</title><rect x="244.3" y="739.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="247.3" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.08%)</title><rect x="244.3" y="723.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="247.3" y="734.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.08%)</title><rect x="244.3" y="707.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="247.3" y="718.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.08%)</title><rect x="244.3" y="691.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="247.3" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.toString (1 samples, 0.08%)</title><rect x="244.3" y="675.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="247.3" y="686.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="244.3" y="659.0" width="0.9" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="247.3" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.08%)</title><rect x="245.2" y="723.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="248.2" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.08%)</title><rect x="245.2" y="707.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="248.2" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.08%)</title><rect x="246.2" y="755.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="249.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.08%)</title><rect x="246.2" y="739.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="249.2" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="246.2" y="723.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="249.2" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="246.2" y="707.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="249.2" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="246.2" y="691.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="249.2" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionLead (1 samples, 0.08%)</title><rect x="247.1" y="755.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="250.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (10 samples, 0.80%)</title><rect x="248.1" y="803.0" width="9.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="251.1" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (9 samples, 0.72%)</title><rect x="248.1" y="787.0" width="8.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="251.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (6 samples, 0.48%)</title><rect x="248.1" y="771.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="251.1" y="782.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 0.24%)</title><rect x="248.1" y="755.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="251.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$227/383819301.accept (3 samples, 0.24%)</title><rect x="248.1" y="739.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="251.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (3 samples, 0.24%)</title><rect x="248.1" y="723.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="251.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (3 samples, 0.24%)</title><rect x="248.1" y="707.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="251.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (3 samples, 0.24%)</title><rect x="248.1" y="691.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="251.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (3 samples, 0.24%)</title><rect x="248.1" y="675.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="251.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$LeaderAndEpoch.equals (1 samples, 0.08%)</title><rect x="250.0" y="659.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="253.0" y="670.0"></text>
</g>
<g>
<title>java/util/Optional.equals (1 samples, 0.08%)</title><rect x="250.0" y="643.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="253.0" y="654.0"></text>
</g>
<g>
<title>java/util/Objects.equals (1 samples, 0.08%)</title><rect x="250.0" y="627.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="253.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (2 samples, 0.16%)</title><rect x="250.9" y="755.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="253.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (2 samples, 0.16%)</title><rect x="250.9" y="739.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="253.9" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.16%)</title><rect x="250.9" y="723.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="253.9" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.16%)</title><rect x="250.9" y="707.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="253.9" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.16%)</title><rect x="250.9" y="691.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="253.9" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.16%)</title><rect x="250.9" y="675.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="253.9" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.16%)</title><rect x="250.9" y="659.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="253.9" y="670.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="250.9" y="643.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="253.9" y="654.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="251.9" y="643.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="254.9" y="654.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$238/400742781.get (1 samples, 0.08%)</title><rect x="251.9" y="627.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="254.9" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.08%)</title><rect x="252.8" y="755.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="255.8" y="766.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.08%)</title><rect x="252.8" y="739.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="255.8" y="750.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.08%)</title><rect x="252.8" y="723.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="255.8" y="734.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.08%)</title><rect x="252.8" y="707.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="255.8" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.08%)</title><rect x="252.8" y="691.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="255.8" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (3 samples, 0.24%)</title><rect x="253.8" y="771.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="256.8" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 0.16%)</title><rect x="253.8" y="755.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="256.8" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.16%)</title><rect x="253.8" y="739.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="256.8" y="750.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.08%)</title><rect x="254.7" y="723.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="257.7" y="734.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.08%)</title><rect x="254.7" y="707.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="257.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.08%)</title><rect x="255.7" y="755.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="258.7" y="766.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.08%)</title><rect x="255.7" y="739.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="258.7" y="750.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.08%)</title><rect x="255.7" y="723.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="258.7" y="734.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.08%)</title><rect x="255.7" y="707.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="258.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.08%)</title><rect x="256.6" y="787.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="259.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.08%)</title><rect x="256.6" y="771.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="259.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.08%)</title><rect x="256.6" y="755.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="259.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.08%)</title><rect x="257.6" y="803.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="260.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (1 samples, 0.08%)</title><rect x="257.6" y="787.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="260.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (7 samples, 0.56%)</title><rect x="258.5" y="803.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="261.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.08%)</title><rect x="258.5" y="787.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="261.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.08%)</title><rect x="258.5" y="771.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="261.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.08%)</title><rect x="258.5" y="755.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="261.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.tryAcquire (1 samples, 0.08%)</title><rect x="258.5" y="739.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="261.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.08%)</title><rect x="258.5" y="723.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="261.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (5 samples, 0.40%)</title><rect x="259.5" y="787.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="262.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (5 samples, 0.40%)</title><rect x="259.5" y="771.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="262.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (4 samples, 0.32%)</title><rect x="260.4" y="755.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="263.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (4 samples, 0.32%)</title><rect x="260.4" y="739.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="263.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (4 samples, 0.32%)</title><rect x="260.4" y="723.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="263.4" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (3 samples, 0.24%)</title><rect x="260.4" y="707.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="263.4" y="718.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.24%)</title><rect x="260.4" y="691.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="263.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.08%)</title><rect x="263.3" y="707.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="266.3" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.08%)</title><rect x="263.3" y="691.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="266.3" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.08%)</title><rect x="263.3" y="675.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="266.3" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.08%)</title><rect x="263.3" y="659.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="266.3" y="670.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="263.3" y="643.0" width="0.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="266.3" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.08%)</title><rect x="264.2" y="787.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="267.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.pollDelayMs (1 samples, 0.08%)</title><rect x="264.2" y="771.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="267.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.pollDelayMs (1 samples, 0.08%)</title><rect x="264.2" y="755.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="267.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.16%)</title><rect x="265.2" y="803.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="268.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 0.16%)</title><rect x="265.2" y="787.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="268.2" y="798.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.08%)</title><rect x="265.2" y="771.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="268.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.08%)</title><rect x="266.1" y="771.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="269.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.08%)</title><rect x="266.1" y="755.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="269.1" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="266.1" y="739.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="269.1" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="266.1" y="723.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="269.1" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="266.1" y="707.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="269.1" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="266.1" y="691.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="269.1" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="266.1" y="675.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="269.1" y="686.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="266.1" y="659.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="269.1" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="266.1" y="643.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="269.1" y="654.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="266.1" y="627.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="269.1" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="266.1" y="611.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="269.1" y="622.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="266.1" y="595.0" width="1.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="269.1" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (2 samples, 0.16%)</title><rect x="267.1" y="819.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="270.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Timer.&lt;init&gt; (1 samples, 0.08%)</title><rect x="268.0" y="803.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="271.0" y="814.0"></text>
</g>
<g>
<title>java/lang/Thread.run (778 samples, 62.54%)</title><rect x="269.0" y="867.0" width="737.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="272.0" y="878.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (778 samples, 62.54%)</title><rect x="269.0" y="851.0" width="737.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="272.0" y="862.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (778 samples, 62.54%)</title><rect x="269.0" y="835.0" width="737.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="272.0" y="846.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$279/297949968.run (534 samples, 42.93%)</title><rect x="273.7" y="819.0" width="506.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="276.7" y="830.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$66 (534 samples, 42.93%)</title><rect x="273.7" y="803.0" width="506.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="276.7" y="814.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (534 samples, 42.93%)</title><rect x="273.7" y="787.0" width="506.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="276.7" y="798.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processT..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (525 samples, 42.20%)</title><rect x="273.7" y="771.0" width="498.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="276.7" y="782.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.sched..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="281.3" y="755.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="284.3" y="766.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.16%)</title><rect x="282.2" y="755.0" width="1.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="285.2" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (2 samples, 0.16%)</title><rect x="284.1" y="755.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="287.1" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (190 samples, 15.27%)</title><rect x="286.0" y="755.0" width="180.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="289.0" y="766.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>[vdso] (2 samples, 0.16%)</title><rect x="292.7" y="739.0" width="1.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="295.7" y="750.0"></text>
</g>
<g>
<title>__clock_gettime (10 samples, 0.80%)</title><rect x="294.6" y="739.0" width="9.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="297.6" y="750.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.64%)</title><rect x="296.5" y="723.0" width="7.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="299.5" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (171 samples, 13.75%)</title><rect x="304.1" y="739.0" width="162.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="307.1" y="750.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (171 samples, 13.75%)</title><rect x="304.1" y="723.0" width="162.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="307.1" y="734.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="304.1" y="707.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="307.1" y="718.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="304.1" y="691.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="307.1" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="304.1" y="675.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="307.1" y="686.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.08%)</title><rect x="304.1" y="659.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="307.1" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (170 samples, 13.67%)</title><rect x="305.0" y="707.0" width="161.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="308.0" y="718.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (170 samples, 13.67%)</title><rect x="305.0" y="691.0" width="161.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="308.0" y="702.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (170 samples, 13.67%)</title><rect x="305.0" y="675.0" width="161.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="308.0" y="686.0">com/fasterxml/jackson..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (42 samples, 3.38%)</title><rect x="305.0" y="659.0" width="39.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="308.0" y="670.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (17 samples, 1.37%)</title><rect x="305.0" y="643.0" width="16.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="308.0" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (17 samples, 1.37%)</title><rect x="305.0" y="627.0" width="16.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="308.0" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (17 samples, 1.37%)</title><rect x="305.0" y="611.0" width="16.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="308.0" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (17 samples, 1.37%)</title><rect x="305.0" y="595.0" width="16.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="308.0" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (10 samples, 0.80%)</title><rect x="305.0" y="579.0" width="9.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="308.0" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.16%)</title><rect x="312.6" y="563.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="315.6" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.16%)</title><rect x="312.6" y="547.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="315.6" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (7 samples, 0.56%)</title><rect x="314.5" y="579.0" width="6.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="317.5" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (1 samples, 0.08%)</title><rect x="320.2" y="563.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="323.2" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (25 samples, 2.01%)</title><rect x="321.1" y="643.0" width="23.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="324.1" y="654.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (25 samples, 2.01%)</title><rect x="321.1" y="627.0" width="23.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="324.1" y="638.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (5 samples, 0.40%)</title><rect x="321.1" y="611.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="324.1" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (5 samples, 0.40%)</title><rect x="321.1" y="595.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="324.1" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.16%)</title><rect x="324.0" y="579.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="327.0" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (20 samples, 1.61%)</title><rect x="325.9" y="611.0" width="18.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="328.9" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="325.9" y="595.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="328.9" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="325.9" y="579.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="328.9" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="325.9" y="563.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="328.9" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="325.9" y="547.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="328.9" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (19 samples, 1.53%)</title><rect x="326.8" y="595.0" width="18.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="329.8" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (11 samples, 0.88%)</title><rect x="326.8" y="579.0" width="10.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="329.8" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (4 samples, 0.32%)</title><rect x="337.3" y="579.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="340.3" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="340.1" y="563.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="343.1" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="340.1" y="547.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="343.1" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="340.1" y="531.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="343.1" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="340.1" y="515.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="343.1" y="526.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="340.1" y="499.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="343.1" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.08%)</title><rect x="340.1" y="483.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="343.1" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (4 samples, 0.32%)</title><rect x="341.0" y="579.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="344.0" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="343.9" y="563.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="346.9" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="343.9" y="547.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="346.9" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="343.9" y="531.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="346.9" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (116 samples, 9.32%)</title><rect x="344.8" y="659.0" width="110.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="347.8" y="670.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (4 samples, 0.32%)</title><rect x="344.8" y="643.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="347.8" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (4 samples, 0.32%)</title><rect x="344.8" y="627.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="347.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (4 samples, 0.32%)</title><rect x="344.8" y="611.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="347.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (4 samples, 0.32%)</title><rect x="344.8" y="595.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="347.8" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (4 samples, 0.32%)</title><rect x="344.8" y="579.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="347.8" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.08%)</title><rect x="345.8" y="563.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="348.8" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (2 samples, 0.16%)</title><rect x="346.7" y="563.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="349.7" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.checkedByteOffset (2 samples, 0.16%)</title><rect x="346.7" y="547.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="349.7" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (6 samples, 0.48%)</title><rect x="348.6" y="643.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="351.6" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.48%)</title><rect x="348.6" y="627.0" width="5.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="351.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 0.24%)</title><rect x="351.5" y="611.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="354.5" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (15 samples, 1.21%)</title><rect x="354.3" y="643.0" width="14.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="357.3" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (14 samples, 1.13%)</title><rect x="355.3" y="627.0" width="13.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="358.3" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (12 samples, 0.96%)</title><rect x="356.2" y="611.0" width="11.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="359.2" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (7 samples, 0.56%)</title><rect x="361.0" y="595.0" width="6.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="364.0" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.08%)</title><rect x="367.6" y="611.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="370.6" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (6 samples, 0.48%)</title><rect x="368.6" y="643.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="371.6" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (6 samples, 0.48%)</title><rect x="368.6" y="627.0" width="5.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="371.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.08%)</title><rect x="373.3" y="611.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="376.3" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.08%)</title><rect x="373.3" y="595.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="376.3" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.08%)</title><rect x="373.3" y="579.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="376.3" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="373.3" y="563.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="376.3" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="373.3" y="547.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="376.3" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="373.3" y="531.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="376.3" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="373.3" y="515.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="376.3" y="526.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="373.3" y="499.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="376.3" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.08%)</title><rect x="373.3" y="483.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="376.3" y="494.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.08%)</title><rect x="373.3" y="467.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="376.3" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (85 samples, 6.83%)</title><rect x="374.2" y="643.0" width="80.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="377.2" y="654.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (26 samples, 2.09%)</title><rect x="377.1" y="627.0" width="24.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="380.1" y="638.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.08%)</title><rect x="377.1" y="611.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="380.1" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (9 samples, 0.72%)</title><rect x="378.0" y="611.0" width="8.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="381.0" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (9 samples, 0.72%)</title><rect x="378.0" y="595.0" width="8.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="381.0" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (9 samples, 0.72%)</title><rect x="378.0" y="579.0" width="8.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="381.0" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (9 samples, 0.72%)</title><rect x="378.0" y="563.0" width="8.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="381.0" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (3 samples, 0.24%)</title><rect x="383.7" y="547.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="386.7" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (4 samples, 0.32%)</title><rect x="386.6" y="611.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="389.6" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (4 samples, 0.32%)</title><rect x="386.6" y="595.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="389.6" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (4 samples, 0.32%)</title><rect x="386.6" y="579.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="389.6" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (3 samples, 0.24%)</title><rect x="387.5" y="563.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="390.5" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (3 samples, 0.24%)</title><rect x="387.5" y="547.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="390.5" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (6 samples, 0.48%)</title><rect x="390.4" y="611.0" width="5.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="393.4" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (6 samples, 0.48%)</title><rect x="390.4" y="595.0" width="5.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="393.4" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (3 samples, 0.24%)</title><rect x="396.1" y="611.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="399.1" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (2 samples, 0.16%)</title><rect x="398.9" y="611.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="401.9" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.08%)</title><rect x="400.8" y="611.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="403.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (56 samples, 4.50%)</title><rect x="401.8" y="627.0" width="53.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="404.8" y="638.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (56 samples, 4.50%)</title><rect x="401.8" y="611.0" width="53.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="404.8" y="622.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (56 samples, 4.50%)</title><rect x="401.8" y="595.0" width="53.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="404.8" y="606.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (20 samples, 1.61%)</title><rect x="405.5" y="579.0" width="19.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="408.5" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (2 samples, 0.16%)</title><rect x="406.5" y="563.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="409.5" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.08%)</title><rect x="408.4" y="563.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="411.4" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (8 samples, 0.64%)</title><rect x="409.3" y="563.0" width="7.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="412.3" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (8 samples, 0.64%)</title><rect x="409.3" y="547.0" width="7.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="412.3" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (8 samples, 0.64%)</title><rect x="409.3" y="531.0" width="7.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="412.3" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.08%)</title><rect x="409.3" y="515.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="412.3" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (7 samples, 0.56%)</title><rect x="410.3" y="515.0" width="6.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="413.3" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.08%)</title><rect x="416.9" y="563.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="419.9" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.08%)</title><rect x="416.9" y="547.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="419.9" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.08%)</title><rect x="416.9" y="531.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="419.9" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.24%)</title><rect x="417.9" y="563.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="420.9" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.24%)</title><rect x="417.9" y="547.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="420.9" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (3 samples, 0.24%)</title><rect x="417.9" y="531.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="420.9" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (4 samples, 0.32%)</title><rect x="420.7" y="563.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="423.7" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (6 samples, 0.48%)</title><rect x="424.5" y="579.0" width="5.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="427.5" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (6 samples, 0.48%)</title><rect x="424.5" y="563.0" width="5.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="427.5" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.48%)</title><rect x="424.5" y="547.0" width="5.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="427.5" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.48%)</title><rect x="424.5" y="531.0" width="5.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="427.5" y="542.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (6 samples, 0.48%)</title><rect x="424.5" y="515.0" width="5.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="427.5" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.08%)</title><rect x="430.2" y="579.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="433.2" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (11 samples, 0.88%)</title><rect x="431.2" y="579.0" width="10.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="434.2" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (11 samples, 0.88%)</title><rect x="431.2" y="563.0" width="10.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="434.2" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (11 samples, 0.88%)</title><rect x="431.2" y="547.0" width="10.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="434.2" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (11 samples, 0.88%)</title><rect x="431.2" y="531.0" width="10.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="434.2" y="542.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (11 samples, 0.88%)</title><rect x="431.2" y="515.0" width="10.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="434.2" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (6 samples, 0.48%)</title><rect x="441.6" y="579.0" width="5.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="444.6" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.48%)</title><rect x="441.6" y="563.0" width="5.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="444.6" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.48%)</title><rect x="441.6" y="547.0" width="5.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="444.6" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (8 samples, 0.64%)</title><rect x="447.3" y="579.0" width="7.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="450.3" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (12 samples, 0.96%)</title><rect x="454.9" y="659.0" width="11.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="457.9" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (12 samples, 0.96%)</title><rect x="454.9" y="643.0" width="11.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="457.9" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (12 samples, 0.96%)</title><rect x="454.9" y="627.0" width="11.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="457.9" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (12 samples, 0.96%)</title><rect x="454.9" y="611.0" width="11.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="457.9" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (12 samples, 0.96%)</title><rect x="454.9" y="595.0" width="11.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="457.9" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.08%)</title><rect x="465.3" y="579.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="468.3" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (298 samples, 23.95%)</title><rect x="466.3" y="755.0" width="282.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="469.3" y="766.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (51 samples, 4.10%)</title><rect x="467.2" y="739.0" width="48.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="470.2" y="750.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (1 samples, 0.08%)</title><rect x="467.2" y="723.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="470.2" y="734.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (50 samples, 4.02%)</title><rect x="468.2" y="723.0" width="47.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="471.2" y="734.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (46 samples, 3.70%)</title><rect x="471.9" y="707.0" width="43.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="474.9" y="718.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 0.32%)</title><rect x="473.8" y="691.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="476.8" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 0.32%)</title><rect x="473.8" y="675.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="476.8" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (4 samples, 0.32%)</title><rect x="473.8" y="659.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="476.8" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 0.32%)</title><rect x="473.8" y="643.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="476.8" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="477.6" y="691.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="480.6" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="477.6" y="675.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="480.6" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="477.6" y="659.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="480.6" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.08%)</title><rect x="477.6" y="643.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="480.6" y="654.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (39 samples, 3.14%)</title><rect x="478.6" y="691.0" width="37.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="481.6" y="702.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (11 samples, 0.88%)</title><rect x="505.1" y="675.0" width="10.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="508.1" y="686.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.16%)</title><rect x="507.0" y="659.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="510.0" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.24%)</title><rect x="508.9" y="659.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="511.9" y="670.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.08%)</title><rect x="508.9" y="643.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="511.9" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.16%)</title><rect x="509.9" y="643.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="512.9" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 0.32%)</title><rect x="511.8" y="659.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="514.8" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.56%)</title><rect x="515.6" y="739.0" width="6.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="518.6" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.40%)</title><rect x="517.5" y="723.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="520.5" y="734.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.40%)</title><rect x="517.5" y="707.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="520.5" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (148 samples, 11.90%)</title><rect x="522.2" y="739.0" width="140.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="525.2" y="750.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (148 samples, 11.90%)</title><rect x="522.2" y="723.0" width="140.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="525.2" y="734.0">com/linecorp/decat..</text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.32%)</title><rect x="527.9" y="707.0" width="3.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="530.9" y="718.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.32%)</title><rect x="527.9" y="691.0" width="3.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="530.9" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (50 samples, 4.02%)</title><rect x="531.7" y="707.0" width="47.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="534.7" y="718.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (30 samples, 2.41%)</title><rect x="539.3" y="691.0" width="28.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="542.3" y="702.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (29 samples, 2.33%)</title><rect x="540.2" y="675.0" width="27.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="543.2" y="686.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (15 samples, 1.21%)</title><rect x="545.0" y="659.0" width="14.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="548.0" y="670.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (15 samples, 1.21%)</title><rect x="545.0" y="643.0" width="14.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="548.0" y="654.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (15 samples, 1.21%)</title><rect x="545.0" y="627.0" width="14.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="548.0" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.08%)</title><rect x="545.0" y="611.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="548.0" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (14 samples, 1.13%)</title><rect x="545.9" y="611.0" width="13.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="548.9" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.16%)</title><rect x="546.9" y="595.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="549.9" y="606.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.16%)</title><rect x="546.9" y="579.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="549.9" y="590.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.16%)</title><rect x="546.9" y="563.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="549.9" y="574.0"></text>
</g>
<g>
<title>CodeBlob::oop_map_for_return_address(unsigned char*) (1 samples, 0.08%)</title><rect x="546.9" y="547.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="549.9" y="558.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="547.8" y="547.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="550.8" y="558.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="547.8" y="531.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="550.8" y="542.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.08%)</title><rect x="548.8" y="595.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="551.8" y="606.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (9 samples, 0.72%)</title><rect x="549.7" y="595.0" width="8.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="552.7" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (5 samples, 0.40%)</title><rect x="552.6" y="579.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="555.6" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="553.5" y="563.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="556.5" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="554.5" y="563.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="557.5" y="574.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (2 samples, 0.16%)</title><rect x="555.4" y="563.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="558.4" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.08%)</title><rect x="557.3" y="579.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="560.3" y="590.0"></text>
</g>
<g>
<title>nmethod::get_deopt_original_pc(frame const*) (1 samples, 0.08%)</title><rect x="558.3" y="595.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="561.3" y="606.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.40%)</title><rect x="559.2" y="659.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="562.2" y="670.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.24%)</title><rect x="564.0" y="659.0" width="2.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="567.0" y="670.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="566.8" y="659.0" width="0.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="569.8" y="670.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (12 samples, 0.96%)</title><rect x="567.7" y="691.0" width="11.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="570.7" y="702.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (5 samples, 0.40%)</title><rect x="579.1" y="707.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="582.1" y="718.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (3 samples, 0.24%)</title><rect x="579.1" y="691.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="582.1" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="579.1" y="675.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="582.1" y="686.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (2 samples, 0.16%)</title><rect x="580.1" y="675.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="583.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.08%)</title><rect x="581.0" y="659.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="584.0" y="670.0"></text>
</g>
<g>
<title>java/lang/Long.toString (2 samples, 0.16%)</title><rect x="582.0" y="691.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="585.0" y="702.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.16%)</title><rect x="582.0" y="675.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="585.0" y="686.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.08%)</title><rect x="583.9" y="707.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="586.9" y="718.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.08%)</title><rect x="583.9" y="691.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="586.9" y="702.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.08%)</title><rect x="583.9" y="675.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="586.9" y="686.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.08%)</title><rect x="583.9" y="659.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="586.9" y="670.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.08%)</title><rect x="583.9" y="643.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="586.9" y="654.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (82 samples, 6.59%)</title><rect x="584.8" y="707.0" width="77.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="587.8" y="718.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (78 samples, 6.27%)</title><rect x="588.6" y="691.0" width="74.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="591.6" y="702.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (32 samples, 2.57%)</title><rect x="588.6" y="675.0" width="30.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="591.6" y="686.0">ch..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (11 samples, 0.88%)</title><rect x="608.5" y="659.0" width="10.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="611.5" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (11 samples, 0.88%)</title><rect x="608.5" y="643.0" width="10.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="611.5" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (11 samples, 0.88%)</title><rect x="608.5" y="627.0" width="10.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="611.5" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.24%)</title><rect x="619.0" y="675.0" width="2.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="622.0" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.24%)</title><rect x="619.0" y="659.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="622.0" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.24%)</title><rect x="619.0" y="643.0" width="2.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="622.0" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.24%)</title><rect x="619.0" y="627.0" width="2.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="622.0" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.24%)</title><rect x="619.0" y="611.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="622.0" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (43 samples, 3.46%)</title><rect x="621.8" y="675.0" width="40.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="624.8" y="686.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.put (37 samples, 2.97%)</title><rect x="627.5" y="659.0" width="35.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="630.5" y="670.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.08%)</title><rect x="630.4" y="643.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="633.4" y="654.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.08%)</title><rect x="630.4" y="627.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="633.4" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (33 samples, 2.65%)</title><rect x="631.3" y="643.0" width="31.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="634.3" y="654.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.16%)</title><rect x="651.2" y="627.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="654.2" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (8 samples, 0.64%)</title><rect x="653.1" y="627.0" width="7.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="656.1" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="659.8" y="611.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="662.8" y="622.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.16%)</title><rect x="660.7" y="627.0" width="1.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="663.7" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (62 samples, 4.98%)</title><rect x="662.6" y="739.0" width="58.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="665.6" y="750.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (62 samples, 4.98%)</title><rect x="662.6" y="723.0" width="58.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="665.6" y="734.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$206/1800409160.process (27 samples, 2.17%)</title><rect x="665.5" y="707.0" width="25.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="668.5" y="718.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (27 samples, 2.17%)</title><rect x="665.5" y="691.0" width="25.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="668.5" y="702.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (24 samples, 1.93%)</title><rect x="665.5" y="675.0" width="22.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="668.5" y="686.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.08%)</title><rect x="679.7" y="659.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="682.7" y="670.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.08%)</title><rect x="679.7" y="643.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="682.7" y="654.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.08%)</title><rect x="679.7" y="627.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="682.7" y="638.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.08%)</title><rect x="679.7" y="611.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="682.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.08%)</title><rect x="679.7" y="595.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="682.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.08%)</title><rect x="679.7" y="579.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="682.7" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (5 samples, 0.40%)</title><rect x="680.6" y="659.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="683.6" y="670.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.24%)</title><rect x="682.5" y="643.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="685.5" y="654.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.16%)</title><rect x="683.5" y="627.0" width="1.9" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="686.5" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.24%)</title><rect x="685.4" y="659.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="688.4" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.16%)</title><rect x="686.3" y="643.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="689.3" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.16%)</title><rect x="686.3" y="627.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="689.3" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.24%)</title><rect x="688.2" y="675.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="691.2" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.24%)</title><rect x="688.2" y="659.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="691.2" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.24%)</title><rect x="688.2" y="643.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="691.2" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.16%)</title><rect x="689.2" y="627.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="692.2" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (4 samples, 0.32%)</title><rect x="691.1" y="707.0" width="3.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="694.1" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.08%)</title><rect x="694.9" y="707.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="697.9" y="718.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.08%)</title><rect x="694.9" y="691.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="697.9" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.loggingExceptions (2 samples, 0.16%)</title><rect x="695.8" y="707.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="698.8" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$283/1729918525.get (2 samples, 0.16%)</title><rect x="695.8" y="691.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="698.8" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$72 (2 samples, 0.16%)</title><rect x="695.8" y="675.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="698.8" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1016925085.linkToTargetMethod (2 samples, 0.16%)</title><rect x="697.7" y="707.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="700.7" y="718.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (2 samples, 0.16%)</title><rect x="697.7" y="691.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="700.7" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$284/987756186.get$Lambda (2 samples, 0.16%)</title><rect x="697.7" y="675.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="700.7" y="686.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.08%)</title><rect x="699.6" y="707.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="702.6" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.08%)</title><rect x="699.6" y="691.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="702.6" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (10 samples, 0.80%)</title><rect x="700.5" y="707.0" width="9.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="703.5" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.40%)</title><rect x="705.3" y="691.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="708.3" y="702.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.24%)</title><rect x="705.3" y="675.0" width="2.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="708.3" y="686.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.16%)</title><rect x="708.1" y="675.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="711.1" y="686.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (3 samples, 0.24%)</title><rect x="710.0" y="707.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="713.0" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.08%)</title><rect x="711.9" y="691.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="714.9" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (9 samples, 0.72%)</title><rect x="712.9" y="707.0" width="8.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="715.9" y="718.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.08%)</title><rect x="717.6" y="691.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="720.6" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="717.6" y="675.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="720.6" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="717.6" y="659.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="720.6" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="717.6" y="643.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="720.6" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="717.6" y="627.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="720.6" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.24%)</title><rect x="718.6" y="691.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="721.6" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (1 samples, 0.08%)</title><rect x="721.4" y="739.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="724.4" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="721.4" y="723.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="724.4" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="721.4" y="707.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="724.4" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="721.4" y="691.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="724.4" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="721.4" y="675.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="724.4" y="686.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.08%)</title><rect x="721.4" y="659.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="724.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (28 samples, 2.25%)</title><rect x="722.4" y="739.0" width="26.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="725.4" y="750.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (28 samples, 2.25%)</title><rect x="722.4" y="723.0" width="26.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="725.4" y="734.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="731.8" y="707.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="734.8" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="731.8" y="691.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="734.8" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="731.8" y="675.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="734.8" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="731.8" y="659.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="734.8" y="670.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="731.8" y="643.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="734.8" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.08%)</title><rect x="731.8" y="627.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="734.8" y="638.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="732.8" y="707.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="735.8" y="718.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.40%)</title><rect x="733.7" y="707.0" width="4.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="736.7" y="718.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.40%)</title><rect x="733.7" y="691.0" width="4.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="736.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (11 samples, 0.88%)</title><rect x="738.5" y="707.0" width="10.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="741.5" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$286/588984751.accept (11 samples, 0.88%)</title><rect x="738.5" y="691.0" width="10.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="741.5" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$61 (11 samples, 0.88%)</title><rect x="738.5" y="675.0" width="10.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="741.5" y="686.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (11 samples, 0.88%)</title><rect x="738.5" y="659.0" width="10.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="741.5" y="670.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (11 samples, 0.88%)</title><rect x="738.5" y="643.0" width="10.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="741.5" y="654.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="743.2" y="627.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="746.2" y="638.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.40%)</title><rect x="744.2" y="627.0" width="4.7" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="747.2" y="638.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.40%)</title><rect x="744.2" y="611.0" width="4.7" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="747.2" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1016925085.linkToTargetMethod (2 samples, 0.16%)</title><rect x="748.9" y="755.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="751.9" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (2 samples, 0.16%)</title><rect x="748.9" y="739.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="751.9" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$287/2015026187.get$Lambda (2 samples, 0.16%)</title><rect x="748.9" y="723.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="751.9" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.16%)</title><rect x="748.9" y="707.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="751.9" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="749.9" y="691.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="752.9" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="749.9" y="675.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="752.9" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="749.9" y="659.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="752.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (21 samples, 1.69%)</title><rect x="750.8" y="755.0" width="19.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="753.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (21 samples, 1.69%)</title><rect x="750.8" y="739.0" width="19.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="753.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (18 samples, 1.45%)</title><rect x="753.7" y="723.0" width="17.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="756.7" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$286/588984751.accept (2 samples, 0.16%)</title><rect x="753.7" y="707.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="756.7" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$61 (2 samples, 0.16%)</title><rect x="753.7" y="691.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="756.7" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (2 samples, 0.16%)</title><rect x="753.7" y="675.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="756.7" y="686.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.16%)</title><rect x="753.7" y="659.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="756.7" y="670.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.16%)</title><rect x="753.7" y="643.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="756.7" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$287/2015026187.accept (16 samples, 1.29%)</title><rect x="755.6" y="707.0" width="15.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="758.6" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$60 (16 samples, 1.29%)</title><rect x="755.6" y="691.0" width="15.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="758.6" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$277/1480724752.complete (16 samples, 1.29%)</title><rect x="755.6" y="675.0" width="15.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="758.6" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$37 (16 samples, 1.29%)</title><rect x="755.6" y="659.0" width="15.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="758.6" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$276/1079436174.complete (16 samples, 1.29%)</title><rect x="755.6" y="643.0" width="15.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="758.6" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$65 (16 samples, 1.29%)</title><rect x="755.6" y="627.0" width="15.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="758.6" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (16 samples, 1.29%)</title><rect x="755.6" y="611.0" width="15.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="758.6" y="622.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (16 samples, 1.29%)</title><rect x="755.6" y="595.0" width="15.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="758.6" y="606.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (16 samples, 1.29%)</title><rect x="755.6" y="579.0" width="15.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="758.6" y="590.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (16 samples, 1.29%)</title><rect x="755.6" y="563.0" width="15.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="758.6" y="574.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.08%)</title><rect x="770.7" y="755.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="773.7" y="766.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="770.7" y="739.0" width="1.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="773.7" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (9 samples, 0.72%)</title><rect x="771.7" y="771.0" width="8.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="774.7" y="782.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.40%)</title><rect x="774.5" y="755.0" width="4.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="777.5" y="766.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.40%)</title><rect x="774.5" y="739.0" width="4.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="777.5" y="750.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="779.3" y="755.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="782.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (6 samples, 0.48%)</title><rect x="780.2" y="819.0" width="5.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="783.2" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.48%)</title><rect x="780.2" y="803.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="783.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.48%)</title><rect x="780.2" y="787.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="783.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.48%)</title><rect x="780.2" y="771.0" width="5.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="783.2" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$279/297949968.run (1 samples, 0.08%)</title><rect x="785.0" y="755.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="788.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (233 samples, 18.73%)</title><rect x="785.9" y="819.0" width="221.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="788.9" y="830.0">java/util/concurrent/ThreadPo..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (231 samples, 18.57%)</title><rect x="787.8" y="803.0" width="219.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="790.8" y="814.0">java/util/concurrent/LinkedBl..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (208 samples, 16.72%)</title><rect x="788.8" y="787.0" width="197.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="791.8" y="798.0">java/util/concurrent/locks..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (6 samples, 0.48%)</title><rect x="799.2" y="771.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="802.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.checkInterruptWhileWaiting (1 samples, 0.08%)</title><rect x="804.9" y="771.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="807.9" y="782.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.08%)</title><rect x="804.9" y="755.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="807.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.08%)</title><rect x="804.9" y="739.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="807.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (18 samples, 1.45%)</title><rect x="805.8" y="771.0" width="17.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="808.8" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (6 samples, 0.48%)</title><rect x="822.9" y="771.0" width="5.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="825.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.48%)</title><rect x="822.9" y="755.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="825.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.40%)</title><rect x="823.9" y="739.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="826.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.40%)</title><rect x="823.9" y="723.0" width="4.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="826.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (4 samples, 0.32%)</title><rect x="828.6" y="771.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="831.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (4 samples, 0.32%)</title><rect x="828.6" y="755.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="831.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (161 samples, 12.94%)</title><rect x="832.4" y="771.0" width="152.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="835.4" y="782.0">java/util/concurren..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (161 samples, 12.94%)</title><rect x="832.4" y="755.0" width="152.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="835.4" y="766.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.08%)</title><rect x="841.9" y="739.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="844.9" y="750.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (3 samples, 0.24%)</title><rect x="842.8" y="739.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="845.8" y="750.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.08%)</title><rect x="845.7" y="739.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="848.7" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.24%)</title><rect x="846.6" y="739.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="849.6" y="750.0"></text>
</g>
<g>
<title>Unsafe_Park (135 samples, 10.85%)</title><rect x="849.5" y="739.0" width="128.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="852.5" y="750.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="851.4" y="723.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="854.4" y="734.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (28 samples, 2.25%)</title><rect x="852.3" y="723.0" width="26.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="855.3" y="734.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (6 samples, 0.48%)</title><rect x="862.7" y="707.0" width="5.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="865.7" y="718.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.24%)</title><rect x="864.6" y="691.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="867.6" y="702.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.08%)</title><rect x="866.5" y="675.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="869.5" y="686.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.08%)</title><rect x="867.5" y="691.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="870.5" y="702.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (11 samples, 0.88%)</title><rect x="868.4" y="707.0" width="10.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="871.4" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="878.9" y="723.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="881.9" y="734.0"></text>
</g>
<g>
<title>__lll_lock_wait (11 samples, 0.88%)</title><rect x="879.8" y="723.0" width="10.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="882.8" y="734.0"></text>
</g>
<g>
<title>__lll_unlock_wake (27 samples, 2.17%)</title><rect x="890.3" y="723.0" width="25.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="893.3" y="734.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (45 samples, 3.62%)</title><rect x="915.9" y="723.0" width="42.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="918.9" y="734.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.24%)</title><rect x="958.6" y="723.0" width="2.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="961.6" y="734.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (3 samples, 0.24%)</title><rect x="961.4" y="723.0" width="2.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="964.4" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.16%)</title><rect x="964.2" y="723.0" width="1.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="967.2" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.16%)</title><rect x="966.1" y="723.0" width="1.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="969.1" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (6 samples, 0.48%)</title><rect x="968.0" y="723.0" width="5.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="971.0" y="734.0"></text>
</g>
<g>
<title>_init (1 samples, 0.08%)</title><rect x="973.7" y="723.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="976.7" y="734.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.16%)</title><rect x="974.7" y="723.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="977.7" y="734.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="976.6" y="723.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="979.6" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.32%)</title><rect x="977.5" y="739.0" width="3.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="980.5" y="750.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (4 samples, 0.32%)</title><rect x="981.3" y="739.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="984.3" y="750.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.08%)</title><rect x="985.1" y="771.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="988.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (22 samples, 1.77%)</title><rect x="986.1" y="787.0" width="20.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="989.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (22 samples, 1.77%)</title><rect x="986.1" y="771.0" width="20.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="989.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (22 samples, 1.77%)</title><rect x="986.1" y="755.0" width="20.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="989.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (22 samples, 1.77%)</title><rect x="986.1" y="739.0" width="20.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="989.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.08%)</title><rect x="1006.0" y="723.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1009.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.08%)</title><rect x="1006.9" y="867.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1009.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.08%)</title><rect x="1006.9" y="851.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1009.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="1006.9" y="835.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1009.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.08%)</title><rect x="1006.9" y="819.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1009.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.08%)</title><rect x="1006.9" y="803.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1009.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.08%)</title><rect x="1006.9" y="787.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1009.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.08%)</title><rect x="1006.9" y="771.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1009.9" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.08%)</title><rect x="1006.9" y="755.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1009.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.08%)</title><rect x="1006.9" y="739.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1009.9" y="750.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.08%)</title><rect x="1006.9" y="723.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1009.9" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="1006.9" y="707.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1009.9" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="1006.9" y="691.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1009.9" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.08%)</title><rect x="1006.9" y="675.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1009.9" y="686.0"></text>
</g>
<g>
<title>start_thread (192 samples, 15.43%)</title><rect x="1007.9" y="867.0" width="182.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1010.9" y="878.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (192 samples, 15.43%)</title><rect x="1007.9" y="851.0" width="182.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1010.9" y="862.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (26 samples, 2.09%)</title><rect x="1007.9" y="835.0" width="24.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1010.9" y="846.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (6 samples, 0.48%)</title><rect x="1007.9" y="819.0" width="5.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1010.9" y="830.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 0.48%)</title><rect x="1007.9" y="803.0" width="5.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1010.9" y="814.0"></text>
</g>
<g>
<title>SpinPause (6 samples, 0.48%)</title><rect x="1007.9" y="787.0" width="5.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1010.9" y="798.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (19 samples, 1.53%)</title><rect x="1013.6" y="819.0" width="18.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1016.6" y="830.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.40%)</title><rect x="1013.6" y="803.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1016.6" y="814.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 0.16%)</title><rect x="1013.6" y="787.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1016.6" y="798.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.08%)</title><rect x="1014.5" y="771.0" width="1.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1017.5" y="782.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.08%)</title><rect x="1015.5" y="787.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1018.5" y="798.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.16%)</title><rect x="1016.4" y="787.0" width="1.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1019.4" y="798.0"></text>
</g>
<g>
<title>G1ParScanThreadState::~G1ParScanThreadState() (1 samples, 0.08%)</title><rect x="1018.3" y="803.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1021.3" y="814.0"></text>
</g>
<g>
<title>PtrQueue::flush_impl() (1 samples, 0.08%)</title><rect x="1018.3" y="787.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1021.3" y="798.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (8 samples, 0.64%)</title><rect x="1019.3" y="803.0" width="7.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1022.3" y="814.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.32%)</title><rect x="1019.3" y="787.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1022.3" y="798.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (3 samples, 0.24%)</title><rect x="1019.3" y="771.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1022.3" y="782.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (2 samples, 0.16%)</title><rect x="1020.2" y="755.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1023.2" y="766.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.08%)</title><rect x="1020.2" y="739.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1023.2" y="750.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.08%)</title><rect x="1021.2" y="739.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1024.2" y="750.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.08%)</title><rect x="1021.2" y="723.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1024.2" y="734.0"></text>
</g>
<g>
<title>G1ParGCAllocator::allocate_direct_or_new_plab(InCSetState, unsigned long, unsigned char) (1 samples, 0.08%)</title><rect x="1021.2" y="707.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1024.2" y="718.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1021.2" y="691.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1024.2" y="702.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="1022.1" y="771.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1025.1" y="782.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="1022.1" y="755.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1025.1" y="766.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (1 samples, 0.08%)</title><rect x="1022.1" y="739.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1025.1" y="750.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.32%)</title><rect x="1023.1" y="787.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1026.1" y="798.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (3 samples, 0.24%)</title><rect x="1023.1" y="771.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1026.1" y="782.0"></text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.08%)</title><rect x="1025.9" y="771.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1028.9" y="782.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.08%)</title><rect x="1025.9" y="755.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1028.9" y="766.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (5 samples, 0.40%)</title><rect x="1026.8" y="803.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1029.8" y="814.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (5 samples, 0.40%)</title><rect x="1026.8" y="787.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1029.8" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (5 samples, 0.40%)</title><rect x="1026.8" y="771.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1029.8" y="782.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (5 samples, 0.40%)</title><rect x="1026.8" y="755.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1029.8" y="766.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (4 samples, 0.32%)</title><rect x="1027.8" y="739.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1030.8" y="750.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (4 samples, 0.32%)</title><rect x="1027.8" y="723.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1030.8" y="734.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.16%)</title><rect x="1029.7" y="707.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1032.7" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.08%)</title><rect x="1029.7" y="691.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1032.7" y="702.0"></text>
</g>
<g>
<title>InstanceRefKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.08%)</title><rect x="1030.6" y="691.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1033.6" y="702.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.08%)</title><rect x="1031.6" y="819.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1034.6" y="830.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.08%)</title><rect x="1031.6" y="803.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1034.6" y="814.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.08%)</title><rect x="1031.6" y="787.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1034.6" y="798.0"></text>
</g>
<g>
<title>JavaThread::run() (164 samples, 13.18%)</title><rect x="1032.5" y="835.0" width="155.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1035.5" y="846.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (164 samples, 13.18%)</title><rect x="1032.5" y="819.0" width="155.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1035.5" y="830.0">JavaThread::thread_m..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (163 samples, 13.10%)</title><rect x="1032.5" y="803.0" width="154.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1035.5" y="814.0">CompileBroker::compi..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (163 samples, 13.10%)</title><rect x="1032.5" y="787.0" width="154.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1035.5" y="798.0">CompileBroker::invok..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (161 samples, 12.94%)</title><rect x="1032.5" y="771.0" width="152.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1035.5" y="782.0">C2Compiler::compile..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (161 samples, 12.94%)</title><rect x="1032.5" y="755.0" width="152.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1035.5" y="766.0">Compile::Compile(ci..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.08%)</title><rect x="1032.5" y="739.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1035.5" y="750.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.08%)</title><rect x="1032.5" y="723.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1035.5" y="734.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1032.5" y="707.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1035.5" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1032.5" y="691.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1035.5" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1032.5" y="675.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1035.5" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1032.5" y="659.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1035.5" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1032.5" y="643.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1035.5" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1032.5" y="627.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1035.5" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.08%)</title><rect x="1032.5" y="611.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1035.5" y="622.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1032.5" y="595.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1035.5" y="606.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1032.5" y="579.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1035.5" y="590.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1032.5" y="563.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1035.5" y="574.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1032.5" y="547.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1035.5" y="558.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1032.5" y="531.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1035.5" y="542.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1032.5" y="515.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1035.5" y="526.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.08%)</title><rect x="1032.5" y="499.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1035.5" y="510.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.08%)</title><rect x="1032.5" y="483.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1035.5" y="494.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (75 samples, 6.03%)</title><rect x="1033.5" y="739.0" width="71.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1036.5" y="750.0">Compile:..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.08%)</title><rect x="1033.5" y="723.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1036.5" y="734.0"></text>
</g>
<g>
<title>MachSafePointNode::jvms() const (1 samples, 0.08%)</title><rect x="1033.5" y="707.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1036.5" y="718.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (4 samples, 0.32%)</title><rect x="1034.4" y="723.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1037.4" y="734.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.08%)</title><rect x="1035.4" y="707.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1038.4" y="718.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.08%)</title><rect x="1035.4" y="691.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1038.4" y="702.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.08%)</title><rect x="1035.4" y="675.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1038.4" y="686.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.08%)</title><rect x="1036.3" y="707.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1039.3" y="718.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.08%)</title><rect x="1036.3" y="691.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1039.3" y="702.0"></text>
</g>
<g>
<title>decodeKlass_not_nullNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.08%)</title><rect x="1037.3" y="707.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1040.3" y="718.0"></text>
</g>
<g>
<title>MacroAssembler::decode_klass_not_null(RegisterImpl*, RegisterImpl*) (1 samples, 0.08%)</title><rect x="1037.3" y="691.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1040.3" y="702.0"></text>
</g>
<g>
<title>Assembler::leaq(RegisterImpl*, Address) (1 samples, 0.08%)</title><rect x="1037.3" y="675.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1040.3" y="686.0"></text>
</g>
<g>
<title>Assembler::prefixq(Address, RegisterImpl*) (1 samples, 0.08%)</title><rect x="1037.3" y="659.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1040.3" y="670.0"></text>
</g>
<g>
<title>Matcher::match() (9 samples, 0.72%)</title><rect x="1038.2" y="723.0" width="8.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1041.2" y="734.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (4 samples, 0.32%)</title><rect x="1038.2" y="707.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1041.2" y="718.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 0.32%)</title><rect x="1042.0" y="707.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1045.0" y="718.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 0.24%)</title><rect x="1043.0" y="691.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1046.0" y="702.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.16%)</title><rect x="1043.0" y="675.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1046.0" y="686.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.08%)</title><rect x="1043.0" y="659.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1046.0" y="670.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.08%)</title><rect x="1043.0" y="643.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1046.0" y="654.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.08%)</title><rect x="1043.0" y="627.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1046.0" y="638.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.08%)</title><rect x="1043.0" y="611.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1046.0" y="622.0"></text>
</g>
<g>
<title>State::_sub_Op_AddP(Node const*) (1 samples, 0.08%)</title><rect x="1043.0" y="595.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1046.0" y="606.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.08%)</title><rect x="1043.9" y="659.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1046.9" y="670.0"></text>
</g>
<g>
<title>State::_sub_Op_AddI(Node const*) (1 samples, 0.08%)</title><rect x="1043.9" y="643.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1046.9" y="654.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.08%)</title><rect x="1044.9" y="675.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1047.9" y="686.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.08%)</title><rect x="1044.9" y="659.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1047.9" y="670.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.08%)</title><rect x="1044.9" y="643.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1047.9" y="654.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.08%)</title><rect x="1044.9" y="627.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1047.9" y="638.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.08%)</title><rect x="1044.9" y="611.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1047.9" y="622.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Chain_Rule(State*, int, Node*&amp;, MachNode*) (1 samples, 0.08%)</title><rect x="1044.9" y="595.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1047.9" y="606.0"></text>
</g>
<g>
<title>State::MachOperGenerator(int, Compile*) (1 samples, 0.08%)</title><rect x="1044.9" y="579.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1047.9" y="590.0"></text>
</g>
<g>
<title>RegionNode::Opcode() const (1 samples, 0.08%)</title><rect x="1045.8" y="707.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1048.8" y="718.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.08%)</title><rect x="1046.8" y="723.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1049.8" y="734.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.08%)</title><rect x="1046.8" y="707.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1049.8" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 0.32%)</title><rect x="1047.7" y="723.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1050.7" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 0.32%)</title><rect x="1047.7" y="707.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1050.7" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.16%)</title><rect x="1047.7" y="691.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1050.7" y="702.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.08%)</title><rect x="1047.7" y="675.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1050.7" y="686.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.08%)</title><rect x="1048.7" y="675.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1051.7" y="686.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.08%)</title><rect x="1048.7" y="659.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1051.7" y="670.0"></text>
</g>
<g>
<title>MachNode::get_base_and_disp(long&amp;, TypePtr const*&amp;) const (1 samples, 0.08%)</title><rect x="1048.7" y="643.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1051.7" y="654.0"></text>
</g>
<g>
<title>MachOper::num_edges() const (1 samples, 0.08%)</title><rect x="1048.7" y="627.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1051.7" y="638.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.08%)</title><rect x="1049.6" y="691.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1052.6" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int) (1 samples, 0.08%)</title><rect x="1049.6" y="675.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1052.6" y="686.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.08%)</title><rect x="1050.6" y="691.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1053.6" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (56 samples, 4.50%)</title><rect x="1051.5" y="723.0" width="53.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1054.5" y="734.0">Phase..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.16%)</title><rect x="1052.5" y="707.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1055.5" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (5 samples, 0.40%)</title><rect x="1054.4" y="707.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1057.4" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1054.4" y="691.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1057.4" y="702.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (3 samples, 0.24%)</title><rect x="1055.3" y="691.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1058.3" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.16%)</title><rect x="1056.3" y="675.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1059.3" y="686.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.08%)</title><rect x="1058.2" y="691.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1061.2" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (8 samples, 0.64%)</title><rect x="1059.1" y="707.0" width="7.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1062.1" y="718.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (2 samples, 0.16%)</title><rect x="1061.9" y="691.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1064.9" y="702.0"></text>
</g>
<g>
<title>r15_RegPOper::type() const (1 samples, 0.08%)</title><rect x="1062.9" y="675.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1065.9" y="686.0"></text>
</g>
<g>
<title>MachSpillCopyNode::ideal_reg() const (1 samples, 0.08%)</title><rect x="1063.8" y="691.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1066.8" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::split_DEF(Node*, Block*, int, unsigned int, Node**, Node**, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.08%)</title><rect x="1064.8" y="691.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1067.8" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.08%)</title><rect x="1065.7" y="691.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1068.7" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.08%)</title><rect x="1065.7" y="675.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1068.7" y="686.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.08%)</title><rect x="1065.7" y="659.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1068.7" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (13 samples, 1.05%)</title><rect x="1066.7" y="707.0" width="12.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1069.7" y="718.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (2 samples, 0.16%)</title><rect x="1069.5" y="691.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1072.5" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1071.4" y="691.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1074.4" y="702.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.08%)</title><rect x="1072.4" y="691.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1075.4" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 0.32%)</title><rect x="1073.3" y="691.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1076.3" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1076.2" y="675.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1079.2" y="686.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.08%)</title><rect x="1077.1" y="691.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1080.1" y="702.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.08%)</title><rect x="1078.1" y="691.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1081.1" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.16%)</title><rect x="1079.0" y="707.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1082.0" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (7 samples, 0.56%)</title><rect x="1080.9" y="707.0" width="6.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1083.9" y="718.0"></text>
</g>
<g>
<title>MachNode::in_RegMask(unsigned int) const (1 samples, 0.08%)</title><rect x="1083.8" y="691.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1086.8" y="702.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.16%)</title><rect x="1084.7" y="691.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1087.7" y="702.0"></text>
</g>
<g>
<title>TypeNode::ideal_reg() const (1 samples, 0.08%)</title><rect x="1086.6" y="691.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1089.6" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.08%)</title><rect x="1087.6" y="707.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1090.6" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 0.32%)</title><rect x="1088.5" y="707.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1091.5" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.08%)</title><rect x="1091.4" y="691.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1094.4" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1091.4" y="675.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1094.4" y="686.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (4 samples, 0.32%)</title><rect x="1092.3" y="707.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1095.3" y="718.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (4 samples, 0.32%)</title><rect x="1092.3" y="691.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1095.3" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (2 samples, 0.16%)</title><rect x="1092.3" y="675.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1095.3" y="686.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 0.16%)</title><rect x="1094.2" y="675.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1097.2" y="686.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::union_helper(Node*, Node*, unsigned int, unsigned int, Node*, Node*, Node*, Block*, unsigned int) (1 samples, 0.08%)</title><rect x="1094.2" y="659.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1097.2" y="670.0"></text>
</g>
<g>
<title>Node_Array::remove(unsigned int) (1 samples, 0.08%)</title><rect x="1094.2" y="643.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1097.2" y="654.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.08%)</title><rect x="1095.1" y="659.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1098.1" y="670.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1095.1" y="643.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1098.1" y="654.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.16%)</title><rect x="1096.1" y="707.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1099.1" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.08%)</title><rect x="1098.0" y="707.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1101.0" y="718.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (6 samples, 0.48%)</title><rect x="1098.9" y="707.0" width="5.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1101.9" y="718.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (4 samples, 0.32%)</title><rect x="1100.8" y="691.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1103.8" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1103.7" y="675.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1106.7" y="686.0"></text>
</g>
<g>
<title>Compile::Optimize() (73 samples, 5.87%)</title><rect x="1104.6" y="739.0" width="69.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1107.6" y="750.0">Compile..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.08%)</title><rect x="1104.6" y="723.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1107.6" y="734.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.08%)</title><rect x="1104.6" y="707.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1107.6" y="718.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.08%)</title><rect x="1104.6" y="691.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1107.6" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (4 samples, 0.32%)</title><rect x="1105.6" y="723.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1108.6" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (4 samples, 0.32%)</title><rect x="1105.6" y="707.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1108.6" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::add_final_edges(Node*) (1 samples, 0.08%)</title><rect x="1105.6" y="691.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1108.6" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.08%)</title><rect x="1105.6" y="675.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1108.6" y="686.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.08%)</title><rect x="1105.6" y="659.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1108.6" y="670.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.08%)</title><rect x="1105.6" y="643.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1108.6" y="654.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.08%)</title><rect x="1105.6" y="627.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1108.6" y="638.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.08%)</title><rect x="1105.6" y="611.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1108.6" y="622.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1105.6" y="595.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1108.6" y="606.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::invoke(BCEscapeAnalyzer::StateInfo&amp;, Bytecodes::Code, ciMethod*, ciKlass*) (1 samples, 0.08%)</title><rect x="1105.6" y="579.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1108.6" y="590.0"></text>
</g>
<g>
<title>ciMethodData::update_escape_info() (1 samples, 0.08%)</title><rect x="1105.6" y="563.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1108.6" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (3 samples, 0.24%)</title><rect x="1106.5" y="691.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1109.5" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.16%)</title><rect x="1106.5" y="675.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1109.5" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.16%)</title><rect x="1106.5" y="659.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1109.5" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="1106.5" y="643.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1109.5" y="654.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="1106.5" y="627.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1109.5" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1107.5" y="643.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1110.5" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1107.5" y="627.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1110.5" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1107.5" y="611.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1110.5" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1107.5" y="595.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1110.5" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1107.5" y="579.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1110.5" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1107.5" y="563.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1110.5" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1107.5" y="547.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1110.5" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1107.5" y="531.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1110.5" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1107.5" y="515.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1110.5" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1107.5" y="499.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1110.5" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1107.5" y="483.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1110.5" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1107.5" y="467.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1110.5" y="478.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.08%)</title><rect x="1107.5" y="451.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1110.5" y="462.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="1107.5" y="435.0" width="0.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1110.5" y="446.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.08%)</title><rect x="1108.4" y="675.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1111.4" y="686.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.08%)</title><rect x="1109.4" y="723.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1112.4" y="734.0"></text>
</g>
<g>
<title>CatchNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1109.4" y="707.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1112.4" y="718.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (2 samples, 0.16%)</title><rect x="1110.3" y="723.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1113.3" y="734.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (2 samples, 0.16%)</title><rect x="1110.3" y="707.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1113.3" y="718.0"></text>
</g>
<g>
<title>MemNode::Ideal_DU_postCCP(PhaseCCP*) (1 samples, 0.08%)</title><rect x="1111.3" y="691.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1114.3" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (48 samples, 3.86%)</title><rect x="1112.2" y="723.0" width="45.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1115.2" y="734.0">Phas..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1113.2" y="707.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1116.2" y="718.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1113.2" y="691.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1116.2" y="702.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1113.2" y="675.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1116.2" y="686.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1113.2" y="659.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1116.2" y="670.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1113.2" y="643.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1116.2" y="654.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1113.2" y="627.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1116.2" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_pre_post_loops(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.08%)</title><rect x="1113.2" y="611.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1116.2" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.08%)</title><rect x="1113.2" y="595.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1116.2" y="606.0"></text>
</g>
<g>
<title>TypeNode::size_of() const (1 samples, 0.08%)</title><rect x="1113.2" y="579.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1116.2" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (6 samples, 0.48%)</title><rect x="1114.1" y="707.0" width="5.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1117.1" y="718.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.08%)</title><rect x="1118.9" y="691.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1121.9" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.24%)</title><rect x="1119.8" y="707.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1122.8" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (2 samples, 0.16%)</title><rect x="1120.8" y="691.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1123.8" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (29 samples, 2.33%)</title><rect x="1122.7" y="707.0" width="27.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1125.7" y="718.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (26 samples, 2.09%)</title><rect x="1125.5" y="691.0" width="24.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1128.5" y="702.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.08%)</title><rect x="1125.5" y="675.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1128.5" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (25 samples, 2.01%)</title><rect x="1126.4" y="675.0" width="23.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1129.4" y="686.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (5 samples, 0.40%)</title><rect x="1144.5" y="659.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1147.5" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1149.2" y="659.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1152.2" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (3 samples, 0.24%)</title><rect x="1150.2" y="707.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.2" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.08%)</title><rect x="1152.1" y="691.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1155.1" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.16%)</title><rect x="1153.0" y="707.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.0" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.24%)</title><rect x="1154.9" y="707.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1157.9" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.24%)</title><rect x="1154.9" y="691.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1157.9" y="702.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1155.9" y="675.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.9" y="686.0"></text>
</g>
<g>
<title>MemNode::optimize_memory_chain(Node*, TypePtr const*, Node*, PhaseGVN*) (1 samples, 0.08%)</title><rect x="1155.9" y="659.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1158.9" y="670.0"></text>
</g>
<g>
<title>MemNode::optimize_simple_memory_chain(Node*, TypeOopPtr const*, Node*, PhaseGVN*) (1 samples, 0.08%)</title><rect x="1155.9" y="643.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.9" y="654.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1156.8" y="675.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.8" y="686.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.08%)</title><rect x="1156.8" y="659.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1159.8" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1156.8" y="643.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1159.8" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1156.8" y="627.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.8" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1156.8" y="611.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.8" y="622.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1156.8" y="595.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.8" y="606.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1156.8" y="579.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.8" y="590.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (14 samples, 1.13%)</title><rect x="1157.7" y="723.0" width="13.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1160.7" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (14 samples, 1.13%)</title><rect x="1157.7" y="707.0" width="13.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.7" y="718.0"></text>
</g>
<g>
<title>ConstraintCastNode::Identity(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1159.6" y="691.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.6" y="702.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1159.6" y="675.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1162.6" y="686.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.08%)</title><rect x="1159.6" y="659.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.6" y="670.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.08%)</title><rect x="1159.6" y="643.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.6" y="654.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1159.6" y="627.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.6" y="638.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1159.6" y="611.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.6" y="622.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1160.6" y="691.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.6" y="702.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1160.6" y="675.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.6" y="686.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.16%)</title><rect x="1161.5" y="691.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.5" y="702.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (1 samples, 0.08%)</title><rect x="1161.5" y="675.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.5" y="686.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.08%)</title><rect x="1161.5" y="659.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.5" y="670.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1162.5" y="675.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1165.5" y="686.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.08%)</title><rect x="1162.5" y="659.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.5" y="670.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1162.5" y="643.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1165.5" y="654.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.08%)</title><rect x="1162.5" y="627.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.5" y="638.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.08%)</title><rect x="1162.5" y="611.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.5" y="622.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1162.5" y="595.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.5" y="606.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1163.4" y="691.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.4" y="702.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.08%)</title><rect x="1163.4" y="675.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.4" y="686.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.08%)</title><rect x="1163.4" y="659.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.4" y="670.0"></text>
</g>
<g>
<title>ciBaseObject::ident() (1 samples, 0.08%)</title><rect x="1163.4" y="643.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.4" y="654.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (3 samples, 0.24%)</title><rect x="1164.4" y="691.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.4" y="702.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1165.3" y="675.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.3" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.08%)</title><rect x="1166.3" y="675.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.3" y="686.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.08%)</title><rect x="1166.3" y="659.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.3" y="670.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.08%)</title><rect x="1167.2" y="691.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.2" y="702.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.16%)</title><rect x="1168.2" y="691.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.2" y="702.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.08%)</title><rect x="1169.1" y="675.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.1" y="686.0"></text>
</g>
<g>
<title>StoreNode::Identity(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1170.1" y="691.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.1" y="702.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.08%)</title><rect x="1171.0" y="723.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.0" y="734.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.08%)</title><rect x="1171.0" y="707.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.0" y="718.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1171.0" y="691.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.0" y="702.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1171.0" y="675.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.0" y="686.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1171.0" y="659.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.0" y="670.0"></text>
</g>
<g>
<title>TypeNarrowPtr::eq(Type const*) const (1 samples, 0.08%)</title><rect x="1171.0" y="643.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.0" y="654.0"></text>
</g>
<g>
<title>__memset_sse2 (2 samples, 0.16%)</title><rect x="1172.0" y="723.0" width="1.9" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1175.0" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.80%)</title><rect x="1173.9" y="739.0" width="9.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.9" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.80%)</title><rect x="1173.9" y="723.0" width="9.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.80%)</title><rect x="1173.9" y="707.0" width="9.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.80%)</title><rect x="1173.9" y="691.0" width="9.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 0.80%)</title><rect x="1173.9" y="675.0" width="9.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.80%)</title><rect x="1173.9" y="659.0" width="9.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.9" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.72%)</title><rect x="1173.9" y="643.0" width="8.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.9" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.72%)</title><rect x="1173.9" y="627.0" width="8.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.64%)</title><rect x="1173.9" y="611.0" width="7.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.64%)</title><rect x="1173.9" y="595.0" width="7.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.64%)</title><rect x="1173.9" y="579.0" width="7.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.56%)</title><rect x="1173.9" y="563.0" width="6.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.9" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.32%)</title><rect x="1173.9" y="547.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.9" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.32%)</title><rect x="1173.9" y="531.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.32%)</title><rect x="1173.9" y="515.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.32%)</title><rect x="1173.9" y="499.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.32%)</title><rect x="1173.9" y="483.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.32%)</title><rect x="1173.9" y="467.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.9" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.24%)</title><rect x="1173.9" y="451.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.9" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.24%)</title><rect x="1173.9" y="435.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.24%)</title><rect x="1173.9" y="419.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.24%)</title><rect x="1173.9" y="403.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.24%)</title><rect x="1173.9" y="387.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.24%)</title><rect x="1173.9" y="371.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.9" y="382.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.08%)</title><rect x="1173.9" y="355.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.9" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1174.8" y="355.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.8" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1174.8" y="339.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1174.8" y="323.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1174.8" y="307.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1174.8" y="291.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1174.8" y="275.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.8" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1174.8" y="259.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.8" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1174.8" y="243.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.8" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1174.8" y="227.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.8" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1174.8" y="211.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.8" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1174.8" y="195.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.8" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1174.8" y="179.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.8" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1174.8" y="163.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.8" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1174.8" y="147.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.8" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1174.8" y="131.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.8" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1174.8" y="115.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.8" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1174.8" y="99.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.8" y="110.0"></text>
</g>
<g>
<title>ciBytecodeStream::has_appendix() (1 samples, 0.08%)</title><rect x="1174.8" y="83.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.8" y="94.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1175.8" y="275.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.8" y="286.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.08%)</title><rect x="1175.8" y="259.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.8" y="270.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1175.8" y="243.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.8" y="254.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1175.8" y="227.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.8" y="238.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1175.8" y="211.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.8" y="222.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1176.7" y="451.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.7" y="462.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1176.7" y="435.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.7" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1176.7" y="419.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.7" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1176.7" y="403.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1176.7" y="387.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1176.7" y="371.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1176.7" y="355.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1176.7" y="339.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.7" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1176.7" y="323.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.7" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1176.7" y="307.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1176.7" y="291.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1176.7" y="275.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1176.7" y="259.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.7" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1176.7" y="243.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.7" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1176.7" y="227.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.7" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1176.7" y="211.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.7" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1176.7" y="195.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.7" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1176.7" y="179.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.7" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1176.7" y="163.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.7" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1176.7" y="147.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.7" y="158.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1176.7" y="131.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.7" y="142.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1176.7" y="115.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.7" y="126.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1176.7" y="99.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.7" y="110.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.08%)</title><rect x="1176.7" y="83.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.7" y="94.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.08%)</title><rect x="1176.7" y="67.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.7" y="78.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle, Thread*) (1 samples, 0.08%)</title><rect x="1176.7" y="51.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.7" y="62.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol_or_null() (1 samples, 0.08%)</title><rect x="1176.7" y="35.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.7" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.24%)</title><rect x="1177.7" y="547.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.7" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1177.7" y="531.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.7" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1177.7" y="515.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1177.7" y="499.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1177.7" y="483.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1177.7" y="467.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1177.7" y="451.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.7" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.7" y="435.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.7" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1177.7" y="419.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1177.7" y="403.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1177.7" y="387.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1177.7" y="371.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1177.7" y="355.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.7" y="366.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.7" y="339.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.7" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.7" y="323.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.7" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1177.7" y="307.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1177.7" y="291.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1177.7" y="275.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1177.7" y="259.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.7" y="270.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.08%)</title><rect x="1177.7" y="243.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.7" y="254.0"></text>
</g>
<g>
<title>Parse::sharpen_type_after_if(BoolTest::mask, Node*, Type const*, Node*, Type const*) (1 samples, 0.08%)</title><rect x="1177.7" y="227.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.7" y="238.0"></text>
</g>
<g>
<title>GraphKit::replace_in_map(Node*, Node*) (1 samples, 0.08%)</title><rect x="1177.7" y="211.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.7" y="222.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.08%)</title><rect x="1177.7" y="195.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.7" y="206.0"></text>
</g>
<g>
<title>TypeAryPtr::eq(Type const*) const (1 samples, 0.08%)</title><rect x="1177.7" y="179.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.7" y="190.0"></text>
</g>
<g>
<title>TypeOopPtr::eq(Type const*) const (1 samples, 0.08%)</title><rect x="1177.7" y="163.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.7" y="174.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1178.6" y="435.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.6" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1178.6" y="419.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.6" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1178.6" y="403.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1178.6" y="387.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1178.6" y="371.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1178.6" y="355.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1178.6" y="339.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.6" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1178.6" y="323.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.6" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1178.6" y="307.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1178.6" y="291.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1178.6" y="275.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1178.6" y="259.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1178.6" y="243.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.6" y="254.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1178.6" y="227.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.6" y="238.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1178.6" y="211.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.6" y="222.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1178.6" y="195.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.6" y="206.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1178.6" y="179.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.6" y="190.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1178.6" y="163.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.6" y="174.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1178.6" y="147.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.6" y="158.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1178.6" y="131.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.6" y="142.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1178.6" y="115.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.6" y="126.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.08%)</title><rect x="1178.6" y="99.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.6" y="110.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1178.6" y="83.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.6" y="94.0"></text>
</g>
<g>
<title>ciBytecodeStream::has_method_type() (1 samples, 0.08%)</title><rect x="1178.6" y="67.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.6" y="78.0"></text>
</g>
<g>
<title>UncommonTrapCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.6" y="531.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.6" y="542.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1179.6" y="515.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.08%)</title><rect x="1180.5" y="563.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.5" y="574.0"></text>
</g>
<g>
<title>Parse::dynamic_branch_prediction(float&amp;, BoolTest::mask, Node*) (1 samples, 0.08%)</title><rect x="1180.5" y="547.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.5" y="558.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.08%)</title><rect x="1180.5" y="531.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.5" y="542.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.08%)</title><rect x="1181.5" y="611.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.5" y="622.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1181.5" y="595.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.5" y="606.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.4" y="643.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.4" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.4" y="627.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.4" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.4" y="611.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.4" y="595.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.4" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.4" y="579.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.4" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.4" y="563.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.4" y="547.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.4" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.4" y="531.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.4" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.4" y="515.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.4" y="499.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.4" y="483.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.4" y="467.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.4" y="451.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.4" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.4" y="435.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.4" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.4" y="419.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.4" y="403.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.4" y="387.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.4" y="371.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.4" y="355.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.4" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.4" y="339.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.4" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.4" y="323.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.4" y="334.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.08%)</title><rect x="1183.4" y="739.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.4" y="750.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.08%)</title><rect x="1183.4" y="723.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.4" y="734.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.08%)</title><rect x="1184.3" y="739.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.3" y="750.0"></text>
</g>
<g>
<title>Dependencies::encode_content_bytes() (1 samples, 0.08%)</title><rect x="1184.3" y="723.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.3" y="734.0"></text>
</g>
<g>
<title>ValueRecorder&lt;Metadata*&gt;::maybe_find_index(Metadata*) (1 samples, 0.08%)</title><rect x="1184.3" y="707.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.3" y="718.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.16%)</title><rect x="1185.3" y="771.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.3" y="782.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.16%)</title><rect x="1185.3" y="755.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.3" y="766.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.16%)</title><rect x="1185.3" y="739.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.3" y="750.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.08%)</title><rect x="1185.3" y="723.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.3" y="734.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.08%)</title><rect x="1185.3" y="707.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.3" y="718.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.08%)</title><rect x="1185.3" y="691.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.3" y="702.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.08%)</title><rect x="1185.3" y="675.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.3" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.08%)</title><rect x="1185.3" y="659.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.3" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.08%)</title><rect x="1185.3" y="643.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.3" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.08%)</title><rect x="1185.3" y="627.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.3" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.08%)</title><rect x="1185.3" y="611.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.3" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.08%)</title><rect x="1185.3" y="595.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.3" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.08%)</title><rect x="1185.3" y="579.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.3" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::push_scope(ciMethod*, BlockBegin*) (1 samples, 0.08%)</title><rect x="1185.3" y="563.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.3" y="574.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.08%)</title><rect x="1185.3" y="547.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.3" y="558.0"></text>
</g>
<g>
<title>BlockListBuilder::make_block_at(int, BlockBegin*) (1 samples, 0.08%)</title><rect x="1185.3" y="531.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.3" y="542.0"></text>
</g>
<g>
<title>BlockBegin::BlockBegin(int) (1 samples, 0.08%)</title><rect x="1185.3" y="515.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.3" y="526.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="1185.3" y="499.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1188.3" y="510.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.08%)</title><rect x="1186.2" y="723.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.2" y="734.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.08%)</title><rect x="1186.2" y="707.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.2" y="718.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.08%)</title><rect x="1186.2" y="691.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.2" y="702.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.08%)</title><rect x="1186.2" y="675.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.2" y="686.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.08%)</title><rect x="1186.2" y="659.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.2" y="670.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.08%)</title><rect x="1187.2" y="803.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.2" y="814.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.08%)</title><rect x="1187.2" y="787.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.2" y="798.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.08%)</title><rect x="1187.2" y="771.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.2" y="782.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::push(Metadata* const&amp;) (1 samples, 0.08%)</title><rect x="1187.2" y="755.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.2" y="766.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.16%)</title><rect x="1188.1" y="835.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.1" y="846.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.16%)</title><rect x="1188.1" y="819.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.1" y="830.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.08%)</title><rect x="1188.1" y="803.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.1" y="814.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.08%)</title><rect x="1189.1" y="803.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1192.1" y="814.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.08%)</title><rect x="1189.1" y="787.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1192.1" y="798.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.08%)</title><rect x="1189.1" y="771.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1192.1" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.08%)</title><rect x="1189.1" y="755.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1192.1" y="766.0"></text>
</g>
<g>
<title>os::elapsedTime() (1 samples, 0.08%)</title><rect x="1189.1" y="739.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1192.1" y="750.0"></text>
</g>
</g>
</svg>
