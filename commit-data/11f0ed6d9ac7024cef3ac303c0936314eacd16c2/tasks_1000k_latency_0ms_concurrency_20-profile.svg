<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="934" onload="init(evt)" viewBox="0 0 1200 934" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="917"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="917"> </text>
<g id="frames">
<g>
<title>all (1,118 samples, 100.00%)</title><rect x="10.0" y="883.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="894.0">all</text>
</g>
<g>
<title>[deoptimization] (1 samples, 0.09%)</title><rect x="10.0" y="867.0" width="1.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="10.0" y="851.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>malloc_consolidate (1 samples, 0.09%)</title><rect x="10.0" y="835.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (281 samples, 25.13%)</title><rect x="11.1" y="867.0" width="296.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.1" y="878.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.09%)</title><rect x="12.1" y="851.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="15.1" y="862.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="12.1" y="835.0" width="1.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="15.1" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.09%)</title><rect x="13.2" y="851.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.2" y="862.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="13.2" y="835.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="16.2" y="846.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="13.2" y="819.0" width="1.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="16.2" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (278 samples, 24.87%)</title><rect x="14.2" y="851.0" width="293.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="17.2" y="862.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.09%)</title><rect x="14.2" y="835.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.2" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (1 samples, 0.09%)</title><rect x="14.2" y="819.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.2" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="14.2" y="803.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.2" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="14.2" y="787.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.2" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="14.2" y="771.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.2" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="14.2" y="755.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.2" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="14.2" y="739.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.2" y="750.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="14.2" y="723.0" width="1.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="17.2" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (6 samples, 0.54%)</title><rect x="15.3" y="835.0" width="6.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.3" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (6 samples, 0.54%)</title><rect x="15.3" y="819.0" width="6.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="18.3" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (6 samples, 0.54%)</title><rect x="15.3" y="803.0" width="6.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.3" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$270/1183922460.accept (6 samples, 0.54%)</title><rect x="15.3" y="787.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.3" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (6 samples, 0.54%)</title><rect x="15.3" y="771.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="18.3" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (6 samples, 0.54%)</title><rect x="15.3" y="755.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.3" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (6 samples, 0.54%)</title><rect x="15.3" y="739.0" width="6.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="18.3" y="750.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (199 samples, 17.80%)</title><rect x="21.6" y="835.0" width="210.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="24.6" y="846.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$269/985789713.accept (192 samples, 17.17%)</title><rect x="22.7" y="819.0" width="202.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.7" y="830.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (192 samples, 17.17%)</title><rect x="22.7" y="803.0" width="202.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="25.7" y="814.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (149 samples, 13.33%)</title><rect x="22.7" y="787.0" width="157.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="25.7" y="798.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (149 samples, 13.33%)</title><rect x="22.7" y="771.0" width="157.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.7" y="782.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (149 samples, 13.33%)</title><rect x="22.7" y="755.0" width="157.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="25.7" y="766.0">com/linecorp/decaton..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (149 samples, 13.33%)</title><rect x="22.7" y="739.0" width="157.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.7" y="750.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (149 samples, 13.33%)</title><rect x="22.7" y="723.0" width="157.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="25.7" y="734.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (149 samples, 13.33%)</title><rect x="22.7" y="707.0" width="157.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="25.7" y="718.0">java/util/concurrent..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="22.7" y="691.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="25.7" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="22.7" y="675.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="25.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (85 samples, 7.60%)</title><rect x="23.7" y="691.0" width="89.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="26.7" y="702.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (20 samples, 1.79%)</title><rect x="23.7" y="675.0" width="21.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="26.7" y="686.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (20 samples, 1.79%)</title><rect x="23.7" y="659.0" width="21.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="26.7" y="670.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (13 samples, 1.16%)</title><rect x="31.1" y="643.0" width="13.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="34.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (13 samples, 1.16%)</title><rect x="31.1" y="627.0" width="13.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="34.1" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.09%)</title><rect x="44.8" y="675.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="47.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (1 samples, 0.09%)</title><rect x="44.8" y="659.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="47.8" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (64 samples, 5.72%)</title><rect x="45.9" y="675.0" width="67.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="48.9" y="686.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (64 samples, 5.72%)</title><rect x="45.9" y="659.0" width="67.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="48.9" y="670.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (64 samples, 5.72%)</title><rect x="45.9" y="643.0" width="67.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="48.9" y="654.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (64 samples, 5.72%)</title><rect x="45.9" y="627.0" width="67.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="48.9" y="638.0">java/ut..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (63 samples, 5.64%)</title><rect x="46.9" y="611.0" width="66.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="49.9" y="622.0">sun/mis..</text>
</g>
<g>
<title>Unsafe_Unpark (57 samples, 5.10%)</title><rect x="46.9" y="595.0" width="60.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="49.9" y="606.0">Unsafe..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.09%)</title><rect x="49.1" y="579.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="52.1" y="590.0"></text>
</g>
<g>
<title>__pthread_cond_signal (39 samples, 3.49%)</title><rect x="50.1" y="579.0" width="41.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="53.1" y="590.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.18%)</title><rect x="91.3" y="579.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="94.3" y="590.0"></text>
</g>
<g>
<title>pthread_mutex_lock (13 samples, 1.16%)</title><rect x="93.4" y="579.0" width="13.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="96.4" y="590.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 0.36%)</title><rect x="107.1" y="595.0" width="4.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="110.1" y="606.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.09%)</title><rect x="111.3" y="595.0" width="1.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="114.3" y="606.0"></text>
</g>
<g>
<title>_init (1 samples, 0.09%)</title><rect x="112.4" y="595.0" width="1.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="115.4" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (48 samples, 4.29%)</title><rect x="113.4" y="691.0" width="50.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="116.4" y="702.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (48 samples, 4.29%)</title><rect x="113.4" y="675.0" width="50.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="116.4" y="686.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (48 samples, 4.29%)</title><rect x="113.4" y="659.0" width="50.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="116.4" y="670.0">java/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.09%)</title><rect x="162.0" y="643.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="165.0" y="654.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="163.0" y="643.0" width="1.1" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="166.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (10 samples, 0.89%)</title><rect x="164.1" y="691.0" width="10.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="167.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (10 samples, 0.89%)</title><rect x="164.1" y="675.0" width="10.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="167.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (10 samples, 0.89%)</title><rect x="164.1" y="659.0" width="10.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="167.1" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="171.5" y="643.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="174.5" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.09%)</title><rect x="171.5" y="627.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="174.5" y="638.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="171.5" y="611.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="174.5" y="622.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.09%)</title><rect x="171.5" y="595.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="174.5" y="606.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.09%)</title><rect x="171.5" y="579.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="174.5" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.18%)</title><rect x="172.5" y="643.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="175.5" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 0.45%)</title><rect x="174.7" y="691.0" width="5.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="177.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.45%)</title><rect x="174.7" y="675.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="177.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.27%)</title><rect x="174.7" y="659.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="177.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (3 samples, 0.27%)</title><rect x="174.7" y="643.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="177.7" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.18%)</title><rect x="177.8" y="659.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="180.8" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.09%)</title><rect x="178.9" y="643.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="181.9" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (6 samples, 0.54%)</title><rect x="179.9" y="787.0" width="6.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="182.9" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.54%)</title><rect x="179.9" y="771.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="182.9" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.54%)</title><rect x="179.9" y="755.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="182.9" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/TaskRequest.&lt;init&gt; (37 samples, 3.31%)</title><rect x="186.3" y="787.0" width="39.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="189.3" y="798.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (37 samples, 3.31%)</title><rect x="186.3" y="771.0" width="39.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="189.3" y="782.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (16 samples, 1.43%)</title><rect x="204.2" y="755.0" width="16.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="207.2" y="766.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (9 samples, 0.81%)</title><rect x="204.2" y="739.0" width="9.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="207.2" y="750.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (9 samples, 0.81%)</title><rect x="204.2" y="723.0" width="9.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="207.2" y="734.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (9 samples, 0.81%)</title><rect x="204.2" y="707.0" width="9.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="207.2" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.18%)</title><rect x="211.6" y="691.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="214.6" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.09%)</title><rect x="211.6" y="675.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="214.6" y="686.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="211.6" y="659.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="214.6" y="670.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.09%)</title><rect x="211.6" y="643.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="214.6" y="654.0"></text>
</g>
<g>
<title>CodeBlob::oop_map_for_return_address(unsigned char*) (1 samples, 0.09%)</title><rect x="211.6" y="627.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="214.6" y="638.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="212.6" y="675.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="215.6" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="212.6" y="659.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="215.6" y="670.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="212.6" y="643.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="215.6" y="654.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (2 samples, 0.18%)</title><rect x="213.7" y="739.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="216.7" y="750.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.45%)</title><rect x="215.8" y="739.0" width="5.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="218.8" y="750.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.09%)</title><rect x="221.1" y="755.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="224.1" y="766.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.27%)</title><rect x="222.1" y="755.0" width="3.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="225.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.09%)</title><rect x="225.3" y="819.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="228.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.09%)</title><rect x="225.3" y="803.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="228.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.09%)</title><rect x="225.3" y="787.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="228.3" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.09%)</title><rect x="225.3" y="771.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="228.3" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (1 samples, 0.09%)</title><rect x="225.3" y="755.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="228.3" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.09%)</title><rect x="225.3" y="739.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="228.3" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (4 samples, 0.36%)</title><rect x="226.4" y="819.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="229.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (4 samples, 0.36%)</title><rect x="226.4" y="803.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="229.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.36%)</title><rect x="226.4" y="787.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="229.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.36%)</title><rect x="226.4" y="771.0" width="4.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="229.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.09%)</title><rect x="230.6" y="819.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="233.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.09%)</title><rect x="230.6" y="803.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="233.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (72 samples, 6.44%)</title><rect x="231.6" y="835.0" width="76.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="234.6" y="846.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (72 samples, 6.44%)</title><rect x="231.6" y="819.0" width="76.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="234.6" y="830.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (39 samples, 3.49%)</title><rect x="231.6" y="803.0" width="41.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="234.6" y="814.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (39 samples, 3.49%)</title><rect x="231.6" y="787.0" width="41.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="234.6" y="798.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (39 samples, 3.49%)</title><rect x="231.6" y="771.0" width="41.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="234.6" y="782.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (37 samples, 3.31%)</title><rect x="231.6" y="755.0" width="39.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="234.6" y="766.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (37 samples, 3.31%)</title><rect x="231.6" y="739.0" width="39.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="234.6" y="750.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (23 samples, 2.06%)</title><rect x="232.7" y="723.0" width="24.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="235.7" y="734.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.09%)</title><rect x="248.5" y="707.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="251.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.movePartitionToEnd (1 samples, 0.09%)</title><rect x="248.5" y="691.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="251.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.moveToEnd (1 samples, 0.09%)</title><rect x="248.5" y="675.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="251.5" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.09%)</title><rect x="248.5" y="659.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="251.5" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.09%)</title><rect x="248.5" y="643.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="251.5" y="654.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.afterNodeRemoval (1 samples, 0.09%)</title><rect x="248.5" y="627.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="251.5" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (7 samples, 0.63%)</title><rect x="249.6" y="707.0" width="7.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="252.6" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (7 samples, 0.63%)</title><rect x="249.6" y="691.0" width="7.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="252.6" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (7 samples, 0.63%)</title><rect x="249.6" y="675.0" width="7.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="252.6" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (7 samples, 0.63%)</title><rect x="249.6" y="659.0" width="7.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="252.6" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (7 samples, 0.63%)</title><rect x="249.6" y="643.0" width="7.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="252.6" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (7 samples, 0.63%)</title><rect x="249.6" y="627.0" width="7.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="252.6" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (7 samples, 0.63%)</title><rect x="249.6" y="611.0" width="7.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="252.6" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (13 samples, 1.16%)</title><rect x="257.0" y="723.0" width="13.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="260.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (13 samples, 1.16%)</title><rect x="257.0" y="707.0" width="13.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="260.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (7 samples, 0.63%)</title><rect x="257.0" y="691.0" width="7.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="260.0" y="702.0"></text>
</g>
<g>
<title>java/util/Optional.of (7 samples, 0.63%)</title><rect x="257.0" y="675.0" width="7.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="260.0" y="686.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="263.3" y="659.0" width="1.1" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="266.3" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (6 samples, 0.54%)</title><rect x="264.4" y="691.0" width="6.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="267.4" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (6 samples, 0.54%)</title><rect x="264.4" y="675.0" width="6.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="267.4" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.09%)</title><rect x="270.7" y="755.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="273.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.09%)</title><rect x="270.7" y="739.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="273.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="270.7" y="723.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="273.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="270.7" y="707.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="273.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="270.7" y="691.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="273.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="270.7" y="675.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="273.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionLead (1 samples, 0.09%)</title><rect x="271.8" y="755.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="274.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.09%)</title><rect x="271.8" y="739.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="274.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (15 samples, 1.34%)</title><rect x="272.8" y="803.0" width="15.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="275.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (14 samples, 1.25%)</title><rect x="272.8" y="787.0" width="14.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="275.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (8 samples, 0.72%)</title><rect x="272.8" y="771.0" width="8.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="275.8" y="782.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.18%)</title><rect x="274.9" y="755.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="277.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$233/850701543.accept (1 samples, 0.09%)</title><rect x="276.0" y="739.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="279.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.09%)</title><rect x="276.0" y="723.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="279.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.09%)</title><rect x="276.0" y="707.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="279.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.09%)</title><rect x="276.0" y="691.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="279.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.09%)</title><rect x="276.0" y="675.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="279.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$LeaderAndEpoch.equals (1 samples, 0.09%)</title><rect x="276.0" y="659.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="279.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/Node.equals (1 samples, 0.09%)</title><rect x="276.0" y="643.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="279.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (2 samples, 0.18%)</title><rect x="277.0" y="755.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="280.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (2 samples, 0.18%)</title><rect x="277.0" y="739.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="280.0" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="278.1" y="723.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="281.1" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="278.1" y="707.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="281.1" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="278.1" y="691.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="281.1" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="278.1" y="675.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="281.1" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="278.1" y="659.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="281.1" y="670.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.09%)</title><rect x="278.1" y="643.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="281.1" y="654.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="278.1" y="627.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="281.1" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.09%)</title><rect x="279.1" y="755.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="282.1" y="766.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.09%)</title><rect x="279.1" y="739.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="282.1" y="750.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.09%)</title><rect x="279.1" y="723.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="282.1" y="734.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="279.1" y="707.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="282.1" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="279.1" y="691.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="282.1" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.09%)</title><rect x="279.1" y="675.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="282.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.09%)</title><rect x="280.2" y="755.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="283.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.09%)</title><rect x="280.2" y="739.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="283.2" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="280.2" y="723.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="283.2" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="280.2" y="707.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="283.2" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="280.2" y="691.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="283.2" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="280.2" y="675.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="283.2" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="280.2" y="659.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="283.2" y="670.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.09%)</title><rect x="280.2" y="643.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="283.2" y="654.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.estimateSize (1 samples, 0.09%)</title><rect x="280.2" y="627.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="283.2" y="638.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (1 samples, 0.09%)</title><rect x="280.2" y="611.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="283.2" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (6 samples, 0.54%)</title><rect x="281.3" y="771.0" width="6.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="284.3" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 0.18%)</title><rect x="282.3" y="755.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="285.3" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.18%)</title><rect x="282.3" y="739.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="285.3" y="750.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.18%)</title><rect x="282.3" y="723.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="285.3" y="734.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.18%)</title><rect x="282.3" y="707.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="285.3" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="282.3" y="691.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="285.3" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="282.3" y="675.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="285.3" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.09%)</title><rect x="282.3" y="659.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="285.3" y="670.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.09%)</title><rect x="282.3" y="643.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="285.3" y="654.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.estimateSize (1 samples, 0.09%)</title><rect x="282.3" y="627.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="285.3" y="638.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (1 samples, 0.09%)</title><rect x="282.3" y="611.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="285.3" y="622.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$$Lambda$48/1472465.get (1 samples, 0.09%)</title><rect x="283.4" y="691.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="286.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (3 samples, 0.27%)</title><rect x="284.4" y="755.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="287.4" y="766.0"></text>
</g>
<g>
<title>java/util/Collection.stream (3 samples, 0.27%)</title><rect x="284.4" y="739.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="287.4" y="750.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (3 samples, 0.27%)</title><rect x="284.4" y="723.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="287.4" y="734.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (3 samples, 0.27%)</title><rect x="284.4" y="707.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="287.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.09%)</title><rect x="286.5" y="691.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="289.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.09%)</title><rect x="287.6" y="787.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="290.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (6 samples, 0.54%)</title><rect x="288.6" y="803.0" width="6.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="291.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (6 samples, 0.54%)</title><rect x="288.6" y="787.0" width="6.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="291.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.09%)</title><rect x="288.6" y="771.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="291.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.09%)</title><rect x="288.6" y="755.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="291.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.09%)</title><rect x="288.6" y="739.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="291.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.09%)</title><rect x="288.6" y="723.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="291.6" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$3.read (1 samples, 0.09%)</title><rect x="288.6" y="707.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="291.6" y="718.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.getShort (1 samples, 0.09%)</title><rect x="288.6" y="691.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="291.6" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleTimedOutRequests (1 samples, 0.09%)</title><rect x="289.7" y="771.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="292.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (4 samples, 0.36%)</title><rect x="290.8" y="771.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="293.8" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (3 samples, 0.27%)</title><rect x="291.8" y="755.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="294.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (3 samples, 0.27%)</title><rect x="291.8" y="739.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="294.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (3 samples, 0.27%)</title><rect x="291.8" y="723.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="294.8" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (3 samples, 0.27%)</title><rect x="291.8" y="707.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="294.8" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (3 samples, 0.27%)</title><rect x="291.8" y="691.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="294.8" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (3 samples, 0.27%)</title><rect x="291.8" y="675.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="294.8" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (3 samples, 0.27%)</title><rect x="291.8" y="659.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="294.8" y="670.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="292.9" y="643.0" width="1.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="295.9" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.09%)</title><rect x="293.9" y="643.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="296.9" y="654.0"></text>
</g>
<g>
<title>pthread_self (1 samples, 0.09%)</title><rect x="293.9" y="627.0" width="1.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="296.9" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (10 samples, 0.89%)</title><rect x="295.0" y="803.0" width="10.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="298.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (7 samples, 0.63%)</title><rect x="297.1" y="787.0" width="7.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="300.1" y="798.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (4 samples, 0.36%)</title><rect x="297.1" y="771.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="300.1" y="782.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.09%)</title><rect x="297.1" y="755.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="300.1" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.09%)</title><rect x="297.1" y="739.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="300.1" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.09%)</title><rect x="297.1" y="723.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="300.1" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.09%)</title><rect x="297.1" y="707.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="300.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$258/1789291284.accept (3 samples, 0.27%)</title><rect x="298.1" y="755.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="301.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (3 samples, 0.27%)</title><rect x="298.1" y="739.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="301.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (3 samples, 0.27%)</title><rect x="298.1" y="723.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="301.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (2 samples, 0.18%)</title><rect x="299.2" y="707.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="302.2" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (2 samples, 0.18%)</title><rect x="299.2" y="691.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="302.2" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="299.2" y="675.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="302.2" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="299.2" y="659.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="302.2" y="670.0"></text>
</g>
<g>
<title>java/util/Optional.ofNullable (1 samples, 0.09%)</title><rect x="300.3" y="675.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="303.3" y="686.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.09%)</title><rect x="300.3" y="659.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="303.3" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 0.18%)</title><rect x="301.3" y="771.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="304.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (2 samples, 0.18%)</title><rect x="301.3" y="755.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="304.3" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="302.4" y="739.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="305.4" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="302.4" y="723.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="305.4" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="302.4" y="707.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="305.4" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="302.4" y="691.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="305.4" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="302.4" y="675.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="305.4" y="686.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="302.4" y="659.0" width="1.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="305.4" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.09%)</title><rect x="303.4" y="771.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="306.4" y="782.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.09%)</title><rect x="303.4" y="755.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="306.4" y="766.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.09%)</title><rect x="303.4" y="739.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="306.4" y="750.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="303.4" y="723.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="306.4" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="303.4" y="707.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="306.4" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="303.4" y="691.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="306.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.addListener (1 samples, 0.09%)</title><rect x="304.5" y="787.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="307.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.09%)</title><rect x="304.5" y="771.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="307.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.09%)</title><rect x="305.5" y="803.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="308.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="305.5" y="787.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="308.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerInterceptors.onConsume (1 samples, 0.09%)</title><rect x="305.5" y="771.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="308.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.09%)</title><rect x="306.6" y="803.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="309.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="306.6" y="787.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="309.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="306.6" y="771.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="309.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="306.6" y="755.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="309.6" y="766.0"></text>
</g>
<g>
<title>java/lang/Thread.run (774 samples, 69.23%)</title><rect x="307.6" y="867.0" width="817.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="310.6" y="878.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (774 samples, 69.23%)</title><rect x="307.6" y="851.0" width="817.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="310.6" y="862.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (774 samples, 69.23%)</title><rect x="307.6" y="835.0" width="817.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="310.6" y="846.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$285/1468118814.run (518 samples, 46.33%)</title><rect x="314.0" y="819.0" width="546.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="317.0" y="830.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$285/14..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$70 (518 samples, 46.33%)</title><rect x="314.0" y="803.0" width="546.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="317.0" y="814.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (518 samples, 46.33%)</title><rect x="314.0" y="787.0" width="546.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="317.0" y="798.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (506 samples, 45.26%)</title><rect x="314.0" y="771.0" width="534.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="317.0" y="782.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleTh..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.release (2 samples, 0.18%)</title><rect x="321.4" y="755.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="324.4" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (170 samples, 15.21%)</title><rect x="323.5" y="755.0" width="179.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="326.5" y="766.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$42/815674463.extract (170 samples, 15.21%)</title><rect x="323.5" y="739.0" width="179.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="326.5" y="750.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (170 samples, 15.21%)</title><rect x="323.5" y="723.0" width="179.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="326.5" y="734.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (170 samples, 15.21%)</title><rect x="323.5" y="707.0" width="179.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="326.5" y="718.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (170 samples, 15.21%)</title><rect x="323.5" y="691.0" width="179.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="326.5" y="702.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (170 samples, 15.21%)</title><rect x="323.5" y="675.0" width="179.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="326.5" y="686.0">com/fasterxml/jackson/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (72 samples, 6.44%)</title><rect x="323.5" y="659.0" width="76.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="326.5" y="670.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (40 samples, 3.58%)</title><rect x="323.5" y="643.0" width="42.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="326.5" y="654.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (39 samples, 3.49%)</title><rect x="323.5" y="627.0" width="41.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="326.5" y="638.0">com..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="350.9" y="611.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="353.9" y="622.0"></text>
</g>
<g>
<title>__clock_gettime (11 samples, 0.98%)</title><rect x="352.0" y="611.0" width="11.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="355.0" y="622.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.54%)</title><rect x="357.2" y="595.0" width="6.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="360.2" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.09%)</title><rect x="363.6" y="611.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="366.6" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="363.6" y="595.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="366.6" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="363.6" y="579.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="366.6" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="363.6" y="563.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="366.6" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.09%)</title><rect x="363.6" y="547.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="366.6" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.&lt;init&gt; (1 samples, 0.09%)</title><rect x="364.6" y="627.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="367.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.09%)</title><rect x="364.6" y="611.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="367.6" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (32 samples, 2.86%)</title><rect x="365.7" y="643.0" width="33.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="368.7" y="654.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.&lt;init&gt; (3 samples, 0.27%)</title><rect x="365.7" y="627.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="368.7" y="638.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.09%)</title><rect x="367.8" y="611.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="370.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (29 samples, 2.59%)</title><rect x="368.9" y="627.0" width="30.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="371.9" y="638.0">co..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="372.0" y="611.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="375.0" y="622.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="372.0" y="595.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="375.0" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="372.0" y="579.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="375.0" y="590.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="373.1" y="611.0" width="1.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="376.1" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="373.1" y="595.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="376.1" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.09%)</title><rect x="374.1" y="611.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="377.1" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (6 samples, 0.54%)</title><rect x="375.2" y="611.0" width="6.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="378.2" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (3 samples, 0.27%)</title><rect x="378.4" y="595.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="381.4" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (12 samples, 1.07%)</title><rect x="381.5" y="611.0" width="12.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="384.5" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (12 samples, 1.07%)</title><rect x="381.5" y="595.0" width="12.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="384.5" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (1 samples, 0.09%)</title><rect x="381.5" y="579.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="384.5" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="381.5" y="563.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="384.5" y="574.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="381.5" y="547.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="384.5" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="381.5" y="531.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="384.5" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="381.5" y="515.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="384.5" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (9 samples, 0.81%)</title><rect x="382.6" y="579.0" width="9.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="385.6" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (2 samples, 0.18%)</title><rect x="392.1" y="579.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="395.1" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.18%)</title><rect x="392.1" y="563.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="395.1" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.18%)</title><rect x="392.1" y="547.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="395.1" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.18%)</title><rect x="392.1" y="531.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="395.1" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="393.1" y="515.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="396.1" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (5 samples, 0.45%)</title><rect x="394.2" y="611.0" width="5.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="397.2" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (84 samples, 7.51%)</title><rect x="399.5" y="659.0" width="88.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="402.5" y="670.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (3 samples, 0.27%)</title><rect x="399.5" y="643.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="402.5" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (3 samples, 0.27%)</title><rect x="399.5" y="627.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="402.5" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (2 samples, 0.18%)</title><rect x="400.5" y="611.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="403.5" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.09%)</title><rect x="401.6" y="595.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="404.6" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (7 samples, 0.63%)</title><rect x="402.6" y="643.0" width="7.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="405.6" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (7 samples, 0.63%)</title><rect x="402.6" y="627.0" width="7.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="405.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.09%)</title><rect x="404.7" y="611.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="407.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (2 samples, 0.18%)</title><rect x="405.8" y="611.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="408.8" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (2 samples, 0.18%)</title><rect x="407.9" y="611.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="410.9" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (6 samples, 0.54%)</title><rect x="410.0" y="643.0" width="6.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="413.0" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 0.36%)</title><rect x="411.1" y="627.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="414.1" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (3 samples, 0.27%)</title><rect x="412.1" y="611.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="415.1" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (3 samples, 0.27%)</title><rect x="412.1" y="595.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="415.1" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.09%)</title><rect x="415.3" y="627.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="418.3" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (9 samples, 0.81%)</title><rect x="416.4" y="643.0" width="9.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="419.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (7 samples, 0.63%)</title><rect x="418.5" y="627.0" width="7.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="421.5" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (2 samples, 0.18%)</title><rect x="423.7" y="611.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="426.7" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (2 samples, 0.18%)</title><rect x="423.7" y="595.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="426.7" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (2 samples, 0.18%)</title><rect x="423.7" y="579.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="426.7" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="423.7" y="563.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="426.7" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="423.7" y="547.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="426.7" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="423.7" y="531.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="426.7" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="423.7" y="515.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="426.7" y="526.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="423.7" y="499.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="426.7" y="510.0"></text>
</g>
<g>
<title>_new_instance_Java (1 samples, 0.09%)</title><rect x="424.8" y="563.0" width="1.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="427.8" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (59 samples, 5.28%)</title><rect x="425.8" y="643.0" width="62.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="428.8" y="654.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (18 samples, 1.61%)</title><rect x="430.1" y="627.0" width="19.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="433.1" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (9 samples, 0.81%)</title><rect x="431.1" y="611.0" width="9.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="434.1" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (9 samples, 0.81%)</title><rect x="431.1" y="595.0" width="9.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="434.1" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (9 samples, 0.81%)</title><rect x="431.1" y="579.0" width="9.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="434.1" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (5 samples, 0.45%)</title><rect x="440.6" y="611.0" width="5.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="443.6" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.27%)</title><rect x="445.9" y="611.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="448.9" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.27%)</title><rect x="445.9" y="595.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="448.9" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (37 samples, 3.31%)</title><rect x="449.1" y="627.0" width="39.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="452.1" y="638.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (36 samples, 3.22%)</title><rect x="450.1" y="611.0" width="38.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="453.1" y="622.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (35 samples, 3.13%)</title><rect x="451.2" y="595.0" width="36.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="454.2" y="606.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (8 samples, 0.72%)</title><rect x="456.5" y="579.0" width="8.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="459.5" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.36%)</title><rect x="457.5" y="563.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="460.5" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.36%)</title><rect x="457.5" y="547.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="460.5" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.36%)</title><rect x="457.5" y="531.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="460.5" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (4 samples, 0.36%)</title><rect x="457.5" y="515.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="460.5" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.27%)</title><rect x="461.7" y="563.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="464.7" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.27%)</title><rect x="461.7" y="547.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="464.7" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.18%)</title><rect x="462.8" y="531.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="465.8" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (6 samples, 0.54%)</title><rect x="464.9" y="579.0" width="6.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="467.9" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (6 samples, 0.54%)</title><rect x="464.9" y="563.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="467.9" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.54%)</title><rect x="464.9" y="547.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="467.9" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.54%)</title><rect x="464.9" y="531.0" width="6.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="467.9" y="542.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (6 samples, 0.54%)</title><rect x="464.9" y="515.0" width="6.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="467.9" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (10 samples, 0.89%)</title><rect x="471.2" y="579.0" width="10.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="474.2" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (10 samples, 0.89%)</title><rect x="471.2" y="563.0" width="10.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="474.2" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (10 samples, 0.89%)</title><rect x="471.2" y="547.0" width="10.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="474.2" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (10 samples, 0.89%)</title><rect x="471.2" y="531.0" width="10.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="474.2" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.18%)</title><rect x="473.3" y="515.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="476.3" y="526.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (6 samples, 0.54%)</title><rect x="475.5" y="515.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="478.5" y="526.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (6 samples, 0.54%)</title><rect x="475.5" y="499.0" width="6.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="478.5" y="510.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (6 samples, 0.54%)</title><rect x="475.5" y="483.0" width="6.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="478.5" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (5 samples, 0.45%)</title><rect x="481.8" y="579.0" width="5.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="484.8" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.45%)</title><rect x="481.8" y="563.0" width="5.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="484.8" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.45%)</title><rect x="481.8" y="547.0" width="5.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="484.8" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.09%)</title><rect x="487.1" y="579.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="490.1" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.09%)</title><rect x="487.1" y="563.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="490.1" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (14 samples, 1.25%)</title><rect x="488.1" y="659.0" width="14.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="491.1" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (14 samples, 1.25%)</title><rect x="488.1" y="643.0" width="14.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="491.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (14 samples, 1.25%)</title><rect x="488.1" y="627.0" width="14.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="491.1" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.18%)</title><rect x="488.1" y="611.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="491.1" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBindings.isEmpty (3 samples, 0.27%)</title><rect x="490.2" y="611.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="493.2" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._findWellKnownSimple (3 samples, 0.27%)</title><rect x="493.4" y="611.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="496.4" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (6 samples, 0.54%)</title><rect x="496.6" y="611.0" width="6.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="499.6" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.54%)</title><rect x="496.6" y="595.0" width="6.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="499.6" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (301 samples, 26.92%)</title><rect x="502.9" y="755.0" width="317.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="505.9" y="766.0">com/linecorp/decaton/processor/runtime/inte..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (49 samples, 4.38%)</title><rect x="504.0" y="739.0" width="51.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="507.0" y="750.0">com/l..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (49 samples, 4.38%)</title><rect x="504.0" y="723.0" width="51.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="507.0" y="734.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (44 samples, 3.94%)</title><rect x="508.2" y="707.0" width="46.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="511.2" y="718.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (8 samples, 0.72%)</title><rect x="510.3" y="691.0" width="8.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="513.3" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (8 samples, 0.72%)</title><rect x="510.3" y="675.0" width="8.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="513.3" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (8 samples, 0.72%)</title><rect x="510.3" y="659.0" width="8.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="513.3" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (8 samples, 0.72%)</title><rect x="510.3" y="643.0" width="8.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="513.3" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.36%)</title><rect x="518.7" y="691.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="521.7" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 0.36%)</title><rect x="518.7" y="675.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="521.7" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.36%)</title><rect x="518.7" y="659.0" width="4.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="521.7" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (4 samples, 0.36%)</title><rect x="518.7" y="643.0" width="4.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="521.7" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 0.36%)</title><rect x="518.7" y="627.0" width="4.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="521.7" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (30 samples, 2.68%)</title><rect x="523.0" y="691.0" width="31.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="526.0" y="702.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (30 samples, 2.68%)</title><rect x="523.0" y="675.0" width="31.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="526.0" y="686.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (5 samples, 0.45%)</title><rect x="549.3" y="659.0" width="5.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="552.3" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.09%)</title><rect x="554.6" y="707.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="557.6" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (9 samples, 0.81%)</title><rect x="555.7" y="739.0" width="9.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="558.7" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (9 samples, 0.81%)</title><rect x="555.7" y="723.0" width="9.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="558.7" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="555.7" y="707.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="558.7" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="555.7" y="691.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="558.7" y="702.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (8 samples, 0.72%)</title><rect x="556.7" y="707.0" width="8.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="559.7" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (165 samples, 14.76%)</title><rect x="565.2" y="739.0" width="174.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="568.2" y="750.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (165 samples, 14.76%)</title><rect x="565.2" y="723.0" width="174.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="568.2" y="734.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.18%)</title><rect x="584.2" y="707.0" width="2.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="587.2" y="718.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.18%)</title><rect x="584.2" y="691.0" width="2.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="587.2" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (55 samples, 4.92%)</title><rect x="586.3" y="707.0" width="58.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="589.3" y="718.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (44 samples, 3.94%)</title><rect x="592.6" y="691.0" width="46.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="595.6" y="702.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (43 samples, 3.85%)</title><rect x="593.7" y="675.0" width="45.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="596.7" y="686.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (23 samples, 2.06%)</title><rect x="605.3" y="659.0" width="24.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="608.3" y="670.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (23 samples, 2.06%)</title><rect x="605.3" y="643.0" width="24.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="608.3" y="654.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (23 samples, 2.06%)</title><rect x="605.3" y="627.0" width="24.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="608.3" y="638.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (13 samples, 1.16%)</title><rect x="611.6" y="611.0" width="13.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="614.6" y="622.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="612.7" y="595.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="615.7" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="613.7" y="595.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="616.7" y="606.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.09%)</title><rect x="613.7" y="579.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="616.7" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (4 samples, 0.36%)</title><rect x="614.8" y="595.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="617.8" y="606.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="614.8" y="579.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="617.8" y="590.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.09%)</title><rect x="614.8" y="563.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="617.8" y="574.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.27%)</title><rect x="615.8" y="579.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="618.8" y="590.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (3 samples, 0.27%)</title><rect x="615.8" y="563.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="618.8" y="574.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.09%)</title><rect x="615.8" y="547.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="618.8" y="558.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (2 samples, 0.18%)</title><rect x="616.9" y="547.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="619.9" y="558.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.45%)</title><rect x="619.0" y="595.0" width="5.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="622.0" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.18%)</title><rect x="622.2" y="579.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="625.2" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="622.2" y="563.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="625.2" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="622.2" y="547.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="625.2" y="558.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="622.2" y="531.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="625.2" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.09%)</title><rect x="622.2" y="515.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="625.2" y="526.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.09%)</title><rect x="622.2" y="499.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="625.2" y="510.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.09%)</title><rect x="622.2" y="483.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="625.2" y="494.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="623.2" y="563.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="626.2" y="574.0"></text>
</g>
<g>
<title>nmethod::get_deopt_original_pc(frame const*) (1 samples, 0.09%)</title><rect x="624.3" y="595.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="627.3" y="606.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.36%)</title><rect x="625.3" y="611.0" width="4.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="628.3" y="622.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.36%)</title><rect x="629.6" y="659.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="632.6" y="670.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (5 samples, 0.45%)</title><rect x="633.8" y="659.0" width="5.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="636.8" y="670.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.09%)</title><rect x="639.1" y="691.0" width="1.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="642.1" y="702.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.36%)</title><rect x="640.1" y="691.0" width="4.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="643.1" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.09%)</title><rect x="644.3" y="707.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="647.3" y="718.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (8 samples, 0.72%)</title><rect x="645.4" y="707.0" width="8.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="648.4" y="718.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (2 samples, 0.18%)</title><rect x="645.4" y="691.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="648.4" y="702.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (2 samples, 0.18%)</title><rect x="645.4" y="675.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="648.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.09%)</title><rect x="646.4" y="659.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="649.4" y="670.0"></text>
</g>
<g>
<title>java/lang/Long.toString (6 samples, 0.54%)</title><rect x="647.5" y="691.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="650.5" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="647.5" y="675.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="650.5" y="686.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="647.5" y="659.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="650.5" y="670.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.09%)</title><rect x="647.5" y="643.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="650.5" y="654.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.45%)</title><rect x="648.6" y="675.0" width="5.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="651.6" y="686.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (81 samples, 7.25%)</title><rect x="653.8" y="707.0" width="85.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="656.8" y="718.0">org/slf4j/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (80 samples, 7.16%)</title><rect x="654.9" y="691.0" width="84.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="657.9" y="702.0">ch/qos/log..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.09%)</title><rect x="654.9" y="675.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="657.9" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.09%)</title><rect x="654.9" y="659.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="657.9" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.09%)</title><rect x="654.9" y="643.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="657.9" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.09%)</title><rect x="654.9" y="627.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="657.9" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (79 samples, 7.07%)</title><rect x="655.9" y="675.0" width="83.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="658.9" y="686.0">java/util..</text>
</g>
<g>
<title>java/util/HashMap.put (77 samples, 6.89%)</title><rect x="658.1" y="659.0" width="81.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="661.1" y="670.0">java/util..</text>
</g>
<g>
<title>java/util/HashMap.putVal (46 samples, 4.11%)</title><rect x="690.8" y="643.0" width="48.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="693.8" y="654.0">java..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.27%)</title><rect x="716.1" y="627.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="719.1" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (16 samples, 1.43%)</title><rect x="719.3" y="627.0" width="16.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="722.3" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (4 samples, 0.36%)</title><rect x="731.9" y="611.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="734.9" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="731.9" y="595.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="734.9" y="606.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.09%)</title><rect x="731.9" y="579.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="734.9" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.27%)</title><rect x="733.0" y="595.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="736.0" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (3 samples, 0.27%)</title><rect x="733.0" y="579.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="736.0" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.27%)</title><rect x="733.0" y="563.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="736.0" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="733.0" y="547.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="736.0" y="558.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="733.0" y="531.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="736.0" y="542.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.09%)</title><rect x="733.0" y="515.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="736.0" y="526.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.09%)</title><rect x="733.0" y="499.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="736.0" y="510.0"></text>
</g>
<g>
<title>MasterFreeRegionListMtSafeChecker::check() (1 samples, 0.09%)</title><rect x="733.0" y="483.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="736.0" y="494.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.09%)</title><rect x="734.0" y="547.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="737.0" y="558.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.09%)</title><rect x="735.1" y="547.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="738.1" y="558.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.27%)</title><rect x="736.2" y="627.0" width="3.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="739.2" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (57 samples, 5.10%)</title><rect x="739.3" y="739.0" width="60.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="742.3" y="750.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (55 samples, 4.92%)</title><rect x="741.4" y="723.0" width="58.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="744.4" y="734.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$207/765883025.process (20 samples, 1.79%)</title><rect x="742.5" y="707.0" width="21.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="745.5" y="718.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (20 samples, 1.79%)</title><rect x="742.5" y="691.0" width="21.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="745.5" y="702.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (16 samples, 1.43%)</title><rect x="742.5" y="675.0" width="16.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="745.5" y="686.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.18%)</title><rect x="743.5" y="659.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="746.5" y="670.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.18%)</title><rect x="743.5" y="643.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="746.5" y="654.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.18%)</title><rect x="743.5" y="627.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="746.5" y="638.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.18%)</title><rect x="743.5" y="611.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="746.5" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.18%)</title><rect x="743.5" y="595.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="746.5" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (7 samples, 0.63%)</title><rect x="745.7" y="659.0" width="7.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="748.7" y="670.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.54%)</title><rect x="746.7" y="643.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="749.7" y="654.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.54%)</title><rect x="746.7" y="627.0" width="6.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="749.7" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.54%)</title><rect x="753.0" y="659.0" width="6.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="756.0" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="758.3" y="643.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="761.3" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="758.3" y="627.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="761.3" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (4 samples, 0.36%)</title><rect x="759.4" y="675.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="762.4" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.27%)</title><rect x="760.4" y="659.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="763.4" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.27%)</title><rect x="760.4" y="643.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="763.4" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.27%)</title><rect x="760.4" y="627.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="763.4" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$290/700459589.complete (1 samples, 0.09%)</title><rect x="763.6" y="707.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="766.6" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$78 (1 samples, 0.09%)</title><rect x="763.6" y="691.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="766.6" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="763.6" y="675.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="766.6" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="763.6" y="659.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="766.6" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="763.6" y="643.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="766.6" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="763.6" y="627.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="766.6" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.45%)</title><rect x="764.7" y="707.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="767.7" y="718.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.45%)</title><rect x="764.7" y="691.0" width="5.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="767.7" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.09%)</title><rect x="769.9" y="707.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="772.9" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.09%)</title><rect x="769.9" y="691.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="772.9" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (16 samples, 1.43%)</title><rect x="771.0" y="707.0" width="16.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="774.0" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.36%)</title><rect x="783.6" y="691.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="786.6" y="702.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.27%)</title><rect x="783.6" y="675.0" width="3.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="786.6" y="686.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.09%)</title><rect x="786.8" y="675.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="789.8" y="686.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (7 samples, 0.63%)</title><rect x="787.9" y="707.0" width="7.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="790.9" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (7 samples, 0.63%)</title><rect x="787.9" y="691.0" width="7.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="790.9" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$207/765883025.process (2 samples, 0.18%)</title><rect x="793.1" y="675.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="796.1" y="686.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (4 samples, 0.36%)</title><rect x="795.3" y="707.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="798.3" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.18%)</title><rect x="797.4" y="691.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="800.4" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="798.4" y="675.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="801.4" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.09%)</title><rect x="798.4" y="659.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="801.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (20 samples, 1.79%)</title><rect x="799.5" y="739.0" width="21.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="802.5" y="750.0">j..</text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.63%)</title><rect x="801.6" y="723.0" width="7.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="804.6" y="734.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.63%)</title><rect x="801.6" y="707.0" width="7.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="804.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (11 samples, 0.98%)</title><rect x="809.0" y="723.0" width="11.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="812.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (10 samples, 0.89%)</title><rect x="810.0" y="707.0" width="10.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="813.0" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$292/511121489.accept (10 samples, 0.89%)</title><rect x="810.0" y="691.0" width="10.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="813.0" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$62 (10 samples, 0.89%)</title><rect x="810.0" y="675.0" width="10.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="813.0" y="686.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (10 samples, 0.89%)</title><rect x="810.0" y="659.0" width="10.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="813.0" y="670.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (10 samples, 0.89%)</title><rect x="810.0" y="643.0" width="10.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="813.0" y="654.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.36%)</title><rect x="816.4" y="627.0" width="4.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="819.4" y="638.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.36%)</title><rect x="816.4" y="611.0" width="4.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="819.4" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/789653861.linkToTargetMethod (1 samples, 0.09%)</title><rect x="820.6" y="755.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="823.6" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (1 samples, 0.09%)</title><rect x="820.6" y="739.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="823.6" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$293/1921408997.get$Lambda (1 samples, 0.09%)</title><rect x="820.6" y="723.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="823.6" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="820.6" y="707.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="823.6" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="820.6" y="691.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="823.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (16 samples, 1.43%)</title><rect x="821.6" y="755.0" width="16.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="824.6" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (1 samples, 0.09%)</title><rect x="822.7" y="739.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="825.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (14 samples, 1.25%)</title><rect x="823.8" y="739.0" width="14.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="826.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (13 samples, 1.16%)</title><rect x="824.8" y="723.0" width="13.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="827.8" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$293/1921408997.accept (13 samples, 1.16%)</title><rect x="824.8" y="707.0" width="13.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="827.8" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$61 (13 samples, 1.16%)</title><rect x="824.8" y="691.0" width="13.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="827.8" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$283/974885835.complete (13 samples, 1.16%)</title><rect x="824.8" y="675.0" width="13.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="827.8" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$38 (13 samples, 1.16%)</title><rect x="824.8" y="659.0" width="13.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="827.8" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$282/1030231322.complete (13 samples, 1.16%)</title><rect x="824.8" y="643.0" width="13.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="827.8" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$68 (13 samples, 1.16%)</title><rect x="824.8" y="627.0" width="13.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="827.8" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (13 samples, 1.16%)</title><rect x="824.8" y="611.0" width="13.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="827.8" y="622.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (13 samples, 1.16%)</title><rect x="824.8" y="595.0" width="13.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="827.8" y="606.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (13 samples, 1.16%)</title><rect x="824.8" y="579.0" width="13.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="827.8" y="590.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.09%)</title><rect x="837.5" y="563.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="840.5" y="574.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.09%)</title><rect x="837.5" y="547.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="840.5" y="558.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (9 samples, 0.81%)</title><rect x="838.5" y="755.0" width="9.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="841.5" y="766.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.81%)</title><rect x="838.5" y="739.0" width="9.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="841.5" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (2 samples, 0.18%)</title><rect x="848.0" y="771.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="851.0" y="782.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.18%)</title><rect x="848.0" y="755.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="851.0" y="766.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.18%)</title><rect x="848.0" y="739.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="851.0" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.09%)</title><rect x="848.0" y="723.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="851.0" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="849.1" y="723.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="852.1" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (10 samples, 0.89%)</title><rect x="850.1" y="771.0" width="10.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="853.1" y="782.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.36%)</title><rect x="855.4" y="755.0" width="4.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="858.4" y="766.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.36%)</title><rect x="855.4" y="739.0" width="4.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="858.4" y="750.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="859.6" y="755.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="862.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (12 samples, 1.07%)</title><rect x="860.7" y="819.0" width="12.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="863.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (12 samples, 1.07%)</title><rect x="860.7" y="803.0" width="12.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="863.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (12 samples, 1.07%)</title><rect x="860.7" y="787.0" width="12.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="863.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (12 samples, 1.07%)</title><rect x="860.7" y="771.0" width="12.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="863.7" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (5 samples, 0.45%)</title><rect x="868.1" y="755.0" width="5.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="871.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (238 samples, 21.29%)</title><rect x="873.4" y="819.0" width="251.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="876.4" y="830.0">java/util/concurrent/ThreadPoolEx..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (237 samples, 21.20%)</title><rect x="874.4" y="803.0" width="250.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="877.4" y="814.0">java/util/concurrent/LinkedBlocki..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (182 samples, 16.28%)</title><rect x="900.8" y="787.0" width="192.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="903.8" y="798.0">java/util/concurrent/lock..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (12 samples, 1.07%)</title><rect x="911.4" y="771.0" width="12.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="914.4" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (12 samples, 1.07%)</title><rect x="911.4" y="755.0" width="12.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="914.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (12 samples, 1.07%)</title><rect x="911.4" y="739.0" width="12.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="914.4" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (12 samples, 1.07%)</title><rect x="911.4" y="723.0" width="12.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="914.4" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (160 samples, 14.31%)</title><rect x="924.0" y="771.0" width="168.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="927.0" y="782.0">java/util/concurrent/l..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (160 samples, 14.31%)</title><rect x="924.0" y="755.0" width="168.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="927.0" y="766.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="930.4" y="739.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="933.4" y="750.0"></text>
</g>
<g>
<title>Unsafe_Park (146 samples, 13.06%)</title><rect x="931.4" y="739.0" width="154.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="934.4" y="750.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.18%)</title><rect x="932.5" y="723.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="935.5" y="734.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (22 samples, 1.97%)</title><rect x="934.6" y="723.0" width="23.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="937.6" y="734.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (9 samples, 0.81%)</title><rect x="938.8" y="707.0" width="9.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="941.8" y="718.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.36%)</title><rect x="940.9" y="691.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="943.9" y="702.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.18%)</title><rect x="943.0" y="675.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="946.0" y="686.0"></text>
</g>
<g>
<title>pthread_getspecific (3 samples, 0.27%)</title><rect x="945.1" y="691.0" width="3.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="948.1" y="702.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="948.3" y="707.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="951.3" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (6 samples, 0.54%)</title><rect x="949.4" y="707.0" width="6.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="952.4" y="718.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.18%)</title><rect x="955.7" y="707.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="958.7" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (3 samples, 0.27%)</title><rect x="957.8" y="723.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="960.8" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="961.0" y="723.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="964.0" y="734.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.09%)</title><rect x="962.0" y="723.0" width="1.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="965.0" y="734.0"></text>
</g>
<g>
<title>__lll_lock_wait (3 samples, 0.27%)</title><rect x="963.1" y="723.0" width="3.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="966.1" y="734.0"></text>
</g>
<g>
<title>__lll_unlock_wake (25 samples, 2.24%)</title><rect x="966.2" y="723.0" width="26.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="969.2" y="734.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (63 samples, 5.64%)</title><rect x="992.6" y="723.0" width="66.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="995.6" y="734.0">__pthre..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.36%)</title><rect x="1059.1" y="723.0" width="4.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1062.1" y="734.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.09%)</title><rect x="1063.3" y="723.0" width="1.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1066.3" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (4 samples, 0.36%)</title><rect x="1064.4" y="723.0" width="4.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1067.4" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.18%)</title><rect x="1068.6" y="723.0" width="2.1" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1071.6" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (6 samples, 0.54%)</title><rect x="1070.7" y="723.0" width="6.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1073.7" y="734.0"></text>
</g>
<g>
<title>_init (1 samples, 0.09%)</title><rect x="1077.1" y="723.0" width="1.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1080.1" y="734.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (5 samples, 0.45%)</title><rect x="1078.1" y="723.0" width="5.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1081.1" y="734.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.18%)</title><rect x="1083.4" y="723.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1086.4" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.27%)</title><rect x="1085.5" y="739.0" width="3.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1088.5" y="750.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.09%)</title><rect x="1088.7" y="739.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1091.7" y="750.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.27%)</title><rect x="1089.7" y="739.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1092.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (30 samples, 2.68%)</title><rect x="1092.9" y="787.0" width="31.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1095.9" y="798.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (30 samples, 2.68%)</title><rect x="1092.9" y="771.0" width="31.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1095.9" y="782.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (30 samples, 2.68%)</title><rect x="1092.9" y="755.0" width="31.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1095.9" y="766.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (30 samples, 2.68%)</title><rect x="1092.9" y="739.0" width="31.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1095.9" y="750.0">ja..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.09%)</title><rect x="1124.6" y="867.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1127.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.09%)</title><rect x="1124.6" y="851.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1127.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="1124.6" y="835.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1127.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.09%)</title><rect x="1124.6" y="819.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1127.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.wakeup (1 samples, 0.09%)</title><rect x="1124.6" y="803.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1127.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.wakeup (1 samples, 0.09%)</title><rect x="1124.6" y="787.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1127.6" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.wakeup (1 samples, 0.09%)</title><rect x="1124.6" y="771.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1127.6" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.interrupt (1 samples, 0.09%)</title><rect x="1124.6" y="755.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1127.6" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.interrupt (1 samples, 0.09%)</title><rect x="1124.6" y="739.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1127.6" y="750.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_EPollArrayWrapper_interrupt (1 samples, 0.09%)</title><rect x="1124.6" y="723.0" width="1.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1127.6" y="734.0"></text>
</g>
<g>
<title>start_thread (61 samples, 5.46%)</title><rect x="1125.6" y="867.0" width="64.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1128.6" y="878.0">start_t..</text>
</g>
<g>
<title>java_start(Thread*) (61 samples, 5.46%)</title><rect x="1125.6" y="851.0" width="64.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1128.6" y="862.0">java_st..</text>
</g>
<g>
<title>GangWorker::loop() (25 samples, 2.24%)</title><rect x="1125.6" y="835.0" width="26.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1128.6" y="846.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (5 samples, 0.45%)</title><rect x="1125.6" y="819.0" width="5.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1128.6" y="830.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.45%)</title><rect x="1125.6" y="803.0" width="5.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1128.6" y="814.0"></text>
</g>
<g>
<title>SpinPause (5 samples, 0.45%)</title><rect x="1125.6" y="787.0" width="5.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1128.6" y="798.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (20 samples, 1.79%)</title><rect x="1130.9" y="819.0" width="21.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1133.9" y="830.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 0.54%)</title><rect x="1130.9" y="803.0" width="6.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1133.9" y="814.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 0.18%)</title><rect x="1130.9" y="787.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1133.9" y="798.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.18%)</title><rect x="1133.0" y="787.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1136.0" y="798.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.18%)</title><rect x="1135.1" y="787.0" width="2.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1138.1" y="798.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (7 samples, 0.63%)</title><rect x="1137.2" y="803.0" width="7.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1140.2" y="814.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (2 samples, 0.18%)</title><rect x="1137.2" y="787.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1140.2" y="798.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.09%)</title><rect x="1138.3" y="771.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1141.3" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.09%)</title><rect x="1138.3" y="755.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1141.3" y="766.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.09%)</title><rect x="1139.3" y="787.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.3" y="798.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.09%)</title><rect x="1139.3" y="771.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1142.3" y="782.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.09%)</title><rect x="1139.3" y="755.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1142.3" y="766.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.09%)</title><rect x="1139.3" y="739.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1142.3" y="750.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.36%)</title><rect x="1140.4" y="787.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.4" y="798.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (4 samples, 0.36%)</title><rect x="1140.4" y="771.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1143.4" y="782.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (7 samples, 0.63%)</title><rect x="1144.6" y="803.0" width="7.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1147.6" y="814.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (7 samples, 0.63%)</title><rect x="1144.6" y="787.0" width="7.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1147.6" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (7 samples, 0.63%)</title><rect x="1144.6" y="771.0" width="7.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.6" y="782.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (7 samples, 0.63%)</title><rect x="1144.6" y="755.0" width="7.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1147.6" y="766.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (7 samples, 0.63%)</title><rect x="1144.6" y="739.0" width="7.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1147.6" y="750.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (7 samples, 0.63%)</title><rect x="1144.6" y="723.0" width="7.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1147.6" y="734.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (3 samples, 0.27%)</title><rect x="1148.8" y="707.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1151.8" y="718.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.09%)</title><rect x="1149.9" y="691.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.9" y="702.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.09%)</title><rect x="1149.9" y="675.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.9" y="686.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (1 samples, 0.09%)</title><rect x="1150.9" y="691.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1153.9" y="702.0"></text>
</g>
<g>
<title>JavaThread::run() (33 samples, 2.95%)</title><rect x="1152.0" y="835.0" width="34.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.0" y="846.0">Ja..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (33 samples, 2.95%)</title><rect x="1152.0" y="819.0" width="34.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1155.0" y="830.0">Ja..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (33 samples, 2.95%)</title><rect x="1152.0" y="803.0" width="34.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.0" y="814.0">Co..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (33 samples, 2.95%)</title><rect x="1152.0" y="787.0" width="34.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1155.0" y="798.0">Co..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (32 samples, 2.86%)</title><rect x="1152.0" y="771.0" width="33.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1155.0" y="782.0">C2..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (32 samples, 2.86%)</title><rect x="1152.0" y="755.0" width="33.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.0" y="766.0">Co..</text>
</g>
<g>
<title>Compile::Code_Gen() (17 samples, 1.52%)</title><rect x="1152.0" y="739.0" width="17.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1155.0" y="750.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.09%)</title><rect x="1152.0" y="723.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.0" y="734.0"></text>
</g>
<g>
<title>DebugInformationRecorder::add_non_safepoint(int) (1 samples, 0.09%)</title><rect x="1152.0" y="707.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.0" y="718.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 0.36%)</title><rect x="1153.1" y="723.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1156.1" y="734.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.18%)</title><rect x="1153.1" y="707.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.1" y="718.0"></text>
</g>
<g>
<title>GetAndAddINode::Opcode() const (1 samples, 0.09%)</title><rect x="1154.1" y="691.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1157.1" y="702.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.18%)</title><rect x="1155.2" y="707.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.2" y="718.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.18%)</title><rect x="1155.2" y="691.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.2" y="702.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.09%)</title><rect x="1156.2" y="675.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.2" y="686.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.09%)</title><rect x="1156.2" y="659.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.2" y="670.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.09%)</title><rect x="1156.2" y="643.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.2" y="654.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.09%)</title><rect x="1156.2" y="627.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.2" y="638.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.09%)</title><rect x="1156.2" y="611.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.2" y="622.0"></text>
</g>
<g>
<title>State::_sub_Op_AddP(Node const*) (1 samples, 0.09%)</title><rect x="1156.2" y="595.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.2" y="606.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.09%)</title><rect x="1157.3" y="723.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.3" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.09%)</title><rect x="1157.3" y="707.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.3" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1157.3" y="691.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.3" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (11 samples, 0.98%)</title><rect x="1158.3" y="723.0" width="11.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1161.3" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1158.3" y="707.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.3" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.09%)</title><rect x="1159.4" y="707.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1162.4" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.09%)</title><rect x="1159.4" y="691.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.4" y="702.0"></text>
</g>
<g>
<title>RegMask::find_first_set(int) const (1 samples, 0.09%)</title><rect x="1159.4" y="675.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.4" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.09%)</title><rect x="1160.4" y="707.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.4" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::split_DEF(Node*, Block*, int, unsigned int, Node**, Node**, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.09%)</title><rect x="1160.4" y="691.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1163.4" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.09%)</title><rect x="1160.4" y="675.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1163.4" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 0.27%)</title><rect x="1161.5" y="707.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.5" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.18%)</title><rect x="1162.6" y="691.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.6" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1163.6" y="675.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.6" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.18%)</title><rect x="1164.7" y="707.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.7" y="718.0"></text>
</g>
<g>
<title>MachProjNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1165.7" y="691.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1168.7" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.09%)</title><rect x="1166.8" y="707.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.8" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.09%)</title><rect x="1167.8" y="707.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.8" y="718.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1168.9" y="707.0" width="1.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1171.9" y="718.0"></text>
</g>
<g>
<title>Compile::Optimize() (11 samples, 0.98%)</title><rect x="1169.9" y="739.0" width="11.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1172.9" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (8 samples, 0.72%)</title><rect x="1169.9" y="723.0" width="8.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.9" y="734.0"></text>
</g>
<g>
<title>CProjNode::is_CFG() const (1 samples, 0.09%)</title><rect x="1169.9" y="707.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.9" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.36%)</title><rect x="1171.0" y="707.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.0" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (3 samples, 0.27%)</title><rect x="1172.1" y="691.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.1" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.09%)</title><rect x="1172.1" y="675.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.1" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 0.18%)</title><rect x="1173.1" y="675.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.1" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1174.2" y="659.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.2" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.09%)</title><rect x="1174.2" y="643.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.2" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.18%)</title><rect x="1175.2" y="707.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.2" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1177.3" y="707.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.3" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1177.3" y="691.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.3" y="702.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1177.3" y="675.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.3" y="686.0"></text>
</g>
<g>
<title>TypeNarrowPtr::filter_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1177.3" y="659.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.3" y="670.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1177.3" y="643.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.3" y="654.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1177.3" y="627.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.3" y="638.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.09%)</title><rect x="1177.3" y="611.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.3" y="622.0"></text>
</g>
<g>
<title>TypeNarrowPtr::eq(Type const*) const (1 samples, 0.09%)</title><rect x="1177.3" y="595.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.3" y="606.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.27%)</title><rect x="1178.4" y="723.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.4" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.27%)</title><rect x="1178.4" y="707.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.4" y="718.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1178.4" y="691.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.4" y="702.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.09%)</title><rect x="1178.4" y="675.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.4" y="686.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.09%)</title><rect x="1178.4" y="659.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.4" y="670.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1179.4" y="691.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.4" y="702.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.09%)</title><rect x="1179.4" y="675.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.4" y="686.0"></text>
</g>
<g>
<title>SafePointNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1180.5" y="691.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.5" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.36%)</title><rect x="1181.6" y="739.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.6" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.36%)</title><rect x="1181.6" y="723.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.36%)</title><rect x="1181.6" y="707.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.36%)</title><rect x="1181.6" y="691.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.36%)</title><rect x="1181.6" y="675.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.36%)</title><rect x="1181.6" y="659.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.6" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.36%)</title><rect x="1181.6" y="643.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.6" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.36%)</title><rect x="1181.6" y="627.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.36%)</title><rect x="1181.6" y="611.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.36%)</title><rect x="1181.6" y="595.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.36%)</title><rect x="1181.6" y="579.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.27%)</title><rect x="1181.6" y="563.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.6" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1181.6" y="547.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.6" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1181.6" y="531.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1181.6" y="515.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1181.6" y="499.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1181.6" y="483.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1181.6" y="467.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.6" y="478.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1181.6" y="451.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.6" y="462.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_call(JVMState*, ciMethod*, ciMethod*, bool) (1 samples, 0.09%)</title><rect x="1181.6" y="435.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.6" y="446.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_inline(JVMState*, ciMethod*, ciMethod*, bool&amp;) (1 samples, 0.09%)</title><rect x="1181.6" y="419.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.6" y="430.0"></text>
</g>
<g>
<title>ciMemberName::get_vmtarget() const (1 samples, 0.09%)</title><rect x="1181.6" y="403.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.6" y="414.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1181.6" y="387.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.6" y="398.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1181.6" y="371.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.6" y="382.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1181.6" y="355.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.6" y="366.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.09%)</title><rect x="1181.6" y="339.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.6" y="350.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.09%)</title><rect x="1181.6" y="323.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.09%)</title><rect x="1182.6" y="467.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.6" y="478.0"></text>
</g>
<g>
<title>HaltNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1182.6" y="451.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.6" y="462.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.7" y="547.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.7" y="558.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.7" y="531.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.7" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.7" y="515.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.7" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1183.7" y="499.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1183.7" y="483.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1183.7" y="467.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1183.7" y="451.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1183.7" y="435.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.7" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.7" y="419.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.7" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1183.7" y="403.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1183.7" y="387.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1183.7" y="371.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1183.7" y="355.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1183.7" y="339.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.7" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.7" y="323.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.7" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1183.7" y="307.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1183.7" y="291.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1183.7" y="275.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1183.7" y="259.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.7" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1183.7" y="243.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.7" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.7" y="227.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.7" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1183.7" y="211.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.7" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1183.7" y="195.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.7" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1183.7" y="179.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.7" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1183.7" y="163.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.7" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1183.7" y="147.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.7" y="158.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.7" y="131.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.7" y="142.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1183.7" y="115.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.7" y="126.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1183.7" y="99.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.7" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1183.7" y="83.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.7" y="94.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1183.7" y="67.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.7" y="78.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.09%)</title><rect x="1183.7" y="51.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.7" y="62.0"></text>
</g>
<g>
<title>Parse::sharpen_type_after_if(BoolTest::mask, Node*, Type const*, Node*, Type const*) (1 samples, 0.09%)</title><rect x="1183.7" y="35.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.7" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1184.7" y="563.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1184.7" y="547.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.7" y="558.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.09%)</title><rect x="1184.7" y="531.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.7" y="542.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.09%)</title><rect x="1184.7" y="515.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.7" y="526.0"></text>
</g>
<g>
<title>GraphKit::insert_mem_bar(int, Node*) (1 samples, 0.09%)</title><rect x="1184.7" y="499.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.7" y="510.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1184.7" y="483.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.7" y="494.0"></text>
</g>
<g>
<title>StringEventLog::log(Thread*, char const*, ...) (1 samples, 0.09%)</title><rect x="1185.8" y="771.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.8" y="782.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.27%)</title><rect x="1186.8" y="835.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.8" y="846.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.27%)</title><rect x="1186.8" y="819.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.8" y="830.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (2 samples, 0.18%)</title><rect x="1186.8" y="803.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.8" y="814.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.09%)</title><rect x="1187.9" y="787.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.9" y="798.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.09%)</title><rect x="1187.9" y="771.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.9" y="782.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1187.9" y="755.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.9" y="766.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1187.9" y="739.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.9" y="750.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="1187.9" y="723.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.9" y="734.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.09%)</title><rect x="1187.9" y="707.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.9" y="718.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.09%)</title><rect x="1188.9" y="803.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.9" y="814.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.09%)</title><rect x="1188.9" y="787.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.9" y="798.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.09%)</title><rect x="1188.9" y="771.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.9" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.09%)</title><rect x="1188.9" y="755.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.9" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.09%)</title><rect x="1188.9" y="739.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.9" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::process_discovered_references(unsigned int) (1 samples, 0.09%)</title><rect x="1188.9" y="723.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.9" y="734.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int) (1 samples, 0.09%)</title><rect x="1188.9" y="707.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.9" y="718.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.09%)</title><rect x="1188.9" y="691.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.9" y="702.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.09%)</title><rect x="1188.9" y="675.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.9" y="686.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.09%)</title><rect x="1188.9" y="659.0" width="1.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1191.9" y="670.0"></text>
</g>
</g>
</svg>
