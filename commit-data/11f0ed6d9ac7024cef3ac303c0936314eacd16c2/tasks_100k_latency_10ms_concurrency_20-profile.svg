<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1526" onload="init(evt)" viewBox="0 0 1200 1526" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1509"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1509"> </text>
<g id="frames">
<g>
<title>all (371 samples, 100.00%)</title><rect x="10.0" y="1475.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1486.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (30 samples, 8.09%)</title><rect x="10.0" y="1459.0" width="95.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1470.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.27%)</title><rect x="10.0" y="1443.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (1 samples, 0.27%)</title><rect x="10.0" y="1427.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.27%)</title><rect x="10.0" y="1411.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.27%)</title><rect x="10.0" y="1395.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.27%)</title><rect x="10.0" y="1379.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.27%)</title><rect x="10.0" y="1363.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.27%)</title><rect x="10.0" y="1347.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.27%)</title><rect x="10.0" y="1331.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.27%)</title><rect x="10.0" y="1315.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.27%)</title><rect x="10.0" y="1299.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.27%)</title><rect x="10.0" y="1283.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkSend.&lt;init&gt; (1 samples, 0.27%)</title><rect x="10.0" y="1267.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkSend.sizeBuffer (1 samples, 0.27%)</title><rect x="10.0" y="1251.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.putInt (1 samples, 0.27%)</title><rect x="10.0" y="1235.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>java/nio/Bits.putInt (1 samples, 0.27%)</title><rect x="10.0" y="1219.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>java/nio/Bits.putIntB (1 samples, 0.27%)</title><rect x="10.0" y="1203.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (29 samples, 7.82%)</title><rect x="13.2" y="1443.0" width="92.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.2" y="1454.0">com/linecor..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (11 samples, 2.96%)</title><rect x="13.2" y="1427.0" width="35.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.2" y="1438.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$265/1436504617.accept (11 samples, 2.96%)</title><rect x="13.2" y="1411.0" width="35.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="16.2" y="1422.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (11 samples, 2.96%)</title><rect x="13.2" y="1395.0" width="35.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="16.2" y="1406.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (7 samples, 1.89%)</title><rect x="16.4" y="1379.0" width="22.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.4" y="1390.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (7 samples, 1.89%)</title><rect x="16.4" y="1363.0" width="22.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="19.4" y="1374.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (7 samples, 1.89%)</title><rect x="16.4" y="1347.0" width="22.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.4" y="1358.0">c..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (7 samples, 1.89%)</title><rect x="16.4" y="1331.0" width="22.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="19.4" y="1342.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (7 samples, 1.89%)</title><rect x="16.4" y="1315.0" width="22.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.4" y="1326.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (2 samples, 0.54%)</title><rect x="29.1" y="1299.0" width="6.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="32.1" y="1310.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.27%)</title><rect x="35.4" y="1299.0" width="3.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="38.4" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/TaskRequest.&lt;init&gt; (3 samples, 0.81%)</title><rect x="38.6" y="1379.0" width="9.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="41.6" y="1390.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 0.81%)</title><rect x="38.6" y="1363.0" width="9.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="41.6" y="1374.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.27%)</title><rect x="45.0" y="1347.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="48.0" y="1358.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.27%)</title><rect x="45.0" y="1331.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="48.0" y="1342.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.27%)</title><rect x="45.0" y="1315.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="48.0" y="1326.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.27%)</title><rect x="45.0" y="1299.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="48.0" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (18 samples, 4.85%)</title><rect x="48.2" y="1427.0" width="57.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="51.2" y="1438.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (18 samples, 4.85%)</title><rect x="48.2" y="1411.0" width="57.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="51.2" y="1422.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (6 samples, 1.62%)</title><rect x="48.2" y="1395.0" width="19.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="51.2" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.27%)</title><rect x="51.3" y="1379.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="54.3" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.27%)</title><rect x="51.3" y="1363.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="54.3" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.27%)</title><rect x="51.3" y="1347.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="54.3" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.27%)</title><rect x="51.3" y="1331.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="54.3" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.27%)</title><rect x="51.3" y="1315.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="54.3" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.get (1 samples, 0.27%)</title><rect x="51.3" y="1299.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="54.3" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.getInt (1 samples, 0.27%)</title><rect x="51.3" y="1283.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="54.3" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.get (1 samples, 0.27%)</title><rect x="51.3" y="1267.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="54.3" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.27%)</title><rect x="51.3" y="1251.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="54.3" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.27%)</title><rect x="51.3" y="1235.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="54.3" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.27%)</title><rect x="51.3" y="1219.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="54.3" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (4 samples, 1.08%)</title><rect x="54.5" y="1379.0" width="12.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="57.5" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 1.08%)</title><rect x="54.5" y="1363.0" width="12.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="57.5" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (4 samples, 1.08%)</title><rect x="54.5" y="1347.0" width="12.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="57.5" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 1.08%)</title><rect x="54.5" y="1331.0" width="12.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="57.5" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.54%)</title><rect x="54.5" y="1315.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="57.5" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.27%)</title><rect x="57.7" y="1299.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="60.7" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.27%)</title><rect x="57.7" y="1283.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="60.7" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.27%)</title><rect x="57.7" y="1267.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="60.7" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.27%)</title><rect x="57.7" y="1251.0" width="3.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="60.7" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.27%)</title><rect x="57.7" y="1235.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="60.7" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.27%)</title><rect x="57.7" y="1219.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="60.7" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.27%)</title><rect x="57.7" y="1203.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="60.7" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (2 samples, 0.54%)</title><rect x="60.9" y="1315.0" width="6.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="63.9" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 0.54%)</title><rect x="60.9" y="1299.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="63.9" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (2 samples, 0.54%)</title><rect x="60.9" y="1283.0" width="6.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="63.9" y="1294.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (2 samples, 0.54%)</title><rect x="60.9" y="1267.0" width="6.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="63.9" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (4 samples, 1.08%)</title><rect x="67.3" y="1395.0" width="12.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="70.3" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (4 samples, 1.08%)</title><rect x="67.3" y="1379.0" width="12.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="70.3" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (4 samples, 1.08%)</title><rect x="67.3" y="1363.0" width="12.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="70.3" y="1374.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.27%)</title><rect x="67.3" y="1347.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="70.3" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$233/766664480.accept (1 samples, 0.27%)</title><rect x="67.3" y="1331.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="70.3" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.27%)</title><rect x="67.3" y="1315.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="70.3" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.27%)</title><rect x="67.3" y="1299.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="70.3" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.27%)</title><rect x="67.3" y="1283.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="70.3" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.27%)</title><rect x="67.3" y="1267.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="70.3" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.27%)</title><rect x="67.3" y="1251.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="70.3" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.27%)</title><rect x="67.3" y="1235.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="70.3" y="1246.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.27%)</title><rect x="70.4" y="1347.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="73.4" y="1358.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.27%)</title><rect x="70.4" y="1331.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="73.4" y="1342.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.27%)</title><rect x="70.4" y="1315.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="73.4" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.54%)</title><rect x="73.6" y="1347.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="76.6" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.54%)</title><rect x="73.6" y="1331.0" width="6.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="76.6" y="1342.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.54%)</title><rect x="73.6" y="1315.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="76.6" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.54%)</title><rect x="73.6" y="1299.0" width="6.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="76.6" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.54%)</title><rect x="73.6" y="1283.0" width="6.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="76.6" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.54%)</title><rect x="73.6" y="1267.0" width="6.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="76.6" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.54%)</title><rect x="73.6" y="1251.0" width="6.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="76.6" y="1262.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.27%)</title><rect x="73.6" y="1235.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="76.6" y="1246.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.estimateSize (1 samples, 0.27%)</title><rect x="73.6" y="1219.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="76.6" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.27%)</title><rect x="76.8" y="1235.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="79.8" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.27%)</title><rect x="76.8" y="1219.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="79.8" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.27%)</title><rect x="76.8" y="1203.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="79.8" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.27%)</title><rect x="76.8" y="1187.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="79.8" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$56/501187768.get (1 samples, 0.27%)</title><rect x="76.8" y="1171.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="79.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (6 samples, 1.62%)</title><rect x="80.0" y="1395.0" width="19.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="83.0" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 1.08%)</title><rect x="80.0" y="1379.0" width="12.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="83.0" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (4 samples, 1.08%)</title><rect x="80.0" y="1363.0" width="12.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="83.0" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.54%)</title><rect x="80.0" y="1347.0" width="6.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="83.0" y="1358.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/360190251.linkToTargetMethod (1 samples, 0.27%)</title><rect x="80.0" y="1331.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="83.0" y="1342.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/2000843385.invokeStatic_JJ_L (1 samples, 0.27%)</title><rect x="80.0" y="1315.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="83.0" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$$Lambda$87/1269660451.get$Lambda (1 samples, 0.27%)</title><rect x="80.0" y="1299.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="83.0" y="1310.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandle.invokeBasic (1 samples, 0.27%)</title><rect x="83.2" y="1331.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="86.2" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (2 samples, 0.54%)</title><rect x="86.3" y="1347.0" width="6.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="89.3" y="1358.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (2 samples, 0.54%)</title><rect x="86.3" y="1331.0" width="6.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="89.3" y="1342.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (2 samples, 0.54%)</title><rect x="86.3" y="1315.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="89.3" y="1326.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (2 samples, 0.54%)</title><rect x="86.3" y="1299.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="89.3" y="1310.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.updateSelectedKeys (2 samples, 0.54%)</title><rect x="86.3" y="1283.0" width="6.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="89.3" y="1294.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.27%)</title><rect x="86.3" y="1267.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="89.3" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.27%)</title><rect x="86.3" y="1251.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="89.3" y="1262.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.27%)</title><rect x="89.5" y="1267.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="92.5" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.27%)</title><rect x="89.5" y="1251.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="92.5" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.54%)</title><rect x="92.7" y="1379.0" width="6.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="95.7" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (2 samples, 0.54%)</title><rect x="92.7" y="1363.0" width="6.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="95.7" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.54%)</title><rect x="92.7" y="1347.0" width="6.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="95.7" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.54%)</title><rect x="92.7" y="1331.0" width="6.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="95.7" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.add (1 samples, 0.27%)</title><rect x="92.7" y="1315.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="95.7" y="1326.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.addFirst (1 samples, 0.27%)</title><rect x="92.7" y="1299.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="95.7" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.27%)</title><rect x="95.9" y="1315.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="98.9" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.27%)</title><rect x="95.9" y="1299.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="98.9" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.27%)</title><rect x="95.9" y="1283.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="98.9" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.sizeOf (1 samples, 0.27%)</title><rect x="95.9" y="1267.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="98.9" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.sizeOf (1 samples, 0.27%)</title><rect x="95.9" y="1251.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="98.9" y="1262.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.27%)</title><rect x="95.9" y="1235.0" width="3.2" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="98.9" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.27%)</title><rect x="99.1" y="1395.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="102.1" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.addListener (1 samples, 0.27%)</title><rect x="99.1" y="1379.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="102.1" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.add (1 samples, 0.27%)</title><rect x="99.1" y="1363.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="102.1" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.27%)</title><rect x="102.2" y="1395.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="105.2" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.27%)</title><rect x="102.2" y="1379.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="105.2" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.27%)</title><rect x="102.2" y="1363.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="105.2" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.27%)</title><rect x="102.2" y="1347.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="105.2" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.27%)</title><rect x="102.2" y="1331.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="105.2" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/MetricConfig.quota (1 samples, 0.27%)</title><rect x="102.2" y="1315.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="105.2" y="1326.0"></text>
</g>
<g>
<title>java/lang/Thread.run (231 samples, 62.26%)</title><rect x="105.4" y="1459.0" width="734.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="108.4" y="1470.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (231 samples, 62.26%)</title><rect x="105.4" y="1443.0" width="734.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="108.4" y="1454.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (231 samples, 62.26%)</title><rect x="105.4" y="1427.0" width="734.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="108.4" y="1438.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$285/1485762261.run (214 samples, 57.68%)</title><rect x="121.3" y="1411.0" width="680.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="124.3" y="1422.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$285/1485762261.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$70 (214 samples, 57.68%)</title><rect x="121.3" y="1395.0" width="680.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="124.3" y="1406.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$70</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (214 samples, 57.68%)</title><rect x="121.3" y="1379.0" width="680.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="124.3" y="1390.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (209 samples, 56.33%)</title><rect x="121.3" y="1363.0" width="664.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="124.3" y="1374.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (33 samples, 8.89%)</title><rect x="140.4" y="1347.0" width="105.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="143.4" y="1358.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$42/815674463.extract (33 samples, 8.89%)</title><rect x="140.4" y="1331.0" width="105.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="143.4" y="1342.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (33 samples, 8.89%)</title><rect x="140.4" y="1315.0" width="105.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="143.4" y="1326.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (31 samples, 8.36%)</title><rect x="146.8" y="1299.0" width="98.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="149.8" y="1310.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (31 samples, 8.36%)</title><rect x="146.8" y="1283.0" width="98.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="149.8" y="1294.0">com/linecorp..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (31 samples, 8.36%)</title><rect x="146.8" y="1267.0" width="98.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="149.8" y="1278.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (12 samples, 3.23%)</title><rect x="146.8" y="1251.0" width="38.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="149.8" y="1262.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (7 samples, 1.89%)</title><rect x="162.7" y="1235.0" width="22.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="165.7" y="1246.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (2 samples, 0.54%)</title><rect x="178.6" y="1219.0" width="6.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="181.6" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.54%)</title><rect x="178.6" y="1203.0" width="6.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="181.6" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 0.54%)</title><rect x="178.6" y="1187.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="181.6" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (19 samples, 5.12%)</title><rect x="184.9" y="1251.0" width="60.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="187.9" y="1262.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.54%)</title><rect x="184.9" y="1235.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="187.9" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.54%)</title><rect x="184.9" y="1219.0" width="6.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="187.9" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (5 samples, 1.35%)</title><rect x="191.3" y="1235.0" width="15.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="194.3" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 1.35%)</title><rect x="191.3" y="1219.0" width="15.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="194.3" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (5 samples, 1.35%)</title><rect x="191.3" y="1203.0" width="15.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="194.3" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (4 samples, 1.08%)</title><rect x="194.5" y="1187.0" width="12.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="197.5" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.54%)</title><rect x="200.8" y="1171.0" width="6.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="203.8" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.27%)</title><rect x="207.2" y="1235.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="210.2" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.27%)</title><rect x="207.2" y="1219.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="210.2" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (11 samples, 2.96%)</title><rect x="210.4" y="1235.0" width="35.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="213.4" y="1246.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.08%)</title><rect x="210.4" y="1219.0" width="12.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="213.4" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (4 samples, 1.08%)</title><rect x="210.4" y="1203.0" width="12.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="213.4" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (4 samples, 1.08%)</title><rect x="210.4" y="1187.0" width="12.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="213.4" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (4 samples, 1.08%)</title><rect x="210.4" y="1171.0" width="12.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="213.4" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (4 samples, 1.08%)</title><rect x="210.4" y="1155.0" width="12.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="213.4" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (4 samples, 1.08%)</title><rect x="210.4" y="1139.0" width="12.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="213.4" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (7 samples, 1.89%)</title><rect x="223.1" y="1219.0" width="22.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="226.1" y="1230.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (7 samples, 1.89%)</title><rect x="223.1" y="1203.0" width="22.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="226.1" y="1214.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (7 samples, 1.89%)</title><rect x="223.1" y="1187.0" width="22.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="226.1" y="1198.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.27%)</title><rect x="223.1" y="1171.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="226.1" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.27%)</title><rect x="223.1" y="1155.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="226.1" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.27%)</title><rect x="223.1" y="1139.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="226.1" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.27%)</title><rect x="223.1" y="1123.0" width="3.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="226.1" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.27%)</title><rect x="223.1" y="1107.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="226.1" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.27%)</title><rect x="226.3" y="1171.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="229.3" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.27%)</title><rect x="226.3" y="1155.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="229.3" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.27%)</title><rect x="226.3" y="1139.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="229.3" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.27%)</title><rect x="226.3" y="1123.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="229.3" y="1134.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.27%)</title><rect x="226.3" y="1107.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="229.3" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.27%)</title><rect x="229.5" y="1171.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="232.5" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 0.54%)</title><rect x="232.6" y="1171.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="235.6" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 0.54%)</title><rect x="232.6" y="1155.0" width="6.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="235.6" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 0.54%)</title><rect x="232.6" y="1139.0" width="6.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="235.6" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (2 samples, 0.54%)</title><rect x="232.6" y="1123.0" width="6.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="235.6" y="1134.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 0.54%)</title><rect x="232.6" y="1107.0" width="6.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="235.6" y="1118.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.27%)</title><rect x="235.8" y="1091.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="238.8" y="1102.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor2.newInstance (1 samples, 0.27%)</title><rect x="235.8" y="1075.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="238.8" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.54%)</title><rect x="239.0" y="1171.0" width="6.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="242.0" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.54%)</title><rect x="239.0" y="1155.0" width="6.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="242.0" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.54%)</title><rect x="239.0" y="1139.0" width="6.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="242.0" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (147 samples, 39.62%)</title><rect x="245.4" y="1347.0" width="467.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="248.4" y="1358.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline...</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (24 samples, 6.47%)</title><rect x="248.5" y="1331.0" width="76.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="251.5" y="1342.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (1 samples, 0.27%)</title><rect x="254.9" y="1315.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="257.9" y="1326.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (21 samples, 5.66%)</title><rect x="258.1" y="1315.0" width="66.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="261.1" y="1326.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (16 samples, 4.31%)</title><rect x="274.0" y="1299.0" width="50.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="277.0" y="1310.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 0.81%)</title><rect x="280.4" y="1283.0" width="9.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="283.4" y="1294.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 0.81%)</title><rect x="280.4" y="1267.0" width="9.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="283.4" y="1278.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 0.81%)</title><rect x="280.4" y="1251.0" width="9.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="283.4" y="1262.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 0.81%)</title><rect x="280.4" y="1235.0" width="9.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="283.4" y="1246.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.81%)</title><rect x="289.9" y="1283.0" width="9.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="292.9" y="1294.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.27%)</title><rect x="293.1" y="1267.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="296.1" y="1278.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.27%)</title><rect x="293.1" y="1251.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="296.1" y="1262.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.27%)</title><rect x="296.3" y="1267.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="299.3" y="1278.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (8 samples, 2.16%)</title><rect x="299.4" y="1283.0" width="25.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="302.4" y="1294.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (3 samples, 0.81%)</title><rect x="315.3" y="1267.0" width="9.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="318.3" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (3 samples, 0.81%)</title><rect x="315.3" y="1251.0" width="9.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="318.3" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.27%)</title><rect x="324.9" y="1331.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="327.9" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.27%)</title><rect x="324.9" y="1315.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="327.9" y="1326.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.27%)</title><rect x="324.9" y="1299.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="327.9" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (24 samples, 6.47%)</title><rect x="328.1" y="1331.0" width="76.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="331.1" y="1342.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (24 samples, 6.47%)</title><rect x="328.1" y="1315.0" width="76.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="331.1" y="1326.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (12 samples, 3.23%)</title><rect x="331.2" y="1299.0" width="38.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="334.2" y="1310.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (11 samples, 2.96%)</title><rect x="331.2" y="1283.0" width="35.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="334.2" y="1294.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (7 samples, 1.89%)</title><rect x="337.6" y="1267.0" width="22.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="340.6" y="1278.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (7 samples, 1.89%)</title><rect x="337.6" y="1251.0" width="22.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="340.6" y="1262.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (7 samples, 1.89%)</title><rect x="337.6" y="1235.0" width="22.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="340.6" y="1246.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (7 samples, 1.89%)</title><rect x="337.6" y="1219.0" width="22.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="340.6" y="1230.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.81%)</title><rect x="347.1" y="1203.0" width="9.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="350.1" y="1214.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.27%)</title><rect x="347.1" y="1187.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="350.1" y="1198.0"></text>
</g>
<g>
<title>nmethod::get_deopt_original_pc(frame const*) (1 samples, 0.27%)</title><rect x="347.1" y="1171.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="350.1" y="1182.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.27%)</title><rect x="350.3" y="1187.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="353.3" y="1198.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.27%)</title><rect x="350.3" y="1171.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="353.3" y="1182.0"></text>
</g>
<g>
<title>nmethod::get_deopt_original_pc(frame const*) (1 samples, 0.27%)</title><rect x="353.5" y="1187.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="356.5" y="1198.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.27%)</title><rect x="356.7" y="1203.0" width="3.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="359.7" y="1214.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.54%)</title><rect x="359.9" y="1267.0" width="6.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="362.9" y="1278.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.27%)</title><rect x="366.2" y="1283.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="369.2" y="1294.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.27%)</title><rect x="366.2" y="1267.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="369.2" y="1278.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.27%)</title><rect x="366.2" y="1251.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="369.2" y="1262.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.27%)</title><rect x="366.2" y="1235.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="369.2" y="1246.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.27%)</title><rect x="366.2" y="1219.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="369.2" y="1230.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (3 samples, 0.81%)</title><rect x="369.4" y="1299.0" width="9.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="372.4" y="1310.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (2 samples, 0.54%)</title><rect x="369.4" y="1283.0" width="6.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="372.4" y="1294.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.27%)</title><rect x="369.4" y="1267.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="372.4" y="1278.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.27%)</title><rect x="369.4" y="1251.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="372.4" y="1262.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.27%)</title><rect x="369.4" y="1235.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="372.4" y="1246.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.27%)</title><rect x="372.6" y="1267.0" width="3.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="375.6" y="1278.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.27%)</title><rect x="375.8" y="1283.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="378.8" y="1294.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.27%)</title><rect x="375.8" y="1267.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="378.8" y="1278.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.27%)</title><rect x="378.9" y="1299.0" width="3.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="381.9" y="1310.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (7 samples, 1.89%)</title><rect x="382.1" y="1299.0" width="22.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="385.1" y="1310.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (7 samples, 1.89%)</title><rect x="382.1" y="1283.0" width="22.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="385.1" y="1294.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.27%)</title><rect x="382.1" y="1267.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="385.1" y="1278.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.27%)</title><rect x="382.1" y="1251.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="385.1" y="1262.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.27%)</title><rect x="382.1" y="1235.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="385.1" y="1246.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.27%)</title><rect x="382.1" y="1219.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="385.1" y="1230.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (6 samples, 1.62%)</title><rect x="385.3" y="1267.0" width="19.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="388.3" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap.put (5 samples, 1.35%)</title><rect x="388.5" y="1251.0" width="15.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="391.5" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 1.35%)</title><rect x="388.5" y="1235.0" width="15.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="391.5" y="1246.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.81%)</title><rect x="394.9" y="1219.0" width="9.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="397.9" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (85 samples, 22.91%)</title><rect x="404.4" y="1331.0" width="270.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="407.4" y="1342.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (2 samples, 0.54%)</title><rect x="404.4" y="1315.0" width="6.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="407.4" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (83 samples, 22.37%)</title><rect x="410.8" y="1315.0" width="263.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="413.8" y="1326.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$207/833274017.process (67 samples, 18.06%)</title><rect x="410.8" y="1299.0" width="213.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="413.8" y="1310.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (67 samples, 18.06%)</title><rect x="410.8" y="1283.0" width="213.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="413.8" y="1294.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (67 samples, 18.06%)</title><rect x="410.8" y="1267.0" width="213.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="413.8" y="1278.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.27%)</title><rect x="410.8" y="1251.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="413.8" y="1262.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.27%)</title><rect x="410.8" y="1235.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="413.8" y="1246.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.27%)</title><rect x="410.8" y="1219.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="413.8" y="1230.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.27%)</title><rect x="410.8" y="1203.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="413.8" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (64 samples, 17.25%)</title><rect x="413.9" y="1251.0" width="203.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="416.9" y="1262.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>java/lang/Thread.sleep (64 samples, 17.25%)</title><rect x="413.9" y="1235.0" width="203.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="416.9" y="1246.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (54 samples, 14.56%)</title><rect x="439.4" y="1219.0" width="171.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="442.4" y="1230.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.54%)</title><rect x="458.5" y="1203.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="461.5" y="1214.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.27%)</title><rect x="464.8" y="1203.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="467.8" y="1214.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.54%)</title><rect x="468.0" y="1203.0" width="6.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="471.0" y="1214.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.81%)</title><rect x="474.4" y="1203.0" width="9.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="477.4" y="1214.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.27%)</title><rect x="480.7" y="1187.0" width="3.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="483.7" y="1198.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.54%)</title><rect x="483.9" y="1203.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="486.9" y="1214.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (38 samples, 10.24%)</title><rect x="490.3" y="1203.0" width="120.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="493.3" y="1214.0">os::sleep(Threa..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.27%)</title><rect x="512.5" y="1187.0" width="3.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="515.5" y="1198.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 1.35%)</title><rect x="515.7" y="1187.0" width="15.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="518.7" y="1198.0"></text>
</g>
<g>
<title>__pthread_cond_init (4 samples, 1.08%)</title><rect x="531.6" y="1187.0" width="12.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="534.6" y="1198.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (11 samples, 2.96%)</title><rect x="544.3" y="1187.0" width="35.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="547.3" y="1198.0">__..</text>
</g>
<g>
<title>os::PlatformEvent::park(long) (8 samples, 2.16%)</title><rect x="579.3" y="1187.0" width="25.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="582.3" y="1198.0">o..</text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.27%)</title><rect x="604.8" y="1187.0" width="3.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="607.8" y="1198.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.27%)</title><rect x="608.0" y="1187.0" width="3.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="611.0" y="1198.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.27%)</title><rect x="611.1" y="1219.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="614.1" y="1230.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.27%)</title><rect x="614.3" y="1219.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="617.3" y="1230.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.54%)</title><rect x="617.5" y="1251.0" width="6.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="620.5" y="1262.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.27%)</title><rect x="620.7" y="1235.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="623.7" y="1246.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.27%)</title><rect x="620.7" y="1219.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="623.7" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.27%)</title><rect x="623.9" y="1299.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="626.9" y="1310.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.27%)</title><rect x="623.9" y="1283.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="626.9" y="1294.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.54%)</title><rect x="627.0" y="1299.0" width="6.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="630.0" y="1310.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.54%)</title><rect x="627.0" y="1283.0" width="6.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="630.0" y="1294.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.54%)</title><rect x="627.0" y="1267.0" width="6.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="630.0" y="1278.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (10 samples, 2.70%)</title><rect x="633.4" y="1299.0" width="31.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="636.4" y="1310.0">ja..</text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (10 samples, 2.70%)</title><rect x="633.4" y="1283.0" width="31.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="636.4" y="1294.0">ja..</text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.81%)</title><rect x="665.2" y="1299.0" width="9.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="668.2" y="1310.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.54%)</title><rect x="665.2" y="1283.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="668.2" y="1294.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.27%)</title><rect x="671.6" y="1283.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="674.6" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 3.23%)</title><rect x="674.7" y="1331.0" width="38.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="677.7" y="1342.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (12 samples, 3.23%)</title><rect x="674.7" y="1315.0" width="38.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="677.7" y="1326.0">jav..</text>
</g>
<g>
<title>__clock_gettime (4 samples, 1.08%)</title><rect x="693.8" y="1299.0" width="12.7" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="696.8" y="1310.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.54%)</title><rect x="700.2" y="1283.0" width="6.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="703.2" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.54%)</title><rect x="706.5" y="1299.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="709.5" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$294/4033240.accept (2 samples, 0.54%)</title><rect x="706.5" y="1283.0" width="6.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="709.5" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$62 (2 samples, 0.54%)</title><rect x="706.5" y="1267.0" width="6.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="709.5" y="1278.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (2 samples, 0.54%)</title><rect x="706.5" y="1251.0" width="6.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="709.5" y="1262.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (2 samples, 0.54%)</title><rect x="706.5" y="1235.0" width="6.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="709.5" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (23 samples, 6.20%)</title><rect x="712.9" y="1347.0" width="73.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="715.9" y="1358.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (23 samples, 6.20%)</title><rect x="712.9" y="1331.0" width="73.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="715.9" y="1342.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (18 samples, 4.85%)</title><rect x="728.8" y="1315.0" width="57.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="731.8" y="1326.0">java/u..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$294/4033240.accept (2 samples, 0.54%)</title><rect x="728.8" y="1299.0" width="6.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="731.8" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$62 (2 samples, 0.54%)</title><rect x="728.8" y="1283.0" width="6.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="731.8" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (2 samples, 0.54%)</title><rect x="728.8" y="1267.0" width="6.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="731.8" y="1278.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.54%)</title><rect x="728.8" y="1251.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="731.8" y="1262.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.54%)</title><rect x="728.8" y="1235.0" width="6.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="731.8" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$296/1639930174.accept (16 samples, 4.31%)</title><rect x="735.2" y="1299.0" width="50.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="738.2" y="1310.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$61 (16 samples, 4.31%)</title><rect x="735.2" y="1283.0" width="50.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="738.2" y="1294.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$283/1061163795.complete (16 samples, 4.31%)</title><rect x="735.2" y="1267.0" width="50.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="738.2" y="1278.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$38 (16 samples, 4.31%)</title><rect x="735.2" y="1251.0" width="50.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="738.2" y="1262.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$282/814476270.complete (16 samples, 4.31%)</title><rect x="735.2" y="1235.0" width="50.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="738.2" y="1246.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$68 (16 samples, 4.31%)</title><rect x="735.2" y="1219.0" width="50.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="738.2" y="1230.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (16 samples, 4.31%)</title><rect x="735.2" y="1203.0" width="50.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="738.2" y="1214.0">com/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (16 samples, 4.31%)</title><rect x="735.2" y="1187.0" width="50.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="738.2" y="1198.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (16 samples, 4.31%)</title><rect x="735.2" y="1171.0" width="50.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="738.2" y="1182.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (16 samples, 4.31%)</title><rect x="735.2" y="1155.0" width="50.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="738.2" y="1166.0">ch/qo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (5 samples, 1.35%)</title><rect x="786.1" y="1363.0" width="15.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="789.1" y="1374.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.81%)</title><rect x="792.4" y="1347.0" width="9.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="795.4" y="1358.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.81%)</title><rect x="792.4" y="1331.0" width="9.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="795.4" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (12 samples, 3.23%)</title><rect x="802.0" y="1411.0" width="38.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="805.0" y="1422.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (9 samples, 2.43%)</title><rect x="805.1" y="1395.0" width="28.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="808.1" y="1406.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.27%)</title><rect x="817.9" y="1379.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="820.9" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.27%)</title><rect x="817.9" y="1363.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="820.9" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.27%)</title><rect x="817.9" y="1347.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="820.9" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.27%)</title><rect x="821.1" y="1379.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="824.1" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.27%)</title><rect x="821.1" y="1363.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="824.1" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.27%)</title><rect x="821.1" y="1347.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="824.1" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.81%)</title><rect x="824.2" y="1379.0" width="9.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="827.2" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.81%)</title><rect x="824.2" y="1363.0" width="9.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="827.2" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.81%)</title><rect x="824.2" y="1347.0" width="9.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="827.2" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.81%)</title><rect x="824.2" y="1331.0" width="9.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="827.2" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateOf (1 samples, 0.27%)</title><rect x="833.8" y="1395.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="836.8" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (1 samples, 0.27%)</title><rect x="837.0" y="1395.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="840.0" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.54%)</title><rect x="840.1" y="1459.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="843.1" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (2 samples, 0.54%)</title><rect x="840.1" y="1443.0" width="6.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="843.1" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.27%)</title><rect x="843.3" y="1427.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="846.3" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.27%)</title><rect x="843.3" y="1411.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="846.3" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.27%)</title><rect x="843.3" y="1395.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="846.3" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.27%)</title><rect x="843.3" y="1379.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="846.3" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.27%)</title><rect x="843.3" y="1363.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="846.3" y="1374.0"></text>
</g>
<g>
<title>start_thread (108 samples, 29.11%)</title><rect x="846.5" y="1459.0" width="343.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="849.5" y="1470.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (108 samples, 29.11%)</title><rect x="846.5" y="1443.0" width="343.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="849.5" y="1454.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (9 samples, 2.43%)</title><rect x="846.5" y="1427.0" width="28.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="849.5" y="1438.0">Ga..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (9 samples, 2.43%)</title><rect x="846.5" y="1411.0" width="28.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="849.5" y="1422.0">G1..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (9 samples, 2.43%)</title><rect x="846.5" y="1395.0" width="28.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="849.5" y="1406.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (9 samples, 2.43%)</title><rect x="846.5" y="1379.0" width="28.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="849.5" y="1390.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (6 samples, 1.62%)</title><rect x="852.9" y="1363.0" width="19.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="855.9" y="1374.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.27%)</title><rect x="865.6" y="1347.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="868.6" y="1358.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.27%)</title><rect x="865.6" y="1331.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="868.6" y="1342.0"></text>
</g>
<g>
<title>InstanceKlass::vtable_length() const (1 samples, 0.27%)</title><rect x="868.8" y="1347.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="871.8" y="1358.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::mark_card_deferred(unsigned long) (1 samples, 0.27%)</title><rect x="871.9" y="1363.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="874.9" y="1374.0"></text>
</g>
<g>
<title>JavaThread::run() (98 samples, 26.42%)</title><rect x="875.1" y="1427.0" width="311.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="878.1" y="1438.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (98 samples, 26.42%)</title><rect x="875.1" y="1411.0" width="311.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="878.1" y="1422.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (97 samples, 26.15%)</title><rect x="875.1" y="1395.0" width="308.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="878.1" y="1406.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (97 samples, 26.15%)</title><rect x="875.1" y="1379.0" width="308.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="878.1" y="1390.0">CompileBroker::invoke_compiler_on_method(C..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (94 samples, 25.34%)</title><rect x="875.1" y="1363.0" width="299.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="878.1" y="1374.0">C2Compiler::compile_method(ciEnv*, ciMet..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (94 samples, 25.34%)</title><rect x="875.1" y="1347.0" width="299.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="878.1" y="1358.0">Compile::Compile(ciEnv*, C2Compiler*, ci..</text>
</g>
<g>
<title>Compile::Code_Gen() (54 samples, 14.56%)</title><rect x="875.1" y="1331.0" width="171.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="878.1" y="1342.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (4 samples, 1.08%)</title><rect x="875.1" y="1315.0" width="12.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="878.1" y="1326.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.54%)</title><rect x="875.1" y="1299.0" width="6.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="878.1" y="1310.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.27%)</title><rect x="878.3" y="1283.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="881.3" y="1294.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.27%)</title><rect x="878.3" y="1267.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="881.3" y="1278.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.54%)</title><rect x="881.5" y="1299.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="884.5" y="1310.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.54%)</title><rect x="881.5" y="1283.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="884.5" y="1294.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (2 samples, 0.54%)</title><rect x="881.5" y="1267.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="884.5" y="1278.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.27%)</title><rect x="884.7" y="1251.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="887.7" y="1262.0"></text>
</g>
<g>
<title>PhaseRegAlloc::reg2offset(int) const (1 samples, 0.27%)</title><rect x="884.7" y="1235.0" width="3.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="887.7" y="1246.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.81%)</title><rect x="887.8" y="1315.0" width="9.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="890.8" y="1326.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.54%)</title><rect x="887.8" y="1299.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="890.8" y="1310.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.27%)</title><rect x="891.0" y="1283.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="894.0" y="1294.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.27%)</title><rect x="891.0" y="1267.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="894.0" y="1278.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (1 samples, 0.27%)</title><rect x="894.2" y="1299.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="897.2" y="1310.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.27%)</title><rect x="894.2" y="1283.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="897.2" y="1294.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.27%)</title><rect x="894.2" y="1267.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="897.2" y="1278.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 1.35%)</title><rect x="897.4" y="1315.0" width="15.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="900.4" y="1326.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 1.35%)</title><rect x="897.4" y="1299.0" width="15.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="900.4" y="1310.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 0.81%)</title><rect x="903.7" y="1283.0" width="9.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="906.7" y="1294.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.81%)</title><rect x="913.3" y="1315.0" width="9.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="916.3" y="1326.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.81%)</title><rect x="913.3" y="1299.0" width="9.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="916.3" y="1310.0"></text>
</g>
<g>
<title>Node::is_block_proj() const (1 samples, 0.27%)</title><rect x="913.3" y="1283.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="916.3" y="1294.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.27%)</title><rect x="916.5" y="1283.0" width="3.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="919.5" y="1294.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.27%)</title><rect x="916.5" y="1267.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="919.5" y="1278.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.27%)</title><rect x="919.6" y="1283.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="922.6" y="1294.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (39 samples, 10.51%)</title><rect x="922.8" y="1315.0" width="124.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="925.8" y="1326.0">PhaseChaitin::R..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.27%)</title><rect x="922.8" y="1299.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="925.8" y="1310.0"></text>
</g>
<g>
<title>CallDynamicJavaDirectNode::ideal_Opcode() const (1 samples, 0.27%)</title><rect x="926.0" y="1299.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="929.0" y="1310.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.27%)</title><rect x="929.2" y="1299.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="932.2" y="1310.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.27%)</title><rect x="932.4" y="1299.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="935.4" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.54%)</title><rect x="935.6" y="1299.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="938.6" y="1310.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.27%)</title><rect x="935.6" y="1283.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="938.6" y="1294.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.27%)</title><rect x="938.7" y="1283.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="941.7" y="1294.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.27%)</title><rect x="938.7" y="1267.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="941.7" y="1278.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.54%)</title><rect x="941.9" y="1299.0" width="6.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="944.9" y="1310.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.54%)</title><rect x="941.9" y="1283.0" width="6.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="944.9" y="1294.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.54%)</title><rect x="941.9" y="1267.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="944.9" y="1278.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 1.35%)</title><rect x="948.3" y="1299.0" width="15.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="951.3" y="1310.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.27%)</title><rect x="961.0" y="1283.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="964.0" y="1294.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 2.16%)</title><rect x="964.2" y="1299.0" width="25.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="967.2" y="1310.0">P..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.27%)</title><rect x="976.9" y="1283.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="979.9" y="1294.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.27%)</title><rect x="980.1" y="1283.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="983.1" y="1294.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.27%)</title><rect x="983.3" y="1283.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="986.3" y="1294.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.27%)</title><rect x="983.3" y="1267.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="986.3" y="1278.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.27%)</title><rect x="986.4" y="1283.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="989.4" y="1294.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 1.08%)</title><rect x="989.6" y="1299.0" width="12.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="992.6" y="1310.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.27%)</title><rect x="999.2" y="1283.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1002.2" y="1294.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.27%)</title><rect x="1002.3" y="1299.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1005.3" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.54%)</title><rect x="1005.5" y="1299.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1008.5" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.27%)</title><rect x="1008.7" y="1283.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1011.7" y="1294.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.27%)</title><rect x="1011.9" y="1299.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1014.9" y="1310.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (4 samples, 1.08%)</title><rect x="1015.1" y="1299.0" width="12.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1018.1" y="1310.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.27%)</title><rect x="1015.1" y="1283.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1018.1" y="1294.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (1 samples, 0.27%)</title><rect x="1015.1" y="1267.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1018.1" y="1278.0"></text>
</g>
<g>
<title>PhaseIFG::Union(unsigned int, unsigned int) (1 samples, 0.27%)</title><rect x="1015.1" y="1251.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1018.1" y="1262.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.27%)</title><rect x="1015.1" y="1235.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1018.1" y="1246.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (3 samples, 0.81%)</title><rect x="1018.2" y="1283.0" width="9.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1021.2" y="1294.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (3 samples, 0.81%)</title><rect x="1018.2" y="1267.0" width="9.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1021.2" y="1278.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 0.54%)</title><rect x="1018.2" y="1251.0" width="6.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1021.2" y="1262.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.27%)</title><rect x="1024.6" y="1251.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1027.6" y="1262.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.27%)</title><rect x="1027.8" y="1299.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1030.8" y="1310.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.27%)</title><rect x="1027.8" y="1283.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1030.8" y="1294.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.27%)</title><rect x="1031.0" y="1299.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1034.0" y="1310.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.54%)</title><rect x="1034.2" y="1299.0" width="6.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1037.2" y="1310.0"></text>
</g>
<g>
<title>__memset_sse2 (2 samples, 0.54%)</title><rect x="1040.5" y="1299.0" width="6.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1043.5" y="1310.0"></text>
</g>
<g>
<title>Compile::Optimize() (32 samples, 8.63%)</title><rect x="1046.9" y="1331.0" width="101.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1049.9" y="1342.0">Compile::Opt..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (24 samples, 6.47%)</title><rect x="1046.9" y="1315.0" width="76.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1049.9" y="1326.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.81%)</title><rect x="1046.9" y="1299.0" width="9.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1049.9" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.27%)</title><rect x="1050.1" y="1283.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1053.1" y="1294.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.27%)</title><rect x="1050.1" y="1267.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1053.1" y="1278.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.27%)</title><rect x="1053.2" y="1283.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1056.2" y="1294.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (16 samples, 4.31%)</title><rect x="1056.4" y="1299.0" width="50.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1059.4" y="1310.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (13 samples, 3.50%)</title><rect x="1066.0" y="1283.0" width="41.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1069.0" y="1294.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (12 samples, 3.23%)</title><rect x="1069.1" y="1267.0" width="38.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1072.1" y="1278.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (3 samples, 0.81%)</title><rect x="1088.2" y="1251.0" width="9.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1091.2" y="1262.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (3 samples, 0.81%)</title><rect x="1088.2" y="1235.0" width="9.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1091.2" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.54%)</title><rect x="1091.4" y="1219.0" width="6.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1094.4" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 0.81%)</title><rect x="1097.8" y="1251.0" width="9.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1100.8" y="1262.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (3 samples, 0.81%)</title><rect x="1107.3" y="1299.0" width="9.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1110.3" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.27%)</title><rect x="1116.8" y="1299.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1119.8" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.27%)</title><rect x="1116.8" y="1283.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1119.8" y="1294.0"></text>
</g>
<g>
<title>PhaseIdealLoop::spinup(Node*, Node*, Node*, Node*, Node*, small_cache*) (1 samples, 0.27%)</title><rect x="1116.8" y="1267.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1119.8" y="1278.0"></text>
</g>
<g>
<title>cmpkey(void const*, void const*) (1 samples, 0.27%)</title><rect x="1116.8" y="1251.0" width="3.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1119.8" y="1262.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.27%)</title><rect x="1120.0" y="1299.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1123.0" y="1310.0"></text>
</g>
<g>
<title>MergeMemNode::bottom_type() const (1 samples, 0.27%)</title><rect x="1120.0" y="1283.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1123.0" y="1294.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (7 samples, 1.89%)</title><rect x="1123.2" y="1315.0" width="22.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1126.2" y="1326.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (6 samples, 1.62%)</title><rect x="1123.2" y="1299.0" width="19.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1126.2" y="1310.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.27%)</title><rect x="1123.2" y="1283.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1126.2" y="1294.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.27%)</title><rect x="1123.2" y="1267.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1126.2" y="1278.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.27%)</title><rect x="1123.2" y="1251.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1126.2" y="1262.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.27%)</title><rect x="1123.2" y="1235.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1126.2" y="1246.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.54%)</title><rect x="1126.4" y="1283.0" width="6.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1129.4" y="1294.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.27%)</title><rect x="1126.4" y="1267.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1129.4" y="1278.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.27%)</title><rect x="1126.4" y="1251.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1129.4" y="1262.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.27%)</title><rect x="1126.4" y="1235.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1129.4" y="1246.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.27%)</title><rect x="1129.6" y="1267.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1132.6" y="1278.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.27%)</title><rect x="1129.6" y="1251.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1132.6" y="1262.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.27%)</title><rect x="1129.6" y="1235.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1132.6" y="1246.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.27%)</title><rect x="1129.6" y="1219.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1132.6" y="1230.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.27%)</title><rect x="1129.6" y="1203.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1132.6" y="1214.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.27%)</title><rect x="1129.6" y="1187.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1132.6" y="1198.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.27%)</title><rect x="1129.6" y="1171.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1132.6" y="1182.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.27%)</title><rect x="1132.7" y="1283.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1135.7" y="1294.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.27%)</title><rect x="1135.9" y="1283.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1138.9" y="1294.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.27%)</title><rect x="1139.1" y="1283.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.1" y="1294.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.27%)</title><rect x="1139.1" y="1267.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1142.1" y="1278.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.27%)</title><rect x="1139.1" y="1251.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1142.1" y="1262.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.27%)</title><rect x="1139.1" y="1235.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1142.1" y="1246.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.27%)</title><rect x="1139.1" y="1219.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.1" y="1230.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.27%)</title><rect x="1139.1" y="1203.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.1" y="1214.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.27%)</title><rect x="1139.1" y="1187.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1142.1" y="1198.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.27%)</title><rect x="1139.1" y="1171.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1142.1" y="1182.0"></text>
</g>
<g>
<title>Type::narrow(Type const*) const (1 samples, 0.27%)</title><rect x="1142.3" y="1299.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1145.3" y="1310.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.27%)</title><rect x="1145.5" y="1315.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1148.5" y="1326.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.27%)</title><rect x="1145.5" y="1299.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.5" y="1310.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.27%)</title><rect x="1145.5" y="1283.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1148.5" y="1294.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.27%)</title><rect x="1145.5" y="1267.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1148.5" y="1278.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.27%)</title><rect x="1145.5" y="1251.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1148.5" y="1262.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 2.16%)</title><rect x="1148.7" y="1331.0" width="25.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1151.7" y="1342.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 2.16%)</title><rect x="1148.7" y="1315.0" width="25.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1151.7" y="1326.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 2.16%)</title><rect x="1148.7" y="1299.0" width="25.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.7" y="1310.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 2.16%)</title><rect x="1148.7" y="1283.0" width="25.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.7" y="1294.0">P..</text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.27%)</title><rect x="1148.7" y="1267.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1151.7" y="1278.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.27%)</title><rect x="1148.7" y="1251.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.7" y="1262.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.27%)</title><rect x="1148.7" y="1235.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1151.7" y="1246.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.27%)</title><rect x="1148.7" y="1219.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1151.7" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 1.89%)</title><rect x="1151.8" y="1267.0" width="22.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.8" y="1278.0">P..</text>
</g>
<g>
<title>Parse::do_call() (7 samples, 1.89%)</title><rect x="1151.8" y="1251.0" width="22.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.8" y="1262.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.35%)</title><rect x="1151.8" y="1235.0" width="15.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.8" y="1246.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.35%)</title><rect x="1151.8" y="1219.0" width="15.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1154.8" y="1230.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.35%)</title><rect x="1151.8" y="1203.0" width="15.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.8" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.35%)</title><rect x="1151.8" y="1187.0" width="15.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.8" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.35%)</title><rect x="1151.8" y="1171.0" width="15.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.8" y="1182.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.35%)</title><rect x="1151.8" y="1155.0" width="15.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.8" y="1166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1151.8" y="1139.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.8" y="1150.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1151.8" y="1123.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.8" y="1134.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1151.8" y="1107.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.8" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1151.8" y="1091.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.8" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1151.8" y="1075.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1154.8" y="1086.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1151.8" y="1059.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.8" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1151.8" y="1043.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.8" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1151.8" y="1027.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.8" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1151.8" y="1011.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.8" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1151.8" y="995.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.8" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1151.8" y="979.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.8" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1151.8" y="963.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1154.8" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1151.8" y="947.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.8" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1151.8" y="931.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1154.8" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1151.8" y="915.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1154.8" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1151.8" y="899.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.8" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1151.8" y="883.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1154.8" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1151.8" y="867.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.8" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1151.8" y="851.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1154.8" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1151.8" y="835.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1151.8" y="819.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.8" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1151.8" y="803.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1154.8" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1151.8" y="787.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1151.8" y="771.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1154.8" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1151.8" y="755.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.8" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1151.8" y="739.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1151.8" y="723.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1151.8" y="707.0" width="3.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1154.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1151.8" y="691.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1151.8" y="675.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.8" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1151.8" y="659.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.8" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1151.8" y="643.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1151.8" y="627.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1151.8" y="611.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1154.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1151.8" y="595.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1154.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1151.8" y="579.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1154.8" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1151.8" y="563.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.8" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1151.8" y="547.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1151.8" y="531.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1151.8" y="515.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1151.8" y="499.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1154.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.27%)</title><rect x="1151.8" y="483.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1154.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.27%)</title><rect x="1151.8" y="467.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.8" y="478.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.27%)</title><rect x="1151.8" y="451.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.8" y="462.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.27%)</title><rect x="1151.8" y="435.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.8" y="446.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.27%)</title><rect x="1151.8" y="419.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.8" y="430.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 1.08%)</title><rect x="1155.0" y="1139.0" width="12.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.0" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.08%)</title><rect x="1155.0" y="1123.0" width="12.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.0" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.08%)</title><rect x="1155.0" y="1107.0" width="12.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1158.0" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.08%)</title><rect x="1155.0" y="1091.0" width="12.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1158.0" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.08%)</title><rect x="1155.0" y="1075.0" width="12.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.0" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.08%)</title><rect x="1155.0" y="1059.0" width="12.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.0" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.08%)</title><rect x="1155.0" y="1043.0" width="12.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1158.0" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.08%)</title><rect x="1155.0" y="1027.0" width="12.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.0" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.08%)</title><rect x="1155.0" y="1011.0" width="12.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.0" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.08%)</title><rect x="1155.0" y="995.0" width="12.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.0" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.08%)</title><rect x="1155.0" y="979.0" width="12.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1158.0" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.08%)</title><rect x="1155.0" y="963.0" width="12.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.0" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.08%)</title><rect x="1155.0" y="947.0" width="12.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.0" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.08%)</title><rect x="1155.0" y="931.0" width="12.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.0" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.08%)</title><rect x="1155.0" y="915.0" width="12.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.0" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.08%)</title><rect x="1155.0" y="899.0" width="12.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1158.0" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.08%)</title><rect x="1155.0" y="883.0" width="12.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.0" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.08%)</title><rect x="1155.0" y="867.0" width="12.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.0" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.08%)</title><rect x="1155.0" y="851.0" width="12.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1158.0" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.81%)</title><rect x="1155.0" y="835.0" width="9.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1158.0" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.81%)</title><rect x="1155.0" y="819.0" width="9.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.0" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.81%)</title><rect x="1155.0" y="803.0" width="9.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1158.0" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.81%)</title><rect x="1155.0" y="787.0" width="9.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.0" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.81%)</title><rect x="1155.0" y="771.0" width="9.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1158.0" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.81%)</title><rect x="1155.0" y="755.0" width="9.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.0" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.81%)</title><rect x="1155.0" y="739.0" width="9.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.0" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.81%)</title><rect x="1155.0" y="723.0" width="9.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.81%)</title><rect x="1155.0" y="707.0" width="9.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.81%)</title><rect x="1155.0" y="691.0" width="9.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.81%)</title><rect x="1155.0" y="675.0" width="9.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1158.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.81%)</title><rect x="1155.0" y="659.0" width="9.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.0" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.54%)</title><rect x="1155.0" y="643.0" width="6.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1158.0" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.54%)</title><rect x="1155.0" y="627.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.54%)</title><rect x="1155.0" y="611.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.54%)</title><rect x="1155.0" y="595.0" width="6.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.54%)</title><rect x="1155.0" y="579.0" width="6.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.54%)</title><rect x="1155.0" y="563.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.0" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1155.0" y="547.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.0" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1155.0" y="531.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1158.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1155.0" y="515.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1155.0" y="499.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1155.0" y="483.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1155.0" y="467.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1158.0" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1155.0" y="451.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1158.0" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1155.0" y="435.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1158.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1155.0" y="419.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1155.0" y="403.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1155.0" y="387.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1158.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.27%)</title><rect x="1155.0" y="371.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.27%)</title><rect x="1155.0" y="355.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.0" y="366.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.27%)</title><rect x="1155.0" y="339.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1158.0" y="350.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.27%)</title><rect x="1155.0" y="323.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.0" y="334.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.27%)</title><rect x="1155.0" y="307.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1158.0" y="318.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.27%)</title><rect x="1155.0" y="291.0" width="3.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1158.0" y="302.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.27%)</title><rect x="1155.0" y="275.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.0" y="286.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.27%)</title><rect x="1155.0" y="259.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.0" y="270.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.27%)</title><rect x="1155.0" y="243.0" width="3.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1158.0" y="254.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1158.2" y="547.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.2" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1158.2" y="531.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.2" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1158.2" y="515.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1158.2" y="499.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1158.2" y="483.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1158.2" y="467.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1158.2" y="451.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1161.2" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1158.2" y="435.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.2" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1158.2" y="419.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1158.2" y="403.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1158.2" y="387.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1158.2" y="371.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1158.2" y="355.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1161.2" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1158.2" y="339.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.2" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1158.2" y="323.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1158.2" y="307.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1161.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1158.2" y="291.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.2" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1158.2" y="275.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1161.2" y="286.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.27%)</title><rect x="1158.2" y="259.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1161.2" y="270.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.27%)</title><rect x="1158.2" y="243.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1161.2" y="254.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.27%)</title><rect x="1158.2" y="227.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.2" y="238.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.27%)</title><rect x="1158.2" y="211.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.2" y="222.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.27%)</title><rect x="1158.2" y="195.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.2" y="206.0"></text>
</g>
<g>
<title>CatchProjNode::hash() const (1 samples, 0.27%)</title><rect x="1158.2" y="179.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.2" y="190.0"></text>
</g>
<g>
<title>Node::hash() const (1 samples, 0.27%)</title><rect x="1158.2" y="163.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.2" y="174.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1161.4" y="643.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.4" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1161.4" y="627.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.4" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1161.4" y="611.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1161.4" y="595.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.4" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1161.4" y="579.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.4" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1161.4" y="563.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1161.4" y="547.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.4" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1161.4" y="531.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.4" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1161.4" y="515.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1161.4" y="499.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1161.4" y="483.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1161.4" y="467.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1161.4" y="451.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.4" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1161.4" y="435.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.4" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1161.4" y="419.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1161.4" y="403.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1161.4" y="387.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1161.4" y="371.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1161.4" y="355.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.4" y="366.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1161.4" y="339.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.4" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1161.4" y="323.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.4" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1161.4" y="307.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1161.4" y="291.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1161.4" y="275.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.4" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1161.4" y="259.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.4" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1161.4" y="243.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.4" y="254.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.27%)</title><rect x="1161.4" y="227.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.4" y="238.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.27%)</title><rect x="1161.4" y="211.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.4" y="222.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.27%)</title><rect x="1161.4" y="195.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.4" y="206.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.27%)</title><rect x="1161.4" y="179.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.4" y="190.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.27%)</title><rect x="1161.4" y="163.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.4" y="174.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.27%)</title><rect x="1161.4" y="147.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.4" y="158.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.27%)</title><rect x="1161.4" y="131.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.4" y="142.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.27%)</title><rect x="1161.4" y="115.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.4" y="126.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.27%)</title><rect x="1161.4" y="99.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.4" y="110.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.27%)</title><rect x="1161.4" y="83.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.4" y="94.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.27%)</title><rect x="1161.4" y="67.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.4" y="78.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.27%)</title><rect x="1161.4" y="51.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.4" y="62.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.27%)</title><rect x="1161.4" y="35.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.4" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1164.6" y="835.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.6" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1164.6" y="819.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.6" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1164.6" y="803.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.6" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1164.6" y="787.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.6" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1164.6" y="771.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1164.6" y="755.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1164.6" y="739.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.6" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1164.6" y="723.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.6" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1164.6" y="707.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1164.6" y="691.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1164.6" y="675.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1167.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1164.6" y="659.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.27%)</title><rect x="1164.6" y="643.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.27%)</title><rect x="1164.6" y="627.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.6" y="638.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.27%)</title><rect x="1164.6" y="611.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.6" y="622.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.27%)</title><rect x="1164.6" y="595.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.6" y="606.0"></text>
</g>
<g>
<title>GraphKit::g1_mark_card(IdealKit&amp;, Node*, Node*, unsigned int, Node*, Node*, Node*, TypeFunc const*) (1 samples, 0.27%)</title><rect x="1164.6" y="579.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.6" y="590.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.27%)</title><rect x="1164.6" y="563.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.6" y="574.0"></text>
</g>
<g>
<title>AddPNode::Ideal(PhaseGVN*, bool) (1 samples, 0.27%)</title><rect x="1164.6" y="547.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.6" y="558.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.27%)</title><rect x="1164.6" y="531.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.6" y="542.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.27%)</title><rect x="1164.6" y="515.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.6" y="526.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.54%)</title><rect x="1167.7" y="1235.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.7" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.54%)</title><rect x="1167.7" y="1219.0" width="6.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.7" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.54%)</title><rect x="1167.7" y="1203.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.7" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.54%)</title><rect x="1167.7" y="1187.0" width="6.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1170.7" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.54%)</title><rect x="1167.7" y="1171.0" width="6.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.7" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.54%)</title><rect x="1167.7" y="1155.0" width="6.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.7" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.54%)</title><rect x="1167.7" y="1139.0" width="6.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.7" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.54%)</title><rect x="1167.7" y="1123.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.7" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.54%)</title><rect x="1167.7" y="1107.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.7" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.54%)</title><rect x="1167.7" y="1091.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.7" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.54%)</title><rect x="1167.7" y="1075.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.7" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.54%)</title><rect x="1167.7" y="1059.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.7" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1167.7" y="1043.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.7" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1167.7" y="1027.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.7" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1167.7" y="1011.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.7" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1167.7" y="995.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.7" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1167.7" y="979.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.7" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1167.7" y="963.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.7" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1167.7" y="947.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.7" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1167.7" y="931.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.7" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1167.7" y="915.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.7" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1167.7" y="899.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.7" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1167.7" y="883.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.7" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1167.7" y="867.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1167.7" y="851.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.7" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1167.7" y="835.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.7" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1167.7" y="819.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.7" y="830.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.27%)</title><rect x="1167.7" y="803.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.7" y="814.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.27%)</title><rect x="1167.7" y="787.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.7" y="798.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.27%)</title><rect x="1167.7" y="771.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.7" y="782.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.27%)</title><rect x="1167.7" y="755.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.7" y="766.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.27%)</title><rect x="1167.7" y="739.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.27%)</title><rect x="1170.9" y="1043.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.9" y="1054.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.27%)</title><rect x="1170.9" y="1027.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.9" y="1038.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.27%)</title><rect x="1170.9" y="1011.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.9" y="1022.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.27%)</title><rect x="1170.9" y="995.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.9" y="1006.0"></text>
</g>
<g>
<title>LoadNode::bottom_type() const (1 samples, 0.27%)</title><rect x="1170.9" y="979.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.9" y="990.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 0.81%)</title><rect x="1174.1" y="1363.0" width="9.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.1" y="1374.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 0.81%)</title><rect x="1174.1" y="1347.0" width="9.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.1" y="1358.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.81%)</title><rect x="1174.1" y="1331.0" width="9.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.1" y="1342.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.81%)</title><rect x="1174.1" y="1315.0" width="9.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.1" y="1326.0"></text>
</g>
<g>
<title>Compilation::build_hir() (2 samples, 0.54%)</title><rect x="1174.1" y="1299.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.1" y="1310.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (2 samples, 0.54%)</title><rect x="1174.1" y="1283.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.1" y="1294.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (2 samples, 0.54%)</title><rect x="1174.1" y="1267.0" width="6.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.1" y="1278.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (2 samples, 0.54%)</title><rect x="1174.1" y="1251.0" width="6.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.1" y="1262.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.54%)</title><rect x="1174.1" y="1235.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.1" y="1246.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.54%)</title><rect x="1174.1" y="1219.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.1" y="1230.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.27%)</title><rect x="1174.1" y="1203.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.1" y="1214.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.27%)</title><rect x="1174.1" y="1187.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.1" y="1198.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.27%)</title><rect x="1174.1" y="1171.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.1" y="1182.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.27%)</title><rect x="1174.1" y="1155.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.1" y="1166.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.27%)</title><rect x="1174.1" y="1139.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.1" y="1150.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.27%)</title><rect x="1174.1" y="1123.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.1" y="1134.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.27%)</title><rect x="1174.1" y="1107.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.1" y="1118.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.27%)</title><rect x="1174.1" y="1091.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.1" y="1102.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.27%)</title><rect x="1174.1" y="1075.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.1" y="1086.0"></text>
</g>
<g>
<title>SystemDictionary::find_instance_or_array_klass(Symbol*, Handle, Handle, Thread*) (1 samples, 0.27%)</title><rect x="1174.1" y="1059.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.1" y="1070.0"></text>
</g>
<g>
<title>FieldType::get_array_info(Symbol*, FieldArrayInfo&amp;, Thread*) (1 samples, 0.27%)</title><rect x="1174.1" y="1043.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.1" y="1054.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.27%)</title><rect x="1174.1" y="1027.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.1" y="1038.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.27%)</title><rect x="1177.3" y="1203.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.3" y="1214.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.27%)</title><rect x="1177.3" y="1187.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.3" y="1198.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.27%)</title><rect x="1177.3" y="1171.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.3" y="1182.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.27%)</title><rect x="1177.3" y="1155.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.3" y="1166.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.27%)</title><rect x="1177.3" y="1139.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.3" y="1150.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.27%)</title><rect x="1177.3" y="1123.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.3" y="1134.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.27%)</title><rect x="1180.5" y="1299.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.5" y="1310.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.27%)</title><rect x="1180.5" y="1283.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.5" y="1294.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (1 samples, 0.27%)</title><rect x="1180.5" y="1267.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.5" y="1278.0"></text>
</g>
<g>
<title>LIRGenerator::do_Base(Base*) (1 samples, 0.27%)</title><rect x="1180.5" y="1251.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.5" y="1262.0"></text>
</g>
<g>
<title>LIR_OpBranch::LIR_OpBranch(LIR_Condition, BasicType, BlockBegin*) (1 samples, 0.27%)</title><rect x="1180.5" y="1235.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.5" y="1246.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.27%)</title><rect x="1183.6" y="1395.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.6" y="1406.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.27%)</title><rect x="1183.6" y="1379.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.6" y="1390.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.27%)</title><rect x="1183.6" y="1363.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.6" y="1374.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (1 samples, 0.27%)</title><rect x="1183.6" y="1347.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.6" y="1358.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.27%)</title><rect x="1183.6" y="1331.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.6" y="1342.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.27%)</title><rect x="1186.8" y="1427.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.8" y="1438.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.27%)</title><rect x="1186.8" y="1411.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.8" y="1422.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.27%)</title><rect x="1186.8" y="1395.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.8" y="1406.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.27%)</title><rect x="1186.8" y="1379.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.8" y="1390.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.27%)</title><rect x="1186.8" y="1363.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.8" y="1374.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.27%)</title><rect x="1186.8" y="1347.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.8" y="1358.0"></text>
</g>
<g>
<title>G1CollectedHeap::gc_prologue(bool) (1 samples, 0.27%)</title><rect x="1186.8" y="1331.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.8" y="1342.0"></text>
</g>
<g>
<title>CollectedHeap::ensure_parsability(bool) (1 samples, 0.27%)</title><rect x="1186.8" y="1315.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.8" y="1326.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::make_parsable(bool) (1 samples, 0.27%)</title><rect x="1186.8" y="1299.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.8" y="1310.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.27%)</title><rect x="1186.8" y="1283.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.8" y="1294.0"></text>
</g>
</g>
</svg>
