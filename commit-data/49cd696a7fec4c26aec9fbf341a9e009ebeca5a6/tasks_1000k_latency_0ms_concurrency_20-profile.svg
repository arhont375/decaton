<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="934" onload="init(evt)" viewBox="0 0 1200 934" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="917"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="917"> </text>
<g id="frames">
<g>
<title>all (1,139 samples, 100.00%)</title><rect x="10.0" y="883.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="894.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="10.0" y="867.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="10.0" y="851.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>__vsnprintf (1 samples, 0.09%)</title><rect x="10.0" y="835.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>vfprintf (1 samples, 0.09%)</title><rect x="10.0" y="819.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (273 samples, 23.97%)</title><rect x="11.0" y="867.0" width="282.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="14.0" y="878.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (2 samples, 0.18%)</title><rect x="12.1" y="851.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.1" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (1 samples, 0.09%)</title><rect x="12.1" y="835.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.1" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.09%)</title><rect x="12.1" y="819.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.09%)</title><rect x="12.1" y="803.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.1" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.09%)</title><rect x="12.1" y="787.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="12.1" y="771.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.09%)</title><rect x="12.1" y="755.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.09%)</title><rect x="12.1" y="739.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="12.1" y="723.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="12.1" y="707.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.09%)</title><rect x="12.1" y="691.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="15.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.09%)</title><rect x="12.1" y="675.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.09%)</title><rect x="12.1" y="659.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.1" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.sizeOf (1 samples, 0.09%)</title><rect x="12.1" y="643.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.1" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.sizeOf (1 samples, 0.09%)</title><rect x="12.1" y="627.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="15.1" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/CompactArrayOf.sizeOf (1 samples, 0.09%)</title><rect x="12.1" y="611.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="15.1" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.sizeOf (1 samples, 0.09%)</title><rect x="12.1" y="595.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.1" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/CompactArrayOf.sizeOf (1 samples, 0.09%)</title><rect x="12.1" y="579.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="15.1" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.sizeOf (1 samples, 0.09%)</title><rect x="12.1" y="563.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.1" y="574.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.09%)</title><rect x="12.1" y="547.0" width="1.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="15.1" y="558.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="13.1" y="835.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="16.1" y="846.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="13.1" y="819.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="16.1" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (270 samples, 23.71%)</title><rect x="14.1" y="851.0" width="279.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="17.1" y="862.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.09%)</title><rect x="14.1" y="835.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="17.1" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (1 samples, 0.09%)</title><rect x="14.1" y="819.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.1" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (2 samples, 0.18%)</title><rect x="15.2" y="835.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="18.2" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (2 samples, 0.18%)</title><rect x="15.2" y="819.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.2" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="16.2" y="803.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.2" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="16.2" y="787.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.2" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.09%)</title><rect x="17.3" y="835.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.3" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (4 samples, 0.35%)</title><rect x="18.3" y="835.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="21.3" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (4 samples, 0.35%)</title><rect x="18.3" y="819.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.3" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (4 samples, 0.35%)</title><rect x="18.3" y="803.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.3" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$266/1527121251.accept (4 samples, 0.35%)</title><rect x="18.3" y="787.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="21.3" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (4 samples, 0.35%)</title><rect x="18.3" y="771.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.3" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (4 samples, 0.35%)</title><rect x="18.3" y="755.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="21.3" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (4 samples, 0.35%)</title><rect x="18.3" y="739.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="21.3" y="750.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (198 samples, 17.38%)</title><rect x="22.4" y="835.0" width="205.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="25.4" y="846.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$265/996623863.accept (193 samples, 16.94%)</title><rect x="22.4" y="819.0" width="200.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="25.4" y="830.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (193 samples, 16.94%)</title><rect x="22.4" y="803.0" width="200.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="25.4" y="814.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (188 samples, 16.51%)</title><rect x="22.4" y="787.0" width="194.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="25.4" y="798.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (188 samples, 16.51%)</title><rect x="22.4" y="771.0" width="194.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="25.4" y="782.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (188 samples, 16.51%)</title><rect x="22.4" y="755.0" width="194.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="25.4" y="766.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (188 samples, 16.51%)</title><rect x="22.4" y="739.0" width="194.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="25.4" y="750.0">java/util/concurrent/Exec..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (188 samples, 16.51%)</title><rect x="22.4" y="723.0" width="194.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.4" y="734.0">java/util/concurrent/Thre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (150 samples, 13.17%)</title><rect x="61.8" y="707.0" width="155.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="64.8" y="718.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (121 samples, 10.62%)</title><rect x="90.8" y="691.0" width="125.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="93.8" y="702.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (33 samples, 2.90%)</title><rect x="100.1" y="675.0" width="34.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="103.1" y="686.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (33 samples, 2.90%)</title><rect x="100.1" y="659.0" width="34.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="103.1" y="670.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (33 samples, 2.90%)</title><rect x="100.1" y="643.0" width="34.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="103.1" y="654.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (79 samples, 6.94%)</title><rect x="134.3" y="675.0" width="81.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="137.3" y="686.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (79 samples, 6.94%)</title><rect x="134.3" y="659.0" width="81.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="137.3" y="670.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (79 samples, 6.94%)</title><rect x="134.3" y="643.0" width="81.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="137.3" y="654.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (79 samples, 6.94%)</title><rect x="134.3" y="627.0" width="81.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="137.3" y="638.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (76 samples, 6.67%)</title><rect x="137.4" y="611.0" width="78.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="140.4" y="622.0">sun/misc/..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="138.5" y="595.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="141.5" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="139.5" y="595.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="142.5" y="606.0"></text>
</g>
<g>
<title>Unsafe_Unpark (67 samples, 5.88%)</title><rect x="140.5" y="595.0" width="69.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="143.5" y="606.0">Unsafe_..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="141.6" y="579.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="144.6" y="590.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.09%)</title><rect x="142.6" y="579.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="145.6" y="590.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="143.6" y="579.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="146.6" y="590.0"></text>
</g>
<g>
<title>__pthread_cond_signal (37 samples, 3.25%)</title><rect x="144.7" y="579.0" width="38.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="147.7" y="590.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (7 samples, 0.61%)</title><rect x="183.0" y="579.0" width="7.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="186.0" y="590.0"></text>
</g>
<g>
<title>pthread_mutex_lock (19 samples, 1.67%)</title><rect x="190.3" y="579.0" width="19.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="193.3" y="590.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.26%)</title><rect x="209.9" y="595.0" width="3.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="212.9" y="606.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.18%)</title><rect x="213.1" y="595.0" width="2.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="216.1" y="606.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.09%)</title><rect x="215.1" y="595.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="218.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.09%)</title><rect x="216.2" y="691.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="219.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.09%)</title><rect x="216.2" y="675.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="219.2" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="216.2" y="659.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="219.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.09%)</title><rect x="216.2" y="643.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="219.2" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (1 samples, 0.09%)</title><rect x="217.2" y="787.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="220.2" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.09%)</title><rect x="217.2" y="771.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="220.2" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (4 samples, 0.35%)</title><rect x="218.2" y="787.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="221.2" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.35%)</title><rect x="218.2" y="771.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="221.2" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.35%)</title><rect x="218.2" y="755.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="221.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (4 samples, 0.35%)</title><rect x="222.4" y="819.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="225.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (4 samples, 0.35%)</title><rect x="222.4" y="803.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="225.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.35%)</title><rect x="222.4" y="787.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="225.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.35%)</title><rect x="222.4" y="771.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="225.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.09%)</title><rect x="226.5" y="819.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="229.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.09%)</title><rect x="226.5" y="803.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="229.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (64 samples, 5.62%)</title><rect x="227.6" y="835.0" width="66.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="230.6" y="846.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (64 samples, 5.62%)</title><rect x="227.6" y="819.0" width="66.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="230.6" y="830.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquireAndEnsureOpen (2 samples, 0.18%)</title><rect x="228.6" y="803.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="231.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquire (2 samples, 0.18%)</title><rect x="228.6" y="787.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="231.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (38 samples, 3.34%)</title><rect x="230.7" y="803.0" width="39.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="233.7" y="814.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.09%)</title><rect x="230.7" y="787.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="233.7" y="798.0"></text>
</g>
<g>
<title>Runtime1::monitorexit(JavaThread*, BasicObjectLock*) (1 samples, 0.09%)</title><rect x="230.7" y="771.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="233.7" y="782.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="230.7" y="755.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="233.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (37 samples, 3.25%)</title><rect x="231.7" y="787.0" width="38.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="234.7" y="798.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (37 samples, 3.25%)</title><rect x="231.7" y="771.0" width="38.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="234.7" y="782.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (30 samples, 2.63%)</title><rect x="231.7" y="755.0" width="31.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="234.7" y="766.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (30 samples, 2.63%)</title><rect x="231.7" y="739.0" width="31.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="234.7" y="750.0">or..</text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.09%)</title><rect x="231.7" y="723.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="234.7" y="734.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureCapacityInternal (1 samples, 0.09%)</title><rect x="231.7" y="707.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="234.7" y="718.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureExplicitCapacity (1 samples, 0.09%)</title><rect x="231.7" y="691.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="234.7" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.09%)</title><rect x="231.7" y="675.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="234.7" y="686.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.09%)</title><rect x="231.7" y="659.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="234.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (18 samples, 1.58%)</title><rect x="232.7" y="723.0" width="18.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="235.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.09%)</title><rect x="237.9" y="707.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="240.9" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.record (1 samples, 0.09%)</title><rect x="237.9" y="691.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="240.9" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.hasNext (1 samples, 0.09%)</title><rect x="237.9" y="675.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="240.9" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (11 samples, 0.97%)</title><rect x="239.0" y="707.0" width="11.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="242.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (10 samples, 0.88%)</title><rect x="240.0" y="691.0" width="10.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="243.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (10 samples, 0.88%)</title><rect x="240.0" y="675.0" width="10.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="243.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (10 samples, 0.88%)</title><rect x="240.0" y="659.0" width="10.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="243.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (10 samples, 0.88%)</title><rect x="240.0" y="643.0" width="10.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="243.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (10 samples, 0.88%)</title><rect x="240.0" y="627.0" width="10.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="243.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (10 samples, 0.88%)</title><rect x="240.0" y="611.0" width="10.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="243.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.09%)</title><rect x="250.4" y="707.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="253.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.09%)</title><rect x="250.4" y="691.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="253.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.09%)</title><rect x="250.4" y="675.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="253.4" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.09%)</title><rect x="250.4" y="659.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="253.4" y="670.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.09%)</title><rect x="250.4" y="643.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="253.4" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (11 samples, 0.97%)</title><rect x="251.4" y="723.0" width="11.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="254.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (10 samples, 0.88%)</title><rect x="252.4" y="707.0" width="10.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="255.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (4 samples, 0.35%)</title><rect x="252.4" y="691.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="255.4" y="702.0"></text>
</g>
<g>
<title>java/util/Optional.of (4 samples, 0.35%)</title><rect x="252.4" y="675.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="255.4" y="686.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="255.5" y="659.0" width="1.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="258.5" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (6 samples, 0.53%)</title><rect x="256.6" y="691.0" width="6.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="259.6" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (5 samples, 0.44%)</title><rect x="256.6" y="675.0" width="5.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="259.6" y="686.0"></text>
</g>
<g>
<title>java/util/Arrays.asList (1 samples, 0.09%)</title><rect x="261.7" y="675.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="264.7" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="261.7" y="659.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="264.7" y="670.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="261.7" y="643.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="264.7" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="261.7" y="627.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="264.7" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="261.7" y="611.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="264.7" y="622.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="261.7" y="595.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="264.7" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.09%)</title><rect x="261.7" y="579.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="264.7" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (3 samples, 0.26%)</title><rect x="262.8" y="755.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="265.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (3 samples, 0.26%)</title><rect x="262.8" y="739.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="265.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.09%)</title><rect x="262.8" y="723.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="265.8" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.09%)</title><rect x="262.8" y="707.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="265.8" y="718.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="262.8" y="691.0" width="1.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="265.8" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.18%)</title><rect x="263.8" y="723.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="266.8" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.18%)</title><rect x="263.8" y="707.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="266.8" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="264.9" y="691.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="267.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="264.9" y="675.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="267.9" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (2 samples, 0.18%)</title><rect x="265.9" y="755.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="268.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (2 samples, 0.18%)</title><rect x="265.9" y="739.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="268.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.18%)</title><rect x="265.9" y="723.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="268.9" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.18%)</title><rect x="265.9" y="707.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="268.9" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.18%)</title><rect x="265.9" y="691.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="268.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.09%)</title><rect x="265.9" y="675.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="268.9" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="266.9" y="675.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="269.9" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.09%)</title><rect x="266.9" y="659.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="269.9" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Min.update (1 samples, 0.09%)</title><rect x="266.9" y="643.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="269.9" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (2 samples, 0.18%)</title><rect x="268.0" y="755.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="271.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.09%)</title><rect x="269.0" y="739.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="272.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.09%)</title><rect x="269.0" y="723.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="272.0" y="734.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.09%)</title><rect x="269.0" y="707.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="272.0" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="269.0" y="691.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="272.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (9 samples, 0.79%)</title><rect x="270.0" y="803.0" width="9.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="273.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (9 samples, 0.79%)</title><rect x="270.0" y="787.0" width="9.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="273.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (8 samples, 0.70%)</title><rect x="270.0" y="771.0" width="8.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="273.0" y="782.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 0.26%)</title><rect x="270.0" y="755.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="273.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$233/796015806.accept (3 samples, 0.26%)</title><rect x="270.0" y="739.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="273.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (3 samples, 0.26%)</title><rect x="270.0" y="723.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="273.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (2 samples, 0.18%)</title><rect x="270.0" y="707.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="273.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (2 samples, 0.18%)</title><rect x="270.0" y="691.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="273.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (2 samples, 0.18%)</title><rect x="270.0" y="675.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="273.0" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.18%)</title><rect x="270.0" y="659.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="273.0" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.18%)</title><rect x="270.0" y="643.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="273.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.09%)</title><rect x="272.1" y="707.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="275.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.09%)</title><rect x="272.1" y="691.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="275.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.09%)</title><rect x="272.1" y="675.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="275.1" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.characteristics (1 samples, 0.09%)</title><rect x="273.1" y="755.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="276.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.09%)</title><rect x="274.2" y="755.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="277.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.09%)</title><rect x="274.2" y="739.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="277.2" y="750.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.groupingBy (1 samples, 0.09%)</title><rect x="274.2" y="723.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="277.2" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySpliterator.characteristics (1 samples, 0.09%)</title><rect x="274.2" y="707.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="277.2" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (3 samples, 0.26%)</title><rect x="275.2" y="755.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="278.2" y="766.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.09%)</title><rect x="275.2" y="739.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="278.2" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.18%)</title><rect x="276.3" y="739.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="279.3" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.18%)</title><rect x="276.3" y="723.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="279.3" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.18%)</title><rect x="276.3" y="707.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="279.3" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.18%)</title><rect x="276.3" y="691.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="279.3" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.18%)</title><rect x="276.3" y="675.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="279.3" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.18%)</title><rect x="276.3" y="659.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="279.3" y="670.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (2 samples, 0.18%)</title><rect x="276.3" y="643.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="279.3" y="654.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.characteristics (1 samples, 0.09%)</title><rect x="276.3" y="627.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="279.3" y="638.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.estimateSize (1 samples, 0.09%)</title><rect x="277.3" y="627.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="280.3" y="638.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (1 samples, 0.09%)</title><rect x="277.3" y="611.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="280.3" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.09%)</title><rect x="278.3" y="771.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="281.3" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.09%)</title><rect x="278.3" y="755.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="281.3" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="278.3" y="739.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="281.3" y="750.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.09%)</title><rect x="278.3" y="723.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="281.3" y="734.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.09%)</title><rect x="278.3" y="707.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="281.3" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="278.3" y="691.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="281.3" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="278.3" y="675.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="281.3" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.09%)</title><rect x="278.3" y="659.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="281.3" y="670.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.09%)</title><rect x="278.3" y="643.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="281.3" y="654.0"></text>
</g>
<g>
<title>java/util/stream/Sink.begin (1 samples, 0.09%)</title><rect x="278.3" y="627.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="281.3" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.09%)</title><rect x="279.4" y="803.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="282.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (1 samples, 0.09%)</title><rect x="279.4" y="787.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="282.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (8 samples, 0.70%)</title><rect x="280.4" y="803.0" width="8.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="283.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 0.35%)</title><rect x="280.4" y="787.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="283.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleTimedOutRequests (1 samples, 0.09%)</title><rect x="280.4" y="771.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="283.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.nodesWithTimedOutRequests (1 samples, 0.09%)</title><rect x="280.4" y="755.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="283.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.hasExpiredRequest (1 samples, 0.09%)</title><rect x="280.4" y="739.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="283.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.26%)</title><rect x="281.4" y="771.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="284.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (3 samples, 0.26%)</title><rect x="281.4" y="755.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="284.4" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1682288691.linkToTargetMethod (1 samples, 0.09%)</title><rect x="281.4" y="739.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="284.4" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/523248127.invokeStatic_JJ_L (1 samples, 0.09%)</title><rect x="281.4" y="723.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="284.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.18%)</title><rect x="282.5" y="739.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="285.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.18%)</title><rect x="282.5" y="723.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="285.5" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="282.5" y="707.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="285.5" y="718.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="282.5" y="691.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="285.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.09%)</title><rect x="283.5" y="707.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="286.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.09%)</title><rect x="283.5" y="691.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="286.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.09%)</title><rect x="283.5" y="675.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="286.5" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (4 samples, 0.35%)</title><rect x="284.5" y="787.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="287.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (4 samples, 0.35%)</title><rect x="284.5" y="771.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="287.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (4 samples, 0.35%)</title><rect x="284.5" y="755.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="287.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (4 samples, 0.35%)</title><rect x="284.5" y="739.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="287.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (4 samples, 0.35%)</title><rect x="284.5" y="723.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="287.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (4 samples, 0.35%)</title><rect x="284.5" y="707.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="287.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.09%)</title><rect x="284.5" y="691.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="287.5" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList.toArray (1 samples, 0.09%)</title><rect x="284.5" y="675.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="287.5" y="686.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.09%)</title><rect x="284.5" y="659.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="287.5" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (3 samples, 0.26%)</title><rect x="285.6" y="691.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="288.6" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (3 samples, 0.26%)</title><rect x="285.6" y="675.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="288.6" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (3 samples, 0.26%)</title><rect x="285.6" y="659.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="288.6" y="670.0"></text>
</g>
<g>
<title>SharedRuntime::handle_wrong_method_ic_miss(JavaThread*) (1 samples, 0.09%)</title><rect x="285.6" y="643.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="288.6" y="654.0"></text>
</g>
<g>
<title>JvmtiDynamicCodeEventCollector::JvmtiDynamicCodeEventCollector() (1 samples, 0.09%)</title><rect x="285.6" y="627.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="288.6" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.validate (1 samples, 0.09%)</title><rect x="286.6" y="643.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="289.6" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.write (1 samples, 0.09%)</title><rect x="287.6" y="643.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="290.6" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.09%)</title><rect x="287.6" y="627.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="290.6" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.write (1 samples, 0.09%)</title><rect x="287.6" y="611.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="290.6" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.09%)</title><rect x="287.6" y="595.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="290.6" y="606.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.09%)</title><rect x="287.6" y="579.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="290.6" y="590.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.09%)</title><rect x="287.6" y="563.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="290.6" y="574.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (1 samples, 0.09%)</title><rect x="287.6" y="547.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="290.6" y="558.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="287.6" y="531.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="290.6" y="542.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="287.6" y="515.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="290.6" y="526.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="287.6" y="499.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="290.6" y="510.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="287.6" y="483.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="290.6" y="494.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.replaceWith (1 samples, 0.09%)</title><rect x="287.6" y="467.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="290.6" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (4 samples, 0.35%)</title><rect x="288.7" y="803.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="291.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (3 samples, 0.26%)</title><rect x="288.7" y="787.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="291.7" y="798.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.09%)</title><rect x="288.7" y="771.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="291.7" y="782.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="288.7" y="755.0" width="1.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="291.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 0.18%)</title><rect x="289.7" y="771.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="292.7" y="782.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.09%)</title><rect x="289.7" y="755.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="292.7" y="766.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.09%)</title><rect x="289.7" y="739.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="292.7" y="750.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_invocation_event(methodHandle, methodHandle, CompLevel, nmethod*, JavaThread*) (1 samples, 0.09%)</title><rect x="289.7" y="723.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="292.7" y="734.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.09%)</title><rect x="289.7" y="707.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="292.7" y="718.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.09%)</title><rect x="289.7" y="691.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="292.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.09%)</title><rect x="290.8" y="755.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="293.8" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="290.8" y="739.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="293.8" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="290.8" y="723.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="293.8" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="290.8" y="707.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="293.8" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="290.8" y="691.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="293.8" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="290.8" y="675.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="293.8" y="686.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.09%)</title><rect x="290.8" y="659.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="293.8" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.09%)</title><rect x="290.8" y="643.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="293.8" y="654.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.09%)</title><rect x="290.8" y="627.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="293.8" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.09%)</title><rect x="290.8" y="611.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="293.8" y="622.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$182/42849383.get (1 samples, 0.09%)</title><rect x="290.8" y="595.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="293.8" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest$Builder.forConsumer (1 samples, 0.09%)</title><rect x="291.8" y="787.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="294.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest$Builder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="291.8" y="771.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="294.8" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.09%)</title><rect x="292.8" y="803.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="295.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="292.8" y="787.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="295.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="292.8" y="771.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="295.8" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="292.8" y="755.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="295.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.09%)</title><rect x="292.8" y="739.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="295.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="292.8" y="723.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="295.8" y="734.0"></text>
</g>
<g>
<title>java/lang/Thread.run (794 samples, 69.71%)</title><rect x="293.9" y="867.0" width="822.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="296.9" y="878.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (794 samples, 69.71%)</title><rect x="293.9" y="851.0" width="822.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="296.9" y="862.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (794 samples, 69.71%)</title><rect x="293.9" y="835.0" width="822.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="296.9" y="846.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$285/1853231690.run (533 samples, 46.80%)</title><rect x="298.0" y="819.0" width="552.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="301.0" y="830.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$285/18..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$69 (533 samples, 46.80%)</title><rect x="298.0" y="803.0" width="552.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="301.0" y="814.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (533 samples, 46.80%)</title><rect x="298.0" y="787.0" width="552.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="301.0" y="798.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (529 samples, 46.44%)</title><rect x="298.0" y="771.0" width="548.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="301.0" y="782.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThen..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="307.3" y="755.0" width="1.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="310.3" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (185 samples, 16.24%)</title><rect x="308.4" y="755.0" width="191.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="311.4" y="766.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$43/1448247698.extract (185 samples, 16.24%)</title><rect x="308.4" y="739.0" width="191.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="311.4" y="750.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (185 samples, 16.24%)</title><rect x="308.4" y="723.0" width="191.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="311.4" y="734.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (185 samples, 16.24%)</title><rect x="308.4" y="707.0" width="191.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="311.4" y="718.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (185 samples, 16.24%)</title><rect x="308.4" y="691.0" width="191.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="311.4" y="702.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (185 samples, 16.24%)</title><rect x="308.4" y="675.0" width="191.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="311.4" y="686.0">com/fasterxml/jackson/dat..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (62 samples, 5.44%)</title><rect x="308.4" y="659.0" width="64.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="311.4" y="670.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (36 samples, 3.16%)</title><rect x="308.4" y="643.0" width="37.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="311.4" y="654.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (35 samples, 3.07%)</title><rect x="308.4" y="627.0" width="36.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="311.4" y="638.0">com..</text>
</g>
<g>
<title>[vdso] (2 samples, 0.18%)</title><rect x="332.2" y="611.0" width="2.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="335.2" y="622.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.53%)</title><rect x="334.3" y="611.0" width="6.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="337.3" y="622.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.44%)</title><rect x="335.3" y="595.0" width="5.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="338.3" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (2 samples, 0.18%)</title><rect x="340.5" y="611.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="343.5" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.09%)</title><rect x="342.6" y="611.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="345.6" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="342.6" y="595.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="345.6" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="342.6" y="579.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="345.6" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="342.6" y="563.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="345.6" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.09%)</title><rect x="342.6" y="547.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="345.6" y="558.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="343.6" y="611.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="346.6" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.&lt;init&gt; (1 samples, 0.09%)</title><rect x="344.6" y="627.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="347.6" y="638.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.09%)</title><rect x="344.6" y="611.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="347.6" y="622.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (1 samples, 0.09%)</title><rect x="344.6" y="595.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="347.6" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (26 samples, 2.28%)</title><rect x="345.7" y="643.0" width="26.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="348.7" y="654.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.&lt;init&gt; (2 samples, 0.18%)</title><rect x="345.7" y="627.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="348.7" y="638.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.09%)</title><rect x="346.7" y="611.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="349.7" y="622.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (1 samples, 0.09%)</title><rect x="346.7" y="595.0" width="1.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="349.7" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (24 samples, 2.11%)</title><rect x="347.7" y="627.0" width="24.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="350.7" y="638.0">c..</text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="348.8" y="611.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="351.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (7 samples, 0.61%)</title><rect x="349.8" y="611.0" width="7.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="352.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (3 samples, 0.26%)</title><rect x="354.0" y="595.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="357.0" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (10 samples, 0.88%)</title><rect x="357.1" y="611.0" width="10.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="360.1" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="357.1" y="595.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="360.1" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="357.1" y="579.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="360.1" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="357.1" y="563.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="360.1" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="357.1" y="547.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="360.1" y="558.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="357.1" y="531.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="360.1" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="357.1" y="515.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="360.1" y="526.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.09%)</title><rect x="357.1" y="499.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="360.1" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (9 samples, 0.79%)</title><rect x="358.1" y="595.0" width="9.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="361.1" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (9 samples, 0.79%)</title><rect x="358.1" y="579.0" width="9.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="361.1" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (5 samples, 0.44%)</title><rect x="367.4" y="611.0" width="5.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="370.4" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.09%)</title><rect x="371.6" y="595.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="374.6" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="371.6" y="579.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="374.6" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="371.6" y="563.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="374.6" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="371.6" y="547.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="374.6" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="371.6" y="531.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="374.6" y="542.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="371.6" y="515.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="374.6" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.09%)</title><rect x="371.6" y="499.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="374.6" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (108 samples, 9.48%)</title><rect x="372.6" y="659.0" width="111.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="375.6" y="670.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (4 samples, 0.35%)</title><rect x="372.6" y="643.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="375.6" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (4 samples, 0.35%)</title><rect x="372.6" y="627.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="375.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (3 samples, 0.26%)</title><rect x="372.6" y="611.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="375.6" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (3 samples, 0.26%)</title><rect x="372.6" y="595.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="375.6" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (1 samples, 0.09%)</title><rect x="375.7" y="611.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="378.7" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (12 samples, 1.05%)</title><rect x="376.7" y="643.0" width="12.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="379.7" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (12 samples, 1.05%)</title><rect x="376.7" y="627.0" width="12.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="379.7" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.09%)</title><rect x="386.1" y="611.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="389.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (2 samples, 0.18%)</title><rect x="387.1" y="611.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="390.1" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (9 samples, 0.79%)</title><rect x="389.2" y="643.0" width="9.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="392.2" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (7 samples, 0.61%)</title><rect x="390.2" y="627.0" width="7.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="393.2" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (5 samples, 0.44%)</title><rect x="390.2" y="611.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="393.2" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (4 samples, 0.35%)</title><rect x="391.2" y="595.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="394.2" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.18%)</title><rect x="395.4" y="611.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="398.4" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.18%)</title><rect x="395.4" y="595.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="398.4" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.09%)</title><rect x="397.5" y="627.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="400.5" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.18%)</title><rect x="398.5" y="643.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="401.5" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.18%)</title><rect x="398.5" y="627.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="401.5" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (81 samples, 7.11%)</title><rect x="400.6" y="643.0" width="83.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="403.6" y="654.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (2 samples, 0.18%)</title><rect x="400.6" y="627.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="403.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.09%)</title><rect x="401.6" y="611.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="404.6" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (79 samples, 6.94%)</title><rect x="402.6" y="627.0" width="81.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="405.6" y="638.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (27 samples, 2.37%)</title><rect x="402.6" y="611.0" width="28.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="405.6" y="622.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (12 samples, 1.05%)</title><rect x="404.7" y="595.0" width="12.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="407.7" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (12 samples, 1.05%)</title><rect x="404.7" y="579.0" width="12.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="407.7" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (12 samples, 1.05%)</title><rect x="404.7" y="563.0" width="12.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="407.7" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (11 samples, 0.97%)</title><rect x="417.1" y="595.0" width="11.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="420.1" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.18%)</title><rect x="428.5" y="595.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="431.5" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.18%)</title><rect x="428.5" y="579.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="431.5" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.09%)</title><rect x="430.6" y="611.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="433.6" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (51 samples, 4.48%)</title><rect x="431.7" y="611.0" width="52.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="434.7" y="622.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.09%)</title><rect x="431.7" y="595.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="434.7" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (50 samples, 4.39%)</title><rect x="432.7" y="595.0" width="51.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="435.7" y="606.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (50 samples, 4.39%)</title><rect x="432.7" y="579.0" width="51.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="435.7" y="590.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (19 samples, 1.67%)</title><rect x="439.9" y="563.0" width="19.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="442.9" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.26%)</title><rect x="446.2" y="547.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="449.2" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.26%)</title><rect x="446.2" y="531.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="449.2" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.26%)</title><rect x="446.2" y="515.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="449.2" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (3 samples, 0.26%)</title><rect x="446.2" y="499.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="449.2" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.18%)</title><rect x="449.3" y="547.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="452.3" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (4 samples, 0.35%)</title><rect x="451.3" y="547.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="454.3" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (4 samples, 0.35%)</title><rect x="451.3" y="531.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="454.3" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (4 samples, 0.35%)</title><rect x="455.5" y="547.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="458.5" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (12 samples, 1.05%)</title><rect x="459.6" y="563.0" width="12.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="462.6" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (10 samples, 0.88%)</title><rect x="461.7" y="547.0" width="10.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="464.7" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (10 samples, 0.88%)</title><rect x="461.7" y="531.0" width="10.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="464.7" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (10 samples, 0.88%)</title><rect x="461.7" y="515.0" width="10.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="464.7" y="526.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (10 samples, 0.88%)</title><rect x="461.7" y="499.0" width="10.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="464.7" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (6 samples, 0.53%)</title><rect x="472.1" y="563.0" width="6.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="475.1" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (6 samples, 0.53%)</title><rect x="472.1" y="547.0" width="6.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="475.1" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (6 samples, 0.53%)</title><rect x="472.1" y="531.0" width="6.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="475.1" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (6 samples, 0.53%)</title><rect x="472.1" y="515.0" width="6.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="475.1" y="526.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (6 samples, 0.53%)</title><rect x="472.1" y="499.0" width="6.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="475.1" y="510.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (4 samples, 0.35%)</title><rect x="473.1" y="483.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="476.1" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.09%)</title><rect x="475.2" y="467.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="478.2" y="478.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor2.newInstance (1 samples, 0.09%)</title><rect x="476.2" y="467.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="479.2" y="478.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor2.newInstance (1 samples, 0.09%)</title><rect x="477.2" y="483.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="480.2" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (6 samples, 0.53%)</title><rect x="478.3" y="563.0" width="6.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="481.3" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.53%)</title><rect x="478.3" y="547.0" width="6.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="481.3" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.53%)</title><rect x="478.3" y="531.0" width="6.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="481.3" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.09%)</title><rect x="483.5" y="515.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="486.5" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (15 samples, 1.32%)</title><rect x="484.5" y="659.0" width="15.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="487.5" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (15 samples, 1.32%)</title><rect x="484.5" y="643.0" width="15.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="487.5" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (15 samples, 1.32%)</title><rect x="484.5" y="627.0" width="15.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="487.5" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBindings.isEmpty (4 samples, 0.35%)</title><rect x="485.5" y="611.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="488.5" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._findWellKnownSimple (4 samples, 0.35%)</title><rect x="489.7" y="611.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="492.7" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (6 samples, 0.53%)</title><rect x="493.8" y="611.0" width="6.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="496.8" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.53%)</title><rect x="493.8" y="595.0" width="6.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="496.8" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (311 samples, 27.30%)</title><rect x="500.0" y="755.0" width="322.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="503.0" y="766.0">com/linecorp/decaton/processor/runtime/inter..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="501.1" y="739.0" width="1.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="504.1" y="750.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.26%)</title><rect x="502.1" y="739.0" width="3.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="505.1" y="750.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.26%)</title><rect x="502.1" y="723.0" width="3.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="505.1" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (53 samples, 4.65%)</title><rect x="505.2" y="739.0" width="54.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="508.2" y="750.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (2 samples, 0.18%)</title><rect x="505.2" y="723.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="508.2" y="734.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (51 samples, 4.48%)</title><rect x="507.3" y="723.0" width="52.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="510.3" y="734.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (47 samples, 4.13%)</title><rect x="511.4" y="707.0" width="48.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="514.4" y="718.0">ch/q..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.26%)</title><rect x="533.2" y="691.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="536.2" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.26%)</title><rect x="533.2" y="675.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="536.2" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.26%)</title><rect x="533.2" y="659.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="536.2" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.26%)</title><rect x="533.2" y="643.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="536.2" y="654.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (3 samples, 0.26%)</title><rect x="533.2" y="627.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="536.2" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (23 samples, 2.02%)</title><rect x="536.3" y="691.0" width="23.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="539.3" y="702.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (18 samples, 1.58%)</title><rect x="541.5" y="675.0" width="18.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="544.5" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.18%)</title><rect x="541.5" y="659.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="544.5" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (16 samples, 1.40%)</title><rect x="543.5" y="659.0" width="16.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="546.5" y="670.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.09%)</title><rect x="559.1" y="643.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="562.1" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (13 samples, 1.14%)</title><rect x="560.1" y="739.0" width="13.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="563.1" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (12 samples, 1.05%)</title><rect x="561.2" y="723.0" width="12.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="564.2" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="561.2" y="707.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="564.2" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="561.2" y="691.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="564.2" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="561.2" y="675.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="564.2" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="561.2" y="659.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="564.2" y="670.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="561.2" y="643.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="564.2" y="654.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (11 samples, 0.97%)</title><rect x="562.2" y="707.0" width="11.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="565.2" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (151 samples, 13.26%)</title><rect x="573.6" y="739.0" width="156.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="576.6" y="750.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (146 samples, 12.82%)</title><rect x="573.6" y="723.0" width="151.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="576.6" y="734.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (59 samples, 5.18%)</title><rect x="581.9" y="707.0" width="61.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="584.9" y="718.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (30 samples, 2.63%)</title><rect x="598.4" y="691.0" width="31.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="601.4" y="702.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (28 samples, 2.46%)</title><rect x="600.5" y="675.0" width="29.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="603.5" y="686.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (12 samples, 1.05%)</title><rect x="608.8" y="659.0" width="12.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="611.8" y="670.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (12 samples, 1.05%)</title><rect x="608.8" y="643.0" width="12.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="611.8" y="654.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (12 samples, 1.05%)</title><rect x="608.8" y="627.0" width="12.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="611.8" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (12 samples, 1.05%)</title><rect x="608.8" y="611.0" width="12.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="611.8" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (7 samples, 0.61%)</title><rect x="608.8" y="595.0" width="7.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="611.8" y="606.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.09%)</title><rect x="608.8" y="579.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="611.8" y="590.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="609.8" y="579.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="612.8" y="590.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.09%)</title><rect x="609.8" y="563.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="612.8" y="574.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (5 samples, 0.44%)</title><rect x="610.9" y="579.0" width="5.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="613.9" y="590.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.09%)</title><rect x="611.9" y="563.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="614.9" y="574.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (3 samples, 0.26%)</title><rect x="612.9" y="563.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="615.9" y="574.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (3 samples, 0.26%)</title><rect x="612.9" y="547.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="615.9" y="558.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.35%)</title><rect x="616.1" y="595.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="619.1" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.18%)</title><rect x="616.1" y="579.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="619.1" y="590.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (2 samples, 0.18%)</title><rect x="616.1" y="563.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="619.1" y="574.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::myThread() (2 samples, 0.18%)</title><rect x="618.1" y="579.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="621.1" y="590.0"></text>
</g>
<g>
<title>nmethod::get_deopt_original_pc(frame const*) (1 samples, 0.09%)</title><rect x="620.2" y="595.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="623.2" y="606.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (6 samples, 0.53%)</title><rect x="621.2" y="659.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="624.2" y="670.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.09%)</title><rect x="627.5" y="659.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="630.5" y="670.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="628.5" y="659.0" width="1.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="631.5" y="670.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.09%)</title><rect x="629.5" y="691.0" width="1.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="632.5" y="702.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (12 samples, 1.05%)</title><rect x="630.6" y="691.0" width="12.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="633.6" y="702.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (11 samples, 0.97%)</title><rect x="643.0" y="707.0" width="11.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="646.0" y="718.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.09%)</title><rect x="643.0" y="691.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="646.0" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="643.0" y="675.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="646.0" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="643.0" y="659.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="646.0" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="643.0" y="643.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="646.0" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="643.0" y="627.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="646.0" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="643.0" y="611.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="646.0" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="643.0" y="595.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="646.0" y="606.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="643.0" y="579.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="646.0" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.09%)</title><rect x="643.0" y="563.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="646.0" y="574.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.09%)</title><rect x="643.0" y="547.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="646.0" y="558.0"></text>
</g>
<g>
<title>java/lang/Long.toString (10 samples, 0.88%)</title><rect x="644.0" y="691.0" width="10.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="647.0" y="702.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (10 samples, 0.88%)</title><rect x="644.0" y="675.0" width="10.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="647.0" y="686.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (68 samples, 5.97%)</title><rect x="654.4" y="707.0" width="70.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="657.4" y="718.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (68 samples, 5.97%)</title><rect x="654.4" y="691.0" width="70.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="657.4" y="702.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 0.44%)</title><rect x="654.4" y="675.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="657.4" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.44%)</title><rect x="654.4" y="659.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="657.4" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 0.44%)</title><rect x="654.4" y="643.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="657.4" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.44%)</title><rect x="654.4" y="627.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="657.4" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.44%)</title><rect x="659.6" y="675.0" width="5.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="662.6" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (5 samples, 0.44%)</title><rect x="659.6" y="659.0" width="5.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="662.6" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 0.44%)</title><rect x="659.6" y="643.0" width="5.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="662.6" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (5 samples, 0.44%)</title><rect x="659.6" y="627.0" width="5.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="662.6" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 0.35%)</title><rect x="660.6" y="611.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="663.6" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (58 samples, 5.09%)</title><rect x="664.7" y="675.0" width="60.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="667.7" y="686.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.put (54 samples, 4.74%)</title><rect x="668.9" y="659.0" width="55.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="671.9" y="670.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.putVal (27 samples, 2.37%)</title><rect x="696.9" y="643.0" width="27.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="699.9" y="654.0">j..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.26%)</title><rect x="710.3" y="627.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="713.3" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (7 samples, 0.61%)</title><rect x="713.4" y="627.0" width="7.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="716.4" y="638.0"></text>
</g>
<g>
<title>vtable stub (4 samples, 0.35%)</title><rect x="720.7" y="627.0" width="4.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="723.7" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (5 samples, 0.44%)</title><rect x="724.8" y="723.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="727.8" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (5 samples, 0.44%)</title><rect x="724.8" y="707.0" width="5.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="727.8" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.44%)</title><rect x="724.8" y="691.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="727.8" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.44%)</title><rect x="724.8" y="675.0" width="5.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="727.8" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (67 samples, 5.88%)</title><rect x="730.0" y="739.0" width="69.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="733.0" y="750.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$207/132402241.process (1 samples, 0.09%)</title><rect x="730.0" y="723.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="733.0" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (1 samples, 0.09%)</title><rect x="730.0" y="707.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="733.0" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.09%)</title><rect x="730.0" y="691.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="733.0" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="730.0" y="675.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="733.0" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="730.0" y="659.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="733.0" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="730.0" y="643.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="733.0" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.09%)</title><rect x="730.0" y="627.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="733.0" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (6 samples, 0.53%)</title><rect x="731.1" y="723.0" width="6.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="734.1" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (60 samples, 5.27%)</title><rect x="737.3" y="723.0" width="62.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="740.3" y="734.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$207/132402241.process (34 samples, 2.99%)</title><rect x="742.4" y="707.0" width="35.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="745.4" y="718.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (34 samples, 2.99%)</title><rect x="742.4" y="691.0" width="35.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="745.4" y="702.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (28 samples, 2.46%)</title><rect x="748.7" y="675.0" width="29.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="751.7" y="686.0">co..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.09%)</title><rect x="752.8" y="659.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="755.8" y="670.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.09%)</title><rect x="752.8" y="643.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="755.8" y="654.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.09%)</title><rect x="752.8" y="627.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="755.8" y="638.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.09%)</title><rect x="752.8" y="611.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="755.8" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (10 samples, 0.88%)</title><rect x="753.8" y="659.0" width="10.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="756.8" y="670.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="757.0" y="643.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="760.0" y="654.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="757.0" y="627.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="760.0" y="638.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.53%)</title><rect x="758.0" y="643.0" width="6.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="761.0" y="654.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.53%)</title><rect x="758.0" y="627.0" width="6.2" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="761.0" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (13 samples, 1.14%)</title><rect x="764.2" y="659.0" width="13.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="767.2" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$288/1626747894.complete (1 samples, 0.09%)</title><rect x="777.7" y="707.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="780.7" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$72 (1 samples, 0.09%)</title><rect x="777.7" y="691.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="780.7" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="777.7" y="675.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="780.7" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="777.7" y="659.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="780.7" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="777.7" y="643.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="780.7" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="777.7" y="627.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="780.7" y="638.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.09%)</title><rect x="777.7" y="611.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="780.7" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.35%)</title><rect x="778.7" y="707.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="781.7" y="718.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.35%)</title><rect x="778.7" y="691.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="781.7" y="702.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/2081191879.linkToTargetMethod (1 samples, 0.09%)</title><rect x="782.9" y="707.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="785.9" y="718.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/917819120.invokeStatic_LL_L (1 samples, 0.09%)</title><rect x="782.9" y="691.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="785.9" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$288/1626747894.get$Lambda (1 samples, 0.09%)</title><rect x="782.9" y="675.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="785.9" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="782.9" y="659.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="785.9" y="670.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (10 samples, 0.88%)</title><rect x="783.9" y="707.0" width="10.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="786.9" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.53%)</title><rect x="788.0" y="691.0" width="6.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="791.0" y="702.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.26%)</title><rect x="788.0" y="675.0" width="3.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="791.0" y="686.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (3 samples, 0.26%)</title><rect x="791.1" y="675.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="794.1" y="686.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.09%)</title><rect x="794.2" y="707.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="797.2" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.09%)</title><rect x="794.2" y="691.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="797.2" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (4 samples, 0.35%)</title><rect x="795.3" y="707.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="798.3" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.09%)</title><rect x="799.4" y="739.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="802.4" y="750.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.09%)</title><rect x="799.4" y="723.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="802.4" y="734.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.09%)</title><rect x="799.4" y="707.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="802.4" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="799.4" y="691.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="802.4" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="799.4" y="675.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="802.4" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="799.4" y="659.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="802.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (21 samples, 1.84%)</title><rect x="800.5" y="739.0" width="21.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="803.5" y="750.0">j..</text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.35%)</title><rect x="811.9" y="723.0" width="4.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="814.9" y="734.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.35%)</title><rect x="811.9" y="707.0" width="4.1" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="814.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 0.53%)</title><rect x="816.0" y="723.0" width="6.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="819.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 0.53%)</title><rect x="816.0" y="707.0" width="6.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="819.0" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$289/1997506211.accept (6 samples, 0.53%)</title><rect x="816.0" y="691.0" width="6.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="819.0" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$64 (6 samples, 0.53%)</title><rect x="816.0" y="675.0" width="6.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="819.0" y="686.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (6 samples, 0.53%)</title><rect x="816.0" y="659.0" width="6.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="819.0" y="670.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (6 samples, 0.53%)</title><rect x="816.0" y="643.0" width="6.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="819.0" y="654.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="819.1" y="627.0" width="1.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="822.1" y="638.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.09%)</title><rect x="820.1" y="627.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="823.1" y="638.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="820.1" y="611.0" width="1.1" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="823.1" y="622.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="821.2" y="627.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="824.2" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (22 samples, 1.93%)</title><rect x="822.2" y="755.0" width="22.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="825.2" y="766.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (22 samples, 1.93%)</title><rect x="822.2" y="739.0" width="22.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="825.2" y="750.0">j..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.09%)</title><rect x="823.3" y="723.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="826.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (20 samples, 1.76%)</title><rect x="824.3" y="723.0" width="20.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="827.3" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$290/2110828473.accept (20 samples, 1.76%)</title><rect x="824.3" y="707.0" width="20.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="827.3" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$63 (20 samples, 1.76%)</title><rect x="824.3" y="691.0" width="20.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="827.3" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$283/671978873.complete (20 samples, 1.76%)</title><rect x="824.3" y="675.0" width="20.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="827.3" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$73 (20 samples, 1.76%)</title><rect x="824.3" y="659.0" width="20.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="827.3" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$282/454606524.complete (20 samples, 1.76%)</title><rect x="824.3" y="643.0" width="20.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="827.3" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$49 (20 samples, 1.76%)</title><rect x="824.3" y="627.0" width="20.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="827.3" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (20 samples, 1.76%)</title><rect x="824.3" y="611.0" width="20.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="827.3" y="622.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (20 samples, 1.76%)</title><rect x="824.3" y="595.0" width="20.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="827.3" y="606.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (20 samples, 1.76%)</title><rect x="824.3" y="579.0" width="20.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="827.3" y="590.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="845.0" y="755.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="848.0" y="766.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="845.0" y="739.0" width="1.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="848.0" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (4 samples, 0.35%)</title><rect x="846.0" y="771.0" width="4.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="849.0" y="782.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.09%)</title><rect x="849.2" y="755.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="852.2" y="766.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="849.2" y="739.0" width="1.0" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="852.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (5 samples, 0.44%)</title><rect x="850.2" y="819.0" width="5.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="853.2" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.44%)</title><rect x="850.2" y="803.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="853.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.44%)</title><rect x="850.2" y="787.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="853.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.44%)</title><rect x="850.2" y="771.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="853.2" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (1 samples, 0.09%)</title><rect x="854.3" y="755.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="857.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (252 samples, 22.12%)</title><rect x="855.4" y="819.0" width="261.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="858.4" y="830.0">java/util/concurrent/ThreadPoolExec..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (247 samples, 21.69%)</title><rect x="858.5" y="803.0" width="255.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="861.5" y="814.0">java/util/concurrent/LinkedBlockin..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (215 samples, 18.88%)</title><rect x="865.7" y="787.0" width="222.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="868.7" y="798.0">java/util/concurrent/locks/Ab..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.18%)</title><rect x="877.1" y="771.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="880.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.18%)</title><rect x="877.1" y="755.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="880.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (15 samples, 1.32%)</title><rect x="879.2" y="771.0" width="15.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="882.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (14 samples, 1.23%)</title><rect x="894.7" y="771.0" width="14.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="897.7" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (14 samples, 1.23%)</title><rect x="894.7" y="755.0" width="14.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="897.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (14 samples, 1.23%)</title><rect x="894.7" y="739.0" width="14.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="897.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (14 samples, 1.23%)</title><rect x="894.7" y="723.0" width="14.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="897.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (173 samples, 15.19%)</title><rect x="909.2" y="771.0" width="179.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="912.2" y="782.0">java/util/concurrent/lo..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (173 samples, 15.19%)</title><rect x="909.2" y="755.0" width="179.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="912.2" y="766.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.09%)</title><rect x="920.6" y="739.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="923.6" y="750.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.09%)</title><rect x="921.7" y="739.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="924.7" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="922.7" y="739.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="925.7" y="750.0"></text>
</g>
<g>
<title>Unsafe_Park (155 samples, 13.61%)</title><rect x="923.7" y="739.0" width="160.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="926.7" y="750.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.18%)</title><rect x="926.9" y="723.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="929.9" y="734.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (23 samples, 2.02%)</title><rect x="928.9" y="723.0" width="23.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="931.9" y="734.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (4 samples, 0.35%)</title><rect x="942.4" y="707.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="945.4" y="718.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.18%)</title><rect x="943.4" y="691.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="946.4" y="702.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.18%)</title><rect x="943.4" y="675.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="946.4" y="686.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="945.5" y="691.0" width="1.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="948.5" y="702.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="946.5" y="707.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="949.5" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (5 samples, 0.44%)</title><rect x="947.6" y="707.0" width="5.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="950.6" y="718.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.09%)</title><rect x="951.7" y="691.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="954.7" y="702.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.09%)</title><rect x="951.7" y="675.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="954.7" y="686.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.09%)</title><rect x="951.7" y="659.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="954.7" y="670.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (3 samples, 0.26%)</title><rect x="952.8" y="723.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="955.8" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.09%)</title><rect x="955.9" y="723.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="958.9" y="734.0"></text>
</g>
<g>
<title>__lll_lock_wait (7 samples, 0.61%)</title><rect x="956.9" y="723.0" width="7.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="959.9" y="734.0"></text>
</g>
<g>
<title>__lll_unlock_wake (34 samples, 2.99%)</title><rect x="964.2" y="723.0" width="35.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="967.2" y="734.0">__l..</text>
</g>
<g>
<title>__pthread_cond_wait (56 samples, 4.92%)</title><rect x="999.4" y="723.0" width="58.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1002.4" y="734.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (7 samples, 0.61%)</title><rect x="1057.4" y="723.0" width="7.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1060.4" y="734.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.18%)</title><rect x="1064.6" y="723.0" width="2.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1067.6" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.18%)</title><rect x="1066.7" y="723.0" width="2.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1069.7" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.35%)</title><rect x="1068.8" y="723.0" width="4.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1071.8" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.09%)</title><rect x="1072.9" y="723.0" width="1.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1075.9" y="734.0"></text>
</g>
<g>
<title>_init (1 samples, 0.09%)</title><rect x="1074.0" y="723.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1077.0" y="734.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (5 samples, 0.44%)</title><rect x="1075.0" y="723.0" width="5.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1078.0" y="734.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.18%)</title><rect x="1080.2" y="723.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1083.2" y="734.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.18%)</title><rect x="1082.3" y="723.0" width="2.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1085.3" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.26%)</title><rect x="1084.3" y="739.0" width="3.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1087.3" y="750.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.09%)</title><rect x="1087.4" y="739.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1090.4" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (25 samples, 2.19%)</title><rect x="1088.5" y="787.0" width="25.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1091.5" y="798.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (25 samples, 2.19%)</title><rect x="1088.5" y="771.0" width="25.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1091.5" y="782.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (25 samples, 2.19%)</title><rect x="1088.5" y="755.0" width="25.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1091.5" y="766.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (25 samples, 2.19%)</title><rect x="1088.5" y="739.0" width="25.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1091.5" y="750.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateOf (2 samples, 0.18%)</title><rect x="1114.4" y="803.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1117.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.09%)</title><rect x="1116.4" y="867.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1119.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.09%)</title><rect x="1116.4" y="851.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1119.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="1116.4" y="835.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1119.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.09%)</title><rect x="1116.4" y="819.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1119.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.09%)</title><rect x="1116.4" y="803.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1119.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.09%)</title><rect x="1116.4" y="787.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1119.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.09%)</title><rect x="1116.4" y="771.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1119.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.09%)</title><rect x="1116.4" y="755.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1119.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.09%)</title><rect x="1116.4" y="739.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1119.4" y="750.0"></text>
</g>
<g>
<title>java/util/HashSet.remove (1 samples, 0.09%)</title><rect x="1116.4" y="723.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1119.4" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.09%)</title><rect x="1116.4" y="707.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1119.4" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.09%)</title><rect x="1116.4" y="691.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1119.4" y="702.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.09%)</title><rect x="1117.5" y="867.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1120.5" y="878.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (1 samples, 0.09%)</title><rect x="1117.5" y="851.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1120.5" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (1 samples, 0.09%)</title><rect x="1117.5" y="835.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1120.5" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="1117.5" y="819.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1120.5" y="830.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.09%)</title><rect x="1117.5" y="803.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1120.5" y="814.0"></text>
</g>
<g>
<title>start_thread (69 samples, 6.06%)</title><rect x="1118.5" y="867.0" width="71.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1121.5" y="878.0">start_th..</text>
</g>
<g>
<title>java_start(Thread*) (69 samples, 6.06%)</title><rect x="1118.5" y="851.0" width="71.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1121.5" y="862.0">java_sta..</text>
</g>
<g>
<title>GangWorker::loop() (43 samples, 3.78%)</title><rect x="1118.5" y="835.0" width="44.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1121.5" y="846.0">Gang..</text>
</g>
<g>
<title>G1ParCleanupCTTask::work(unsigned int) (1 samples, 0.09%)</title><rect x="1118.5" y="819.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1121.5" y="830.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (10 samples, 0.88%)</title><rect x="1119.6" y="819.0" width="10.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1122.6" y="830.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (10 samples, 0.88%)</title><rect x="1119.6" y="803.0" width="10.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1122.6" y="814.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.09%)</title><rect x="1119.6" y="787.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1122.6" y="798.0"></text>
</g>
<g>
<title>SpinPause (9 samples, 0.79%)</title><rect x="1120.6" y="787.0" width="9.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1123.6" y="798.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (32 samples, 2.81%)</title><rect x="1129.9" y="819.0" width="33.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1132.9" y="830.0">G1..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (15 samples, 1.32%)</title><rect x="1129.9" y="803.0" width="15.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1132.9" y="814.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 0.18%)</title><rect x="1129.9" y="787.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1132.9" y="798.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.09%)</title><rect x="1130.9" y="771.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1133.9" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.09%)</title><rect x="1130.9" y="755.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1133.9" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::vtable_length() const (1 samples, 0.09%)</title><rect x="1130.9" y="739.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1133.9" y="750.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 0.26%)</title><rect x="1132.0" y="787.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1135.0" y="798.0"></text>
</g>
<g>
<title>SpinPause (10 samples, 0.88%)</title><rect x="1135.1" y="787.0" width="10.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1138.1" y="798.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (8 samples, 0.70%)</title><rect x="1145.5" y="803.0" width="8.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1148.5" y="814.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (5 samples, 0.44%)</title><rect x="1145.5" y="787.0" width="5.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1148.5" y="798.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (3 samples, 0.26%)</title><rect x="1145.5" y="771.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.5" y="782.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (3 samples, 0.26%)</title><rect x="1145.5" y="755.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1148.5" y="766.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (2 samples, 0.18%)</title><rect x="1145.5" y="739.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1148.5" y="750.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.09%)</title><rect x="1147.5" y="739.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.5" y="750.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.09%)</title><rect x="1147.5" y="723.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1150.5" y="734.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.18%)</title><rect x="1148.6" y="771.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.6" y="782.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.18%)</title><rect x="1148.6" y="755.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.6" y="766.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CLDClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.09%)</title><rect x="1148.6" y="739.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1151.6" y="750.0"></text>
</g>
<g>
<title>OopMapSet::all_do(frame const*, RegisterMap const*, OopClosure*, void (*)(oopDesc**, oopDesc**), OopClosure*) (1 samples, 0.09%)</title><rect x="1148.6" y="723.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1151.6" y="734.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (1 samples, 0.09%)</title><rect x="1149.6" y="739.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1152.6" y="750.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.26%)</title><rect x="1150.6" y="787.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1153.6" y="798.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (3 samples, 0.26%)</title><rect x="1150.6" y="771.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1153.6" y="782.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (9 samples, 0.79%)</title><rect x="1153.7" y="803.0" width="9.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1156.7" y="814.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (9 samples, 0.79%)</title><rect x="1153.7" y="787.0" width="9.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.7" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (8 samples, 0.70%)</title><rect x="1153.7" y="771.0" width="8.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.7" y="782.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (8 samples, 0.70%)</title><rect x="1153.7" y="755.0" width="8.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.7" y="766.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (8 samples, 0.70%)</title><rect x="1153.7" y="739.0" width="8.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1156.7" y="750.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (8 samples, 0.70%)</title><rect x="1153.7" y="723.0" width="8.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.7" y="734.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (3 samples, 0.26%)</title><rect x="1158.9" y="707.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1161.9" y="718.0"></text>
</g>
<g>
<title>G1BlockOffsetArray::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (2 samples, 0.18%)</title><rect x="1158.9" y="691.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1161.9" y="702.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (2 samples, 0.18%)</title><rect x="1158.9" y="675.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.9" y="686.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (1 samples, 0.09%)</title><rect x="1160.0" y="659.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.0" y="670.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.09%)</title><rect x="1161.0" y="691.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.0" y="702.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.09%)</title><rect x="1162.0" y="771.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.0" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.09%)</title><rect x="1162.0" y="755.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.0" y="766.0"></text>
</g>
<g>
<title>JavaThread::run() (24 samples, 2.11%)</title><rect x="1163.1" y="835.0" width="24.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.1" y="846.0">J..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (24 samples, 2.11%)</title><rect x="1163.1" y="819.0" width="24.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.1" y="830.0">J..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (24 samples, 2.11%)</title><rect x="1163.1" y="803.0" width="24.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.1" y="814.0">C..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (23 samples, 2.02%)</title><rect x="1163.1" y="787.0" width="23.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1166.1" y="798.0">C..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (23 samples, 2.02%)</title><rect x="1163.1" y="771.0" width="23.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.1" y="782.0">C..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (23 samples, 2.02%)</title><rect x="1163.1" y="755.0" width="23.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.1" y="766.0">C..</text>
</g>
<g>
<title>CallGenerator::for_osr(ciMethod*, int) (1 samples, 0.09%)</title><rect x="1163.1" y="739.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.1" y="750.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.09%)</title><rect x="1163.1" y="723.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1166.1" y="734.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1163.1" y="707.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.1" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1163.1" y="691.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.1" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1163.1" y="675.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.1" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1163.1" y="659.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.1" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1163.1" y="643.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.1" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1163.1" y="627.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.1" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.09%)</title><rect x="1163.1" y="611.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.1" y="622.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1163.1" y="595.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.1" y="606.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1163.1" y="579.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.1" y="590.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1163.1" y="563.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.1" y="574.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1163.1" y="547.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.1" y="558.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1163.1" y="531.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.1" y="542.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1163.1" y="515.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.1" y="526.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.09%)</title><rect x="1163.1" y="499.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.1" y="510.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (10 samples, 0.88%)</title><rect x="1164.1" y="739.0" width="10.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.1" y="750.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.18%)</title><rect x="1164.1" y="723.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.1" y="734.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.18%)</title><rect x="1164.1" y="707.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.1" y="718.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.09%)</title><rect x="1165.1" y="691.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1168.1" y="702.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.09%)</title><rect x="1165.1" y="675.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.1" y="686.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.09%)</title><rect x="1165.1" y="659.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.1" y="670.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int, Compile*) (1 samples, 0.09%)</title><rect x="1165.1" y="643.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.1" y="654.0"></text>
</g>
<g>
<title>MachReturnNode::MachReturnNode() (1 samples, 0.09%)</title><rect x="1165.1" y="627.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.1" y="638.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.09%)</title><rect x="1165.1" y="611.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1168.1" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (8 samples, 0.70%)</title><rect x="1166.2" y="723.0" width="8.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.2" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.09%)</title><rect x="1166.2" y="707.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.2" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (2 samples, 0.18%)</title><rect x="1167.2" y="707.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.2" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.09%)</title><rect x="1168.2" y="691.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.2" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.18%)</title><rect x="1169.3" y="707.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.3" y="718.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.09%)</title><rect x="1169.3" y="691.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.3" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.09%)</title><rect x="1170.3" y="691.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.3" y="702.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.09%)</title><rect x="1171.4" y="707.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.4" y="718.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.09%)</title><rect x="1171.4" y="691.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.4" y="702.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.09%)</title><rect x="1171.4" y="675.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.4" y="686.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.09%)</title><rect x="1171.4" y="659.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.4" y="670.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1171.4" y="643.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.4" y="654.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.09%)</title><rect x="1172.4" y="707.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.4" y="718.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.09%)</title><rect x="1173.4" y="707.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.4" y="718.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1173.4" y="691.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.4" y="702.0"></text>
</g>
<g>
<title>IndexSet::populate_free_list() (1 samples, 0.09%)</title><rect x="1173.4" y="675.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.4" y="686.0"></text>
</g>
<g>
<title>Compile::Optimize() (7 samples, 0.61%)</title><rect x="1174.5" y="739.0" width="7.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.5" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (5 samples, 0.44%)</title><rect x="1174.5" y="723.0" width="5.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.5" y="734.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1174.5" y="707.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.5" y="718.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1174.5" y="691.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.5" y="702.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1174.5" y="675.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.5" y="686.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1174.5" y="659.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.5" y="670.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1174.5" y="643.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.5" y="654.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1174.5" y="627.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.5" y="638.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1174.5" y="611.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.5" y="622.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1174.5" y="595.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.5" y="606.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1174.5" y="579.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.5" y="590.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1174.5" y="563.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.5" y="574.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1174.5" y="547.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.5" y="558.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1174.5" y="531.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.5" y="542.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1174.5" y="515.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.5" y="526.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1174.5" y="499.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.5" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.09%)</title><rect x="1174.5" y="483.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.5" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.09%)</title><rect x="1174.5" y="467.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.5" y="478.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.09%)</title><rect x="1175.5" y="707.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.5" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.09%)</title><rect x="1175.5" y="691.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.5" y="702.0"></text>
</g>
<g>
<title>Invariance::is_invariant(Node*) (1 samples, 0.09%)</title><rect x="1175.5" y="675.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.5" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.09%)</title><rect x="1175.5" y="659.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.5" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.09%)</title><rect x="1176.5" y="707.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.5" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.18%)</title><rect x="1177.6" y="707.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.6" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 0.18%)</title><rect x="1177.6" y="691.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.6" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.09%)</title><rect x="1177.6" y="675.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.6" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.09%)</title><rect x="1178.6" y="675.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.6" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1179.6" y="723.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.6" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1179.6" y="707.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.6" y="718.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1179.6" y="691.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.6" y="702.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.09%)</title><rect x="1179.6" y="675.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.6" y="686.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.09%)</title><rect x="1179.6" y="659.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.6" y="670.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.09%)</title><rect x="1180.7" y="723.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.7" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1180.7" y="707.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.7" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1180.7" y="691.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.7" y="702.0"></text>
</g>
<g>
<title>MemBarNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1180.7" y="675.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.7" y="686.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1180.7" y="659.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.7" y="670.0"></text>
</g>
<g>
<title>NodeHash::NodeHash(Arena*, unsigned int) (1 samples, 0.09%)</title><rect x="1181.7" y="739.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.7" y="750.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="1181.7" y="723.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.7" y="734.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.09%)</title><rect x="1181.7" y="707.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.7" y="718.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="1181.7" y="691.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.7" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1182.7" y="739.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.7" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.26%)</title><rect x="1182.7" y="723.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.26%)</title><rect x="1182.7" y="707.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.26%)</title><rect x="1182.7" y="691.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.26%)</title><rect x="1182.7" y="675.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.26%)</title><rect x="1182.7" y="659.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.7" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1182.7" y="643.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.7" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.26%)</title><rect x="1182.7" y="627.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.26%)</title><rect x="1182.7" y="611.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.26%)</title><rect x="1182.7" y="595.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.26%)</title><rect x="1182.7" y="579.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.26%)</title><rect x="1182.7" y="563.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.7" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1182.7" y="547.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.7" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1182.7" y="531.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1182.7" y="515.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1182.7" y="499.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1182.7" y="483.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1182.7" y="467.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.7" y="478.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.09%)</title><rect x="1182.7" y="451.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.7" y="462.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.09%)</title><rect x="1182.7" y="435.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.7" y="446.0"></text>
</g>
<g>
<title>TypeTuple::make_range(ciSignature*) (1 samples, 0.09%)</title><rect x="1182.7" y="419.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.7" y="430.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1182.7" y="403.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.7" y="414.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1182.7" y="387.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.7" y="398.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1182.7" y="371.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.7" y="382.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.09%)</title><rect x="1182.7" y="355.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.7" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.8" y="451.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.8" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1183.8" y="435.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1183.8" y="419.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1183.8" y="403.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1183.8" y="387.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1183.8" y="371.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.8" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.8" y="355.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.8" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1183.8" y="339.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1183.8" y="323.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1183.8" y="307.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1183.8" y="291.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.8" y="302.0"></text>
</g>
<g>
<title>Parse::array_store_check() (1 samples, 0.09%)</title><rect x="1183.8" y="275.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.8" y="286.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1183.8" y="259.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.8" y="270.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1183.8" y="243.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.8" y="254.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1183.8" y="227.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.8" y="238.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.09%)</title><rect x="1183.8" y="211.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.8" y="222.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1183.8" y="195.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.8" y="206.0"></text>
</g>
<g>
<title>TypeKlassPtr::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="1183.8" y="179.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.8" y="190.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1183.8" y="163.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.8" y="174.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1183.8" y="147.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.8" y="158.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.09%)</title><rect x="1183.8" y="131.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.8" y="142.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.8" y="547.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.8" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.8" y="531.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.8" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1184.8" y="515.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1184.8" y="499.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1184.8" y="483.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1184.8" y="467.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1184.8" y="451.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.8" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.8" y="435.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.8" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1184.8" y="419.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1184.8" y="403.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1184.8" y="387.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1184.8" y="371.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1184.8" y="355.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.8" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.8" y="339.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.8" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1184.8" y="323.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1184.8" y="307.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1184.8" y="291.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1184.8" y="275.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1184.8" y="259.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.8" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.8" y="243.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.8" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1184.8" y="227.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.8" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1184.8" y="211.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.8" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1184.8" y="195.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.8" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1184.8" y="179.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.8" y="190.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.09%)</title><rect x="1184.8" y="163.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.8" y="174.0"></text>
</g>
<g>
<title>Parse::call_register_finalizer() (1 samples, 0.09%)</title><rect x="1184.8" y="147.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.8" y="158.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1184.8" y="131.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.8" y="142.0"></text>
</g>
<g>
<title>MulNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1184.8" y="115.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.8" y="126.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.09%)</title><rect x="1184.8" y="99.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.8" y="110.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1184.8" y="83.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.8" y="94.0"></text>
</g>
<g>
<title>TypeInt::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="1184.8" y="67.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.8" y="78.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1184.8" y="51.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.8" y="62.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.09%)</title><rect x="1184.8" y="35.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.8" y="46.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.09%)</title><rect x="1185.9" y="739.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.9" y="750.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.09%)</title><rect x="1185.9" y="723.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.9" y="734.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.09%)</title><rect x="1186.9" y="787.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.9" y="798.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.09%)</title><rect x="1186.9" y="771.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.9" y="782.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.09%)</title><rect x="1186.9" y="755.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.9" y="766.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.09%)</title><rect x="1186.9" y="739.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.9" y="750.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.09%)</title><rect x="1186.9" y="723.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.9" y="734.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.18%)</title><rect x="1187.9" y="835.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.9" y="846.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.18%)</title><rect x="1187.9" y="819.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.9" y="830.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.09%)</title><rect x="1187.9" y="803.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.9" y="814.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.09%)</title><rect x="1187.9" y="787.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.9" y="798.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.09%)</title><rect x="1187.9" y="771.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.9" y="782.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1187.9" y="755.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.9" y="766.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1187.9" y="739.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.9" y="750.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="1187.9" y="723.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.9" y="734.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.09%)</title><rect x="1189.0" y="803.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1192.0" y="814.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.09%)</title><rect x="1189.0" y="787.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1192.0" y="798.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.09%)</title><rect x="1189.0" y="771.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1192.0" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.09%)</title><rect x="1189.0" y="755.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1192.0" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.09%)</title><rect x="1189.0" y="739.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.0" y="750.0"></text>
</g>
<g>
<title>SurvRateGroup::record_surviving_words(int, unsigned long) (1 samples, 0.09%)</title><rect x="1189.0" y="723.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1192.0" y="734.0"></text>
</g>
</g>
</svg>
