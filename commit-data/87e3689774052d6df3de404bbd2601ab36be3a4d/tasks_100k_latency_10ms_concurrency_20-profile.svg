<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1382" onload="init(evt)" viewBox="0 0 1200 1382" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1365"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1365"> </text>
<g id="frames">
<g>
<title>all (352 samples, 100.00%)</title><rect x="10.0" y="1331.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1342.0">all</text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.28%)</title><rect x="10.0" y="1315.0" width="3.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.28%)</title><rect x="13.4" y="1315.0" width="3.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="16.4" y="1326.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.28%)</title><rect x="13.4" y="1299.0" width="3.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="16.4" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (30 samples, 8.52%)</title><rect x="16.7" y="1315.0" width="100.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.7" y="1326.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (2 samples, 0.57%)</title><rect x="16.7" y="1299.0" width="6.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="19.7" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (2 samples, 0.57%)</title><rect x="16.7" y="1283.0" width="6.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.7" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (2 samples, 0.57%)</title><rect x="16.7" y="1267.0" width="6.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.7" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (2 samples, 0.57%)</title><rect x="16.7" y="1251.0" width="6.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.7" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (2 samples, 0.57%)</title><rect x="16.7" y="1235.0" width="6.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="19.7" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.57%)</title><rect x="16.7" y="1219.0" width="6.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="19.7" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.28%)</title><rect x="16.7" y="1203.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.7" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.28%)</title><rect x="16.7" y="1187.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.28%)</title><rect x="16.7" y="1171.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.7" y="1182.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/695770246.linkToTargetMethod (1 samples, 0.28%)</title><rect x="16.7" y="1155.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.7" y="1166.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/2067231386.invokeStatic_JJ_L (1 samples, 0.28%)</title><rect x="16.7" y="1139.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$$Lambda$86/716100767.get$Lambda (1 samples, 0.28%)</title><rect x="16.7" y="1123.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.28%)</title><rect x="20.1" y="1203.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="23.1" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.28%)</title><rect x="20.1" y="1187.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.1" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.28%)</title><rect x="20.1" y="1171.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="23.1" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.28%)</title><rect x="20.1" y="1155.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="23.1" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.28%)</title><rect x="20.1" y="1139.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="23.1" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.28%)</title><rect x="20.1" y="1123.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.28%)</title><rect x="20.1" y="1107.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="23.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.28%)</title><rect x="20.1" y="1091.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.28%)</title><rect x="20.1" y="1075.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="23.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/CompactArrayOf.write (1 samples, 0.28%)</title><rect x="20.1" y="1059.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.1" y="1070.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.28%)</title><rect x="20.1" y="1043.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.1" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (28 samples, 7.95%)</title><rect x="23.4" y="1299.0" width="93.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="26.4" y="1310.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (2 samples, 0.57%)</title><rect x="23.4" y="1283.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="26.4" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.28%)</title><rect x="23.4" y="1267.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.4" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.28%)</title><rect x="23.4" y="1251.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="26.4" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.28%)</title><rect x="23.4" y="1235.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="26.4" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.28%)</title><rect x="23.4" y="1219.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="26.4" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.28%)</title><rect x="23.4" y="1203.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="26.4" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.28%)</title><rect x="23.4" y="1187.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.4" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.28%)</title><rect x="23.4" y="1171.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="26.4" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.28%)</title><rect x="23.4" y="1155.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="26.4" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.28%)</title><rect x="23.4" y="1139.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="26.4" y="1150.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.28%)</title><rect x="23.4" y="1123.0" width="3.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="26.4" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsResumed (1 samples, 0.28%)</title><rect x="26.8" y="1267.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="29.8" y="1278.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (11 samples, 3.13%)</title><rect x="30.1" y="1283.0" width="36.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="33.1" y="1294.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$259/1173836526.accept (11 samples, 3.13%)</title><rect x="30.1" y="1267.0" width="36.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="33.1" y="1278.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (11 samples, 3.13%)</title><rect x="30.1" y="1251.0" width="36.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="33.1" y="1262.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (6 samples, 1.70%)</title><rect x="30.1" y="1235.0" width="20.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="33.1" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (6 samples, 1.70%)</title><rect x="30.1" y="1219.0" width="20.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="33.1" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (6 samples, 1.70%)</title><rect x="30.1" y="1203.0" width="20.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="33.1" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (6 samples, 1.70%)</title><rect x="30.1" y="1187.0" width="20.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="33.1" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (6 samples, 1.70%)</title><rect x="30.1" y="1171.0" width="20.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="33.1" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (2 samples, 0.57%)</title><rect x="43.5" y="1155.0" width="6.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="46.5" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (1 samples, 0.28%)</title><rect x="50.2" y="1235.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="53.2" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.28%)</title><rect x="50.2" y="1219.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="53.2" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.28%)</title><rect x="50.2" y="1203.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="53.2" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/TaskRequest.&lt;init&gt; (4 samples, 1.14%)</title><rect x="53.6" y="1235.0" width="13.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="56.6" y="1246.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 1.14%)</title><rect x="53.6" y="1219.0" width="13.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="56.6" y="1230.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.57%)</title><rect x="56.9" y="1203.0" width="6.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="59.9" y="1214.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.57%)</title><rect x="56.9" y="1187.0" width="6.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="59.9" y="1198.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.28%)</title><rect x="63.6" y="1203.0" width="3.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="66.6" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (15 samples, 4.26%)</title><rect x="67.0" y="1283.0" width="50.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="70.0" y="1294.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (15 samples, 4.26%)</title><rect x="67.0" y="1267.0" width="50.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="70.0" y="1278.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (10 samples, 2.84%)</title><rect x="67.0" y="1251.0" width="33.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="70.0" y="1262.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 1.42%)</title><rect x="67.0" y="1235.0" width="16.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="70.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 1.42%)</title><rect x="67.0" y="1219.0" width="16.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="70.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.85%)</title><rect x="67.0" y="1203.0" width="10.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="70.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.28%)</title><rect x="67.0" y="1187.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="70.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.28%)</title><rect x="67.0" y="1171.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="70.0" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.get (1 samples, 0.28%)</title><rect x="67.0" y="1155.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="70.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.getInt (1 samples, 0.28%)</title><rect x="67.0" y="1139.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="70.0" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.get (1 samples, 0.28%)</title><rect x="67.0" y="1123.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="70.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.28%)</title><rect x="67.0" y="1107.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="70.0" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.28%)</title><rect x="67.0" y="1091.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="70.0" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.28%)</title><rect x="67.0" y="1075.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="70.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.57%)</title><rect x="70.3" y="1187.0" width="6.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="73.3" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.57%)</title><rect x="70.3" y="1171.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="73.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.28%)</title><rect x="70.3" y="1155.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="73.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/SystemTime.milliseconds (1 samples, 0.28%)</title><rect x="73.7" y="1155.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="76.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$255/1311128923.shouldBlock (1 samples, 0.28%)</title><rect x="77.0" y="1203.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="80.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.28%)</title><rect x="77.0" y="1187.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="80.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.28%)</title><rect x="77.0" y="1171.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="80.0" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.anyMatch (1 samples, 0.28%)</title><rect x="77.0" y="1155.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="80.0" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.28%)</title><rect x="77.0" y="1139.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="80.0" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.28%)</title><rect x="77.0" y="1123.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="80.0" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.28%)</title><rect x="77.0" y="1107.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="80.0" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.28%)</title><rect x="77.0" y="1091.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="80.0" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.28%)</title><rect x="77.0" y="1075.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="80.0" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.28%)</title><rect x="77.0" y="1059.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="80.0" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.28%)</title><rect x="77.0" y="1043.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="80.0" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$CLQSpliterator.tryAdvance (1 samples, 0.28%)</title><rect x="77.0" y="1027.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="80.0" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.28%)</title><rect x="77.0" y="1011.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="80.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$257/1080880571.test (1 samples, 0.28%)</title><rect x="77.0" y="995.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="80.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$hasAvailableFetches$0 (1 samples, 0.28%)</title><rect x="77.0" y="979.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="80.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.maybeThrowInterruptException (1 samples, 0.28%)</title><rect x="80.4" y="1203.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="83.4" y="1214.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.28%)</title><rect x="80.4" y="1187.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="83.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.maybeTriggerWakeup (1 samples, 0.28%)</title><rect x="80.4" y="1171.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="83.4" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (5 samples, 1.42%)</title><rect x="83.8" y="1235.0" width="16.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="86.8" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (5 samples, 1.42%)</title><rect x="83.8" y="1219.0" width="16.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="86.8" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (4 samples, 1.14%)</title><rect x="83.8" y="1203.0" width="13.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="86.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 1.14%)</title><rect x="83.8" y="1187.0" width="13.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="86.8" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.28%)</title><rect x="83.8" y="1171.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="86.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (3 samples, 0.85%)</title><rect x="87.1" y="1171.0" width="10.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="90.1" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (3 samples, 0.85%)</title><rect x="87.1" y="1155.0" width="10.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="90.1" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.28%)</title><rect x="90.5" y="1139.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="93.5" y="1150.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.28%)</title><rect x="90.5" y="1123.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="93.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.28%)</title><rect x="93.8" y="1139.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="96.8" y="1150.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.28%)</title><rect x="93.8" y="1123.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="96.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionLag (1 samples, 0.28%)</title><rect x="97.2" y="1203.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="100.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.57%)</title><rect x="100.5" y="1251.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="103.5" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.57%)</title><rect x="100.5" y="1235.0" width="6.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="103.5" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.28%)</title><rect x="100.5" y="1219.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="103.5" y="1230.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.28%)</title><rect x="100.5" y="1203.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="103.5" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.28%)</title><rect x="100.5" y="1187.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="103.5" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.28%)</title><rect x="100.5" y="1171.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="103.5" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.28%)</title><rect x="103.9" y="1219.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="106.9" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.28%)</title><rect x="103.9" y="1203.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="106.9" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.28%)</title><rect x="103.9" y="1187.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="106.9" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.28%)</title><rect x="103.9" y="1171.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="106.9" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.28%)</title><rect x="103.9" y="1155.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="106.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.28%)</title><rect x="107.2" y="1251.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="110.2" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (1 samples, 0.28%)</title><rect x="107.2" y="1235.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="110.2" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.isEmpty (1 samples, 0.28%)</title><rect x="107.2" y="1219.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="110.2" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.first (1 samples, 0.28%)</title><rect x="107.2" y="1203.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="110.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.28%)</title><rect x="110.6" y="1251.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="113.6" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.28%)</title><rect x="110.6" y="1235.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="113.6" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.28%)</title><rect x="110.6" y="1219.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="113.6" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.28%)</title><rect x="110.6" y="1203.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="113.6" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.28%)</title><rect x="110.6" y="1187.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="113.6" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.28%)</title><rect x="113.9" y="1251.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="116.9" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.28%)</title><rect x="113.9" y="1235.0" width="3.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="116.9" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.28%)</title><rect x="113.9" y="1219.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="116.9" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.next (1 samples, 0.28%)</title><rect x="113.9" y="1203.0" width="3.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="116.9" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.advance (1 samples, 0.28%)</title><rect x="113.9" y="1187.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="116.9" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.first (1 samples, 0.28%)</title><rect x="113.9" y="1171.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="116.9" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (1 samples, 0.28%)</title><rect x="113.9" y="1155.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="116.9" y="1166.0"></text>
</g>
<g>
<title>java/lang/Thread.run (220 samples, 62.50%)</title><rect x="117.3" y="1315.0" width="737.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="120.3" y="1326.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (220 samples, 62.50%)</title><rect x="117.3" y="1299.0" width="737.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="120.3" y="1310.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (220 samples, 62.50%)</title><rect x="117.3" y="1283.0" width="737.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="120.3" y="1294.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$279/1742471758.run (210 samples, 59.66%)</title><rect x="120.6" y="1267.0" width="704.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="123.6" y="1278.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$279/1742471758.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$66 (210 samples, 59.66%)</title><rect x="120.6" y="1251.0" width="704.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="123.6" y="1262.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$66</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (210 samples, 59.66%)</title><rect x="120.6" y="1235.0" width="704.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="123.6" y="1246.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (206 samples, 58.52%)</title><rect x="120.6" y="1219.0" width="690.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="123.6" y="1230.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ExecutionScheduler.schedule (1 samples, 0.28%)</title><rect x="140.7" y="1203.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="143.7" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ExecutionScheduler.waitOnScheduledTime (1 samples, 0.28%)</title><rect x="140.7" y="1187.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="143.7" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ExecutionScheduler$$Lambda$200/1060515589.get (1 samples, 0.28%)</title><rect x="140.7" y="1171.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="143.7" y="1182.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.28%)</title><rect x="140.7" y="1155.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="143.7" y="1166.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.28%)</title><rect x="140.7" y="1139.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="143.7" y="1150.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.28%)</title><rect x="140.7" y="1123.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="143.7" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.28%)</title><rect x="140.7" y="1107.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="143.7" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.28%)</title><rect x="140.7" y="1091.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="143.7" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (49 samples, 13.92%)</title><rect x="144.1" y="1203.0" width="164.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="147.1" y="1214.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (49 samples, 13.92%)</title><rect x="144.1" y="1187.0" width="164.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="147.1" y="1198.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (49 samples, 13.92%)</title><rect x="144.1" y="1171.0" width="164.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="147.1" y="1182.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (49 samples, 13.92%)</title><rect x="144.1" y="1155.0" width="164.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="147.1" y="1166.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (49 samples, 13.92%)</title><rect x="144.1" y="1139.0" width="164.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="147.1" y="1150.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (49 samples, 13.92%)</title><rect x="144.1" y="1123.0" width="164.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="147.1" y="1134.0">com/fasterxml/jackson..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (11 samples, 3.13%)</title><rect x="144.1" y="1107.0" width="36.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="147.1" y="1118.0">com..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.57%)</title><rect x="150.8" y="1091.0" width="6.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="153.8" y="1102.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.57%)</title><rect x="150.8" y="1075.0" width="6.7" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="153.8" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (5 samples, 1.42%)</title><rect x="157.5" y="1091.0" width="16.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="160.5" y="1102.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.28%)</title><rect x="157.5" y="1075.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="160.5" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.28%)</title><rect x="157.5" y="1059.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="160.5" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.28%)</title><rect x="157.5" y="1043.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="160.5" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (4 samples, 1.14%)</title><rect x="160.9" y="1075.0" width="13.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="163.9" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (4 samples, 1.14%)</title><rect x="160.9" y="1059.0" width="13.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="163.9" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 1.14%)</title><rect x="160.9" y="1043.0" width="13.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="163.9" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 1.14%)</title><rect x="160.9" y="1027.0" width="13.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="163.9" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 1.14%)</title><rect x="160.9" y="1011.0" width="13.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="163.9" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (4 samples, 1.14%)</title><rect x="160.9" y="995.0" width="13.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="163.9" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (2 samples, 0.57%)</title><rect x="174.3" y="1091.0" width="6.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="177.3" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (33 samples, 9.38%)</title><rect x="181.0" y="1107.0" width="110.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="184.0" y="1118.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.28%)</title><rect x="181.0" y="1091.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="184.0" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.28%)</title><rect x="181.0" y="1075.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="184.0" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (6 samples, 1.70%)</title><rect x="184.3" y="1091.0" width="20.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="187.3" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 1.70%)</title><rect x="184.3" y="1075.0" width="20.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="187.3" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (6 samples, 1.70%)</title><rect x="184.3" y="1059.0" width="20.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="187.3" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.28%)</title><rect x="201.1" y="1043.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="204.1" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (25 samples, 7.10%)</title><rect x="204.4" y="1091.0" width="83.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="207.4" y="1102.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (12 samples, 3.41%)</title><rect x="207.8" y="1075.0" width="40.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="210.8" y="1086.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.57%)</title><rect x="207.8" y="1059.0" width="6.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="210.8" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.57%)</title><rect x="207.8" y="1043.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="210.8" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.57%)</title><rect x="207.8" y="1027.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="210.8" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.57%)</title><rect x="207.8" y="1011.0" width="6.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="210.8" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.28%)</title><rect x="211.1" y="995.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="214.1" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (10 samples, 2.84%)</title><rect x="214.5" y="1059.0" width="33.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="217.5" y="1070.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (4 samples, 1.14%)</title><rect x="214.5" y="1043.0" width="13.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="217.5" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (6 samples, 1.70%)</title><rect x="227.9" y="1043.0" width="20.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="230.9" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (6 samples, 1.70%)</title><rect x="227.9" y="1027.0" width="20.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="230.9" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (6 samples, 1.70%)</title><rect x="227.9" y="1011.0" width="20.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="230.9" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (6 samples, 1.70%)</title><rect x="227.9" y="995.0" width="20.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="230.9" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (12 samples, 3.41%)</title><rect x="248.0" y="1075.0" width="40.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="251.0" y="1086.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (12 samples, 3.41%)</title><rect x="248.0" y="1059.0" width="40.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="251.0" y="1070.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (12 samples, 3.41%)</title><rect x="248.0" y="1043.0" width="40.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="251.0" y="1054.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (7 samples, 1.99%)</title><rect x="248.0" y="1027.0" width="23.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="251.0" y="1038.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (2 samples, 0.57%)</title><rect x="248.0" y="1011.0" width="6.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="251.0" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.57%)</title><rect x="254.7" y="1011.0" width="6.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="257.7" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.57%)</title><rect x="254.7" y="995.0" width="6.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="257.7" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.57%)</title><rect x="254.7" y="979.0" width="6.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="257.7" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.57%)</title><rect x="254.7" y="963.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="257.7" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.28%)</title><rect x="261.4" y="1011.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="264.4" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.28%)</title><rect x="261.4" y="995.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="264.4" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.28%)</title><rect x="261.4" y="979.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="264.4" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (2 samples, 0.57%)</title><rect x="264.8" y="1011.0" width="6.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="267.8" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (2 samples, 0.57%)</title><rect x="271.5" y="1027.0" width="6.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="274.5" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.57%)</title><rect x="271.5" y="1011.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="274.5" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.57%)</title><rect x="271.5" y="995.0" width="6.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="274.5" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.57%)</title><rect x="271.5" y="979.0" width="6.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="274.5" y="990.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.57%)</title><rect x="271.5" y="963.0" width="6.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="274.5" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.57%)</title><rect x="278.2" y="1027.0" width="6.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="281.2" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.57%)</title><rect x="278.2" y="1011.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="281.2" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.57%)</title><rect x="278.2" y="995.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="281.2" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.28%)</title><rect x="284.9" y="1027.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="287.9" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.checkUnresolvedObjectId (1 samples, 0.28%)</title><rect x="288.2" y="1091.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="291.2" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (5 samples, 1.42%)</title><rect x="291.6" y="1107.0" width="16.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="294.6" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (5 samples, 1.42%)</title><rect x="291.6" y="1091.0" width="16.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="294.6" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (5 samples, 1.42%)</title><rect x="291.6" y="1075.0" width="16.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="294.6" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (5 samples, 1.42%)</title><rect x="291.6" y="1059.0" width="16.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="294.6" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 1.42%)</title><rect x="291.6" y="1043.0" width="16.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="294.6" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (137 samples, 38.92%)</title><rect x="308.4" y="1203.0" width="459.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="311.4" y="1214.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (18 samples, 5.11%)</title><rect x="308.4" y="1187.0" width="60.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="311.4" y="1198.0">com/li..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (15 samples, 4.26%)</title><rect x="318.4" y="1171.0" width="50.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="321.4" y="1182.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (11 samples, 3.13%)</title><rect x="331.8" y="1155.0" width="36.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="334.8" y="1166.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.28%)</title><rect x="331.8" y="1139.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="334.8" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.28%)</title><rect x="331.8" y="1123.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="334.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.28%)</title><rect x="331.8" y="1107.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="334.8" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.28%)</title><rect x="331.8" y="1091.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="334.8" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (10 samples, 2.84%)</title><rect x="335.2" y="1139.0" width="33.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="338.2" y="1150.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (8 samples, 2.27%)</title><rect x="341.9" y="1123.0" width="26.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="344.9" y="1134.0">j..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 1.14%)</title><rect x="355.3" y="1107.0" width="13.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="358.3" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.57%)</title><rect x="368.7" y="1187.0" width="6.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="371.7" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.57%)</title><rect x="368.7" y="1171.0" width="6.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="371.7" y="1182.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.57%)</title><rect x="368.7" y="1155.0" width="6.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="371.7" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (26 samples, 7.39%)</title><rect x="375.4" y="1187.0" width="87.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="378.4" y="1198.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (26 samples, 7.39%)</title><rect x="375.4" y="1171.0" width="87.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="378.4" y="1182.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (8 samples, 2.27%)</title><rect x="382.1" y="1155.0" width="26.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="385.1" y="1166.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (8 samples, 2.27%)</title><rect x="382.1" y="1139.0" width="26.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="385.1" y="1150.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (6 samples, 1.70%)</title><rect x="382.1" y="1123.0" width="20.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="385.1" y="1134.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (6 samples, 1.70%)</title><rect x="382.1" y="1107.0" width="20.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="385.1" y="1118.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (6 samples, 1.70%)</title><rect x="382.1" y="1091.0" width="20.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="385.1" y="1102.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (6 samples, 1.70%)</title><rect x="382.1" y="1075.0" width="20.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="385.1" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.57%)</title><rect x="395.5" y="1059.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="398.5" y="1070.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.57%)</title><rect x="395.5" y="1043.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="398.5" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.28%)</title><rect x="398.9" y="1027.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="401.9" y="1038.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.28%)</title><rect x="398.9" y="1011.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="401.9" y="1022.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.28%)</title><rect x="402.2" y="1123.0" width="3.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="405.2" y="1134.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.28%)</title><rect x="405.6" y="1123.0" width="3.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="408.6" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.28%)</title><rect x="408.9" y="1155.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="411.9" y="1166.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.28%)</title><rect x="408.9" y="1139.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="411.9" y="1150.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.28%)</title><rect x="408.9" y="1123.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="411.9" y="1134.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (15 samples, 4.26%)</title><rect x="412.3" y="1155.0" width="50.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="415.3" y="1166.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (15 samples, 4.26%)</title><rect x="412.3" y="1139.0" width="50.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="415.3" y="1150.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.28%)</title><rect x="412.3" y="1123.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="415.3" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.28%)</title><rect x="412.3" y="1107.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="415.3" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.28%)</title><rect x="412.3" y="1091.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="415.3" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.28%)</title><rect x="412.3" y="1075.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="415.3" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (14 samples, 3.98%)</title><rect x="415.6" y="1123.0" width="47.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="418.6" y="1134.0">java..</text>
</g>
<g>
<title>java/util/HashMap.put (13 samples, 3.69%)</title><rect x="419.0" y="1107.0" width="43.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="422.0" y="1118.0">java..</text>
</g>
<g>
<title>java/util/HashMap.putVal (9 samples, 2.56%)</title><rect x="432.4" y="1091.0" width="30.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="435.4" y="1102.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.28%)</title><rect x="445.8" y="1075.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="448.8" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (3 samples, 0.85%)</title><rect x="449.1" y="1075.0" width="10.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="452.1" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.28%)</title><rect x="455.9" y="1059.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="458.9" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.28%)</title><rect x="455.9" y="1043.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="458.9" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.28%)</title><rect x="455.9" y="1027.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="458.9" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.28%)</title><rect x="455.9" y="1011.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="458.9" y="1022.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.28%)</title><rect x="455.9" y="995.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="458.9" y="1006.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.28%)</title><rect x="459.2" y="1075.0" width="3.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="462.2" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (76 samples, 21.59%)</title><rect x="462.6" y="1187.0" width="254.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="465.6" y="1198.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (76 samples, 21.59%)</title><rect x="462.6" y="1171.0" width="254.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="465.6" y="1182.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.28%)</title><rect x="472.6" y="1155.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="475.6" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$206/1563401438.process (70 samples, 19.89%)</title><rect x="476.0" y="1155.0" width="234.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="479.0" y="1166.0">com/linecorp/decaton/benchmark/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (70 samples, 19.89%)</title><rect x="476.0" y="1139.0" width="234.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="479.0" y="1150.0">com/linecorp/decaton/benchmark/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (68 samples, 19.32%)</title><rect x="476.0" y="1123.0" width="227.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="479.0" y="1134.0">com/linecorp/decaton/benchmark..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.57%)</title><rect x="479.3" y="1107.0" width="6.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="482.3" y="1118.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.57%)</title><rect x="479.3" y="1091.0" width="6.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="482.3" y="1102.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.57%)</title><rect x="479.3" y="1075.0" width="6.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="482.3" y="1086.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.57%)</title><rect x="479.3" y="1059.0" width="6.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="482.3" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.57%)</title><rect x="479.3" y="1043.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="482.3" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.28%)</title><rect x="482.7" y="1027.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="485.7" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (65 samples, 18.47%)</title><rect x="486.0" y="1107.0" width="217.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="489.0" y="1118.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>java/lang/Thread.sleep (62 samples, 17.61%)</title><rect x="489.4" y="1091.0" width="207.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="492.4" y="1102.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.28%)</title><rect x="502.8" y="1075.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="505.8" y="1086.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.28%)</title><rect x="502.8" y="1059.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="505.8" y="1070.0"></text>
</g>
<g>
<title>JVM_Sleep (56 samples, 15.91%)</title><rect x="506.1" y="1075.0" width="187.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="509.1" y="1086.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.57%)</title><rect x="516.2" y="1059.0" width="6.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="519.2" y="1070.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.28%)</title><rect x="522.9" y="1059.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="525.9" y="1070.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.85%)</title><rect x="526.3" y="1059.0" width="10.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="529.3" y="1070.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 1.42%)</title><rect x="536.3" y="1059.0" width="16.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="539.3" y="1070.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.57%)</title><rect x="546.4" y="1043.0" width="6.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="549.4" y="1054.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.28%)</title><rect x="553.1" y="1059.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="556.1" y="1070.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (41 samples, 11.65%)</title><rect x="556.4" y="1059.0" width="137.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="559.4" y="1070.0">os::sleep(Thread*..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.85%)</title><rect x="573.2" y="1043.0" width="10.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="576.2" y="1054.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.57%)</title><rect x="576.5" y="1027.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="579.5" y="1038.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.57%)</title><rect x="583.2" y="1043.0" width="6.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="586.2" y="1054.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.28%)</title><rect x="586.6" y="1027.0" width="3.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="589.6" y="1038.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 1.14%)</title><rect x="589.9" y="1043.0" width="13.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="592.9" y="1054.0"></text>
</g>
<g>
<title>__pthread_cond_init (1 samples, 0.28%)</title><rect x="603.4" y="1043.0" width="3.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="606.4" y="1054.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (16 samples, 4.55%)</title><rect x="606.7" y="1043.0" width="53.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="609.7" y="1054.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.57%)</title><rect x="660.3" y="1043.0" width="6.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="663.3" y="1054.0"></text>
</g>
<g>
<title>_init (2 samples, 0.57%)</title><rect x="667.0" y="1043.0" width="6.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="670.0" y="1054.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (5 samples, 1.42%)</title><rect x="673.8" y="1043.0" width="16.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="676.8" y="1054.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.28%)</title><rect x="690.5" y="1043.0" width="3.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="693.5" y="1054.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.28%)</title><rect x="693.9" y="1075.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="696.9" y="1086.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.57%)</title><rect x="697.2" y="1091.0" width="6.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="700.2" y="1102.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.57%)</title><rect x="697.2" y="1075.0" width="6.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="700.2" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.57%)</title><rect x="703.9" y="1123.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="706.9" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.57%)</title><rect x="703.9" y="1107.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="706.9" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.57%)</title><rect x="703.9" y="1091.0" width="6.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="706.9" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.57%)</title><rect x="703.9" y="1075.0" width="6.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="706.9" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.57%)</title><rect x="703.9" y="1059.0" width="6.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="706.9" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.28%)</title><rect x="710.6" y="1155.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="713.6" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.28%)</title><rect x="710.6" y="1139.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="713.6" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.28%)</title><rect x="714.0" y="1155.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="717.0" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (15 samples, 4.26%)</title><rect x="717.3" y="1187.0" width="50.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="720.3" y="1198.0">java/..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.57%)</title><rect x="737.4" y="1171.0" width="6.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="740.4" y="1182.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.28%)</title><rect x="740.8" y="1155.0" width="3.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="743.8" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (7 samples, 1.99%)</title><rect x="744.1" y="1171.0" width="23.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="747.1" y="1182.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 1.99%)</title><rect x="744.1" y="1155.0" width="23.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="747.1" y="1166.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$294/698304710.accept (7 samples, 1.99%)</title><rect x="744.1" y="1139.0" width="23.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="747.1" y="1150.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$61 (7 samples, 1.99%)</title><rect x="744.1" y="1123.0" width="23.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="747.1" y="1134.0">c..</text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (7 samples, 1.99%)</title><rect x="744.1" y="1107.0" width="23.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="747.1" y="1118.0">i..</text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (7 samples, 1.99%)</title><rect x="744.1" y="1091.0" width="23.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="747.1" y="1102.0">i..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.57%)</title><rect x="760.9" y="1075.0" width="6.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="763.9" y="1086.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.57%)</title><rect x="760.9" y="1059.0" width="6.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="763.9" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 3.69%)</title><rect x="767.6" y="1203.0" width="43.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="770.6" y="1214.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (9 samples, 2.56%)</title><rect x="781.0" y="1187.0" width="30.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="784.0" y="1198.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (9 samples, 2.56%)</title><rect x="781.0" y="1171.0" width="30.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="784.0" y="1182.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$298/541524311.accept (9 samples, 2.56%)</title><rect x="781.0" y="1155.0" width="30.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="784.0" y="1166.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$60 (9 samples, 2.56%)</title><rect x="781.0" y="1139.0" width="30.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="784.0" y="1150.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$277/1436187137.complete (9 samples, 2.56%)</title><rect x="781.0" y="1123.0" width="30.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="784.0" y="1134.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$37 (9 samples, 2.56%)</title><rect x="781.0" y="1107.0" width="30.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="784.0" y="1118.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$276/508067274.complete (9 samples, 2.56%)</title><rect x="781.0" y="1091.0" width="30.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="784.0" y="1102.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$65 (9 samples, 2.56%)</title><rect x="781.0" y="1075.0" width="30.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="784.0" y="1086.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (9 samples, 2.56%)</title><rect x="781.0" y="1059.0" width="30.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="784.0" y="1070.0">co..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (9 samples, 2.56%)</title><rect x="781.0" y="1043.0" width="30.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="784.0" y="1054.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (9 samples, 2.56%)</title><rect x="781.0" y="1027.0" width="30.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="784.0" y="1038.0">ch..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (4 samples, 1.14%)</title><rect x="811.2" y="1219.0" width="13.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="814.2" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.28%)</title><rect x="824.6" y="1267.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="827.6" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.28%)</title><rect x="824.6" y="1251.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="827.6" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.28%)</title><rect x="824.6" y="1235.0" width="3.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="827.6" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.28%)</title><rect x="824.6" y="1219.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="827.6" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (8 samples, 2.27%)</title><rect x="828.0" y="1267.0" width="26.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="831.0" y="1278.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (5 samples, 1.42%)</title><rect x="838.0" y="1251.0" width="16.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="841.0" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 1.14%)</title><rect x="841.4" y="1235.0" width="13.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="844.4" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 1.14%)</title><rect x="841.4" y="1219.0" width="13.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="844.4" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 1.14%)</title><rect x="841.4" y="1203.0" width="13.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="844.4" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 1.14%)</title><rect x="841.4" y="1187.0" width="13.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="844.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.28%)</title><rect x="854.8" y="1315.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="857.8" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.28%)</title><rect x="854.8" y="1299.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="857.8" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.28%)</title><rect x="854.8" y="1283.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="857.8" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.failExpiredRequests (1 samples, 0.28%)</title><rect x="854.8" y="1267.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="857.8" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.removeExpiredRequests (1 samples, 0.28%)</title><rect x="854.8" y="1251.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="857.8" y="1262.0"></text>
</g>
<g>
<title>start_thread (99 samples, 28.13%)</title><rect x="858.1" y="1315.0" width="331.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="861.1" y="1326.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (99 samples, 28.13%)</title><rect x="858.1" y="1299.0" width="331.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="861.1" y="1310.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (21 samples, 5.97%)</title><rect x="858.1" y="1283.0" width="70.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="861.1" y="1294.0">GangWork..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (21 samples, 5.97%)</title><rect x="858.1" y="1267.0" width="70.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="861.1" y="1278.0">G1ParTas..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (20 samples, 5.68%)</title><rect x="858.1" y="1251.0" width="67.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="861.1" y="1262.0">G1ParEv..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (18 samples, 5.11%)</title><rect x="858.1" y="1235.0" width="60.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="861.1" y="1246.0">G1ParS..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (9 samples, 2.56%)</title><rect x="884.9" y="1219.0" width="30.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="887.9" y="1230.0">G1..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (2 samples, 0.57%)</title><rect x="908.4" y="1203.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="911.4" y="1214.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.28%)</title><rect x="915.1" y="1219.0" width="3.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="918.1" y="1230.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (2 samples, 0.57%)</title><rect x="918.5" y="1235.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="921.5" y="1246.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.28%)</title><rect x="925.2" y="1251.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="928.2" y="1262.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.28%)</title><rect x="925.2" y="1235.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="928.2" y="1246.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (1 samples, 0.28%)</title><rect x="925.2" y="1219.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="928.2" y="1230.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (1 samples, 0.28%)</title><rect x="925.2" y="1203.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="928.2" y="1214.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.28%)</title><rect x="925.2" y="1187.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="928.2" y="1198.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (1 samples, 0.28%)</title><rect x="925.2" y="1171.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="928.2" y="1182.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.28%)</title><rect x="925.2" y="1155.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="928.2" y="1166.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.28%)</title><rect x="925.2" y="1139.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="928.2" y="1150.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.28%)</title><rect x="925.2" y="1123.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="928.2" y="1134.0"></text>
</g>
<g>
<title>JavaThread::run() (77 samples, 21.88%)</title><rect x="928.5" y="1283.0" width="258.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="931.5" y="1294.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (77 samples, 21.88%)</title><rect x="928.5" y="1267.0" width="258.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="931.5" y="1278.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (77 samples, 21.88%)</title><rect x="928.5" y="1251.0" width="258.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="931.5" y="1262.0">CompileBroker::compiler_thread_loo..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (77 samples, 21.88%)</title><rect x="928.5" y="1235.0" width="258.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="931.5" y="1246.0">CompileBroker::invoke_compiler_on_..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (73 samples, 20.74%)</title><rect x="928.5" y="1219.0" width="244.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="931.5" y="1230.0">C2Compiler::compile_method(ciEnv..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (73 samples, 20.74%)</title><rect x="928.5" y="1203.0" width="244.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="931.5" y="1214.0">Compile::Compile(ciEnv*, C2Compi..</text>
</g>
<g>
<title>Compile::Code_Gen() (41 samples, 11.65%)</title><rect x="928.5" y="1187.0" width="137.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="931.5" y="1198.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.28%)</title><rect x="928.5" y="1171.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="931.5" y="1182.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.28%)</title><rect x="928.5" y="1155.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="931.5" y="1166.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.57%)</title><rect x="931.9" y="1171.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="934.9" y="1182.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.57%)</title><rect x="931.9" y="1155.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="934.9" y="1166.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.28%)</title><rect x="931.9" y="1139.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="934.9" y="1150.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.28%)</title><rect x="931.9" y="1123.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="934.9" y="1134.0"></text>
</g>
<g>
<title>DebugInformationRecorder::dump_object_pool(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.28%)</title><rect x="935.2" y="1139.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="938.2" y="1150.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.28%)</title><rect x="935.2" y="1123.0" width="3.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="938.2" y="1134.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 1.14%)</title><rect x="938.6" y="1171.0" width="13.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="941.6" y="1182.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 1.14%)</title><rect x="938.6" y="1155.0" width="13.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="941.6" y="1166.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.28%)</title><rect x="945.3" y="1139.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="948.3" y="1150.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.28%)</title><rect x="948.6" y="1139.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="951.6" y="1150.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.28%)</title><rect x="948.6" y="1123.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="951.6" y="1134.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.28%)</title><rect x="948.6" y="1107.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="951.6" y="1118.0"></text>
</g>
<g>
<title>cmpFastUnlockNode::Expand(State*, Node_List&amp;, Node*) (1 samples, 0.28%)</title><rect x="948.6" y="1091.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="951.6" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.57%)</title><rect x="952.0" y="1171.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="955.0" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::build_dominator_tree() (1 samples, 0.28%)</title><rect x="952.0" y="1155.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="955.0" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.28%)</title><rect x="955.3" y="1155.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="958.3" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.28%)</title><rect x="955.3" y="1139.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="958.3" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.28%)</title><rect x="955.3" y="1123.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="958.3" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (32 samples, 9.09%)</title><rect x="958.7" y="1171.0" width="107.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="961.7" y="1182.0">PhaseChaitin:..</text>
</g>
<g>
<title>MachNode::Opcode() const (1 samples, 0.28%)</title><rect x="958.7" y="1155.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="961.7" y="1166.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.28%)</title><rect x="962.0" y="1155.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="965.0" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (5 samples, 1.42%)</title><rect x="965.4" y="1155.0" width="16.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="968.4" y="1166.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (3 samples, 0.85%)</title><rect x="968.8" y="1139.0" width="10.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="971.8" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.28%)</title><rect x="975.5" y="1123.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="978.5" y="1134.0"></text>
</g>
<g>
<title>find_hihghest_bit(unsigned int) (1 samples, 0.28%)</title><rect x="978.8" y="1139.0" width="3.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="981.8" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.28%)</title><rect x="982.2" y="1155.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="985.2" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 0.85%)</title><rect x="985.5" y="1155.0" width="10.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="988.5" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 1.42%)</title><rect x="995.6" y="1155.0" width="16.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="998.6" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.28%)</title><rect x="998.9" y="1139.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1001.9" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.85%)</title><rect x="1002.3" y="1139.0" width="10.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1005.3" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.28%)</title><rect x="1012.3" y="1155.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1015.3" y="1166.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.28%)</title><rect x="1012.3" y="1139.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1015.3" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.28%)</title><rect x="1015.7" y="1155.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1018.7" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.28%)</title><rect x="1019.0" y="1155.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1022.0" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.28%)</title><rect x="1019.0" y="1139.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1022.0" y="1150.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (4 samples, 1.14%)</title><rect x="1022.4" y="1155.0" width="13.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1025.4" y="1166.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (4 samples, 1.14%)</title><rect x="1022.4" y="1139.0" width="13.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1025.4" y="1150.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (3 samples, 0.85%)</title><rect x="1025.7" y="1123.0" width="10.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1028.7" y="1134.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (3 samples, 0.85%)</title><rect x="1025.7" y="1107.0" width="10.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1028.7" y="1118.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.28%)</title><rect x="1035.8" y="1155.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1038.8" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.28%)</title><rect x="1035.8" y="1139.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1038.8" y="1150.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.57%)</title><rect x="1039.1" y="1155.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1042.1" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.28%)</title><rect x="1042.5" y="1139.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1045.5" y="1150.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.28%)</title><rect x="1045.9" y="1155.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1048.9" y="1166.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 1.42%)</title><rect x="1049.2" y="1155.0" width="16.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1052.2" y="1166.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.28%)</title><rect x="1052.6" y="1139.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1055.6" y="1150.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.85%)</title><rect x="1055.9" y="1139.0" width="10.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1058.9" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.57%)</title><rect x="1059.3" y="1123.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1062.3" y="1134.0"></text>
</g>
<g>
<title>Compile::Optimize() (24 samples, 6.82%)</title><rect x="1066.0" y="1187.0" width="80.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1069.0" y="1198.0">Compile::..</text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.28%)</title><rect x="1066.0" y="1171.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1069.0" y="1182.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (1 samples, 0.28%)</title><rect x="1066.0" y="1155.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1069.0" y="1166.0"></text>
</g>
<g>
<title>LateInlineCallGenerator::do_late_inline() (1 samples, 0.28%)</title><rect x="1066.0" y="1139.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1069.0" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1066.0" y="1123.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1069.0" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1066.0" y="1107.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1069.0" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1066.0" y="1091.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1069.0" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1066.0" y="1075.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1069.0" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1066.0" y="1059.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1069.0" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1066.0" y="1043.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1069.0" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1066.0" y="1027.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1069.0" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1066.0" y="1011.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1069.0" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1066.0" y="995.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1069.0" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1066.0" y="979.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1069.0" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1066.0" y="963.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1069.0" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1066.0" y="947.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1069.0" y="958.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.28%)</title><rect x="1066.0" y="931.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1069.0" y="942.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.28%)</title><rect x="1066.0" y="915.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1069.0" y="926.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.28%)</title><rect x="1066.0" y="899.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1069.0" y="910.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.28%)</title><rect x="1066.0" y="883.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1069.0" y="894.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.28%)</title><rect x="1066.0" y="867.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1069.0" y="878.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, KlassHandle&amp;, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.28%)</title><rect x="1066.0" y="851.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1069.0" y="862.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_static_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.28%)</title><rect x="1066.0" y="835.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1069.0" y="846.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.28%)</title><rect x="1066.0" y="819.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1069.0" y="830.0"></text>
</g>
<g>
<title>LinkResolver::check_method_accessability(KlassHandle, KlassHandle, KlassHandle, methodHandle, Thread*) (1 samples, 0.28%)</title><rect x="1066.0" y="803.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1069.0" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::vtable_length() const (1 samples, 0.28%)</title><rect x="1066.0" y="787.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1069.0" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (18 samples, 5.11%)</title><rect x="1069.3" y="1171.0" width="60.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1072.3" y="1182.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.28%)</title><rect x="1069.3" y="1155.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1072.3" y="1166.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.28%)</title><rect x="1069.3" y="1139.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1072.3" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.28%)</title><rect x="1072.7" y="1155.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1075.7" y="1166.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.28%)</title><rect x="1072.7" y="1139.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1075.7" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (12 samples, 3.41%)</title><rect x="1076.0" y="1155.0" width="40.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1079.0" y="1166.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (9 samples, 2.56%)</title><rect x="1086.1" y="1139.0" width="30.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1089.1" y="1150.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (8 samples, 2.27%)</title><rect x="1089.4" y="1123.0" width="26.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1092.4" y="1134.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.28%)</title><rect x="1116.2" y="1155.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1119.2" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.28%)</title><rect x="1116.2" y="1139.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1119.2" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.28%)</title><rect x="1119.6" y="1155.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1122.6" y="1166.0"></text>
</g>
<g>
<title>StorePNode::Opcode() const (1 samples, 0.28%)</title><rect x="1119.6" y="1139.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1122.6" y="1150.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (2 samples, 0.57%)</title><rect x="1123.0" y="1155.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1126.0" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.85%)</title><rect x="1129.7" y="1171.0" width="10.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1132.7" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.85%)</title><rect x="1129.7" y="1155.0" width="10.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1132.7" y="1166.0"></text>
</g>
<g>
<title>DecodeNNode::Value(PhaseTransform*) const (1 samples, 0.28%)</title><rect x="1129.7" y="1139.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1132.7" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.28%)</title><rect x="1133.0" y="1139.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1136.0" y="1150.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.28%)</title><rect x="1136.4" y="1139.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1139.4" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.28%)</title><rect x="1136.4" y="1123.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1139.4" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.28%)</title><rect x="1136.4" y="1107.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1139.4" y="1118.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.28%)</title><rect x="1136.4" y="1091.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1139.4" y="1102.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.28%)</title><rect x="1139.7" y="1171.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1142.7" y="1182.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.28%)</title><rect x="1139.7" y="1155.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1142.7" y="1166.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="1139.7" y="1139.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1142.7" y="1150.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.28%)</title><rect x="1139.7" y="1123.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1142.7" y="1134.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.28%)</title><rect x="1139.7" y="1107.0" width="3.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1142.7" y="1118.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.28%)</title><rect x="1143.1" y="1171.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1146.1" y="1182.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.28%)</title><rect x="1143.1" y="1155.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1146.1" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.28%)</title><rect x="1143.1" y="1139.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1146.1" y="1150.0"></text>
</g>
<g>
<title>Node::del_req(unsigned int) (1 samples, 0.28%)</title><rect x="1143.1" y="1123.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1146.1" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 2.27%)</title><rect x="1146.4" y="1187.0" width="26.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.4" y="1198.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 2.27%)</title><rect x="1146.4" y="1171.0" width="26.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1149.4" y="1182.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 1.99%)</title><rect x="1146.4" y="1155.0" width="23.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.4" y="1166.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 1.99%)</title><rect x="1146.4" y="1139.0" width="23.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1149.4" y="1150.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 1.99%)</title><rect x="1146.4" y="1123.0" width="23.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1149.4" y="1134.0">P..</text>
</g>
<g>
<title>Parse::do_call() (7 samples, 1.99%)</title><rect x="1146.4" y="1107.0" width="23.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1149.4" y="1118.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.28%)</title><rect x="1146.4" y="1091.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1149.4" y="1102.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.28%)</title><rect x="1146.4" y="1075.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1149.4" y="1086.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.28%)</title><rect x="1146.4" y="1059.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1149.4" y="1070.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.28%)</title><rect x="1146.4" y="1043.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1149.4" y="1054.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.28%)</title><rect x="1146.4" y="1027.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1149.4" y="1038.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.28%)</title><rect x="1146.4" y="1011.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1149.4" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.42%)</title><rect x="1149.8" y="1091.0" width="16.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.8" y="1102.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.42%)</title><rect x="1149.8" y="1075.0" width="16.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.8" y="1086.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.42%)</title><rect x="1149.8" y="1059.0" width="16.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.8" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.42%)</title><rect x="1149.8" y="1043.0" width="16.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.8" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.42%)</title><rect x="1149.8" y="1027.0" width="16.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.8" y="1038.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.42%)</title><rect x="1149.8" y="1011.0" width="16.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1152.8" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.57%)</title><rect x="1149.8" y="995.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1152.8" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.57%)</title><rect x="1149.8" y="979.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.8" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.57%)</title><rect x="1149.8" y="963.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.8" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.57%)</title><rect x="1149.8" y="947.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.8" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.57%)</title><rect x="1149.8" y="931.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.8" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1149.8" y="915.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1152.8" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1149.8" y="899.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1152.8" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1149.8" y="883.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.8" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1149.8" y="867.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1152.8" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1149.8" y="851.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.8" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1149.8" y="835.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1149.8" y="819.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.8" y="830.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.28%)</title><rect x="1149.8" y="803.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.8" y="814.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.28%)</title><rect x="1149.8" y="787.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1152.8" y="798.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.28%)</title><rect x="1149.8" y="771.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1152.8" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.28%)</title><rect x="1149.8" y="755.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1152.8" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.28%)</title><rect x="1149.8" y="739.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1152.8" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.28%)</title><rect x="1149.8" y="723.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1152.8" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.28%)</title><rect x="1149.8" y="707.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.8" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.28%)</title><rect x="1149.8" y="691.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.8" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.28%)</title><rect x="1149.8" y="675.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.8" y="686.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.28%)</title><rect x="1149.8" y="659.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.8" y="670.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.28%)</title><rect x="1149.8" y="643.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1152.8" y="654.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.28%)</title><rect x="1149.8" y="627.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1152.8" y="638.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.28%)</title><rect x="1149.8" y="611.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.8" y="622.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.28%)</title><rect x="1149.8" y="595.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.8" y="606.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.28%)</title><rect x="1149.8" y="579.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.8" y="590.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.28%)</title><rect x="1149.8" y="563.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.8" y="574.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.28%)</title><rect x="1149.8" y="547.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.8" y="558.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.28%)</title><rect x="1149.8" y="531.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.8" y="542.0"></text>
</g>
<g>
<title>SystemDictionary::find_instance_or_array_klass(Symbol*, Handle, Handle, Thread*) (1 samples, 0.28%)</title><rect x="1149.8" y="515.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.8" y="526.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.28%)</title><rect x="1149.8" y="499.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.8" y="510.0"></text>
</g>
<g>
<title>Dictionary::find(int, unsigned int, Symbol*, ClassLoaderData*, Handle, Thread*) (1 samples, 0.28%)</title><rect x="1149.8" y="483.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.28%)</title><rect x="1153.1" y="915.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1156.1" y="926.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.28%)</title><rect x="1153.1" y="899.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.1" y="910.0"></text>
</g>
<g>
<title>GraphKit::cast_not_null(Node*, bool) (1 samples, 0.28%)</title><rect x="1153.1" y="883.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.1" y="894.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.28%)</title><rect x="1153.1" y="867.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1156.1" y="878.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.28%)</title><rect x="1153.1" y="851.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.1" y="862.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.28%)</title><rect x="1153.1" y="835.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.1" y="846.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.28%)</title><rect x="1153.1" y="819.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1156.1" y="830.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.28%)</title><rect x="1153.1" y="803.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.1" y="814.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.85%)</title><rect x="1156.5" y="995.0" width="10.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.5" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.85%)</title><rect x="1156.5" y="979.0" width="10.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.5" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.85%)</title><rect x="1156.5" y="963.0" width="10.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.5" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.85%)</title><rect x="1156.5" y="947.0" width="10.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.5" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.85%)</title><rect x="1156.5" y="931.0" width="10.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.5" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.85%)</title><rect x="1156.5" y="915.0" width="10.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.5" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.85%)</title><rect x="1156.5" y="899.0" width="10.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.5" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.85%)</title><rect x="1156.5" y="883.0" width="10.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.5" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.85%)</title><rect x="1156.5" y="867.0" width="10.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.5" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.85%)</title><rect x="1156.5" y="851.0" width="10.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.5" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.85%)</title><rect x="1156.5" y="835.0" width="10.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.5" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.85%)</title><rect x="1156.5" y="819.0" width="10.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.5" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.85%)</title><rect x="1156.5" y="803.0" width="10.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.5" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.85%)</title><rect x="1156.5" y="787.0" width="10.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1159.5" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.85%)</title><rect x="1156.5" y="771.0" width="10.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.5" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.85%)</title><rect x="1156.5" y="755.0" width="10.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.5" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.85%)</title><rect x="1156.5" y="739.0" width="10.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.5" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.85%)</title><rect x="1156.5" y="723.0" width="10.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.5" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.85%)</title><rect x="1156.5" y="707.0" width="10.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.5" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.85%)</title><rect x="1156.5" y="691.0" width="10.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.5" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.85%)</title><rect x="1156.5" y="675.0" width="10.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.5" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.85%)</title><rect x="1156.5" y="659.0" width="10.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.5" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.85%)</title><rect x="1156.5" y="643.0" width="10.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.5" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.85%)</title><rect x="1156.5" y="627.0" width="10.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.5" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.85%)</title><rect x="1156.5" y="611.0" width="10.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.5" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.85%)</title><rect x="1156.5" y="595.0" width="10.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.5" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.85%)</title><rect x="1156.5" y="579.0" width="10.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.85%)</title><rect x="1156.5" y="563.0" width="10.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.85%)</title><rect x="1156.5" y="547.0" width="10.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.85%)</title><rect x="1156.5" y="531.0" width="10.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1159.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.85%)</title><rect x="1156.5" y="515.0" width="10.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1159.5" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.85%)</title><rect x="1156.5" y="499.0" width="10.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1159.5" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.85%)</title><rect x="1156.5" y="483.0" width="10.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.85%)</title><rect x="1156.5" y="467.0" width="10.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.85%)</title><rect x="1156.5" y="451.0" width="10.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.85%)</title><rect x="1156.5" y="435.0" width="10.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.85%)</title><rect x="1156.5" y="419.0" width="10.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.5" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.57%)</title><rect x="1156.5" y="403.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.5" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.57%)</title><rect x="1156.5" y="387.0" width="6.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.57%)</title><rect x="1156.5" y="371.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1156.5" y="355.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1156.5" y="339.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.5" y="350.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.28%)</title><rect x="1156.5" y="323.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.28%)</title><rect x="1156.5" y="307.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.5" y="318.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.28%)</title><rect x="1156.5" y="291.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.5" y="302.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.28%)</title><rect x="1156.5" y="275.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.5" y="286.0"></text>
</g>
<g>
<title>IdealKit::store(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.28%)</title><rect x="1156.5" y="259.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1159.5" y="270.0"></text>
</g>
<g>
<title>StoreNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd) (1 samples, 0.28%)</title><rect x="1156.5" y="243.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.5" y="254.0"></text>
</g>
<g>
<title>StoreNode::StoreNode(Node*, Node*, Node*, TypePtr const*, Node*, MemNode::MemOrd) (1 samples, 0.28%)</title><rect x="1156.5" y="227.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.5" y="238.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*, Node*) (1 samples, 0.28%)</title><rect x="1156.5" y="211.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.5" y="222.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.28%)</title><rect x="1159.8" y="355.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.8" y="366.0"></text>
</g>
<g>
<title>Compile::record_for_igvn(Node*) (1 samples, 0.28%)</title><rect x="1159.8" y="339.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.8" y="350.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1163.2" y="403.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.2" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1163.2" y="387.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1166.2" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1163.2" y="371.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1163.2" y="355.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.2" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1163.2" y="339.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.2" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1163.2" y="323.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1163.2" y="307.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.2" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1163.2" y="291.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.2" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1163.2" y="275.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.2" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1163.2" y="259.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.2" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1163.2" y="243.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.2" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1163.2" y="227.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1166.2" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1163.2" y="211.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.2" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1163.2" y="195.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.2" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1163.2" y="179.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.2" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1163.2" y="163.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.2" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1163.2" y="147.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.2" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1163.2" y="131.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.2" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1163.2" y="115.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.2" y="126.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.28%)</title><rect x="1163.2" y="99.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.2" y="110.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.28%)</title><rect x="1163.2" y="83.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.2" y="94.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.28%)</title><rect x="1163.2" y="67.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.2" y="78.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.28%)</title><rect x="1163.2" y="51.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.2" y="62.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.28%)</title><rect x="1163.2" y="35.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.2" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1166.5" y="1091.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1169.5" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1166.5" y="1075.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.5" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1166.5" y="1059.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.5" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1166.5" y="1043.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.5" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1166.5" y="1027.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.5" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1166.5" y="1011.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.5" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1166.5" y="995.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.5" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1166.5" y="979.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.5" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1166.5" y="963.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.5" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1166.5" y="947.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.5" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1166.5" y="931.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.5" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1166.5" y="915.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.5" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1166.5" y="899.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.5" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1166.5" y="883.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.5" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1166.5" y="867.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.5" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1166.5" y="851.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.5" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1166.5" y="835.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.5" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1166.5" y="819.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.5" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1166.5" y="803.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.5" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1166.5" y="787.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.5" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1166.5" y="771.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.5" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1166.5" y="755.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.5" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1166.5" y="739.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.5" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1166.5" y="723.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.5" y="734.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.28%)</title><rect x="1166.5" y="707.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.5" y="718.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.28%)</title><rect x="1166.5" y="691.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.5" y="702.0"></text>
</g>
<g>
<title>Parse::load_interpreter_state(Node*) (1 samples, 0.28%)</title><rect x="1169.9" y="1155.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.9" y="1166.0"></text>
</g>
<g>
<title>ciMethod::live_local_oops_at_bci(int) (1 samples, 0.28%)</title><rect x="1169.9" y="1139.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.9" y="1150.0"></text>
</g>
<g>
<title>OopMapCache::compute_one_oop_map(methodHandle, int, InterpreterOopMap*) (1 samples, 0.28%)</title><rect x="1169.9" y="1123.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.9" y="1134.0"></text>
</g>
<g>
<title>OopMapCacheEntry::fill(methodHandle, int) (1 samples, 0.28%)</title><rect x="1169.9" y="1107.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.9" y="1118.0"></text>
</g>
<g>
<title>OopMapForCacheEntry::compute_map(Thread*) (1 samples, 0.28%)</title><rect x="1169.9" y="1091.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.9" y="1102.0"></text>
</g>
<g>
<title>GenerateOopMap::compute_map(Thread*) (1 samples, 0.28%)</title><rect x="1169.9" y="1075.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.9" y="1086.0"></text>
</g>
<g>
<title>GenerateOopMap::mark_bbheaders_and_count_gc_points() (1 samples, 0.28%)</title><rect x="1169.9" y="1059.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.9" y="1070.0"></text>
</g>
<g>
<title>GenerateOopMap::jump_targets_do(BytecodeStream*, void (*)(GenerateOopMap*, int, int*), int*) (1 samples, 0.28%)</title><rect x="1169.9" y="1043.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.9" y="1054.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (4 samples, 1.14%)</title><rect x="1173.2" y="1219.0" width="13.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.2" y="1230.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (4 samples, 1.14%)</title><rect x="1173.2" y="1203.0" width="13.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.2" y="1214.0"></text>
</g>
<g>
<title>Compilation::compile_method() (4 samples, 1.14%)</title><rect x="1173.2" y="1187.0" width="13.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.2" y="1198.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.85%)</title><rect x="1173.2" y="1171.0" width="10.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.2" y="1182.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.28%)</title><rect x="1173.2" y="1155.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.2" y="1166.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.28%)</title><rect x="1173.2" y="1139.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.2" y="1150.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.28%)</title><rect x="1173.2" y="1123.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.2" y="1134.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.28%)</title><rect x="1173.2" y="1107.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.2" y="1118.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.28%)</title><rect x="1173.2" y="1091.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.2" y="1102.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.28%)</title><rect x="1173.2" y="1075.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.2" y="1086.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.28%)</title><rect x="1173.2" y="1059.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.2" y="1070.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.28%)</title><rect x="1173.2" y="1043.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.2" y="1054.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.28%)</title><rect x="1173.2" y="1027.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.2" y="1038.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.28%)</title><rect x="1173.2" y="1011.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.2" y="1022.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.28%)</title><rect x="1173.2" y="995.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.2" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.28%)</title><rect x="1173.2" y="979.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.2" y="990.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.28%)</title><rect x="1173.2" y="963.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.2" y="974.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.28%)</title><rect x="1173.2" y="947.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.2" y="958.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.28%)</title><rect x="1173.2" y="931.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.2" y="942.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.28%)</title><rect x="1173.2" y="915.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.2" y="926.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.28%)</title><rect x="1173.2" y="899.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.2" y="910.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.28%)</title><rect x="1173.2" y="883.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.2" y="894.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.28%)</title><rect x="1173.2" y="867.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.2" y="878.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.28%)</title><rect x="1173.2" y="851.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.2" y="862.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.28%)</title><rect x="1176.6" y="1155.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.6" y="1166.0"></text>
</g>
<g>
<title>Compilation::emit_code_epilog(LIR_Assembler*) (1 samples, 0.28%)</title><rect x="1176.6" y="1139.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.6" y="1150.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_exception_handler() (1 samples, 0.28%)</title><rect x="1176.6" y="1123.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.6" y="1134.0"></text>
</g>
<g>
<title>MacroAssembler::stop(char const*) (1 samples, 0.28%)</title><rect x="1176.6" y="1107.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.6" y="1118.0"></text>
</g>
<g>
<title>AddressLiteral::AddressLiteral(unsigned char*, relocInfo::relocType) (1 samples, 0.28%)</title><rect x="1176.6" y="1091.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.6" y="1102.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.28%)</title><rect x="1179.9" y="1155.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.9" y="1166.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.28%)</title><rect x="1179.9" y="1139.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.9" y="1150.0"></text>
</g>
<g>
<title>LinearScan::compute_local_live_sets() (1 samples, 0.28%)</title><rect x="1179.9" y="1123.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.9" y="1134.0"></text>
</g>
<g>
<title>LIR_OpVisitState::visit(LIR_Op*) (1 samples, 0.28%)</title><rect x="1179.9" y="1107.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.9" y="1118.0"></text>
</g>
<g>
<title>LIR_OpVisitState::do_input(LIR_OprDesc*&amp;) (1 samples, 0.28%)</title><rect x="1179.9" y="1091.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.9" y="1102.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.28%)</title><rect x="1183.3" y="1171.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.3" y="1182.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.28%)</title><rect x="1183.3" y="1155.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.3" y="1166.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.28%)</title><rect x="1183.3" y="1139.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.3" y="1150.0"></text>
</g>
<g>
<title>CodeBuffer::finalize_oop_references(methodHandle) (1 samples, 0.28%)</title><rect x="1183.3" y="1123.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.3" y="1134.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.28%)</title><rect x="1186.6" y="1283.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.6" y="1294.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (1 samples, 0.28%)</title><rect x="1186.6" y="1267.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.6" y="1278.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.28%)</title><rect x="1186.6" y="1251.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.6" y="1262.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.28%)</title><rect x="1186.6" y="1235.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.6" y="1246.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (1 samples, 0.28%)</title><rect x="1186.6" y="1219.0" width="3.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1189.6" y="1230.0"></text>
</g>
</g>
</svg>
