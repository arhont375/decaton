<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1462" onload="init(evt)" viewBox="0 0 1200 1462" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1445"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1445"> </text>
<g id="frames">
<g>
<title>all (1,136 samples, 100.00%)</title><rect x="10.0" y="1411.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1422.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (277 samples, 24.38%)</title><rect x="10.0" y="1395.0" width="287.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1406.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (277 samples, 24.38%)</title><rect x="10.0" y="1379.0" width="287.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1390.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.09%)</title><rect x="10.0" y="1363.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (1 samples, 0.09%)</title><rect x="10.0" y="1347.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="10.0" y="1331.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="10.0" y="1315.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="10.0" y="1299.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.09%)</title><rect x="11.0" y="1363.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.0" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.09%)</title><rect x="11.0" y="1347.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.0" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (4 samples, 0.35%)</title><rect x="12.1" y="1363.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.1" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (4 samples, 0.35%)</title><rect x="12.1" y="1347.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.1" y="1358.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (4 samples, 0.35%)</title><rect x="12.1" y="1331.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.1" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$260/1200155576.accept (4 samples, 0.35%)</title><rect x="12.1" y="1315.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.1" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (4 samples, 0.35%)</title><rect x="12.1" y="1299.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.1" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (4 samples, 0.35%)</title><rect x="12.1" y="1283.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.1" y="1294.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (4 samples, 0.35%)</title><rect x="12.1" y="1267.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="15.1" y="1278.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.09%)</title><rect x="15.2" y="1251.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="18.2" y="1262.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.09%)</title><rect x="15.2" y="1235.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.2" y="1246.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (210 samples, 18.49%)</title><rect x="16.2" y="1363.0" width="218.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.2" y="1374.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$259/2013899415.accept (195 samples, 17.17%)</title><rect x="16.2" y="1347.0" width="202.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.2" y="1358.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (192 samples, 16.90%)</title><rect x="19.3" y="1331.0" width="199.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="22.3" y="1342.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (151 samples, 13.29%)</title><rect x="22.5" y="1315.0" width="156.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.5" y="1326.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (151 samples, 13.29%)</title><rect x="22.5" y="1299.0" width="156.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="25.5" y="1310.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (151 samples, 13.29%)</title><rect x="22.5" y="1283.0" width="156.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.5" y="1294.0">com/linecorp/decaton..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (151 samples, 13.29%)</title><rect x="22.5" y="1267.0" width="156.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="25.5" y="1278.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (151 samples, 13.29%)</title><rect x="22.5" y="1251.0" width="156.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.5" y="1262.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (151 samples, 13.29%)</title><rect x="22.5" y="1235.0" width="156.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.5" y="1246.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (86 samples, 7.57%)</title><rect x="84.8" y="1219.0" width="89.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="87.8" y="1230.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (20 samples, 1.76%)</title><rect x="85.8" y="1203.0" width="20.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="88.8" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (20 samples, 1.76%)</title><rect x="85.8" y="1187.0" width="20.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="88.8" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (20 samples, 1.76%)</title><rect x="85.8" y="1171.0" width="20.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="88.8" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (65 samples, 5.72%)</title><rect x="106.6" y="1203.0" width="67.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="109.6" y="1214.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (65 samples, 5.72%)</title><rect x="106.6" y="1187.0" width="67.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="109.6" y="1198.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (65 samples, 5.72%)</title><rect x="106.6" y="1171.0" width="67.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="109.6" y="1182.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (65 samples, 5.72%)</title><rect x="106.6" y="1155.0" width="67.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="109.6" y="1166.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.09%)</title><rect x="106.6" y="1139.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="109.6" y="1150.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (64 samples, 5.63%)</title><rect x="107.6" y="1139.0" width="66.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="110.6" y="1150.0">sun/mis..</text>
</g>
<g>
<title>Unsafe_Unpark (59 samples, 5.19%)</title><rect x="108.7" y="1123.0" width="61.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="111.7" y="1134.0">Unsafe..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="108.7" y="1107.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="111.7" y="1118.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.09%)</title><rect x="109.7" y="1107.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="112.7" y="1118.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="110.8" y="1107.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="113.8" y="1118.0"></text>
</g>
<g>
<title>__pthread_cond_signal (36 samples, 3.17%)</title><rect x="111.8" y="1107.0" width="37.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="114.8" y="1118.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.18%)</title><rect x="149.2" y="1107.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="152.2" y="1118.0"></text>
</g>
<g>
<title>pthread_mutex_lock (18 samples, 1.58%)</title><rect x="151.3" y="1107.0" width="18.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="154.3" y="1118.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.26%)</title><rect x="170.0" y="1123.0" width="3.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="173.0" y="1134.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.09%)</title><rect x="173.1" y="1123.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="176.1" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.09%)</title><rect x="174.1" y="1219.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="177.1" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.09%)</title><rect x="174.1" y="1203.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="177.1" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.09%)</title><rect x="174.1" y="1187.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="177.1" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.09%)</title><rect x="175.2" y="1219.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="178.2" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.09%)</title><rect x="175.2" y="1203.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="178.2" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.09%)</title><rect x="175.2" y="1187.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="178.2" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.26%)</title><rect x="176.2" y="1219.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="179.2" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.26%)</title><rect x="176.2" y="1203.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="179.2" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.26%)</title><rect x="176.2" y="1187.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="179.2" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.26%)</title><rect x="176.2" y="1171.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="179.2" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (3 samples, 0.26%)</title><rect x="179.3" y="1315.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="182.3" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (3 samples, 0.26%)</title><rect x="179.3" y="1299.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="182.3" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/TaskRequest.&lt;init&gt; (33 samples, 2.90%)</title><rect x="182.4" y="1315.0" width="34.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="185.4" y="1326.0">co..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.09%)</title><rect x="182.4" y="1299.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="185.4" y="1310.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (32 samples, 2.82%)</title><rect x="183.5" y="1299.0" width="33.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="186.5" y="1310.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (11 samples, 0.97%)</title><rect x="204.2" y="1283.0" width="11.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="207.2" y="1294.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (8 samples, 0.70%)</title><rect x="204.2" y="1267.0" width="8.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="207.2" y="1278.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (8 samples, 0.70%)</title><rect x="204.2" y="1251.0" width="8.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="207.2" y="1262.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (8 samples, 0.70%)</title><rect x="204.2" y="1235.0" width="8.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="207.2" y="1246.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.26%)</title><rect x="209.4" y="1219.0" width="3.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="212.4" y="1230.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.09%)</title><rect x="212.6" y="1267.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="215.6" y="1278.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.18%)</title><rect x="213.6" y="1267.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="216.6" y="1278.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="215.7" y="1283.0" width="1.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="218.7" y="1294.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.18%)</title><rect x="216.7" y="1315.0" width="2.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="219.7" y="1326.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="218.8" y="1347.0" width="1.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="221.8" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (13 samples, 1.14%)</title><rect x="219.8" y="1347.0" width="13.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="222.8" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (13 samples, 1.14%)</title><rect x="219.8" y="1331.0" width="13.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="222.8" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (13 samples, 1.14%)</title><rect x="219.8" y="1315.0" width="13.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="222.8" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (13 samples, 1.14%)</title><rect x="219.8" y="1299.0" width="13.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="222.8" y="1310.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (11 samples, 0.97%)</title><rect x="221.9" y="1283.0" width="11.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="224.9" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.09%)</title><rect x="233.3" y="1347.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="236.3" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.09%)</title><rect x="233.3" y="1331.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="236.3" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.09%)</title><rect x="233.3" y="1315.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="236.3" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.09%)</title><rect x="233.3" y="1299.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="236.3" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.09%)</title><rect x="233.3" y="1283.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="236.3" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (61 samples, 5.37%)</title><rect x="234.4" y="1363.0" width="63.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="237.4" y="1374.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (61 samples, 5.37%)</title><rect x="234.4" y="1347.0" width="63.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="237.4" y="1358.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (41 samples, 3.61%)</title><rect x="235.4" y="1331.0" width="42.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="238.4" y="1342.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.09%)</title><rect x="235.4" y="1315.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="238.4" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.09%)</title><rect x="235.4" y="1299.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="238.4" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (1 samples, 0.09%)</title><rect x="235.4" y="1283.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="238.4" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.update (1 samples, 0.09%)</title><rect x="235.4" y="1267.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="238.4" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (40 samples, 3.52%)</title><rect x="236.4" y="1315.0" width="41.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="239.4" y="1326.0">org..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.peek (1 samples, 0.09%)</title><rect x="236.4" y="1299.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="239.4" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (39 samples, 3.43%)</title><rect x="237.5" y="1299.0" width="40.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="240.5" y="1310.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (31 samples, 2.73%)</title><rect x="237.5" y="1283.0" width="32.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="240.5" y="1294.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (31 samples, 2.73%)</title><rect x="237.5" y="1267.0" width="32.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="240.5" y="1278.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (16 samples, 1.41%)</title><rect x="241.6" y="1251.0" width="16.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="244.6" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (6 samples, 0.53%)</title><rect x="241.6" y="1235.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="244.6" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (6 samples, 0.53%)</title><rect x="241.6" y="1219.0" width="6.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="244.6" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (6 samples, 0.53%)</title><rect x="241.6" y="1203.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="244.6" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (6 samples, 0.53%)</title><rect x="241.6" y="1187.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="244.6" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (6 samples, 0.53%)</title><rect x="241.6" y="1171.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="244.6" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (6 samples, 0.53%)</title><rect x="241.6" y="1155.0" width="6.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="244.6" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (6 samples, 0.53%)</title><rect x="241.6" y="1139.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="244.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (9 samples, 0.79%)</title><rect x="247.9" y="1235.0" width="9.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="250.9" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (9 samples, 0.79%)</title><rect x="247.9" y="1219.0" width="9.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="250.9" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.ensureNoneRemaining (9 samples, 0.79%)</title><rect x="247.9" y="1203.0" width="9.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="250.9" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.09%)</title><rect x="257.2" y="1235.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="260.2" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (10 samples, 0.88%)</title><rect x="258.3" y="1251.0" width="10.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="261.3" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (10 samples, 0.88%)</title><rect x="258.3" y="1235.0" width="10.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="261.3" y="1246.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="258.3" y="1219.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="261.3" y="1230.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="258.3" y="1203.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="261.3" y="1214.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.09%)</title><rect x="258.3" y="1187.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="261.3" y="1198.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::write_region_work(MemRegion) (1 samples, 0.09%)</title><rect x="258.3" y="1171.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="261.3" y="1182.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::invalidate(MemRegion, bool) (1 samples, 0.09%)</title><rect x="258.3" y="1155.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="261.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (3 samples, 0.26%)</title><rect x="259.3" y="1219.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="262.3" y="1230.0"></text>
</g>
<g>
<title>java/util/Optional.of (3 samples, 0.26%)</title><rect x="259.3" y="1203.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="262.3" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (6 samples, 0.53%)</title><rect x="262.4" y="1219.0" width="6.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="265.4" y="1230.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (6 samples, 0.53%)</title><rect x="262.4" y="1203.0" width="6.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="265.4" y="1214.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="267.6" y="1187.0" width="1.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="270.6" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.09%)</title><rect x="268.6" y="1251.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="271.6" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (3 samples, 0.26%)</title><rect x="269.7" y="1283.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="272.7" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (3 samples, 0.26%)</title><rect x="269.7" y="1267.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="272.7" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.09%)</title><rect x="269.7" y="1251.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="272.7" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.09%)</title><rect x="269.7" y="1235.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="272.7" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.18%)</title><rect x="270.7" y="1251.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="273.7" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.18%)</title><rect x="270.7" y="1235.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="273.7" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.18%)</title><rect x="270.7" y="1219.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="273.7" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.09%)</title><rect x="271.8" y="1203.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="274.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (4 samples, 0.35%)</title><rect x="272.8" y="1283.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="275.8" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (4 samples, 0.35%)</title><rect x="272.8" y="1267.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="275.8" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (2 samples, 0.18%)</title><rect x="272.8" y="1251.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="275.8" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.18%)</title><rect x="272.8" y="1235.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="275.8" y="1246.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.18%)</title><rect x="272.8" y="1219.0" width="2.1" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="275.8" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.18%)</title><rect x="274.9" y="1251.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="277.9" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.18%)</title><rect x="274.9" y="1235.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="277.9" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.18%)</title><rect x="274.9" y="1219.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="277.9" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (2 samples, 0.18%)</title><rect x="274.9" y="1203.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="277.9" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.09%)</title><rect x="277.0" y="1283.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="280.0" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (6 samples, 0.53%)</title><rect x="278.0" y="1331.0" width="6.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="281.0" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (5 samples, 0.44%)</title><rect x="278.0" y="1315.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="281.0" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (4 samples, 0.35%)</title><rect x="278.0" y="1299.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="281.0" y="1310.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.09%)</title><rect x="278.0" y="1283.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="281.0" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$227/792844901.accept (1 samples, 0.09%)</title><rect x="278.0" y="1267.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="281.0" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.09%)</title><rect x="278.0" y="1251.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="281.0" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.09%)</title><rect x="278.0" y="1235.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="281.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.09%)</title><rect x="278.0" y="1219.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="281.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.09%)</title><rect x="278.0" y="1203.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="281.0" y="1214.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.09%)</title><rect x="278.0" y="1187.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="281.0" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="278.0" y="1171.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="281.0" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="279.0" y="1283.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="282.0" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="279.0" y="1267.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="282.0" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="279.0" y="1251.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="282.0" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="279.0" y="1235.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="282.0" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="279.0" y="1219.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="282.0" y="1230.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="279.0" y="1203.0" width="1.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="282.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.09%)</title><rect x="280.1" y="1283.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="283.1" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.09%)</title><rect x="280.1" y="1267.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="283.1" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.09%)</title><rect x="281.1" y="1283.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="284.1" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.09%)</title><rect x="281.1" y="1267.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="284.1" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="281.1" y="1251.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="284.1" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="281.1" y="1235.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="284.1" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="281.1" y="1219.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="284.1" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="281.1" y="1203.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="284.1" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="281.1" y="1187.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="284.1" y="1198.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="281.1" y="1171.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="284.1" y="1182.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.09%)</title><rect x="281.1" y="1155.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="284.1" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="281.1" y="1139.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="284.1" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="281.1" y="1123.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="284.1" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="281.1" y="1107.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="284.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$232/431559406.test (1 samples, 0.09%)</title><rect x="281.1" y="1091.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="284.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.09%)</title><rect x="282.1" y="1299.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="285.1" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.09%)</title><rect x="282.1" y="1283.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="285.1" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="282.1" y="1267.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="285.1" y="1278.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.characteristics (1 samples, 0.09%)</title><rect x="282.1" y="1251.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="285.1" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.09%)</title><rect x="283.2" y="1315.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="286.2" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.09%)</title><rect x="283.2" y="1299.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="286.2" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.09%)</title><rect x="283.2" y="1283.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="286.2" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 0.26%)</title><rect x="284.2" y="1331.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="287.2" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.18%)</title><rect x="284.2" y="1315.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="287.2" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.09%)</title><rect x="284.2" y="1299.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="287.2" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.09%)</title><rect x="284.2" y="1283.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="287.2" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.09%)</title><rect x="284.2" y="1267.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="287.2" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.responseSchema (1 samples, 0.09%)</title><rect x="284.2" y="1251.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="287.2" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.09%)</title><rect x="285.3" y="1299.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="288.3" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.09%)</title><rect x="285.3" y="1283.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="288.3" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.09%)</title><rect x="285.3" y="1267.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="288.3" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.09%)</title><rect x="285.3" y="1251.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="288.3" y="1262.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="285.3" y="1235.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="288.3" y="1246.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="285.3" y="1219.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="288.3" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.09%)</title><rect x="286.3" y="1315.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="289.3" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.09%)</title><rect x="286.3" y="1299.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="289.3" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="286.3" y="1283.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="289.3" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="286.3" y="1267.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="289.3" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.09%)</title><rect x="286.3" y="1251.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="289.3" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.09%)</title><rect x="286.3" y="1235.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="289.3" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.09%)</title><rect x="286.3" y="1219.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="289.3" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.09%)</title><rect x="286.3" y="1203.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="289.3" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.09%)</title><rect x="286.3" y="1187.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="289.3" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$10.write (1 samples, 0.09%)</title><rect x="286.3" y="1171.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="289.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.09%)</title><rect x="286.3" y="1155.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="289.3" y="1166.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.09%)</title><rect x="286.3" y="1139.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="289.3" y="1150.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.09%)</title><rect x="286.3" y="1123.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="289.3" y="1134.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (1 samples, 0.09%)</title><rect x="286.3" y="1107.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="289.3" y="1118.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="286.3" y="1091.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="289.3" y="1102.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="286.3" y="1075.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="289.3" y="1086.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="286.3" y="1059.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="289.3" y="1070.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="286.3" y="1043.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="289.3" y="1054.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.replaceWith (1 samples, 0.09%)</title><rect x="286.3" y="1027.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="289.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (8 samples, 0.70%)</title><rect x="287.3" y="1331.0" width="8.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="290.3" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (7 samples, 0.62%)</title><rect x="288.4" y="1315.0" width="7.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="291.4" y="1326.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (1 samples, 0.09%)</title><rect x="289.4" y="1299.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="292.4" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (4 samples, 0.35%)</title><rect x="290.5" y="1299.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="293.5" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.next (1 samples, 0.09%)</title><rect x="290.5" y="1283.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="293.5" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.iterator (1 samples, 0.09%)</title><rect x="291.5" y="1283.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="294.5" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.&lt;init&gt; (1 samples, 0.09%)</title><rect x="291.5" y="1267.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="294.5" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="291.5" y="1251.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="294.5" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (2 samples, 0.18%)</title><rect x="292.5" y="1283.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="295.5" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.18%)</title><rect x="292.5" y="1267.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="295.5" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.18%)</title><rect x="292.5" y="1251.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="295.5" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.18%)</title><rect x="292.5" y="1235.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="295.5" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.18%)</title><rect x="292.5" y="1219.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="295.5" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.18%)</title><rect x="292.5" y="1203.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="295.5" y="1214.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (2 samples, 0.18%)</title><rect x="292.5" y="1187.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="295.5" y="1198.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (2 samples, 0.18%)</title><rect x="292.5" y="1171.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="295.5" y="1182.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (1 samples, 0.09%)</title><rect x="292.5" y="1155.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="295.5" y="1166.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (1 samples, 0.09%)</title><rect x="292.5" y="1139.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="295.5" y="1150.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.09%)</title><rect x="292.5" y="1123.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="295.5" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="293.6" y="1155.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="296.6" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="293.6" y="1139.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="296.6" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="293.6" y="1123.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="296.6" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$254/431587297.apply (1 samples, 0.09%)</title><rect x="293.6" y="1107.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="296.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.09%)</title><rect x="294.6" y="1299.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="297.6" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.09%)</title><rect x="294.6" y="1283.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="297.6" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.09%)</title><rect x="294.6" y="1267.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="297.6" y="1278.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.09%)</title><rect x="294.6" y="1251.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="297.6" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="294.6" y="1235.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="297.6" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.09%)</title><rect x="295.7" y="1331.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="298.7" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="295.7" y="1315.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="298.7" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="295.7" y="1299.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="298.7" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="295.7" y="1283.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="298.7" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.09%)</title><rect x="296.7" y="1331.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="299.7" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="296.7" y="1315.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="299.7" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="296.7" y="1299.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="299.7" y="1310.0"></text>
</g>
<g>
<title>java/lang/Thread.run (744 samples, 65.49%)</title><rect x="297.7" y="1395.0" width="772.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="300.7" y="1406.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (744 samples, 65.49%)</title><rect x="297.7" y="1379.0" width="772.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="300.7" y="1390.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (744 samples, 65.49%)</title><rect x="297.7" y="1363.0" width="772.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="300.7" y="1374.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$279/584692216.run (513 samples, 45.16%)</title><rect x="301.9" y="1347.0" width="532.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="304.9" y="1358.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$279/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$66 (511 samples, 44.98%)</title><rect x="304.0" y="1331.0" width="530.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="307.0" y="1342.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putT..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (511 samples, 44.98%)</title><rect x="304.0" y="1315.0" width="530.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="307.0" y="1326.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (503 samples, 44.28%)</title><rect x="304.0" y="1299.0" width="522.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="307.0" y="1310.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.schedule..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ExecutionScheduler.schedule (1 samples, 0.09%)</title><rect x="315.4" y="1283.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="318.4" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ExecutionScheduler.waitOnScheduledTime (1 samples, 0.09%)</title><rect x="315.4" y="1267.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="318.4" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ExecutionScheduler$$Lambda$200/1095159060.get (1 samples, 0.09%)</title><rect x="315.4" y="1251.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="318.4" y="1262.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.09%)</title><rect x="315.4" y="1235.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="318.4" y="1246.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="315.4" y="1219.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="318.4" y="1230.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="315.4" y="1203.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="318.4" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (176 samples, 15.49%)</title><rect x="316.4" y="1283.0" width="182.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="319.4" y="1294.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (176 samples, 15.49%)</title><rect x="316.4" y="1267.0" width="182.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="319.4" y="1278.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (176 samples, 15.49%)</title><rect x="316.4" y="1251.0" width="182.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="319.4" y="1262.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="316.4" y="1235.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="319.4" y="1246.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="316.4" y="1219.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="319.4" y="1230.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="316.4" y="1203.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="319.4" y="1214.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="316.4" y="1187.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="319.4" y="1198.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="316.4" y="1171.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="319.4" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (175 samples, 15.40%)</title><rect x="317.5" y="1235.0" width="181.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="320.5" y="1246.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (175 samples, 15.40%)</title><rect x="317.5" y="1219.0" width="181.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="320.5" y="1230.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (175 samples, 15.40%)</title><rect x="317.5" y="1203.0" width="181.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="320.5" y="1214.0">com/fasterxml/jackson/d..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="317.5" y="1187.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="320.5" y="1198.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="317.5" y="1171.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="320.5" y="1182.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="317.5" y="1155.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="320.5" y="1166.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="317.5" y="1139.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="320.5" y="1150.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="317.5" y="1123.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="320.5" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (64 samples, 5.63%)</title><rect x="318.5" y="1187.0" width="66.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="321.5" y="1198.0">com/fas..</text>
</g>
<g>
<title>__clock_gettime (8 samples, 0.70%)</title><rect x="345.5" y="1171.0" width="8.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="348.5" y="1182.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.44%)</title><rect x="348.6" y="1155.0" width="5.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="351.6" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (7 samples, 0.62%)</title><rect x="353.8" y="1171.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="356.8" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (7 samples, 0.62%)</title><rect x="353.8" y="1155.0" width="7.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="356.8" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (7 samples, 0.62%)</title><rect x="353.8" y="1139.0" width="7.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="356.8" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 0.62%)</title><rect x="353.8" y="1123.0" width="7.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="356.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (7 samples, 0.62%)</title><rect x="353.8" y="1107.0" width="7.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="356.8" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (7 samples, 0.62%)</title><rect x="353.8" y="1091.0" width="7.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="356.8" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (7 samples, 0.62%)</title><rect x="353.8" y="1075.0" width="7.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="356.8" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (23 samples, 2.02%)</title><rect x="361.1" y="1171.0" width="23.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="364.1" y="1182.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (10 samples, 0.88%)</title><rect x="374.6" y="1155.0" width="10.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="377.6" y="1166.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="374.6" y="1139.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="377.6" y="1150.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="374.6" y="1123.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="377.6" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="374.6" y="1107.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="377.6" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (3 samples, 0.26%)</title><rect x="375.6" y="1139.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="378.6" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (3 samples, 0.26%)</title><rect x="375.6" y="1123.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="378.6" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (6 samples, 0.53%)</title><rect x="378.8" y="1139.0" width="6.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="381.8" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (6 samples, 0.53%)</title><rect x="378.8" y="1123.0" width="6.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="381.8" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (4 samples, 0.35%)</title><rect x="378.8" y="1107.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="381.8" y="1118.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="378.8" y="1091.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="381.8" y="1102.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.26%)</title><rect x="379.8" y="1091.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="382.8" y="1102.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.18%)</title><rect x="380.8" y="1075.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="383.8" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="380.8" y="1059.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="383.8" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="381.9" y="1059.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="384.9" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="381.9" y="1043.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="384.9" y="1054.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="381.9" y="1027.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="384.9" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (2 samples, 0.18%)</title><rect x="382.9" y="1107.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="385.9" y="1118.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.18%)</title><rect x="382.9" y="1091.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="385.9" y="1102.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.18%)</title><rect x="382.9" y="1075.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="385.9" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.18%)</title><rect x="382.9" y="1059.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="385.9" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="383.9" y="1043.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="386.9" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (103 samples, 9.07%)</title><rect x="385.0" y="1187.0" width="107.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="388.0" y="1198.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.18%)</title><rect x="386.0" y="1171.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="389.0" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.09%)</title><rect x="388.1" y="1171.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="391.1" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (3 samples, 0.26%)</title><rect x="389.1" y="1171.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="392.1" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (9 samples, 0.79%)</title><rect x="392.3" y="1171.0" width="9.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="395.3" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (7 samples, 0.62%)</title><rect x="394.3" y="1155.0" width="7.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="397.3" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (17 samples, 1.50%)</title><rect x="401.6" y="1171.0" width="17.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="404.6" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (15 samples, 1.32%)</title><rect x="403.7" y="1155.0" width="15.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="406.7" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (12 samples, 1.06%)</title><rect x="405.8" y="1139.0" width="12.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="408.8" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (10 samples, 0.88%)</title><rect x="407.8" y="1123.0" width="10.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="410.8" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.09%)</title><rect x="417.2" y="1107.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="420.2" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.09%)</title><rect x="418.2" y="1139.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="421.2" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.09%)</title><rect x="418.2" y="1123.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="421.2" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.09%)</title><rect x="419.3" y="1171.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="422.3" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.09%)</title><rect x="419.3" y="1155.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="422.3" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (68 samples, 5.99%)</title><rect x="420.3" y="1171.0" width="70.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="423.3" y="1182.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (18 samples, 1.58%)</title><rect x="420.3" y="1155.0" width="18.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="423.3" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.26%)</title><rect x="422.4" y="1139.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="425.4" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.26%)</title><rect x="422.4" y="1123.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="425.4" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.26%)</title><rect x="422.4" y="1107.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="425.4" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (13 samples, 1.14%)</title><rect x="425.5" y="1139.0" width="13.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="428.5" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (50 samples, 4.40%)</title><rect x="439.0" y="1155.0" width="51.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="442.0" y="1166.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (50 samples, 4.40%)</title><rect x="439.0" y="1139.0" width="51.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="442.0" y="1150.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (50 samples, 4.40%)</title><rect x="439.0" y="1123.0" width="51.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="442.0" y="1134.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (23 samples, 2.02%)</title><rect x="441.1" y="1107.0" width="23.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="444.1" y="1118.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.09%)</title><rect x="450.4" y="1091.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="453.4" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (9 samples, 0.79%)</title><rect x="451.5" y="1091.0" width="9.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="454.5" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (9 samples, 0.79%)</title><rect x="451.5" y="1075.0" width="9.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="454.5" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (9 samples, 0.79%)</title><rect x="451.5" y="1059.0" width="9.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="454.5" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (5 samples, 0.44%)</title><rect x="455.6" y="1043.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="458.6" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (4 samples, 0.35%)</title><rect x="455.6" y="1027.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="458.6" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (3 samples, 0.26%)</title><rect x="456.7" y="1011.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="459.7" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (1 samples, 0.09%)</title><rect x="458.7" y="995.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="461.7" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.09%)</title><rect x="459.8" y="1027.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="462.8" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 0.26%)</title><rect x="460.8" y="1091.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="463.8" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.09%)</title><rect x="463.9" y="1091.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="466.9" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (14 samples, 1.23%)</title><rect x="465.0" y="1107.0" width="14.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="468.0" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (11 samples, 0.97%)</title><rect x="468.1" y="1091.0" width="11.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="471.1" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (11 samples, 0.97%)</title><rect x="468.1" y="1075.0" width="11.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="471.1" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (11 samples, 0.97%)</title><rect x="468.1" y="1059.0" width="11.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="471.1" y="1070.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (11 samples, 0.97%)</title><rect x="468.1" y="1043.0" width="11.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="471.1" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.09%)</title><rect x="479.5" y="1107.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="482.5" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (3 samples, 0.26%)</title><rect x="480.5" y="1107.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="483.5" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (3 samples, 0.26%)</title><rect x="480.5" y="1091.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="483.5" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (3 samples, 0.26%)</title><rect x="480.5" y="1075.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="483.5" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (3 samples, 0.26%)</title><rect x="480.5" y="1059.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="483.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (3 samples, 0.26%)</title><rect x="480.5" y="1043.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="483.5" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (7 samples, 0.62%)</title><rect x="483.7" y="1107.0" width="7.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="486.7" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.62%)</title><rect x="483.7" y="1091.0" width="7.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="486.7" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.62%)</title><rect x="483.7" y="1075.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="486.7" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.09%)</title><rect x="490.9" y="1171.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="493.9" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (7 samples, 0.62%)</title><rect x="492.0" y="1187.0" width="7.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="495.0" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.09%)</title><rect x="492.0" y="1171.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="495.0" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (6 samples, 0.53%)</title><rect x="493.0" y="1171.0" width="6.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="496.0" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (6 samples, 0.53%)</title><rect x="493.0" y="1155.0" width="6.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="496.0" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (6 samples, 0.53%)</title><rect x="493.0" y="1139.0" width="6.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="496.0" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.53%)</title><rect x="493.0" y="1123.0" width="6.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="496.0" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (285 samples, 25.09%)</title><rect x="499.2" y="1283.0" width="296.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="502.2" y="1294.0">com/linecorp/decaton/processor/runtime/i..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (35 samples, 3.08%)</title><rect x="499.2" y="1267.0" width="36.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="502.2" y="1278.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (1 samples, 0.09%)</title><rect x="499.2" y="1251.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="502.2" y="1262.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (34 samples, 2.99%)</title><rect x="500.3" y="1251.0" width="35.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="503.3" y="1262.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (33 samples, 2.90%)</title><rect x="501.3" y="1235.0" width="34.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="504.3" y="1246.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 0.35%)</title><rect x="501.3" y="1219.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="504.3" y="1230.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 0.35%)</title><rect x="501.3" y="1203.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="504.3" y="1214.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (4 samples, 0.35%)</title><rect x="501.3" y="1187.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="504.3" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 0.35%)</title><rect x="501.3" y="1171.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="504.3" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.18%)</title><rect x="505.5" y="1219.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="508.5" y="1230.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.18%)</title><rect x="505.5" y="1203.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="508.5" y="1214.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.18%)</title><rect x="505.5" y="1187.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="508.5" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.18%)</title><rect x="505.5" y="1171.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="508.5" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.09%)</title><rect x="506.5" y="1155.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="509.5" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (27 samples, 2.38%)</title><rect x="507.6" y="1219.0" width="28.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="510.6" y="1230.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (14 samples, 1.23%)</title><rect x="521.1" y="1203.0" width="14.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="524.1" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.18%)</title><rect x="521.1" y="1187.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="524.1" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (12 samples, 1.06%)</title><rect x="523.1" y="1187.0" width="12.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="526.1" y="1198.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.35%)</title><rect x="531.4" y="1171.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="534.4" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (8 samples, 0.70%)</title><rect x="535.6" y="1267.0" width="8.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="538.6" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.62%)</title><rect x="536.6" y="1251.0" width="7.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="539.6" y="1262.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.18%)</title><rect x="536.6" y="1235.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="539.6" y="1246.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="536.6" y="1219.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="539.6" y="1230.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="537.7" y="1219.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="540.7" y="1230.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="537.7" y="1203.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="540.7" y="1214.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="537.7" y="1187.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="540.7" y="1198.0"></text>
</g>
<g>
<title>G1CollectedHeap::max_tlab_size() const (1 samples, 0.09%)</title><rect x="537.7" y="1171.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="540.7" y="1182.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.44%)</title><rect x="538.7" y="1235.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="541.7" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (168 samples, 14.79%)</title><rect x="543.9" y="1267.0" width="174.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="546.9" y="1278.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (168 samples, 14.79%)</title><rect x="543.9" y="1251.0" width="174.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="546.9" y="1262.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (61 samples, 5.37%)</title><rect x="556.4" y="1235.0" width="63.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="559.4" y="1246.0">com/lin..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="564.7" y="1219.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="567.7" y="1230.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="564.7" y="1203.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="567.7" y="1214.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="564.7" y="1187.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="567.7" y="1198.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.53%)</title><rect x="565.7" y="1219.0" width="6.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="568.7" y="1230.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.53%)</title><rect x="565.7" y="1203.0" width="6.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="568.7" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.09%)</title><rect x="572.0" y="1219.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="575.0" y="1230.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (2 samples, 0.18%)</title><rect x="573.0" y="1219.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="576.0" y="1230.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (2 samples, 0.18%)</title><rect x="573.0" y="1203.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="576.0" y="1214.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (2 samples, 0.18%)</title><rect x="573.0" y="1187.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="576.0" y="1198.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (36 samples, 3.17%)</title><rect x="575.1" y="1219.0" width="37.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="578.1" y="1230.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (34 samples, 2.99%)</title><rect x="577.1" y="1203.0" width="35.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="580.1" y="1214.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (23 samples, 2.02%)</title><rect x="577.1" y="1187.0" width="23.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="580.1" y="1198.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (23 samples, 2.02%)</title><rect x="577.1" y="1171.0" width="23.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="580.1" y="1182.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (23 samples, 2.02%)</title><rect x="577.1" y="1155.0" width="23.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="580.1" y="1166.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (11 samples, 0.97%)</title><rect x="583.4" y="1139.0" width="11.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="586.4" y="1150.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="583.4" y="1123.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="586.4" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="584.4" y="1123.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="587.4" y="1134.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.09%)</title><rect x="584.4" y="1107.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="587.4" y="1118.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (4 samples, 0.35%)</title><rect x="585.5" y="1123.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="588.5" y="1134.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.09%)</title><rect x="585.5" y="1107.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="588.5" y="1118.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.26%)</title><rect x="586.5" y="1107.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="589.5" y="1118.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.18%)</title><rect x="587.5" y="1091.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="590.5" y="1102.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.09%)</title><rect x="588.6" y="1075.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="591.6" y="1086.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="588.6" y="1059.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="591.6" y="1070.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.44%)</title><rect x="589.6" y="1123.0" width="5.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="592.6" y="1134.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.09%)</title><rect x="590.7" y="1107.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="593.7" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.26%)</title><rect x="591.7" y="1107.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="594.7" y="1118.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="591.7" y="1091.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="594.7" y="1102.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="592.7" y="1091.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="595.7" y="1102.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.09%)</title><rect x="592.7" y="1075.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="595.7" y="1086.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="593.8" y="1091.0" width="1.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="596.8" y="1102.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.53%)</title><rect x="594.8" y="1139.0" width="6.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="597.8" y="1150.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (9 samples, 0.79%)</title><rect x="601.0" y="1187.0" width="9.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="604.0" y="1198.0"></text>
</g>
<g>
<title>java/lang/String.getChars (2 samples, 0.18%)</title><rect x="610.4" y="1187.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="613.4" y="1198.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.44%)</title><rect x="612.5" y="1219.0" width="5.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="615.5" y="1230.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.18%)</title><rect x="617.7" y="1219.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="620.7" y="1230.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (17 samples, 1.50%)</title><rect x="619.7" y="1235.0" width="17.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="622.7" y="1246.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (10 samples, 0.88%)</title><rect x="619.7" y="1219.0" width="10.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="622.7" y="1230.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="619.7" y="1203.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="622.7" y="1214.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="619.7" y="1187.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="622.7" y="1198.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="619.7" y="1171.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="622.7" y="1182.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="619.7" y="1155.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="622.7" y="1166.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="619.7" y="1139.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="622.7" y="1150.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.09%)</title><rect x="619.7" y="1123.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="622.7" y="1134.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (9 samples, 0.79%)</title><rect x="620.8" y="1203.0" width="9.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="623.8" y="1214.0"></text>
</g>
<g>
<title>java/lang/Long.toString (7 samples, 0.62%)</title><rect x="630.1" y="1219.0" width="7.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="633.1" y="1230.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (7 samples, 0.62%)</title><rect x="630.1" y="1203.0" width="7.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="633.1" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.18%)</title><rect x="635.3" y="1187.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="638.3" y="1198.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="637.4" y="1235.0" width="1.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="640.4" y="1246.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (77 samples, 6.78%)</title><rect x="638.4" y="1235.0" width="80.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="641.4" y="1246.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (75 samples, 6.60%)</title><rect x="640.5" y="1219.0" width="77.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="643.5" y="1230.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 0.35%)</title><rect x="640.5" y="1203.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="643.5" y="1214.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 0.35%)</title><rect x="640.5" y="1187.0" width="4.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="643.5" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (4 samples, 0.35%)</title><rect x="640.5" y="1171.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="643.5" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 0.35%)</title><rect x="640.5" y="1155.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="643.5" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.26%)</title><rect x="644.7" y="1203.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="647.7" y="1214.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.26%)</title><rect x="644.7" y="1187.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="647.7" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.26%)</title><rect x="644.7" y="1171.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="647.7" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.26%)</title><rect x="644.7" y="1155.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="647.7" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.26%)</title><rect x="644.7" y="1139.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="647.7" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (68 samples, 5.99%)</title><rect x="647.8" y="1203.0" width="70.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="650.8" y="1214.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.put (63 samples, 5.55%)</title><rect x="653.0" y="1187.0" width="65.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="656.0" y="1198.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.putVal (33 samples, 2.90%)</title><rect x="684.1" y="1171.0" width="34.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="687.1" y="1182.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (5 samples, 0.44%)</title><rect x="699.7" y="1155.0" width="5.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="702.7" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (10 samples, 0.88%)</title><rect x="704.9" y="1155.0" width="10.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="707.9" y="1166.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.26%)</title><rect x="715.3" y="1155.0" width="3.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="718.3" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (53 samples, 4.67%)</title><rect x="718.4" y="1267.0" width="55.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="721.4" y="1278.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (52 samples, 4.58%)</title><rect x="719.5" y="1251.0" width="54.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="722.5" y="1262.0">com/l..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="719.5" y="1235.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="722.5" y="1246.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="719.5" y="1219.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="722.5" y="1230.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="719.5" y="1203.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="722.5" y="1214.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="719.5" y="1187.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="722.5" y="1198.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.09%)</title><rect x="719.5" y="1171.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="722.5" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$206/19639829.process (25 samples, 2.20%)</title><rect x="720.5" y="1235.0" width="26.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="723.5" y="1246.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (25 samples, 2.20%)</title><rect x="720.5" y="1219.0" width="26.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="723.5" y="1230.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (21 samples, 1.85%)</title><rect x="724.6" y="1203.0" width="21.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="727.6" y="1214.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.18%)</title><rect x="727.8" y="1187.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="730.8" y="1198.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.18%)</title><rect x="727.8" y="1171.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="730.8" y="1182.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.18%)</title><rect x="727.8" y="1155.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="730.8" y="1166.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.18%)</title><rect x="727.8" y="1139.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="730.8" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.18%)</title><rect x="727.8" y="1123.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="730.8" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.09%)</title><rect x="728.8" y="1107.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="731.8" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (13 samples, 1.14%)</title><rect x="729.8" y="1187.0" width="13.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="732.8" y="1198.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (10 samples, 0.88%)</title><rect x="733.0" y="1171.0" width="10.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="736.0" y="1182.0"></text>
</g>
<g>
<title>[vdso] (10 samples, 0.88%)</title><rect x="733.0" y="1155.0" width="10.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="736.0" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.26%)</title><rect x="743.3" y="1187.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="746.3" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.26%)</title><rect x="746.5" y="1235.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="749.5" y="1246.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.26%)</title><rect x="746.5" y="1219.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="749.5" y="1230.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (12 samples, 1.06%)</title><rect x="749.6" y="1235.0" width="12.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="752.6" y="1246.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.35%)</title><rect x="757.9" y="1219.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="760.9" y="1230.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.26%)</title><rect x="757.9" y="1203.0" width="3.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="760.9" y="1214.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.09%)</title><rect x="761.0" y="1203.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="764.0" y="1214.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (3 samples, 0.26%)</title><rect x="762.0" y="1235.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="765.0" y="1246.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (3 samples, 0.26%)</title><rect x="762.0" y="1219.0" width="3.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="765.0" y="1230.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (8 samples, 0.70%)</title><rect x="765.2" y="1235.0" width="8.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="768.2" y="1246.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (4 samples, 0.35%)</title><rect x="769.3" y="1219.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="772.3" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (21 samples, 1.85%)</title><rect x="773.5" y="1267.0" width="21.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="776.5" y="1278.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (21 samples, 1.85%)</title><rect x="773.5" y="1251.0" width="21.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="776.5" y="1262.0">j..</text>
</g>
<g>
<title>__clock_gettime (8 samples, 0.70%)</title><rect x="777.6" y="1235.0" width="8.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="780.6" y="1246.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.53%)</title><rect x="779.7" y="1219.0" width="6.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="782.7" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 0.62%)</title><rect x="785.9" y="1235.0" width="7.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="788.9" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$287/1635282393.accept (6 samples, 0.53%)</title><rect x="785.9" y="1219.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="788.9" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$61 (6 samples, 0.53%)</title><rect x="785.9" y="1203.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="788.9" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (6 samples, 0.53%)</title><rect x="785.9" y="1187.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="788.9" y="1198.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (6 samples, 0.53%)</title><rect x="785.9" y="1171.0" width="6.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="788.9" y="1182.0"></text>
</g>
<g>
<title>java/time/Duration.create (6 samples, 0.53%)</title><rect x="785.9" y="1155.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="788.9" y="1166.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.09%)</title><rect x="791.1" y="1139.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="794.1" y="1150.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="791.1" y="1123.0" width="1.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="794.1" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$290/2147217168.accept (1 samples, 0.09%)</title><rect x="792.2" y="1219.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="795.2" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$60 (1 samples, 0.09%)</title><rect x="792.2" y="1203.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="795.2" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$277/358589565.complete (1 samples, 0.09%)</title><rect x="792.2" y="1187.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="795.2" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$37 (1 samples, 0.09%)</title><rect x="792.2" y="1171.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="795.2" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$276/1986853958.complete (1 samples, 0.09%)</title><rect x="792.2" y="1155.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="795.2" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$65 (1 samples, 0.09%)</title><rect x="792.2" y="1139.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="795.2" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (1 samples, 0.09%)</title><rect x="792.2" y="1123.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="795.2" y="1134.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.09%)</title><rect x="792.2" y="1107.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="795.2" y="1118.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.09%)</title><rect x="792.2" y="1091.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="795.2" y="1102.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.09%)</title><rect x="792.2" y="1075.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="795.2" y="1086.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.18%)</title><rect x="793.2" y="1235.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="796.2" y="1246.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1016925085.linkToTargetMethod (1 samples, 0.09%)</title><rect x="795.3" y="1283.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="798.3" y="1294.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (1 samples, 0.09%)</title><rect x="795.3" y="1267.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="798.3" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$290/2147217168.get$Lambda (1 samples, 0.09%)</title><rect x="795.3" y="1251.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="798.3" y="1262.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="795.3" y="1235.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="798.3" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (23 samples, 2.02%)</title><rect x="796.3" y="1283.0" width="23.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="799.3" y="1294.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (23 samples, 2.02%)</title><rect x="796.3" y="1267.0" width="23.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="799.3" y="1278.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="797.4" y="1251.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="800.4" y="1262.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="797.4" y="1235.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="800.4" y="1246.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="797.4" y="1219.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="800.4" y="1230.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="797.4" y="1203.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="800.4" y="1214.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="797.4" y="1187.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="800.4" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (21 samples, 1.85%)</title><rect x="798.4" y="1251.0" width="21.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="801.4" y="1262.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$287/1635282393.accept (2 samples, 0.18%)</title><rect x="798.4" y="1235.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="801.4" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$61 (2 samples, 0.18%)</title><rect x="798.4" y="1219.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="801.4" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (2 samples, 0.18%)</title><rect x="798.4" y="1203.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="801.4" y="1214.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.18%)</title><rect x="798.4" y="1187.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="801.4" y="1198.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.18%)</title><rect x="798.4" y="1171.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="801.4" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$290/2147217168.accept (19 samples, 1.67%)</title><rect x="800.5" y="1235.0" width="19.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="803.5" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$60 (19 samples, 1.67%)</title><rect x="800.5" y="1219.0" width="19.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="803.5" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$277/358589565.complete (19 samples, 1.67%)</title><rect x="800.5" y="1203.0" width="19.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="803.5" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$37 (19 samples, 1.67%)</title><rect x="800.5" y="1187.0" width="19.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="803.5" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$276/1986853958.complete (19 samples, 1.67%)</title><rect x="800.5" y="1171.0" width="19.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="803.5" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$65 (19 samples, 1.67%)</title><rect x="800.5" y="1155.0" width="19.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="803.5" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (19 samples, 1.67%)</title><rect x="800.5" y="1139.0" width="19.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="803.5" y="1150.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (19 samples, 1.67%)</title><rect x="800.5" y="1123.0" width="19.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="803.5" y="1134.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (19 samples, 1.67%)</title><rect x="800.5" y="1107.0" width="19.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="803.5" y="1118.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (19 samples, 1.67%)</title><rect x="800.5" y="1091.0" width="19.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="803.5" y="1102.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.53%)</title><rect x="820.2" y="1283.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="823.2" y="1294.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.53%)</title><rect x="820.2" y="1267.0" width="6.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="823.2" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (8 samples, 0.70%)</title><rect x="826.4" y="1299.0" width="8.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="829.4" y="1310.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.35%)</title><rect x="830.6" y="1283.0" width="4.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="833.6" y="1294.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.35%)</title><rect x="830.6" y="1267.0" width="4.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="833.6" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (6 samples, 0.53%)</title><rect x="834.8" y="1347.0" width="6.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="837.8" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.53%)</title><rect x="834.8" y="1331.0" width="6.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="837.8" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.53%)</title><rect x="834.8" y="1315.0" width="6.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="837.8" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.53%)</title><rect x="834.8" y="1299.0" width="6.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="837.8" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (3 samples, 0.26%)</title><rect x="837.9" y="1283.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="840.9" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (221 samples, 19.45%)</title><rect x="841.0" y="1347.0" width="229.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="844.0" y="1358.0">java/util/concurrent/ThreadPoo..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (221 samples, 19.45%)</title><rect x="841.0" y="1331.0" width="229.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="844.0" y="1342.0">java/util/concurrent/LinkedBlo..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (177 samples, 15.58%)</title><rect x="861.8" y="1315.0" width="183.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="864.8" y="1326.0">java/util/concurrent/loc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (8 samples, 0.70%)</title><rect x="873.2" y="1299.0" width="8.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="876.2" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 0.70%)</title><rect x="873.2" y="1283.0" width="8.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="876.2" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 0.70%)</title><rect x="873.2" y="1267.0" width="8.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="876.2" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 0.70%)</title><rect x="873.2" y="1251.0" width="8.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="876.2" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (158 samples, 13.91%)</title><rect x="881.5" y="1299.0" width="164.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="884.5" y="1310.0">java/util/concurrent/..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (157 samples, 13.82%)</title><rect x="882.5" y="1283.0" width="163.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="885.5" y="1294.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.09%)</title><rect x="891.9" y="1267.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="894.9" y="1278.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (2 samples, 0.18%)</title><rect x="892.9" y="1267.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="895.9" y="1278.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.18%)</title><rect x="895.0" y="1267.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="898.0" y="1278.0"></text>
</g>
<g>
<title>Unsafe_Park (140 samples, 12.32%)</title><rect x="897.1" y="1267.0" width="145.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="900.1" y="1278.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="899.2" y="1251.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="902.2" y="1262.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (2 samples, 0.18%)</title><rect x="900.2" y="1251.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="903.2" y="1262.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.09%)</title><rect x="902.3" y="1251.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="905.3" y="1262.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (32 samples, 2.82%)</title><rect x="903.3" y="1251.0" width="33.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="906.3" y="1262.0">Pa..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (10 samples, 0.88%)</title><rect x="916.8" y="1235.0" width="10.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="919.8" y="1246.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.26%)</title><rect x="918.9" y="1219.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="921.9" y="1230.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (3 samples, 0.26%)</title><rect x="918.9" y="1203.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="921.9" y="1214.0"></text>
</g>
<g>
<title>Monitor::unlock() (3 samples, 0.26%)</title><rect x="922.0" y="1219.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="925.0" y="1230.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.18%)</title><rect x="925.1" y="1219.0" width="2.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="928.1" y="1230.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="927.2" y="1235.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="930.2" y="1246.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (8 samples, 0.70%)</title><rect x="928.2" y="1235.0" width="8.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="931.2" y="1246.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.18%)</title><rect x="936.5" y="1251.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="939.5" y="1262.0"></text>
</g>
<g>
<title>__lll_lock_wait (9 samples, 0.79%)</title><rect x="938.6" y="1251.0" width="9.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="941.6" y="1262.0"></text>
</g>
<g>
<title>__lll_unlock_wake (34 samples, 2.99%)</title><rect x="948.0" y="1251.0" width="35.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="951.0" y="1262.0">__l..</text>
</g>
<g>
<title>__pthread_cond_wait (43 samples, 3.79%)</title><rect x="983.3" y="1251.0" width="44.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="986.3" y="1262.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.26%)</title><rect x="1028.0" y="1251.0" width="3.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1031.0" y="1262.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.09%)</title><rect x="1031.1" y="1251.0" width="1.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1034.1" y="1262.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.18%)</title><rect x="1032.1" y="1251.0" width="2.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1035.1" y="1262.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.26%)</title><rect x="1034.2" y="1251.0" width="3.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1037.2" y="1262.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.18%)</title><rect x="1037.3" y="1251.0" width="2.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1040.3" y="1262.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.09%)</title><rect x="1039.4" y="1251.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1042.4" y="1262.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.18%)</title><rect x="1040.4" y="1251.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1043.4" y="1262.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.26%)</title><rect x="1042.5" y="1267.0" width="3.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1045.5" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (24 samples, 2.11%)</title><rect x="1045.6" y="1315.0" width="24.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1048.6" y="1326.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (24 samples, 2.11%)</title><rect x="1045.6" y="1299.0" width="24.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1048.6" y="1310.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (24 samples, 2.11%)</title><rect x="1045.6" y="1283.0" width="24.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1048.6" y="1294.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (24 samples, 2.11%)</title><rect x="1045.6" y="1267.0" width="24.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1048.6" y="1278.0">j..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.09%)</title><rect x="1070.5" y="1395.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1073.5" y="1406.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.09%)</title><rect x="1070.5" y="1379.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1073.5" y="1390.0"></text>
</g>
<g>
<title>JVM_MonitorWait (1 samples, 0.09%)</title><rect x="1070.5" y="1363.0" width="1.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1073.5" y="1374.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="1070.5" y="1347.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1073.5" y="1358.0"></text>
</g>
<g>
<title>start_thread (114 samples, 10.04%)</title><rect x="1071.6" y="1395.0" width="118.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1074.6" y="1406.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (114 samples, 10.04%)</title><rect x="1071.6" y="1379.0" width="118.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1074.6" y="1390.0">java_start(Thr..</text>
</g>
<g>
<title>GangWorker::loop() (23 samples, 2.02%)</title><rect x="1071.6" y="1363.0" width="23.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1074.6" y="1374.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (6 samples, 0.53%)</title><rect x="1071.6" y="1347.0" width="6.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1074.6" y="1358.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 0.53%)</title><rect x="1071.6" y="1331.0" width="6.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1074.6" y="1342.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.09%)</title><rect x="1071.6" y="1315.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1074.6" y="1326.0"></text>
</g>
<g>
<title>SpinPause (5 samples, 0.44%)</title><rect x="1072.6" y="1315.0" width="5.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1075.6" y="1326.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (17 samples, 1.50%)</title><rect x="1077.8" y="1347.0" width="17.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1080.8" y="1358.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.26%)</title><rect x="1077.8" y="1331.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1080.8" y="1342.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.09%)</title><rect x="1077.8" y="1315.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1080.8" y="1326.0"></text>
</g>
<g>
<title>TaskQueueSetSuper::randomParkAndMiller(int*) (1 samples, 0.09%)</title><rect x="1077.8" y="1299.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1080.8" y="1310.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.09%)</title><rect x="1078.9" y="1315.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1081.9" y="1326.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.09%)</title><rect x="1079.9" y="1315.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1082.9" y="1326.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (3 samples, 0.26%)</title><rect x="1080.9" y="1331.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1083.9" y="1342.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.18%)</title><rect x="1080.9" y="1315.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1083.9" y="1326.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.09%)</title><rect x="1080.9" y="1299.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1083.9" y="1310.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.09%)</title><rect x="1080.9" y="1283.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1083.9" y="1294.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.09%)</title><rect x="1080.9" y="1267.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1083.9" y="1278.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1082.0" y="1299.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1085.0" y="1310.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1082.0" y="1283.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1085.0" y="1294.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.09%)</title><rect x="1082.0" y="1267.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1085.0" y="1278.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.09%)</title><rect x="1082.0" y="1251.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1085.0" y="1262.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.09%)</title><rect x="1083.0" y="1315.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1086.0" y="1326.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.09%)</title><rect x="1083.0" y="1299.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1086.0" y="1310.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (11 samples, 0.97%)</title><rect x="1084.0" y="1331.0" width="11.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1087.0" y="1342.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (11 samples, 0.97%)</title><rect x="1084.0" y="1315.0" width="11.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1087.0" y="1326.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (9 samples, 0.79%)</title><rect x="1084.0" y="1299.0" width="9.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1087.0" y="1310.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (9 samples, 0.79%)</title><rect x="1084.0" y="1283.0" width="9.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1087.0" y="1294.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (9 samples, 0.79%)</title><rect x="1084.0" y="1267.0" width="9.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1087.0" y="1278.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (8 samples, 0.70%)</title><rect x="1084.0" y="1251.0" width="8.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1087.0" y="1262.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (8 samples, 0.70%)</title><rect x="1084.0" y="1235.0" width="8.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1087.0" y="1246.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (2 samples, 0.18%)</title><rect x="1088.2" y="1219.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1091.2" y="1230.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.09%)</title><rect x="1090.3" y="1219.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1093.3" y="1230.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.09%)</title><rect x="1090.3" y="1203.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1093.3" y="1214.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.09%)</title><rect x="1091.3" y="1219.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1094.3" y="1230.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.09%)</title><rect x="1092.4" y="1251.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1095.4" y="1262.0"></text>
</g>
<g>
<title>PtrQueueSet::allocate_buffer() (1 samples, 0.09%)</title><rect x="1092.4" y="1235.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1095.4" y="1246.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.09%)</title><rect x="1092.4" y="1219.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1095.4" y="1230.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.09%)</title><rect x="1092.4" y="1203.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1095.4" y="1214.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.18%)</title><rect x="1093.4" y="1299.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1096.4" y="1310.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (2 samples, 0.18%)</title><rect x="1093.4" y="1283.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1096.4" y="1294.0"></text>
</g>
<g>
<title>HeapRegionRemSet::iter_is_complete() (1 samples, 0.09%)</title><rect x="1093.4" y="1267.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1096.4" y="1278.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.09%)</title><rect x="1094.4" y="1267.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1097.4" y="1278.0"></text>
</g>
<g>
<title>HeapRegionRemSetIterator::has_next(unsigned long&amp;) (1 samples, 0.09%)</title><rect x="1094.4" y="1251.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1097.4" y="1262.0"></text>
</g>
<g>
<title>RSHashTableIter::has_next(unsigned long&amp;) (1 samples, 0.09%)</title><rect x="1094.4" y="1235.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1097.4" y="1246.0"></text>
</g>
<g>
<title>JavaThread::run() (89 samples, 7.83%)</title><rect x="1095.5" y="1363.0" width="92.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1098.5" y="1374.0">JavaThread:..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (89 samples, 7.83%)</title><rect x="1095.5" y="1347.0" width="92.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1098.5" y="1358.0">JavaThread:..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (89 samples, 7.83%)</title><rect x="1095.5" y="1331.0" width="92.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1098.5" y="1342.0">CompileBrok..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (88 samples, 7.75%)</title><rect x="1095.5" y="1315.0" width="91.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1098.5" y="1326.0">CompileBrok..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (87 samples, 7.66%)</title><rect x="1095.5" y="1299.0" width="90.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1098.5" y="1310.0">C2Compiler..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (87 samples, 7.66%)</title><rect x="1095.5" y="1283.0" width="90.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1098.5" y="1294.0">Compile::C..</text>
</g>
<g>
<title>Compile::Code_Gen() (35 samples, 3.08%)</title><rect x="1095.5" y="1267.0" width="36.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1098.5" y="1278.0">Com..</text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.26%)</title><rect x="1095.5" y="1251.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1098.5" y="1262.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.18%)</title><rect x="1095.5" y="1235.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1098.5" y="1246.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.09%)</title><rect x="1097.6" y="1235.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1100.6" y="1246.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.09%)</title><rect x="1097.6" y="1219.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1100.6" y="1230.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.09%)</title><rect x="1097.6" y="1203.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1100.6" y="1214.0"></text>
</g>
<g>
<title>CodeBuffer::initialize_section_size(CodeSection*, int) (1 samples, 0.09%)</title><rect x="1097.6" y="1187.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1100.6" y="1198.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.09%)</title><rect x="1098.6" y="1251.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1101.6" y="1262.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.09%)</title><rect x="1098.6" y="1235.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1101.6" y="1246.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.09%)</title><rect x="1098.6" y="1219.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1101.6" y="1230.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 0.26%)</title><rect x="1099.6" y="1251.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1102.6" y="1262.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.26%)</title><rect x="1099.6" y="1235.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1102.6" y="1246.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.18%)</title><rect x="1100.7" y="1219.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1103.7" y="1230.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.18%)</title><rect x="1102.7" y="1251.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1105.7" y="1262.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.18%)</title><rect x="1102.7" y="1235.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1105.7" y="1246.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.18%)</title><rect x="1102.7" y="1219.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1105.7" y="1230.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.09%)</title><rect x="1102.7" y="1203.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1105.7" y="1214.0"></text>
</g>
<g>
<title>Node::needs_anti_dependence_check() const (1 samples, 0.09%)</title><rect x="1102.7" y="1187.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1105.7" y="1198.0"></text>
</g>
<g>
<title>MachProjNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1102.7" y="1171.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1105.7" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.09%)</title><rect x="1103.8" y="1203.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1106.8" y="1214.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.09%)</title><rect x="1103.8" y="1187.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1106.8" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (25 samples, 2.20%)</title><rect x="1104.8" y="1251.0" width="26.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1107.8" y="1262.0">P..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.09%)</title><rect x="1104.8" y="1235.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1107.8" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.09%)</title><rect x="1105.9" y="1235.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1108.9" y="1246.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.09%)</title><rect x="1105.9" y="1219.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1108.9" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.18%)</title><rect x="1106.9" y="1235.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1109.9" y="1246.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1106.9" y="1219.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1109.9" y="1230.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.09%)</title><rect x="1107.9" y="1219.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1110.9" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (7 samples, 0.62%)</title><rect x="1109.0" y="1235.0" width="7.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1112.0" y="1246.0"></text>
</g>
<g>
<title>decodeHeapOop_not_nullNode::rule() const (1 samples, 0.09%)</title><rect x="1115.2" y="1219.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1118.2" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 0.53%)</title><rect x="1116.3" y="1235.0" width="6.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1119.3" y="1246.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.09%)</title><rect x="1118.3" y="1219.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1121.3" y="1230.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.09%)</title><rect x="1119.4" y="1219.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1122.4" y="1230.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.09%)</title><rect x="1119.4" y="1203.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1122.4" y="1214.0"></text>
</g>
<g>
<title>rFlagsRegOper::type() const (1 samples, 0.09%)</title><rect x="1119.4" y="1187.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1122.4" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.18%)</title><rect x="1120.4" y="1219.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1123.4" y="1230.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1121.4" y="1203.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1124.4" y="1214.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 0.35%)</title><rect x="1122.5" y="1235.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1125.5" y="1246.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.09%)</title><rect x="1124.6" y="1219.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1127.6" y="1230.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.09%)</title><rect x="1125.6" y="1219.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1128.6" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.09%)</title><rect x="1126.6" y="1235.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1129.6" y="1246.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.09%)</title><rect x="1127.7" y="1235.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1130.7" y="1246.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.09%)</title><rect x="1128.7" y="1235.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1131.7" y="1246.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.09%)</title><rect x="1129.8" y="1235.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1132.8" y="1246.0"></text>
</g>
<g>
<title>PhasePeephole::do_transform() (1 samples, 0.09%)</title><rect x="1130.8" y="1251.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1133.8" y="1262.0"></text>
</g>
<g>
<title>Compile::Optimize() (46 samples, 4.05%)</title><rect x="1131.8" y="1267.0" width="47.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1134.8" y="1278.0">Comp..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.09%)</title><rect x="1131.8" y="1251.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1134.8" y="1262.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.09%)</title><rect x="1131.8" y="1235.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1134.8" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.09%)</title><rect x="1132.9" y="1251.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1135.9" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.09%)</title><rect x="1132.9" y="1235.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1135.9" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::optimize_ideal_graph(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1132.9" y="1219.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1135.9" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::optimize_ptr_compare(Node*) (1 samples, 0.09%)</title><rect x="1132.9" y="1203.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1135.9" y="1214.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.09%)</title><rect x="1133.9" y="1251.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1136.9" y="1262.0"></text>
</g>
<g>
<title>LoadBNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1133.9" y="1235.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1136.9" y="1246.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.09%)</title><rect x="1134.9" y="1251.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1137.9" y="1262.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.09%)</title><rect x="1134.9" y="1235.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1137.9" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (34 samples, 2.99%)</title><rect x="1136.0" y="1251.0" width="35.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1139.0" y="1262.0">Pha..</text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.09%)</title><rect x="1136.0" y="1235.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1139.0" y="1246.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.09%)</title><rect x="1136.0" y="1219.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1139.0" y="1230.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.09%)</title><rect x="1136.0" y="1203.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1139.0" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_counted_loop(Node*, IdealLoopTree*) (1 samples, 0.09%)</title><rect x="1136.0" y="1187.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1139.0" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_idom(Node*, Node*, unsigned int) (1 samples, 0.09%)</title><rect x="1136.0" y="1171.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1139.0" y="1182.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.09%)</title><rect x="1136.0" y="1155.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1139.0" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.26%)</title><rect x="1137.0" y="1235.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1140.0" y="1246.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.09%)</title><rect x="1139.1" y="1219.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.1" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (22 samples, 1.94%)</title><rect x="1140.1" y="1235.0" width="22.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1143.1" y="1246.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (17 samples, 1.50%)</title><rect x="1145.3" y="1219.0" width="17.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1148.3" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.18%)</title><rect x="1145.3" y="1203.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1148.3" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (15 samples, 1.32%)</title><rect x="1147.4" y="1203.0" width="15.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1150.4" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (5 samples, 0.44%)</title><rect x="1157.8" y="1187.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1160.8" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.18%)</title><rect x="1163.0" y="1235.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.0" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (4 samples, 0.35%)</title><rect x="1165.1" y="1235.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.1" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.09%)</title><rect x="1168.2" y="1219.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.2" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.09%)</title><rect x="1168.2" y="1203.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.2" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.09%)</title><rect x="1168.2" y="1187.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.2" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.18%)</title><rect x="1169.2" y="1235.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.2" y="1246.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1170.3" y="1219.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.3" y="1230.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.09%)</title><rect x="1170.3" y="1203.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.3" y="1214.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (7 samples, 0.62%)</title><rect x="1171.3" y="1251.0" width="7.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.3" y="1262.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (7 samples, 0.62%)</title><rect x="1171.3" y="1235.0" width="7.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.3" y="1246.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1171.3" y="1219.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.3" y="1230.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.18%)</title><rect x="1172.3" y="1219.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.3" y="1230.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.09%)</title><rect x="1173.4" y="1203.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.4" y="1214.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (3 samples, 0.26%)</title><rect x="1174.4" y="1219.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.4" y="1230.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (3 samples, 0.26%)</title><rect x="1174.4" y="1203.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.4" y="1214.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.09%)</title><rect x="1174.4" y="1187.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.4" y="1198.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.09%)</title><rect x="1175.5" y="1187.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.5" y="1198.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.09%)</title><rect x="1175.5" y="1171.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.5" y="1182.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1176.5" y="1187.0" width="1.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1179.5" y="1198.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1177.5" y="1219.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.5" y="1230.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.09%)</title><rect x="1177.5" y="1203.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.5" y="1214.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.09%)</title><rect x="1178.6" y="1251.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.6" y="1262.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.09%)</title><rect x="1178.6" y="1235.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.6" y="1246.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1178.6" y="1219.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.6" y="1230.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.09%)</title><rect x="1178.6" y="1203.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.6" y="1214.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.35%)</title><rect x="1179.6" y="1267.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.6" y="1278.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.35%)</title><rect x="1179.6" y="1251.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.6" y="1262.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.35%)</title><rect x="1179.6" y="1235.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.6" y="1246.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.35%)</title><rect x="1179.6" y="1219.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.6" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.35%)</title><rect x="1179.6" y="1203.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.6" y="1214.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.35%)</title><rect x="1179.6" y="1187.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.6" y="1198.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.35%)</title><rect x="1179.6" y="1171.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.6" y="1182.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.35%)</title><rect x="1179.6" y="1155.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.6" y="1166.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.35%)</title><rect x="1179.6" y="1139.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.6" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.35%)</title><rect x="1179.6" y="1123.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.6" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.35%)</title><rect x="1179.6" y="1107.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.6" y="1118.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.35%)</title><rect x="1179.6" y="1091.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.6" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.35%)</title><rect x="1179.6" y="1075.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.6" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.35%)</title><rect x="1179.6" y="1059.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.6" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.35%)</title><rect x="1179.6" y="1043.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.6" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.35%)</title><rect x="1179.6" y="1027.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.6" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.35%)</title><rect x="1179.6" y="1011.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.6" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.26%)</title><rect x="1179.6" y="995.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.6" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1179.6" y="979.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.6" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.26%)</title><rect x="1179.6" y="963.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.6" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.26%)</title><rect x="1179.6" y="947.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.6" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.26%)</title><rect x="1179.6" y="931.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.6" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.26%)</title><rect x="1179.6" y="915.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.6" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1179.6" y="899.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.6" y="910.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1179.6" y="883.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.6" y="894.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1179.6" y="867.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.6" y="878.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1179.6" y="851.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.6" y="862.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1179.6" y="835.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.6" y="846.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.09%)</title><rect x="1179.6" y="819.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.6" y="830.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.09%)</title><rect x="1179.6" y="803.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.6" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.7" y="883.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.7" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.7" y="867.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.7" y="851.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.7" y="835.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.7" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.7" y="819.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.7" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.7" y="803.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.7" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.7" y="787.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.7" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.7" y="771.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.7" y="755.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.7" y="739.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.7" y="723.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.7" y="707.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.7" y="718.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.7" y="691.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.7" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.7" y="675.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.7" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.7" y="659.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.7" y="643.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.7" y="627.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.7" y="611.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.7" y="595.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.7" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.7" y="579.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.7" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.7" y="563.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.7" y="547.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.7" y="531.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.7" y="515.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.7" y="499.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.7" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.7" y="483.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.7" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.7" y="467.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.7" y="451.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.7" y="435.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.7" y="419.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.7" y="403.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.7" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.7" y="387.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.7" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.7" y="371.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.7" y="355.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.7" y="339.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.7" y="323.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.7" y="307.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.7" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.7" y="291.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.7" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.7" y="275.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.7" y="259.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.7" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.7" y="243.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.7" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.7" y="227.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.7" y="238.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.09%)</title><rect x="1180.7" y="211.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.7" y="222.0"></text>
</g>
<g>
<title>Parse::call_register_finalizer() (1 samples, 0.09%)</title><rect x="1180.7" y="195.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.7" y="206.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.09%)</title><rect x="1180.7" y="179.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.7" y="190.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1180.7" y="163.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.7" y="174.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1180.7" y="147.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.7" y="158.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1180.7" y="131.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.7" y="142.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.09%)</title><rect x="1180.7" y="115.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.7" y="126.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1180.7" y="99.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.7" y="110.0"></text>
</g>
<g>
<title>TypeKlassPtr::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="1180.7" y="83.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.7" y="94.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1180.7" y="67.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.7" y="78.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1180.7" y="51.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.7" y="62.0"></text>
</g>
<g>
<title>TypeKlassPtr::hash() const (1 samples, 0.09%)</title><rect x="1180.7" y="35.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.7" y="46.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.09%)</title><rect x="1181.7" y="899.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.7" y="910.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.09%)</title><rect x="1181.7" y="883.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.7" y="894.0"></text>
</g>
<g>
<title>GraphKit::null_check_oop(Node*, Node**, bool, bool) (1 samples, 0.09%)</title><rect x="1181.7" y="867.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.7" y="878.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.09%)</title><rect x="1181.7" y="851.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.7" y="862.0"></text>
</g>
<g>
<title>GraphKit::cast_not_null(Node*, bool) (1 samples, 0.09%)</title><rect x="1181.7" y="835.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.7" y="846.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1181.7" y="819.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.7" y="830.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1181.7" y="803.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.7" y="814.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.09%)</title><rect x="1181.7" y="787.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.7" y="798.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1182.7" y="995.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.7" y="1006.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1182.7" y="979.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.7" y="990.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.09%)</title><rect x="1182.7" y="963.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.7" y="974.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.09%)</title><rect x="1182.7" y="947.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.7" y="958.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.09%)</title><rect x="1182.7" y="931.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.7" y="942.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.09%)</title><rect x="1182.7" y="915.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.7" y="926.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (2 samples, 0.18%)</title><rect x="1183.8" y="1267.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.8" y="1278.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.09%)</title><rect x="1183.8" y="1251.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.8" y="1262.0"></text>
</g>
<g>
<title>Compile::update_dead_node_list(Unique_Node_List&amp;) (1 samples, 0.09%)</title><rect x="1184.8" y="1251.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.8" y="1262.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1185.8" y="1299.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.8" y="1310.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.09%)</title><rect x="1185.8" y="1283.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.8" y="1294.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.09%)</title><rect x="1185.8" y="1267.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.8" y="1278.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.09%)</title><rect x="1185.8" y="1251.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.8" y="1262.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.09%)</title><rect x="1185.8" y="1235.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.8" y="1246.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1185.8" y="1219.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.8" y="1230.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.09%)</title><rect x="1185.8" y="1203.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.8" y="1214.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.09%)</title><rect x="1185.8" y="1187.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.8" y="1198.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.09%)</title><rect x="1185.8" y="1171.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.8" y="1182.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.09%)</title><rect x="1185.8" y="1155.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.8" y="1166.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1185.8" y="1139.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.8" y="1150.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.09%)</title><rect x="1185.8" y="1123.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.8" y="1134.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.09%)</title><rect x="1185.8" y="1107.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.8" y="1118.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.09%)</title><rect x="1185.8" y="1091.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.8" y="1102.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.09%)</title><rect x="1185.8" y="1075.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.8" y="1086.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1185.8" y="1059.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.8" y="1070.0"></text>
</g>
<g>
<title>GraphBuilder::copy_state_for_exception() (1 samples, 0.09%)</title><rect x="1185.8" y="1043.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.8" y="1054.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.09%)</title><rect x="1185.8" y="1027.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.8" y="1038.0"></text>
</g>
<g>
<title>elapsedTimer::start() (1 samples, 0.09%)</title><rect x="1186.9" y="1315.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.9" y="1326.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.09%)</title><rect x="1186.9" y="1299.0" width="1.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1189.9" y="1310.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="1186.9" y="1283.0" width="1.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1189.9" y="1294.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.18%)</title><rect x="1187.9" y="1363.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.9" y="1374.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.18%)</title><rect x="1187.9" y="1347.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.9" y="1358.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.09%)</title><rect x="1187.9" y="1331.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.9" y="1342.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.09%)</title><rect x="1189.0" y="1331.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1192.0" y="1342.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.09%)</title><rect x="1189.0" y="1315.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1192.0" y="1326.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.09%)</title><rect x="1189.0" y="1299.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.0" y="1310.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.09%)</title><rect x="1189.0" y="1283.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1192.0" y="1294.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.09%)</title><rect x="1189.0" y="1267.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1192.0" y="1278.0"></text>
</g>
<g>
<title>DerivedPointerTable::update_pointers() (1 samples, 0.09%)</title><rect x="1189.0" y="1251.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1192.0" y="1262.0"></text>
</g>
</g>
</svg>
